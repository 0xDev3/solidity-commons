{
  "schema": "../schema.json",
  "tags": [],
  "name": "FController",
  "description": "ParValue's Controller Contract.",
  "eventDecorators": [
    {
      "signature": "ActionPaused(string,bool)",
      "name": "ActionPaused",
      "description": "Emitted when an action is paused globally. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "action",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "pauseState",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ActionPaused(address,string,bool)",
      "name": "ActionPaused",
      "description": "Emitted when an action is paused on a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The address of the underlying asset of the reserve.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "implementation",
          "description": "The new subToken implementation*.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proxy",
          "description": "The variable debt token proxy address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ContributorParSpeedUpdated(address,uint256)",
      "name": "ContributorParSpeedUpdated",
      "description": "Emitted when a new COMP speed is set for a contributor. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "contributor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newSpeed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DistributedBorrowerPar(address,address,uint256,uint256)",
      "name": "DistributedBorrowerPar",
      "description": "Emitted when COMP is distributed to a borrower. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "borrower",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "parDelta",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "parBorrowIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DistributedSupplierPar(address,address,uint256,uint256)",
      "name": "DistributedSupplierPar",
      "description": "Emitted when COMP is distributed to a supplier. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "supplier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "parDelta",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "parSupplyIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Failure(uint256,uint256,uint256)",
      "name": "Failure",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The address of the underlying asset of the reserve.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "implementation",
          "description": "The new subToken implementation*.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proxy",
          "description": "The variable debt token proxy address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewBorrowCap(address,uint256)",
      "name": "NewBorrowCap",
      "description": "Emitted when borrow cap for a rToken is changed. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newBorrowCap",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewBorrowCapGuardian(address,address)",
      "name": "NewBorrowCapGuardian",
      "description": "Emitted when borrow cap guardian is changed. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "oldBorrowCapGuardian",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBorrowCapGuardian",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewCloseFactor(uint256,uint256)",
      "name": "NewCloseFactor",
      "description": "Emitted when close factor is changed by admin. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "oldCloseFactorMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newCloseFactorMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewLiquidationIncentive(uint256,uint256)",
      "name": "NewLiquidationIncentive",
      "description": "Emitted when liquidation incentive is changed by admin. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "oldLiquidationIncentiveMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newLiquidationIncentiveMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewPauseGuardian(address,address)",
      "name": "NewPauseGuardian",
      "description": "Emitted when pause guardian is changed. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "oldPauseGuardian",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newPauseGuardian",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewPriceOracle(address,address)",
      "name": "NewPriceOracle",
      "description": "Emitted when price oracle is changed. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "oldPriceOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newPriceOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ParGranted(address,uint256)",
      "name": "ParGranted",
      "description": "Emitted when COMP is granted by admin. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ParSpeedUpdated(address,uint256)",
      "name": "ParSpeedUpdated",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newSpeed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_become(address)",
      "name": "_become",
      "description": "",
      "parameterDecorators": [
        {
          "name": "unitroller",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_borrowGuardianPaused()",
      "name": "_borrowGuardianPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_grantPar(address,uint256)",
      "name": "_grantPar",
      "description": "Transfer COMP to the recipient. Note: If there is not enough COMP, we do not perform the transfer all.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "The address of the recipient to transfer COMP to.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of COMP to (possibly) transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_mintGuardianPaused()",
      "name": "_mintGuardianPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_setBorrowCapGuardian(address)",
      "name": "_setBorrowCapGuardian",
      "description": "Admin function to change the Borrow Cap Guardian.",
      "parameterDecorators": [
        {
          "name": "newBorrowCapGuardian",
          "description": "The address of the new Borrow Cap Guardian.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setBorrowPaused(address,bool)",
      "name": "_setBorrowPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "state",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setCloseFactor(uint256)",
      "name": "_setCloseFactor",
      "description": "Sets the closeFactor used when liquidating borrows. Admin function to set closeFactor.",
      "parameterDecorators": [
        {
          "name": "newCloseFactorMantissa",
          "description": "New close factor, scaled by 1e18.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint 0=success, otherwise a failure.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setContributorParSpeed(address,uint256)",
      "name": "_setContributorParSpeed",
      "description": "Set COMP speed for a single contributor.",
      "parameterDecorators": [
        {
          "name": "contributor",
          "description": "The contributor whose COMP speed to update.",
          "recommendedTypes": []
        },
        {
          "name": "parSpeed",
          "description": "New COMP speed for contributor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setLiquidationIncentive(uint256)",
      "name": "_setLiquidationIncentive",
      "description": "Sets liquidationIncentive. Admin function to set liquidationIncentive.",
      "parameterDecorators": [
        {
          "name": "newLiquidationIncentiveMantissa",
          "description": "New liquidationIncentive scaled by 1e18.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint 0=success, otherwise a failure. (See ErrorReporter for details).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setMarketBorrowCaps(address[],uint256[])",
      "name": "_setMarketBorrowCaps",
      "description": "Set the given borrow caps for the given rToken markets. Borrowing that brings total borrows to or above borrow cap will revert. Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.",
      "parameterDecorators": [
        {
          "name": "rTokens",
          "description": "The addresses of the markets (tokens) to change the borrow caps for.",
          "recommendedTypes": []
        },
        {
          "name": "newBorrowCaps",
          "description": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setMintPaused(address,bool)",
      "name": "_setMintPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "state",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setParSpeed(address,uint256)",
      "name": "_setParSpeed",
      "description": "Set COMP speed for a single market.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "The market whose COMP speed to update.",
          "recommendedTypes": []
        },
        {
          "name": "parSpeed",
          "description": "New COMP speed for market.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setPauseGuardian(address)",
      "name": "_setPauseGuardian",
      "description": "Admin function to change the Pause Guardian.",
      "parameterDecorators": [
        {
          "name": "newPauseGuardian",
          "description": "The address of the new Pause Guardian.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint 0=success, otherwise a failure. (See enum Error for details).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setPriceOracle(address)",
      "name": "_setPriceOracle",
      "description": "Sets a new price oracle for the controller. Admin function to set a new price oracle.",
      "parameterDecorators": [
        {
          "name": "newOracle",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setPriceStorage(address)",
      "name": "_setPriceStorage",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newPriceStorage",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setSeizePaused(bool)",
      "name": "_setSeizePaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "state",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setTransferPaused(bool)",
      "name": "_setTransferPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "state",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "admin()",
      "name": "admin",
      "description": "Administrator for this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "borrowAllowed(address,address,uint256)",
      "name": "borrowAllowed",
      "description": "Checks if the account should be allowed to borrow the underlying asset of the given market.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "The market to verify the borrow against.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The account which would borrow the asset.",
          "recommendedTypes": []
        },
        {
          "name": "borrowAmount",
          "description": "The amount of underlying the account would borrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "borrowCapGuardian()",
      "name": "borrowCapGuardian",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "borrowCaps(address)",
      "name": "borrowCaps",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "borrowGuardianPaused(address)",
      "name": "borrowGuardianPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "borrowVerify(address,address,uint256)",
      "name": "borrowVerify",
      "description": "Validates borrow and reverts on REJECTION_IX. May emit logs.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "Asset whose underlying is being borrowed.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address borrowing the underlying.",
          "recommendedTypes": []
        },
        {
          "name": "borrowAmount",
          "description": "The amount of the underlying asset requested to borrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimPar(address[],address[],bool,bool)",
      "name": "claimPar",
      "description": "Claim all par accrued by the holders.",
      "parameterDecorators": [
        {
          "name": "holders",
          "description": "The addresses to claim COMP for.",
          "recommendedTypes": []
        },
        {
          "name": "rTokens",
          "description": "The list of markets to claim COMP in.",
          "recommendedTypes": []
        },
        {
          "name": "borrowers",
          "description": "Whether or not to claim COMP earned by borrowing.",
          "recommendedTypes": []
        },
        {
          "name": "suppliers",
          "description": "Whether or not to claim COMP earned by supplying.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimPar(address,address[])",
      "name": "claimPar",
      "description": "Claim all the par accrued by holder in the specified markets.",
      "parameterDecorators": [
        {
          "name": "holder",
          "description": "The address to claim COMP for.",
          "recommendedTypes": []
        },
        {
          "name": "rTokens",
          "description": "The list of markets to claim COMP in.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimPar(address)",
      "name": "claimPar",
      "description": "Claim all the par accrued by holder in all markets.",
      "parameterDecorators": [
        {
          "name": "holder",
          "description": "The address to claim PAR for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "closeFactorMantissa()",
      "name": "closeFactorMantissa",
      "description": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "controllerImplementation()",
      "name": "controllerImplementation",
      "description": "Active brains of Unitroller.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "controllerMembershipAddress()",
      "name": "controllerMembershipAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccountLiquidity(address)",
      "name": "getAccountLiquidity",
      "description": "Determine the current account liquidity wrt collateral requirements.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBlockNumber()",
      "name": "getBlockNumber",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getHypotheticalAccountLiquidity(address,address,uint256,uint256)",
      "name": "getHypotheticalAccountLiquidity",
      "description": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The account to determine liquidity for.",
          "recommendedTypes": []
        },
        {
          "name": "rTokenModify",
          "description": "The market to hypothetically redeem/borrow in.",
          "recommendedTypes": []
        },
        {
          "name": "redeemTokens",
          "description": "The number of tokens to hypothetically redeem.",
          "recommendedTypes": []
        },
        {
          "name": "borrowAmount",
          "description": "The amount of underlying to hypothetically borrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOracleUnderlyingPrice(address)",
      "name": "getOracleUnderlyingPrice",
      "description": "",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isController()",
      "name": "isController",
      "description": "Indicator that this is a Controller contract (for inspection).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastContributorBlock(address)",
      "name": "lastContributorBlock",
      "description": "Last block at which a contributor's PAR rewards have been allocated.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidateBorrowAllowed(address,address,address,address,uint256)",
      "name": "liquidateBorrowAllowed",
      "description": "Checks if the liquidation should be allowed to occur.",
      "parameterDecorators": [
        {
          "name": "rTokenBorrowed",
          "description": "Asset which was borrowed by the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "rTokenCollateral",
          "description": "Asset which was used as collateral and will be seized.",
          "recommendedTypes": []
        },
        {
          "name": "liquidator",
          "description": "The address repaying the borrow and seizing the collateral.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "repayAmount",
          "description": "The amount of underlying being repaid.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "liquidateBorrowVerify(address,address,address,address,uint256,uint256)",
      "name": "liquidateBorrowVerify",
      "description": "Validates liquidateBorrow and reverts on REJECTION_IX. May emit logs.",
      "parameterDecorators": [
        {
          "name": "rTokenBorrowed",
          "description": "Asset which was borrowed by the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "rTokenCollateral",
          "description": "Asset which was used as collateral and will be seized.",
          "recommendedTypes": []
        },
        {
          "name": "liquidator",
          "description": "The address repaying the borrow and seizing the collateral.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "actualRepayAmount",
          "description": "The amount of underlying being repaid.",
          "recommendedTypes": []
        },
        {
          "name": "seizeTokens",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "liquidateCalculateSeizeTokens(address,address,uint256)",
      "name": "liquidateCalculateSeizeTokens",
      "description": "Calculate number of tokens of collateral asset to seize given an underlying amount. Used in liquidation (called in rToken.liquidateBorrowFresh).",
      "parameterDecorators": [
        {
          "name": "rTokenBorrowed",
          "description": "The address of the borrowed rToken.",
          "recommendedTypes": []
        },
        {
          "name": "rTokenCollateral",
          "description": "The address of the collateral rToken.",
          "recommendedTypes": []
        },
        {
          "name": "actualRepayAmount",
          "description": "The amount of rTokenBorrowed underlying to convert into rTokenCollateral tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidationIncentiveMantissa()",
      "name": "liquidationIncentiveMantissa",
      "description": "Multiplier representing the discount on collateral that a liquidator receives.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxAssets()",
      "name": "maxAssets",
      "description": "Max number of assets a single account can participate in (borrow or use as collateral).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintAllowed(address,address,uint256)",
      "name": "mintAllowed",
      "description": "Checks if the account should be allowed to mint tokens in the given market.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "The market to verify the mint against.",
          "recommendedTypes": []
        },
        {
          "name": "minter",
          "description": "The account which would get the minted tokens.",
          "recommendedTypes": []
        },
        {
          "name": "mintAmount",
          "description": "The amount of underlying being supplied to the market for tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintGuardianPaused(address)",
      "name": "mintGuardianPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintVerify(address,address,uint256,uint256)",
      "name": "mintVerify",
      "description": "Validates mint and reverts on REJECTION_IX. May emit logs.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "Asset being minted.",
          "recommendedTypes": []
        },
        {
          "name": "minter",
          "description": "The address minting the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "actualMintAmount",
          "description": "The amount of the underlying asset being minted.",
          "recommendedTypes": []
        },
        {
          "name": "mintTokens",
          "description": "The number of tokens being minted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "oracle()",
      "name": "oracle",
      "description": "Oracle which gives the price of any given asset.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "parAccrued(address)",
      "name": "parAccrued",
      "description": "The PAR accrued but not yet transferred to each user.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "parAddress()",
      "name": "parAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "parBorrowState(address)",
      "name": "parBorrowState",
      "description": "The PAR market borrow state for each market.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint224"
        },
        {
          "name": "block",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "parBorrowerIndex(address,address)",
      "name": "parBorrowerIndex",
      "description": "The PAR borrow index for each market for each borrower as of the last time they accrued PAR.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "parContributorSpeeds(address)",
      "name": "parContributorSpeeds",
      "description": "The portion of PAR that each contributor receives per block.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "parInitialIndex()",
      "name": "parInitialIndex",
      "description": "The initial COMP index for a market.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint224"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "parRate()",
      "name": "parRate",
      "description": "The rate at which the flywheel distributes PAR, per block.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "parSpeeds(address)",
      "name": "parSpeeds",
      "description": "The portion of parRate that each market currently receives.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "parSupplierIndex(address,address)",
      "name": "parSupplierIndex",
      "description": "The PAR borrow index for each market for each supplier as of the last time they accrued PAR.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "parSupplyState(address)",
      "name": "parSupplyState",
      "description": "The PAR market supply state for each market.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint224"
        },
        {
          "name": "block",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pauseGuardian()",
      "name": "pauseGuardian",
      "description": "The Pause Guardian can pause certain actions as a safety mechanism. Actions which allow users to remove their own assets cannot be paused. Liquidation / seizing / transfer can only be paused globally, not by market.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingAdmin()",
      "name": "pendingAdmin",
      "description": "Pending administrator for this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingControllerImplementation()",
      "name": "pendingControllerImplementation",
      "description": "Pending brains of Unitroller.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "priceStorage()",
      "name": "priceStorage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemAllowed(address,address,uint256)",
      "name": "redeemAllowed",
      "description": "Checks if the account should be allowed to redeem tokens in the given market.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "The market to verify the redeem against.",
          "recommendedTypes": []
        },
        {
          "name": "redeemer",
          "description": "The account which would redeem the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "redeemTokens",
          "description": "The number of rTokens for the underlying asset in the market.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemAllowedControllerMembership(address,address,uint256)",
      "name": "redeemAllowedControllerMembership",
      "description": "",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "redeemer",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "redeemTokens",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemVerify(address,address,uint256,uint256)",
      "name": "redeemVerify",
      "description": "Validates redeem and reverts on REJECTION_IX. May emit logs.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "Asset being redeemed.",
          "recommendedTypes": []
        },
        {
          "name": "redeemer",
          "description": "The address redeeming the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "redeemAmount",
          "description": "The amount of the underlying asset being redeemed.",
          "recommendedTypes": []
        },
        {
          "name": "redeemTokens",
          "description": "The number of tokens being redeemed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "repayBorrowAllowed(address,address,address,uint256)",
      "name": "repayBorrowAllowed",
      "description": "Checks if the account should be allowed to repay a borrow in the given market.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "The market to verify the repay against.",
          "recommendedTypes": []
        },
        {
          "name": "payer",
          "description": "The account which would repay the asset.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The account which would borrowed the asset.",
          "recommendedTypes": []
        },
        {
          "name": "repayAmount",
          "description": "The amount of the underlying asset the account would repay.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "repayBorrowVerify(address,address,address,uint256,uint256)",
      "name": "repayBorrowVerify",
      "description": "Validates repayBorrow and reverts on REJECTION_IX. May emit logs.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "Asset being repaid.",
          "recommendedTypes": []
        },
        {
          "name": "payer",
          "description": "The address repaying the borrow.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "actualRepayAmount",
          "description": "The amount of underlying being repaid.",
          "recommendedTypes": []
        },
        {
          "name": "borrowerIndex",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "seizeAllowed(address,address,address,address,uint256)",
      "name": "seizeAllowed",
      "description": "Checks if the seizing of assets should be allowed to occur.",
      "parameterDecorators": [
        {
          "name": "rTokenCollateral",
          "description": "Asset which was used as collateral and will be seized.",
          "recommendedTypes": []
        },
        {
          "name": "rTokenBorrowed",
          "description": "Asset which was borrowed by the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "liquidator",
          "description": "The address repaying the borrow and seizing the collateral.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "seizeTokens",
          "description": "The number of collateral tokens to seize.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "seizeGuardianPaused()",
      "name": "seizeGuardianPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "seizeVerify(address,address,address,address,uint256)",
      "name": "seizeVerify",
      "description": "Validates seize and reverts on REJECTION_IX. May emit logs.",
      "parameterDecorators": [
        {
          "name": "rTokenCollateral",
          "description": "Asset which was used as collateral and will be seized.",
          "recommendedTypes": []
        },
        {
          "name": "rTokenBorrowed",
          "description": "Asset which was borrowed by the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "liquidator",
          "description": "The address repaying the borrow and seizing the collateral.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "seizeTokens",
          "description": "The number of collateral tokens to seize.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setControllerAddress(address)",
      "name": "setControllerAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_controllerAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setControllerMembershipAddress(address)",
      "name": "setControllerMembershipAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_controllerMembershipAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferAllowed(address,address,address,uint256)",
      "name": "transferAllowed",
      "description": "Checks if the account should be allowed to transfer tokens in the given market.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "The market to verify the transfer against.",
          "recommendedTypes": []
        },
        {
          "name": "src",
          "description": "The account which sources the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "dst",
          "description": "The account which receives the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "transferTokens",
          "description": "The number of rTokens to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferGuardianPaused()",
      "name": "transferGuardianPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferVerify(address,address,address,uint256)",
      "name": "transferVerify",
      "description": "Validates transfer and reverts on REJECTION_IX. May emit logs.",
      "parameterDecorators": [
        {
          "name": "rToken",
          "description": "Asset being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "src",
          "description": "The account which sources the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "dst",
          "description": "The account which receives the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "transferTokens",
          "description": "The number of rTokens to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateContributorRewards(address)",
      "name": "updateContributorRewards",
      "description": "Calculate additional accrued COMP for a contributor since last accrual.",
      "parameterDecorators": [
        {
          "name": "contributor",
          "description": "The address to calculate contributor rewards for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}