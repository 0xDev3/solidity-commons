{
  "schema": "../schema.json",
  "tags": [
    "vaults"
  ],
  "name": "PWNVault",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "VaultProxy(tuple,address,address)",
      "name": "VaultProxy",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "origin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "VaultPull(tuple,address)",
      "name": "VaultPull",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "VaultPush(tuple,address)",
      "name": "VaultPush",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "origin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "PWN()",
      "name": "PWN",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
      "name": "onERC1155BatchReceived",
      "description": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "The address which initiated the batch transfer (i.e. msg.sender).",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "The address which previously owned the token.",
          "recommendedTypes": []
        },
        {
          "name": "ids",
          "description": "An array containing ids of each token being transferred (order and length must match values array).",
          "recommendedTypes": []
        },
        {
          "name": "values",
          "description": "An array containing amounts of each token being transferred (order and length must match ids array).",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Additional data with no specified format.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed.",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onERC1155Received(address,address,uint256,uint256,bytes)",
      "name": "onERC1155Received",
      "description": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "The address which initiated the transfer (i.e. msg.sender).",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "The address which previously owned the token.",
          "recommendedTypes": []
        },
        {
          "name": "id",
          "description": "The ID of the token being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The amount of tokens being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Additional data with no specified format.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed.",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pull(tuple(address,uint8,uint256,uint256),address)",
      "name": "pull",
      "description": "pull. function pulling an asset FROM the vault, sending to a defined recipientthis is used for unlocking the collateral on revocations & claims or when claiming a paidback loan.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "An asset construct - for definition see { MultiToken.sol }.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "assetAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "category",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "id",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "_beneficiary",
          "description": "An address of the recipient of the asset - is set in the PWN logic contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pullProxy(tuple(address,uint8,uint256,uint256),address,address)",
      "name": "pullProxy",
      "description": "pullProxy. function pulling an asset FROM a lender, sending to a borrowerthis function assumes prior approval for the asset to be spend by the borrower address.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "An asset construct - for definition see { MultiToken.sol }.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "assetAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "category",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "id",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "_origin",
          "description": "An address of the lender who is providing the loan asset.",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "An address of the recipient of the asset - is set in the PWN logic contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "push(tuple(address,uint8,uint256,uint256),address)",
      "name": "push",
      "description": "push. function accessing an asset and pushing it INTO the vaultthe function assumes a prior token approval was made with the PWNVault.address to be approved.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "An asset construct - for definition see { MultiToken.sol }.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "assetAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "category",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "id",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "_origin",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPWN(address)",
      "name": "setPWN",
      "description": "setPWN. An essential setup function. Has to be called once PWN contract was deployed.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "Identifying the PWN contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}