{
  "schema": "../schema.json",
  "tags": [],
  "name": "Challenge",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AsserterTimedOut()",
      "name": "AsserterTimedOut",
      "description": "Emitted when an account withdraws funds from RelayHub.",
      "parameterDecorators": []
    },
    {
      "signature": "Bisected(bytes32,uint256,uint256,bytes32[])",
      "name": "Bisected",
      "description": "Emitted when an account withdraws funds from RelayHub.",
      "parameterDecorators": [
        {
          "name": "challengeRoot",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "challengedSegmentStart",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "challengedSegmentLength",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "chainHashes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ChallengerTimedOut()",
      "name": "ChallengerTimedOut",
      "description": "Emitted when an account withdraws funds from RelayHub.",
      "parameterDecorators": []
    },
    {
      "signature": "ContinuedExecutionProven()",
      "name": "ContinuedExecutionProven",
      "description": "Emitted when an account withdraws funds from RelayHub.",
      "parameterDecorators": []
    },
    {
      "signature": "InitiatedChallenge()",
      "name": "InitiatedChallenge",
      "description": "Emitted when an account withdraws funds from RelayHub.",
      "parameterDecorators": []
    },
    {
      "signature": "OneStepProofCompleted()",
      "name": "OneStepProofCompleted",
      "description": "Emitted when an account withdraws funds from RelayHub.",
      "parameterDecorators": []
    }
  ],
  "functionDecorators": [
    {
      "signature": "asserter()",
      "name": "asserter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "asserterTimeLeft()",
      "name": "asserterTimeLeft",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bisectExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32,bytes32[])",
      "name": "bisectExecution",
      "description": "Initiate the next round in the bisection by objecting to execution correctness with a bisection of an execution segment with the same length but a different endpoint. This is either the initial move or follows another execution objection.",
      "parameterDecorators": [
        {
          "name": "_merkleNodes",
          "description": "List of hashes of stubs in the merkle root of segments left by the previous round.",
          "recommendedTypes": []
        },
        {
          "name": "_merkleRoute",
          "description": "Bitmap marking whether the path went left or right at each height.",
          "recommendedTypes": []
        },
        {
          "name": "_challengedSegmentStart",
          "description": "Offset of the challenged segment into the original challenged segment.",
          "recommendedTypes": []
        },
        {
          "name": "_challengedSegmentLength",
          "description": "Number of messages in the challenged segment.",
          "recommendedTypes": []
        },
        {
          "name": "_oldEndHash",
          "description": "Hash of the end of the challenged segment. This must be different than the new end since the challenger is disagreeing.",
          "recommendedTypes": []
        },
        {
          "name": "_gasUsedBefore",
          "description": "Amount of gas used at the beginning of the challenged segment.",
          "recommendedTypes": []
        },
        {
          "name": "_assertionRest",
          "description": "Hash of the rest of the assertion at the beginning of the challenged segment.",
          "recommendedTypes": []
        },
        {
          "name": "_chainHashes",
          "description": "Array of intermediate hashes of the challenged segment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "bridges(uint256)",
      "name": "bridges",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challengeState()",
      "name": "challengeState",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challenger()",
      "name": "challenger",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challengerTimeLeft()",
      "name": "challengerTimeLeft",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "clearChallenge()",
      "name": "clearChallenge",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "currentResponder()",
      "name": "currentResponder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentResponderTimeLeft()",
      "name": "currentResponderTimeLeft",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executors(uint256)",
      "name": "executors",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initializeChallenge(address[],address,bytes32,uint256,address,address,uint256,uint256,address,address)",
      "name": "initializeChallenge",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_executors",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_resultReceiver",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_executionHash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxMessageCount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_asserter",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_challenger",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_asserterTimeLeft",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_challengerTimeLeft",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_sequencerBridge",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_delayedBridge",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isMaster()",
      "name": "isMaster",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastMoveBlock()",
      "name": "lastMoveBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oneStepProveExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32[2],uint256[3],bytes,bytes,uint8)",
      "name": "oneStepProveExecution",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_merkleNodes",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_merkleRoute",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_challengedSegmentStart",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_challengedSegmentLength",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_oldEndHash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_initialMessagesRead",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_initialAccs",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_initialState",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_executionProof",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bufferProof",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "prover",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proveContinuedExecution(bytes32[],uint256,uint256,uint256,bytes32,uint256,bytes32)",
      "name": "proveContinuedExecution",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_merkleNodes",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_merkleRoute",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_challengedSegmentStart",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_challengedSegmentLength",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_oldEndHash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_gasUsedBefore",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_assertionRest",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "timeout()",
      "name": "timeout",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "turn()",
      "name": "turn",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}