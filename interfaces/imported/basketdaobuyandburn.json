{
  "schema": "../schema.json",
  "tags": [
    "dao"
  ],
  "name": "BasketDAOBuyAndBurn",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "borrowProxy()",
      "name": "borrowProxy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "buyAndRedeemCallback(uint256,uint256,address[],address[])",
      "name": "buyAndRedeemCallback",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_amountBorrowed",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amountOfProfitToReturn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "underlyings",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "routers",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "delegateCall(address,bytes)",
      "name": "delegateCall",
      "description": "",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "liquidityPool()",
      "name": "liquidityPool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "safeFlashLoanBuyAndRedeem(uint256,uint256,uint256,address[],address[])",
      "name": "safeFlashLoanBuyAndRedeem",
      "description": "The main function.",
      "parameterDecorators": [
        {
          "name": "_amountToBorrow",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minimalProfitability",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amountOfProfitToReturn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "underlyings",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "routers",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBorrowProxy(address)",
      "name": "setBorrowProxy",
      "description": "Set the borrow proxy expected by this contract. This function can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "_newBorrowProxy",
          "description": "The new borrow proxy expected by this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setLiquidityPool(address)",
      "name": "setLiquidityPool",
      "description": "Set the liquidity pool used by this contract. This function can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "_newLiquidityPool",
          "description": "The new liquidity pool used by this contract. It must be a payable address, because this contract needs to be able to return borrowed assets and profits to the liquidty pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwner(address)",
      "name": "setOwner",
      "description": "Set the owner of this contract. This function can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "The new owner of this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawEth(uint256)",
      "name": "withdrawEth",
      "description": "Function that allows to withdraw ETH that are sitting on this contract to the owner address.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawTokens(address)",
      "name": "withdrawTokens",
      "description": "Function that allows to withdraw ERC-20 tokens that are sitting on this contract to the owner address. Uses safeTransfer to deal with non-standard tokens like USDT.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}