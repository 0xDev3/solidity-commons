{
  "schema": "../schema.json",
  "tags": [
    "bridges"
  ],
  "name": "ERC721Handler",
  "description": "Handles ERC721 deposits and deposit executions. This contract is intended to be used with the Bridge contract.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "_bridgeAddress()",
      "name": "_bridgeAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_burnList(address)",
      "name": "_burnList",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_contractWhitelist(address)",
      "name": "_contractWhitelist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_depositRecords(uint8,uint64)",
      "name": "_depositRecords",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_tokenAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "_lenDestinationRecipientAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "_destinationChainID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "_resourceID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "_destinationRecipientAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        },
        {
          "name": "_depositer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "_tokenID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_metaData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_resourceIDToTokenContractAddress(bytes32)",
      "name": "_resourceIDToTokenContractAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_tokenContractAddressToResourceID(address)",
      "name": "_tokenContractAddressToResourceID",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(bytes32,uint8,uint64,address,bytes)",
      "name": "deposit",
      "description": "A deposit is initiatied by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: tokenID uint256 bytes 0 - 32 destinationRecipientAddress length uint256 bytes 32 - 64 destinationRecipientAddress bytes bytes 64 - (64 + len(destinationRecipientAddress))If the corresponding {tokenAddress} for the parsed {resourceID} supports {_INTERFACE_ERC721_METADATA}, then {metaData} will be set according to the {tokenURI} method in the token contract. Depending if the corresponding {tokenAddress} for the parsed {resourceID} is marked true in {_burnList}, deposited tokens will be burned, if not, they will be locked.",
      "parameterDecorators": [
        {
          "name": "resourceID",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "destinationChainID",
          "description": "Chain ID of chain token is expected to be bridged to.",
          "recommendedTypes": []
        },
        {
          "name": "depositNonce",
          "description": "This value is generated as an ID by the Bridge contract.",
          "recommendedTypes": []
        },
        {
          "name": "depositer",
          "description": "Address of account making the deposit in the Bridge contract.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Consists of: {resourceID}, {tokenID}, {lenDestinationRecipientAddress}, and {destinationRecipientAddress} all padded to 32 bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeProposal(bytes32,bytes)",
      "name": "executeProposal",
      "description": "Proposal execution should be initiated when a proposal is finalized in the Bridge contract. by a relayer on the deposit's destination chain.Data passed into the function should be constructed as follows: tokenID uint256 bytes 0 - 32 destinationRecipientAddress length uint256 bytes 32 - 64 destinationRecipientAddress bytes bytes 64 - (64 + len(destinationRecipientAddress)) metadata length uint256 bytes (64 + len(destinationRecipientAddress)) - (64 + len(destinationRecipientAddress) + 32) metadata bytes bytes (64 + len(destinationRecipientAddress) + 32) - END.",
      "parameterDecorators": [
        {
          "name": "resourceID",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Consists of {tokenID}, {resourceID}, {lenDestinationRecipientAddress}, {destinationRecipientAddress}, {lenMeta}, and {metaData} all padded to 32 bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fundERC721(address,address,uint256)",
      "name": "fundERC721",
      "description": "Used to transfer tokens into the safe to fund proposals.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "Address of ERC721 to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "owner",
          "description": "Address of current token owner.",
          "recommendedTypes": []
        },
        {
          "name": "tokenID",
          "description": "ID of token to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getDepositRecord(uint64,uint8)",
      "name": "getDepositRecord",
      "description": "",
      "parameterDecorators": [
        {
          "name": "depositNonce",
          "description": "This ID will have been generated by the Bridge contract.",
          "recommendedTypes": []
        },
        {
          "name": "destId",
          "description": "ID of chain deposit will be bridged to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "DepositRecord which consists of: - _tokenAddress Address used when {deposit} was executed. - _destinationChainID ChainID deposited tokens are intended to end up on. - _resourceID ResourceID used when {deposit} was executed. - _lenDestinationRecipientAddress Used to parse recipient's address from {_destinationRecipientAddress} - _destinationRecipientAddress Address tokens are intended to be deposited to on desitnation chain. - _depositer Address that initially called {deposit} in the Bridge contract. - _tokenID ID of ERC721. - _metaData Optional ERC721 metadata.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setBurnable(address)",
      "name": "setBurnable",
      "description": "First verifies {contractAddress} is whitelisted, then sets {_burnList}[{contractAddress}] to true.",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "Address of contract to be used when making or executing deposits.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setResource(bytes32,address)",
      "name": "setResource",
      "description": "First verifies {_resourceIDToContractAddress}[{resourceID}] and {_contractAddressToResourceID}[{contractAddress}] are not already set, then sets {_resourceIDToContractAddress} with {contractAddress}, {_contractAddressToResourceID} with {resourceID}, and {_contractWhitelist} to true for {contractAddress}.",
      "parameterDecorators": [
        {
          "name": "resourceID",
          "description": "ResourceID to be used when making deposits.",
          "recommendedTypes": []
        },
        {
          "name": "contractAddress",
          "description": "Address of contract to be called when a deposit is made and a deposited is executed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(address,address,uint256)",
      "name": "withdraw",
      "description": "Used to manually release ERC721 tokens from ERC721Safe.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "Address of token contract to release.",
          "recommendedTypes": []
        },
        {
          "name": "recipient",
          "description": "Address to release token to.",
          "recommendedTypes": []
        },
        {
          "name": "tokenID",
          "description": "The ERC721 token ID to release.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}