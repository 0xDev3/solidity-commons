{
  "schema": "../schema.json",
  "tags": [],
  "name": "ButterBatchProcessing",
  "description": "",
  "eventDecorators": [
    {
      "signature": "BatchCooldownUpdated(uint256,uint256)",
      "name": "BatchCooldownUpdated",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "previousCooldown",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newCooldown",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BatchMinted(bytes32,uint256,uint256)",
      "name": "BatchMinted",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "suppliedTokenAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "butterAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BatchRedeemed(bytes32,uint256,uint256)",
      "name": "BatchRedeemed",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "suppliedTokenAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "threeCrvAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Claimed(address,uint8,uint256,uint256)",
      "name": "Claimed",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CurveTokenPairsUpdated(address[],tuple[])",
      "name": "CurveTokenPairsUpdated",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "yTokenAddresses",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "curveTokenPairs",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Deposit(address,uint256)",
      "name": "Deposit",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MintSlippageUpdated(uint256,uint256)",
      "name": "MintSlippageUpdated",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "prev",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "current",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MintThresholdUpdated(uint256,uint256)",
      "name": "MintThresholdUpdated",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "previousThreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newThreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MovedUnclaimedDepositsIntoCurrentBatch(uint256,uint8,address)",
      "name": "MovedUnclaimedDepositsIntoCurrentBatch",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "batchType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RedeemSlippageUpdated(uint256,uint256)",
      "name": "RedeemSlippageUpdated",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "prev",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "current",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RedeemThresholdUpdated(uint256,uint256)",
      "name": "RedeemThresholdUpdated",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "previousThreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newThreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RedemptionFeeUpdated(uint256,address)",
      "name": "RedemptionFeeUpdated",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "newRedemptionFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newFeeRecipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakingUpdated(address,address)",
      "name": "StakingUpdated",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "beforeAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SweetheartUpdated(address,bool)",
      "name": "SweetheartUpdated",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "sweetheart",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "isSweeheart",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdrawal(address,uint256)",
      "name": "Withdrawal",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WithdrawnFromBatch(bytes32,uint256,address)",
      "name": "WithdrawnFromBatch",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "accountBalances(bytes32,address)",
      "name": "accountBalances",
      "description": "This maps batch ids to addresses with share balances.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "accountBatches(address,uint256)",
      "name": "accountBatches",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "batchCooldown()",
      "name": "batchCooldown",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "batchIds(uint256)",
      "name": "batchIds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "batchMint()",
      "name": "batchMint",
      "description": "Mint Butter token with deposited 3CRV. This function goes through all the steps necessary to mint an optimal amount of Butter. This function deposits 3CRV in the underlying Metapool and deposits these LP token to get yToken which in turn are used to mint ButterThis process leaves some leftovers which are partially used in the next mint batches.In order to get 3CRV we can implement a zap to move stables into the curve tri-poolhandleKeeperIncentive checks if the msg.sender is a permissioned keeper and pays them a reward for calling this function (see KeeperIncentive.sol).",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "batchRedeem()",
      "name": "batchRedeem",
      "description": "Redeems Butter for 3CRV. This function goes through all the steps necessary to get 3CRV. This function reedeems Butter for the underlying yToken and deposits these yToken in curve Metapools for 3CRVIn order to get stablecoins from 3CRV we can use a zap to redeem 3CRV for stables in the curve tri-poolhandleKeeperIncentive checks if the msg.sender is a permissioned keeper and pays them a reward for calling this function (see KeeperIncentive.sol).",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "batches(bytes32)",
      "name": "batches",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "batchType",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "claimable",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "unclaimedShares",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "suppliedTokenBalance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "claimableTokenBalance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "suppliedTokenAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "claimableTokenAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claim(bytes32,address)",
      "name": "claim",
      "description": "Claims funds after the batch has been processed (get Butter from a mint batch and 3CRV from a redeem batch).",
      "parameterDecorators": [
        {
          "name": "_batchId",
          "description": "Id of batch to claim from.",
          "recommendedTypes": []
        },
        {
          "name": "_claimFor",
          "description": "User that gets the shares attributed to (for use in zapper contract).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimAndStake(bytes32,address)",
      "name": "claimAndStake",
      "description": "Claims BTR after batch has been processed and stakes it in Staking.sol.",
      "parameterDecorators": [
        {
          "name": "_batchId",
          "description": "Id of batch to claim from.",
          "recommendedTypes": []
        },
        {
          "name": "_claimFor",
          "description": "User that gets the shares attributed to (for use in zapper contract).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimRedemptionFee()",
      "name": "claimRedemptionFee",
      "description": "Claims all accumulated redemption fees in 3CRV.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "contractName()",
      "name": "contractName",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "contractRegistry()",
      "name": "contractRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentMintBatchId()",
      "name": "currentMintBatchId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentRedeemBatchId()",
      "name": "currentRedeemBatchId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "curvePoolTokenPairs(address)",
      "name": "curvePoolTokenPairs",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "curveMetaPool",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "crvLPToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositForMint(uint256,address)",
      "name": "depositForMint",
      "description": "Deposits funds in the current mint batch.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "Amount of 3cr3CRV to use for minting.",
          "recommendedTypes": []
        },
        {
          "name": "_depositFor",
          "description": "User that gets the shares attributed to (for use in zapper contract).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositForRedeem(uint256)",
      "name": "depositForRedeem",
      "description": "deposits funds in the current redeem batch.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "amount of Butter to be redeemed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feeRecipient()",
      "name": "feeRecipient",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccountBatches(address)",
      "name": "getAccountBatches",
      "description": "Get ids for all batches that a user has interacted with.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "The address for whom we want to retrieve batches.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMinAmount3CrvFromRedeem(uint256,uint256)",
      "name": "getMinAmount3CrvFromRedeem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_valueOfComponents",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_slippage",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMinAmountToMint(uint256,uint256,uint256)",
      "name": "getMinAmountToMint",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_valueOfBatch",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_valueOfComponentsPerUnit",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_slippage",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastMintedAt()",
      "name": "lastMintedAt",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastRedeemedAt()",
      "name": "lastRedeemedAt",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintSlippage()",
      "name": "mintSlippage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintThreshold()",
      "name": "mintThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "moveUnclaimedDepositsIntoCurrentBatch(bytes32[],uint256[],uint8)",
      "name": "moveUnclaimedDepositsIntoCurrentBatch",
      "description": "Moves unclaimed token (3crv or butter) from their respective Batches into a new redeemBatch / mintBatch without needing to claim them first. This will typically be used when butter has already been minted and a user has never claimed / transfered the token to their address and they would like to convert it to stablecoin. the indices of batchIds must match the amountsInHysi to work properly (This will be done by the frontend).",
      "parameterDecorators": [
        {
          "name": "_batchIds",
          "description": "the ids of each batch where butter should be moved from.",
          "recommendedTypes": []
        },
        {
          "name": "_shares",
          "description": "how many shares should redeemed in each of the batches.",
          "recommendedTypes": []
        },
        {
          "name": "_batchType",
          "description": "the batchType where funds should be taken from (Mint -> Take Hysi and redeem then, Redeem -> Take 3Crv and Mint Butter).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Pauses the contract. All function with the modifer `whenNotPaused` cant be called anymore. Namly deposits and mint/redeem.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemSlippage()",
      "name": "redeemSlippage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemThreshold()",
      "name": "redeemThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redemptionFeeRate()",
      "name": "redemptionFeeRate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redemptionFees()",
      "name": "redemptionFees",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setApprovals()",
      "name": "setApprovals",
      "description": "sets approval for contracts that require access to assets held by this contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBasicIssuanceModule()",
      "name": "setBasicIssuanceModule",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setBatchCooldown(uint256)",
      "name": "setBatchCooldown",
      "description": "Changes the current batch cooldown. The cooldown is the same for redeem and mint batches.",
      "parameterDecorators": [
        {
          "name": "_cooldown",
          "description": "Cooldown in seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCurvePoolTokenPairs(address[],tuple(address,address)[])",
      "name": "setCurvePoolTokenPairs",
      "description": "This function allows the owner to change the composition of underlying token of the Butter.",
      "parameterDecorators": [
        {
          "name": "_yTokenAddresses",
          "description": "An array of addresses for the yToken needed to mint Butter.",
          "recommendedTypes": []
        },
        {
          "name": "_curvePoolTokenPairs",
          "description": "An array structs describing underlying yToken, crvToken and curve metapool.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "curveMetaPool",
              "description": "",
              "type": "address"
            },
            {
              "name": "crvLPToken",
              "description": "",
              "type": "address"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMintSlippage(uint256)",
      "name": "setMintSlippage",
      "description": "sets slippage for minting.",
      "parameterDecorators": [
        {
          "name": "_slippageAmount",
          "description": "amount in bps (e.g. 50 = 0.5%).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMintThreshold(uint256)",
      "name": "setMintThreshold",
      "description": "Changes the Threshold of 3CRV which need to be deposited to be able to mint immediately.",
      "parameterDecorators": [
        {
          "name": "_threshold",
          "description": "Amount of 3CRV necessary to mint immediately.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRedeemSlippage(uint256)",
      "name": "setRedeemSlippage",
      "description": "sets slippage for redeeming.",
      "parameterDecorators": [
        {
          "name": "_slippageAmount",
          "description": "amount in bps (e.g. 50 = 0.5%).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRedeemThreshold(uint256)",
      "name": "setRedeemThreshold",
      "description": "Changes the Threshold of Butter which need to be deposited to be able to redeem immediately.",
      "parameterDecorators": [
        {
          "name": "_threshold",
          "description": "Amount of Butter necessary to mint immediately.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRedemptionFee(uint256,address)",
      "name": "setRedemptionFee",
      "description": "Changes the redemption fee rate and the fee recipient. Per default both of these values are not set. Therefore a fee has to be explicitly be set with this function.",
      "parameterDecorators": [
        {
          "name": "_feeRate",
          "description": "Redemption fee rate in basis points.",
          "recommendedTypes": []
        },
        {
          "name": "_recipient",
          "description": "The recipient which receives these fees (Should be DAO treasury).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStaking(address)",
      "name": "setStaking",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_staking",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setToken()",
      "name": "setToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "staking()",
      "name": "staking",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sweethearts(address)",
      "name": "sweethearts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "threeCrv()",
      "name": "threeCrv",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "threePool()",
      "name": "threePool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "Unpauses the contract. All function with the modifer `whenNotPaused` cant be called anymore. Namly deposits and mint/redeem.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateSweetheart(address,bool)",
      "name": "updateSweetheart",
      "description": "Toggles an address as Sweetheart (partner addresses that don't pay a redemption fee).",
      "parameterDecorators": [
        {
          "name": "_sweetheart",
          "description": "The address that shall become/lose their sweetheart status.",
          "recommendedTypes": []
        },
        {
          "name": "_enabled",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "valueOf3Crv(uint256)",
      "name": "valueOf3Crv",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_units",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "valueOfComponents(address[],uint256[])",
      "name": "valueOfComponents",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_tokenAddresses",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_quantities",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawFromBatch(bytes32,uint256,address)",
      "name": "withdrawFromBatch",
      "description": "This function allows a user to withdraw their funds from a batch before that batch has been processed.",
      "parameterDecorators": [
        {
          "name": "_batchId",
          "description": "From which batch should funds be withdrawn from.",
          "recommendedTypes": []
        },
        {
          "name": "_amountToWithdraw",
          "description": "Amount of Butter or 3CRV to be withdrawn from the queue (depending on mintBatch / redeemBatch).",
          "recommendedTypes": []
        },
        {
          "name": "_withdrawFor",
          "description": "User that gets the shares attributed to (for use in zapper contract).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}