{
  "schema": "../schema.json",
  "tags": [],
  "name": "StubDerivative",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "author()",
      "name": "author",
      "description": "Derivative spec author. Used to set and receive author's fee.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of the author.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "authorFee()",
      "name": "authorFee",
      "description": "Minting fee rate due to the author of the derivative specification. Percentage fee multiplied by 10 ^ 12.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "author fee.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "baseURI()",
      "name": "baseURI",
      "description": "Optional URI to the derivative specs. Isn't used directly in the protocol.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "URI to the derivative specs.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collateralSplitSymbol()",
      "name": "collateralSplitSymbol",
      "description": "Mapping from the change in the underlying variable (as defined by the oracle) and the initial collateral split to the final collateral split. Should be resolved through CollateralSplitRegistry contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "collateral split symbol.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collateralTokenSymbol()",
      "name": "collateralTokenSymbol",
      "description": "Type of collateral that users submit to mint the derivative. Should be resolved through CollateralTokenRegistry contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "collateral token symbol.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "complementNominalValue()",
      "name": "complementNominalValue",
      "description": "Parameter that determines starting nominal value of complement asset. Units of collateral theoretically swappable for 1 unit of complement asset.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "complement nominal value.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isDerivativeSpecification()",
      "name": "isDerivativeSpecification",
      "description": "Proof of a derivative specification. Verifies that contract is a derivative specification.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if contract is a derivative specification.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "livePeriod()",
      "name": "livePeriod",
      "description": "Lifecycle parameter that define the length of the derivative's Live period. Set in seconds.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "live period value.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "name()",
      "name": "name",
      "description": "Return optional long name of the derivative. Isn't used directly in the protocol.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "long name.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracleIteratorSymbols()",
      "name": "oracleIteratorSymbols",
      "description": "Algorithm that, for the type of oracle used by the derivative, finds the value closest to a given timestamp. Should be resolved through OracleIteratorRegistry contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "oracle iterator symbols.",
          "recommendedTypes": [],
          "solidityType": "bytes32[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracleSymbols()",
      "name": "oracleSymbols",
      "description": "Set of oracles that are relied upon to measure changes in the state of the world between the start and the end of the Live period. Should be resolved through OracleRegistry contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "oracle symbols.",
          "recommendedTypes": [],
          "solidityType": "bytes32[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "primaryNominalValue()",
      "name": "primaryNominalValue",
      "description": "Parameter that determines starting nominal value of primary asset. Units of collateral theoretically swappable for 1 unit of primary asset.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "primary nominal value.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAuthorFee(uint256)",
      "name": "setAuthorFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_authorFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCollateralSplitSymbol(bytes32)",
      "name": "setCollateralSplitSymbol",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_collateralSplitSymbol",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCollateralTokenSymbol(bytes32)",
      "name": "setCollateralTokenSymbol",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_collateralTokenSymbol",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setComplementNominalValue(uint256)",
      "name": "setComplementNominalValue",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_complementNominalValue",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setLivePeriod(uint256)",
      "name": "setLivePeriod",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_livePeriod",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setName(string)",
      "name": "setName",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOracleSymbols(bytes32[])",
      "name": "setOracleSymbols",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_oracleSymbols",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPrimaryNominalValue(uint256)",
      "name": "setPrimaryNominalValue",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_primaryNominalValue",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSymbol(string)",
      "name": "setSymbol",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_symbol",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "symbol()",
      "name": "symbol",
      "description": "Symbol of the derivative. Should be resolved through DerivativeSpecificationRegistry contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "derivative specification symbol.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}