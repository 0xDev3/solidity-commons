{"schema":"../schema.json","tags":["oracles"],"name":"IdentifierWhitelist","description":"Stores a whitelist of supported identifiers that the oracle can provide prices for.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Hash to mark updated provenance hash. Emitted when the implementation returned by the beacon is changed.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"SupportedIdentifierAdded(bytes32)","name":"SupportedIdentifierAdded","description":"Hash to mark updated provenance hash. Emitted when the implementation returned by the beacon is changed.","parameterDecorators":[{"name":"identifier","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"SupportedIdentifierRemoved(bytes32)","name":"SupportedIdentifierRemoved","description":"Hash to mark updated provenance hash. Emitted when the implementation returned by the beacon is changed.","parameterDecorators":[{"name":"identifier","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"addSupportedIdentifier(bytes32)","name":"addSupportedIdentifier","description":"Adds the provided identifier as a supported identifier. Price requests using this identifier will succeed after this call.","parameterDecorators":[{"name":"identifier","description":"unique UTF-8 representation for the feed being added. Eg: BTC/USD.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isIdentifierSupported(bytes32)","name":"isIdentifierSupported","description":"Checks whether an identifier is on the whitelist.","parameterDecorators":[{"name":"identifier","description":"unique UTF-8 representation for the feed being queried. Eg: BTC/USD.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"bool if the identifier is supported (or not).","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"removeSupportedIdentifier(bytes32)","name":"removeSupportedIdentifier","description":"Removes the identifier from the whitelist. Price requests using this identifier will no longer succeed after this call.","parameterDecorators":[{"name":"identifier","description":"unique UTF-8 representation for the feed being removed. Eg: BTC/USD.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}