{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "swaps",
    "locking"
  ],
  "name": "MarsPoolStaking",
  "description": "Staking contract for farming LPT rewards in return for staking a whitelisted token(s). Only the owner can add new pools. Fork of MasterChef.sol from SushiSwap.",
  "eventDecorators": [
    {
      "signature": "Deposit(address,uint256,uint256)",
      "name": "Deposit",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EmergencyWithdraw(address,uint256,uint256)",
      "name": "EmergencyWithdraw",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256,uint256)",
      "name": "Withdraw",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "add(uint256,address,uint256,bool)",
      "name": "add",
      "description": "Create a new LPT pool by whitelisting a new ERC20 token. Can only be called by the contract owner.",
      "parameterDecorators": [
        {
          "name": "_allocPoint",
          "description": "Governs what percentage of the total LPT rewards this pool and other pools will get.",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Token",
          "description": "Address of the staking token being whitelisted.",
          "recommendedTypes": []
        },
        {
          "name": "_maxStakingAmountPerUser",
          "description": "For this pool, maximum amount per user that can be staked.",
          "recommendedTypes": []
        },
        {
          "name": "_withUpdate",
          "description": "Set to true for updating all pools before adding this one.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(uint256,uint256)",
      "name": "deposit",
      "description": "Where any user can stake their ERC20 tokens into a pool in order to farm $LPT.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "ID of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount of ERC20 being staked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdraw(uint256)",
      "name": "emergencyWithdraw",
      "description": "Emergency only. Should the rewards issuance mechanism fail, people can still withdraw their stake.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "Pool ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "endBlock()",
      "name": "endBlock",
      "description": "The block number when rewards ends.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lpt()",
      "name": "lpt",
      "description": "The reward token aka $LPT.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lptPerBlock()",
      "name": "lptPerBlock",
      "description": "Number of LPT tokens distributed per block, across all pools.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "massUpdatePools()",
      "name": "massUpdatePools",
      "description": "Cycles through the pools to update all of the rewards accrued.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "maxLPTAvailableForFarming()",
      "name": "maxLPTAvailableForFarming",
      "description": "The total amount of reward token available for farming across all pools between start and end block.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberOfPools()",
      "name": "numberOfPools",
      "description": "Returns the number of pools that have been added by the owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Number of pools.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingLpt(uint256,address)",
      "name": "pendingLpt",
      "description": "View function to see pending and unclaimed LPTs for a given user.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "ID of the pool where a user has a stake.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "Account being queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of LPT tokens due to a user.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolInfo(uint256)",
      "name": "poolInfo",
      "description": "List of pools that users can stake into.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "erc20Token",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "allocPoint",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastRewardBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "accLptPerShare",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "maxStakingAmountPerUser",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "set(uint256,uint256,uint256,bool)",
      "name": "set",
      "description": "Update a pool's allocation point to increase or decrease its share of contract-level rewardsCan also update the max amount that can be staked per user. Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "ID of the pool being updated.",
          "recommendedTypes": []
        },
        {
          "name": "_allocPoint",
          "description": "New allocation point.",
          "recommendedTypes": []
        },
        {
          "name": "_maxStakingAmountPerUser",
          "description": "Maximum amount that a user can deposit into the far.",
          "recommendedTypes": []
        },
        {
          "name": "_withUpdate",
          "description": "Set to true if you want to update all pools before making this change - it will checkpoint those rewards.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "startBlock()",
      "name": "startBlock",
      "description": "The block number when LPT rewards starts across all pools.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalAllocPoint()",
      "name": "totalAllocPoint",
      "description": "Total allocation points. Must be the sum of all allocation points in all pools.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePool(uint256)",
      "name": "updatePool",
      "description": "Updates a specific pool to track all of the rewards accrued up to the TX block.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "ID of the pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userInfo(uint256,address)",
      "name": "userInfo",
      "description": "Per pool, info of each user that stakes ERC20 tokens.Pool ID => User Address => User Info.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardDebt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256,uint256)",
      "name": "withdraw",
      "description": "Allows a user to withdraw any ERC20 tokens staked in a pool. Partial withdrawals permitted.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "Pool ID.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Being withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}