{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "celo network"
  ],
  "name": "GrandaMento",
  "description": "Facilitates large exchanges between CELO stable tokens.",
  "eventDecorators": [
    {
      "signature": "ApproverSet(address)",
      "name": "ApproverSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "approver",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExchangeProposalApproved(uint256)",
      "name": "ExchangeProposalApproved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ExchangeProposalCancelled(uint256)",
      "name": "ExchangeProposalCancelled",
      "description": "",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ExchangeProposalCreated(uint256,address,string,uint256,uint256,bool)",
      "name": "ExchangeProposalCreated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "exchanger",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "stableTokenRegistryId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sellAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buyAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sellCelo",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExchangeProposalExecuted(uint256)",
      "name": "ExchangeProposalExecuted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MaxApprovalExchangeRateChangeSet(uint256)",
      "name": "MaxApprovalExchangeRateChangeSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "maxApprovalExchangeRateChange",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RegistrySet(address)",
      "name": "RegistrySet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SpreadSet(uint256)",
      "name": "SpreadSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "spread",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StableTokenExchangeLimitsSet(string,uint256,uint256)",
      "name": "StableTokenExchangeLimitsSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "stableTokenRegistryId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "minExchangeAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "maxExchangeAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VetoPeriodSecondsSet(uint256)",
      "name": "VetoPeriodSecondsSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "vetoPeriodSeconds",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "activeProposalIdsSuperset(uint256)",
      "name": "activeProposalIdsSuperset",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "approveExchangeProposal(uint256)",
      "name": "approveExchangeProposal",
      "description": "Approves an existing exchange proposal. Sender must be the approver. Exchange proposal must be in the Proposed state.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The identifier of the proposal to approve.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approver()",
      "name": "approver",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelExchangeProposal(uint256)",
      "name": "cancelExchangeProposal",
      "description": "Cancels an exchange proposal. Only callable by the exchanger if the proposal is in the Proposed state or the owner if the proposal is in the Approved state.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The identifier of the proposal to cancel.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createExchangeProposal(string,uint256,bool)",
      "name": "createExchangeProposal",
      "description": "Creates a new exchange proposal and deposits the tokens being sold. Stable token value amounts are used for the sellAmount, not unit amounts.",
      "parameterDecorators": [
        {
          "name": "stableTokenRegistryId",
          "description": "The string registry ID for the stable token involved in the exchange.",
          "recommendedTypes": []
        },
        {
          "name": "sellAmount",
          "description": "The amount of the sell token being sold.",
          "recommendedTypes": []
        },
        {
          "name": "sellCelo",
          "description": "Whether CELO is being sold.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchangeProposalCount()",
      "name": "exchangeProposalCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchangeProposals(uint256)",
      "name": "exchangeProposals",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "exchanger",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "stableToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "state",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "sellCelo",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "sellAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "buyAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "celoStableTokenExchangeRate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "vetoPeriodSeconds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "approvalTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executeExchangeProposal(uint256)",
      "name": "executeExchangeProposal",
      "description": "Executes an exchange proposal that's been approved and not vetoed. Callable by anyone. Reverts if the proposal is not in the Approved state or proposal.vetoPeriodSeconds has not elapsed since approval.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The identifier of the proposal to execute.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getActiveProposalIds()",
      "name": "getActiveProposalIds",
      "description": "Gets the proposal identifiers of exchange proposals in the Proposed or Approved state. Returns a version of activeProposalIdsSuperset with inactive proposal IDs set as 0. Elements with a proposal ID of 0 should be filtered out by the consumer.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBuyAmount(uint256,uint256,bool)",
      "name": "getBuyAmount",
      "description": "Using the oracle price, charges the spread and calculates the amount of the asset being bought. Stable token value amounts are used for the sellAmount, not unit amounts. Assumes both CELO and the stable token have 18 decimals.",
      "parameterDecorators": [
        {
          "name": "celoStableTokenExchangeRate",
          "description": "The unwrapped fraction exchange rate of CELO quoted in the stable token.",
          "recommendedTypes": []
        },
        {
          "name": "sellAmount",
          "description": "The amount of the sell token being sold.",
          "recommendedTypes": []
        },
        {
          "name": "sellCelo",
          "description": "Whether CELO is being sold.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStableTokenExchangeLimits(string)",
      "name": "getStableTokenExchangeLimits",
      "description": "Gets the minimum and maximum amount of a stable token that can be involved in a single exchange. Reverts if there is no explicit exchange limit for the stable token.",
      "parameterDecorators": [
        {
          "name": "stableTokenRegistryId",
          "description": "The string registry ID for the stable token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVersionNumber()",
      "name": "getVersionNumber",
      "description": "Returns the storage, major, minor, and patch version of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,uint256,uint256,uint256)",
      "name": "initialize",
      "description": "Used in place of the constructor to allow the contract to be upgradable via proxy.",
      "parameterDecorators": [
        {
          "name": "_registry",
          "description": "The address of the registry.",
          "recommendedTypes": []
        },
        {
          "name": "_approver",
          "description": "The approver that has the ability to approve exchange proposals.",
          "recommendedTypes": []
        },
        {
          "name": "_maxApprovalExchangeRateChange",
          "description": "The maximum allowed change in CELO price between an exchange proposal's creation and approval.",
          "recommendedTypes": []
        },
        {
          "name": "_spread",
          "description": "The spread charged on exchanges.",
          "recommendedTypes": []
        },
        {
          "name": "_vetoPeriodSeconds",
          "description": "The length of the veto period in seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxApprovalExchangeRateChange()",
      "name": "maxApprovalExchangeRateChange",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registry()",
      "name": "registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeFromActiveProposalIdsSuperset(uint256)",
      "name": "removeFromActiveProposalIdsSuperset",
      "description": "Removes the proposal ID found at the provided index of activeProposalIdsSuperset if the exchange proposal is not active. Anyone can call. Reverts if the exchange proposal is active.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "The index of the proposal ID to remove from activeProposalIdsSuperset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setApprover(address)",
      "name": "setApprover",
      "description": "Sets the approver. Sender must be owner. New approver is allowed to be address(0).",
      "parameterDecorators": [
        {
          "name": "newApprover",
          "description": "The new value for the approver.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxApprovalExchangeRateChange(uint256)",
      "name": "setMaxApprovalExchangeRateChange",
      "description": "Sets the maximum allowed change in the CELO/stable token price when an exchange proposal is being approved relative to the price when the proposal was created. Sender must be owner.",
      "parameterDecorators": [
        {
          "name": "newMaxApprovalExchangeRateChange",
          "description": "The new value for maxApprovalExchangeRateChange to be wrapped.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRegistry(address)",
      "name": "setRegistry",
      "description": "Updates the address pointing to a Registry contract.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "The address of a registry contract for routing to other contracts.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSpread(uint256)",
      "name": "setSpread",
      "description": "Sets the spread. Sender must be owner.",
      "parameterDecorators": [
        {
          "name": "newSpread",
          "description": "The new value for the spread to be wrapped. Must be <= fixed 1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStableTokenExchangeLimits(string,uint256,uint256)",
      "name": "setStableTokenExchangeLimits",
      "description": "Sets the minimum and maximum amount of the stable token an exchange can involve. Sender must be owner. Setting the maxExchangeAmount to 0 effectively disables new exchange proposals for the token.",
      "parameterDecorators": [
        {
          "name": "stableTokenRegistryId",
          "description": "The registry ID string for the stable token to set limits for.",
          "recommendedTypes": []
        },
        {
          "name": "minExchangeAmount",
          "description": "The new minimum exchange amount for the stable token.",
          "recommendedTypes": []
        },
        {
          "name": "maxExchangeAmount",
          "description": "The new maximum exchange amount for the stable token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setVetoPeriodSeconds(uint256)",
      "name": "setVetoPeriodSeconds",
      "description": "Sets the veto period in seconds. Sender must be owner.",
      "parameterDecorators": [
        {
          "name": "newVetoPeriodSeconds",
          "description": "The new value for the veto period in seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "spread()",
      "name": "spread",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stableTokenExchangeLimits(string)",
      "name": "stableTokenExchangeLimits",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "minExchangeAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "maxExchangeAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vetoPeriodSeconds()",
      "name": "vetoPeriodSeconds",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}