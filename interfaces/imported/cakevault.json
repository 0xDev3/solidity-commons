{"schema":"../schema.json","tags":["vaults"],"name":"CakeVault","description":"","eventDecorators":[{"signature":"Deposit(address,uint256,uint256,uint256)","name":"Deposit","description":"","parameterDecorators":[{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":true},{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false},{"name":"purchaser","description":"who paid for the tokens.","recommendedTypes":[],"indexed":false},{"name":"value","description":"weis paid for purchase.","recommendedTypes":[],"indexed":false}]},{"signature":"Harvest(address,uint256,uint256)","name":"Harvest","description":"","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":true},{"name":"performanceFee","description":"","recommendedTypes":[],"indexed":false},{"name":"callFee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Pause()","name":"Pause","description":"","parameterDecorators":[]},{"signature":"Paused(address)","name":"Paused","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unpause()","name":"Unpause","description":"","parameterDecorators":[]},{"signature":"Unpaused(address)","name":"Unpaused","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Withdraw(address,uint256,uint256)","name":"Withdraw","description":"","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false},{"name":"shares","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"MAX_CALL_FEE()","name":"MAX_CALL_FEE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"MAX_PERFORMANCE_FEE()","name":"MAX_PERFORMANCE_FEE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"MAX_WITHDRAW_FEE()","name":"MAX_WITHDRAW_FEE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"MAX_WITHDRAW_FEE_PERIOD()","name":"MAX_WITHDRAW_FEE_PERIOD","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"admin()","name":"admin","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"available()","name":"available","description":"Custom logic for how much the vault allows to be borrowed. The contract puts 100% of the tokens to work.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"balanceOf()","name":"balanceOf","description":"Calculates the total underlying tokens. It includes tokens held by the contract and held in MasterChef.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"calculateHarvestCakeRewards()","name":"calculateHarvestCakeRewards","description":"Calculates the expected harvest reward from third party.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"Expected reward to collect in CAKE.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"calculateTotalPendingCakeRewards()","name":"calculateTotalPendingCakeRewards","description":"Calculates the total pending rewards that can be restaked.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"Returns total pending cake rewards.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"callFee()","name":"callFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"deposit(uint256)","name":"deposit","description":"Deposits funds into the Cake Vault. Only possible when contract not paused.","parameterDecorators":[{"name":"_amount","description":": number of tokens to deposit (in CAKE).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"emergencyWithdraw()","name":"emergencyWithdraw","description":"Withdraws from MasterChef to Vault without caring about rewards. EMERGENCY ONLY. Only callable by the contract admin.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getPricePerFullShare()","name":"getPricePerFullShare","description":"Calculates the price per share.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"harvest()","name":"harvest","description":"Reinvests CAKE tokens into MasterChef. Only possible when contract not paused.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"inCaseTokensGetStuck(address)","name":"inCaseTokensGetStuck","description":"Withdraw unexpected tokens sent to the Cake Vault.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"lastHarvestedTime()","name":"lastHarvestedTime","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"masterchef()","name":"masterchef","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pause()","name":"pause","description":"Triggers stopped state. Only possible when contract not paused.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"paused()","name":"paused","description":"Returns true if the contract is paused, and false otherwise.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"performanceFee()","name":"performanceFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"receiptToken()","name":"receiptToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setAdmin(address)","name":"setAdmin","description":"Sets admin address. Only callable by the contract owner.","parameterDecorators":[{"name":"_admin","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setCallFee(uint256)","name":"setCallFee","description":"Sets call fee. Only callable by the contract admin.","parameterDecorators":[{"name":"_callFee","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPerformanceFee(uint256)","name":"setPerformanceFee","description":"Sets performance fee. Only callable by the contract admin.","parameterDecorators":[{"name":"_performanceFee","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setTreasury(address)","name":"setTreasury","description":"Sets treasury address. Only callable by the contract owner.","parameterDecorators":[{"name":"_treasury","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setWithdrawFee(uint256)","name":"setWithdrawFee","description":"Sets withdraw fee. Only callable by the contract admin.","parameterDecorators":[{"name":"_withdrawFee","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setWithdrawFeePeriod(uint256)","name":"setWithdrawFeePeriod","description":"Sets withdraw fee period. Only callable by the contract admin.","parameterDecorators":[{"name":"_withdrawFeePeriod","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"token()","name":"token","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"totalShares()","name":"totalShares","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"treasury()","name":"treasury","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"unpause()","name":"unpause","description":"Returns to normal state. Only possible when contract is paused.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"userInfo(address)","name":"userInfo","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"shares","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"lastDepositedTime","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"cakeAtLastUserAction","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"lastUserActionTime","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(uint256)","name":"withdraw","description":"Withdraws from funds from the Cake Vault.","parameterDecorators":[{"name":"_shares","description":": Number of shares to withdraw.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawAll()","name":"withdrawAll","description":"Withdraws all funds for a user.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawFee()","name":"withdrawFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdrawFeePeriod()","name":"withdrawFeePeriod","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}