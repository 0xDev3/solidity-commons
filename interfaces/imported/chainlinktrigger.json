{
  "schema": "../schema.json",
  "tags": [
    "oracles",
    "chainlink"
  ],
  "name": "ChainlinkTrigger",
  "description": "A trigger contract that takes two addresses: a truth oracle and a tracking oracle. This trigger ensures the two oracles always stay within the given price tolerance; the delta in prices can be equal to but not greater than the price tolerance.",
  "eventDecorators": [
    {
      "signature": "SetAdded(address)",
      "name": "SetAdded",
      "description": "Event for updated Media URIs.",
      "parameterDecorators": [
        {
          "name": "set",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TriggerStateUpdated(uint8)",
      "name": "TriggerStateUpdated",
      "description": "Event for updated Media URIs.",
      "parameterDecorators": [
        {
          "name": "state",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MAX_SET_LENGTH()",
      "name": "MAX_SET_LENGTH",
      "description": "Prevent DOS attacks by limiting the number of sets.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addSet(address)",
      "name": "addSet",
      "description": "Call this method to update Set addresses after deploy.",
      "parameterDecorators": [
        {
          "name": "_set",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getSets()",
      "name": "getSets",
      "description": "The Sets that use this trigger in a market. Use this function to retrieve all Sets.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSetsLength()",
      "name": "getSetsLength",
      "description": "The number of Sets that use this trigger in a market.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "manager()",
      "name": "manager",
      "description": "The manager of the Cozy protocol.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "priceTolerance()",
      "name": "priceTolerance",
      "description": "The maximum percent delta between oracle prices that is allowed, expressed as a zoc. For example, a 0.2e4 priceTolerance would mean the trackingOracle price is allowed to deviate from the truthOracle price by up to +/- 20%, but no more. Note that if the truthOracle returns a price of 0, we treat the priceTolerance as having been exceeded, no matter what price the trackingOracle returns.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "runProgrammaticCheck()",
      "name": "runProgrammaticCheck",
      "description": "Compares the oracle's price to the reference oracle and toggles the trigger if required. This method executes the `programmaticCheck()` and makes the required state changes both in the trigger and the sets.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sets(uint256)",
      "name": "sets",
      "description": "The Sets that use this trigger in a market.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "state()",
      "name": "state",
      "description": "Current trigger state.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "trackingFrequencyTolerance()",
      "name": "trackingFrequencyTolerance",
      "description": "The maximum amount of time we allow to elapse before the tracking oracle's price is deemed stale.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "trackingOracle()",
      "name": "trackingOracle",
      "description": "The oracle we expect to diverge.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "truthFrequencyTolerance()",
      "name": "truthFrequencyTolerance",
      "description": "The maximum amount of time we allow to elapse before the truth oracle's price is deemed stale.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "truthOracle()",
      "name": "truthOracle",
      "description": "The canonical oracle, assumed to be correct.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}