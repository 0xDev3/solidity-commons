{
  "schema": "../schema.json",
  "tags": [],
  "name": "Exchange",
  "description": "",
  "eventDecorators": [
    {
      "signature": "CancelledOrder(bytes32,address)",
      "name": "CancelledOrder",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "orderID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "killer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DepairedTokens(bytes32,address,address)",
      "name": "DepairedTokens",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "pairID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buytoken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "FrozenPair(bytes32)",
      "name": "FrozenPair",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "pairID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MadeOrder(bytes32,address,address,address,address,bool,uint256,uint256)",
      "name": "MadeOrder",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "orderID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "specificTaker",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "isComplete",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sellAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buyAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MadeOrderParticipants(bytes32,address,address)",
      "name": "MadeOrderParticipants",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "orderID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "specificTaker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OperatorsContractChanged(address,address)",
      "name": "OperatorsContractChanged",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OperatorsContractPending(address,address)",
      "name": "OperatorsContractPending",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PairedTokens(bytes32,address,address)",
      "name": "PairedTokens",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "pairID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buytoken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TakenOrder(bytes32,address,address,address,address,uint256,uint256)",
      "name": "TakenOrder",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "orderID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "purchasedToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "paidToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "taker",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "purchasedAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "paidAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TakenOrderParticipants(bytes32,address,address)",
      "name": "TakenOrderParticipants",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "orderID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "taker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TraderOperatorsContractChanged(address,address)",
      "name": "TraderOperatorsContractChanged",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "traderOperatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TraderOperatorsContractPending(address,address)",
      "name": "TraderOperatorsContractPending",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "traderOperatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UnFrozenPair(bytes32)",
      "name": "UnFrozenPair",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "pairID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "event emitted when first intializing the liquidity launcher.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "batchDepairTokens(bytes32[])",
      "name": "batchDepairTokens",
      "description": "Batch depair tokens.",
      "parameterDecorators": [
        {
          "name": "_pairID",
          "description": "array of pairID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "batchFreezeTokens(bytes32[])",
      "name": "batchFreezeTokens",
      "description": "Batch freeze tokens.",
      "parameterDecorators": [
        {
          "name": "_pairID",
          "description": "array of pairID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "batchPairTokens(bytes32[],address[],address[])",
      "name": "batchPairTokens",
      "description": "Batch pair tokens.",
      "parameterDecorators": [
        {
          "name": "_pairID",
          "description": "array of pairID.",
          "recommendedTypes": []
        },
        {
          "name": "_buyToken",
          "description": "address array of buyToken.",
          "recommendedTypes": []
        },
        {
          "name": "_sellToken",
          "description": "address array of buyToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "batchUnfreezeTokens(bytes32[])",
      "name": "batchUnfreezeTokens",
      "description": "Batch unfreeze tokens.",
      "parameterDecorators": [
        {
          "name": "_pairID",
          "description": "array of pairID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelOrder(bytes32)",
      "name": "cancelOrder",
      "description": "Cancel an order by its maker or a trader.",
      "parameterDecorators": [
        {
          "name": "orderID",
          "description": "Order ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelOrders(bytes32[])",
      "name": "cancelOrders",
      "description": "Cancel orders by their orderID.",
      "parameterDecorators": [
        {
          "name": "orderIDs",
          "description": "Array of order ids to be taken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "confirmOperatorsContract()",
      "name": "confirmOperatorsContract",
      "description": "The function should be called from new operators contract by admin to ensure that operatorsPending address is the real contract address.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "confirmTraderOperatorsContract()",
      "name": "confirmTraderOperatorsContract",
      "description": "The function should be called from new operators contract by admin to insure that traderOperatorsPending address is the real contract address.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depairTokens(bytes32)",
      "name": "depairTokens",
      "description": "Depair tokens to be available for trading on DEX.",
      "parameterDecorators": [
        {
          "name": "_pairID",
          "description": "pair identifier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "freezePair(bytes32)",
      "name": "freezePair",
      "description": "Freeze pair trading on DEX.",
      "parameterDecorators": [
        {
          "name": "_pairID",
          "description": "pair identifier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getIdentifier(uint256)",
      "name": "getIdentifier",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOperatorsContract()",
      "name": "getOperatorsContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOperatorsPending()",
      "name": "getOperatorsPending",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOrderCount()",
      "name": "getOrderCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPairCount()",
      "name": "getPairCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTraderOperatorsContract()",
      "name": "getTraderOperatorsContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTraderOperatorsPending()",
      "name": "getTraderOperatorsPending",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address)",
      "name": "initialize",
      "description": "Initialization instead of constructor, called once. The setTradersOperatorsContract function can be called only by Admin role with confirmation through the operators contract.",
      "parameterDecorators": [
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_traderOperators",
          "description": "TraderOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with confirmation through the operators contract.",
      "parameterDecorators": [
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isAdmin(address)",
      "name": "isAdmin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAdminOrSystem(address)",
      "name": "isAdminOrSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isFrozen(address,address)",
      "name": "isFrozen",
      "description": "Getter to determine if pairs are frozen.",
      "parameterDecorators": [
        {
          "name": "_buyToken",
          "description": "buy token against sell token to determine if frozen pair or not.",
          "recommendedTypes": []
        },
        {
          "name": "_sellToken",
          "description": "sell token against buy token to determine if frozen pair or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isInitialized()",
      "name": "isInitialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isMultisig(address)",
      "name": "isMultisig",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_contract",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isNotPaused()",
      "name": "isNotPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOperator(address)",
      "name": "isOperator",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOperatorOrSystem(address)",
      "name": "isOperatorOrSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPaired(address,address)",
      "name": "isPaired",
      "description": "Getter to determine if pairs are whitelisted.",
      "parameterDecorators": [
        {
          "name": "_buyToken",
          "description": "buy token against sell token to determine if whitelisted pair or not.",
          "recommendedTypes": []
        },
        {
          "name": "_sellToken",
          "description": "sell token against buy token to determine if whitelisted pair or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPaused()",
      "name": "isPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRelay(address)",
      "name": "isRelay",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSystem(address)",
      "name": "isSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isTrader(address)",
      "name": "isTrader",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "makeOrder(bytes32,address,address,bool,address,uint256,address,uint256,uint256)",
      "name": "makeOrder",
      "description": "Let investor make an order, providing the approval is done beforehand.",
      "parameterDecorators": [
        {
          "name": "orderID",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "specificTaker",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "isComplete",
          "description": "If this order can be filled partially (by default), or can only been taken as a whole.",
          "recommendedTypes": []
        },
        {
          "name": "sellToken",
          "description": "Address of the token to be sold in this order.",
          "recommendedTypes": []
        },
        {
          "name": "sellAmount",
          "description": "Total amount of token that is planned to be sold in this order.",
          "recommendedTypes": []
        },
        {
          "name": "buyToken",
          "description": "Address of the token to be purchased in this order.",
          "recommendedTypes": []
        },
        {
          "name": "buyAmount",
          "description": "Total amount of token planned to be bought by the maker.",
          "recommendedTypes": []
        },
        {
          "name": "timeOutBlockNumber",
          "description": "Time-out block number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "order(bytes32)",
      "name": "order",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "specificTaker",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "isComplete",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "sellAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "buyAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pair(bytes32)",
      "name": "pair",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "paired",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "frozen",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pairIdentifier(address,address)",
      "name": "pairIdentifier",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pairTokens(bytes32,address,address)",
      "name": "pairTokens",
      "description": "Pair tokens to be available for trading on DEX.",
      "parameterDecorators": [
        {
          "name": "_pairID",
          "description": "pair identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_buyToken",
          "description": "buy token against sell token to whitelist.",
          "recommendedTypes": []
        },
        {
          "name": "_sellToken",
          "description": "sell token against buy token to whitelist.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Called by operator to pause child contract. The contract must not already be paused.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOperatorsContract(address)",
      "name": "setOperatorsContract",
      "description": "Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr) where addr is the address of current contract instance. This is done to prevent the case when the new contract address is broken and control of the contract can be lost in such case.",
      "parameterDecorators": [
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTraderOperatorsContract(address)",
      "name": "setTraderOperatorsContract",
      "description": "Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr) where addr is the address of current contract instance. This is done to prevent the case when the new contract address is broken and control of the contract can be lost in such case.",
      "parameterDecorators": [
        {
          "name": "_traderOperators",
          "description": "TradeOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "takeOrder(bytes32,address,uint256,uint256)",
      "name": "takeOrder",
      "description": "Take an order by its orderID.",
      "parameterDecorators": [
        {
          "name": "orderID",
          "description": "Order ID.",
          "recommendedTypes": []
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "quantity",
          "description": "The amount of 'sellToken' that the taker wants to purchase.",
          "recommendedTypes": []
        },
        {
          "name": "timeOutBlockNumber",
          "description": "Time-out block number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "takeOrders(bytes32[],address[],uint256[],uint256)",
      "name": "takeOrders",
      "description": "Take orders by their orderID.",
      "parameterDecorators": [
        {
          "name": "orderIDs",
          "description": "Array of order ids to be taken.",
          "recommendedTypes": []
        },
        {
          "name": "buyers",
          "description": "Array of buyers.",
          "recommendedTypes": []
        },
        {
          "name": "quantity",
          "description": "Array of quantity per purchase.",
          "recommendedTypes": []
        },
        {
          "name": "timeOutBlockNumber",
          "description": "Time-out block number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unfreezePair(bytes32)",
      "name": "unfreezePair",
      "description": "Unfreeze pair trading on DEX.",
      "parameterDecorators": [
        {
          "name": "_pairID",
          "description": "pair identifier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "Called by operator to pause child contract. The contract must already be paused.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}