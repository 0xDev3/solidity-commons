{
  "schema": "../schema.json",
  "tags": [
    "lending",
    "nft",
    "dao"
  ],
  "name": "RightsDao",
  "description": "RightsDao. Audit certificate : https://github.com/lendroidproject/Rightshare-contracts/blob/master/audit-report.pdf. DAO that handles NFTs, FRights, and IRights.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "chi()",
      "name": "chi",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "contracts(int128)",
      "name": "contracts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentRightVersions(int128)",
      "name": "currentRightVersions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "discountChiActivated()",
      "name": "discountChiActivated",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "freeze(address,uint256,uint256,uint256[3],string[4])",
      "name": "freeze",
      "description": "Freezes a given NFT Token. Send the NFT to this contract, mint 1 FRight Token and 1 IRight Token.",
      "parameterDecorators": [
        {
          "name": "baseAssetAddress",
          "description": ": address of the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "baseAssetId",
          "description": ": id of the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "expiry",
          "description": ": timestamp until which the NFT is locked in the dao.",
          "recommendedTypes": []
        },
        {
          "name": "uint256Values",
          "description": ": uint256 array [maxISupply, f_version, i_version].",
          "recommendedTypes": []
        },
        {
          "name": "stringValues",
          "description": ": string array [purpose, description, imageUrl, termsUrl].",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "incrementCurrentRightVersion(int128)",
      "name": "incrementCurrentRightVersion",
      "description": "Allows owner to increment the current f version. Increment currentFVersion by 1.",
      "parameterDecorators": [
        {
          "name": "rightType",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isWhitelisted(address)",
      "name": "isWhitelisted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "issueI(address,uint256[4],string[4])",
      "name": "issueI",
      "description": "Issues a IRight for a given FRight. Check if IRight can be minted, Mint 1 IRight, Increment FRight.circulatingISupply by 1.",
      "parameterDecorators": [
        {
          "name": "baseAssetAddress",
          "description": ": address of base NFT asset.",
          "recommendedTypes": []
        },
        {
          "name": "uint256Values",
          "description": ": uint256 array [baseAssetId, fRightId, expiry, i_version].",
          "recommendedTypes": []
        },
        {
          "name": "stringValues",
          "description": ": string array [purpose, description, imageUrl, termsUrl].",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onERC721Received(address,address,uint256,bytes)",
      "name": "onERC721Received",
      "description": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onERC721Received(address,uint256,bytes)",
      "name": "onERC721Received",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeI(uint256)",
      "name": "revokeI",
      "description": "Revokes a given IRight. The IRight can be revoked at any time. Burn the IRight token. If the corresponding FRight exists, decrement its circulatingISupply by 1.",
      "parameterDecorators": [
        {
          "name": "iRightId",
          "description": ": id of the IRight token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setChi(address)",
      "name": "setChi",
      "description": "",
      "parameterDecorators": [
        {
          "name": "chiAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRightApiBaseUrl(int128,string)",
      "name": "setRightApiBaseUrl",
      "description": "Allows owner to set the base api url of F or I Right token. Set base url of the server API representing the metadata of a Right Token.",
      "parameterDecorators": [
        {
          "name": "rightType",
          "description": "type of Right contract.",
          "recommendedTypes": []
        },
        {
          "name": "url",
          "description": "API base url.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "toggleDiscountChi(bool)",
      "name": "toggleDiscountChi",
      "description": "Internal function to record if gas costs can be discounted. set discountChiActivated value as true or false.",
      "parameterDecorators": [
        {
          "name": "activate",
          "description": ": bool indicating the toggle value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "toggleWhitelistStatus(address,bool)",
      "name": "toggleWhitelistStatus",
      "description": "Allows owner to add / remove given address to / from whitelist.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": ": given address.",
          "recommendedTypes": []
        },
        {
          "name": "status",
          "description": ": bool indicating whitelist status of given address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "toggleWhitelistedFreeze(bool)",
      "name": "toggleWhitelistedFreeze",
      "description": "Internal function to record if freeze calls must be made only by whitelisted accounts. set whitelistedFreezeActivated value as true or false.",
      "parameterDecorators": [
        {
          "name": "activate",
          "description": ": bool indicating the toggle value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unfreeze(uint256)",
      "name": "unfreeze",
      "description": "Unfreezes a given FRight. Burn the FRight token for a given token Id, and return the original NFT back to the caller.",
      "parameterDecorators": [
        {
          "name": "fRightId",
          "description": ": id of the FRight token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistedFreezeActivated()",
      "name": "whitelistedFreezeActivated",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}