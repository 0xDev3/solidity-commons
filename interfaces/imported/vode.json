{
  "schema": "../schema.json",
  "tags": [],
  "name": "Vode",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AuthorityMigrated(address,address)",
      "name": "AuthorityMigrated",
      "description": "The governor sets token whitelist for an ERC1155 token.",
      "parameterDecorators": [
        {
          "name": "_oldAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AuthorityStatusUpdated(address,uint8)",
      "name": "AuthorityStatusUpdated",
      "description": "The governor sets token whitelist for an ERC1155 token.",
      "parameterDecorators": [
        {
          "name": "_certifyingAuthority",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newStatus",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Certified(bytes32,address)",
      "name": "Certified",
      "description": "The governor sets token whitelist for an ERC1155 token.",
      "parameterDecorators": [
        {
          "name": "_certificateHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_certifyingAuthority",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ManagerUpdated(address)",
      "name": "ManagerUpdated",
      "description": "The governor sets token whitelist for an ERC1155 token.",
      "parameterDecorators": [
        {
          "name": "_newManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "PERSONAL_PREFIX()",
      "name": "PERSONAL_PREFIX",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "certificates(bytes32)",
      "name": "certificates",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        },
        {
          "name": "signers",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "certifyingAuthorities(address)",
      "name": "certifyingAuthorities",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        },
        {
          "name": "status",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeManager(address)",
      "name": "changeManager",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newManagerAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "manager()",
      "name": "manager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "migrateCertifyingAuthority(address)",
      "name": "migrateCertifyingAuthority",
      "description": "Used by Certifying Authorities to change their wallet (in case of theft). Migrating prevents any new certificate registrations signed by the old wallet. Already registered certificates would be valid.",
      "parameterDecorators": [
        {
          "name": "_newAuthorityAddress",
          "description": "Next wallet address of the same certifying authority.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "parseSignedCertificate(bytes,bool)",
      "name": "parseSignedCertificate",
      "description": "Used by contract to seperate signers from certificate data.",
      "parameterDecorators": [
        {
          "name": "_signedCertificate",
          "description": "RLP encoded certificate according to CertiDApp Certificate standard.",
          "recommendedTypes": []
        },
        {
          "name": "_allowedSignersOnly",
          "description": "Should it consider only KYC approved signers ?.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_certificateObj",
          "description": "Seperation of certificate data and signers (computed from signatures).",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "data",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes"
            },
            {
              "name": "signers",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "_certificateHash",
          "description": "Unique identifier of the certificate data.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registerCertificate(bytes)",
      "name": "registerCertificate",
      "description": "Used to submit a signed certificate to smart contract for adding it to storage. Anyone can submit the certificate, the one submitting has to pay the nominal gas fee.",
      "parameterDecorators": [
        {
          "name": "_signedCertificate",
          "description": "RLP encoded certificate according to CertiDApp Certificate standard.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateCertifyingAuthority(address,bytes,uint8)",
      "name": "updateCertifyingAuthority",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_authorityAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_status",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}