{"schema":"../schema.json","tags":["yield"],"name":"YieldFarm","description":"","eventDecorators":[{"signature":"AddLpToken(address,uint256,uint256)","name":"AddLpToken","description":"","parameterDecorators":[{"name":"lpToken","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"allocPoint","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"CheckpointBalanceChanged(address,uint256,uint256)","name":"CheckpointBalanceChanged","description":"The event is emitted when a delegate account' vote balance changes.","parameterDecorators":[{"name":"delegate","description":"","recommendedTypes":[],"indexed":true},{"name":"previousBalance","description":"","recommendedTypes":[],"indexed":false},{"name":"newBalance","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"CheckpointTotalLpVotes(uint256)","name":"CheckpointTotalLpVotes","description":"","parameterDecorators":[{"name":"newOwner","description":"The new owner for this contract.","recommendedTypes":[],"indexed":false}]},{"signature":"CheckpointUserLpVotes(address,uint256,uint256)","name":"CheckpointUserLpVotes","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"lpVotes","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"CheckpointUserVotes(address,uint256,uint256)","name":"CheckpointUserVotes","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pendedVotes","description":"","recommendedTypes":[],"indexed":false},{"name":"lpVotesShare","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"DelegateChanged(address,address,address)","name":"DelegateChanged","description":"An event that's emitted when an account changes its delegate.","parameterDecorators":[{"name":"delegator","description":"","recommendedTypes":[],"indexed":true},{"name":"fromDelegate","description":"","recommendedTypes":[],"indexed":true},{"name":"toDelegate","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Deposit(address,uint256,uint256)","name":"Deposit","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"EmergencyWithdraw(address,uint256,uint256)","name":"EmergencyWithdraw","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"EmergencyWithdrawTWA(address,uint256)","name":"EmergencyWithdrawTWA","description":"","parameterDecorators":[{"name":"owner","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"MigrateLpToken(address,address,uint256)","name":"MigrateLpToken","description":"","parameterDecorators":[{"name":"oldLpToken","description":"","recommendedTypes":[],"indexed":true},{"name":"newLpToken","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"The new owner for this contract.","recommendedTypes":[],"indexed":true}]},{"signature":"SetLpToken(address,uint256,uint256)","name":"SetLpToken","description":"","parameterDecorators":[{"name":"lpToken","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"allocPoint","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SetMigrator(address)","name":"SetMigrator","description":"","parameterDecorators":[{"name":"newOwner","description":"The new owner for this contract.","recommendedTypes":[],"indexed":true}]},{"signature":"SetTwaVestingPeriodInBlocks(uint256)","name":"SetTwaVestingPeriodInBlocks","description":"","parameterDecorators":[{"name":"newOwner","description":"The new owner for this contract.","recommendedTypes":[],"indexed":false}]},{"signature":"Withdraw(address,uint256,uint256)","name":"Withdraw","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"add(uint256,address,uint8,bool)","name":"add","description":"Add a new pool (only the owner may call).","parameterDecorators":[{"name":"_allocPoint","description":"","recommendedTypes":[]},{"name":"_lpToken","description":"","recommendedTypes":[]},{"name":"_poolType","description":"","recommendedTypes":[]},{"name":"_votesEnabled","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"book(address)","name":"book","description":"Votes computation data for each account.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"numCheckpoints","description":"","recommendedTypes":[],"solidityType":"uint32"},{"name":"lastCheckpointBlock","description":"","recommendedTypes":[],"solidityType":"uint32"},{"name":"delegatee","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"checkpointVotes(address)","name":"checkpointVotes","description":"Write votes of the given user at the current block.","parameterDecorators":[{"name":"_user","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"delegate(address)","name":"delegate","description":"Delegate votes from `msg.sender` to `delegatee`.","parameterDecorators":[{"name":"delegateer","description":"The address to delegate votes to.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"delegatee()","name":"delegatee","description":"Get the \"delegatee\" account for the message sender.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"deposit(uint256,uint256)","name":"deposit","description":"Deposit the given amount of LP tokens to the given pool.","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"emergencyWithdraw(uint256)","name":"emergencyWithdraw","description":"Withdraw LP tokens without caring about pending TWA tokens. EMERGENCY ONLY.","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"emergencyWithdrawTWA()","name":"emergencyWithdrawTWA","description":"Withdraw twa tokens from pool. Could be called only by owner. EMERGENCY ONLY.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"findCheckpoints(address,uint256)","name":"findCheckpoints","description":"Returns IDs of checkpoints which store the given account' voice computation data. Intended for off-chain use (by UI).","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]},{"name":"blockNumber","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"userCheckpointId","description":"","recommendedTypes":[],"solidityType":"uint32"},{"name":"sharedCheckpointId","description":"","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":true},{"signature":"getCheckpoint(address,uint32)","name":"getCheckpoint","description":"Get TWA amount and the share of TWAs in LP pools for the given account and the checkpoint.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]},{"name":"checkpointId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"fromBlock","description":"","recommendedTypes":[],"solidityType":"uint32"},{"name":"twaAmount","description":"","recommendedTypes":[],"solidityType":"uint96"},{"name":"pooledTwaShare","description":"","recommendedTypes":[],"solidityType":"uint96"}],"emittableEvents":[],"readOnly":true},{"signature":"getCurrentTwaPerBlock()","name":"getCurrentTwaPerBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"twaPerBlock","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getCurrentVotes(address)","name":"getCurrentVotes","description":"Get the current votes balance for `account`.","parameterDecorators":[{"name":"account","description":"The address to get votes balance.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The number of current votes for `account`.","recommendedTypes":[],"solidityType":"uint96"}],"emittableEvents":[],"readOnly":true},{"signature":"getMultiplier(uint256,uint256)","name":"getMultiplier","description":"Return reward multiplier over the given _from to _to block.","parameterDecorators":[{"name":"_from","description":"","recommendedTypes":[]},{"name":"_to","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getPriorVotes(address,uint256,uint32,uint32)","name":"getPriorVotes","description":"Gas-optimized version of the `getPriorVotes` function - it accepts IDs of checkpoints to look for voice data as of the given block in (if the checkpoints miss the data, it get searched through all checkpoints recorded). Call (off-chain) the `findCheckpoints` function to get needed IDs.","parameterDecorators":[{"name":"account","description":"The address of the account to get votes for.","recommendedTypes":[]},{"name":"blockNumber","description":"The block number to get votes at.","recommendedTypes":[]},{"name":"userCheckpointId","description":"ID of the checkpoint to look for the shared data first.","recommendedTypes":[]},{"name":"sharedCheckpointId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The number of votes the account had as of the given block.","recommendedTypes":[],"solidityType":"uint96"}],"emittableEvents":[],"readOnly":true},{"signature":"getPriorVotes(address,uint256)","name":"getPriorVotes","description":"Determine the prior number of votes for the given account as of the given block. To prevent misinformation, the call reverts if the block requested is not finalized.","parameterDecorators":[{"name":"account","description":"The address of the account to get votes for.","recommendedTypes":[]},{"name":"blockNumber","description":"The block number to get votes at.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The number of votes the account had as of the given block.","recommendedTypes":[],"solidityType":"uint96"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,uint256,uint256)","name":"initialize","description":"Initializes the storage of the contract. \"constructor\" to be called on a new proxy deploymentSets the contract `owner` account to the deploying account.","parameterDecorators":[{"name":"_twa","description":"","recommendedTypes":[]},{"name":"_startBlock","description":"","recommendedTypes":[]},{"name":"_twaVestingPeriodInBlocks","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isLpTokenAdded(address)","name":"isLpTokenAdded","description":"Return `true` if the LP Token is added to created pools.","parameterDecorators":[{"name":"_lpToken","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"massUpdatePools()","name":"massUpdatePools","description":"Update reward computation params for all pools. Be careful of gas spending.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"migrate(uint256)","name":"migrate","description":"Migrate LP token to another LP contract. Anyone may call, so we have to trust the migrator contract.","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"migrator()","name":"migrator","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingTwa(uint256,address)","name":"pendingTwa","description":"Return the amount of pending TWAs entitled to the given user of the pool.","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]},{"name":"_user","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"poolLength()","name":"poolLength","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"poolPidByAddress(address)","name":"poolPidByAddress","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"pools(uint256)","name":"pools","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"lpToken","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"votesEnabled","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"poolType","description":"","recommendedTypes":[],"solidityType":"uint8"},{"name":"allocPoint","description":"","recommendedTypes":[],"solidityType":"uint32"},{"name":"lastUpdateBlock","description":"","recommendedTypes":[],"solidityType":"uint32"},{"name":"accTwaPerLpt","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"set(uint256,uint256,uint8,bool)","name":"set","description":"Update parameters of the given pool (only the owner may call).","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]},{"name":"_allocPoint","description":"","recommendedTypes":[]},{"name":"_poolType","description":"","recommendedTypes":[]},{"name":"_votesEnabled","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMigrator(address)","name":"setMigrator","description":"Set the migrator contract (only the owner may call).","parameterDecorators":[{"name":"_migrator","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setTwaVestingPeriodInBlocks(uint256)","name":"setTwaVestingPeriodInBlocks","description":"Set TWA vesting period in blocks (only the owner may call).","parameterDecorators":[{"name":"_twaVestingPeriodInBlocks","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"startBlock()","name":"startBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":true},{"signature":"totalAllocPoint()","name":"totalAllocPoint","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"twa()","name":"twa","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"twaVestingPeriodInBlocks()","name":"twaVestingPeriodInBlocks","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":true},{"signature":"twaVestingPool()","name":"twaVestingPool","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint96"}],"emittableEvents":[],"readOnly":true},{"signature":"updatePool(uint256)","name":"updatePool","description":"Update TWA tokens allocation for the given pool.","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"users(uint256,address)","name":"users","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"lastUpdateBlock","description":"","recommendedTypes":[],"solidityType":"uint32"},{"name":"vestingBlock","description":"","recommendedTypes":[],"solidityType":"uint32"},{"name":"pendedTwa","description":"","recommendedTypes":[],"solidityType":"uint96"},{"name":"twaAdjust","description":"","recommendedTypes":[],"solidityType":"uint96"},{"name":"lptAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"vestableTwa(uint256,address)","name":"vestableTwa","description":"Return the amount of TWA tokens which may be vested to a user of a pool in the current block.","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]},{"name":"user","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(uint256,uint256)","name":"withdraw","description":"Withdraw the given amount of LP tokens from the given pool.","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}