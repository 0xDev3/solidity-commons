{
  "schema": "../schema.json",
  "tags": [
    "vesting",
    "locking",
    "yield",
    "vaults",
    "curve finance"
  ],
  "name": "Dripper",
  "description": "OUSD Dripper The dripper contract smooths out the yield from point-in-time yield events and spreads the yield out over a configurable time period. This ensures a continuous per block yield to makes users happy as their next rebase amount is always moving up. Also, this makes historical day to day yields smooth, rather than going from a near zero day, to a large APY day, then back to a near zero day again. Design notes - USDT has a smaller resolution than the number of seconds in a week, which can make per block payouts have a rounding error. However the total effect is not large - cents per day, and this money is not lost, just distributed in the future. While we could use a higher decimal precision for the drip perBlock, we chose simpler code. - By calculating the changing drip rates on collects only, harvests and yield events don't have to call anything on this contract or pay any extra gas. Collect() is already be paying for a single write, since it has to reset the lastCollect time. - By having a collectAndRebase method, and having our external systems call that, the OUSD vault does not need any changes, not even to know the address of the dripper. - A rejected design was to retro-calculate the drip rate on each collect, based on the balance at the time of the collect. While this would have required less state, and would also have made the contract respond more quickly to new income, it would break the predictability that is this contract's entire purpose. If we did this, the amount of fundsAvailable() would make sharp increases when funds were deposited. - When the dripper recalculates the rate, it targets spending the balance over the duration. This means that every time that collect is is called, if no new funds have been deposited the duration is being pushed back and the rate decreases. This is expected, and ends up following a smoother but longer curve the more collect() is called without incoming yield.",
  "eventDecorators": [
    {
      "signature": "GovernorshipTransferred(address,address)",
      "name": "GovernorshipTransferred",
      "description": "An event emitted when a vault is liquidated.",
      "parameterDecorators": [
        {
          "name": "previousGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PendingGovernorshipTransfer(address,address)",
      "name": "PendingGovernorshipTransfer",
      "description": "An event emitted when a vault is liquidated.",
      "parameterDecorators": [
        {
          "name": "previousGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "availableFunds()",
      "name": "availableFunds",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount that would be sent if a collect was called.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimGovernance()",
      "name": "claimGovernance",
      "description": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collect()",
      "name": "collect",
      "description": "Collect all dripped funds and send to vault. Recalculate new drip rate.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collectAndRebase()",
      "name": "collectAndRebase",
      "description": "Collect all dripped funds, send to vault, recalculate new drip rate, and rebase OUSD.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "drip()",
      "name": "drip",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "lastCollect",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "perBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint192"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dripDuration()",
      "name": "dripDuration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "governor()",
      "name": "governor",
      "description": "Returns the address of the current Governor.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isGovernor()",
      "name": "isGovernor",
      "description": "Returns true if the caller is the current Governor.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setDripDuration(uint256)",
      "name": "setDripDuration",
      "description": "Change the drip duration. Governor only.",
      "parameterDecorators": [
        {
          "name": "_durationSeconds",
          "description": "the number of seconds to drip out the entire balance over if no collects were called during that time.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferGovernance(address)",
      "name": "transferGovernance",
      "description": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete.",
      "parameterDecorators": [
        {
          "name": "_newGovernor",
          "description": "Address of the new Governor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferToken(address,uint256)",
      "name": "transferToken",
      "description": "Transfer out ERC20 tokens held by the contract. Governor only.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "ERC20 token address.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}