{
  "schema": "../schema.json",
  "tags": [
    "vaults",
    "yearn finance"
  ],
  "name": "yVaultPrizePool",
  "description": "Prize Pool for yEarn's yVaults.",
  "eventDecorators": [
    {
      "signature": "AwardCaptured(uint256)",
      "name": "AwardCaptured",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Awarded(address,address,uint256)",
      "name": "Awarded",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "winner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AwardedExternalERC20(address,address,uint256)",
      "name": "AwardedExternalERC20",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "winner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AwardedExternalERC721(address,address,uint256[])",
      "name": "AwardedExternalERC721",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "winner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenIds",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ControlledTokenAdded(address)",
      "name": "ControlledTokenAdded",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CreditBurned(address,address,uint256)",
      "name": "CreditBurned",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CreditMinted(address,address,uint256)",
      "name": "CreditMinted",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CreditPlanSet(address,uint128,uint128)",
      "name": "CreditPlanSet",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "creditLimitMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "creditRateMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Deposited(address,address,address,uint256,address)",
      "name": "Deposited",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "referrer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Initialized(address,address,uint256,uint256)",
      "name": "Initialized",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "trustedForwarder",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reserveRegistry",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "maxExitFeeMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "maxTimelockDuration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "InstantWithdrawal(address,address,address,uint256,uint256,uint256)",
      "name": "InstantWithdrawal",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "redeemed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "exitFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LiquidityCapSet(uint256)",
      "name": "LiquidityCapSet",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "liquidityCap",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PrizeStrategySet(address)",
      "name": "PrizeStrategySet",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "prizeStrategy",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ReserveFeeCaptured(uint256)",
      "name": "ReserveFeeCaptured",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ReserveRateMantissaSet(uint256)",
      "name": "ReserveRateMantissaSet",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "reserveRateMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ReserveWithdrawal(address,uint256)",
      "name": "ReserveWithdrawal",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TimelockDeposited(address,address,address,uint256)",
      "name": "TimelockDeposited",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TimelockedWithdrawal(address,address,address,uint256,uint256)",
      "name": "TimelockedWithdrawal",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "unlockTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TimelockedWithdrawalSwept(address,address,uint256,uint256)",
      "name": "TimelockedWithdrawalSwept",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "redeemed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransferredExternalERC20(address,address,uint256)",
      "name": "TransferredExternalERC20",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "yVaultPrizePoolInitialized(address)",
      "name": "yVaultPrizePoolInitialized",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "vault",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "accountedBalance()",
      "name": "accountedBalance",
      "description": "The total of all controlled tokens and timelock.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The current total of all tokens and timelock.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addControlledToken(address)",
      "name": "addControlledToken",
      "description": "Allows the Governor to add Controlled Tokens to the Prize Pool.",
      "parameterDecorators": [
        {
          "name": "_controlledToken",
          "description": "The address of the Controlled Token to add.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "award(address,uint256,address)",
      "name": "award",
      "description": "Called by the prize strategy to award prizes. The amount awarded must be less than the awardBalance().",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address of the winner that receives the award.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of assets to be awarded.",
          "recommendedTypes": []
        },
        {
          "name": "controlledToken",
          "description": "The address of the asset token being awarded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "awardBalance()",
      "name": "awardBalance",
      "description": "Returns the balance that is available to award. captureAwardBalance() should be called first.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The total amount of assets to be awarded for the current prize.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "awardExternalERC20(address,address,uint256)",
      "name": "awardExternalERC20",
      "description": "Called by the Prize-Strategy to award external ERC20 prizes. Used to award any arbitrary tokens held by the Prize Pool.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address of the winner that receives the award.",
          "recommendedTypes": []
        },
        {
          "name": "externalToken",
          "description": "The address of the external asset token being awarded.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of external assets to be awarded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "awardExternalERC721(address,address,uint256[])",
      "name": "awardExternalERC721",
      "description": "Called by the prize strategy to award external ERC721 prizes. Used to award any arbitrary NFTs held by the Prize Pool.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address of the winner that receives the award.",
          "recommendedTypes": []
        },
        {
          "name": "externalToken",
          "description": "The address of the external NFT token being awarded.",
          "recommendedTypes": []
        },
        {
          "name": "tokenIds",
          "description": "An array of NFT Token IDs to be transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "balance()",
      "name": "balance",
      "description": "Returns the total underlying balance of all assets. This includes both principal and interest.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The underlying balance of assets.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "balanceOfCredit(address,address)",
      "name": "balanceOfCredit",
      "description": "Returns the credit balance for a given user. Not that this includes both minted credit and pending credit.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "The user whose credit balance should be returned.",
          "recommendedTypes": []
        },
        {
          "name": "controlledToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The balance of the users credit.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "beforeTokenTransfer(address,address,uint256)",
      "name": "beforeTokenTransfer",
      "description": "Updates the Prize Strategy when tokens are transferred between holders.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The address the tokens are being transferred from (0 if minting).",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The address the tokens are being transferred to (0 if burning).",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens being trasferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateEarlyExitFee(address,address,uint256)",
      "name": "calculateEarlyExitFee",
      "description": "Calculates the early exit fee for the given amount.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The user who is withdrawing.",
          "recommendedTypes": []
        },
        {
          "name": "controlledToken",
          "description": "The type of collateral being withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of collateral to be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "exitFee",
          "description": "The exit fee.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "burnedCredit",
          "description": "The user's credit that was burned.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateReserveFee(uint256)",
      "name": "calculateReserveFee",
      "description": "Calculates the reserve portion of the given amount of funds. If there is no reserve address, the portion will be zero.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The prize amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The size of the reserve portion of the prize.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calculateTimelockDuration(address,address,uint256)",
      "name": "calculateTimelockDuration",
      "description": "Calculates a timelocked withdrawal duration and credit consumption.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The user who is withdrawing.",
          "recommendedTypes": []
        },
        {
          "name": "controlledToken",
          "description": "The type of collateral the user is withdrawing (i.e. ticket or sponsorship).",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount the user is withdrawing.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "durationSeconds",
          "description": "The duration of the timelock in seconds.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "burnedCredit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "canAwardExternal(address)",
      "name": "canAwardExternal",
      "description": "Checks with the Prize Pool if a specific token type may be awarded as an external prize.",
      "parameterDecorators": [
        {
          "name": "_externalToken",
          "description": "The address of the token to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if the token may be awarded, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "captureAwardBalance()",
      "name": "captureAwardBalance",
      "description": "Captures any available interest as award balance. This function also captures the reserve fees.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The total amount of assets to be awarded for the current prize.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "creditPlanOf(address)",
      "name": "creditPlanOf",
      "description": "Returns the credit rate of a controlled token.",
      "parameterDecorators": [
        {
          "name": "controlledToken",
          "description": "The controlled token to retrieve the credit rates for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "creditLimitMantissa",
          "description": "The credit limit fraction. This number is used to calculate both the credit limit and early exit fee.",
          "recommendedTypes": [],
          "solidityType": "uint128"
        },
        {
          "name": "creditRateMantissa",
          "description": "The credit rate. This is the amount of tokens that accrue per second.",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositTo(address,uint256,address,address)",
      "name": "depositTo",
      "description": "Deposit assets into the Prize Pool in exchange for tokens.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address receiving the newly minted tokens.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of assets to deposit.",
          "recommendedTypes": []
        },
        {
          "name": "controlledToken",
          "description": "The address of the type of token the user is minting.",
          "recommendedTypes": []
        },
        {
          "name": "referrer",
          "description": "The referrer of the deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "estimateCreditAccrualTime(address,uint256,uint256)",
      "name": "estimateCreditAccrualTime",
      "description": "Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit.",
      "parameterDecorators": [
        {
          "name": "_controlledToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_principal",
          "description": "The principal amount on which interest is accruing.",
          "recommendedTypes": []
        },
        {
          "name": "_interest",
          "description": "The amount of interest that must accrue.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "durationSeconds",
          "description": "The duration of time it will take to accrue the given amount of interest, in seconds.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address[],uint256,uint256,address,uint256)",
      "name": "initialize",
      "description": "Initializes the Prize Pool and Yield Service with the required contract connections.",
      "parameterDecorators": [
        {
          "name": "_trustedForwarder",
          "description": "Address of the Forwarding Contract for GSN Meta-Txs.",
          "recommendedTypes": []
        },
        {
          "name": "_reserveRegistry",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_controlledTokens",
          "description": "Array of addresses for the Ticket and Sponsorship Tokens controlled by the Prize Pool.",
          "recommendedTypes": []
        },
        {
          "name": "_maxExitFeeMantissa",
          "description": "The maximum exit fee size, relative to the withdrawal amount.",
          "recommendedTypes": []
        },
        {
          "name": "_maxTimelockDuration",
          "description": "The maximum length of time the withdraw timelock could be.",
          "recommendedTypes": []
        },
        {
          "name": "_vault",
          "description": "Address of the yEarn yVaultInterface.",
          "recommendedTypes": []
        },
        {
          "name": "_reserveRateMantissa",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address,address,address[],uint256,uint256)",
      "name": "initialize",
      "description": "Initializes the Prize Pool.",
      "parameterDecorators": [
        {
          "name": "_trustedForwarder",
          "description": "Address of the Forwarding Contract for GSN Meta-Txs.",
          "recommendedTypes": []
        },
        {
          "name": "_reserveRegistry",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_controlledTokens",
          "description": "Array of ControlledTokens that are controlled by this Prize Pool.",
          "recommendedTypes": []
        },
        {
          "name": "_maxExitFeeMantissa",
          "description": "The maximum exit fee size.",
          "recommendedTypes": []
        },
        {
          "name": "_maxTimelockDuration",
          "description": "The maximum length of time the withdraw timelock.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isTrustedForwarder(address)",
      "name": "isTrustedForwarder",
      "description": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.",
      "parameterDecorators": [
        {
          "name": "forwarder",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityCap()",
      "name": "liquidityCap",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxExitFeeMantissa()",
      "name": "maxExitFeeMantissa",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxTimelockDuration()",
      "name": "maxTimelockDuration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prizeStrategy()",
      "name": "prizeStrategy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reserveRateMantissa()",
      "name": "reserveRateMantissa",
      "description": "Amount that is never exposed to the prize.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reserveRegistry()",
      "name": "reserveRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reserveTotalSupply()",
      "name": "reserveTotalSupply",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setCreditPlanOf(address,uint128,uint128)",
      "name": "setCreditPlanOf",
      "description": "Sets the rate at which credit accrues per second. The credit rate is a fixed point 18 number (like Ether).",
      "parameterDecorators": [
        {
          "name": "_controlledToken",
          "description": "The controlled token for whom to set the credit plan.",
          "recommendedTypes": []
        },
        {
          "name": "_creditRateMantissa",
          "description": "The credit rate to set. Is a fixed point 18 decimal (like Ether).",
          "recommendedTypes": []
        },
        {
          "name": "_creditLimitMantissa",
          "description": "The credit limit to set. Is a fixed point 18 decimal (like Ether).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setLiquidityCap(uint256)",
      "name": "setLiquidityCap",
      "description": "Allows the Governor to set a cap on the amount of liquidity that he pool can hold.",
      "parameterDecorators": [
        {
          "name": "_liquidityCap",
          "description": "The new liquidity cap for the prize pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPrizeStrategy(address)",
      "name": "setPrizeStrategy",
      "description": "Sets the prize strategy of the prize pool. Only callable by the owner.",
      "parameterDecorators": [
        {
          "name": "_prizeStrategy",
          "description": "The new prize strategy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setReserveRateMantissa(uint256)",
      "name": "setReserveRateMantissa",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_reserveRateMantissa",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sweepTimelockBalances(address[])",
      "name": "sweepTimelockBalances",
      "description": "Sweep all timelocked balances and transfer unlocked assets to owner accounts.",
      "parameterDecorators": [
        {
          "name": "users",
          "description": "An array of account addresses to sweep balances for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The total amount of assets swept from the Prize Pool.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "timelockBalanceAvailableAt(address)",
      "name": "timelockBalanceAvailableAt",
      "description": "The timestamp at which an account's timelocked balance will be made available to sweep.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "The address of an account with timelocked assets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The timestamp at which the locked assets will be made available.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "timelockBalanceOf(address)",
      "name": "timelockBalanceOf",
      "description": "The balance of timelocked assets for an account.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "The address of an account with timelocked assets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of assets that have been timelocked.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "timelockDepositTo(address,uint256,address)",
      "name": "timelockDepositTo",
      "description": "Deposits timelocked tokens for a user back into the Prize Pool as another asset.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address receiving the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of timelocked assets to re-deposit.",
          "recommendedTypes": []
        },
        {
          "name": "controlledToken",
          "description": "The type of token to be minted in exchange (i.e. tickets or sponsorship).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "timelockTotalSupply()",
      "name": "timelockTotalSupply",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "token()",
      "name": "token",
      "description": "Returns the address of the underlying ERC20 asset.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The address of the asset.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokens()",
      "name": "tokens",
      "description": "An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "An array of controlled token addresses.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferExternalERC20(address,address,uint256)",
      "name": "transferExternalERC20",
      "description": "Called by the Prize-Strategy to transfer out external ERC20 tokens. Used to transfer out tokens held by the Prize Pool. Could be liquidated, or anything.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address of the winner that receives the award.",
          "recommendedTypes": []
        },
        {
          "name": "externalToken",
          "description": "The address of the external asset token being awarded.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of external assets to be awarded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "trustedForwarder()",
      "name": "trustedForwarder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vault()",
      "name": "vault",
      "description": "Interface for the yEarn yVault.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "versionRecipient()",
      "name": "versionRecipient",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawInstantlyFrom(address,uint256,address,uint256)",
      "name": "withdrawInstantlyFrom",
      "description": "Withdraw assets from the Prize Pool instantly. A fairness fee may be charged for an early exit.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The address to redeem tokens from.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens to redeem for assets.",
          "recommendedTypes": []
        },
        {
          "name": "controlledToken",
          "description": "The address of the token to redeem (i.e. ticket or sponsorship).",
          "recommendedTypes": []
        },
        {
          "name": "maximumExitFee",
          "description": "The maximum exit fee the caller is willing to pay. This should be pre-calculated by the calculateExitFee() fxn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The actual exit fee paid.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawReserve(address)",
      "name": "withdrawReserve",
      "description": "",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawWithTimelockFrom(address,uint256,address)",
      "name": "withdrawWithTimelockFrom",
      "description": "Withdraw assets from the Prize Pool by placing them into the timelock. The timelock is used to ensure that the tickets have contributed their fair share of the prize. Note that if the user has previously timelocked funds then this contract will try to sweep them. If the existing timelocked funds are still locked, then the incoming balance is added to their existing balance and the new timelock unlock timestamp will overwrite the old one.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The address to withdraw from.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "controlledToken",
          "description": "The type of token being withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The timestamp from which the funds can be swept.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}