{"schema":"../schema.json","tags":[],"name":"FeedRegistry","description":"An on-chain registry of assets to aggregators.This contract provides a consistent address for consumers but delegates where it reads from to the owner, who is trusted to update it. This registry contract works for multiple feeds, not just a single aggregator.","eventDecorators":[{"signature":"AccessControllerSet(address,address)","name":"AccessControllerSet","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"accessController","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"FeedConfirmed(address,address,address,address,uint16,address)","name":"FeedConfirmed","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"asset","description":"","recommendedTypes":[],"indexed":true},{"name":"denomination","description":"","recommendedTypes":[],"indexed":true},{"name":"latestAggregator","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAggregator","description":"","recommendedTypes":[],"indexed":false},{"name":"nextPhaseId","description":"","recommendedTypes":[],"indexed":false},{"name":"sender","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"FeedProposed(address,address,address,address,address)","name":"FeedProposed","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"asset","description":"","recommendedTypes":[],"indexed":true},{"name":"denomination","description":"","recommendedTypes":[],"indexed":true},{"name":"proposedAggregator","description":"","recommendedTypes":[],"indexed":true},{"name":"currentAggregator","description":"","recommendedTypes":[],"indexed":false},{"name":"sender","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferRequested(address,address)","name":"OwnershipTransferRequested","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"to","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"to","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"acceptOwnership()","name":"acceptOwnership","description":"Allows an ownership transfer to be completed by the recipient.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"confirmFeed(address,address,address)","name":"confirmFeed","description":"Allows the owner to confirm and change the address to the proposed aggregator. Reverts if the given address doesn't match what was previously proposed.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"aggregator","description":"The new aggregator contract address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"decimals(address,address)","name":"decimals","description":"represents the number of decimals the aggregator responses represent.","parameterDecorators":[{"name":"base","description":"","recommendedTypes":[]},{"name":"quote","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"description(address,address)","name":"description","description":"returns the description of the aggregator the proxy points to.","parameterDecorators":[{"name":"base","description":"","recommendedTypes":[]},{"name":"quote","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"getAccessController()","name":"getAccessController","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getAnswer(address,address,uint256)","name":"getAnswer","description":"get past rounds answersWe advise to use getRoundData() instead because it returns more in-depth information. overridden function to add the checkPairAccess() modifierThis does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"roundId","description":"the proxy round id number to retrieve the answer for.","recommendedTypes":[]}],"returnDecorators":[{"name":"answer","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"getCurrentPhaseId(address,address)","name":"getCurrentPhaseId","description":"","parameterDecorators":[{"name":"base","description":"","recommendedTypes":[]},{"name":"quote","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"currentPhaseId","description":"","recommendedTypes":[],"solidityType":"uint16"}],"emittableEvents":[],"readOnly":true},{"signature":"getFeed(address,address)","name":"getFeed","description":"Retrieve the aggregator of an base / quote pair in the current phase.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]}],"returnDecorators":[{"name":"aggregator","description":"aggregator.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getNextRoundId(address,address,uint80)","name":"getNextRoundId","description":"return the next round id of a given round. Note that this is not the aggregator round id, but the proxy round id To get full ranges of round ids of different phases, use getPhaseRange().","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"roundId","description":"the round id number to retrieve the updated timestamp for.","recommendedTypes":[]}],"returnDecorators":[{"name":"nextRoundId","description":"nextRoundId.","recommendedTypes":[],"solidityType":"uint80"}],"emittableEvents":[],"readOnly":true},{"signature":"getPhase(address,address,uint16)","name":"getPhase","description":"returns a phase by id. A Phase contains the starting and ending aggregator round ids. endingAggregatorRoundId will be 0 if the phase is the current phase. reverts if the phase does not exist.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"phaseId","description":"phase id.","recommendedTypes":[]}],"returnDecorators":[{"name":"phase","description":"phase.","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"getPhaseFeed(address,address,uint16)","name":"getPhaseFeed","description":"retrieve the aggregator of an base / quote pair at a specific phase.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"phaseId","description":"phase ID.","recommendedTypes":[]}],"returnDecorators":[{"name":"aggregator","description":"aggregator.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getPhaseRange(address,address,uint16)","name":"getPhaseRange","description":"returns the range of proxy round ids of a phase.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"phaseId","description":"phase id.","recommendedTypes":[]}],"returnDecorators":[{"name":"startingRoundId","description":"startingRoundId.","recommendedTypes":[],"solidityType":"uint80"},{"name":"endingRoundId","description":"endingRoundId.","recommendedTypes":[],"solidityType":"uint80"}],"emittableEvents":[],"readOnly":true},{"signature":"getPreviousRoundId(address,address,uint80)","name":"getPreviousRoundId","description":"return the previous round id of a given round. Note that this is not the aggregator round id, but the proxy round id To get full ranges of round ids of different phases, use getPhaseRange().","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"roundId","description":"the round id number to retrieve the updated timestamp for.","recommendedTypes":[]}],"returnDecorators":[{"name":"previousRoundId","description":"previousRoundId.","recommendedTypes":[],"solidityType":"uint80"}],"emittableEvents":[],"readOnly":true},{"signature":"getProposedFeed(address,address)","name":"getProposedFeed","description":"Returns the proposed aggregator for an base / quote pair returns a zero address if there is no proposed aggregator for the pair.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]}],"returnDecorators":[{"name":"proposedAggregator","description":"proposedAggregator.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoundData(address,address,uint80)","name":"getRoundData","description":"get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that answer and updatedAt may change between queries.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"_roundId","description":"the proxy round id number to retrieve the round data for.","recommendedTypes":[]}],"returnDecorators":[{"name":"roundId","description":"is the round ID from the aggregator for which the data was retrieved combined with a phase to ensure that round IDs get larger as time moves forward.","recommendedTypes":[],"solidityType":"uint80"},{"name":"answer","description":"is the answer for the given round.","recommendedTypes":[],"solidityType":"int256"},{"name":"startedAt","description":"is the timestamp when the round was started.","recommendedTypes":[],"solidityType":"uint256"},{"name":"updatedAt","description":"is the timestamp when the round last was updated (i.e. answer was last computed).","recommendedTypes":[],"solidityType":"uint256"},{"name":"answeredInRound","description":"is the round ID of the round in which the answer was computed.","recommendedTypes":[],"solidityType":"uint80"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoundFeed(address,address,uint80)","name":"getRoundFeed","description":"retrieve the aggregator of an base / quote pair at a specific round id.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"roundId","description":"the proxy round id.","recommendedTypes":[]}],"returnDecorators":[{"name":"aggregator","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getTimestamp(address,address,uint256)","name":"getTimestamp","description":"get block timestamp when an answer was last updatedWe advise to use getRoundData() instead because it returns more in-depth information. overridden function to add the checkPairAccess() modifierThis does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"roundId","description":"the proxy round id number to retrieve the updated timestamp for.","recommendedTypes":[]}],"returnDecorators":[{"name":"timestamp","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"isFeedEnabled(address)","name":"isFeedEnabled","description":"returns true if a aggregator is enabled for any pair.","parameterDecorators":[{"name":"aggregator","description":"aggregator address.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"latestAnswer(address,address)","name":"latestAnswer","description":"Reads the current answer for an base / quote pair's aggregator.We advise to use latestRoundData() instead because it returns more in-depth information.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]}],"returnDecorators":[{"name":"answer","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"latestRound(address,address)","name":"latestRound","description":"get the latest completed round where the answer was updatedWe advise to use latestRoundData() instead because it returns more in-depth information. overridden function to add the checkPairAccess() modifier.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]}],"returnDecorators":[{"name":"roundId","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"latestRoundData(address,address)","name":"latestRoundData","description":"get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that answer and updatedAt may change between queries.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]}],"returnDecorators":[{"name":"roundId","description":"is the round ID from the aggregator for which the data was retrieved combined with a phase to ensure that round IDs get larger as time moves forward.","recommendedTypes":[],"solidityType":"uint80"},{"name":"answer","description":"is the answer for the given round.","recommendedTypes":[],"solidityType":"int256"},{"name":"startedAt","description":"is the timestamp when the round was started.","recommendedTypes":[],"solidityType":"uint256"},{"name":"updatedAt","description":"is the timestamp when the round last was updated (i.e. answer was last computed).","recommendedTypes":[],"solidityType":"uint256"},{"name":"answeredInRound","description":"is the round ID of the round in which the answer was computed.","recommendedTypes":[],"solidityType":"uint80"}],"emittableEvents":[],"readOnly":true},{"signature":"latestTimestamp(address,address)","name":"latestTimestamp","description":"get the latest completed timestamp where the answer was updated.We advise to use latestRoundData() instead because it returns more in-depth information.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]}],"returnDecorators":[{"name":"timestamp","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"proposeFeed(address,address,address)","name":"proposeFeed","description":"Allows the owner to propose a new address for the aggregator.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"aggregator","description":"The new aggregator contract address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"proposedGetRoundData(address,address,uint80)","name":"proposedGetRoundData","description":"Used if an aggregator contract has been proposed.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]},{"name":"roundId","description":"the round ID to retrieve the round data for.","recommendedTypes":[]}],"returnDecorators":[{"name":"id","description":"is the round ID for which data was retrieved.","recommendedTypes":[],"solidityType":"uint80"},{"name":"answer","description":"is the answer for the given round.","recommendedTypes":[],"solidityType":"int256"},{"name":"startedAt","description":"is the timestamp when the round was started.","recommendedTypes":[],"solidityType":"uint256"},{"name":"updatedAt","description":"is the timestamp when the round last was updated (i.e. answer was last computed).","recommendedTypes":[],"solidityType":"uint256"},{"name":"answeredInRound","description":"is the round ID of the round in which the answer was computed.","recommendedTypes":[],"solidityType":"uint80"}],"emittableEvents":[],"readOnly":true},{"signature":"proposedLatestRoundData(address,address)","name":"proposedLatestRoundData","description":"Used if an aggregator contract has been proposed.","parameterDecorators":[{"name":"base","description":"base asset address.","recommendedTypes":[]},{"name":"quote","description":"quote asset address.","recommendedTypes":[]}],"returnDecorators":[{"name":"id","description":"is the round ID for which data was retrieved.","recommendedTypes":[],"solidityType":"uint80"},{"name":"answer","description":"is the answer for the given round.","recommendedTypes":[],"solidityType":"int256"},{"name":"startedAt","description":"is the timestamp when the round was started.","recommendedTypes":[],"solidityType":"uint256"},{"name":"updatedAt","description":"is the timestamp when the round last was updated (i.e. answer was last computed).","recommendedTypes":[],"solidityType":"uint256"},{"name":"answeredInRound","description":"is the round ID of the round in which the answer was computed.","recommendedTypes":[],"solidityType":"uint80"}],"emittableEvents":[],"readOnly":true},{"signature":"setAccessController(address)","name":"setAccessController","description":"","parameterDecorators":[{"name":"_accessController","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Allows an owner to begin transferring ownership to a new address, pending.","parameterDecorators":[{"name":"_to","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}