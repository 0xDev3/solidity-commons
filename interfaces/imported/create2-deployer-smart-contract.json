{"schema":"../schema.json","tags":[],"name":"Create2Deployer","description":"CREATE2 Deployer Smart Contract. Helper smart contract to make easier and safer usage of the `CREATE2` EVM opcode. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when a new WPC speed is calculated for a market.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Paused(address)","name":"Paused","description":"Emitted when a new WPC speed is calculated for a market.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unpaused(address)","name":"Unpaused","description":"Emitted when a new WPC speed is calculated for a market.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"computeAddress(bytes32,bytes32)","name":"computeAddress","description":"Returns the address where a contract will be stored if deployed via {deploy}. Any change in the `bytecodeHash` or `salt` will result in a new destination address.","parameterDecorators":[{"name":"salt","description":"","recommendedTypes":[]},{"name":"codeHash","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"computeAddressWithDeployer(bytes32,bytes32,address)","name":"computeAddressWithDeployer","description":"Returns the address where a contract will be stored if deployed via {deploy} from a contract located at `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.","parameterDecorators":[{"name":"salt","description":"","recommendedTypes":[]},{"name":"codeHash","description":"","recommendedTypes":[]},{"name":"deployer","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"deploy(uint256,bytes32,bytes)","name":"deploy","description":"Deploys a contract using `CREATE2`. The address where the contract will be deployed can be known in advance via {computeAddress}. The bytecode for a contract can be obtained from Solidity with `type(contractName).creationCode`. Requirements: - `bytecode` must not be empty. - `salt` must have not been used for `bytecode` already. - the factory must have a balance of at least `value`. - if `value` is non-zero, `bytecode` must have a `payable` constructor.","parameterDecorators":[{"name":"value","description":"","recommendedTypes":[]},{"name":"salt","description":"","recommendedTypes":[]},{"name":"code","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deployERC1820Implementer(uint256,bytes32)","name":"deployERC1820Implementer","description":"Deployment of the {ERC1820Implementer}. Further information: https://eips.ethereum.org/EIPS/eip-1820.","parameterDecorators":[{"name":"value","description":"","recommendedTypes":[]},{"name":"salt","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"killCreate2Deployer(address)","name":"killCreate2Deployer","description":"Using the `CREATE2` EVM opcode always allows to redeploy a new smart contract to a previously seldestructed contract address. However, if a contract creation is attempted, due to either a creation transaction or the `CREATE`/`CREATE2` EVM opcode, and the destination address already has either nonzero nonce, or non-empty code, then the creation throws immediately, with exactly the same behavior as would arise if the first byte in the init code were an invalid opcode. This applies retroactively starting from genesis. Destroys the Create2Deployer contract and transfers all ether to a pre-defined payout address.","parameterDecorators":[{"name":"payoutAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pause()","name":"pause","description":"Triggers stopped state. Requirements: The contract must not be paused.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"paused()","name":"paused","description":"Returns true if the contract is paused, and false otherwise.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unpause()","name":"unpause","description":"Returns to normal state. Requirements: The contract must be paused.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}