{"schema":"../schema.json","tags":["strategies","vaults"],"name":"Controller","description":"Controller. The contract is the middleman between vault and strategy, it balances and trigger earn processes.","eventDecorators":[{"signature":"Earn(address,uint256)","name":"Earn","description":"Emitted when `indexer` withdrew `tokens` staked.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[],"indexed":false},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when `indexer` withdrew `tokens` staked.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"WithdrawToVaultAll(address)","name":"WithdrawToVaultAll","description":"Emitted when `indexer` withdrew `tokens` staked.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"approvedStrategies(address,address)","name":"approvedStrategies","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"claim(address,address)","name":"claim","description":"","parameterDecorators":[{"name":"_wantToken","description":"","recommendedTypes":[]},{"name":"_tokenToClaim","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"configure(address,address,address)","name":"configure","description":"Default initialize method for solving migration linearization problem. Called once only by deployer.","parameterDecorators":[{"name":"_initialTreasury","description":"treasury contract address.","recommendedTypes":[]},{"name":"_initialStrategist","description":"strategist address.","recommendedTypes":[]},{"name":"_governance","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"converters(address,address)","name":"converters","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"earn(address,uint256)","name":"earn","description":"The method converts if needed given token to business logic strategy token, transfers converted tokens to strategy, and executes the business logic.","parameterDecorators":[{"name":"_token","description":"Given token address (wERC20).","recommendedTypes":[]},{"name":"_amount","description":"Amount of given token address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getRewardStrategy(address)","name":"getRewardStrategy","description":"","parameterDecorators":[{"name":"_token","description":"want token address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"inCaseStrategyTokenGetStuck(address,address)","name":"inCaseStrategyTokenGetStuck","description":"Used only to rescue stuck or unrelated funds from strategy to vault.","parameterDecorators":[{"name":"_strategy","description":"Strategy address.","recommendedTypes":[]},{"name":"_token","description":"Unrelated token address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"inCaseTokensGetStuck(address,uint256)","name":"inCaseTokensGetStuck","description":"Used only to rescue stuck funds from controller to msg.sender.","parameterDecorators":[{"name":"_token","description":"Token to rescue.","recommendedTypes":[]},{"name":"_amount","description":"Amount tokens to rescue.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"rewards()","name":"rewards","description":"Used to obtain fees receivers address.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"setApprovedStrategy(address,address,bool)","name":"setApprovedStrategy","description":"Approves strategy to be added to mapping, needs to be done before setting strategy.","parameterDecorators":[{"name":"_token","description":"Business logic token address.","recommendedTypes":[]},{"name":"_strategy","description":"Strategy contract address.","recommendedTypes":[]},{"name":"_status","description":"Approved or not (bool)?.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setConverter(address,address,address)","name":"setConverter","description":"Usual setter of converter contract, it implements the optimal logic to token conversion.","parameterDecorators":[{"name":"_input","description":"Input token address.","recommendedTypes":[]},{"name":"_output","description":"Output token address.","recommendedTypes":[]},{"name":"_converter","description":"Converter contract.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setStrategist(address)","name":"setStrategist","description":"Usual setter with check if param is new.","parameterDecorators":[{"name":"_newStrategist","description":"New value.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setStrategy(address,address)","name":"setStrategy","description":"Sets new link between business logic token and strategy, and if strategy is already used, withdraws all funds from it to the vault.","parameterDecorators":[{"name":"_token","description":"Business logic token address.","recommendedTypes":[]},{"name":"_strategy","description":"Corresponded strategy contract address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setTreasury(address)","name":"setTreasury","description":"Usual setter with additional checks.","parameterDecorators":[{"name":"_newTreasury","description":"New value.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setVault(address,address)","name":"setVault","description":"Usual setter of vault in mapping with check if new vault is not address(0).","parameterDecorators":[{"name":"_token","description":"Business logic token of the vault.","recommendedTypes":[]},{"name":"_vault","description":"Vault address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"strategies(address)","name":"strategies","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"strategist()","name":"strategist","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"vaults(address)","name":"vaults","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(address,uint256)","name":"withdraw","description":"Withdraws funds from strategy to related vault.","parameterDecorators":[{"name":"_token","description":"Token address to withdraw.","recommendedTypes":[]},{"name":"_amount","description":"Amount tokens.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}