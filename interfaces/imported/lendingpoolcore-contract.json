{
  "schema": "../schema.json",
  "tags": [
    "borrowing",
    "lending"
  ],
  "name": "LendingPoolCore",
  "description": "LendingPoolCore contract. NOTE: The core does not enforce security checks on the update of the state (eg, updateStateOnBorrow() does not enforce that borrowed is enabled on the reserve). The check that an action can be performed is a duty of the overlying LendingPool contract.*. Holds the state of the lending pool and all the funds deposited.",
  "eventDecorators": [
    {
      "signature": "ReserveUpdated(address,uint256,uint256,uint256,uint256,uint256)",
      "name": "ReserveUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reserve",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "liquidityRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "stableBorrowRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "variableBorrowRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidityIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "variableBorrowIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "CORE_REVISION()",
      "name": "CORE_REVISION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "activateReserve(address)",
      "name": "activateReserve",
      "description": "activates a reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addressesProvider()",
      "name": "addressesProvider",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deactivateReserve(address)",
      "name": "deactivateReserve",
      "description": "deactivates a reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disableBorrowingOnReserve(address)",
      "name": "disableBorrowingOnReserve",
      "description": "disables borrowing on a reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disableReserveAsCollateral(address)",
      "name": "disableReserveAsCollateral",
      "description": "disables a reserve to be used as collateral.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disableReserveStableBorrowRate(address)",
      "name": "disableReserveStableBorrowRate",
      "description": "disable the stable borrow rate mode on a reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "enableBorrowingOnReserve(address,bool)",
      "name": "enableBorrowingOnReserve",
      "description": "enables borrowing on a reserve. Also sets the stable rate borrowing.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve.",
          "recommendedTypes": []
        },
        {
          "name": "_stableBorrowRateEnabled",
          "description": "true if the stable rate needs to be enabled, false otherwise*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "enableReserveAsCollateral(address,uint256,uint256,uint256)",
      "name": "enableReserveAsCollateral",
      "description": "enables a reserve to be used as collateral.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve*.",
          "recommendedTypes": []
        },
        {
          "name": "_baseLTVasCollateral",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_liquidationThreshold",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_liquidationBonus",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "enableReserveStableBorrowRate(address)",
      "name": "enableReserveStableBorrowRate",
      "description": "enable the stable borrow rate mode on a reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feeProvider()",
      "name": "feeProvider",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "freezeReserve(address)",
      "name": "freezeReserve",
      "description": "allows the configurator to freeze the reserve. A freezed reserve does not allow any action apart from repay, redeem, liquidationCall, rebalance.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getReserveAvailableLiquidity(address)",
      "name": "getReserveAvailableLiquidity",
      "description": "gets the available liquidity in the reserve. The available liquidity is the balance of the core contract.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveConfiguration(address)",
      "name": "getReserveConfiguration",
      "description": "this function aggregates the configuration parameters of the reserve. It's used in the LendingPoolDataProvider specifically to save gas, and avoid multiple external contract calls to fetch the same data.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveCurrentAverageStableBorrowRate(address)",
      "name": "getReserveCurrentAverageStableBorrowRate",
      "description": "gets the reserve average stable borrow rate. The average stable rate is the weighted average of all the loans taken at stable rate.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveCurrentLiquidityRate(address)",
      "name": "getReserveCurrentLiquidityRate",
      "description": "gets the reserve liquidity rate.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveCurrentStableBorrowRate(address)",
      "name": "getReserveCurrentStableBorrowRate",
      "description": "gets the reserve current stable borrow rate. Is the market rate if the reserve is empty.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveCurrentVariableBorrowRate(address)",
      "name": "getReserveCurrentVariableBorrowRate",
      "description": "gets the reserve current variable borrow rate. Is the base variable borrow rate if the reserve is empty.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveDecimals(address)",
      "name": "getReserveDecimals",
      "description": "returns the decimals of the reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveInterestRateStrategyAddress(address)",
      "name": "getReserveInterestRateStrategyAddress",
      "description": "gets the interest rate strategy contract address for the reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveIsActive(address)",
      "name": "getReserveIsActive",
      "description": "returns true if the reserve is active.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveIsFreezed(address)",
      "name": "getReserveIsFreezed",
      "description": "returns if a reserve is freezed.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve for which the information is needed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveIsStableBorrowRateEnabled(address)",
      "name": "getReserveIsStableBorrowRateEnabled",
      "description": "returns true if the stable rate is enabled on reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveLastUpdate(address)",
      "name": "getReserveLastUpdate",
      "description": "returns the timestamp of the last action on the reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve for which the information is needed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint40"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveLiquidationBonus(address)",
      "name": "getReserveLiquidationBonus",
      "description": "gets the reserve liquidation bonus.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveLiquidationThreshold(address)",
      "name": "getReserveLiquidationThreshold",
      "description": "gets the reserve liquidation threshold.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveLiquidityCumulativeIndex(address)",
      "name": "getReserveLiquidityCumulativeIndex",
      "description": "gets the reserve liquidity cumulative index.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveNormalizedIncome(address)",
      "name": "getReserveNormalizedIncome",
      "description": "gets the normalized income of the reserve. a value of 1e27 means there is no income. A value of 2e27 means there there has been 100% income.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveTotalBorrows(address)",
      "name": "getReserveTotalBorrows",
      "description": "gets the reserve total borrows.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveTotalBorrowsStable(address)",
      "name": "getReserveTotalBorrowsStable",
      "description": "gets the reserve total borrows stable.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveTotalBorrowsVariable(address)",
      "name": "getReserveTotalBorrowsVariable",
      "description": "gets the reserve total borrows variable.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveTotalLiquidity(address)",
      "name": "getReserveTotalLiquidity",
      "description": "gets the total liquidity in the reserve. The total liquidity is the balance of the core contract + total borrows.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveUtilizationRate(address)",
      "name": "getReserveUtilizationRate",
      "description": "returns the utilization rate U of a specific reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve for which the information is needed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveVariableBorrowsCumulativeIndex(address)",
      "name": "getReserveVariableBorrowsCumulativeIndex",
      "description": "gets the reserve variable borrow index.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReservemTokenAddress(address)",
      "name": "getReservemTokenAddress",
      "description": "gets the mToken contract address for the reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserves()",
      "name": "getReserves",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalmTokenSupply(address)",
      "name": "getTotalmTokenSupply",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserBasicReserveData(address,address)",
      "name": "getUserBasicReserveData",
      "description": "returns the basic data (balances, fee accrued, reserve enabled/ disabled as collateral) needed to calculate the global account data in the LendingPoolDataProvider.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserBorrowBalances(address,address)",
      "name": "getUserBorrowBalances",
      "description": "calculates and returns the borrow balances of the user.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserCurrentBorrowRateMode(address,address)",
      "name": "getUserCurrentBorrowRateMode",
      "description": "users with no loans in progress have NONE as borrow rate mode.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve for which the information is needed.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the user for which the information is needed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserCurrentStableBorrowRate(address,address)",
      "name": "getUserCurrentStableBorrowRate",
      "description": "the stable rate returned is 0 if the user is borrowing at variable or not borrowing at all.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve for which the information is needed.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the user for which the information is needed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserLastUpdate(address,address)",
      "name": "getUserLastUpdate",
      "description": "the variable borrow index of the user is 0 if the user is not borrowing or borrowing at stable.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve for which the information is needed.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the user for which the information is needed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserOriginationFee(address,address)",
      "name": "getUserOriginationFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve for which the information is needed.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the user for which the information is needed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserStakedTokenBalance(address)",
      "name": "getUserStakedTokenBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserUnderlyingAssetBalance(address,address)",
      "name": "getUserUnderlyingAssetBalance",
      "description": "gets the underlying asset balance of a user based on the corresponding mToken balance.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the user address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserVariableBorrowCumulativeIndex(address,address)",
      "name": "getUserVariableBorrowCumulativeIndex",
      "description": "the variable borrow index of the user is 0 if the user is not borrowing or borrowing at stable.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve for which the information is needed.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the user for which the information is needed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUsermTokenBalance(address,address)",
      "name": "getUsermTokenBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initReserve(address,address,uint256,address)",
      "name": "initReserve",
      "description": "initializes a reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve.",
          "recommendedTypes": []
        },
        {
          "name": "_mTokenAddress",
          "description": "the address of the overlying mToken contract.",
          "recommendedTypes": []
        },
        {
          "name": "_decimals",
          "description": "the decimals of the reserve currency.",
          "recommendedTypes": []
        },
        {
          "name": "_interestRateStrategyAddress",
          "description": "the address of the interest rate strategy contract*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "initializes the Core contract, invoked upon registration on the AddressesProvider.",
      "parameterDecorators": [
        {
          "name": "_addresessProvider",
          "description": "the addressesProvider contract*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isReserveBorrowingEnabled(address)",
      "name": "isReserveBorrowingEnabled",
      "description": "returns true if the reserve is enabled for borrowing.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isReserveUsageAsCollateralEnabled(address)",
      "name": "isReserveUsageAsCollateralEnabled",
      "description": "returns true if the reserve is enabled as collateral.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isUserAllowedToBorrowAtStable(address,address,uint256)",
      "name": "isUserAllowedToBorrowAtStable",
      "description": "checks if a user is allowed to borrow at a stable rate.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the reserve address.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the user.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "the amount the the user wants to borrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isUserUseReserveAsCollateralEnabled(address,address)",
      "name": "isUserUseReserveAsCollateralEnabled",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve for which the information is needed.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the user for which the information is needed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lendingPoolAddress()",
      "name": "lendingPoolAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidateFee(address,uint256)",
      "name": "liquidateFee",
      "description": "transfers the fees to the fees collection address in the case of liquidation.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "the address of the token being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "the amount being transferred*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "parametersProvider()",
      "name": "parametersProvider",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "refreshConfiguration()",
      "name": "refreshConfiguration",
      "description": "updates the lending pool core configuration*.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeLastAddedReserve(address)",
      "name": "removeLastAddedReserve",
      "description": "removes the last added reserve in the reservesList array.",
      "parameterDecorators": [
        {
          "name": "_reserveToRemove",
          "description": "the address of the reserve*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reservesList(uint256)",
      "name": "reservesList",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardManager()",
      "name": "rewardManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setReserveBaseLTVasCollateral(address,uint256)",
      "name": "setReserveBaseLTVasCollateral",
      "description": "allows the configurator to update the loan to value of a reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve.",
          "recommendedTypes": []
        },
        {
          "name": "_ltv",
          "description": "the new loan to value*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setReserveDecimals(address,uint256)",
      "name": "setReserveDecimals",
      "description": "allows the configurator to update the reserve decimals.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve.",
          "recommendedTypes": []
        },
        {
          "name": "_decimals",
          "description": "the decimals of the reserve*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setReserveInterestRateStrategyAddress(address,address)",
      "name": "setReserveInterestRateStrategyAddress",
      "description": "updates the address of the interest rate strategy contract.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve.",
          "recommendedTypes": []
        },
        {
          "name": "_rateStrategyAddress",
          "description": "the address of the interest rate strategy contract*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setReserveLiquidationBonus(address,uint256)",
      "name": "setReserveLiquidationBonus",
      "description": "allows the configurator to update the liquidation bonus of a reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve.",
          "recommendedTypes": []
        },
        {
          "name": "_bonus",
          "description": "the new liquidation bonus*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setReserveLiquidationThreshold(address,uint256)",
      "name": "setReserveLiquidationThreshold",
      "description": "allows the configurator to update the liquidation threshold of a reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve.",
          "recommendedTypes": []
        },
        {
          "name": "_threshold",
          "description": "the new liquidation threshold*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUserUseReserveAsCollateral(address,address,bool)",
      "name": "setUserUseReserveAsCollateral",
      "description": "enables or disables a reserve as collateral.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the principal reserve where the user deposited.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the depositor.",
          "recommendedTypes": []
        },
        {
          "name": "_useAsCollateral",
          "description": "true if the depositor wants to use the reserve as collateral*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferToFeeCollectionAddress(address,address,uint256,bool)",
      "name": "transferToFeeCollectionAddress",
      "description": "transfers the protocol fees to the fees collection address.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "the address of the token being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the user from where the transfer is happening.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "the amount being transferred*.",
          "recommendedTypes": []
        },
        {
          "name": "_transferFromCore",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferToReserve(address,address,uint256)",
      "name": "transferToReserve",
      "description": "transfers an amount from a user to the destination reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve where the amount is being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the user from where the transfer is happening.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "the amount being transferred*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferToUser(address,address,uint256)",
      "name": "transferToUser",
      "description": "transfers to the user a specific amount from the reserve.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve where the transfer is happening.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the user receiving the transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "the amount being transferred*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unfreezeReserve(address)",
      "name": "unfreezeReserve",
      "description": "allows the configurator to unfreeze the reserve. A unfreezed reserve allows any action to be executed.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStateOnBorrow(address,address,uint256,uint256,uint8)",
      "name": "updateStateOnBorrow",
      "description": "updates the state of the core as a consequence of a borrow action.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve on which the user is borrowing.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "_amountBorrowed",
          "description": "the new amount borrowed.",
          "recommendedTypes": []
        },
        {
          "name": "_borrowFee",
          "description": "the fee on the amount borrowed.",
          "recommendedTypes": []
        },
        {
          "name": "_rateMode",
          "description": "the borrow rate mode (stable, variable).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStateOnDeposit(address,address,uint256,bool)",
      "name": "updateStateOnDeposit",
      "description": "updates the state of the core as a result of a deposit action.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve in which the deposit is happening.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the the user depositing.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "the amount being deposited.",
          "recommendedTypes": []
        },
        {
          "name": "_isFirstDeposit",
          "description": "true if the user is depositing for the first time*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStateOnFlashLoan(address)",
      "name": "updateStateOnFlashLoan",
      "description": "updates the state of the core as a result of a flashloan action.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve in which the flashloan is happening*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStateOnLiquidation(address,address,address,uint256,uint256,uint256,uint256,uint256,bool)",
      "name": "updateStateOnLiquidation",
      "description": "updates the state of the core as a consequence of a liquidation action.",
      "parameterDecorators": [
        {
          "name": "_principalReserve",
          "description": "the address of the principal reserve that is being repaid.",
          "recommendedTypes": []
        },
        {
          "name": "_collateralReserve",
          "description": "the address of the collateral reserve that is being liquidated.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "_amountToLiquidate",
          "description": "the amount being repaid by the liquidator.",
          "recommendedTypes": []
        },
        {
          "name": "_collateralToLiquidate",
          "description": "the amount of collateral being liquidated.",
          "recommendedTypes": []
        },
        {
          "name": "_feeLiquidated",
          "description": "the amount of origination fee being liquidated.",
          "recommendedTypes": []
        },
        {
          "name": "_liquidatedCollateralForFee",
          "description": "the amount of collateral equivalent to the origination fee + bonus.",
          "recommendedTypes": []
        },
        {
          "name": "_balanceIncrease",
          "description": "the accrued interest on the borrowed amount.",
          "recommendedTypes": []
        },
        {
          "name": "_liquidatorReceivesMToken",
          "description": "true if the liquidator will receive Tokens, false otherwise*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStateOnRebalance(address,address,uint256)",
      "name": "updateStateOnRebalance",
      "description": "updates the state of the core as a consequence of a stable rate rebalance.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the principal reserve where the user borrowed.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "_balanceIncrease",
          "description": "the accrued interest on the borrowed amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStateOnRedeem(address,address,uint256,bool)",
      "name": "updateStateOnRedeem",
      "description": "updates the state of the core as a result of a redeem action.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve in which the redeem is happening.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the the user redeeming.",
          "recommendedTypes": []
        },
        {
          "name": "_amountRedeemed",
          "description": "the amount being redeemed.",
          "recommendedTypes": []
        },
        {
          "name": "_userRedeemedEverything",
          "description": "true if the user is redeeming everything*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStateOnRepay(address,address,uint256,uint256,uint256,bool)",
      "name": "updateStateOnRepay",
      "description": "updates the state of the core as a consequence of a repay action.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve on which the user is repaying.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "_paybackAmountMinusFees",
          "description": "the amount being paid back minus fees.",
          "recommendedTypes": []
        },
        {
          "name": "_originationFeeRepaid",
          "description": "the fee on the amount that is being repaid.",
          "recommendedTypes": []
        },
        {
          "name": "_balanceIncrease",
          "description": "the accrued interest on the borrowed amount.",
          "recommendedTypes": []
        },
        {
          "name": "_repaidWholeLoan",
          "description": "true if the user is repaying the whole loan*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStateOnSwapRate(address,address,uint256,uint256,uint256,uint8)",
      "name": "updateStateOnSwapRate",
      "description": "updates the state of the core as a consequence of a swap rate action.",
      "parameterDecorators": [
        {
          "name": "_reserve",
          "description": "the address of the reserve on which the user is repaying.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "_principalBorrowBalance",
          "description": "the amount borrowed by the user.",
          "recommendedTypes": []
        },
        {
          "name": "_compoundedBorrowBalance",
          "description": "the amount borrowed plus accrued interest.",
          "recommendedTypes": []
        },
        {
          "name": "_balanceIncrease",
          "description": "the accrued interest on the borrowed amount.",
          "recommendedTypes": []
        },
        {
          "name": "_currentRateMode",
          "description": "the current interest rate mode for the user*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}