{"schema":"../schema.json","tags":[],"name":"RoyaltyRegistry","description":"Registry to lookup royalty configurations.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"The event emitted when the uniswap window changes.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoyaltyOverride(address,address,address)","name":"RoyaltyOverride","description":"The event emitted when the uniswap window changes.","parameterDecorators":[{"name":"owner","description":"","recommendedTypes":[],"indexed":true},{"name":"tokenAddress","description":"","recommendedTypes":[],"indexed":true},{"name":"royaltyAddress","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"getRoyaltyLookupAddress(address)","name":"getRoyaltyLookupAddress","description":"IRoyaltyRegistry getRoyaltyLookupAddress implementation.","parameterDecorators":[{"name":"tokenAddress","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize()","name":"initialize","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"overrideAllowed(address)","name":"overrideAllowed","description":"IRoyaltyRegistry overrideAllowed implementation.","parameterDecorators":[{"name":"tokenAddress","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRoyaltyLookupAddress(address,address)","name":"setRoyaltyLookupAddress","description":"IRoyaltyRegistry setRoyaltyLookupAddress implementation.","parameterDecorators":[{"name":"tokenAddress","description":"","recommendedTypes":[]},{"name":"royaltyLookupAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"IERC165 supportsInterface implementation.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw()","name":"withdraw","description":"Withdraws any Ether in-case it's ever accidentaly sent to the contract.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}