{
  "schema": "../schema.json",
  "tags": [],
  "name": "Trade",
  "description": "",
  "eventDecorators": [
    {
      "signature": "BuyAsset(address,address,uint256,uint256,address)",
      "name": "BuyAsset",
      "description": "When rewards are claimed by nodes.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assetOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "quantity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BuyerFee(uint8)",
      "name": "BuyerFee",
      "description": "When rewards are claimed by nodes.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "address of the pool.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExecuteBid(address,address,uint256,uint256,address)",
      "name": "ExecuteBid",
      "description": "When rewards are claimed by nodes.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assetOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "quantity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "When rewards are claimed by nodes.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "When rewards are claimed by nodes.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "When rewards are claimed by nodes.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "When rewards are claimed by nodes.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SellerFee(uint8)",
      "name": "SellerFee",
      "description": "When rewards are claimed by nodes.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "address of the pool.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "treasuryHolderChanged(address,address)",
      "name": "treasuryHolderChanged",
      "description": "When rewards are claimed by nodes.",
      "parameterDecorators": [
        {
          "name": "previousTraesuryHolder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newTreasuryHolder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "buyAsset(tuple(address,address,address,address,uint8,uint256,bool,uint256,uint256,string,uint256,uint96[],address[],uint256),tuple(uint8,bytes32,bytes32,uint256))",
      "name": "buyAsset",
      "description": "restriction: - Nonce should be unique. - Paid invalid amount. - seller sign should be valid.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "seller",
              "description": "",
              "type": "address"
            },
            {
              "name": "buyer",
              "description": "",
              "type": "address"
            },
            {
              "name": "erc20Address",
              "description": "",
              "type": "address"
            },
            {
              "name": "nftAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "nftType",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "unitPrice",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "skipRoyalty",
              "description": "",
              "type": "bool"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenURI",
              "description": "",
              "type": "string"
            },
            {
              "name": "supply",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "royaltyFee",
              "description": "",
              "type": "uint96[]"
            },
            {
              "name": "receivers",
              "description": "",
              "type": "address[]"
            },
            {
              "name": "qty",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "sign",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buyerServiceFee()",
      "name": "buyerServiceFee",
      "description": "buyerServiceFee returns the platform's buyerservice Fee returns the buyerservice Fee in multiply of 1000.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changetTreasuryWallet(address)",
      "name": "changetTreasuryWallet",
      "description": "restriction: the TREASURYHOLDER_ROLE address only has the permission to transfer the contract treasuryHolder to new wallet address.",
      "parameterDecorators": [
        {
          "name": "_treasuryWallet",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeBid(tuple(address,address,address,address,uint8,uint256,bool,uint256,uint256,string,uint256,uint96[],address[],uint256),tuple(uint8,bytes32,bytes32,uint256))",
      "name": "executeBid",
      "description": "restriction: - Nonce should be unique. - Paid invalid amount. - buyer sign should be valid.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "seller",
              "description": "",
              "type": "address"
            },
            {
              "name": "buyer",
              "description": "",
              "type": "address"
            },
            {
              "name": "erc20Address",
              "description": "",
              "type": "address"
            },
            {
              "name": "nftAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "nftType",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "unitPrice",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "skipRoyalty",
              "description": "",
              "type": "bool"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenURI",
              "description": "",
              "type": "string"
            },
            {
              "name": "supply",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "royaltyFee",
              "description": "",
              "type": "uint96[]"
            },
            {
              "name": "receivers",
              "description": "",
              "type": "address[]"
            },
            {
              "name": "qty",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "sign",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)",
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintAndBuyAsset(tuple(address,address,address,address,uint8,uint256,bool,uint256,uint256,string,uint256,uint96[],address[],uint256),tuple(uint8,bytes32,bytes32,uint256),tuple(uint8,bytes32,bytes32,uint256))",
      "name": "mintAndBuyAsset",
      "description": "restriction: - Nonce should be unique. - Paid invalid amount. - seller sign should be valid - owner sign should be valid.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "seller",
              "description": "",
              "type": "address"
            },
            {
              "name": "buyer",
              "description": "",
              "type": "address"
            },
            {
              "name": "erc20Address",
              "description": "",
              "type": "address"
            },
            {
              "name": "nftAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "nftType",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "unitPrice",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "skipRoyalty",
              "description": "",
              "type": "bool"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenURI",
              "description": "",
              "type": "string"
            },
            {
              "name": "supply",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "royaltyFee",
              "description": "",
              "type": "uint96[]"
            },
            {
              "name": "receivers",
              "description": "",
              "type": "address[]"
            },
            {
              "name": "qty",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "sign",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "ownerSign",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintAndExecuteBid(tuple(address,address,address,address,uint8,uint256,bool,uint256,uint256,string,uint256,uint96[],address[],uint256),tuple(uint8,bytes32,bytes32,uint256),tuple(uint8,bytes32,bytes32,uint256))",
      "name": "mintAndExecuteBid",
      "description": "restriction: - Nonce should be unique. - Paid invalid amount. - buyer sign should be valid - owner sign should be valid.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "seller",
              "description": "",
              "type": "address"
            },
            {
              "name": "buyer",
              "description": "",
              "type": "address"
            },
            {
              "name": "erc20Address",
              "description": "",
              "type": "address"
            },
            {
              "name": "nftAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "nftType",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "unitPrice",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "skipRoyalty",
              "description": "",
              "type": "bool"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenURI",
              "description": "",
              "type": "string"
            },
            {
              "name": "supply",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "royaltyFee",
              "description": "",
              "type": "uint96[]"
            },
            {
              "name": "receivers",
              "description": "",
              "type": "address[]"
            },
            {
              "name": "qty",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "sign",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "ownerSign",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)",
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)",
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "sellerServiceFee()",
      "name": "sellerServiceFee",
      "description": "sellerServiceFee returns the platform's sellerServiceFee Fee returns the sellerServiceFee Fee in multiply of 1000.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setBuyerServiceFee(uint8)",
      "name": "setBuyerServiceFee",
      "description": "restriction only the admin has role to set Fees.",
      "parameterDecorators": [
        {
          "name": "_buyerFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSellerServiceFee(uint8)",
      "name": "setSellerServiceFee",
      "description": "restriction only the admin has role to set Fees.",
      "parameterDecorators": [
        {
          "name": "_sellerFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "restriction: the ADMIN_ROLE address only has the permission to transfer the contract ownership to new wallet address.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferProxy()",
      "name": "transferProxy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "treasuryHolder()",
      "name": "treasuryHolder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}