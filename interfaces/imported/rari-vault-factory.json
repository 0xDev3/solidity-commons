{"schema":"../schema.json","tags":["tokens","vaults"],"name":"VaultFactory","description":"Rari Vault Factory. Factory which enables deploying a Vault for any ERC20 token.","eventDecorators":[{"signature":"AuthorityUpdated(address,address)","name":"AuthorityUpdated","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"newAuthority","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnerUpdated(address,address)","name":"OwnerUpdated","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"VaultDeployed(address,address)","name":"VaultDeployed","description":"Emitted when a new Vault is deployed.","parameterDecorators":[{"name":"vault","description":"The newly deployed Vault contract.","recommendedTypes":[],"indexed":false},{"name":"underlying","description":"The underlying token the new Vault accepts.","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"authority()","name":"authority","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"deployVault(address)","name":"deployVault","description":"Deploys a new Vault which supports a specific underlying token. This will revert if a Vault that accepts the same underlying token has already been deployed.","parameterDecorators":[{"name":"underlying","description":"The ERC20 token that the Vault should accept.","recommendedTypes":[]}],"returnDecorators":[{"name":"vault","description":"The newly deployed Vault contract which accepts the provided underlying token.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":false},{"signature":"getVaultFromUnderlying(address)","name":"getVaultFromUnderlying","description":"Computes a Vault's address from its accepted underlying token. The Vault returned may not be deployed yet. Use isVaultDeployed to check.","parameterDecorators":[{"name":"underlying","description":"The ERC20 token that the Vault should accept.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The address of a Vault which accepts the provided underlying token.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"isVaultDeployed(address)","name":"isVaultDeployed","description":"Returns if a Vault at an address has already been deployed. This function is useful to check the return values of getVaultFromUnderlying, as it does not check that the Vault addresses it computes have been deployed yet.","parameterDecorators":[{"name":"vault","description":"The address of a Vault which may not have been deployed yet.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"A boolean indicating whether the Vault has been deployed already.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"setAuthority(address)","name":"setAuthority","description":"","parameterDecorators":[{"name":"newAuthority","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setOwner(address)","name":"setOwner","description":"","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}