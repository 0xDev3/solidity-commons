{
  "schema": "../schema.json",
  "tags": [],
  "name": "BasketService",
  "description": "Implementation of the basket service smart contract. The {BaskeService} smart contract receives cryptocurrencies and in exchange will trigger the minting process of Nylon. The value of a Nylon is determined by the value of the cryptocurrencies held by the contract. It inherits from the Ownable interfaces of the openzeppelin contracts collection. Ownable means that someone \"owns\" the BasketService. This may be a person or an other smart contract. NOTE: For now, the basket service can only hold cUSD and cEUR.",
  "eventDecorators": [
    {
      "signature": "NylonRemoved(address,uint256)",
      "name": "NylonRemoved",
      "description": "Triggered when a user has withdrawn. The {NylonRemoved} event is emitted once Nylon are burnt.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NylonTransferred(address,uint256)",
      "name": "NylonTransferred",
      "description": "Triggered when a user has withdrawn. The {NylonTransferred} event is emitted once Nylon are minted.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_evaluation()",
      "name": "_evaluation",
      "description": "{_basketEvaluation} returns a number of variables needed for the computation of {sellNylon}. Returns: - `nylonTtlSupply`, total supply of Nylon in circulation - `cUSDBasketBalance`, cUSD balance of the basket - `cEURBasketBalance`, cEUR balance of the basket.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "nylonTtlSupply",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "cUSDBasketBalance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "cEURBasketBalance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "buyNylon(uint256)",
      "name": "buyNylon",
      "description": "Nylon can be bought by x-amount. These nylon are directly minted to the sender address. Prerequisites: - allowance of the cUSD must match the current Nylon value returned by the exchange rate service. - allowance of the cEUR must match the current Nylon value returned by the exchange rate service. Requirements: - '_amount', requested amount of Nylon (must be at least 0.001).",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchange()",
      "name": "exchange",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sellNylon(uint256)",
      "name": "sellNylon",
      "description": "Nylon can be sold by x-amount. These nylon are directly burnt from the sender address. Prerequisites: - Nylon balance must be equal or above the desired sold amount. Requirements: - '_amount', requested amount of Nylon (must be at least 0.001).",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setExchangeRateService(address)",
      "name": "setExchangeRateService",
      "description": "Setter function for the external exchange rate service. Requirements: - the address of the exchange rate service. NOTE: This function is only callable by the owner.",
      "parameterDecorators": [
        {
          "name": "_exchangeRateService",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}