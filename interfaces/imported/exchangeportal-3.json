{
  "schema": "../schema.json",
  "tags": [],
  "name": "ExchangePortal",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "This event is emitted when a token swap is executed.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Trade(address,address,uint256,address,uint256,uint8)",
      "name": "Trade",
      "description": "This event is emitted when a token swap is executed.",
      "parameterDecorators": [
        {
          "name": "trader",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "src",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "srcAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "dest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "destReceived",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "exchangeType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "bancorData()",
      "name": "bancorData",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "defiPortal()",
      "name": "defiPortal",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalValue(address[],uint256[],address)",
      "name": "getTotalValue",
      "description": "Gets the total value of array of tokens and amounts.",
      "parameterDecorators": [
        {
          "name": "_fromAddresses",
          "description": "Addresses of all the tokens we're converting from.",
          "recommendedTypes": []
        },
        {
          "name": "_amounts",
          "description": "The amounts of all the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "The token who's value we're converting to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The total value of _fromAddresses and _amounts in terms of _to.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getValue(address,address,uint256)",
      "name": "getValue",
      "description": "Gets the ratio by amount of token _from in token _to by totekn type.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "Address of token we're converting from.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "Address of token we're getting the value in.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of _from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "best price from 1inch for ERC20, or ratio for Uniswap and Bancor pools.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getValueForBalancerPool(address,address,uint256)",
      "name": "getValueForBalancerPool",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getValueForUniswapPools(address,address,uint256)",
      "name": "getValueForUniswapPools",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getValueForUniswapV2Pools(address,address,uint256)",
      "name": "getValueForUniswapV2Pools",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getValueViaBancor(address,address,uint256)",
      "name": "getValueViaBancor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getValueViaDEXsAgregators(address,address,uint256)",
      "name": "getValueViaDEXsAgregators",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "merkleTreeWhiteList()",
      "name": "merkleTreeWhiteList",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oneInch()",
      "name": "oneInch",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolPortal()",
      "name": "poolPortal",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNewDefiPortal(address)",
      "name": "setNewDefiPortal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_defiPortal",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNewGetBancorData(address)",
      "name": "setNewGetBancorData",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_bancorData",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNewOneInch(address)",
      "name": "setNewOneInch",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_oneInch",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNewPoolPortal(address)",
      "name": "setNewPoolPortal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_poolPortal",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOneInchFlags(uint256)",
      "name": "setOneInchFlags",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_oneInchFlags",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setToken(address,bool)",
      "name": "setToken",
      "description": "Allows the owner to disable/enable the buying of a token.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "Token address whos trading permission is to be set.",
          "recommendedTypes": []
        },
        {
          "name": "_enabled",
          "description": "New token permission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokensTypes()",
      "name": "tokensTypes",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "trade(address,uint256,address,uint256,bytes32[],uint256[],bytes,bool)",
      "name": "trade",
      "description": "Facilitates a trade for a SmartFund.",
      "parameterDecorators": [
        {
          "name": "_source",
          "description": "ERC20 token to convert from.",
          "recommendedTypes": []
        },
        {
          "name": "_sourceAmount",
          "description": "Amount to convert from (in _source token).",
          "recommendedTypes": []
        },
        {
          "name": "_destination",
          "description": "ERC20 token to convert to.",
          "recommendedTypes": []
        },
        {
          "name": "_type",
          "description": "The type of exchange to trade with.",
          "recommendedTypes": []
        },
        {
          "name": "_proof",
          "description": "Merkle tree proof (if not used just set []).",
          "recommendedTypes": []
        },
        {
          "name": "_positions",
          "description": "Merkle tree positions (if not used just set []).",
          "recommendedTypes": []
        },
        {
          "name": "_additionalData",
          "description": "For additional data (if not used just set 0x0).",
          "recommendedTypes": []
        },
        {
          "name": "_verifyDestanation",
          "description": "For additional check if token in list or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "receivedAmount",
          "description": "The amount of _destination received from the trade.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "version()",
      "name": "version",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}