{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "Controller",
  "description": "Controller contract. A controller controls the organizations tokens, reputation and avatar. It is subject to a set of schemes and constraints that determine its behavior. Each scheme has it own parameters and operation permissions.",
  "eventDecorators": [
    {
      "signature": "AddGlobalConstraint(address,bytes32,uint8)",
      "name": "AddGlobalConstraint",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BurnReputation(address,address,uint256)",
      "name": "BurnReputation",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MintReputation(address,address,uint256)",
      "name": "MintReputation",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MintTokens(address,address,uint256)",
      "name": "MintTokens",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RegisterScheme(address,address)",
      "name": "RegisterScheme",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_scheme",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RemoveGlobalConstraint(address,uint256,bool)",
      "name": "RemoveGlobalConstraint",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UnregisterScheme(address,address)",
      "name": "UnregisterScheme",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_scheme",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpgradeController(address,address)",
      "name": "UpgradeController",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "_oldController",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newController",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addGlobalConstraint(address,bytes32,address)",
      "name": "addGlobalConstraint",
      "description": "add or update Global Constraint.",
      "parameterDecorators": [
        {
          "name": "_globalConstraint",
          "description": "the address of the global constraint to be added.",
          "recommendedTypes": []
        },
        {
          "name": "_params",
          "description": "the constraint parameters hash.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "avatar()",
      "name": "avatar",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burnReputation(uint256,address,address)",
      "name": "burnReputation",
      "description": "Burns `_amount` of reputation from `_from`.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "amount of reputation to burn.",
          "recommendedTypes": []
        },
        {
          "name": "_from",
          "description": "The address that will lose the reputation.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "externalTokenApproval(address,address,uint256,address)",
      "name": "externalTokenApproval",
      "description": "externalTokenApproval approve the spender address to spend a specified amount of tokens on behalf of msg.sender.",
      "parameterDecorators": [
        {
          "name": "_externalToken",
          "description": "the address of the Token Contract.",
          "recommendedTypes": []
        },
        {
          "name": "_spender",
          "description": "address.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "the amount of ether (in Wei) which the approval is referring to.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "externalTokenTransfer(address,address,uint256,address)",
      "name": "externalTokenTransfer",
      "description": "send some amount of arbitrary ERC20 Tokens.",
      "parameterDecorators": [
        {
          "name": "_externalToken",
          "description": "the address of the Token Contract.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "address of the beneficiary.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "the amount of ether (in Wei) to send.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "externalTokenTransferFrom(address,address,address,uint256,address)",
      "name": "externalTokenTransferFrom",
      "description": "transfer token \"from\" address \"to\" address One must to approve the amount of tokens which can be spend from the \"from\" account.This can be done using externalTokenApprove.",
      "parameterDecorators": [
        {
          "name": "_externalToken",
          "description": "the address of the Token Contract.",
          "recommendedTypes": []
        },
        {
          "name": "_from",
          "description": "address of the account to send from.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "address of the beneficiary.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "the amount of ether (in Wei) to send.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "genericCall(address,bytes,address,uint256)",
      "name": "genericCall",
      "description": "perform a generic call to an arbitrary contract.",
      "parameterDecorators": [
        {
          "name": "_contract",
          "description": "the contract's address to call.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "ABI-encoded contract call to call `_contract` address.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "the controller's avatar address.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "value (ETH) to transfer with the transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getGlobalConstraintParameters(address,address)",
      "name": "getGlobalConstraintParameters",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_globalConstraint",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNativeReputation(address)",
      "name": "getNativeReputation",
      "description": "getNativeReputation.",
      "parameterDecorators": [
        {
          "name": "_avatar",
          "description": "the organization avatar.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSchemeParameters(address,address)",
      "name": "getSchemeParameters",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_scheme",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSchemePermissions(address,address)",
      "name": "getSchemePermissions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_scheme",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "globalConstraintsCount(address)",
      "name": "globalConstraintsCount",
      "description": "globalConstraintsCount return the global constraint pre and post count.",
      "parameterDecorators": [
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "globalConstraintsPost(uint256)",
      "name": "globalConstraintsPost",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "gcAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "params",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "globalConstraintsPre(uint256)",
      "name": "globalConstraintsPre",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "gcAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "params",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "globalConstraintsRegisterPost(address)",
      "name": "globalConstraintsRegisterPost",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isRegistered",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "globalConstraintsRegisterPre(address)",
      "name": "globalConstraintsRegisterPre",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isRegistered",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isGlobalConstraintRegistered(address,address)",
      "name": "isGlobalConstraintRegistered",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_globalConstraint",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSchemeRegistered(address,address)",
      "name": "isSchemeRegistered",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_scheme",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "metaData(string,address)",
      "name": "metaData",
      "description": "metaData emits an event with a string, should contain the hash of some meta data.",
      "parameterDecorators": [
        {
          "name": "_metaData",
          "description": "a string representing a hash of the meta data.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "Avatar.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintReputation(uint256,address,address)",
      "name": "mintReputation",
      "description": "Mint `_amount` of reputation that are assigned to `_to` .",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "amount of reputation to mint.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "beneficiary address.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintTokens(uint256,address,address)",
      "name": "mintTokens",
      "description": "mint tokens .",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "amount of token to mint.",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "beneficiary address.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nativeReputation()",
      "name": "nativeReputation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nativeToken()",
      "name": "nativeToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newController()",
      "name": "newController",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registerScheme(address,bytes32,bytes4,address)",
      "name": "registerScheme",
      "description": "register a scheme.",
      "parameterDecorators": [
        {
          "name": "_scheme",
          "description": "the address of the scheme.",
          "recommendedTypes": []
        },
        {
          "name": "_paramsHash",
          "description": "a hashed configuration of the usage of the scheme.",
          "recommendedTypes": []
        },
        {
          "name": "_permissions",
          "description": "the permissions the new scheme will have.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeGlobalConstraint(address,address)",
      "name": "removeGlobalConstraint",
      "description": "remove Global Constraint.",
      "parameterDecorators": [
        {
          "name": "_globalConstraint",
          "description": "the address of the global constraint to be remove.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "schemes(address)",
      "name": "schemes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "paramsHash",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "permissions",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sendEther(uint256,address,address)",
      "name": "sendEther",
      "description": "send some ether.",
      "parameterDecorators": [
        {
          "name": "_amountInWei",
          "description": "the amount of ether (in Wei) to send.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "address of the beneficiary.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unregisterScheme(address,address)",
      "name": "unregisterScheme",
      "description": "unregister a scheme.",
      "parameterDecorators": [
        {
          "name": "_scheme",
          "description": "the address of the scheme.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unregisterSelf(address)",
      "name": "unregisterSelf",
      "description": "unregister the caller's scheme.",
      "parameterDecorators": [
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeController(address,address)",
      "name": "upgradeController",
      "description": "upgrade the Controller The function will trigger an event 'UpgradeController'.",
      "parameterDecorators": [
        {
          "name": "_newController",
          "description": "the address of the new controller.",
          "recommendedTypes": []
        },
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}