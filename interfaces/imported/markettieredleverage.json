{
  "schema": "../schema.json",
  "tags": [],
  "name": "MarketTieredLeverage",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AdminChanged(address,address)",
      "name": "AdminChanged",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "The address of the new owner.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "previousOwner",
          "description": "The address of the previous owner.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BeaconUpgraded(address)",
      "name": "BeaconUpgraded",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "beacon",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Deposit(uint8,uint256,address,uint32)",
      "name": "Deposit",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "poolId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "depositAdded",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ExecuteEpochSettlementMintUser(uint8,address,uint32)",
      "name": "ExecuteEpochSettlementMintUser",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "poolId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epochSettledUntil",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ExecuteEpochSettlementRedeemUser(uint8,address,uint32)",
      "name": "ExecuteEpochSettlementRedeemUser",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "poolId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epochSettledUntil",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Initialized(uint8)",
      "name": "Initialized",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "version",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MarketDeprecated()",
      "name": "MarketDeprecated",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": []
    },
    {
      "signature": "OracleUpdated(address,address)",
      "name": "OracleUpdated",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "The address of the new owner.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "previousOwner",
          "description": "The address of the previous owner.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Redeem(uint8,uint256,address,uint32)",
      "name": "Redeem",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "poolId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "synthRedeemed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SystemUpdateInfo(uint32,uint256,tuple[])",
      "name": "SystemUpdateInfo",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "underlyingAssetPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "poolStates",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Upgraded(address)",
      "name": "Upgraded",
      "description": "A processed deposit event. An event which is triggered when the owner is changed.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ADMIN_ROLE()",
      "name": "ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "UPGRADER_ROLE()",
      "name": "UPGRADER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_getAmountPaymentToken(uint256,uint256)",
      "name": "_getAmountPaymentToken",
      "description": "Converts synth token amounts to payment token amounts at a synth token price. Price assumed base 1e18.",
      "parameterDecorators": [
        {
          "name": "amountSyntheticToken",
          "description": "Amount of synth token in wei.",
          "recommendedTypes": []
        },
        {
          "name": "syntheticTokenPriceInPaymentTokens",
          "description": "The conversion rate from synth to payment tokens in base 1e18.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountPaymentToken",
          "description": "The calculated amount of payment tokens in token's lowest denomination.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_paymentToken()",
      "name": "_paymentToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calculateActualLiquidity()",
      "name": "calculateActualLiquidity",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "actualLiquidity",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calculateEffectiveLiquidity()",
      "name": "calculateEffectiveLiquidity",
      "description": "Calculates effective liquidity of each side. Value assumed base 1e18.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "effectiveLiquidityPoolType",
          "description": "List of effective liquidity of long and short, the sum of effective liquidity of every pool on each side.",
          "recommendedTypes": [],
          "solidityType": "uint256[2]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deprecateMarket()",
      "name": "deprecateMarket",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "epochInfo()",
      "name": "epochInfo",
      "description": "Returns the epochInfo struct.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "_epochInfo Struct containing info about the latest executed epoch and previous epoch.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executeOutstandingEpochSettlementsUser(address)",
      "name": "executeOutstandingEpochSettlementsUser",
      "description": "After markets have been batched updated on a new oracle price, transfers any owed tokens to a user from their next price actions for that update to that user.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "The address of the user for whom to execute the function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exitDeprecatedMarket()",
      "name": "exitDeprecatedMarket",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exitDeprecatedMarket(address)",
      "name": "exitDeprecatedMarket",
      "description": "Allows users to exit the market after it has been deprecated.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getEffectiveValueChange(uint256,uint256,int256,int256)",
      "name": "getEffectiveValueChange",
      "description": "Returns the effective liquidity shift between long and short sides due to observed price change. gets the value transfer from short to long (positive is a gain for long, negative is a gain for short).",
      "parameterDecorators": [
        {
          "name": "effectiveValueLong",
          "description": "Effective liquidity of all pools on the Long side.",
          "recommendedTypes": []
        },
        {
          "name": "effectiveValueShort",
          "description": "Effective liquidity of all pools on the Short side.",
          "recommendedTypes": []
        },
        {
          "name": "previousPrice",
          "description": "Previous epoch execution price.",
          "recommendedTypes": []
        },
        {
          "name": "currentPrice",
          "description": "Current epoch execution price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "effectiveValueChange",
          "description": "Represents the effective liquidity shift between long and short sides due to observed price change.",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUsersConfirmedButNotSettledSynthBalance(address,uint8,uint8)",
      "name": "getUsersConfirmedButNotSettledSynthBalance",
      "description": "Returns the balance of user actions in epochs which have been executed but not yet distributed to users. Prices have a fixed 18 decimals.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "Address of user.",
          "recommendedTypes": []
        },
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "The index of the pool in the side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "confirmedButNotSettledBalance",
          "description": "Returns balance of user actions in epochs which have been executed but not yet distributed to users.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getValueChangeForPool(uint256,int256,uint256,uint256,uint8)",
      "name": "getValueChangeForPool",
      "description": "Returns the proportionate value change for the pool, given its effective liquidity relative to total effective liquidity of the side.",
      "parameterDecorators": [
        {
          "name": "totalEffectiveLiquidity",
          "description": "Effective liquidity of all pools on the side.",
          "recommendedTypes": []
        },
        {
          "name": "valueChange",
          "description": "Effective value change from short to long.",
          "recommendedTypes": []
        },
        {
          "name": "poolValue",
          "description": "Actual liquidity of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "leverage",
          "description": "Leverage of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "poolType",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "valueChangeForPool",
          "description": "Represents the proportionate value change for the pool, due to the price change.",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)",
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxPercentChange()",
      "name": "maxPercentChange",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintLong(uint256,uint224)",
      "name": "mintLong",
      "description": "Allows users to mint long synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denomination for which to mint synthetic assets at next price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintLongFor(uint256,uint224,address)",
      "name": "mintLongFor",
      "description": "Allows mint long synthetic assets for a market on behalf of some user. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denomination for which to mint synthetic assets at next price.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "Address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintShort(uint256,uint224)",
      "name": "mintShort",
      "description": "Allows users to mint short synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denomination for which to mint synthetic assets at next price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintShortFor(uint256,uint224,address)",
      "name": "mintShortFor",
      "description": "Allows mint short synthetic assets for a market on behalf of some user. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denomination for which to mint synthetic assets at next price.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "Address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "numberOfPoolsOfType(uint8)",
      "name": "numberOfPoolsOfType",
      "description": "Returns the number of pools of poolType i.e. Long or Short.",
      "parameterDecorators": [
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "numberOfPoolsOfType Number of pools of poolType.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracleManager()",
      "name": "oracleManager",
      "description": "Returns the interface of OracleManager for the market.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "_oracleManager OracleManager interface.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pools(uint8,uint256)",
      "name": "pools",
      "description": "Returns the pool struct given poolType and poolTier.",
      "parameterDecorators": [
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "The index of the pool in the side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "pools Struct containing information about the pool i.e. value, leverage etc.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxiableUUID()",
      "name": "proxiableUUID",
      "description": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemLong(uint256,uint224)",
      "name": "redeemLong",
      "description": "Allows users to mint long synthetic assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denominationfor which to mint synthetic assets at next price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemShort(uint256,uint224)",
      "name": "redeemShort",
      "description": "Allows users to redeem short synthetic assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denominationfor which to redeem synthetic assets at next price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)",
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)",
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "syntheticToken_priceSnapshot(uint32,uint8,uint256)",
      "name": "syntheticToken_priceSnapshot",
      "description": "Returns the price of the synthetic token given poolType and poolTier. Prices have a fixed 18 decimals.",
      "parameterDecorators": [
        {
          "name": "currentExecutedEpoch",
          "description": "Number of epoch that has been executed.",
          "recommendedTypes": []
        },
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "The index of the pool in the side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "syntheticToken_priceSnapshot Price of the synthetic tokens in the pool.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateSystemState()",
      "name": "updateSystemState",
      "description": "Updates the state of a market to account for the latest oracle price update. We have to check market not deprecated to avoid changing state once deprecated.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateSystemStateSpecific(uint256)",
      "name": "updateSystemStateSpecific",
      "description": "Updates the state of a market to account for the last n number of epochs. We have to check market not deprecated to avoid changing state once deprecated.",
      "parameterDecorators": [
        {
          "name": "specificNumberOfEpochsToUpdate",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeTo(address)",
      "name": "upgradeTo",
      "description": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "upgradeToAndCall(address,bytes)",
      "name": "upgradeToAndCall",
      "description": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "user_paymentToken_depositAction(address,uint8,uint256)",
      "name": "user_paymentToken_depositAction",
      "description": "Returns the deposit action in payment tokens of provided user for the given poolType and poolTier. Action amounts have a fixed 18 decimals.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "Address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "The index of the pool in the side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "user_paymentToken_depositAction Outstanding deposit action by user for the given poolType and poolTier.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "user_syntheticToken_redeemAction(address,uint8,uint256)",
      "name": "user_syntheticToken_redeemAction",
      "description": "Returns the redeem action in synthetic tokens of provided user for the given poolType and poolTier. Action amounts have a fixed 18 decimals.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "Address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "The index of the pool in the side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "user_syntheticToken_redeemAction Outstanding redeem action by user for the given poolType and poolTier.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "yieldManager()",
      "name": "yieldManager",
      "description": "Returns the address of the YieldManager for the market.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "_yieldManager address of the YieldManager.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}