{"schema":"../schema.json","tags":[],"name":"M4AService","description":"","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Triggered when an amount of an ERC20 has been transferred from this contract to an address.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"Triggered when an amount of an ERC20 has been transferred from this contract to an address.","parameterDecorators":[{"name":"amount","description":"Amount of the transaction.","recommendedTypes":[],"indexed":true},{"name":"to","description":"Address of the receiver.","recommendedTypes":[],"indexed":true},{"name":"token","description":"ERC20 token address.","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"Triggered when an amount of an ERC20 has been transferred from this contract to an address.","parameterDecorators":[{"name":"amount","description":"Amount of the transaction.","recommendedTypes":[],"indexed":true},{"name":"to","description":"Address of the receiver.","recommendedTypes":[],"indexed":true},{"name":"token","description":"ERC20 token address.","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"Triggered when an amount of an ERC20 has been transferred from this contract to an address.","parameterDecorators":[{"name":"amount","description":"Amount of the transaction.","recommendedTypes":[],"indexed":true},{"name":"to","description":"Address of the receiver.","recommendedTypes":[],"indexed":true},{"name":"token","description":"ERC20 token address.","recommendedTypes":[],"indexed":true}]},{"signature":"TicketBought(uint256,address,address,string,uint256)","name":"TicketBought","description":"Triggered when an amount of an ERC20 has been transferred from this contract to an address.","parameterDecorators":[{"name":"newTicketId","description":"","recommendedTypes":[],"indexed":true},{"name":"buyer","description":"","recommendedTypes":[],"indexed":false},{"name":"recipient","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenURI","description":"","recommendedTypes":[],"indexed":false},{"name":"credits","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ticketIssued(uint256,address)","name":"ticketIssued","description":"Triggered when an amount of an ERC20 has been transferred from this contract to an address.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[],"indexed":false},{"name":"param1","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"MEMBER()","name":"MEMBER","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"NFTicket()","name":"NFTicket","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"buyM4ATicket(address,string,uint256)","name":"buyM4ATicket","description":"","parameterDecorators":[{"name":"recipient","description":"","recommendedTypes":[]},{"name":"tokenURI","description":"","recommendedTypes":[]},{"name":"credits","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"buyNFTicket(address,uint256,address,string,uint256)","name":"buyNFTicket","description":"","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[]},{"name":"value","description":"","recommendedTypes":[]},{"name":"recipient","description":"","recommendedTypes":[]},{"name":"tokenURI","description":"","recommendedTypes":[]},{"name":"credits","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)","RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isDefaultAdmin(address)","name":"isDefaultAdmin","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isMember(address)","name":"isMember","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"kmPerCredit()","name":"kmPerCredit","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":true},{"signature":"minCredits()","name":"minCredits","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":true},{"signature":"nfticket()","name":"nfticket","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pricePerCredit()","name":"pricePerCredit","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)","RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)","RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"serviceIdentifier()","name":"serviceIdentifier","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint16"}],"emittableEvents":[],"readOnly":true},{"signature":"setKmPerCredit(uint32)","name":"setKmPerCredit","description":"","parameterDecorators":[{"name":"_kmPerCredit","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMinCredits(uint32)","name":"setMinCredits","description":"","parameterDecorators":[{"name":"_minCredits","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPricePerCredit(uint256)","name":"setPricePerCredit","description":"","parameterDecorators":[{"name":"_pricePerCredit","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"See {IERC165-supportsInterface}.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"vehicleController()","name":"vehicleController","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"viewCredits(uint256)","name":"viewCredits","description":"","parameterDecorators":[{"name":"ticketId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}