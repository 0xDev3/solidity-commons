{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "swaps"
  ],
  "name": "LPFeeManagerV2",
  "description": "LP fee manager. Swap LP token fees collected to different token.",
  "eventDecorators": [
    {
      "signature": "LiquidityRemovalFailed(address)",
      "name": "LiquidityRemovalFailed",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "pairAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LiquidityRemoved(address,uint256,uint256)",
      "name": "LiquidityRemoved",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "pairAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amountA",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountB",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Swap(uint256,uint256,address[])",
      "name": "Swap",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountOut",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "path",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SwapFailed(uint256,uint256,address[])",
      "name": "SwapFailed",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountOut",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "path",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SweepWithdrawNative(address,uint256)",
      "name": "SweepWithdrawNative",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "balance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SweepWithdrawToken(address,address,uint256)",
      "name": "SweepWithdrawToken",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "balance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "allowNativeSweep()",
      "name": "allowNativeSweep",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "factory()",
      "name": "factory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_router",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lockToken(address)",
      "name": "lockToken",
      "description": "Lock single token so they can't be transferred from the contract. Once locked it can't be unlocked.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lockTokens(address[])",
      "name": "lockTokens",
      "description": "Lock multiple tokens so they can't be transferred from the contract. Once locked it can't be unlocked.",
      "parameterDecorators": [
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lockedTokens(address)",
      "name": "lockedTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "refuseNativeSweep()",
      "name": "refuseNativeSweep",
      "description": "Refuse native sweep. Once refused can't be allowed again.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeLiquidityTokens(address[],uint256[],uint256[],uint256[],address,bool)",
      "name": "removeLiquidityTokens",
      "description": "Remove LP and unwrap to base tokens.",
      "parameterDecorators": [
        {
          "name": "_lpTokens",
          "description": "address list of LP tokens to unwrap.",
          "recommendedTypes": []
        },
        {
          "name": "_amounts",
          "description": "Amount of each LP token to sell.",
          "recommendedTypes": []
        },
        {
          "name": "_token0Outs",
          "description": "Minimum token 0 output requested.",
          "recommendedTypes": []
        },
        {
          "name": "_token1Outs",
          "description": "Minimum token 1 output requested.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "address the tokens need to be transferred to.",
          "recommendedTypes": []
        },
        {
          "name": "_revertOnFailure",
          "description": "If false, the tx will not revert on liquidity removal failures.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "router()",
      "name": "router",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swapTokens(uint256[],uint256[],address[][],address,bool)",
      "name": "swapTokens",
      "description": "Swap amount in vs amount out.",
      "parameterDecorators": [
        {
          "name": "_amountIns",
          "description": "Array of amount ins.",
          "recommendedTypes": []
        },
        {
          "name": "_amountOuts",
          "description": "Array of amount outs.",
          "recommendedTypes": []
        },
        {
          "name": "_paths",
          "description": "path to follow for swapping.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "address the tokens need to be transferred to.",
          "recommendedTypes": []
        },
        {
          "name": "_revertOnFailure",
          "description": "If false, the tx will not revert on swap failures.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sweepNative(address)",
      "name": "sweepNative",
      "description": "Sweep native coin.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "address the native coins should be transferred to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sweepTokens(address[],address)",
      "name": "sweepTokens",
      "description": "Transfers erc20 tokens to owner Only owner of contract can call this function.",
      "parameterDecorators": [
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}