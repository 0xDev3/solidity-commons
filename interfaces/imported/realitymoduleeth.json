{
  "schema": "../schema.json",
  "tags": [],
  "name": "RealityModuleETH",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AvatarSet(address,address)",
      "name": "AvatarSet",
      "description": "Emitted when an ERC721 token is withdrawn.",
      "parameterDecorators": [
        {
          "name": "previousAvatar",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAvatar",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ChangedGuard(address)",
      "name": "ChangedGuard",
      "description": "Emitted when an ERC721 token is withdrawn.",
      "parameterDecorators": [
        {
          "name": "guard",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when an ERC721 token is withdrawn.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProposalQuestionCreated(bytes32,string)",
      "name": "ProposalQuestionCreated",
      "description": "Emitted when an ERC721 token is withdrawn.",
      "parameterDecorators": [
        {
          "name": "questionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RealityModuleSetup(address,address,address,address)",
      "name": "RealityModuleSetup",
      "description": "Emitted when an ERC721 token is withdrawn.",
      "parameterDecorators": [
        {
          "name": "initiator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "avatar",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TargetSet(address,address)",
      "name": "TargetSet",
      "description": "Emitted when an ERC721 token is withdrawn.",
      "parameterDecorators": [
        {
          "name": "previousTarget",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newTarget",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DOMAIN_SEPARATOR_TYPEHASH()",
      "name": "DOMAIN_SEPARATOR_TYPEHASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "INVALIDATED()",
      "name": "INVALIDATED",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "TRANSACTION_TYPEHASH()",
      "name": "TRANSACTION_TYPEHASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addProposal(string,bytes32[])",
      "name": "addProposal",
      "description": "The nonce used for the question by this function is always 0. Function to add a proposal that should be considered for execution.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "Id that should identify the proposal uniquely.",
          "recommendedTypes": []
        },
        {
          "name": "txHashes",
          "description": "EIP-712 hashes of the transactions that should be executed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addProposalWithNonce(string,bytes32[],uint256)",
      "name": "addProposalWithNonce",
      "description": "Function to add a proposal that should be considered for execution.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "Id that should identify the proposal uniquely.",
          "recommendedTypes": []
        },
        {
          "name": "txHashes",
          "description": "EIP-712 hashes of the transactions that should be executed.",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "Nonce that should be used when asking the question on the oracle.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "answerExpiration()",
      "name": "answerExpiration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "avatar()",
      "name": "avatar",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "buildQuestion(string,bytes32[])",
      "name": "buildQuestion",
      "description": "Build the question by combining the proposalId and the hex string of the hash of the txHashes.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "Id of the proposal that proposes to execute the transactions represented by the txHashes.",
          "recommendedTypes": []
        },
        {
          "name": "txHashes",
          "description": "EIP-712 Hashes of the transactions that should be executed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executeProposal(string,bytes32[],address,uint256,bytes,uint8)",
      "name": "executeProposal",
      "description": "The txIndex used by this function is always 0. Executes the transactions of a proposal via the target if accepted.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "Id that should identify the proposal uniquely.",
          "recommendedTypes": []
        },
        {
          "name": "txHashes",
          "description": "EIP-712 hashes of the transactions that should be executed.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Target of the transaction that should be executed.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Wei value of the transaction that should be executed.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data of the transaction that should be executed.",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "Operation (Call or Delegatecall) of the transaction that should be executed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeProposalWithIndex(string,bytes32[],address,uint256,bytes,uint8,uint256)",
      "name": "executeProposalWithIndex",
      "description": "Executes the transactions of a proposal via the target if accepted.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "Id that should identify the proposal uniquely.",
          "recommendedTypes": []
        },
        {
          "name": "txHashes",
          "description": "EIP-712 hashes of the transactions that should be executed.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Target of the transaction that should be executed.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Wei value of the transaction that should be executed.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data of the transaction that should be executed.",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "Operation (Call or Delegatecall) of the transaction that should be executed.",
          "recommendedTypes": []
        },
        {
          "name": "txIndex",
          "description": "Index of the transaction hash in txHashes. This is used as the nonce for the transaction, to make the tx hash unique.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executedProposalTransactions(bytes32,bytes32)",
      "name": "executedProposalTransactions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "generateTransactionHashData(address,uint256,bytes,uint8,uint256)",
      "name": "generateTransactionHashData",
      "description": "Generates the data for the module transaction hash (required for signing).",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getChainId()",
      "name": "getChainId",
      "description": "Returns the chain id used by this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGuard()",
      "name": "getGuard",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_guard",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getQuestionId(string,uint256)",
      "name": "getQuestionId",
      "description": "It is required that this is the same as for the oracle implementation used. Generate the question id.",
      "parameterDecorators": [
        {
          "name": "question",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTransactionHash(address,uint256,bytes,uint8,uint256)",
      "name": "getTransactionHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "guard()",
      "name": "guard",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "markProposalAsInvalid(string,bytes32[])",
      "name": "markProposalAsInvalid",
      "description": "This can only be called by the owner. Marks a proposal as invalid, preventing execution of the connected transactions.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "Id that should identify the proposal uniquely.",
          "recommendedTypes": []
        },
        {
          "name": "txHashes",
          "description": "EIP-712 hashes of the transactions that should be executed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "markProposalAsInvalidByHash(bytes32)",
      "name": "markProposalAsInvalidByHash",
      "description": "This can only be called by the owner. Marks a question hash as invalid, preventing execution of the connected transactions.",
      "parameterDecorators": [
        {
          "name": "questionHash",
          "description": "Question hash calculated based on the proposal id and txHashes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "markProposalWithExpiredAnswerAsInvalid(bytes32)",
      "name": "markProposalWithExpiredAnswerAsInvalid",
      "description": "Marks a proposal with an expired answer as invalid, preventing execution of the connected transactions.",
      "parameterDecorators": [
        {
          "name": "questionHash",
          "description": "Question hash calculated based on the proposal id and txHashes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "minimumBond()",
      "name": "minimumBond",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracle()",
      "name": "oracle",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "questionArbitrator()",
      "name": "questionArbitrator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "questionCooldown()",
      "name": "questionCooldown",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "questionIds(bytes32)",
      "name": "questionIds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "questionTimeout()",
      "name": "questionTimeout",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAnswerExpiration(uint32)",
      "name": "setAnswerExpiration",
      "description": "A proposal with an expired answer is the same as a proposal that has been marked invalidThere need to be at least 60 seconds between end of cooldown and expirationThis can only be called by the owner. Sets the duration for which a positive answer is valid.",
      "parameterDecorators": [
        {
          "name": "expiration",
          "description": "Duration that a positive answer of the oracle is valid in seconds (or 0 if valid forever).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setArbitrator(address)",
      "name": "setArbitrator",
      "description": "This can only be called by the owner. Sets the question arbitrator that will be used for future questions.",
      "parameterDecorators": [
        {
          "name": "arbitrator",
          "description": "Address of the arbitrator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAvatar(address)",
      "name": "setAvatar",
      "description": "Can only be called by the current owner. Sets the avatar to a new avatar (`newAvatar`).",
      "parameterDecorators": [
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGuard(address)",
      "name": "setGuard",
      "description": "Set a guard that checks transactions before execution.",
      "parameterDecorators": [
        {
          "name": "_guard",
          "description": "The address of the guard to be used or the 0 address to disable the guard.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumBond(uint256)",
      "name": "setMinimumBond",
      "description": "This can only be called by the owner. Sets the minimum bond that is required for an answer to be accepted.",
      "parameterDecorators": [
        {
          "name": "bond",
          "description": "Minimum bond that is required for an answer to be accepted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setQuestionCooldown(uint32)",
      "name": "setQuestionCooldown",
      "description": "This can only be called by the ownerThere need to be at least 60 seconds between end of cooldown and expiration. Sets the cooldown before an answer is usable.",
      "parameterDecorators": [
        {
          "name": "cooldown",
          "description": "Cooldown in seconds that should be required after a oracle provided answer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setQuestionTimeout(uint32)",
      "name": "setQuestionTimeout",
      "description": "This can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "timeout",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTarget(address)",
      "name": "setTarget",
      "description": "Can only be called by the current owner. Sets the target to a new target (`newTarget`).",
      "parameterDecorators": [
        {
          "name": "_target",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTemplate(uint256)",
      "name": "setTemplate",
      "description": "Check https://github.com/realitio/realitio-dapp#structuring-and-fetching-information for more informationThis can only be called by the owner. Sets the template that should be used for future questions.",
      "parameterDecorators": [
        {
          "name": "templateId",
          "description": "ID of the template that should be used for proposal questions.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUp(bytes)",
      "name": "setUp",
      "description": "",
      "parameterDecorators": [
        {
          "name": "initParams",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "target()",
      "name": "target",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "template()",
      "name": "template",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}