{
  "schema": "../schema.json",
  "tags": [],
  "name": "WeddingLedger",
  "description": "This is a primitive WeddingLedger contract still needs two improvements: 1) divorced addresses cannot marry again (see registeredAddresses mapping); 2) it does not represent polygamous cultures (could be done via mapping (address => address[]));.",
  "eventDecorators": [
    {
      "signature": "CoupleBroken(bytes32)",
      "name": "CoupleBroken",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CoupleCrisis(bytes32,address)",
      "name": "CoupleCrisis",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CoupleDivorced(bytes32)",
      "name": "CoupleDivorced",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CoupleMarried(bytes32)",
      "name": "CoupleMarried",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CoupleOnFire(bytes32)",
      "name": "CoupleOnFire",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WillingnessExpressed(bytes32,address)",
      "name": "WillingnessExpressed",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addOfficer(address)",
      "name": "addOfficer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newOfficer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "declareDevorce(bytes32)",
      "name": "declareDevorce",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_weddingHash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "declareWedding(bytes32)",
      "name": "declareWedding",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_weddingHash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hashByAddress(address)",
      "name": "hashByAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOfficer(address)",
      "name": "isOfficer",
      "description": "mapping for Officers to be allowed to sign mapping for signers to be allowed to signers mapping to return the Couples' status boolean (true: married, false: divorced) mapping to index the Couples by ID.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeOfficer(address)",
      "name": "removeOfficer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_oldOfficer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCouple(address,address,uint256)",
      "name": "setCouple",
      "description": "onlyOfficers can set the Couple they need the weds (groom, bride) addresses and a secret date from them to generate an ID then the weds are mapped true, and pushed as signers in the signers[] ultimately, the weddingID is mapped to the new Couple Struct and added to allWeddingHashes[].",
      "parameterDecorators": [
        {
          "name": "_wed1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_wed2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_secretDate",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "signDevorce(bytes32)",
      "name": "signDevorce",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_weddingHash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "signWedding(bytes32)",
      "name": "signWedding",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_weddingHash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "weddingByHash(bytes32)",
      "name": "weddingByHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "wed1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "wed2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "weddingID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "wed1Will",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "wed2Will",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "marriageSettlement",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}