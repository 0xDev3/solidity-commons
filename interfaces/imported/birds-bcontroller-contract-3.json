{
  "schema": "../schema.json",
  "tags": [],
  "name": "BController",
  "description": "Bird's BController Contract.",
  "eventDecorators": [
    {
      "signature": "ActionPaused(string,bool)",
      "name": "ActionPaused",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "action",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "pauseState",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ActionPaused(address,string,bool)",
      "name": "ActionPaused",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "action",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "pauseState",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BirdPlusSpeedUpdated(address,uint256)",
      "name": "BirdPlusSpeedUpdated",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newSpeed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DistributedBorrowerBirdPlus(address,address,uint256,uint256)",
      "name": "DistributedBorrowerBirdPlus",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DistributedSupplierBirdPlus(address,address,uint256,uint256)",
      "name": "DistributedSupplierBirdPlus",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Failure(uint256,uint256,uint256)",
      "name": "Failure",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "error",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "info",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "detail",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MarketBird(address,bool)",
      "name": "MarketBird",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "isBird",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MarketEntered(address,address)",
      "name": "MarketEntered",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MarketExited(address,address)",
      "name": "MarketExited",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MarketListed(address)",
      "name": "MarketListed",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewBirdPlusAddress(address,address)",
      "name": "NewBirdPlusAddress",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "oldBirdAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBirdAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewBirdPlusRate(uint256,uint256)",
      "name": "NewBirdPlusRate",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "oldBirdRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBirdRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewBorrowCap(address,uint256)",
      "name": "NewBorrowCap",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newBorrowCap",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewBorrowCapGuardian(address,address)",
      "name": "NewBorrowCapGuardian",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "oldBorrowCapGuardian",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBorrowCapGuardian",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewCloseFactor(uint256,uint256)",
      "name": "NewCloseFactor",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "oldCloseFactorMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newCloseFactorMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewCollateralFactor(address,uint256,uint256)",
      "name": "NewCollateralFactor",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldCollateralFactorMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newCollateralFactorMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewLiquidationIncentive(uint256,uint256)",
      "name": "NewLiquidationIncentive",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "oldLiquidationIncentiveMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newLiquidationIncentiveMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewMaxAssets(uint256,uint256)",
      "name": "NewMaxAssets",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "oldMaxAssets",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newMaxAssets",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewPauseGuardian(address,address)",
      "name": "NewPauseGuardian",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "oldPauseGuardian",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newPauseGuardian",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewPriceOracle(address,address)",
      "name": "NewPriceOracle",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "oldPriceOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newPriceOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_addBirdMarkets(address[])",
      "name": "_addBirdMarkets",
      "description": "Add markets to birdMarkets, allowing them to earn BRID+ in the flywheel.",
      "parameterDecorators": [
        {
          "name": "bTokens",
          "description": "The addresses of the markets to add.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_become(address)",
      "name": "_become",
      "description": "",
      "parameterDecorators": [
        {
          "name": "birdCore",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_borrowGuardianPaused()",
      "name": "_borrowGuardianPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_dropBirdMarket(address)",
      "name": "_dropBirdMarket",
      "description": "Remove a market from birdMarkets, preventing it from earning BRID+ in the flywheel.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "The address of the market to drop.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_mintGuardianPaused()",
      "name": "_mintGuardianPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_setBirdPlusAddress(address)",
      "name": "_setBirdPlusAddress",
      "description": "* Bird+ Distribution Admin **.",
      "parameterDecorators": [
        {
          "name": "birdAddress_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setBirdPlusRate(uint256)",
      "name": "_setBirdPlusRate",
      "description": "Set the amount of BRID+ distributed per block.",
      "parameterDecorators": [
        {
          "name": "birdRate_",
          "description": "The amount of BRID+ wei per block to distribute.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setBorrowPaused(address,bool)",
      "name": "_setBorrowPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "state",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setCloseFactor(uint256)",
      "name": "_setCloseFactor",
      "description": "Sets the closeFactor used when liquidating borrows. Admin function to set closeFactor.",
      "parameterDecorators": [
        {
          "name": "newCloseFactorMantissa",
          "description": "New close factor, scaled by 1e18.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setCollateralFactor(address,uint256)",
      "name": "_setCollateralFactor",
      "description": "Sets the collateralFactor for a market. Admin function to set per-market collateralFactor.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "The market to set the factor on.",
          "recommendedTypes": []
        },
        {
          "name": "newCollateralFactorMantissa",
          "description": "The new collateral factor, scaled by 1e18.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setLiquidationIncentive(uint256)",
      "name": "_setLiquidationIncentive",
      "description": "Sets liquidationIncentive. Admin function to set liquidationIncentive.",
      "parameterDecorators": [
        {
          "name": "newLiquidationIncentiveMantissa",
          "description": "New liquidationIncentive scaled by 1e18.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setMaxAssets(uint256)",
      "name": "_setMaxAssets",
      "description": "Sets maxAssets which controls how many markets can be entered. Admin function to set maxAssets.",
      "parameterDecorators": [
        {
          "name": "newMaxAssets",
          "description": "New max assets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setMintPaused(address,bool)",
      "name": "_setMintPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "state",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setPauseGuardian(address)",
      "name": "_setPauseGuardian",
      "description": "Admin function to change the Pause Guardian.",
      "parameterDecorators": [
        {
          "name": "newPauseGuardian",
          "description": "The address of the new Pause Guardian.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setPriceOracle(address)",
      "name": "_setPriceOracle",
      "description": "Sets a new price oracle for the bController. Admin function to set a new price oracle.",
      "parameterDecorators": [
        {
          "name": "newOracle",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setSeizePaused(bool)",
      "name": "_setSeizePaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "state",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setTransferPaused(bool)",
      "name": "_setTransferPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "state",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_supportMarket(address)",
      "name": "_supportMarket",
      "description": "Add the market to the markets mapping and set it as listed. Admin function to set isListed and add support for the market.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "The address of the market (token) to list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "accountAssets(address,uint256)",
      "name": "accountAssets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "admin()",
      "name": "admin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allMarkets(uint256)",
      "name": "allMarkets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "birdAccrued(address)",
      "name": "birdAccrued",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "birdBorrowState(address)",
      "name": "birdBorrowState",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint224"
        },
        {
          "name": "block",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "birdBorrowerIndex(address,address)",
      "name": "birdBorrowerIndex",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "birdPlusClaimThreshold()",
      "name": "birdPlusClaimThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "birdPlusInitialIndex()",
      "name": "birdPlusInitialIndex",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint224"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "birdRate()",
      "name": "birdRate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "birdSpeeds(address)",
      "name": "birdSpeeds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "birdSupplierIndex(address,address)",
      "name": "birdSupplierIndex",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "birdSupplyState(address)",
      "name": "birdSupplyState",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint224"
        },
        {
          "name": "block",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "borrowAllowed(address,address,uint256)",
      "name": "borrowAllowed",
      "description": "Checks if the account should be allowed to borrow the underlying asset of the given market.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "The market to verify the borrow against.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The account which would borrow the asset.",
          "recommendedTypes": []
        },
        {
          "name": "borrowAmount",
          "description": "The amount of underlying the account would borrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "borrowGuardianPaused(address)",
      "name": "borrowGuardianPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "borrowVerify(address,address,uint256)",
      "name": "borrowVerify",
      "description": "Validates borrow and reverts on rejection. May emit logs.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "Asset whose underlying is being borrowed.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address borrowing the underlying.",
          "recommendedTypes": []
        },
        {
          "name": "borrowAmount",
          "description": "The amount of the underlying asset requested to borrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "checkMembership(address,address)",
      "name": "checkMembership",
      "description": "Returns whether the given account is entered in the given asset.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account to check.",
          "recommendedTypes": []
        },
        {
          "name": "bToken",
          "description": "The bToken to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimBirdPlus(address,address[])",
      "name": "claimBirdPlus",
      "description": "Claim all the bird+ accrued by holder in the specified markets.",
      "parameterDecorators": [
        {
          "name": "holder",
          "description": "The address to claim BRID+ for.",
          "recommendedTypes": []
        },
        {
          "name": "bTokens",
          "description": "The list of markets to claim BRID+ in.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimBirdPlus(address[],address[],bool,bool)",
      "name": "claimBirdPlus",
      "description": "Claim all bird+ accrued by the holders.",
      "parameterDecorators": [
        {
          "name": "holders",
          "description": "The addresses to claim BRID+ for.",
          "recommendedTypes": []
        },
        {
          "name": "bTokens",
          "description": "The list of markets to claim BRID+ in.",
          "recommendedTypes": []
        },
        {
          "name": "borrowers",
          "description": "Whether or not to claim BRID+ earned by borrowing.",
          "recommendedTypes": []
        },
        {
          "name": "suppliers",
          "description": "Whether or not to claim BRID+ earned by supplying.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimBirdPlus(address)",
      "name": "claimBirdPlus",
      "description": "Claim all the bird+ accrued by holder in all markets.",
      "parameterDecorators": [
        {
          "name": "holder",
          "description": "The address to claim BRID+ for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "closeFactorMantissa()",
      "name": "closeFactorMantissa",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "enterMarkets(address[])",
      "name": "enterMarkets",
      "description": "Add assets to be included in account liquidity calculation.",
      "parameterDecorators": [
        {
          "name": "bTokens",
          "description": "The list of addresses of the bToken markets to be enabled.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exitMarket(address)",
      "name": "exitMarket",
      "description": "Removes asset from sender's account liquidity calculation. Sender must not have an outstanding borrow balance in the asset, or be providing necessary collateral for an outstanding borrow.",
      "parameterDecorators": [
        {
          "name": "bTokenAddress",
          "description": "The address of the asset to be removed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAccountLiquidity(address)",
      "name": "getAccountLiquidity",
      "description": "Determine the current account liquidity wrt collateral requirements.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllMarkets()",
      "name": "getAllMarkets",
      "description": "Return all of the markets. The automatic getter may be used to access an individual market.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAssetsIn(address)",
      "name": "getAssetsIn",
      "description": "Returns the assets an account has entered.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account to pull assets for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBirdPlusAddress()",
      "name": "getBirdPlusAddress",
      "description": "Return the address of the BRID+ token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBlockNumber()",
      "name": "getBlockNumber",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getHypotheticalAccountLiquidity(address,address,uint256,uint256)",
      "name": "getHypotheticalAccountLiquidity",
      "description": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The account to determine liquidity for.",
          "recommendedTypes": []
        },
        {
          "name": "bTokenModify",
          "description": "The market to hypothetically redeem/borrow in.",
          "recommendedTypes": []
        },
        {
          "name": "redeemTokens",
          "description": "The number of tokens to hypothetically redeem.",
          "recommendedTypes": []
        },
        {
          "name": "borrowAmount",
          "description": "The amount of underlying to hypothetically borrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "implementation()",
      "name": "implementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isBController()",
      "name": "isBController",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidateBorrowAllowed(address,address,address,address,uint256)",
      "name": "liquidateBorrowAllowed",
      "description": "Checks if the liquidation should be allowed to occur.",
      "parameterDecorators": [
        {
          "name": "bTokenBorrowed",
          "description": "Asset which was borrowed by the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "bTokenCollateral",
          "description": "Asset which was used as collateral and will be seized.",
          "recommendedTypes": []
        },
        {
          "name": "liquidator",
          "description": "The address repaying the borrow and seizing the collateral.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "repayAmount",
          "description": "The amount of underlying being repaid.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "liquidateBorrowVerify(address,address,address,address,uint256,uint256)",
      "name": "liquidateBorrowVerify",
      "description": "Validates liquidateBorrow and reverts on rejection. May emit logs.",
      "parameterDecorators": [
        {
          "name": "bTokenBorrowed",
          "description": "Asset which was borrowed by the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "bTokenCollateral",
          "description": "Asset which was used as collateral and will be seized.",
          "recommendedTypes": []
        },
        {
          "name": "liquidator",
          "description": "The address repaying the borrow and seizing the collateral.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "actualRepayAmount",
          "description": "The amount of underlying being repaid.",
          "recommendedTypes": []
        },
        {
          "name": "seizeTokens",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "liquidateCalculateSeizeTokens(address,address,uint256)",
      "name": "liquidateCalculateSeizeTokens",
      "description": "Calculate number of tokens of collateral asset to seize given an underlying amount. Used in liquidation (called in bToken.liquidateBorrowFresh).",
      "parameterDecorators": [
        {
          "name": "bTokenBorrowed",
          "description": "The address of the borrowed bToken.",
          "recommendedTypes": []
        },
        {
          "name": "bTokenCollateral",
          "description": "The address of the collateral bToken.",
          "recommendedTypes": []
        },
        {
          "name": "actualRepayAmount",
          "description": "The amount of bTokenBorrowed underlying to convert into bTokenCollateral tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidationIncentiveMantissa()",
      "name": "liquidationIncentiveMantissa",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "markets(address)",
      "name": "markets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isListed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "collateralFactorMantissa",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "isBird",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxAssets()",
      "name": "maxAssets",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintAllowed(address,address,uint256)",
      "name": "mintAllowed",
      "description": "Checks if the account should be allowed to mint tokens in the given market.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "The market to verify the mint against.",
          "recommendedTypes": []
        },
        {
          "name": "minter",
          "description": "The account which would get the minted tokens.",
          "recommendedTypes": []
        },
        {
          "name": "mintAmount",
          "description": "The amount of underlying being supplied to the market in exchange for tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintGuardianPaused(address)",
      "name": "mintGuardianPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintVerify(address,address,uint256,uint256)",
      "name": "mintVerify",
      "description": "Validates mint and reverts on rejection. May emit logs.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "Asset being minted.",
          "recommendedTypes": []
        },
        {
          "name": "minter",
          "description": "The address minting the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "actualMintAmount",
          "description": "The amount of the underlying asset being minted.",
          "recommendedTypes": []
        },
        {
          "name": "mintTokens",
          "description": "The number of tokens being minted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "oracle()",
      "name": "oracle",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pauseGuardian()",
      "name": "pauseGuardian",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingAdmin()",
      "name": "pendingAdmin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingImplementation()",
      "name": "pendingImplementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemAllowed(address,address,uint256)",
      "name": "redeemAllowed",
      "description": "Checks if the account should be allowed to redeem tokens in the given market.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "The market to verify the redeem against.",
          "recommendedTypes": []
        },
        {
          "name": "redeemer",
          "description": "The account which would redeem the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "redeemTokens",
          "description": "The number of bTokens to exchange for the underlying asset in the market.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemVerify(address,address,uint256,uint256)",
      "name": "redeemVerify",
      "description": "Validates redeem and reverts on rejection. May emit logs.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "Asset being redeemed.",
          "recommendedTypes": []
        },
        {
          "name": "redeemer",
          "description": "The address redeeming the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "redeemAmount",
          "description": "The amount of the underlying asset being redeemed.",
          "recommendedTypes": []
        },
        {
          "name": "redeemTokens",
          "description": "The number of tokens being redeemed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "refreshBirdSpeeds()",
      "name": "refreshBirdSpeeds",
      "description": "Recalculate and update BRID+ speeds for all BRID+ markets.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "repayBorrowAllowed(address,address,address,uint256)",
      "name": "repayBorrowAllowed",
      "description": "Checks if the account should be allowed to repay a borrow in the given market.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "The market to verify the repay against.",
          "recommendedTypes": []
        },
        {
          "name": "payer",
          "description": "The account which would repay the asset.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The account which would borrowed the asset.",
          "recommendedTypes": []
        },
        {
          "name": "repayAmount",
          "description": "The amount of the underlying asset the account would repay.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "repayBorrowVerify(address,address,address,uint256,uint256)",
      "name": "repayBorrowVerify",
      "description": "Validates repayBorrow and reverts on rejection. May emit logs.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "Asset being repaid.",
          "recommendedTypes": []
        },
        {
          "name": "payer",
          "description": "The address repaying the borrow.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "actualRepayAmount",
          "description": "The amount of underlying being repaid.",
          "recommendedTypes": []
        },
        {
          "name": "borrowerIndex",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "seizeAllowed(address,address,address,address,uint256)",
      "name": "seizeAllowed",
      "description": "Checks if the seizing of assets should be allowed to occur.",
      "parameterDecorators": [
        {
          "name": "bTokenCollateral",
          "description": "Asset which was used as collateral and will be seized.",
          "recommendedTypes": []
        },
        {
          "name": "bTokenBorrowed",
          "description": "Asset which was borrowed by the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "liquidator",
          "description": "The address repaying the borrow and seizing the collateral.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "seizeTokens",
          "description": "The number of collateral tokens to seize.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "seizeGuardianPaused()",
      "name": "seizeGuardianPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "seizeVerify(address,address,address,address,uint256)",
      "name": "seizeVerify",
      "description": "Validates seize and reverts on rejection. May emit logs.",
      "parameterDecorators": [
        {
          "name": "bTokenCollateral",
          "description": "Asset which was used as collateral and will be seized.",
          "recommendedTypes": []
        },
        {
          "name": "bTokenBorrowed",
          "description": "Asset which was borrowed by the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "liquidator",
          "description": "The address repaying the borrow and seizing the collateral.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The address of the borrower.",
          "recommendedTypes": []
        },
        {
          "name": "seizeTokens",
          "description": "The number of collateral tokens to seize.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferAllowed(address,address,address,uint256)",
      "name": "transferAllowed",
      "description": "Checks if the account should be allowed to transfer tokens in the given market.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "The market to verify the transfer against.",
          "recommendedTypes": []
        },
        {
          "name": "src",
          "description": "The account which sources the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "dst",
          "description": "The account which receives the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "transferTokens",
          "description": "The number of bTokens to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferGuardianPaused()",
      "name": "transferGuardianPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferVerify(address,address,address,uint256)",
      "name": "transferVerify",
      "description": "Validates transfer and reverts on rejection. May emit logs.",
      "parameterDecorators": [
        {
          "name": "bToken",
          "description": "Asset being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "src",
          "description": "The account which sources the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "dst",
          "description": "The account which receives the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "transferTokens",
          "description": "The number of bTokens to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}