{
  "schema": "../schema.json",
  "tags": [],
  "name": "StealthPaymaster",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event when owner changes usdt rate.",
      "parameterDecorators": [
        {
          "name": "newRate",
          "description": "new rate of usdt.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "prevRate",
          "description": "previous rate of usdt.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "FORWARDER_HUB_OVERHEAD()",
      "name": "FORWARDER_HUB_OVERHEAD",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PAYMASTER_ACCEPTANCE_BUDGET()",
      "name": "PAYMASTER_ACCEPTANCE_BUDGET",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "POST_RELAYED_CALL_GAS_LIMIT()",
      "name": "POST_RELAYED_CALL_GAS_LIMIT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PRE_RELAYED_CALL_GAS_LIMIT()",
      "name": "PRE_RELAYED_CALL_GAS_LIMIT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_verifyForwarder(tuple(tuple,tuple))",
      "name": "_verifyForwarder",
      "description": "",
      "parameterDecorators": [
        {
          "name": "relayRequest",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "request",
              "description": "",
              "type": "tuple"
            },
            {
              "name": "relayData",
              "description": "",
              "type": "tuple"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGasLimits()",
      "name": "getGasLimits",
      "description": "Return the GasLimits constants used by the Paymaster.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "limits",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getHubAddr()",
      "name": "getHubAddr",
      "description": "return the relayHub of this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRelayHubDeposit()",
      "name": "getRelayHubDeposit",
      "description": "check current deposit on relay hub.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "postRelayedCall(bytes,bool,uint256,tuple(uint256,uint256,uint256,address,address,bytes,uint256,address))",
      "name": "postRelayedCall",
      "description": "This method is called after the actual relayed function call. It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call. MUST be protected with relayHubOnly() in case it modifies state.",
      "parameterDecorators": [
        {
          "name": "context",
          "description": "- the call context, as returned by the preRelayedCall.",
          "recommendedTypes": []
        },
        {
          "name": "success",
          "description": "- true if the relayed call succeeded, false if it reverted.",
          "recommendedTypes": []
        },
        {
          "name": "gasUseWithoutPost",
          "description": "- the actual amount of gas used by the entire transaction, EXCEPT the gas used by the postRelayedCall itself.",
          "recommendedTypes": []
        },
        {
          "name": "relayData",
          "description": "- the relay params of the request. can be used by relayHub.calculateCharge() Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster is still committed to pay the relay for the entire transaction.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "gasPrice",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "pctRelayFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "baseRelayFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "relayWorker",
              "description": "",
              "type": "address"
            },
            {
              "name": "paymaster",
              "description": "",
              "type": "address"
            },
            {
              "name": "paymasterData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "clientId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "forwarder",
              "description": "",
              "type": "address"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "preRelayedCall(tuple(tuple,tuple),bytes,bytes,uint256)",
      "name": "preRelayedCall",
      "description": "",
      "parameterDecorators": [
        {
          "name": "relayRequest",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "request",
              "description": "",
              "type": "tuple"
            },
            {
              "name": "relayData",
              "description": "",
              "type": "tuple"
            }
          ]
        },
        {
          "name": "signature",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "approvalData",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "maxPossibleGas",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "context",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        },
        {
          "name": "rejectOnRecipientRevert",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRelayHub(address)",
      "name": "setRelayHub",
      "description": "",
      "parameterDecorators": [
        {
          "name": "hub",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTrustedForwarder(address)",
      "name": "setTrustedForwarder",
      "description": "",
      "parameterDecorators": [
        {
          "name": "forwarder",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stealthSwapAddr()",
      "name": "stealthSwapAddr",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "trustedForwarder()",
      "name": "trustedForwarder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "versionPaymaster()",
      "name": "versionPaymaster",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawRelayHubDepositTo(uint256,address)",
      "name": "withdrawRelayHubDepositTo",
      "description": "withdraw deposit from relayHub.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}