{
  "schema": "../schema.json",
  "tags": [
    "strategies",
    "aave"
  ],
  "name": "PullRewardsTransferStrategy",
  "description": "PullRewardsTransferStrategy. Transfer strategy that pulls ERC20 rewards from an external account to the user address. The external account could be a smart contract or EOA that must approve to the PullRewardsTransferStrategy contract address.",
  "eventDecorators": [
    {
      "signature": "EmergencyWithdrawal(address,address,address,uint256)",
      "name": "EmergencyWithdrawal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "emergencyWithdrawal(address,address,uint256)",
      "name": "emergencyWithdrawal",
      "description": "Perform an emergency token withdrawal only callable by the Rewards admin.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Address of the token to withdraw funds from this contract.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Address of the recipient of the withdrawal.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of the withdrawal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getIncentivesController()",
      "name": "getIncentivesController",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns the address of the Incentives Controller.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewardsAdmin()",
      "name": "getRewardsAdmin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns the address of the Rewards admin.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewardsVault()",
      "name": "getRewardsVault",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Address of the rewards vault.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "performTransfer(address,address,uint256)",
      "name": "performTransfer",
      "description": "Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Account to transfer rewards.",
          "recommendedTypes": []
        },
        {
          "name": "reward",
          "description": "Address of the reward token.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount to transfer to the \"to\" address parameter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns true bool if transfer logic succeeds.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}