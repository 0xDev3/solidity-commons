{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "liquidity"
  ],
  "name": "ConverterRegistry",
  "description": "",
  "eventDecorators": [
    {
      "signature": "ConverterAnchorAdded(address)",
      "name": "ConverterAnchorAdded",
      "description": "event for token purchase logging. triggered when a converter anchor is added to the registry.",
      "parameterDecorators": [
        {
          "name": "_anchor",
          "description": "anchor token.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ConverterAnchorRemoved(address)",
      "name": "ConverterAnchorRemoved",
      "description": "event for token purchase logging. triggered when a converter anchor is removed from the registry.",
      "parameterDecorators": [
        {
          "name": "_anchor",
          "description": "anchor token.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ConvertibleTokenAdded(address,address)",
      "name": "ConvertibleTokenAdded",
      "description": "event for token purchase logging. triggered when a convertible token is added to the registry.",
      "parameterDecorators": [
        {
          "name": "_convertibleToken",
          "description": "convertible token.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_smartToken",
          "description": "associated anchor token.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ConvertibleTokenRemoved(address,address)",
      "name": "ConvertibleTokenRemoved",
      "description": "event for token purchase logging. triggered when a convertible token is removed from the registry.",
      "parameterDecorators": [
        {
          "name": "_convertibleToken",
          "description": "convertible token.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_smartToken",
          "description": "associated anchor token.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LiquidityPoolAdded(address)",
      "name": "LiquidityPoolAdded",
      "description": "event for token purchase logging. triggered when a liquidity pool is added to the registry.",
      "parameterDecorators": [
        {
          "name": "_liquidityPool",
          "description": "liquidity pool.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LiquidityPoolRemoved(address)",
      "name": "LiquidityPoolRemoved",
      "description": "event for token purchase logging. triggered when a liquidity pool is removed from the registry.",
      "parameterDecorators": [
        {
          "name": "_liquidityPool",
          "description": "liquidity pool.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnerUpdate(address,address)",
      "name": "OwnerUpdate",
      "description": "event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_prevOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SmartTokenAdded(address)",
      "name": "SmartTokenAdded",
      "description": "event for token purchase logging. deprecated, backward compatibility, use `ConverterAnchorAdded`.",
      "parameterDecorators": [
        {
          "name": "_smartToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SmartTokenRemoved(address)",
      "name": "SmartTokenRemoved",
      "description": "event for token purchase logging. deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "_smartToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "used by a new owner to accept an ownership transfer.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addConverter(address)",
      "name": "addConverter",
      "description": "adds an existing converter to the registry can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_converter",
          "description": "converter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAnchor(uint256)",
      "name": "getAnchor",
      "description": "returns the converter anchor at a given index.",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "anchor at the given index.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAnchorCount()",
      "name": "getAnchorCount",
      "description": "returns the number of converter anchors in the registry.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "number of anchors.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAnchors()",
      "name": "getAnchors",
      "description": "returns the list of converter anchors in the registry.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "list of anchors.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConvertersByAnchors(address[])",
      "name": "getConvertersByAnchors",
      "description": "returns a list of converters for a given list of anchors this is a utility function that can be used to reduce the number of calls to the contract.",
      "parameterDecorators": [
        {
          "name": "_anchors",
          "description": "list of converter anchors.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "list of converters.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConvertersBySmartTokens(address[])",
      "name": "getConvertersBySmartTokens",
      "description": "deprecated, backward compatibility, use `getConvertersByAnchors`.",
      "parameterDecorators": [
        {
          "name": "_smartTokens",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConvertibleToken(uint256)",
      "name": "getConvertibleToken",
      "description": "returns the convertible token at a given index.",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "convertible token at the given index.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConvertibleTokenAnchor(address,uint256)",
      "name": "getConvertibleTokenAnchor",
      "description": "returns the converter anchor associated with a given convertible token at a given index.",
      "parameterDecorators": [
        {
          "name": "_convertibleToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "anchor associated with the given convertible token at the given index.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConvertibleTokenAnchorCount(address)",
      "name": "getConvertibleTokenAnchorCount",
      "description": "returns the number of converter anchors associated with a given convertible token.",
      "parameterDecorators": [
        {
          "name": "_convertibleToken",
          "description": "convertible token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "number of anchors associated with the given convertible token.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConvertibleTokenAnchors(address)",
      "name": "getConvertibleTokenAnchors",
      "description": "returns the list of aoncerter anchors associated with a given convertible token.",
      "parameterDecorators": [
        {
          "name": "_convertibleToken",
          "description": "convertible token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "list of anchors associated with the given convertible token.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConvertibleTokenCount()",
      "name": "getConvertibleTokenCount",
      "description": "returns the number of convertible tokens in the registry.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "number of convertible tokens.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConvertibleTokenSmartToken(address,uint256)",
      "name": "getConvertibleTokenSmartToken",
      "description": "deprecated, backward compatibility, use `getConvertibleTokenAnchor`.",
      "parameterDecorators": [
        {
          "name": "_convertibleToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConvertibleTokenSmartTokenCount(address)",
      "name": "getConvertibleTokenSmartTokenCount",
      "description": "deprecated, backward compatibility, use `getConvertibleTokenAnchorCount`.",
      "parameterDecorators": [
        {
          "name": "_convertibleToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConvertibleTokenSmartTokens(address)",
      "name": "getConvertibleTokenSmartTokens",
      "description": "deprecated, backward compatibility, use `getConvertibleTokenAnchors`.",
      "parameterDecorators": [
        {
          "name": "_convertibleToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConvertibleTokens()",
      "name": "getConvertibleTokens",
      "description": "returns the list of convertible tokens in the registry.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "list of convertible tokens.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLiquidityPool(uint256)",
      "name": "getLiquidityPool",
      "description": "returns the liquidity pool at a given index.",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "liquidity pool at the given index.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLiquidityPoolByConfig(uint16,address[],uint32[])",
      "name": "getLiquidityPoolByConfig",
      "description": "searches for a liquidity pool with specific configuration.",
      "parameterDecorators": [
        {
          "name": "_type",
          "description": "converter type, see ConverterBase contract main doc.",
          "recommendedTypes": []
        },
        {
          "name": "_reserveTokens",
          "description": "reserve tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_reserveWeights",
          "description": "reserve weights.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the liquidity pool, or zero if no such liquidity pool exists.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLiquidityPoolByReserveConfig(address[],uint32[])",
      "name": "getLiquidityPoolByReserveConfig",
      "description": "deprecated, backward compatibility, use `getLiquidityPoolByConfig`.",
      "parameterDecorators": [
        {
          "name": "_reserveTokens",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_reserveWeights",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLiquidityPoolCount()",
      "name": "getLiquidityPoolCount",
      "description": "returns the number of liquidity pools in the registry.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "number of liquidity pools.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLiquidityPools()",
      "name": "getLiquidityPools",
      "description": "returns the list of liquidity pools in the registry.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "list of liquidity pools.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSmartToken(uint256)",
      "name": "getSmartToken",
      "description": "deprecated, backward compatibility, use `getAnchor`.",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSmartTokenCount()",
      "name": "getSmartTokenCount",
      "description": "deprecated, backward compatibility, use `getAnchorCount`.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSmartTokens()",
      "name": "getSmartTokens",
      "description": "deprecated, backward compatibility, use `getAnchors`.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAnchor(address)",
      "name": "isAnchor",
      "description": "checks whether or not a given value is a converter anchor.",
      "parameterDecorators": [
        {
          "name": "_value",
          "description": "value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the given value is an anchor, false if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isConverterValid(address)",
      "name": "isConverterValid",
      "description": "checks whether or not a given converter is valid.",
      "parameterDecorators": [
        {
          "name": "_converter",
          "description": "converter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the given converter is valid, false if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isConvertibleToken(address)",
      "name": "isConvertibleToken",
      "description": "checks whether or not a given value is a convertible token.",
      "parameterDecorators": [
        {
          "name": "_value",
          "description": "value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the given value is a convertible token, false if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isConvertibleTokenAnchor(address,address)",
      "name": "isConvertibleTokenAnchor",
      "description": "checks whether or not a given value is a converter anchor of a given convertible token.",
      "parameterDecorators": [
        {
          "name": "_convertibleToken",
          "description": "convertible token.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the given value is an anchor of the given convertible token, false if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isConvertibleTokenSmartToken(address,address)",
      "name": "isConvertibleTokenSmartToken",
      "description": "deprecated, backward compatibility, use `isConvertibleTokenAnchor`.",
      "parameterDecorators": [
        {
          "name": "_convertibleToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isLiquidityPool(address)",
      "name": "isLiquidityPool",
      "description": "checks whether or not a given value is a liquidity pool.",
      "parameterDecorators": [
        {
          "name": "_value",
          "description": "value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the given value is a liquidity pool, false if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSimilarLiquidityPoolRegistered(address)",
      "name": "isSimilarLiquidityPoolRegistered",
      "description": "checks if a liquidity pool with given configuration is already registered.",
      "parameterDecorators": [
        {
          "name": "_converter",
          "description": "converter with specific configuration.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "if a liquidity pool with the same configuration is already registered.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSmartToken(address)",
      "name": "isSmartToken",
      "description": "deprecated, backward compatibility, use `isAnchor`.",
      "parameterDecorators": [
        {
          "name": "_value",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newConverter(uint16,string,string,uint8,uint32,address[],uint32[])",
      "name": "newConverter",
      "description": "creates a zero supply liquid token / empty liquidity pool and adds its converter to the registry.",
      "parameterDecorators": [
        {
          "name": "_type",
          "description": "converter type, see ConverterBase contract main doc.",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "token / pool name.",
          "recommendedTypes": []
        },
        {
          "name": "_symbol",
          "description": "token / pool symbol.",
          "recommendedTypes": []
        },
        {
          "name": "_decimals",
          "description": "token / pool decimals.",
          "recommendedTypes": []
        },
        {
          "name": "_maxConversionFee",
          "description": "maximum conversion-fee.",
          "recommendedTypes": []
        },
        {
          "name": "_reserveTokens",
          "description": "reserve tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_reserveWeights",
          "description": "reserve weights.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "new converter.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "newOwner()",
      "name": "newOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onlyOwnerCanUpdateRegistry()",
      "name": "onlyOwnerCanUpdateRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prevRegistry()",
      "name": "prevRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registry()",
      "name": "registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeConverter(address)",
      "name": "removeConverter",
      "description": "removes a converter from the registry anyone can remove an existing converter from the registry, as long as the converter is invalid note that the owner can also remove valid converters.",
      "parameterDecorators": [
        {
          "name": "_converter",
          "description": "converter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "restoreRegistry()",
      "name": "restoreRegistry",
      "description": "restores the previous contract-registry.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "restrictRegistryUpdate(bool)",
      "name": "restrictRegistryUpdate",
      "description": "restricts the permission to update the contract-registry.",
      "parameterDecorators": [
        {
          "name": "_onlyOwnerCanUpdateRegistry",
          "description": "indicates whether or not permission is restricted to owner only.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "allows transferring the contract ownership the new owner still needs to accept the transfer can only be called by the contract owner.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "new contract owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateRegistry()",
      "name": "updateRegistry",
      "description": "updates to the new contract-registry.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}