{"schema":"../schema.json","tags":["curve finance"],"name":"KongEntropyDirectMint","description":"Kong Entropy Contract. This contract can be presented with signatures for public keys registered in the `Register` contract. The function `submitEntropy()` verifies the validity of the signature using the remotely deployed `EllipticCurve` contract. If the signature is valid, the contract calls the `mintKong()` function of the `Register` contract to mint Kong.","eventDecorators":[{"signature":"Minted(bytes32,bytes32,uint256,uint256)","name":"Minted","description":"Emitted when the work extra gas amount is changed.","parameterDecorators":[{"name":"hardwareHash","description":"","recommendedTypes":[],"indexed":false},{"name":"message","description":"","recommendedTypes":[],"indexed":false},{"name":"r","description":"","recommendedTypes":[],"indexed":false},{"name":"s","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"submitEntropy(bytes32,bytes32,bytes32,uint256,uint256,address,uint256,uint256[2])","name":"submitEntropy","description":"`submitEntropy()` can be presented with SECP256R1 signatures of public keys registered in the `Register` contract. When presented with a valid signature in the expected format, the contract calls the `mintKong()` function of `Register` to mint Kong token to `to`.","parameterDecorators":[{"name":"primaryPublicKeyHash","description":"Hash of the primary public key.","recommendedTypes":[]},{"name":"secondaryPublicKeyHash","description":"Hash of the secondary public key.","recommendedTypes":[]},{"name":"hardwareSerial","description":"Hash of the hardwareSerial number.","recommendedTypes":[]},{"name":"tertiaryPublicKeyX","description":"The x-coordinate of the tertiary public key.","recommendedTypes":[]},{"name":"tertiaryPublicKeyY","description":"The y-coordinate of the tertiary public key.","recommendedTypes":[]},{"name":"to","description":"Recipient.","recommendedTypes":[]},{"name":"blockNumber","description":"Block number of the signed blockhash.","recommendedTypes":[]},{"name":"rs","description":"The array containing the r & s values fo the signature.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"_hashedSignaturesIndex()","name":"_hashedSignaturesIndex","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"_hashedSignaturesArray(uint256)","name":"_hashedSignaturesArray","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"_mintedKeys(bytes32)","name":"_mintedKeys","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"_regAddress()","name":"_regAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getHashedSignature(uint256)","name":"getHashedSignature","description":"Function to return the submitted signatures at location `index` in the array of signatures.","parameterDecorators":[{"name":"index","description":"Location of signature in array of hashed signatures.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"_eccAddress()","name":"_eccAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}