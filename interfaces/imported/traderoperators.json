{
  "schema": "../schema.json",
  "tags": [],
  "name": "TraderOperators",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OperatorsContractChanged(address,address)",
      "name": "OperatorsContractChanged",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OperatorsContractPending(address,address)",
      "name": "OperatorsContractPending",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TraderAdded(address,address)",
      "name": "TraderAdded",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "- The token recipient.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TraderRemoved(address,address)",
      "name": "TraderRemoved",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "- The token recipient.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addTrader(address)",
      "name": "addTrader",
      "description": "Operator can give '_account' address trader privileges.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given trader privileges.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "confirmFor(address)",
      "name": "confirmFor",
      "description": "Confirms RaiseOperator contract address once acive.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "Address of RaiseOperators contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "confirmOperatorsContract()",
      "name": "confirmOperatorsContract",
      "description": "The function should be called from new operators contract by admin to ensure that operatorsPending address is the real contract address.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getOperatorsContract()",
      "name": "getOperatorsContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOperatorsPending()",
      "name": "getOperatorsPending",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with confirmation through the operators contract.",
      "parameterDecorators": [
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isAdmin(address)",
      "name": "isAdmin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAdminOrSystem(address)",
      "name": "isAdminOrSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isInitialized()",
      "name": "isInitialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isMultisig(address)",
      "name": "isMultisig",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_contract",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOperator(address)",
      "name": "isOperator",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOperatorOrSystem(address)",
      "name": "isOperatorOrSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRelay(address)",
      "name": "isRelay",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSystem(address)",
      "name": "isSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isTrader(address)",
      "name": "isTrader",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeTrader(address)",
      "name": "removeTrader",
      "description": "Operator can revoke '_account' address trader privileges.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be revoked trader privileges.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOperatorsContract(address)",
      "name": "setOperatorsContract",
      "description": "Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr) where addr is the address of current contract instance. This is done to prevent the case when the new contract address is broken and control of the contract can be lost in such case.",
      "parameterDecorators": [
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}