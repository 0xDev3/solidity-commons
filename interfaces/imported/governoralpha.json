{
  "schema": "../schema.json",
  "tags": [],
  "name": "GovernorAlpha",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProposalCanceled(uint256)",
      "name": "ProposalCanceled",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)",
      "name": "ProposalCreated",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proposer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "targets",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "values",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "signatures",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "calldatas",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "startBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "endBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "description",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalExecuted(uint256)",
      "name": "ProposalExecuted",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalQueued(uint256,uint256)",
      "name": "ProposalQueued",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "eta",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VoteCast(address,uint256,bool,uint256)",
      "name": "VoteCast",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "voter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "support",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "votes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "BALLOT_TYPEHASH()",
      "name": "BALLOT_TYPEHASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DOMAIN_TYPEHASH()",
      "name": "DOMAIN_TYPEHASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "__abdicate()",
      "name": "__abdicate",
      "description": "Abdicate the guardian address to address(0).",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "__acceptAdmin()",
      "name": "__acceptAdmin",
      "description": "Accept the pending admin as the admin in timelock contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "__executeSetTimelockPendingAdmin(address,uint256)",
      "name": "__executeSetTimelockPendingAdmin",
      "description": "Execute a setTimeLockPendingAdmin transaction to timelock contract.",
      "parameterDecorators": [
        {
          "name": "newPendingAdmin",
          "description": "The address of desired pending admin.",
          "recommendedTypes": []
        },
        {
          "name": "eta",
          "description": "The current block timestamp plus the timelock.delay() timestamp.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "__queueSetTimelockPendingAdmin(address,uint256)",
      "name": "__queueSetTimelockPendingAdmin",
      "description": "Queue a setTimeLockPendingAdmin transaction to timelock contract.",
      "parameterDecorators": [
        {
          "name": "newPendingAdmin",
          "description": "The address of desired pending admin.",
          "recommendedTypes": []
        },
        {
          "name": "eta",
          "description": "The current block timestamp plus the timelock.delay() timestamp.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancel(uint256)",
      "name": "cancel",
      "description": "Cancel a proposal that has not yet been executed.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "ID of a proposal that wished to be canceled.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "castVote(uint256,bool)",
      "name": "castVote",
      "description": "Cast a vote on a proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "ID of a proposal in which to cast a vote.",
          "recommendedTypes": []
        },
        {
          "name": "support",
          "description": "A boolean of true for 'for' or false for 'against' vote.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)",
      "name": "castVoteBySig",
      "description": "Cast a vote on a proposal by offline signatures.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "ID of a proposal in which to cast a vote.",
          "recommendedTypes": []
        },
        {
          "name": "support",
          "description": "A boolean of true for 'for' or false for 'against' vote.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery byte of the signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Half of the ECDSA signature pair.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Half of the ECDSA signature pair.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimOwnership()",
      "name": "claimOwnership",
      "description": "Allows the pendingOwner address to finalize the transfer.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "countVotes(address,uint256)",
      "name": "countVotes",
      "description": "Count the total PriorVotes from TRU and stkTRU.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address to check the total votes.",
          "recommendedTypes": []
        },
        {
          "name": "blockNumber",
          "description": "The block number at which the getPriorVotes() check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The sum of PriorVotes from TRU and stkTRU.",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "execute(uint256)",
      "name": "execute",
      "description": "Execute a proposal after a proposal has queued and invoke each of the actions in the proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "ID of a proposal that has queued.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getActions(uint256)",
      "name": "getActions",
      "description": "Get the actions of a selected proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "ID of a proposal return An array of target addresses, an array of proposal values, an array of proposal signatures, and an array of calldata.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "targets",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "values",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "signatures",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string[]"
        },
        {
          "name": "calldatas",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReceipt(uint256,address)",
      "name": "getReceipt",
      "description": "Get a proposal ballot receipt of the indicated voter.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "ID of a proposal in which to get voter's ballot receipt.",
          "recommendedTypes": []
        },
        {
          "name": "voter",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the Ballot receipt record for a voter.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "guardian()",
      "name": "guardian",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address,address,uint256)",
      "name": "initialize",
      "description": "Initialize sets the addresses of timelock contract, trusttoken contract, and guardian.",
      "parameterDecorators": [
        {
          "name": "_timelock",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_trustToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_guardian",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_stkTRU",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_votingPeriod",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isInitialized()",
      "name": "isInitialized",
      "description": "Return true if and only if the contract has been initialized.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "whether the contract has been initialized.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestProposalIds(address)",
      "name": "latestProposalIds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "name()",
      "name": "name",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingOwner()",
      "name": "pendingOwner",
      "description": "Returns the address of the pending owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposalCount()",
      "name": "proposalCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposalMaxOperations()",
      "name": "proposalMaxOperations",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposalThreshold()",
      "name": "proposalThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposals(uint256)",
      "name": "proposals",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "proposer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "eta",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "startBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "endBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "forVotes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "againstVotes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "canceled",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "executed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "propose(address[],uint256[],string[],bytes[],string)",
      "name": "propose",
      "description": "Create a proposal to change the protocol.",
      "parameterDecorators": [
        {
          "name": "targets",
          "description": "The ordered list of target addresses for calls to be made during proposal execution.",
          "recommendedTypes": []
        },
        {
          "name": "values",
          "description": "The ordered list of values to be passed to the calls made during proposal execution.",
          "recommendedTypes": []
        },
        {
          "name": "signatures",
          "description": "The ordered list of function signatures to be passed during execution.",
          "recommendedTypes": []
        },
        {
          "name": "calldatas",
          "description": "The ordered list of data to be passed to each individual function call.",
          "recommendedTypes": []
        },
        {
          "name": "description",
          "description": "A human readable description of the proposal and changes it will enact.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ID of the newly created proposal.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "queue(uint256)",
      "name": "queue",
      "description": "Queue a proposal after a proposal has succeeded.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "ID of a proposal that has succeeded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "quorumVotes()",
      "name": "quorumVotes",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "state(uint256)",
      "name": "state",
      "description": "Get the proposal state for the specified proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "ID of a proposal in which to get its state.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Enumerated type of ProposalState.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stkTRU()",
      "name": "stkTRU",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "timelock()",
      "name": "timelock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to set the pendingOwner address.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "trustToken()",
      "name": "trustToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "votingDelay()",
      "name": "votingDelay",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "votingPeriod()",
      "name": "votingPeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}