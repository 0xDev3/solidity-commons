{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "Community",
  "description": "Welcome to the Community contract. For each community there will be one proxy contract deployed by CommunityAdmin. The implementation of the proxy is this contract. This enable us to save tokens on the contract itself, and avoid the problems of having everything in one single contract. Each community has it's own members and and managers.",
  "eventDecorators": [
    {
      "signature": "BeneficiaryAdded(address,address)",
      "name": "BeneficiaryAdded",
      "description": "Triggered when a beneficiary has been added.",
      "parameterDecorators": [
        {
          "name": "manager",
          "description": "Address of the manager that triggered the event.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "Address of the beneficiary that has been added.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BeneficiaryClaim(address,uint256)",
      "name": "BeneficiaryClaim",
      "description": "Triggered when a beneficiary has claimed.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "Address of the beneficiary that has claimed.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "Amount of the claim.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BeneficiaryJoined(address)",
      "name": "BeneficiaryJoined",
      "description": "Triggered when a beneficiary from previous community has joined in the current community.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "Address of the beneficiary.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BeneficiaryLocked(address,address)",
      "name": "BeneficiaryLocked",
      "description": "Triggered when a beneficiary has been locked.",
      "parameterDecorators": [
        {
          "name": "manager",
          "description": "Address of the manager that triggered the event.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "Address of the beneficiary that has been locked.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BeneficiaryParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "BeneficiaryParamsUpdated",
      "description": "Triggered when beneficiary params has been updated.",
      "parameterDecorators": [
        {
          "name": "oldClaimAmount",
          "description": "Old claimAmount value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldMaxClaim",
          "description": "Old maxClaim value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldDecreaseStep",
          "description": "Old decreaseStep value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldBaseInterval",
          "description": "Old baseInterval value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldIncrementInterval",
          "description": "Old incrementInterval value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newClaimAmount",
          "description": "New claimAmount value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newMaxClaim",
          "description": "New maxClaim value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newDecreaseStep",
          "description": "New decreaseStep value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBaseInterval",
          "description": "New baseInterval value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newIncrementInterval",
          "description": "New incrementInterval value For further information regarding each parameter, see *Community* smart contract initialize method.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BeneficiaryRemoved(address,address)",
      "name": "BeneficiaryRemoved",
      "description": "Triggered when a beneficiary has been removed.",
      "parameterDecorators": [
        {
          "name": "manager",
          "description": "Address of the manager that triggered the event.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "Address of the beneficiary that has been removed.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BeneficiaryUnlocked(address,address)",
      "name": "BeneficiaryUnlocked",
      "description": "Triggered when a beneficiary has been unlocked.",
      "parameterDecorators": [
        {
          "name": "manager",
          "description": "Address of the manager that triggered the event.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "Address of the beneficiary that has been unlocked.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CommunityAdminUpdated(address,address)",
      "name": "CommunityAdminUpdated",
      "description": "Triggered when communityAdmin has been updated.",
      "parameterDecorators": [
        {
          "name": "oldCommunityAdmin",
          "description": "Old communityAdmin address.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newCommunityAdmin",
          "description": "New communityAdmin address.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CommunityLocked(address)",
      "name": "CommunityLocked",
      "description": "Triggered when a community has been locked.",
      "parameterDecorators": [
        {
          "name": "manager",
          "description": "Address of the manager that triggered the event.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CommunityParamsUpdated(uint256,uint256,uint256,uint256)",
      "name": "CommunityParamsUpdated",
      "description": "Triggered when community params has been updated.",
      "parameterDecorators": [
        {
          "name": "oldMinTranche",
          "description": "Old minTranche value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldMaxTranche",
          "description": "Old maxTranche value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newMinTranche",
          "description": "New minTranche value.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newMaxTranche",
          "description": "New maxTranche value For further information regarding each parameter, see *Community* smart contract initialize method.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CommunityUnlocked(address)",
      "name": "CommunityUnlocked",
      "description": "Triggered when a community has been unlocked.",
      "parameterDecorators": [
        {
          "name": "manager",
          "description": "Address of the manager that triggered the event.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Donate(address,uint256)",
      "name": "Donate",
      "description": "Triggered when someone has donated cUSD.",
      "parameterDecorators": [
        {
          "name": "donor",
          "description": "Address of the donor.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "Amount of the donation.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundsRequested(address)",
      "name": "FundsRequested",
      "description": "Triggered when a manager has requested funds for community.",
      "parameterDecorators": [
        {
          "name": "manager",
          "description": "Address of the manager that triggered the event.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ManagerAdded(address,address)",
      "name": "ManagerAdded",
      "description": "Triggered when a manager has been added.",
      "parameterDecorators": [
        {
          "name": "manager",
          "description": "Address of the manager that triggered the event or address of the CommunityAdmin if it's first manager.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "Address of the manager that has been added.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ManagerRemoved(address,address)",
      "name": "ManagerRemoved",
      "description": "Triggered when a manager has been removed.",
      "parameterDecorators": [
        {
          "name": "manager",
          "description": "Address of the manager that triggered the event.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "Address of the manager that has been removed.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PreviousCommunityUpdated(address,address)",
      "name": "PreviousCommunityUpdated",
      "description": "Triggered when previousCommunity has been updated.",
      "parameterDecorators": [
        {
          "name": "oldPreviousCommunity",
          "description": "Old previousCommunity address.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newPreviousCommunity",
          "description": "New previousCommunity address.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TransferERC20(address,address,uint256)",
      "name": "TransferERC20",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_firstBlockTimestamp()",
      "name": "_firstBlockTimestamp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addBeneficiary(address)",
      "name": "addBeneficiary",
      "description": "Adds a new beneficiary.",
      "parameterDecorators": [
        {
          "name": "_beneficiaryAddress",
          "description": "address of the beneficiary to be added.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addManager(address)",
      "name": "addManager",
      "description": "Adds a new manager.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address of the manager to be added.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addTreasuryFunds(uint256)",
      "name": "addTreasuryFunds",
      "description": "Increases the treasuryFunds value Used by communityAdmin after an amount of cUSD are sent from the treasury.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "amount to be added to treasuryFunds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "baseInterval()",
      "name": "baseInterval",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiaries(address)",
      "name": "beneficiaries",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "state",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "claims",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "claimedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastClaim",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiaryJoinFromMigrated()",
      "name": "beneficiaryJoinFromMigrated",
      "description": "Allows a beneficiary from the previousCommunity to join in this community.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "beneficiaryListAt(uint256)",
      "name": "beneficiaryListAt",
      "description": "Returns an address from the beneficiaryList.",
      "parameterDecorators": [
        {
          "name": "index_",
          "description": "index value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of the beneficiary.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiaryListLength()",
      "name": "beneficiaryListLength",
      "description": "Returns the length of the beneficiaryList.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cUSD()",
      "name": "cUSD",
      "description": "Returns the cUSD contract address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claim()",
      "name": "claim",
      "description": "Transfers cUSD to a valid beneficiary.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimAmount()",
      "name": "claimAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimCooldown(address)",
      "name": "claimCooldown",
      "description": "Returns the block number when a beneficiary can claim again.",
      "parameterDecorators": [
        {
          "name": "_beneficiaryAddress",
          "description": "address of the beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256 number of block when the beneficiary can claim.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "communityAdmin()",
      "name": "communityAdmin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "decreaseStep()",
      "name": "decreaseStep",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "donate(address,uint256)",
      "name": "donate",
      "description": "Transfers cUSDs from donor to this community Used by donationToCommunity method from DonationMiner contract.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "address of the sender.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to be donated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getInitialMaxClaim()",
      "name": "getInitialMaxClaim",
      "description": "Returns the initial maxClaim.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVersion()",
      "name": "getVersion",
      "description": "Returns the current implementation version.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Enforces managers to use addManager method.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "impactMarketAddress()",
      "name": "impactMarketAddress",
      "description": "Returns the 0 address only used for backwards compatibility.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "incrementInterval()",
      "name": "incrementInterval",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)",
      "name": "initialize",
      "description": "Used to initialize a new Community contract.",
      "parameterDecorators": [
        {
          "name": "_managers",
          "description": "Community's initial managers. Will be able to add others.",
          "recommendedTypes": []
        },
        {
          "name": "_claimAmount",
          "description": "Base amount to be claim by the beneficiary.",
          "recommendedTypes": []
        },
        {
          "name": "_maxClaim",
          "description": "Limit that a beneficiary can claim in total.",
          "recommendedTypes": []
        },
        {
          "name": "_decreaseStep",
          "description": "Value decreased from maxClaim each time a beneficiary is added.",
          "recommendedTypes": []
        },
        {
          "name": "_baseInterval",
          "description": "Base interval to start claiming.",
          "recommendedTypes": []
        },
        {
          "name": "_incrementInterval",
          "description": "Increment interval used in each claim.",
          "recommendedTypes": []
        },
        {
          "name": "_minTranche",
          "description": "Minimum amount that the community will receive when requesting funds.",
          "recommendedTypes": []
        },
        {
          "name": "_maxTranche",
          "description": "Maximum amount that the community will receive when requesting funds.",
          "recommendedTypes": []
        },
        {
          "name": "_previousCommunity",
          "description": "Previous smart contract address of community.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lastFundRequest()",
      "name": "lastFundRequest",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastInterval(address)",
      "name": "lastInterval",
      "description": "Returns the number of blocks that a beneficiary have to wait between claims.",
      "parameterDecorators": [
        {
          "name": "_beneficiaryAddress",
          "description": "address of the beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256 number of blocks for the lastInterval.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lock()",
      "name": "lock",
      "description": "Locks the community claims.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lockBeneficiary(address)",
      "name": "lockBeneficiary",
      "description": "Locks a valid beneficiary.",
      "parameterDecorators": [
        {
          "name": "_beneficiaryAddress",
          "description": "address of the beneficiary to be locked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "locked()",
      "name": "locked",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxClaim()",
      "name": "maxClaim",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxTranche()",
      "name": "maxTranche",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minTranche()",
      "name": "minTranche",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "previousCommunity()",
      "name": "previousCommunity",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "privateFunds()",
      "name": "privateFunds",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeBeneficiary(address)",
      "name": "removeBeneficiary",
      "description": "Remove an existing beneficiary.",
      "parameterDecorators": [
        {
          "name": "_beneficiaryAddress",
          "description": "address of the beneficiary to be removed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeManager(address)",
      "name": "removeManager",
      "description": "Remove an existing manager.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address of the manager to be removed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "requestFunds()",
      "name": "requestFunds",
      "description": "Requests treasury funds from the communityAdmin.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Enforces managers to use removeManager method.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transfer(address,address,uint256)",
      "name": "transfer",
      "description": "Transfers an amount of an ERC20 from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the ERC20 token.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "address of the receiver.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount of the transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "treasuryFunds()",
      "name": "treasuryFunds",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unlock()",
      "name": "unlock",
      "description": "Unlocks the community claims.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unlockBeneficiary(address)",
      "name": "unlockBeneficiary",
      "description": "Unlocks a locked beneficiary.",
      "parameterDecorators": [
        {
          "name": "_beneficiaryAddress",
          "description": "address of the beneficiary to be unlocked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateBeneficiaryParams(uint256,uint256,uint256,uint256,uint256)",
      "name": "updateBeneficiaryParams",
      "description": "Updates beneficiary params.",
      "parameterDecorators": [
        {
          "name": "_claimAmount",
          "description": "base amount to be claim by the beneficiary.",
          "recommendedTypes": []
        },
        {
          "name": "_maxClaim",
          "description": "limit that a beneficiary can claim in total.",
          "recommendedTypes": []
        },
        {
          "name": "_decreaseStep",
          "description": "value decreased from maxClaim each time a is beneficiary added.",
          "recommendedTypes": []
        },
        {
          "name": "_baseInterval",
          "description": "base interval to start claiming.",
          "recommendedTypes": []
        },
        {
          "name": "_incrementInterval",
          "description": "increment interval used in each claim.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateCommunityAdmin(address)",
      "name": "updateCommunityAdmin",
      "description": "Updates the address of the communityAdmin.",
      "parameterDecorators": [
        {
          "name": "_newCommunityAdmin",
          "description": "address of the new communityAdmin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateCommunityParams(uint256,uint256)",
      "name": "updateCommunityParams",
      "description": "Updates params of a community.",
      "parameterDecorators": [
        {
          "name": "_minTranche",
          "description": "minimum amount that the community will receive when requesting funds.",
          "recommendedTypes": []
        },
        {
          "name": "_maxTranche",
          "description": "maximum amount that the community will receive when requesting funds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePreviousCommunity(address)",
      "name": "updatePreviousCommunity",
      "description": "Updates the address of the previousCommunity.",
      "parameterDecorators": [
        {
          "name": "_newPreviousCommunity",
          "description": "address of the new previousCommunity.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "validBeneficiaryCount()",
      "name": "validBeneficiaryCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}