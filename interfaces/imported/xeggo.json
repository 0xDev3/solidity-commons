{
  "schema": "../schema.json",
  "tags": [],
  "name": "Xeggo",
  "description": "Xeggo. Money streaming.",
  "eventDecorators": [
    {
      "signature": "CancelStream(uint256,address,address,uint256,uint256)",
      "name": "CancelStream",
      "description": "Emitted after the implementation contract has been swapped. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "streamId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "senderBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "recipientBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CreateStream(uint256,address,address,uint256,address,uint256,uint256)",
      "name": "CreateStream",
      "description": "Emitted after the implementation contract has been swapped. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "streamId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "stopTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WithdrawFromStream(uint256,address,uint256)",
      "name": "WithdrawFromStream",
      "description": "Emitted after the implementation contract has been swapped. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "streamId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "balanceOf(uint256,address)",
      "name": "balanceOf",
      "description": "Returns the available funds for the given stream id and address. Throws if the id does not point to a valid stream.",
      "parameterDecorators": [
        {
          "name": "streamId",
          "description": "The id of the stream for which to query the balance.",
          "recommendedTypes": []
        },
        {
          "name": "who",
          "description": "The address for which to query the balance.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "balance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelStream(uint256)",
      "name": "cancelStream",
      "description": "Cancels the stream and transfers the tokens back on a pro rata basis. Throws if the id does not point to a valid stream. Throws if the caller is not the sender or the recipient of the stream. Throws if there is a token transfer failure.",
      "parameterDecorators": [
        {
          "name": "streamId",
          "description": "The id of the stream to cancel.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createStream(address,uint256,address,uint256,uint256)",
      "name": "createStream",
      "description": "Creates a new stream funded by `msg.sender` and paid towards `recipient`. Throws if the recipient is the zero address, the contract itself or the caller. Throws if the deposit is 0. Throws if the start time is before `block.timestamp`. Throws if the stop time is before the start time. Throws if the duration calculation has a math error. Throws if the deposit is smaller than the duration. Throws if the deposit is not a multiple of the duration. Throws if the rate calculation has a math error. Throws if the next stream id calculation has a math error. Throws if the contract is not allowed to transfer enough tokens. Throws if there is a token transfer failure.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "The address towards which the money is streamed.",
          "recommendedTypes": []
        },
        {
          "name": "deposit",
          "description": "The amount of money to be streamed.",
          "recommendedTypes": []
        },
        {
          "name": "tokenAddress",
          "description": "The ERC20 token to use as streaming currency.",
          "recommendedTypes": []
        },
        {
          "name": "startTime",
          "description": "The unix timestamp for when the stream starts.",
          "recommendedTypes": []
        },
        {
          "name": "stopTime",
          "description": "The unix timestamp for when the stream stops.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deltaOf(uint256)",
      "name": "deltaOf",
      "description": "Returns either the delta in seconds between `block.timestamp` and `startTime` or between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before `startTime`, it returns 0. Throws if the id does not point to a valid stream.",
      "parameterDecorators": [
        {
          "name": "streamId",
          "description": "The id of the stream for which to query the delta.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "delta",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStream(uint256)",
      "name": "getStream",
      "description": "Returns the stream with all its properties. Throws if the id does not point to a valid stream.",
      "parameterDecorators": [
        {
          "name": "streamId",
          "description": "The id of the stream to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "stopTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "remainingBalance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "ratePerSecond",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nextStreamId()",
      "name": "nextStreamId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawFromStream(uint256,uint256)",
      "name": "withdrawFromStream",
      "description": "Withdraws from the contract to the recipient's account. Throws if the id does not point to a valid stream. Throws if the caller is not the sender or the recipient of the stream. Throws if the amount exceeds the available balance. Throws if there is a token transfer failure.",
      "parameterDecorators": [
        {
          "name": "streamId",
          "description": "The id of the stream to withdraw tokens from.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}