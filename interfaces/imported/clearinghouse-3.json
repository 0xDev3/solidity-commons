{
  "schema": "../schema.json",
  "tags": [],
  "name": "ClearingHouse",
  "description": "",
  "eventDecorators": [
    {
      "signature": "FundingPaymentSettled(address,address,int256)",
      "name": "FundingPaymentSettled",
      "description": "Emitted when settling a trader's funding payment.",
      "parameterDecorators": [
        {
          "name": "trader",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "baseToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fundingPayment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LiquidityChanged(address,address,address,int24,int24,int256,int256,int128,uint256)",
      "name": "LiquidityChanged",
      "description": "Emitted when maker's liquidity of a order changed.",
      "parameterDecorators": [
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "baseToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "quoteToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "lowerTick",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "upperTick",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "base",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "quote",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "quoteFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PositionChanged(address,address,int256,int256,uint256,int256,int256,uint256)",
      "name": "PositionChanged",
      "description": "Emitted when taker's position is being changed.",
      "parameterDecorators": [
        {
          "name": "trader",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "baseToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "exchangedPositionSize",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "exchangedPositionNotional",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "openNotional",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "realizedPnl",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sqrtPriceAfterX96",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PositionClosed(address,address,int256,int256,int256,int256,uint256)",
      "name": "PositionClosed",
      "description": "Emitted when taker close her position in closed market.",
      "parameterDecorators": [
        {
          "name": "trader",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "baseToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "closedPositionSize",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "closedPositionNotional",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "openNotional",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "realizedPnl",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "closedPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PositionLiquidated(address,address,uint256,uint256,uint256,address)",
      "name": "PositionLiquidated",
      "description": "Emitted when taker position is being liquidated.",
      "parameterDecorators": [
        {
          "name": "trader",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "baseToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "positionNotional",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "positionSize",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidationFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ReferredPositionChanged(bytes32)",
      "name": "ReferredPositionChanged",
      "description": "Emitted when open position with non-zero referral code.",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TrustedForwarderChanged(address)",
      "name": "TrustedForwarderChanged",
      "description": "Emitted when trusted forwarder address changed.",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TrustedForwarderUpdated(address)",
      "name": "TrustedForwarderUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addLiquidity(tuple(address,uint256,uint256,int24,int24,uint256,uint256,bool,uint256))",
      "name": "addLiquidity",
      "description": "Maker can call `addLiquidity` to provide liquidity on Uniswap V3 pool. Tx will fail if adding `base == 0 && quote == 0` / `liquidity == 0`- `AddLiquidityParams.useTakerBalance` is only accept `false` now.",
      "parameterDecorators": [
        {
          "name": "params",
          "description": "AddLiquidityParams struct.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "baseToken",
              "description": "",
              "type": "address"
            },
            {
              "name": "base",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "quote",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "lowerTick",
              "description": "",
              "type": "int24"
            },
            {
              "name": "upperTick",
              "description": "",
              "type": "int24"
            },
            {
              "name": "minBase",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minQuote",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "useTakerBalance",
              "description": "",
              "type": "bool"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "AddLiquidityResponse struct.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelAllExcessOrders(address,address)",
      "name": "cancelAllExcessOrders",
      "description": "Cancel all excess orders of a maker if the maker is underwater. This function won't fail if the maker has no order but fails when maker is not underwater.",
      "parameterDecorators": [
        {
          "name": "maker",
          "description": "The address of maker.",
          "recommendedTypes": []
        },
        {
          "name": "baseToken",
          "description": "The address of baseToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelExcessOrders(address,address,bytes32[])",
      "name": "cancelExcessOrders",
      "description": "Cancel excess order of a maker. Order id can get from `OrderBook.getOpenOrderIds`.",
      "parameterDecorators": [
        {
          "name": "maker",
          "description": "The address of Maker.",
          "recommendedTypes": []
        },
        {
          "name": "baseToken",
          "description": "The address of baseToken.",
          "recommendedTypes": []
        },
        {
          "name": "orderIds",
          "description": "The id of the order.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "candidate()",
      "name": "candidate",
      "description": "Returns the candidate that can become the owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "closePosition(tuple(address,uint160,uint256,uint256,bytes32))",
      "name": "closePosition",
      "description": "Close trader's position.",
      "parameterDecorators": [
        {
          "name": "params",
          "description": "ClosePositionParams struct.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "baseToken",
              "description": "",
              "type": "address"
            },
            {
              "name": "sqrtPriceLimitX96",
              "description": "",
              "type": "uint160"
            },
            {
              "name": "oppositeAmountBound",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "referralCode",
              "description": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "base",
          "description": "The amount of baseToken the taker got or spent.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "quote",
          "description": "The amount of quoteToken the taker got or spent.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAccountBalance()",
      "name": "getAccountBalance",
      "description": "Get AccountBalance address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "`AccountBalance` address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccountValue(address)",
      "name": "getAccountValue",
      "description": "Get account value of trader. accountValue = totalCollateralValue + totalUnrealizedPnl, in 18 decimals.",
      "parameterDecorators": [
        {
          "name": "trader",
          "description": "The address of trader.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The account value of trader.",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getClearingHouseConfig()",
      "name": "getClearingHouseConfig",
      "description": "Get ClearingHouseConfig address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "ClearingHouseConfig address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getExchange()",
      "name": "getExchange",
      "description": "Get `Exchange` address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "`Exchange` address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getInsuranceFund()",
      "name": "getInsuranceFund",
      "description": "Get `InsuranceFund` address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "`InsuranceFund` address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOrderBook()",
      "name": "getOrderBook",
      "description": "Get `OrderBook` address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "`OrderBook` address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getQuoteToken()",
      "name": "getQuoteToken",
      "description": "Get QuoteToken address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The quote token address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTrustedForwarder()",
      "name": "getTrustedForwarder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUniswapV3Factory()",
      "name": "getUniswapV3Factory",
      "description": "Get UniswapV3Factory address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "UniswapV3Factory address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVault()",
      "name": "getVault",
      "description": "Get `Vault` address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "`Vault` address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address,address,address,address,address)",
      "name": "initialize",
      "description": "this function is public for testing.",
      "parameterDecorators": [
        {
          "name": "clearingHouseConfigArg",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "vaultArg",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "quoteTokenArg",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "uniV3FactoryArg",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "exchangeArg",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "accountBalanceArg",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "insuranceFundArg",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isTrustedForwarder(address)",
      "name": "isTrustedForwarder",
      "description": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.",
      "parameterDecorators": [
        {
          "name": "forwarder",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidate(address,address,uint256)",
      "name": "liquidate",
      "description": "If trader is underwater, any one can call `liquidate` to liquidate this trader. If trader has open orders, need to call `cancelAllExcessOrders` first.",
      "parameterDecorators": [
        {
          "name": "trader",
          "description": "The address of trader.",
          "recommendedTypes": []
        },
        {
          "name": "baseToken",
          "description": "The address of baseToken.",
          "recommendedTypes": []
        },
        {
          "name": "oppositeAmountBound",
          "description": "please check OpenPositionParams.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "base",
          "description": "The amount of baseToken the taker got or spent.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "quote",
          "description": "The amount of quoteToken the taker got or spent.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "isPartialClose",
          "description": "when it's over price limit return true and only liquidate 25% of the position.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "liquidate(address,address)",
      "name": "liquidate",
      "description": "If trader is underwater, any one can call `liquidate` to liquidate this trader. This function will be deprecated in the future, recommend to use the function `liquidate()` aboveIf trader has open orders, need to call `cancelAllExcessOrders` first.",
      "parameterDecorators": [
        {
          "name": "trader",
          "description": "The address of trader.",
          "recommendedTypes": []
        },
        {
          "name": "baseToken",
          "description": "The address of baseToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "openPosition(tuple(address,bool,bool,uint256,uint256,uint256,uint160,bytes32))",
      "name": "openPosition",
      "description": "Trader can call `openPosition` to long/short on baseToken market. - `OpenPositionParams.oppositeAmountBound` - B2Q + exact input, want more output quote as possible, so we set a lower bound of output quote - B2Q + exact output, want less input base as possible, so we set a upper bound of input base - Q2B + exact input, want more output base as possible, so we set a lower bound of output base - Q2B + exact output, want less input quote as possible, so we set a upper bound of input quote > when it's set to 0, it will disable slippage protection entirely regardless of exact input or output > when it's over or under the bound, it will be reverted- `OpenPositionParams.sqrtPriceLimitX96` - B2Q: the price cannot be less than this value after the swap - Q2B: the price cannot be greater than this value after the swap > it will fill the trade until it reaches the price limit but WON'T REVERT > when it's set to 0, it will disable price limit; > when it's 0 and exact output, the output amount is required to be identical to the param amount.",
      "parameterDecorators": [
        {
          "name": "params",
          "description": "OpenPositionParams struct.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "baseToken",
              "description": "",
              "type": "address"
            },
            {
              "name": "isBaseToQuote",
              "description": "",
              "type": "bool"
            },
            {
              "name": "isExactInput",
              "description": "",
              "type": "bool"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "oppositeAmountBound",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "sqrtPriceLimitX96",
              "description": "",
              "type": "uint160"
            },
            {
              "name": "referralCode",
              "description": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "base",
          "description": "The amount of baseToken the taker got or spent.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "quote",
          "description": "The amount of quoteToken the taker got or spent.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "quitMarket(address,address)",
      "name": "quitMarket",
      "description": "Close all positions of a trader in the closed market.",
      "parameterDecorators": [
        {
          "name": "trader",
          "description": "The address of trader.",
          "recommendedTypes": []
        },
        {
          "name": "baseToken",
          "description": "The address of baseToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "base",
          "description": "The amount of base token that is closed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "quote",
          "description": "The amount of quote token that is closed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeLiquidity(tuple(address,int24,int24,uint128,uint256,uint256,uint256))",
      "name": "removeLiquidity",
      "description": "Maker can call `removeLiquidity` to remove liquidity. remove liquidity will transfer maker impermanent position to taker position, if `liquidity` of RemoveLiquidityParams struct is zero, the action will collect fee from pool to maker.",
      "parameterDecorators": [
        {
          "name": "params",
          "description": "RemoveLiquidityParams struct.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "baseToken",
              "description": "",
              "type": "address"
            },
            {
              "name": "lowerTick",
              "description": "",
              "type": "int24"
            },
            {
              "name": "upperTick",
              "description": "",
              "type": "int24"
            },
            {
              "name": "liquidity",
              "description": "",
              "type": "uint128"
            },
            {
              "name": "minBase",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minQuote",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "RemoveLiquidityResponse struct.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwner(address)",
      "name": "setOwner",
      "description": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTrustedForwarder(address)",
      "name": "setTrustedForwarder",
      "description": "",
      "parameterDecorators": [
        {
          "name": "trustedForwarderArg",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settleAllFunding(address)",
      "name": "settleAllFunding",
      "description": "Settle all markets fundingPayment to owedRealized Pnl.",
      "parameterDecorators": [
        {
          "name": "trader",
          "description": "The address of trader.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uniswapV3MintCallback(uint256,uint256,bytes)",
      "name": "uniswapV3MintCallback",
      "description": "Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint. namings here follow Uniswap's convention.",
      "parameterDecorators": [
        {
          "name": "amount0Owed",
          "description": "The amount of token0 due to the pool for the minted liquidity.",
          "recommendedTypes": []
        },
        {
          "name": "amount1Owed",
          "description": "The amount of token1 due to the pool for the minted liquidity.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Any data passed through by the caller via the IUniswapV3PoolActions#mint call.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uniswapV3SwapCallback(int256,int256,bytes)",
      "name": "uniswapV3SwapCallback",
      "description": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap. namings here follow Uniswap's convention.",
      "parameterDecorators": [
        {
          "name": "amount0Delta",
          "description": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
          "recommendedTypes": []
        },
        {
          "name": "amount1Delta",
          "description": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateOwner()",
      "name": "updateOwner",
      "description": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "versionRecipient()",
      "name": "versionRecipient",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}