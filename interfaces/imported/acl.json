{
  "schema": "../schema.json",
  "tags": [],
  "name": "ACL",
  "description": "",
  "eventDecorators": [
    {
      "signature": "SetPermission(address,address,bytes32,bool)",
      "name": "SetPermission",
      "description": "Validator's status changed. Event emitted for each executed trade.",
      "parameterDecorators": [
        {
          "name": "entity",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "app",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allowed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetPermissionParams(address,address,bytes32,bytes32)",
      "name": "SetPermissionParams",
      "description": "Validator's status changed. Event emitted for each executed trade.",
      "parameterDecorators": [
        {
          "name": "entity",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "app",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "paramsHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ChangePermissionManager(address,bytes32,address)",
      "name": "ChangePermissionManager",
      "description": "Validator's status changed. Event emitted for each executed trade.",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "manager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ScriptResult(address,bytes,bytes,bytes)",
      "name": "ScriptResult",
      "description": "Validator's status changed. Event emitted for each executed trade.",
      "parameterDecorators": [
        {
          "name": "executor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "script",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "input",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "returnData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RecoverToVault(address,address,uint256)",
      "name": "RecoverToVault",
      "description": "Validator's status changed. Event emitted for each executed trade.",
      "parameterDecorators": [
        {
          "name": "vault",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "hasInitialized()",
      "name": "hasInitialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createBurnedPermission(address,bytes32)",
      "name": "createBurnedPermission",
      "description": "Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager).",
      "parameterDecorators": [
        {
          "name": "_app",
          "description": "Address of the app in which the permission is being burned.",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Identifier for the group of actions being burned.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "burnPermissionManager(address,bytes32)",
      "name": "burnPermissionManager",
      "description": "Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager).",
      "parameterDecorators": [
        {
          "name": "_app",
          "description": "Address of the app in which the permission is being burned.",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Identifier for the group of actions being burned.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "grantPermission(address,address,bytes32)",
      "name": "grantPermission",
      "description": "Grant `_entity` the ability to perform actions requiring `_role` on `_app`. Grants permission if allowed. This requires `msg.sender` to be the permission manager.",
      "parameterDecorators": [
        {
          "name": "_entity",
          "description": "Address of the whitelisted entity that will be able to perform the role.",
          "recommendedTypes": []
        },
        {
          "name": "_app",
          "description": "Address of the app in which the role will be allowed (requires app to depend on kernel for ACL).",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Identifier for the group of actions in app given access to perform.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getPermissionParamsLength(address,address,bytes32)",
      "name": "getPermissionParamsLength",
      "description": "Get parameters for permission array length.",
      "parameterDecorators": [
        {
          "name": "_entity",
          "description": "Address of the whitelisted entity that will be able to perform the role.",
          "recommendedTypes": []
        },
        {
          "name": "_app",
          "description": "Address of the app.",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Identifier for a group of actions in app.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "evalParams(bytes32,address,address,bytes32,uint256[])",
      "name": "evalParams",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_paramsHash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_who",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_where",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_what",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_how",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "NO_PERMISSION()",
      "name": "NO_PERMISSION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEVMScriptExecutor(bytes)",
      "name": "getEVMScriptExecutor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_script",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRecoveryVault()",
      "name": "getRecoveryVault",
      "description": "Get the recovery vault for the app.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "CREATE_PERMISSIONS_ROLE()",
      "name": "CREATE_PERMISSIONS_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantPermissionP(address,address,bytes32,uint256[])",
      "name": "grantPermissionP",
      "description": "Grant `_entity` the ability to perform actions requiring `_role` on `_app`. Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager.",
      "parameterDecorators": [
        {
          "name": "_entity",
          "description": "Address of the whitelisted entity that will be able to perform the role.",
          "recommendedTypes": []
        },
        {
          "name": "_app",
          "description": "Address of the app in which the role will be allowed (requires app to depend on kernel for ACL).",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Identifier for the group of actions in app given access to perform.",
          "recommendedTypes": []
        },
        {
          "name": "_params",
          "description": "Permission parameters.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hasPermission(address,address,bytes32)",
      "name": "hasPermission",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_who",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_where",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_what",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowRecoverability(address)",
      "name": "allowRecoverability",
      "description": "By default deriving from AragonApp makes it recoverable.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Token address that would be recovered.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "appId()",
      "name": "appId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getInitializationBlock()",
      "name": "getInitializationBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "revokePermission(address,address,bytes32)",
      "name": "revokePermission",
      "description": "Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`. Revokes permission if allowed. This requires `msg.sender` to be the the permission manager.",
      "parameterDecorators": [
        {
          "name": "_entity",
          "description": "Address of the whitelisted entity to revoke access from.",
          "recommendedTypes": []
        },
        {
          "name": "_app",
          "description": "Address of the app in which the role will be revoked.",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Identifier for the group of actions in app being revoked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferToVault(address)",
      "name": "transferToVault",
      "description": "Send funds to recovery Vault. This contract should never receive funds, but in case it does, this function allows one to recover them.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "Token balance to be sent to recovery vault.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getPermissionParam(address,address,bytes32,uint256)",
      "name": "getPermissionParam",
      "description": "Get parameter for permission.",
      "parameterDecorators": [
        {
          "name": "_entity",
          "description": "Address of the whitelisted entity that will be able to perform the role.",
          "recommendedTypes": []
        },
        {
          "name": "_app",
          "description": "Address of the app.",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Identifier for a group of actions in app.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "Index of parameter in the array.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint240"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "canPerform(address,bytes32,uint256[])",
      "name": "canPerform",
      "description": "Check whether an action can be performed by a sender for a particular role on this app.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "Sender of the call.",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Role on this app.",
          "recommendedTypes": []
        },
        {
          "name": "_params",
          "description": "Permission params for the role.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEVMScriptRegistry()",
      "name": "getEVMScriptRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ANY_ENTITY()",
      "name": "ANY_ENTITY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removePermissionManager(address,bytes32)",
      "name": "removePermissionManager",
      "description": "Remove the manager of `_role` in `_app`.",
      "parameterDecorators": [
        {
          "name": "_app",
          "description": "Address of the app in which the permission is being unmanaged.",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Identifier for the group of actions being unmanaged.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPermissionManager(address,address,bytes32)",
      "name": "setPermissionManager",
      "description": "Set `_newManager` as the manager of `_role` in `_app`.",
      "parameterDecorators": [
        {
          "name": "_newManager",
          "description": "Address for the new manager.",
          "recommendedTypes": []
        },
        {
          "name": "_app",
          "description": "Address of the app in which the permission management is being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Identifier for the group of actions being transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getPermissionManager(address,bytes32)",
      "name": "getPermissionManager",
      "description": "Get manager for permission.",
      "parameterDecorators": [
        {
          "name": "_app",
          "description": "Address of the app.",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Identifier for a group of actions in app.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createPermission(address,address,bytes32,address)",
      "name": "createPermission",
      "description": "Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager. Creates a permission that wasn't previously set and managed. If a created permission is removed it is possible to reset it with createPermission. This is the **ONLY** way to create permissions and set managers to permissions that don't have a manager. In terms of the ACL being initialized, this function implicitly protects all the other state-changing external functions, as they all require the sender to be a manager.",
      "parameterDecorators": [
        {
          "name": "_entity",
          "description": "Address of the whitelisted entity that will be able to perform the role.",
          "recommendedTypes": []
        },
        {
          "name": "_app",
          "description": "Address of the app in which the role will be allowed (requires app to depend on kernel for ACL).",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Identifier for the group of actions in app given access to perform.",
          "recommendedTypes": []
        },
        {
          "name": "_manager",
          "description": "Address of the entity that will be able to grant and revoke the permission further.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions. Initialize can only be called once. It saves the block number in which it was initialized.",
      "parameterDecorators": [
        {
          "name": "_permissionsCreator",
          "description": "Entity that will be given permission over createPermission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "EMPTY_PARAM_HASH()",
      "name": "EMPTY_PARAM_HASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "kernel()",
      "name": "kernel",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPetrified()",
      "name": "isPetrified",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "BURN_ENTITY()",
      "name": "BURN_ENTITY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasPermission(address,address,bytes32,uint256[])",
      "name": "hasPermission",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_who",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_where",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_what",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_how",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasPermission(address,address,bytes32,bytes)",
      "name": "hasPermission",
      "description": "Function called by apps to check ACL on kernel or to check permission statu.",
      "parameterDecorators": [
        {
          "name": "_who",
          "description": "Sender of the original call.",
          "recommendedTypes": []
        },
        {
          "name": "_where",
          "description": "Identifier for a group of actions in app.",
          "recommendedTypes": []
        },
        {
          "name": "_what",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_how",
          "description": "Permission parameters.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}