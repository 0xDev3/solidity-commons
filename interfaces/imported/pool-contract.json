{"schema":"../schema.json","tags":["swaps","borrowing","flash loans","loans","aave"],"name":"Pool","description":"Pool contract. To be covered by a proxy contract, owned by the PoolAddressesProvider of the specific marketAll admin functions are callable by the PoolConfigurator contract defined also in the PoolAddressesProvider*. Main point of interaction with an Aave protocol's market - Users can: # Supply # Withdraw # Borrow # Repay # Swap their loans between variable and stable rate # Enable/disable their supplied assets as collateral rebalance stable rate borrow positions # Liquidate positions # Execute Flash Loans.","eventDecorators":[{"signature":"BackUnbacked(address,address,uint256,uint256)","name":"BackUnbacked","description":"","parameterDecorators":[{"name":"reserve","description":"","recommendedTypes":[],"indexed":true},{"name":"backer","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"fee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Borrow(address,address,address,uint256,uint8,uint256,uint16)","name":"Borrow","description":"","parameterDecorators":[{"name":"reserve","description":"","recommendedTypes":[],"indexed":true},{"name":"user","description":"","recommendedTypes":[],"indexed":false},{"name":"onBehalfOf","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"interestRateMode","description":"","recommendedTypes":[],"indexed":false},{"name":"borrowRate","description":"","recommendedTypes":[],"indexed":false},{"name":"referralCode","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"FlashLoan(address,address,address,uint256,uint8,uint256,uint16)","name":"FlashLoan","description":"","parameterDecorators":[{"name":"target","description":"","recommendedTypes":[],"indexed":true},{"name":"initiator","description":"","recommendedTypes":[],"indexed":false},{"name":"asset","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"interestRateMode","description":"","recommendedTypes":[],"indexed":false},{"name":"premium","description":"","recommendedTypes":[],"indexed":false},{"name":"referralCode","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"IsolationModeTotalDebtUpdated(address,uint256)","name":"IsolationModeTotalDebtUpdated","description":"","parameterDecorators":[{"name":"reporter","description":"The address of the entity that reported the updater misbehavior.","recommendedTypes":[],"indexed":true},{"name":"updater","description":"The address of the updater.","recommendedTypes":[],"indexed":false}]},{"signature":"LiquidationCall(address,address,address,uint256,uint256,address,bool)","name":"LiquidationCall","description":"","parameterDecorators":[{"name":"collateralAsset","description":"","recommendedTypes":[],"indexed":true},{"name":"debtAsset","description":"","recommendedTypes":[],"indexed":true},{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"debtToCover","description":"","recommendedTypes":[],"indexed":false},{"name":"liquidatedCollateralAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"liquidator","description":"","recommendedTypes":[],"indexed":false},{"name":"receiveAToken","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"MintUnbacked(address,address,address,uint256,uint16)","name":"MintUnbacked","description":"","parameterDecorators":[{"name":"reserve","description":"","recommendedTypes":[],"indexed":true},{"name":"user","description":"","recommendedTypes":[],"indexed":false},{"name":"onBehalfOf","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"referralCode","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"MintedToTreasury(address,uint256)","name":"MintedToTreasury","description":"","parameterDecorators":[{"name":"reporter","description":"The address of the entity that reported the updater misbehavior.","recommendedTypes":[],"indexed":true},{"name":"updater","description":"The address of the updater.","recommendedTypes":[],"indexed":false}]},{"signature":"RebalanceStableBorrowRate(address,address)","name":"RebalanceStableBorrowRate","description":"","parameterDecorators":[{"name":"reporter","description":"The address of the entity that reported the updater misbehavior.","recommendedTypes":[],"indexed":true},{"name":"updater","description":"The address of the updater.","recommendedTypes":[],"indexed":true}]},{"signature":"Repay(address,address,address,uint256,bool)","name":"Repay","description":"","parameterDecorators":[{"name":"reserve","description":"","recommendedTypes":[],"indexed":true},{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"repayer","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"useATokens","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ReserveDataUpdated(address,uint256,uint256,uint256,uint256,uint256)","name":"ReserveDataUpdated","description":"","parameterDecorators":[{"name":"reserve","description":"","recommendedTypes":[],"indexed":true},{"name":"liquidityRate","description":"","recommendedTypes":[],"indexed":false},{"name":"stableBorrowRate","description":"","recommendedTypes":[],"indexed":false},{"name":"variableBorrowRate","description":"","recommendedTypes":[],"indexed":false},{"name":"liquidityIndex","description":"","recommendedTypes":[],"indexed":false},{"name":"variableBorrowIndex","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ReserveUsedAsCollateralDisabled(address,address)","name":"ReserveUsedAsCollateralDisabled","description":"","parameterDecorators":[{"name":"reporter","description":"The address of the entity that reported the updater misbehavior.","recommendedTypes":[],"indexed":true},{"name":"updater","description":"The address of the updater.","recommendedTypes":[],"indexed":true}]},{"signature":"ReserveUsedAsCollateralEnabled(address,address)","name":"ReserveUsedAsCollateralEnabled","description":"","parameterDecorators":[{"name":"reporter","description":"The address of the entity that reported the updater misbehavior.","recommendedTypes":[],"indexed":true},{"name":"updater","description":"The address of the updater.","recommendedTypes":[],"indexed":true}]},{"signature":"Supply(address,address,address,uint256,uint16)","name":"Supply","description":"","parameterDecorators":[{"name":"reserve","description":"","recommendedTypes":[],"indexed":true},{"name":"user","description":"","recommendedTypes":[],"indexed":false},{"name":"onBehalfOf","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"referralCode","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"SwapBorrowRateMode(address,address,uint8)","name":"SwapBorrowRateMode","description":"","parameterDecorators":[{"name":"reserve","description":"","recommendedTypes":[],"indexed":true},{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"interestRateMode","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"UserEModeSet(address,uint8)","name":"UserEModeSet","description":"","parameterDecorators":[{"name":"reporter","description":"The address of the entity that reported the updater misbehavior.","recommendedTypes":[],"indexed":true},{"name":"updater","description":"The address of the updater.","recommendedTypes":[],"indexed":false}]},{"signature":"Withdraw(address,address,address,uint256)","name":"Withdraw","description":"","parameterDecorators":[{"name":"reserve","description":"","recommendedTypes":[],"indexed":true},{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"ADDRESSES_PROVIDER()","name":"ADDRESSES_PROVIDER","description":"Returns the PoolAddressesProvider connected to this contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"BRIDGE_PROTOCOL_FEE()","name":"BRIDGE_PROTOCOL_FEE","description":"Returns the part of the bridge fees sent to protocol.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The bridge fee sent to the protocol treasury.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"FLASHLOAN_PREMIUM_TOTAL()","name":"FLASHLOAN_PREMIUM_TOTAL","description":"Returns the total fee on flash loans.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The total fee on flashloans.","recommendedTypes":[],"solidityType":"uint128"}],"emittableEvents":[],"readOnly":true},{"signature":"FLASHLOAN_PREMIUM_TO_PROTOCOL()","name":"FLASHLOAN_PREMIUM_TO_PROTOCOL","description":"Returns the part of the flashloan fees sent to protocol.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The flashloan fee sent to the protocol treasury.","recommendedTypes":[],"solidityType":"uint128"}],"emittableEvents":[],"readOnly":true},{"signature":"MAX_NUMBER_RESERVES()","name":"MAX_NUMBER_RESERVES","description":"Returns the maximum number of reserves supported to be listed in this Pool.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The maximum number of reserves supported.","recommendedTypes":[],"solidityType":"uint16"}],"emittableEvents":[],"readOnly":true},{"signature":"MAX_STABLE_RATE_BORROW_SIZE_PERCENT()","name":"MAX_STABLE_RATE_BORROW_SIZE_PERCENT","description":"Returns the percentage of available liquidity that can be borrowed at once at stable rate.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The percentage of available liquidity to borrow, expressed in bps.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"POOL_REVISION()","name":"POOL_REVISION","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"backUnbacked(address,uint256,uint256)","name":"backUnbacked","description":"Back the current unbacked underlying with `amount` and pay `fee`.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset to back.","recommendedTypes":[]},{"name":"amount","description":"The amount to back.","recommendedTypes":[]},{"name":"fee","description":"The amount paid in fees*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"borrow(address,uint256,uint256,uint16,address)","name":"borrow","description":"Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower already supplied enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet and 100 stable/variable debt tokens, depending on the `interestRateMode`.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset to borrow.","recommendedTypes":[]},{"name":"amount","description":"The amount to be borrowed.","recommendedTypes":[]},{"name":"interestRateMode","description":"The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable.","recommendedTypes":[]},{"name":"referralCode","description":"The code used to register the integrator originating the operation, for potential rewards. 0 if the action is executed directly by the user, without any middle-man.","recommendedTypes":[]},{"name":"onBehalfOf","description":"The address of the user who will receive the debt. Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral, or the address of the credit delegator if he has been given credit delegation allowance*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"configureEModeCategory(uint8,tuple(uint16,uint16,uint16,address,string))","name":"configureEModeCategory","description":"Configures a new category for the eMode. In eMode, the protocol allows very high borrowing power to borrow assets of the same category. The category 0 is reserved as it's the default for volatile assets.","parameterDecorators":[{"name":"id","description":"The id of the category.","recommendedTypes":[]},{"name":"id","description":"The id of the category.","recommendedTypes":[],"parameters":[{"name":"ltv","description":"","type":"uint16"},{"name":"liquidationThreshold","description":"","type":"uint16"},{"name":"liquidationBonus","description":"","type":"uint16"},{"name":"priceSource","description":"","type":"address"},{"name":"label","description":"","type":"string"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deposit(address,uint256,address,uint16)","name":"deposit","description":"Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC. Deprecated: maintained for compatibility purposes.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset to supply.","recommendedTypes":[]},{"name":"amount","description":"The amount to be supplied.","recommendedTypes":[]},{"name":"onBehalfOf","description":"The address that will receive the aTokens, same as msg.sender if the user wants to receive them on his own wallet, or a different address if the beneficiary of aTokens is a different wallet.","recommendedTypes":[]},{"name":"referralCode","description":"Code used to register the integrator originating the operation, for potential rewards. 0 if the action is executed directly by the user, without any middle-man*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"dropReserve(address)","name":"dropReserve","description":"Drop a reserve. Only callable by the PoolConfigurator contract.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset of the reserve*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"finalizeTransfer(address,address,address,uint256,uint256,uint256)","name":"finalizeTransfer","description":"Validates and finalizes an aToken transfer. Only callable by the overlying aToken of the `asset`.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset of the aToken.","recommendedTypes":[]},{"name":"from","description":"The user from which the aTokens are transferred.","recommendedTypes":[]},{"name":"to","description":"The user receiving the aTokens.","recommendedTypes":[]},{"name":"amount","description":"The amount being transferred/withdrawn.","recommendedTypes":[]},{"name":"balanceFromBefore","description":"The aToken balance of the `from` user before the transfer.","recommendedTypes":[]},{"name":"balanceToBefore","description":"The aToken balance of the `to` user before the transfer.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)","name":"flashLoan","description":"Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com.","parameterDecorators":[{"name":"receiverAddress","description":"The address of the contract receiving the funds, implementing IFlashLoanReceiver interface.","recommendedTypes":[]},{"name":"assets","description":"The addresses of the assets being flash-borrowed.","recommendedTypes":[]},{"name":"amounts","description":"The amounts of the assets being flash-borrowed.","recommendedTypes":[]},{"name":"interestRateModes","description":"Types of the debt to open if the flash loan is not returned: 0 -> Don't open any debt, just revert if funds can't be transferred from the receiver 1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address 2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address.","recommendedTypes":[]},{"name":"onBehalfOf","description":"The address that will receive the debt in the case of using on `modes` 1 or 2.","recommendedTypes":[]},{"name":"params","description":"Variadic packed params to pass to the receiver as extra information.","recommendedTypes":[]},{"name":"referralCode","description":"The code used to register the integrator originating the operation, for potential rewards. 0 if the action is executed directly by the user, without any middle-man*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"flashLoanSimple(address,address,uint256,bytes,uint16)","name":"flashLoanSimple","description":"Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com.","parameterDecorators":[{"name":"receiverAddress","description":"The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface.","recommendedTypes":[]},{"name":"asset","description":"The address of the asset being flash-borrowed.","recommendedTypes":[]},{"name":"amount","description":"The amount of the asset being flash-borrowed.","recommendedTypes":[]},{"name":"params","description":"Variadic packed params to pass to the receiver as extra information.","recommendedTypes":[]},{"name":"referralCode","description":"The code used to register the integrator originating the operation, for potential rewards. 0 if the action is executed directly by the user, without any middle-man*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getConfiguration(address)","name":"getConfiguration","description":"Returns the configuration of the reserve.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset of the reserve.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The configuration of the reserve*.","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"getEModeCategoryData(uint8)","name":"getEModeCategoryData","description":"Returns the data of an eMode category.","parameterDecorators":[{"name":"id","description":"The id of the category.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The configuration data of the category.","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"getReserveData(address)","name":"getReserveData","description":"Returns the state and configuration of the reserve.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset of the reserve.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The state and configuration data of the reserve*.","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"getReserveNormalizedIncome(address)","name":"getReserveNormalizedIncome","description":"Returns the normalized income normalized income of the reserve.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset of the reserve.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The reserve's normalized income.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getReserveNormalizedVariableDebt(address)","name":"getReserveNormalizedVariableDebt","description":"Returns the normalized variable debt per unit of asset.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset of the reserve.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The reserve normalized variable debt.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getReservesList()","name":"getReservesList","description":"Returns the list of the initialized reserves. It does not include dropped reserves.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The addresses of the reserves*.","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getUserAccountData(address)","name":"getUserAccountData","description":"Returns the user account data across all the reserves.","parameterDecorators":[{"name":"user","description":"The address of the user.","recommendedTypes":[]}],"returnDecorators":[{"name":"totalCollateralBase","description":"The total collateral of the user in the base currency used by the price feed.","recommendedTypes":[],"solidityType":"uint256"},{"name":"totalDebtBase","description":"The total debt of the user in the base currency used by the price feed.","recommendedTypes":[],"solidityType":"uint256"},{"name":"availableBorrowsBase","description":"The borrowing power left of the user in the base currency used by the price feed.","recommendedTypes":[],"solidityType":"uint256"},{"name":"currentLiquidationThreshold","description":"The liquidation threshold of the user.","recommendedTypes":[],"solidityType":"uint256"},{"name":"ltv","description":"The loan to value of The user.","recommendedTypes":[],"solidityType":"uint256"},{"name":"healthFactor","description":"The current health factor of the user*.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getUserConfiguration(address)","name":"getUserConfiguration","description":"Returns the configuration of the user across all the reserves.","parameterDecorators":[{"name":"user","description":"The user address.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The configuration of the user*.","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"getUserEMode(address)","name":"getUserEMode","description":"Returns the eMode the user is using.","parameterDecorators":[{"name":"user","description":"The address of the user.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The eMode id.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"initReserve(address,address,address,address,address)","name":"initReserve","description":"Initializes a reserve, activating it, assigning an aToken and debt tokens and an interest rate strategy. Only callable by the PoolConfigurator contract.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset of the reserve.","recommendedTypes":[]},{"name":"aTokenAddress","description":"The address of the aToken that will be assigned to the reserve.","recommendedTypes":[]},{"name":"stableDebtAddress","description":"The address of the StableDebtToken that will be assigned to the reserve.","recommendedTypes":[]},{"name":"variableDebtAddress","description":"The address of the VariableDebtToken that will be assigned to the reserve.","recommendedTypes":[]},{"name":"interestRateStrategyAddress","description":"The address of the interest rate strategy contract*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialize(address)","name":"initialize","description":"Initializes the Pool. Function is invoked by the proxy contract when the Pool contract is added to the PoolAddressesProvider of the market.Caching the address of the PoolAddressesProvider in order to reduce gas consumption on subsequent operations.","parameterDecorators":[{"name":"provider","description":"The address of the PoolAddressesProvider*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"liquidationCall(address,address,address,uint256,bool)","name":"liquidationCall","description":"Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives a proportionally amount of the `collateralAsset` plus a bonus to cover market risk.","parameterDecorators":[{"name":"collateralAsset","description":"The address of the underlying asset used as collateral, to receive as result of the liquidation.","recommendedTypes":[]},{"name":"debtAsset","description":"The address of the underlying borrowed asset to be repaid with the liquidation.","recommendedTypes":[]},{"name":"user","description":"The address of the borrower getting liquidated.","recommendedTypes":[]},{"name":"debtToCover","description":"The debt amount of borrowed `asset` the liquidator wants to cover.","recommendedTypes":[]},{"name":"receiveAToken","description":"True if the liquidators wants to receive the collateral aTokens, `false` if he wants to receive the underlying collateral asset directly*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"mintToTreasury(address[])","name":"mintToTreasury","description":"Mints the assets accrued through the reserve factor to the treasury in the form of aTokens.","parameterDecorators":[{"name":"assets","description":"The list of reserves for which the minting needs to be executed*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"mintUnbacked(address,uint256,address,uint16)","name":"mintUnbacked","description":"Mints an `amount` of aTokens to the `onBehalfOf`.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset to mint.","recommendedTypes":[]},{"name":"amount","description":"The amount to mint.","recommendedTypes":[]},{"name":"onBehalfOf","description":"The address that will receive the aTokens.","recommendedTypes":[]},{"name":"referralCode","description":"Code used to register the integrator originating the operation, for potential rewards. 0 if the action is executed directly by the user, without any middle-man*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"rebalanceStableBorrowRate(address,address)","name":"rebalanceStableBorrowRate","description":"Rebalances the stable interest rate of a user to the current stable rate defined on the reserve. - Users can be rebalanced if the following conditions are satisfied: 1. Usage ratio is above 95% 2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been borrowed at a stable rate and suppliers are not earning enough.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset borrowed.","recommendedTypes":[]},{"name":"user","description":"The address of the user to be rebalanced*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"repay(address,uint256,uint256,address)","name":"repay","description":"Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address.","parameterDecorators":[{"name":"asset","description":"The address of the borrowed underlying asset previously borrowed.","recommendedTypes":[]},{"name":"amount","description":"The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`.","recommendedTypes":[]},{"name":"interestRateMode","description":"The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable.","recommendedTypes":[]},{"name":"onBehalfOf","description":"The address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The final amount repaid*.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"repayWithATokens(address,uint256,uint256)","name":"repayWithATokens","description":"Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the equivalent debt tokens - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens. Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken balance is not enough to cover the whole debt.","parameterDecorators":[{"name":"asset","description":"The address of the borrowed underlying asset previously borrowed.","recommendedTypes":[]},{"name":"amount","description":"The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`.","recommendedTypes":[]},{"name":"interestRateMode","description":"The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The final amount repaid*.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)","name":"repayWithPermit","description":"Repay with transfer approval of asset to be repaid done via permit function see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713.","parameterDecorators":[{"name":"asset","description":"The address of the borrowed underlying asset previously borrowed.","recommendedTypes":[]},{"name":"amount","description":"The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`.","recommendedTypes":[]},{"name":"interestRateMode","description":"The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable.","recommendedTypes":[]},{"name":"onBehalfOf","description":"Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed.","recommendedTypes":[]},{"name":"deadline","description":"The deadline timestamp that the permit is valid.","recommendedTypes":[]},{"name":"permitV","description":"The V parameter of ERC712 permit sig.","recommendedTypes":[]},{"name":"permitR","description":"The R parameter of ERC712 permit sig.","recommendedTypes":[]},{"name":"permitS","description":"The S parameter of ERC712 permit sig.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The final amount repaid*.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"rescueTokens(address,address,uint256)","name":"rescueTokens","description":"Rescue and transfer tokens locked in this contract.","parameterDecorators":[{"name":"token","description":"The address of the token.","recommendedTypes":[]},{"name":"to","description":"The address of the recipient.","recommendedTypes":[]},{"name":"amount","description":"The amount of token to transfer.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"resetIsolationModeTotalDebt(address)","name":"resetIsolationModeTotalDebt","description":"Resets the isolation mode total debt of the given asset to zero. It requires the given asset has zero debt ceiling.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset to reset the isolationModeTotalDebt.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setConfiguration(address,tuple(uint256))","name":"setConfiguration","description":"Sets the configuration bitmap of the reserve as a whole. Only callable by the PoolConfigurator contract.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset of the reserve.","recommendedTypes":[]},{"name":"configuration","description":"The new configuration bitmap*.","recommendedTypes":[],"parameters":[{"name":"data","description":"","type":"uint256"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setReserveInterestRateStrategyAddress(address,address)","name":"setReserveInterestRateStrategyAddress","description":"Updates the address of the interest rate strategy contract. Only callable by the PoolConfigurator contract.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset of the reserve.","recommendedTypes":[]},{"name":"rateStrategyAddress","description":"The address of the interest rate strategy contract*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setUserEMode(uint8)","name":"setUserEMode","description":"Allows a user to use the protocol in eMode.","parameterDecorators":[{"name":"categoryId","description":"The id of the category.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setUserUseReserveAsCollateral(address,bool)","name":"setUserUseReserveAsCollateral","description":"Allows suppliers to enable/disable a specific supplied asset as collateral.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset supplied.","recommendedTypes":[]},{"name":"useAsCollateral","description":"True if the user wants to use the supply as collateral, false otherwise*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supply(address,uint256,address,uint16)","name":"supply","description":"Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset to supply.","recommendedTypes":[]},{"name":"amount","description":"The amount to be supplied.","recommendedTypes":[]},{"name":"onBehalfOf","description":"The address that will receive the aTokens, same as msg.sender if the user wants to receive them on his own wallet, or a different address if the beneficiary of aTokens is a different wallet.","recommendedTypes":[]},{"name":"referralCode","description":"Code used to register the integrator originating the operation, for potential rewards. 0 if the action is executed directly by the user, without any middle-man*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)","name":"supplyWithPermit","description":"Supply with transfer approval of asset to be supplied done via permit function see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset to supply.","recommendedTypes":[]},{"name":"amount","description":"The amount to be supplied.","recommendedTypes":[]},{"name":"onBehalfOf","description":"The address that will receive the aTokens, same as msg.sender if the user wants to receive them on his own wallet, or a different address if the beneficiary of aTokens is a different wallet.","recommendedTypes":[]},{"name":"referralCode","description":"Code used to register the integrator originating the operation, for potential rewards. 0 if the action is executed directly by the user, without any middle-man.","recommendedTypes":[]},{"name":"deadline","description":"The deadline timestamp that the permit is valid.","recommendedTypes":[]},{"name":"permitV","description":"The V parameter of ERC712 permit sig.","recommendedTypes":[]},{"name":"permitR","description":"The R parameter of ERC712 permit sig.","recommendedTypes":[]},{"name":"permitS","description":"The S parameter of ERC712 permit sig*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"swapBorrowRateMode(address,uint256)","name":"swapBorrowRateMode","description":"Allows a borrower to swap his debt between stable and variable mode, or vice versa.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset borrowed.","recommendedTypes":[]},{"name":"interestRateMode","description":"The rate mode that the user wants to swap to: 1 for Stable, 2 for Variable*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateBridgeProtocolFee(uint256)","name":"updateBridgeProtocolFee","description":"Updates the protocol fee on the bridging.","parameterDecorators":[{"name":"bridgeProtocolFee","description":"The part of the premium sent to the protocol treasury.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateFlashloanPremiums(uint128,uint128)","name":"updateFlashloanPremiums","description":"Updates flash loan premiums. Flash loan premium consists of two parts: - A part is sent to aToken holders as extra, one time accumulated interest - A part is collected by the protocol treasury. The total premium is calculated on the total borrowed amountThe premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`Only callable by the PoolConfigurator contract.","parameterDecorators":[{"name":"flashLoanPremiumTotal","description":"The total premium, expressed in bps.","recommendedTypes":[]},{"name":"flashLoanPremiumToProtocol","description":"The part of the premium sent to the protocol treasury, expressed in bps.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw(address,uint256,address)","name":"withdraw","description":"Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset to withdraw.","recommendedTypes":[]},{"name":"amount","description":"The underlying amount to be withdrawn - Send the value type(uint256).max in order to withdraw the whole aToken balance.","recommendedTypes":[]},{"name":"to","description":"The address that will receive the underlying, same as msg.sender if the user wants to receive it on his own wallet, or a different address if the beneficiary is a different wallet.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The final amount withdrawn*.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false}]}