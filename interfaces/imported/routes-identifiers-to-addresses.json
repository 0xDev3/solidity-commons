{
  "schema": "../schema.json",
  "tags": [],
  "name": "Registry",
  "description": "Routes identifiers to addresses.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RegistryUpdated(string,bytes32,address)",
      "name": "RegistryUpdated",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "identifierHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "getAddressFor(bytes32)",
      "name": "getAddressFor",
      "description": "Gets address associated with the given identifierHash.",
      "parameterDecorators": [
        {
          "name": "identifierHash",
          "description": "Identifier hash of contract whose address we want to look up.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAddressForOrDie(bytes32)",
      "name": "getAddressForOrDie",
      "description": "Gets address associated with the given identifierHash. Throws if address not set.",
      "parameterDecorators": [
        {
          "name": "identifierHash",
          "description": "Identifier hash of contract whose address we want to look up.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAddressForString(string)",
      "name": "getAddressForString",
      "description": "Gets address associated with the given identifier.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "Identifier of contract whose address we want to look up.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAddressForStringOrDie(string)",
      "name": "getAddressForStringOrDie",
      "description": "Gets address associated with the given identifier. Throws if address not set.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "Identifier of contract whose address we want to look up.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize()",
      "name": "initialize",
      "description": "Used in place of the constructor to allow the contract to be upgradable via proxy.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOneOf(bytes32[],address)",
      "name": "isOneOf",
      "description": "Iterates over provided array of identifiers, getting the address for each. Returns true if `sender` matches the address of one of the provided identifiers.",
      "parameterDecorators": [
        {
          "name": "identifierHashes",
          "description": "Array of hashes of approved identifiers.",
          "recommendedTypes": []
        },
        {
          "name": "sender",
          "description": "Address in question to verify membership.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registry(bytes32)",
      "name": "registry",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAddressFor(string,address)",
      "name": "setAddressFor",
      "description": "Associates the given address with the given identifier.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "Identifier of contract whose address we want to set.",
          "recommendedTypes": []
        },
        {
          "name": "addr",
          "description": "Address of contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}