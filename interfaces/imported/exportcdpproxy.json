{"schema":"../schema.json","tags":[],"name":"ExportCdpProxy","description":"","eventDecorators":[],"functionDecorators":[{"signature":"UNIT()","name":"UNIT","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"WETH()","name":"WETH","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"cdpMgr()","name":"cdpMgr","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"controller()","name":"controller","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"dai()","name":"dai","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"daiJoin()","name":"daiJoin","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"executeOnFlashMint(uint256,bytes)","name":"executeOnFlashMint","description":"Callback from `FYDai.flashMint()`.","parameterDecorators":[{"name":"fyDaiAmount","description":"fyDai debt to move from Yield to MakerDAO.","recommendedTypes":[]},{"name":"data","description":"Packed structure with pool, user, cdp, weth collateral to move, and maximum Dai price to pay for fyDai.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"exportCdpPosition(address,uint256,uint256,uint256,uint256)","name":"exportCdpPosition","description":"This method won't work if executed via `delegatecall`, for example using dsproxy. Transfer debt and collateral from Yield to MakerDAO Needs vat.hope(splitter.address, { from: user }); Needs controller.addDelegate(splitter.address, { from: user });.","parameterDecorators":[{"name":"pool","description":"The pool to trade in (and therefore fyDai series to migrate).","recommendedTypes":[]},{"name":"cdp","description":"CDP Vault to export to.","recommendedTypes":[]},{"name":"wethAmount","description":"weth to move from Yield to MakerDAO. Needs to be high enough to collateralize the dai debt in MakerDAO, and low enough to make sure that debt left in Yield is also collateralized.","recommendedTypes":[]},{"name":"fyDaiAmount","description":"fyDai debt to move from Yield to MakerDAO.","recommendedTypes":[]},{"name":"maxFYDaiPrice","description":"Maximum Dai price to pay for fyDai.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"exportCdpPositionCheck(uint256)","name":"exportCdpPositionCheck","description":"Determine whether all approvals and signatures are in place for `exportCdpPosition`.","parameterDecorators":[{"name":"cdp","description":"CDP Vault to export to. If `return[0]` is `false`, calling `cdpMgr.cdpAllow(cdp, exportCdpProxy.address, 1)` will set the MakerDAO approval. If `return[1]` is `false`, `exportCdpPositionWithSignature` must be called with a controller signature. If `return` is `(true, true)`, `exportCdpPosition` won't fail because of missing approvals or signatures.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"exportCdpPositionWithSignature(address,uint256,uint256,uint256,uint256,bytes)","name":"exportCdpPositionWithSignature","description":"Transfer debt and collateral from Yield to MakerDAO Needs vat.hope(exportCdpProxy.address, { from: user });.","parameterDecorators":[{"name":"pool","description":"The pool to trade in (and therefore fyDai series to migrate).","recommendedTypes":[]},{"name":"cdp","description":"CDP Vault to export to.","recommendedTypes":[]},{"name":"wethAmount","description":"weth to move from Yield to MakerDAO. Needs to be high enough to collateralize the dai debt in MakerDAO, and low enough to make sure that debt left in Yield is also collateralized.","recommendedTypes":[]},{"name":"fyDaiAmount","description":"fyDai debt to move from Yield to MakerDAO.","recommendedTypes":[]},{"name":"maxFYDaiPrice","description":"Maximum Dai price to pay for fyDai.","recommendedTypes":[]},{"name":"controllerSig","description":"packed signature for delegation of this proxy in the controller. Ignored if '0x'.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"vat()","name":"vat","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"weth()","name":"weth","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"wethJoin()","name":"wethJoin","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}