{"schema":"../schema.json","tags":["swaps","strategies","yield","compound","polygon network"],"name":"ACMiniChef","description":"AutoCompound MiniChef. MiniChef is used by Sushi and ApeSwap on polygon. strategy for auto-compounding on pools using a MiniChef based contract.","eventDecorators":[{"signature":"EmergencyWithdraw()","name":"EmergencyWithdraw","description":"Ecent emitted after timestamp delay is being changed. Event that is fired each time someone harvests the strat.","parameterDecorators":[]},{"signature":"Farm()","name":"Farm","description":"Ecent emitted after timestamp delay is being changed. Event that is fired each time someone harvests the strat.","parameterDecorators":[]},{"signature":"Initialize()","name":"Initialize","description":"Ecent emitted after timestamp delay is being changed. Event that is fired each time someone harvests the strat.","parameterDecorators":[]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Ecent emitted after timestamp delay is being changed. Event that is fired each time someone harvests the strat.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Pause()","name":"Pause","description":"Ecent emitted after timestamp delay is being changed. Event that is fired each time someone harvests the strat.","parameterDecorators":[]},{"signature":"Paused(address)","name":"Paused","description":"Ecent emitted after timestamp delay is being changed. Event that is fired each time someone harvests the strat.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokenToEarn(address)","name":"TokenToEarn","description":"Ecent emitted after timestamp delay is being changed. Event that is fired each time someone harvests the strat.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unpause()","name":"Unpause","description":"Ecent emitted after timestamp delay is being changed. Event that is fired each time someone harvests the strat.","parameterDecorators":[]},{"signature":"Unpaused(address)","name":"Unpaused","description":"Ecent emitted after timestamp delay is being changed. Event that is fired each time someone harvests the strat.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"WrapNative()","name":"WrapNative","description":"Ecent emitted after timestamp delay is being changed. Event that is fired each time someone harvests the strat.","parameterDecorators":[]}],"functionDecorators":[{"signature":"WNATIVE()","name":"WNATIVE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"deposit(uint256)","name":"deposit","description":"deposits stake tokens in the underlying farm. can only be called by YieldWolf contract which performs the required validations and logging.","parameterDecorators":[{"name":"_depositAmount","description":"amount deposited by the user.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"earn(address)","name":"earn","description":"harvests earn tokens and deposits stake tokens in the underlying farm. can only be called by YieldWolf contract which performs the required validations and logging if the contract is paused, this function becomes a no-op.","parameterDecorators":[{"name":"_bountyHunter","description":"address that will get paid the bounty reward.","recommendedTypes":[]}],"returnDecorators":[{"name":"bountyReward","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"earnToken()","name":"earnToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"emergencyWithdraw()","name":"emergencyWithdraw","description":"invokes the emergency withdraw function in the underlying farm. can only be called by the operator. Only in case of emergency.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"emergencyWithdrawn()","name":"emergencyWithdrawn","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"extraEarnTokens(uint256)","name":"extraEarnTokens","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"farm()","name":"farm","description":"deposits the contract's balance of stake tokens in the underlying farm.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialize(uint256,bool,address[7],address[],address[],address[],address[])","name":"initialize","description":"initializes the strategy. similar to constructor but makes it easier for inheritance and for creating strategies from contracts.","parameterDecorators":[{"name":"_pid","description":"the id of the pool in the farm's staking contract.","recommendedTypes":[]},{"name":"_isLpToken","description":"whether the given stake token is a lp or a single token.","recommendedTypes":[]},{"name":"_addresses","description":"list of addresses.","recommendedTypes":[]},{"name":"_earnToToken0Path","description":"swap path from earn token to token0.","recommendedTypes":[]},{"name":"_earnToToken1Path","description":"swap path from earn token to token1.","recommendedTypes":[]},{"name":"_token0ToEarnPath","description":"swap path from token0 to earn token.","recommendedTypes":[]},{"name":"_token1ToEarnPath","description":"swap path from token1 to earn token.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialized()","name":"initialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"liquidityRouter()","name":"liquidityRouter","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"masterChef()","name":"masterChef","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pause()","name":"pause","description":"pauses the strategy in case of emergency. can only be called by the operator. Only in case of emergency.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"paused()","name":"paused","description":"Returns true if the contract is paused, and false otherwise.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"pid()","name":"pid","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setExtraEarnTokens(address[])","name":"setExtraEarnTokens","description":"updates the list of extra earn tokens. can only be called by YieldWolf contract which already performs the required validations and logging.","parameterDecorators":[{"name":"_extraEarnTokens","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSwapPath(address,address,address[])","name":"setSwapPath","description":"updates the swap path for a given pair. can only be called by YieldWolf contract which already performs the required validations and logging.","parameterDecorators":[{"name":"_token0","description":"","recommendedTypes":[]},{"name":"_token1","description":"","recommendedTypes":[]},{"name":"_path","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSwapRouterEnabled(bool)","name":"setSwapRouterEnabled","description":"enables or disables the swap router used for swapping earn tokens to stake tokens. can only be called by YieldWolf contract which already performs the required validations and logging.","parameterDecorators":[{"name":"_enabled","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"sharesTotal()","name":"sharesTotal","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"stakeToken()","name":"stakeToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"swapPath(address,address,uint256)","name":"swapPath","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]},{"name":"param2","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"swapRouter()","name":"swapRouter","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"swapRouterEnabled()","name":"swapRouterEnabled","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"token0()","name":"token0","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"token1()","name":"token1","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"tokenToEarn(address)","name":"tokenToEarn","description":"converts any token in the contract into earn tokens. it uses the predefined path if it exists or defaults to use WNATIVE.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"totalStakeTokens()","name":"totalStakeTokens","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unpause()","name":"unpause","description":"unpauses the strategy. can only be called by the operator.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw(uint256,address,address,uint256)","name":"withdraw","description":"unstake tokens from the underlying farm and transfers them to the given address. can only be called by YieldWolf contract which performs the required validations and logging.","parameterDecorators":[{"name":"_withdrawAmount","description":"maximum amount to withdraw.","recommendedTypes":[]},{"name":"_withdrawTo","description":"address that will receive the stake tokens.","recommendedTypes":[]},{"name":"_bountyHunter","description":"address of the bounty hunter who execute the rule or the zero address if it's not a rule execution.","recommendedTypes":[]},{"name":"_ruleFeeAmount","description":"how much to pay in concept of rule execution fees.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"wrapNative()","name":"wrapNative","description":"converts NATIVE into WNATIVE (e.g. ETH -> WETH).","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"yieldWolf()","name":"yieldWolf","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}