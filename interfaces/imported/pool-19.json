{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "swaps"
  ],
  "name": "Pool",
  "description": "Pool. The main entry-point of Wombat protocol Note: All variables are 18 decimals, except from that of underlying tokens. Manages deposits, withdrawals and swaps. Holds a mapping of assets and parameters.",
  "eventDecorators": [
    {
      "signature": "AssetAdded(address,address)",
      "name": "AssetAdded",
      "description": "An event thats emitted when an asset is added to Pool.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AssetRemoved(address,address)",
      "name": "AssetRemoved",
      "description": "An event thats emitted when asset is removed from Pool.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Deposit(address,address,uint256,uint256,address)",
      "name": "Deposit",
      "description": "An event thats emitted when a deposit is made to Pool.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "FillPool(address,uint256)",
      "name": "FillPool",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PausedAsset(address,address)",
      "name": "PausedAsset",
      "description": "",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetAmpFactor(uint256)",
      "name": "SetAmpFactor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetDev(address)",
      "name": "SetDev",
      "description": "",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetFee(uint256,uint256)",
      "name": "SetFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "lpDividendRatio",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "retentionRatio",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetFeeTo(address)",
      "name": "SetFeeTo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetHaircutRate(uint256)",
      "name": "SetHaircutRate",
      "description": "",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetMasterWombat(address)",
      "name": "SetMasterWombat",
      "description": "",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetMintFeeThreshold(uint256)",
      "name": "SetMintFeeThreshold",
      "description": "",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Swap(address,address,address,uint256,uint256,address)",
      "name": "Swap",
      "description": "An event thats emitted when a swap is made in Pool.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fromToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "toToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fromAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "toAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TransferTipBucket(address,uint256,address)",
      "name": "TransferTipBucket",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UnpausedAsset(address,address)",
      "name": "UnpausedAsset",
      "description": "",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdraw(address,address,uint256,uint256,address)",
      "name": "Withdraw",
      "description": "An event thats emitted when a withdrawal is made from Pool.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addAsset(address,address)",
      "name": "addAsset",
      "description": "Adds asset to pool, reverts if asset already exists in pool.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The address of token.",
          "recommendedTypes": []
        },
        {
          "name": "asset",
          "description": "The address of the Wombat Asset contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ampFactor()",
      "name": "ampFactor",
      "description": "Amplification factor.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetOf(address)",
      "name": "assetOf",
      "description": "Gets Asset corresponding to ERC20 token. Reverts if asset does not exists in Pool. to be used externally.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The address of ERC20 token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(address,uint256,uint256,address,uint256,bool)",
      "name": "deposit",
      "description": "Deposits amount of tokens into pool ensuring deadline. Asset needs to be created and added to pool before any operation. This function assumes tax free token.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The token address to be deposited.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount to be deposited.",
          "recommendedTypes": []
        },
        {
          "name": "minimumLiquidity",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The user accountable for deposit, receiving the Wombat assets (lp).",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "The deadline to be respected.",
          "recommendedTypes": []
        },
        {
          "name": "shouldStake",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "liquidity",
          "description": "Total asset liquidity minted.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "dev()",
      "name": "dev",
      "description": "Dev address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchangeRate(address)",
      "name": "exchangeRate",
      "description": "Returns the exchange rate of the LP token.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The address of the token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "xr",
          "description": "The exchange rate of LP token.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feeTo()",
      "name": "feeTo",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fillPool(address,uint256)",
      "name": "fillPool",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getTokens()",
      "name": "getTokens",
      "description": "Return list of tokens in the pool.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "globalEquilCovRatio()",
      "name": "globalEquilCovRatio",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "equilCovRatio",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "invariant",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "haircutRate()",
      "name": "haircutRate",
      "description": "Haircut rate.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(uint256,uint256)",
      "name": "initialize",
      "description": "Initializes pool. Dev is set to be the account calling this function.",
      "parameterDecorators": [
        {
          "name": "ampFactor_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "haircutRate_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lpDividendRatio()",
      "name": "lpDividendRatio",
      "description": "LP dividend ratio : the ratio of haircut that should distribute to LP.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "masterWombat()",
      "name": "masterWombat",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintFee(address)",
      "name": "mintFee",
      "description": "Send fee collected to the fee beneficiary.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The address of the token to collect fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintFeeThreshold()",
      "name": "mintFeeThreshold",
      "description": "The threshold to mint fee (unit: WAD).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "pause pool, restricting certain operations.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pauseAsset(address)",
      "name": "pauseAsset",
      "description": "pause asset, restricting deposit and swap operations.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "quotePotentialDeposit(address,uint256)",
      "name": "quotePotentialDeposit",
      "description": "Quotes potential deposit from pool. To be used by frontend.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The token to deposit by user.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount to deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "liquidity",
          "description": "The potential liquidity user would receive.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "reward",
          "description": "reward.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "quotePotentialSwap(address,address,int256)",
      "name": "quotePotentialSwap",
      "description": "Quotes potential outcome of a swap given current state, taking in account slippage and haircut. To be used by frontend.",
      "parameterDecorators": [
        {
          "name": "fromToken",
          "description": "The initial ERC20 token.",
          "recommendedTypes": []
        },
        {
          "name": "toToken",
          "description": "The token wanted by user.",
          "recommendedTypes": []
        },
        {
          "name": "fromAmount",
          "description": "The amount to quote.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "potentialOutcome",
          "description": "The potential amount user would receive.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "haircut",
          "description": "The haircut that would be applied.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "quotePotentialWithdraw(address,uint256)",
      "name": "quotePotentialWithdraw",
      "description": "Quotes potential withdrawal from pool. To be used by frontend.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The token to be withdrawn by user.",
          "recommendedTypes": []
        },
        {
          "name": "liquidity",
          "description": "The liquidity (amount of lp assets) to be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "The potential amount user would receive.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "fee",
          "description": "The fee that would be applied.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeAsset(address)",
      "name": "removeAsset",
      "description": "Removes asset from asset struct. Can only be called by owner.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The address of token to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "retentionRatio()",
      "name": "retentionRatio",
      "description": "Retention ratio: the ratio of haircut that should stay in the pool.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAmpFactor(uint256)",
      "name": "setAmpFactor",
      "description": "Changes the pools amplification factor. Can only be set by the contract owner.",
      "parameterDecorators": [
        {
          "name": "ampFactor_",
          "description": "new pool's amplification factor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDev(address)",
      "name": "setDev",
      "description": "Changes the contract dev. Can only be set by the contract owner.",
      "parameterDecorators": [
        {
          "name": "dev_",
          "description": "new contract dev address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFee(uint256,uint256)",
      "name": "setFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "lpDividendRatio_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "retentionRatio_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeTo(address)",
      "name": "setFeeTo",
      "description": "Changes the fee beneficiary. Can only be set by the contract owner. This value cannot be set to 0 to avoid unsettled fee.",
      "parameterDecorators": [
        {
          "name": "feeTo_",
          "description": "new fee beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setHaircutRate(uint256)",
      "name": "setHaircutRate",
      "description": "Changes the pools haircutRate. Can only be set by the contract owner.",
      "parameterDecorators": [
        {
          "name": "haircutRate_",
          "description": "new pool's haircutRate_.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMasterWombat(address)",
      "name": "setMasterWombat",
      "description": "",
      "parameterDecorators": [
        {
          "name": "masterWombat_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMintFeeThreshold(uint256)",
      "name": "setMintFeeThreshold",
      "description": "Set min fee to mint.",
      "parameterDecorators": [
        {
          "name": "mintFeeThreshold_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swap(address,address,uint256,uint256,address,uint256)",
      "name": "swap",
      "description": "Swap fromToken for toToken, ensures deadline and minimumToAmount and sends quoted amount to `to` address. This function assumes tax free token.",
      "parameterDecorators": [
        {
          "name": "fromToken",
          "description": "The token being inserted into Pool by user for swap.",
          "recommendedTypes": []
        },
        {
          "name": "toToken",
          "description": "The token wanted by user, leaving the Pool.",
          "recommendedTypes": []
        },
        {
          "name": "fromAmount",
          "description": "The amount of from token inserted.",
          "recommendedTypes": []
        },
        {
          "name": "minimumToAmount",
          "description": "The minimum amount that will be accepted by user as result.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The user receiving the result of swap.",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "The deadline to be respected.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "actualToAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "haircut",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tipBucketBalance(address)",
      "name": "tipBucketBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "balance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferTipBucket(address,uint256,address)",
      "name": "transferTipBucket",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "unpause pool, enabling certain operations.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpauseAsset(address)",
      "name": "unpauseAsset",
      "description": "unpause asset, enabling deposit and swap operations.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(address,uint256,uint256,address,uint256)",
      "name": "withdraw",
      "description": "Withdraws liquidity amount of asset to `to` address ensuring minimum amount required.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The token to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "liquidity",
          "description": "The liquidity to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "minimumAmount",
          "description": "The minimum amount that will be accepted by user.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The user receiving the withdrawal.",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "The deadline to be respected.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "The total amount withdrawn.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)",
      "name": "withdrawFromOtherAsset",
      "description": "Enables withdrawing liquidity from an asset using LP from a different asset.",
      "parameterDecorators": [
        {
          "name": "fromToken",
          "description": "The corresponding token user holds the LP (Asset) from.",
          "recommendedTypes": []
        },
        {
          "name": "toToken",
          "description": "The token wanting to be withdrawn (needs to be well covered).",
          "recommendedTypes": []
        },
        {
          "name": "liquidity",
          "description": "The liquidity to be withdrawn (in fromToken decimal).",
          "recommendedTypes": []
        },
        {
          "name": "minimumAmount",
          "description": "The minimum amount that will be accepted by user.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The user receiving the withdrawal.",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "The deadline to be respected.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "toAmount",
          "description": "The total amount withdrawn.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}