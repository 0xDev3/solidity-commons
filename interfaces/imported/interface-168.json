{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "swaps",
    "strategies"
  ],
  "name": "DCA",
  "description": "DCA This contract allows users to deposit one token and gradually swaps it for another one every day at the price it's trading at, allowing user to buy the target token using a Dollar-Cost Averaging (DCA) strategy. To perform the swaps, we aggregate the tokens for all the users and make one big swap instead of many small ones.",
  "eventDecorators": [
    {
      "signature": "BeneficiarySet(address)",
      "name": "BeneficiarySet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newBeneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EmergencyWithdrawal(address,uint256,address)",
      "name": "EmergencyWithdrawal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OracleSet(address)",
      "name": "OracleSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "oracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OracleUpdaterChanged(address)",
      "name": "OracleUpdaterChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "oracleUpdater",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OrderCreated(address,uint256,address,address,uint256,uint256,uint256)",
      "name": "OrderCreated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "userAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amountPerSwap",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "numberOfSwaps",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "startingPeriod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RemainingWithdrawal(address,uint256,address,uint256)",
      "name": "RemainingWithdrawal",
      "description": "Emitted when a user withdraws their principal early. ie. before it was swapped.",
      "parameterDecorators": [
        {
          "name": "userAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SwapExecuted(address,address,uint256,uint256,uint256)",
      "name": "SwapExecuted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sellAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buyAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "period",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SwappedWithdrawal(address,uint256,address,uint256)",
      "name": "SwappedWithdrawal",
      "description": "Emitted when a user withdraws the funds that were already swapped.",
      "parameterDecorators": [
        {
          "name": "userAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenPairInitialized(address,address)",
      "name": "TokenPairInitialized",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdateFeeNumerator(uint256,uint256)",
      "name": "UpdateFeeNumerator",
      "description": "",
      "parameterDecorators": [
        {
          "name": "feeNumerator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "protocolFeePercent",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "BLOCKS_PER_DAY()",
      "name": "BLOCKS_PER_DAY",
      "description": "Number of blocks in a day assuming 5 seconds per block. Works for the Celo blockchain.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "FEE_DENOMINATOR()",
      "name": "FEE_DENOMINATOR",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_FEE_NUMERATOR()",
      "name": "MAX_FEE_NUMERATOR",
      "description": "Upper limit of the fee that can be charged on swaps. Has to be divided by |FEE_DENOMINATOR|. Equivalent to 60bps.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiary()",
      "name": "beneficiary",
      "description": "Where to send the fees.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calculateAmountToWithdraw(tuple(address,address,uint256,uint256,uint256,uint256))",
      "name": "calculateAmountToWithdraw",
      "description": "Calculates hoy much |buyToken| is available to withdraw for a user order. Takes into account previous withdrawals and fee taken.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "sellToken",
              "description": "",
              "type": "address"
            },
            {
              "name": "buyToken",
              "description": "",
              "type": "address"
            },
            {
              "name": "amountPerSwap",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "numberOfSwaps",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "startingPeriod",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "lastPeriodWithdrawal",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "amountToWithdraw",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "finalPeriod",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createOrder(address,address,uint256,uint256)",
      "name": "createOrder",
      "description": "Starts a new DCA position for the |msg.sender|. When creating a new position, we add the |_amountPerSwap| to the |amountToSwap| variable on |SwapState| and to |amountToReduce| on the final period's |PeriodSwapState|. Thus, the amount to swap daily will increase between the current period and the final one.",
      "parameterDecorators": [
        {
          "name": "_sellToken",
          "description": "token to sell on each period.",
          "recommendedTypes": []
        },
        {
          "name": "_buyToken",
          "description": "token to buy on each period.",
          "recommendedTypes": []
        },
        {
          "name": "_amountPerSwap",
          "description": "amount of _sellToken to sell each period.",
          "recommendedTypes": []
        },
        {
          "name": "_numberOfSwaps",
          "description": "number of periods to do the swapping.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdrawal(address,address)",
      "name": "emergencyWithdrawal",
      "description": "In case of emergency, in the beginning the owner can remove the funds to return them to users. Should be turned off before receiving any meaningful deposits by calling |turnOffGuardrails|.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeOrder(address,address,uint256,address,bytes)",
      "name": "executeOrder",
      "description": "Executes a swap between two tokens. The period must be the last executed + 1. The swapping is done by the |_swapper|. We calculate the required exchange rate using an oracle, send them the funds to swap and expect them to return the calculated return amount. This allows us to more easily add pairs since we just need the oracle support, not the exact routes to follow. Callers are incentivized to call this function for the arbitrage opportunity. In other words, the general logic followed here is: - Calculate and send the fee to the |beneficiary|. - Calculate the exchange rate using |oracle|. - Send the swap amount to |_swapper| can call its |swap| function. - Check that it returned the required funds taking the exchange rate into account.",
      "parameterDecorators": [
        {
          "name": "_sellToken",
          "description": "token to sell on the swap.",
          "recommendedTypes": []
        },
        {
          "name": "_buyToken",
          "description": "token to buy on the swap.",
          "recommendedTypes": []
        },
        {
          "name": "_period",
          "description": "period to perform the swap for. It has only one possible valid value, so it is not strictly necessary.",
          "recommendedTypes": []
        },
        {
          "name": "_swapper",
          "description": "address that will perform the swap.",
          "recommendedTypes": []
        },
        {
          "name": "_params",
          "description": "params to send to |_swapper| for performing the swap.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feeNumerator()",
      "name": "feeNumerator",
      "description": "Active fees on swaps. To be used together with |FEE_DENOMINATOR|.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentPeriod()",
      "name": "getCurrentPeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "period",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPeriodSwapState(address,address,uint256)",
      "name": "getPeriodSwapState",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "period",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSwapState(address,address)",
      "name": "getSwapState",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserOrders(address)",
      "name": "getUserOrders",
      "description": "",
      "parameterDecorators": [
        {
          "name": "userAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "guardrailsOn()",
      "name": "guardrailsOn",
      "description": "If true, the owner can withdraw funds. Should be turned off after there is sufficient confidence in the code, for example after audits.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracle()",
      "name": "oracle",
      "description": "Oracle to use to get the amount to receive on swaps.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracleUpdater()",
      "name": "oracleUpdater",
      "description": "Address that can update the oracle. Matches the owner at first, but should be operated by the community after a while.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "orders(address,uint256)",
      "name": "orders",
      "description": "A list of |UserOrder| for each user address.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amountPerSwap",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "numberOfSwaps",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "startingPeriod",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastPeriodWithdrawal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "periodsSwapStates(address,address,uint256)",
      "name": "periodsSwapStates",
      "description": "Contains information related to swaps for a (sellToken, buyToken, period) tuple. See |PeriodSwapState| for more info.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "exchangeRate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountToReduce",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "feeNumerator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "protocolFeePercent()",
      "name": "protocolFeePercent",
      "description": "|protocolFeeNumerator| / 100 of the fee will be sent to the treasury and the rest to the swapper.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBeneficiary(address)",
      "name": "setBeneficiary",
      "description": "Update the beneficiary.",
      "parameterDecorators": [
        {
          "name": "_beneficiary",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeNumerator(uint256,uint256)",
      "name": "setFeeNumerator",
      "description": "Update the fee.",
      "parameterDecorators": [
        {
          "name": "_feeNumerator",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_protocolFeePercent",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOracle(address)",
      "name": "setOracle",
      "description": "Update the oracle.",
      "parameterDecorators": [
        {
          "name": "_newOracle",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOracleUpdater(address)",
      "name": "setOracleUpdater",
      "description": "Change the address that can update the oracle.",
      "parameterDecorators": [
        {
          "name": "_newOracleUpdater",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapStates(address,address)",
      "name": "swapStates",
      "description": "Contains the state of a token pair swaps. For a given (sellToken, buyToken) it contains how much it should swap in the next period and when the last period was.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountToSwap",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastSwapPeriod",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "turnOffGuardrails()",
      "name": "turnOffGuardrails",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAll(uint256)",
      "name": "withdrawAll",
      "description": "Withdraw the funds that were already swapped for the caller user AND the funds that were not swapped yet, effectively terminating the position.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "the index of the |orders| array for msg.sender.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawSwapped(address,uint256)",
      "name": "withdrawSwapped",
      "description": "Withdraw the funds that were already swapped.",
      "parameterDecorators": [
        {
          "name": "userAddress",
          "description": "the user to withdraw for.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "the index of the |orders| array for |userAddress|.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}