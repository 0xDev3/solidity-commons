{
  "schema": "../schema.json",
  "tags": [
    "swaps",
    "uniswap"
  ],
  "name": "UniswapAnchoredView",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AnchorPriceUpdated(string,uint256,uint256,uint256)",
      "name": "AnchorPriceUpdated",
      "description": "The event emitted when anchor price is updated.",
      "parameterDecorators": [
        {
          "name": "symbol",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "anchorPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PriceGuarded(string,uint256,uint256)",
      "name": "PriceGuarded",
      "description": "The event emitted when new prices are posted but the stored price is not updated due to the anchor.",
      "parameterDecorators": [
        {
          "name": "symbol",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reporter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "anchor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PriceUpdated(string,uint256)",
      "name": "PriceUpdated",
      "description": "The event emitted when the stored price is updated.",
      "parameterDecorators": [
        {
          "name": "symbol",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ReporterInvalidated(address)",
      "name": "ReporterInvalidated",
      "description": "The event emitted when reporter invalidates itself.",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UniswapWindowUpdated(bytes32,uint256,uint256,uint256,uint256)",
      "name": "UniswapWindowUpdated",
      "description": "The event emitted when the uniswap window changes.",
      "parameterDecorators": [
        {
          "name": "symbolHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "anchorPeriod()",
      "name": "anchorPeriod",
      "description": "The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ethBaseUnit()",
      "name": "ethBaseUnit",
      "description": "The number of wei in 1 ETH.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "expScale()",
      "name": "expScale",
      "description": "A common scaling factor to maintain precision.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "freshenPrices(string[])",
      "name": "freshenPrices",
      "description": "Post open oracle reporter prices, and recalculate stored price by comparing to anchor. We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.",
      "parameterDecorators": [
        {
          "name": "symbols",
          "description": "The symbols to compare to anchor for authoritative reading.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAssetPrice(address)",
      "name": "getAssetPrice",
      "description": "Get the price an asset.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The asset to get the price of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The asset price mantissa (scaled by 1e18). Zero means the price is unavailable.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAssetPriceUpdateTimestamp(address)",
      "name": "getAssetPriceUpdateTimestamp",
      "description": "Get the price update timestamp for the asset.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The asset address for price update timestamp retrieval.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Last price update timestamp for the asset.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenConfig(uint256)",
      "name": "getTokenConfig",
      "description": "Get the i-th config, according to the order they were passed in originally.",
      "parameterDecorators": [
        {
          "name": "i",
          "description": "The index of the config to get.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The config object.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenConfigBySymbol(string)",
      "name": "getTokenConfigBySymbol",
      "description": "Get the config for symbol.",
      "parameterDecorators": [
        {
          "name": "symbol",
          "description": "The symbol of the config to get.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The config object.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenConfigBySymbolHash(bytes32)",
      "name": "getTokenConfigBySymbolHash",
      "description": "Get the config for the symbolHash.",
      "parameterDecorators": [
        {
          "name": "symbolHash",
          "description": "The keccack256 of the symbol of the config to get.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The config object.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenConfigByUnderlying(address)",
      "name": "getTokenConfigByUnderlying",
      "description": "Get the config for an underlying asset.",
      "parameterDecorators": [
        {
          "name": "underlying",
          "description": "The address of the underlying asset of the config to get.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The config object.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUnderlyingPrice(address)",
      "name": "getUnderlyingPrice",
      "description": "Get the underlying price of a cToken. Implements the PriceOracle interface for Compound v2.",
      "parameterDecorators": [
        {
          "name": "cToken",
          "description": "The cToken address for price retrieval.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Price denominated in USD, with 18 decimals, for the given cToken address.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUnderlyingPriceUpdateTimestamp(address)",
      "name": "getUnderlyingPriceUpdateTimestamp",
      "description": "OLA_ADDITIONS : This functionGet the price update timestamp for the cToken underlying. Implements the PriceOracle interface for Compound v2.",
      "parameterDecorators": [
        {
          "name": "cToken",
          "description": "The cToken address for price update timestamp retrieval.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Last price update timestamp for the cToken underlying asset.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "invalidateReporter(bytes,bytes)",
      "name": "invalidateReporter",
      "description": "Invalidate the reporter, and fall back to using anchor directly in all cases. Only the reporter may sign a message which allows it to invalidate itself. To be used in cases of emergency, if the reporter thinks their key may be compromised.",
      "parameterDecorators": [
        {
          "name": "message",
          "description": "The data that was presumably signed.",
          "recommendedTypes": []
        },
        {
          "name": "signature",
          "description": "The fingerprint of the data + private key.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lowerBoundAnchorRatio()",
      "name": "lowerBoundAnchorRatio",
      "description": "The lowest ratio of the new price to the anchor price that will still trigger the price to be updated.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxTokens()",
      "name": "maxTokens",
      "description": "The max number of tokens this contract is hardcoded to support.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newObservations(bytes32)",
      "name": "newObservations",
      "description": "The new observation for each symbolHash.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "acc",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numTokens()",
      "name": "numTokens",
      "description": "The number of tokens this contract actually supports.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oldObservations(bytes32)",
      "name": "oldObservations",
      "description": "The old observation for each symbolHash.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "acc",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "postPrices(bytes[],bytes[],string[])",
      "name": "postPrices",
      "description": "Post open oracle reporter prices, and recalculate stored price by comparing to anchor. We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.",
      "parameterDecorators": [
        {
          "name": "messages",
          "description": "The messages to post to the oracle.",
          "recommendedTypes": []
        },
        {
          "name": "signatures",
          "description": "The signatures for the corresponding messages.",
          "recommendedTypes": []
        },
        {
          "name": "symbols",
          "description": "The symbols to compare to anchor for authoritative reading.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "price(string)",
      "name": "price",
      "description": "Get the official price for a symbol.",
      "parameterDecorators": [
        {
          "name": "symbol",
          "description": "The symbol to fetch the price of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Price denominated in USD, with 6 decimals.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "priceData()",
      "name": "priceData",
      "description": "The Open Oracle Price Data contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prices(bytes32)",
      "name": "prices",
      "description": "Official prices by symbol hash.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pricesLastUpdate(bytes32)",
      "name": "pricesLastUpdate",
      "description": "Last 'Official price' update timestamp OLA_ADDITIONS : This field.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "referenceAssetHash()",
      "name": "referenceAssetHash",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "referenceAssetSymbol()",
      "name": "referenceAssetSymbol",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registry()",
      "name": "registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reporter()",
      "name": "reporter",
      "description": "The Open Oracle Reporter.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reporterInvalidated()",
      "name": "reporterInvalidated",
      "description": "Circuit breaker for using anchor price oracle directly, ignoring reporter.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "source(bytes,bytes)",
      "name": "source",
      "description": "Recovers the source address which signed a message. Comparing to a claimed address would add nothing, as the caller could simply perform the recover and claim that address.",
      "parameterDecorators": [
        {
          "name": "message",
          "description": "The data that was presumably signed.",
          "recommendedTypes": []
        },
        {
          "name": "signature",
          "description": "The fingerprint of the data + private key.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The source address which signed the message, presumably.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "upperBoundAnchorRatio()",
      "name": "upperBoundAnchorRatio",
      "description": "The highest ratio of the new price to the anchor price that will still trigger the price to be updated.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "usdBaseUnit()",
      "name": "usdBaseUnit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}