{
  "schema": "../schema.json",
  "tags": [
    "strategies",
    "yield"
  ],
  "name": "YieldWolf",
  "description": "YieldWolf Staking Contract. handles deposits, withdraws, strategy execution and bounty rewards.",
  "eventDecorators": [
    {
      "signature": "Add(address,address)",
      "name": "Add",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "stakeToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "strategy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AddRule(address,uint256)",
      "name": "AddRule",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Deposit(address,uint256,uint256)",
      "name": "Deposit",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Earn(address,uint256,uint256)",
      "name": "Earn",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "bountyReward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExecuteRule(uint256,address,uint256)",
      "name": "ExecuteRule",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "ruleIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RemoveRule(address,uint256,uint256)",
      "name": "RemoveRule",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "ruleIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetDepositFee(uint256)",
      "name": "SetDepositFee",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "depositFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetFeeAddress(address)",
      "name": "SetFeeAddress",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "feeAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetFeeAddressSetter(address)",
      "name": "SetFeeAddressSetter",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "feeAddressSetter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetOperator(address,bool)",
      "name": "SetOperator",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "isOperator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetPerformanceFee(uint256)",
      "name": "SetPerformanceFee",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "performanceFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetPerformanceFeeBountyPct(uint256)",
      "name": "SetPerformanceFeeBountyPct",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "performanceFeeBountyPct",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetRuleFee(uint256)",
      "name": "SetRuleFee",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "ruleFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetRuleFeeBountyPct(uint256)",
      "name": "SetRuleFeeBountyPct",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "ruleFeeBountyPct",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetStrategyExtraEarnTokens(address,address[])",
      "name": "SetStrategyExtraEarnTokens",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "_strategy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_extraEarnTokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetStrategyRouter(address,address)",
      "name": "SetStrategyRouter",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "strategy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "router",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetStrategySwapPath(address,address,address,address[])",
      "name": "SetStrategySwapPath",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "_strategy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_token0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_token1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetStrategySwapRouterEnabled(address,bool)",
      "name": "SetStrategySwapRouterEnabled",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "strategy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "enabled",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetWithdrawFee(uint256)",
      "name": "SetWithdrawFee",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "withdrawFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdraw(address,address,uint256,uint256)",
      "name": "Withdraw",
      "description": "Emitted when a Bank's capital is rebalanced.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "add(address)",
      "name": "add",
      "description": "adds a new pool with a given strategy. can only be called by an operator.",
      "parameterDecorators": [
        {
          "name": "_strategy",
          "description": "address of the strategy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addMany(address[])",
      "name": "addMany",
      "description": "adds multiple new pools. helper to add many pools at once.",
      "parameterDecorators": [
        {
          "name": "_strategies",
          "description": "array of strategy addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addRule(uint256,address,uint256[],address[],address,uint256[],address[])",
      "name": "addRule",
      "description": "adds a new rule. each user can have multiple rules for each pool.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        },
        {
          "name": "_condition",
          "description": "address of the condition contract.",
          "recommendedTypes": []
        },
        {
          "name": "_conditionIntInputs",
          "description": "array of integer inputs to be sent to the condition.",
          "recommendedTypes": []
        },
        {
          "name": "_conditionAddrInputs",
          "description": "array of address inputs to be sent to the condition.",
          "recommendedTypes": []
        },
        {
          "name": "_action",
          "description": "address of the action contract.",
          "recommendedTypes": []
        },
        {
          "name": "_actionIntInputs",
          "description": "array of integer inputs to be sent to the action.",
          "recommendedTypes": []
        },
        {
          "name": "_actionAddrInputs",
          "description": "array of address inputs to be sent to the action.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "checkRule(uint256,address,uint256)",
      "name": "checkRule",
      "description": "checks wheter a rule passes its condition.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "_ruleIndex",
          "description": "the index of the rule.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(uint256,uint256)",
      "name": "deposit",
      "description": "transfers tokens from the user and stakes them in the underlying farm. tokens are transferred from msg.sender directly to the strategy.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        },
        {
          "name": "_depositAmount",
          "description": "amount of tokens to transfer from msg.sender.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositFee()",
      "name": "depositFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositTo(uint256,uint256,address)",
      "name": "depositTo",
      "description": "deposits stake tokens on behalf of another user.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        },
        {
          "name": "_depositAmount",
          "description": "amount of tokens to transfer from msg.sender.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "address of the beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "earn(uint256)",
      "name": "earn",
      "description": "runs the strategy and pays the bounty reward.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "earnMany(uint256[])",
      "name": "earnMany",
      "description": "runs multiple strategies and pays multiple rewards.",
      "parameterDecorators": [
        {
          "name": "_pids",
          "description": "array of pool ids.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdraw(uint256)",
      "name": "emergencyWithdraw",
      "description": "withdraws all the token from msg.sender without harvesting first. only for emergencies.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeRule(uint256,address,uint256)",
      "name": "executeRule",
      "description": "executes the rule action if the condition passes and sends the bounty reward to msg.sender.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "_ruleIndex",
          "description": "the index of the rule.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feeAddress()",
      "name": "feeAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feeAddressSetter()",
      "name": "feeAddressSetter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "operators(address)",
      "name": "operators",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "performanceFee()",
      "name": "performanceFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "performanceFeeBountyPct()",
      "name": "performanceFeeBountyPct",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolInfo(uint256)",
      "name": "poolInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "stakeToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "strategy",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolLength()",
      "name": "poolLength",
      "description": "returns how many pools have been added.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeRule(uint256,uint256)",
      "name": "removeRule",
      "description": "removes a given rule.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        },
        {
          "name": "_ruleIndex",
          "description": "the index of the rule in the user info for the given pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ruleFee()",
      "name": "ruleFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ruleFeeBountyPct()",
      "name": "ruleFeeBountyPct",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setDepositFee(uint256)",
      "name": "setDepositFee",
      "description": "updates the deposit fee. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_depositFee",
          "description": "new deposit fee in basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeAddress(address)",
      "name": "setFeeAddress",
      "description": "updates the fee address. can only be called by the fee address setter.",
      "parameterDecorators": [
        {
          "name": "_feeAddress",
          "description": "new fee address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeAddressSetter(address)",
      "name": "setFeeAddressSetter",
      "description": "updates the fee address setter. can only be called by the previous fee address setter.",
      "parameterDecorators": [
        {
          "name": "_feeAddressSetter",
          "description": "new fee address setter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOperator(address,bool)",
      "name": "setOperator",
      "description": "adds or removes an operator. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "address of the operator.",
          "recommendedTypes": []
        },
        {
          "name": "_isOperator",
          "description": "whether the given address will be set as an operator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPerformanceFee(uint256)",
      "name": "setPerformanceFee",
      "description": "updates the performance fee. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_performanceFee",
          "description": "new performance fee fee in basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPerformanceFeeBountyPct(uint256)",
      "name": "setPerformanceFeeBountyPct",
      "description": "updates the percentage of the performance fee sent to the bounty hunter. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_performanceFeeBountyPct",
          "description": "percentage of the performance fee for the bounty hunter in basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRuleFee(uint256)",
      "name": "setRuleFee",
      "description": "updates the rule execution fee. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_ruleFee",
          "description": "new rule fee fee in basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRuleFeeBountyPct(uint256)",
      "name": "setRuleFeeBountyPct",
      "description": "updates the percentage of the rule execution fee sent to the bounty hunter. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_ruleFeeBountyPct",
          "description": "percentage of the rule execution fee for the bounty hunter in basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStrategyExtraEarnTokens(address,address[])",
      "name": "setStrategyExtraEarnTokens",
      "description": "updates the swap path for a given pair. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_strategy",
          "description": "address of the strategy.",
          "recommendedTypes": []
        },
        {
          "name": "_extraEarnTokens",
          "description": "list of extra earn tokens for farms rewarding more than one token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStrategySwapPath(address,address,address,address[])",
      "name": "setStrategySwapPath",
      "description": "updates the swap path for a given pair. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_strategy",
          "description": "address of the strategy.",
          "recommendedTypes": []
        },
        {
          "name": "_token0",
          "description": "address of token swap from.",
          "recommendedTypes": []
        },
        {
          "name": "_token1",
          "description": "address of token swap to.",
          "recommendedTypes": []
        },
        {
          "name": "_path",
          "description": "swap path from token0 to token1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStrategySwapRouterEnabled(address,bool)",
      "name": "setStrategySwapRouterEnabled",
      "description": "updates the swap router used by a given strategy. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_strategy",
          "description": "address of the strategy.",
          "recommendedTypes": []
        },
        {
          "name": "_enabled",
          "description": "whether to enable or disable the swap router.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWithdrawFee(uint256)",
      "name": "setWithdrawFee",
      "description": "updates the withdraw fee. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_withdrawFee",
          "description": "new withdraw fee in basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakedTokens(uint256,address)",
      "name": "stakedTokens",
      "description": "returns the amount of staked tokens by a user.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "strategyExists(address)",
      "name": "strategyExists",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userInfo(uint256,address)",
      "name": "userInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "shares",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "userPoolRule(uint256,address,uint256)",
      "name": "userPoolRule",
      "description": "returns a rule by pid, user and index. helper for iterating over all the rules.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "_ruleIndex",
          "description": "the index of the rule.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "rule",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "userRuleLength(uint256,address)",
      "name": "userRuleLength",
      "description": "returns the number of rule a user has for a given pool.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "userStakedPoolAt(address,uint256)",
      "name": "userStakedPoolAt",
      "description": "returns the pid of a pool in which the user has tokens staked. helper for iterating over the array of user staked pools.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "the index in the array of user staked pools.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "userStakedPoolLength(address)",
      "name": "userStakedPoolLength",
      "description": "returns in how many pools a user has tokens staked.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256,uint256)",
      "name": "withdraw",
      "description": "unstakes tokens from the underlying farm and transfers them to the user. tokens are transferred directly from the strategy to the user.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "the pool id.",
          "recommendedTypes": []
        },
        {
          "name": "_withdrawAmount",
          "description": "maximum amount of tokens to transfer to msg.sender.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawFee()",
      "name": "withdrawFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}