{
  "schema": "../schema.json",
  "tags": [],
  "name": "StreamingFarm",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RewardStream(uint256,address,uint256)",
      "name": "RewardStream",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "flowRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Stake(address,uint256,uint256,uint256)",
      "name": "Stake",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "referenceValue",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unstake(address,uint256)",
      "name": "Unstake",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DAYS()",
      "name": "DAYS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "INTEREST_GRANULARITY()",
      "name": "INTEREST_GRANULARITY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_getAvailableLevel(uint256)",
      "name": "_getAvailableLevel",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_getInterestByLevel(uint8)",
      "name": "_getInterestByLevel",
      "description": "",
      "parameterDecorators": [
        {
          "name": "level",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "canUpgradeLevel(uint256)",
      "name": "canUpgradeLevel",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the reward level for the given NFT can be upgraded.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "farmNFT()",
      "name": "farmNFT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNFTInfo(uint256)",
      "name": "getNFTInfo",
      "description": "Returns information about current and future set and achievable rewards for an NFT.",
      "parameterDecorators": [
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "creationTimestamp",
          "description": "Timestamp of NFT creation.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "stakeAmount",
          "description": "Amount of LP tokens staked.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "referenceValue",
          "description": "Amount of tokens the stake represented at the time of staking.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "currentOwner",
          "description": "The current owner of the NFT.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "setLevel",
          "description": "The currently set reward level.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "availableLevel",
          "description": "The highest reward level currently available. Can be equal or greater than setLevel.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "nextLevelTimestamp",
          "description": "The timestamp when the next level (availableLevel + 1) is unlocked. If nextLevelTimestamp is 0, availableLevel is already the highest level.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNftTokenURI(uint256)",
      "name": "getNftTokenURI",
      "description": "the FarmNFT forwards calls to tokenURI to the owner through this method.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "uri",
          "description": "The URI to be provided by the NFTs tokenURI method. If empty, the NFT contract may provide a fallback value.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxAggregateFlowrate()",
      "name": "maxAggregateFlowrate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the max flowrate the farm is allowed to reach (sum of all outgoing reward streams). This is enforced for the \"worst case scenario\" of all stakes reaching the max level.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onNFTTransfer(address,address,uint256)",
      "name": "onNFTTransfer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "remainingAvailableFlowrate()",
      "name": "remainingAvailableFlowrate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the flowrate available before reaching the max allowed aggregated flowrate.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewardSchedule()",
      "name": "rewardSchedule",
      "description": "the reward schedule configured for the farm.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "a 2-dimensional array with the first element being the min age in seconds for reaching that level and the second element being the interest per week per million of reference value. note that level 1 corresponds to index 0 of the schedule.",
          "recommendedTypes": [],
          "solidityType": "uint32[][]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardToken()",
      "name": "rewardToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setMaxAggregateFlowrate(uint256)",
      "name": "setMaxAggregateFlowrate",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newValue",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stake(uint256)",
      "name": "stake",
      "description": "Fetches amount of LP tokens from the sender, then mints an NFT and starts a reward stream to the sender. Uses ERC20.transferFrom() to fetch the LP tokens, the sender thus needs to approve beforehand. The id of the minted NFT is provided in the emitted 'Stake' event. It uniquely identifies this stake and is needed for all further interactions.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The id of the NFT minted representing the stake - relevant if triggered from a contract. Throws if the given amount of stake tokens can't be fetched or if the reward stream can't be opened or if the farm has been shut down or if adding the stake could lead to exceed the max. aggregate flowrate.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakingToken()",
      "name": "stakingToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unstake(uint256)",
      "name": "unstake",
      "description": "Burns the NFT, stops the reward stream and returns the associated LP tokens. Unstaking does not affect other stakes the same sender account may have in the system. The caller needs to be the NFT owner which may or may not be the same account having minted the NFT.",
      "parameterDecorators": [
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeLevel(uint256)",
      "name": "upgradeLevel",
      "description": "Upgrades the reward level to the highest currently available. This is permissionless.",
      "parameterDecorators": [
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawERC20Tokens(address,address,uint256)",
      "name": "withdrawERC20Tokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}