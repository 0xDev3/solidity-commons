{
  "schema": "../schema.json",
  "tags": [
    "oracles"
  ],
  "name": "MockOracleAncillary",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "getCurrentTime()",
      "name": "getCurrentTime",
      "description": "Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint for the current Testable timestamp.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPendingQueries()",
      "name": "getPendingQueries",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPrice(bytes32,uint256,bytes)",
      "name": "getPrice",
      "description": "Gets the price for `identifier` and `time` if it has already been requested and resolved. If the price is not available, the method reverts.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "recommendedTypes": []
        },
        {
          "name": "time",
          "description": "unix timestamp for the price request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "int256 representing the resolved price for the given identifier and timestamp.",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasPrice(bytes32,uint256,bytes)",
      "name": "hasPrice",
      "description": "Whether the price for `identifier` and `time` is available. Time must be in the past and the identifier must be supported.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "recommendedTypes": []
        },
        {
          "name": "time",
          "description": "unix timestamp for the price request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool if the DVM has resolved to a price for the given identifier and timestamp.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pushPrice(bytes32,uint256,bytes,int256)",
      "name": "pushPrice",
      "description": "",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "time",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestPrice(bytes32,uint256,bytes)",
      "name": "requestPrice",
      "description": "Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair. Time must be in the past and the identifier must be supported.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "recommendedTypes": []
        },
        {
          "name": "time",
          "description": "unix timestamp for the price request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCurrentTime(uint256)",
      "name": "setCurrentTime",
      "description": "Sets the current time. Will revert if not running in test mode.",
      "parameterDecorators": [
        {
          "name": "time",
          "description": "timestamp to set current Testable time to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "timerAddress()",
      "name": "timerAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}