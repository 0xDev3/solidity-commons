{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "swaps",
    "uniswap"
  ],
  "name": "ZapHandlerV1",
  "description": "",
  "eventDecorators": [
    {
      "signature": "FactoryRemoved(address)",
      "name": "FactoryRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "factory",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "FactorySet(address,bool,uint32,uint32)",
      "name": "FactorySet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MainTokenSet(address)",
      "name": "MainTokenSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "mainToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PendingOwnershipTransferred(address,address)",
      "name": "PendingOwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousPendingOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newPendingOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RouteAdded(address,address,bool)",
      "name": "RouteAdded",
      "description": "",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "alreadyExists",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "convertERC20(address,address,address,uint256)",
      "name": "convertERC20",
      "description": "Swap `amount` of `fromToken` to `toToken` and send them to the recipient.The `fromToken` and `toToken` arguments can be AMM pairs.Requires `msg.sender` to be a Zap instance. Switches over the different routing types to let the specific handler functions take care of them.",
      "parameterDecorators": [
        {
          "name": "fromToken",
          "description": "The token to take from `msg.sender` and exchange for `toToken`.",
          "recommendedTypes": []
        },
        {
          "name": "toToken",
          "description": "The token that will be bought and sent to the recipient.",
          "recommendedTypes": []
        },
        {
          "name": "recipient",
          "description": "The destination address to receive the `toToken`.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount that the zapper should take from the `msg.sender` and swap.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "factories(address)",
      "name": "factories",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "factory",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amountsOutNominator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "amountsOutDenominator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "factoryLength()",
      "name": "factoryLength",
      "description": "Returns the total number of registered factories.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFactory(uint256)",
      "name": "getFactory",
      "description": "Gets a registered factory at a specific index, use factoryLength() for the upper bound.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mainToken()",
      "name": "mainToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pairInfo(address)",
      "name": "pairInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "token0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "token1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingOwner()",
      "name": "pendingOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeFactory(address)",
      "name": "removeFactory",
      "description": "Removes a factory from the list of registered factories.",
      "parameterDecorators": [
        {
          "name": "factory",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "routeLength(address,address)",
      "name": "routeLength",
      "description": "Returns the number of steps on the route from token0 to token1.",
      "parameterDecorators": [
        {
          "name": "token0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "token1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "routes(address,address,uint256)",
      "name": "routes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "pair",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amountsOutNominator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "amountsOutDenominator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setFactory(address,uint32,uint32)",
      "name": "setFactory",
      "description": "Adds a factory to the list of registered factories that can be used within RouteSpec.",
      "parameterDecorators": [
        {
          "name": "factory",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountsOutNominator",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountsOutDenominator",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMainToken(address)",
      "name": "setMainToken",
      "description": "Updates the main token, this is used for automatic route tunneling.",
      "parameterDecorators": [
        {
          "name": "_mainToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPendingOwner(address)",
      "name": "setPendingOwner",
      "description": "Sets the pendingOwner, ownership is only transferred when they call transferOwnership. Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newPendingOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRoute(address,address,address[])",
      "name": "setRoute",
      "description": "Generates and saves a route (and inverse of this route) based on the RouteSpec encoded `inputRoute`.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "the token to swap from.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "the token to swap to.",
          "recommendedTypes": []
        },
        {
          "name": "inputRoute",
          "description": "A route in RouteSpec notation indicating the swap steps and the uniswap like factories these swaps should be made.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenSwapType(address,address)",
      "name": "tokenSwapType",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership()",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to the pendingOwner. Can only be called by the pendingOwner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}