{
  "schema": "../schema.json",
  "tags": [],
  "name": "ACOFactoryV3",
  "description": "",
  "eventDecorators": [
    {
      "signature": "NewAcoToken(address,address,bool,uint256,uint256,address,address)",
      "name": "NewAcoToken",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "underlying",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "strikeAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "isCall",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "strikePrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "expiryTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "acoToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "acoTokenImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetAcoFee(uint256,uint256)",
      "name": "SetAcoFee",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "previousAcoFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAcoFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAcoFeeDestination(address,address)",
      "name": "SetAcoFeeDestination",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "previousAcoFeeDestination",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAcoFeeDestination",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAcoTokenImplementation(address,address)",
      "name": "SetAcoTokenImplementation",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "previousAcoTokenImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAcoTokenImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetFactoryAdmin(address,address)",
      "name": "SetFactoryAdmin",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "previousFactoryAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newFactoryAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetOperator(address,bool,bool)",
      "name": "SetOperator",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousPermission",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newPermission",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acoFee()",
      "name": "acoFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acoFeeDestination()",
      "name": "acoFeeDestination",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acoTokenData(address)",
      "name": "acoTokenData",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "underlying",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "strikeAsset",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "isCall",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "strikePrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "expiryTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acoTokenImplementation()",
      "name": "acoTokenImplementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createAcoToken(address,address,bool,uint256,uint256,uint256)",
      "name": "createAcoToken",
      "description": "Function to create a new ACO token. It deploys a minimal proxy for the ACO token implementation address.",
      "parameterDecorators": [
        {
          "name": "underlying",
          "description": "Address of the underlying asset (0x0 for Ethereum).",
          "recommendedTypes": []
        },
        {
          "name": "strikeAsset",
          "description": "Address of the strike asset (0x0 for Ethereum).",
          "recommendedTypes": []
        },
        {
          "name": "isCall",
          "description": "Whether the ACO token is the Call type.",
          "recommendedTypes": []
        },
        {
          "name": "strikePrice",
          "description": "The strike price with the strike asset precision.",
          "recommendedTypes": []
        },
        {
          "name": "expiryTime",
          "description": "The UNIX time for the ACO token expiration.",
          "recommendedTypes": []
        },
        {
          "name": "maxExercisedAccounts",
          "description": "The maximum number of accounts that can be exercised by transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The created ACO token address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "factoryAdmin()",
      "name": "factoryAdmin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "init(address,address,uint256,address)",
      "name": "init",
      "description": "Function to initialize the contract. It should be called through the `data` argument when creating the proxy. It must be called only once. The `assert` is to guarantee that behavior.",
      "parameterDecorators": [
        {
          "name": "_factoryAdmin",
          "description": "Address of the factory admin.",
          "recommendedTypes": []
        },
        {
          "name": "_acoTokenImplementation",
          "description": "Address of the ACO token implementation.",
          "recommendedTypes": []
        },
        {
          "name": "_acoFee",
          "description": "Value of the ACO fee.",
          "recommendedTypes": []
        },
        {
          "name": "_acoFeeDestination",
          "description": "Address of the ACO fee destination.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "operators(address)",
      "name": "operators",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAcoFee(uint256)",
      "name": "setAcoFee",
      "description": "Function to set the ACO fee. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newAcoFee",
          "description": "Value of the new ACO fee. It is a percentage value (100000 is 100%).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoFeeDestination(address)",
      "name": "setAcoFeeDestination",
      "description": "Function to set the ACO destination address. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newAcoFeeDestination",
          "description": "Address of the new ACO destination.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoTokenImplementation(address)",
      "name": "setAcoTokenImplementation",
      "description": "Function to set the ACO token implementation address. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newAcoTokenImplementation",
          "description": "Address of the new ACO token implementation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFactoryAdmin(address)",
      "name": "setFactoryAdmin",
      "description": "Function to set the factory admin address. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newFactoryAdmin",
          "description": "Address of the new factory admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOperator(address,bool)",
      "name": "setOperator",
      "description": "Function to set the operator permission.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "Address of the operator.",
          "recommendedTypes": []
        },
        {
          "name": "newPermission",
          "description": "Whether the operator will be authorized.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}