{
  "schema": "../schema.json",
  "tags": [
    "voting",
    "voting"
  ],
  "name": "Governance",
  "description": "Governance contract.",
  "eventDecorators": [
    {
      "signature": "CommunityRewardChanged(uint256)",
      "name": "CommunityRewardChanged",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "communityReward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExecutorAuthorized(address)",
      "name": "ExecutorAuthorized",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "executor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExecutorUnauthorized(address)",
      "name": "ExecutorUnauthorized",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "executor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GovernanceRewardChanged(uint256)",
      "name": "GovernanceRewardChanged",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "governanceReward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GovernanceStrategyChanged(address,address)",
      "name": "GovernanceStrategyChanged",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "newStrategy",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "initiatorChange",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProposalCanceled(uint256)",
      "name": "ProposalCanceled",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalCreated(uint256,address,address,address[],uint256[],string[],bytes[],uint256,uint256,uint256,address,bytes32)",
      "name": "ProposalCreated",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "creator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "executor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "targets",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "values",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "signatures",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "calldatas",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "startTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "endTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "executionTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "strategy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ipfsHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalExecuted(uint256,address)",
      "name": "ProposalExecuted",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "initiatorExecution",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "VoteEmitted(uint256,address,bool,uint256)",
      "name": "VoteEmitted",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VotingDelayChanged(uint256,address)",
      "name": "VotingDelayChanged",
      "description": "To call when there is consensus on final result.",
      "parameterDecorators": [
        {
          "name": "newVotingDelay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "initiatorChange",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "abdicate()",
      "name": "abdicate",
      "description": "can be called only by _guardian*. Let the guardian abdicate from its priviledged rights. Set address of _guardian as zero address.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorizeExecutors(address[])",
      "name": "authorizeExecutors",
      "description": "owner should be a executor, so needs to make a proposal. Add new addresses to the list of authorized executors, allowed to call by onlyOwner.",
      "parameterDecorators": [
        {
          "name": "executors",
          "description": "list of new addresses to be authorized executors*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelProposal(uint256)",
      "name": "cancelProposal",
      "description": "Cancels a Proposal. - Callable by the _guardian with relaxed conditions, or by anybody if the conditions of cancellation on the executor are fulfilled, hence is the creator will not hold the proposionThreshold on his wallet.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "id of the proposal*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "communityReward()",
      "name": "communityReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createProposal(address,address[],uint256[],string[],bytes[],bytes32)",
      "name": "createProposal",
      "description": "Creates a Proposal (needs Voting Power of creator > Threshold).",
      "parameterDecorators": [
        {
          "name": "executor",
          "description": "- The Executor contract that will execute the proposal.",
          "recommendedTypes": []
        },
        {
          "name": "targets",
          "description": "- list of contracts called by proposal's associated transactions.",
          "recommendedTypes": []
        },
        {
          "name": "values",
          "description": "- list of value in wei for each propoposal's associated transaction.",
          "recommendedTypes": []
        },
        {
          "name": "signatures",
          "description": "- list of function signatures (can be empty) to be used when created the callData.",
          "recommendedTypes": []
        },
        {
          "name": "calldatas",
          "description": "- list of calldatas: if associated signature empty, calldata ready, else calldata is arguments.",
          "recommendedTypes": []
        },
        {
          "name": "ipfsHash",
          "description": "- IPFS hash of the proposal*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeProposal(uint256)",
      "name": "executeProposal",
      "description": "Execute the proposal (If Proposal is Succeeded).",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "id of the proposal to execute*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getGovernanceStrategy()",
      "name": "getGovernanceStrategy",
      "description": "Getter of the current GovernanceStrategy address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The address of the current GovernanceStrategy contract*.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGuardian()",
      "name": "getGuardian",
      "description": "Getter the address of the guardian, that can mainly cancel proposals.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The address of the guardian*.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposalById(uint256)",
      "name": "getProposalById",
      "description": "Getter of a proposal by id.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "id of the proposal to get.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the proposal as struct ProposalWithoutVotes*.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposalState(uint256)",
      "name": "getProposalState",
      "description": "Get the current state of a proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "id of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The current state of the proposal*.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposalsCount()",
      "name": "getProposalsCount",
      "description": "Getter of the proposal count (the current number of proposals ever created).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the proposal count*.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVoteOnProposal(uint256,address)",
      "name": "getVoteOnProposal",
      "description": "Vote is a struct: ({bool support, uint248 votingPower}). Getter of the Vote of a voter about a proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "id of the proposal.",
          "recommendedTypes": []
        },
        {
          "name": "voter",
          "description": "address of the voter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The associated Vote memory object*.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVotingDelay()",
      "name": "getVotingDelay",
      "description": "Getter of the current Voting Delay (delay before a created proposal can be voted on) Different from the voting duration.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The voting delay in seconds*.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "governanceReward()",
      "name": "governanceReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isExecutorAuthorized(address)",
      "name": "isExecutorAuthorized",
      "description": "Returns whether an address is an authorized executor.",
      "parameterDecorators": [
        {
          "name": "executor",
          "description": "address to evaluate as authorized executor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true - if authorized, false - is not authorized*.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCommunityReward(uint256)",
      "name": "setCommunityReward",
      "description": "owner should be a executor, so needs to make a proposal. communityReward will be the same for each game (including main one). Set new community reward percent, allowed to call by onlyOwner.",
      "parameterDecorators": [
        {
          "name": "communityReward_",
          "description": "new percent of the community reward*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGovernanceReward(uint256)",
      "name": "setGovernanceReward",
      "description": "owner should be a executor, so needs to make a proposal. governanceReward will be the same for each game (including main one). Set new governance reward percent, allowed to call by onlyOwner.",
      "parameterDecorators": [
        {
          "name": "governanceReward_",
          "description": "new percent of the governance reward*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGovernanceStrategy(address)",
      "name": "setGovernanceStrategy",
      "description": "owner should be a executor, so needs to make a proposal. Set new GovernanceStrategy, allowed to call by onlyOwner.",
      "parameterDecorators": [
        {
          "name": "governanceStrategy",
          "description": "new Address of the GovernanceStrategy contract*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setVotingDelay(uint256)",
      "name": "setVotingDelay",
      "description": "owner should be a executor, so needs to make a proposal. Set new Voting Delay (delay before a newly created proposal can be voted on), allowed to call by onlyOwner.",
      "parameterDecorators": [
        {
          "name": "votingDelay",
          "description": "new voting delay in terms of blocks*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "submitVote(uint256,bool)",
      "name": "submitVote",
      "description": "Function allowing msg.sender to vote for/against a proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "id of the proposal.",
          "recommendedTypes": []
        },
        {
          "name": "support",
          "description": "boolean, true = vote for, false = vote against*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unauthorizeExecutors(address[])",
      "name": "unauthorizeExecutors",
      "description": "owner should be a executor, so needs to make a proposal. Remove addresses from the list of authorized executors.",
      "parameterDecorators": [
        {
          "name": "executors",
          "description": "list of addresses to be removed as authorized executors*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}