{"schema":"../schema.json","tags":["nft"],"name":"GenesisNFT","description":"","eventDecorators":[{"signature":"EditionMinted(uint256,address)","name":"EditionMinted","description":"Recycler Vault Redistribution Events.","parameterDecorators":[{"name":"price","description":"","recommendedTypes":[],"indexed":false},{"name":"owner","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"PriceChanged(uint256)","name":"PriceChanged","description":"Recycler Vault Redistribution Events.","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"addToken(uint256,uint256,bool)","name":"addToken","description":"Add token to collection.","parameterDecorators":[{"name":"_tokenId","description":"Token ID.","recommendedTypes":[]},{"name":"_mintPrice","description":"Mint price.","recommendedTypes":[]},{"name":"_paused","description":"Paused state for token.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"burn(uint256)","name":"burn","description":"User burn function for token id.","parameterDecorators":[{"name":"tokenId","description":"Token ID to burn.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"editionSize()","name":"editionSize","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getAux(address)","name":"getAux","description":"Returns the auxillary data for `owner`.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":true},{"signature":"getMetadata(uint256)","name":"getMetadata","description":"Get Metadata for given token id.","parameterDecorators":[{"name":"tokenId","description":"token id to get metadata for.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"base64-encoded json metadata object.","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"implementation()","name":"implementation","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"maxNumberCanMint()","name":"maxNumberCanMint","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"mint(uint256)","name":"mint","description":"This allows a user to mint a single edition at the for a given token ID at the current price in the contract. If token ID is 0, it will mint a new edition at the next available increment.","parameterDecorators":[{"name":"tokenId","description":"The ID of the token to get the owner of.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"mintPrice(uint256)","name":"mintPrice","description":"Returns the mint price for a token.","parameterDecorators":[{"name":"tokenId","description":"token id.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"name()","name":"name","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"numberCanMint()","name":"numberCanMint","description":"Returns the number of editions allowed to mint (max_uint256 when open edition).","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"numberMintedByOwner(address)","name":"numberMintedByOwner","description":"Returns the number of tokens minted by owner.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"simple override for owner interface.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"paused()","name":"paused","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"setApprovedMinter(address,bool)","name":"setApprovedMinter","description":"Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given edition id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.","parameterDecorators":[{"name":"minter","description":"address to set approved minting status for.","recommendedTypes":[]},{"name":"allowed","description":"boolean if that address is allowed to mint.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setAux(address,uint64)","name":"setAux","description":"Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[]},{"name":"aux","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setBaseURI(string)","name":"setBaseURI","description":"Allows for updates of edition urls by the owner of the edition. Only URLs can be updated (data-uris are supported), hashes cannot be updated.","parameterDecorators":[{"name":"_baseURI","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMetadata(uint256,string)","name":"setMetadata","description":"Allows for updates of metadata by the owner of the edition.","parameterDecorators":[{"name":"tokenId","description":"","recommendedTypes":[]},{"name":"_metadata","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMintPrice(uint256,uint256)","name":"setMintPrice","description":"This sets a simple ETH sales price for a given token Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.","parameterDecorators":[{"name":"tokenId","description":"the token Id.","recommendedTypes":[]},{"name":"_mintPrice","description":"the amount of ETH needed to start the sale for a given token.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setNumberCanMint(uint256)","name":"setNumberCanMint","description":"Allows for number of editions allowed to mint to be updated by the owner of the edition.","parameterDecorators":[{"name":"_numberCanMint","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPaused(bool)","name":"setPaused","description":"Set contract paused state.","parameterDecorators":[{"name":"_paused","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setTokenPaused(uint256,bool)","name":"setTokenPaused","description":"Sets pause state for token.","parameterDecorators":[{"name":"tokenId","description":"","recommendedTypes":[]},{"name":"_paused","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"symbol()","name":"symbol","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"tokenURI(uint256)","name":"tokenURI","description":"Get URI for given token id.","parameterDecorators":[{"name":"tokenId","description":"token id to get uri for.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"base64-encoded json metadata object.","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"totalMinted()","name":"totalMinted","description":"Returns the total amount of tokens minted in the contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"totalSupply()","name":"totalSupply","description":"Returns the number of minted tokens (burning factored in).","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfer token.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw()","name":"withdraw","description":"This withdraws ETH from the contract to the contract owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}