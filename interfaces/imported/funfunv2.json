{
  "schema": "../schema.json",
  "tags": [],
  "name": "FunFunv2",
  "description": "FunFunv2version 2.0.0compile with 0.6.6compile with 200 optimization for less gas.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "Factory()",
      "name": "Factory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "Owner()",
      "name": "Owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "Router()",
      "name": "Router",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "VERSION()",
      "name": "VERSION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WETH()",
      "name": "WETH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swapExactETHForTokens(address,address[],uint256,uint256)",
      "name": "swapExactETHForTokens",
      "description": "msg.value must greater then (sellGasPricePerWallet + buyAmountPerWallet) * len(wallets). Executes a `swapExactETHForTokensSupportingFeeOnTransferTokens` and split's it to wallets.",
      "parameterDecorators": [
        {
          "name": "tokenAddr",
          "description": ": The token address.",
          "recommendedTypes": []
        },
        {
          "name": "wallets",
          "description": ": The wallet addresses to split the gain.",
          "recommendedTypes": []
        },
        {
          "name": "buyAmountPerWallet",
          "description": ": Buy amount per wallet.",
          "recommendedTypes": []
        },
        {
          "name": "sellGasPricePerWallet",
          "description": ": Estimated sell + approve gas price to send to the wallets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapExactTokensForETH(address,address[])",
      "name": "swapExactTokensForETH",
      "description": "The wallets needs to approve this contract. Executes `swapExactTokensForTokensSupportingFeeOnTransferTokens` internally and sends the ETH to owner.@author.",
      "parameterDecorators": [
        {
          "name": "tokenAddr",
          "description": ": The token address.",
          "recommendedTypes": []
        },
        {
          "name": "wallets",
          "description": ": The wallet addresses to sell token amounts.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}