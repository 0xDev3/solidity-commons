{
  "schema": "../schema.json",
  "tags": [
    "vesting"
  ],
  "name": "Vesting",
  "description": "",
  "eventDecorators": [
    {
      "signature": "InitialDeposit(address,uint256,uint256,uint256)",
      "name": "InitialDeposit",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_cliff",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_vesting",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens salvaged.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "salvaged token address.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ReferenceDateSet(uint256)",
      "name": "ReferenceDateSet",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "_referenceDate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenSet(address)",
      "name": "TokenSet",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "salvaged token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokensClaimed(address,uint256)",
      "name": "TokensClaimed",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens salvaged.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "salvaged token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdatedEcosystemFund(address)",
      "name": "UpdatedEcosystemFund",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "newEcosystemFund",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdatedLongTermLockUp(address)",
      "name": "UpdatedLongTermLockUp",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "newLongTermLockUp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdatedTeam(address)",
      "name": "UpdatedTeam",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "newTeam",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdatedTreasury(address)",
      "name": "UpdatedTreasury",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "newTreasury",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_vestingData(address)",
      "name": "_vestingData",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "cliff",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "vesting",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "totalVestedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "releasedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claim()",
      "name": "claim",
      "description": "function that allows a token owner to claim tokens for himself if there is some free tokens they will be sent out of the vesting contract to the owner wallet.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimAll()",
      "name": "claimAll",
      "description": "function that claims tokens on behalf of all the wallets at the same time this function can be called by anyone if there is some free tokens they will be sent out of the vesting contract to their owners.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimFor(address)",
      "name": "claimFor",
      "description": "function that claims tokens on behalf of a wallet this function can be called by anyone if there is some free tokens they will be sent out of the vesting contract to the owner wallet owner needs to actually exist otherwise the function will fail.",
      "parameterDecorators": [
        {
          "name": "_holder",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ecosystemFund()",
      "name": "ecosystemFund",
      "description": "getter function for ecosystemFund wallet address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBalances(address)",
      "name": "getBalances",
      "description": "Get the balances of the holder on the vesting contract. totalBalance is the balance that is on the vesting contract and belongs to the holder lockedBalance is the share of total balance that is locked on the vesting contract freeBalance is the share of the total balance that can be claimed by calling a claim function on the contract.",
      "parameterDecorators": [
        {
          "name": "_holder",
          "description": "the wallet of the token holder, it has to be one of the 4 wallets holding tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBalance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lockedBalance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "freeBalance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialDeposit(address,uint256,uint256,uint256)",
      "name": "initialDeposit",
      "description": "function allowing to make a deposit of tokens on the vesting contract for one of the 4 wallets pre registered, if an initial deposit already exists, the function will fail.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "the address of the token holder.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "the amount of tokens belonging to _to.",
          "recommendedTypes": []
        },
        {
          "name": "_cliff",
          "description": "the duration of cliff, in months.",
          "recommendedTypes": []
        },
        {
          "name": "_vesting",
          "description": "the duration of the vesting, in months, including the cliff.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "getter function for initialization status (token initialization).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "longTermLockUp()",
      "name": "longTermLockUp",
      "description": "getter function for long term lockup wallet address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "referenceDate()",
      "name": "referenceDate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setToken(address)",
      "name": "setToken",
      "description": "initialization function setting the address of BMEX token can be called only once, after that the contract is set to initialized.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "team()",
      "name": "team",
      "description": "getter function for team wallet address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "treasury()",
      "name": "treasury",
      "description": "getter function for treasury wallet address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateEcosystemFundWallet(address)",
      "name": "updateEcosystemFundWallet",
      "description": "function used to update the wallet of ecosystem fund the vesting data corresponding to the ecosystem fund will be transferred to the new wallet.",
      "parameterDecorators": [
        {
          "name": "newEcosystemFund",
          "description": "the new wallet used for ecosystem fund only owner can call this function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateLongTermLockUpWallet(address)",
      "name": "updateLongTermLockUpWallet",
      "description": "function used to update the wallet of long term lockup the vesting data corresponding to the long term lockup will be transferred to the new wallet.",
      "parameterDecorators": [
        {
          "name": "newLongTermLockUp",
          "description": "the new wallet used for long term lockup only owner can call this function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateTeamWallet(address)",
      "name": "updateTeamWallet",
      "description": "function used to update the team wallet the vesting data corresponding to the team will be transferred to the new wallet.",
      "parameterDecorators": [
        {
          "name": "newTeam",
          "description": "the new wallet used for team only owner can call this function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateTreasuryWallet(address)",
      "name": "updateTreasuryWallet",
      "description": "function used to update the wallet of treasury the vesting data corresponding to the treasury will be transferred to the new wallet.",
      "parameterDecorators": [
        {
          "name": "newTreasury",
          "description": "the new wallet used for treasury only owner can call this function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}