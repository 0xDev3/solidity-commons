{
  "schema": "../schema.json",
  "tags": [
    "vaults"
  ],
  "name": "BaNEVault",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OperatorApproved(address)",
      "name": "OperatorApproved",
      "description": "Event that is emitted when a node operator gets approved for payment.",
      "parameterDecorators": [
        {
          "name": "_operatorAddress",
          "description": "address that is approved.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "approveWallet(address)",
      "name": "approveWallet",
      "description": "Approve a wallet address to be eligible for payment. Only callable by the contract owner.",
      "parameterDecorators": [
        {
          "name": "addressToApprove",
          "description": "Wallet address of the node operator that is to be approved.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "becomeNodeOperator()",
      "name": "becomeNodeOperator",
      "description": "The address that calls this function will be registered as a node operator.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeOwnership(address)",
      "name": "changeOwnership",
      "description": "Transfer ownership of this contract.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deleteOwnership()",
      "name": "deleteOwnership",
      "description": "Renounce ownership such that the contract has no owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "operatorCount()",
      "name": "operatorCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paymentAmount()",
      "name": "paymentAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeNodeOperator(address)",
      "name": "removeNodeOperator",
      "description": "Remove a node operator from the contract.",
      "parameterDecorators": [
        {
          "name": "addressToRemove",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resetApproval(address)",
      "name": "resetApproval",
      "description": "Reset approval value of a node operator to false.",
      "parameterDecorators": [
        {
          "name": "addressToReset",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPaymentAmount(uint256)",
      "name": "setPaymentAmount",
      "description": "Let owner of this contract set the amount that will be paid to approved node operators.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "New allowance for active node operators.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw()",
      "name": "withdraw",
      "description": "Let an approved node operator withdraw his allowance.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}