{
  "schema": "../schema.json",
  "tags": [],
  "name": "OnboardRouter",
  "description": "",
  "eventDecorators": [
    {
      "signature": "BaseOperatorsContractChanged(address,address)",
      "name": "BaseOperatorsContractChanged",
      "description": "event emitted when a token template is removed.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "baseOperatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BlockerOperatorsContractChanged(address,address)",
      "name": "BlockerOperatorsContractChanged",
      "description": "event emitted when a token template is removed.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "blockerOperatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OperatorsContractChanged(address,address)",
      "name": "OperatorsContractChanged",
      "description": "event emitted when a token template is removed.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OperatorsContractPending(address,address)",
      "name": "OperatorsContractPending",
      "description": "event emitted when a token template is removed.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RaiseOperatorsContractChanged(address,address)",
      "name": "RaiseOperatorsContractChanged",
      "description": "event emitted when a token template is removed.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "raiseOperatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TraderOperatorsContractChanged(address,address)",
      "name": "TraderOperatorsContractChanged",
      "description": "event emitted when a token template is removed.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "traderOperatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WhitelistContractChanged(address,address)",
      "name": "WhitelistContractChanged",
      "description": "event emitted when a token template is removed.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "whitelistAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "changeAdminToSuperAdmin(address,address)",
      "name": "changeAdminToSuperAdmin",
      "description": "Admin can change admin '_account' address to superAdmin privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given trader privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeAdminToTrader(address,address)",
      "name": "changeAdminToTrader",
      "description": "Admin can change admin '_account' address to only trader privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given trader privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeBaseOperatorsContract(address)",
      "name": "changeBaseOperatorsContract",
      "description": "Change address of BaseOperators contract.",
      "parameterDecorators": [
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeBlockerOperatorsContract(address)",
      "name": "changeBlockerOperatorsContract",
      "description": "Change address of BlockerOperators contract.",
      "parameterDecorators": [
        {
          "name": "_blockerOperators",
          "description": "BlockerOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeOperatorToSuperAdmin(address,address)",
      "name": "changeOperatorToSuperAdmin",
      "description": "Admin can change operator '_account' address to superAdmin privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given trader privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeOperatorToTrader(address,address)",
      "name": "changeOperatorToTrader",
      "description": "Admin can change operator '_account' address to trader privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given trader privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeRaiseOperatorsContract(address)",
      "name": "changeRaiseOperatorsContract",
      "description": "Change address of RaiseOperators contract.",
      "parameterDecorators": [
        {
          "name": "_raiseOperators",
          "description": "RaiseOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeSuperAdminToAdmin(address,address)",
      "name": "changeSuperAdminToAdmin",
      "description": "Admin can change superadmin '_account' address to admin privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given trader privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeSuperAdminToOperator(address,address)",
      "name": "changeSuperAdminToOperator",
      "description": "Admin can change superadmin '_account' address to operator privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given trader privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeTraderOperatorsContract(address)",
      "name": "changeTraderOperatorsContract",
      "description": "Change address of TraderOperators contract.",
      "parameterDecorators": [
        {
          "name": "_traderOperators",
          "description": "TraderOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeTraderToAdmin(address,address)",
      "name": "changeTraderToAdmin",
      "description": "Admin can change trader '_account' address to admin privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given trader privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeTraderToOperator(address,address)",
      "name": "changeTraderToOperator",
      "description": "Admin can change trader '_account' address to operator privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given trader privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeWhitelistContract(address)",
      "name": "changeWhitelistContract",
      "description": "Change address of Whitelist contract.",
      "parameterDecorators": [
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "confirmOperatorsContract()",
      "name": "confirmOperatorsContract",
      "description": "The function should be called from new operators contract by admin to ensure that operatorsPending address is the real contract address.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deboardBlocker(address,address)",
      "name": "deboardBlocker",
      "description": "Admin can revoke '_account' address blocker privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be revoked blocker privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deboardInvestor(address,address)",
      "name": "deboardInvestor",
      "description": "Operator or System can revoke '_account' address investor privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be revoked investor privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deboardSuperAdmin(address,address)",
      "name": "deboardSuperAdmin",
      "description": "Admin can revoke '_account' address super admin privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be revoked super admin privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deboardSystem(address,address)",
      "name": "deboardSystem",
      "description": "Admin can revoke '_account' address system privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be revoked system privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deboardTrader(address,address)",
      "name": "deboardTrader",
      "description": "Admin can revoke '_account' address trader privileges, de-whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be revoked trader privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getBaseOperatorsContract()",
      "name": "getBaseOperatorsContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBlockerOperatorsContract()",
      "name": "getBlockerOperatorsContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOperatorsContract()",
      "name": "getOperatorsContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOperatorsPending()",
      "name": "getOperatorsPending",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRaiseOperatorsContract()",
      "name": "getRaiseOperatorsContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTraderOperatorsContract()",
      "name": "getTraderOperatorsContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWhitelistContract()",
      "name": "getWhitelistContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address,address,address)",
      "name": "initialize",
      "description": "Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with confirmation through the operators contract.",
      "parameterDecorators": [
        {
          "name": "_whitelist",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_raiseOperators",
          "description": "RaiseOperators contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_traderOperators",
          "description": "TraderOperators contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_blockerOperators",
          "description": "BlockerOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with confirmation through the operators contract.",
      "parameterDecorators": [
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isAdmin(address)",
      "name": "isAdmin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAdminOrSystem(address)",
      "name": "isAdminOrSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isInitialized()",
      "name": "isInitialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isMultisig(address)",
      "name": "isMultisig",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_contract",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOperator(address)",
      "name": "isOperator",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOperatorOrSystem(address)",
      "name": "isOperatorOrSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRelay(address)",
      "name": "isRelay",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSystem(address)",
      "name": "isSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onboardBlocker(address,address)",
      "name": "onboardBlocker",
      "description": "Admin can give '_account' address blocker privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given blocker privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onboardInvestor(address,address)",
      "name": "onboardInvestor",
      "description": "Operator or System can give '_account' address investor privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given investor privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onboardSuperAdmin(address,address)",
      "name": "onboardSuperAdmin",
      "description": "Admin can give '_account' address super admin privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given super admin privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onboardSystem(address,address)",
      "name": "onboardSystem",
      "description": "Admin can give '_account' address system privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given system privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onboardTrader(address,address)",
      "name": "onboardTrader",
      "description": "Admin can give '_account' address trader privileges, whitelist them on the shared whitelist contract, and the passed in whitelist address i.e. Equity Token, or the default whitelist.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address that should be given trader privileges.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOperatorsContract(address)",
      "name": "setOperatorsContract",
      "description": "Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr) where addr is the address of current contract instance. This is done to prevent the case when the new contract address is broken and control of the contract can be lost in such case.",
      "parameterDecorators": [
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}