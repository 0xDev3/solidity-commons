{
  "schema": "../schema.json",
  "tags": [],
  "name": "Keep3rHelper",
  "description": "",
  "eventDecorators": [
    {
      "signature": "GovernanceProposal(address)",
      "name": "GovernanceProposal",
      "description": "Emitted when a new governance is proposed.",
      "parameterDecorators": [
        {
          "name": "_pendingGovernance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GovernanceSet(address)",
      "name": "GovernanceSet",
      "description": "Emitted when pendingGovernance accepts to be governance.",
      "parameterDecorators": [
        {
          "name": "_governance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Keep3rV2Change(address)",
      "name": "Keep3rV2Change",
      "description": "Emitted when the Keep3r V2 address is changed.",
      "parameterDecorators": [
        {
          "name": "_keep3rV2",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Kp3rWethPoolChange(address,bool)",
      "name": "Kp3rWethPoolChange",
      "description": "Emitted when the kp3r weth pool is changed.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_isKP3RToken0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MaxBoostChange(uint256)",
      "name": "MaxBoostChange",
      "description": "Emitted when the maximum boost multiplier is changed.",
      "parameterDecorators": [
        {
          "name": "_maxBoost",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MinBaseFeeChange(uint256)",
      "name": "MinBaseFeeChange",
      "description": "Emitted when minimum rewarded gas fee is changed.",
      "parameterDecorators": [
        {
          "name": "_minBaseFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MinBoostChange(uint256)",
      "name": "MinBoostChange",
      "description": "Emitted when the minimum boost multiplier is changed.",
      "parameterDecorators": [
        {
          "name": "_minBoost",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MinPriorityFeeChange(uint256)",
      "name": "MinPriorityFeeChange",
      "description": "Emitted when minimum rewarded priority fee is changed.",
      "parameterDecorators": [
        {
          "name": "_minPriorityFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "QuoteTwapTimeChange(uint32)",
      "name": "QuoteTwapTimeChange",
      "description": "Emitted when the quote twap time is changed.",
      "parameterDecorators": [
        {
          "name": "_quoteTwapTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TargetBondChange(uint256)",
      "name": "TargetBondChange",
      "description": "Emitted when the target bond amount is changed.",
      "parameterDecorators": [
        {
          "name": "_targetBond",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WorkExtraGasChange(uint256)",
      "name": "WorkExtraGasChange",
      "description": "Emitted when the work extra gas amount is changed.",
      "parameterDecorators": [
        {
          "name": "_workExtraGas",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "BOOST_BASE()",
      "name": "BOOST_BASE",
      "description": "The boost base used to calculate the boost rewards for the keeper.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "KP3R()",
      "name": "KP3R",
      "description": "Address of KP3R token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptGovernance()",
      "name": "acceptGovernance",
      "description": "Changes the governance from the current governance to the previously proposed address.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "bonds(address)",
      "name": "bonds",
      "description": "Returns the amount of KP3R the keeper has bonded.",
      "parameterDecorators": [
        {
          "name": "_keeper",
          "description": "The address of the keeper to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_amountBonded",
          "description": "The amount of KP3R the keeper has bonded.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getKP3RsAtTick(uint256,int56,uint256)",
      "name": "getKP3RsAtTick",
      "description": "Given a tick and a liquidity amount, calculates the underlying KP3R tokens.",
      "parameterDecorators": [
        {
          "name": "_liquidityAmount",
          "description": "Amount of liquidity to be converted.",
          "recommendedTypes": []
        },
        {
          "name": "_tickDifference",
          "description": "Tick value used to calculate the quote.",
          "recommendedTypes": []
        },
        {
          "name": "_timeInterval",
          "description": "Time value used to calculate the quote.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_kp3rAmount",
          "description": "Amount of KP3R tokens underlying on the given liquidity.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPaymentParams(uint256)",
      "name": "getPaymentParams",
      "description": "Get multiplier, quote, and extra, in order to calculate keeper payment.",
      "parameterDecorators": [
        {
          "name": "_bonds",
          "description": "Amount of bonded KP3R owned by the keeper.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_boost",
          "description": "Multiplier per gas unit. Takes into account the base fee and the amount of bonded KP3R.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_oneEthQuote",
          "description": "Amount of KP3R tokens equivalent to 1 ETH.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_extra",
          "description": "Amount of extra gas that should be added to the gas spent.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPoolTokens(address)",
      "name": "getPoolTokens",
      "description": "Given a pool address, returns the underlying tokens of the pair.",
      "parameterDecorators": [
        {
          "name": "_pool",
          "description": "Address of the correspondant pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_token0",
          "description": "Address of the first token of the pair.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "_token1",
          "description": "Address of the second token of the pair.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getQuoteAtTick(uint128,int56,uint256)",
      "name": "getQuoteAtTick",
      "description": "Given a tick and a token amount, calculates the output in correspondant token.",
      "parameterDecorators": [
        {
          "name": "_baseAmount",
          "description": "Amount of token to be converted.",
          "recommendedTypes": []
        },
        {
          "name": "_tickDifference",
          "description": "Tick value used to calculate the quote.",
          "recommendedTypes": []
        },
        {
          "name": "_timeInterval",
          "description": "Time value used to calculate the quote.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_quoteAmount",
          "description": "Amount of credits deserved for the baseAmount at the tick value.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewardAmount(uint256)",
      "name": "getRewardAmount",
      "description": "Calculates the reward (in KP3R) that corresponds to tx.origin for using gas.",
      "parameterDecorators": [
        {
          "name": "_gasUsed",
          "description": "The amount of gas used that will be rewarded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_amount",
          "description": "The amount of KP3R that should be awarded to tx.origin.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewardAmountFor(address,uint256)",
      "name": "getRewardAmountFor",
      "description": "Calculates the reward (in KP3R) that corresponds to a keeper for using gas.",
      "parameterDecorators": [
        {
          "name": "_keeper",
          "description": "The address of the keeper to check.",
          "recommendedTypes": []
        },
        {
          "name": "_gasUsed",
          "description": "The amount of gas used that will be rewarded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_kp3r",
          "description": "The amount of KP3R that should be awarded to the keeper.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewardBoostFor(uint256)",
      "name": "getRewardBoostFor",
      "description": "Calculates the boost in the reward given to a keeper based on the amount of KP3R that keeper has bonded.",
      "parameterDecorators": [
        {
          "name": "_bonds",
          "description": "The amount of KP3R tokens bonded by the keeper.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_rewardBoost",
          "description": "The reward boost that corresponds to the keeper.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "governance()",
      "name": "governance",
      "description": "Stores the governance address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isKP3RToken0(address)",
      "name": "isKP3RToken0",
      "description": "Defines the order of the tokens in the pair for twap calculations.",
      "parameterDecorators": [
        {
          "name": "_pool",
          "description": "Address of the correspondant pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_isKP3RToken0",
          "description": "Boolean indicating the order of the tokens in the pair.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "keep3rV2()",
      "name": "keep3rV2",
      "description": "Address of Keep3r V2.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "kp3rWethPool()",
      "name": "kp3rWethPool",
      "description": "KP3R-WETH pool that is being used as oracle.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "poolAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "isKP3RToken0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxBoost()",
      "name": "maxBoost",
      "description": "The maximum multiplier used to calculate the amount of gas paid to the Keeper for the gas used to perform a job For example: if the quoted gas used is 1000, then the maximum amount to be paid will be 1000 * maxBoost / BOOST_BASE.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minBaseFee()",
      "name": "minBaseFee",
      "description": "The minimum base fee that is used to calculate keeper rewards.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minBoost()",
      "name": "minBoost",
      "description": "The minimum multiplier used to calculate the amount of gas paid to the Keeper for the gas used to perform a job For example: if the quoted gas used is 1000, then the minimum amount to be paid will be 1000 * minBoost / BOOST_BASE.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minPriorityFee()",
      "name": "minPriorityFee",
      "description": "The minimum priority fee that is also rewarded for keepers.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "observe(address,uint32[])",
      "name": "observe",
      "description": "Given an array of secondsAgo, returns UniswapV3 pool cumulatives at that moment.",
      "parameterDecorators": [
        {
          "name": "_pool",
          "description": "Address of the pool to observe.",
          "recommendedTypes": []
        },
        {
          "name": "_secondsAgo",
          "description": "Array with time references to observe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_tickCumulative1",
          "description": "Cummulative sum of ticks until first time reference.",
          "recommendedTypes": [],
          "solidityType": "int56"
        },
        {
          "name": "_tickCumulative2",
          "description": "Cummulative sum of ticks until second time reference.",
          "recommendedTypes": [],
          "solidityType": "int56"
        },
        {
          "name": "_success",
          "description": "Boolean indicating if the observe call was succesfull.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingGovernance()",
      "name": "pendingGovernance",
      "description": "Stores the pendingGovernance address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "quote(uint256)",
      "name": "quote",
      "description": "Calculates the amount of KP3R that corresponds to the ETH passed into the function. This function allows us to calculate how much KP3R we should pay to a keeper for things expressed in ETH, like gas.",
      "parameterDecorators": [
        {
          "name": "_eth",
          "description": "The amount of ETH.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_amountOut",
          "description": "The amount of KP3R.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "quoteTwapTime()",
      "name": "quoteTwapTime",
      "description": "The twap time for quoting.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setGovernance(address)",
      "name": "setGovernance",
      "description": "Proposes a new address to be governance.",
      "parameterDecorators": [
        {
          "name": "_governance",
          "description": "The address being proposed as the new governance.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setKeep3rV2(address)",
      "name": "setKeep3rV2",
      "description": "Sets the Keep3r V2 address.",
      "parameterDecorators": [
        {
          "name": "_keep3rV2",
          "description": "The address of Keep3r V2.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setKp3rWethPool(address)",
      "name": "setKp3rWethPool",
      "description": "Sets KP3R-WETH pool.",
      "parameterDecorators": [
        {
          "name": "_poolAddress",
          "description": "The address of the KP3R-WETH pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxBoost(uint256)",
      "name": "setMaxBoost",
      "description": "Sets the maximum boost multiplier.",
      "parameterDecorators": [
        {
          "name": "_maxBoost",
          "description": "The maximum boost multiplier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinBaseFee(uint256)",
      "name": "setMinBaseFee",
      "description": "Sets the minimum rewarded gas fee.",
      "parameterDecorators": [
        {
          "name": "_minBaseFee",
          "description": "The minimum rewarded gas fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinBoost(uint256)",
      "name": "setMinBoost",
      "description": "Sets the minimum boost multiplier.",
      "parameterDecorators": [
        {
          "name": "_minBoost",
          "description": "The minimum boost multiplier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinPriorityFee(uint256)",
      "name": "setMinPriorityFee",
      "description": "Sets the minimum rewarded gas priority fee.",
      "parameterDecorators": [
        {
          "name": "_minPriorityFee",
          "description": "The minimum rewarded priority fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setQuoteTwapTime(uint32)",
      "name": "setQuoteTwapTime",
      "description": "Sets the quote twap time.",
      "parameterDecorators": [
        {
          "name": "_quoteTwapTime",
          "description": "The twap time for quoting.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTargetBond(uint256)",
      "name": "setTargetBond",
      "description": "Sets the target bond amount.",
      "parameterDecorators": [
        {
          "name": "_targetBond",
          "description": "The target bond amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWorkExtraGas(uint256)",
      "name": "setWorkExtraGas",
      "description": "Sets the work extra gas amount.",
      "parameterDecorators": [
        {
          "name": "_workExtraGas",
          "description": "The work extra gas.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "targetBond()",
      "name": "targetBond",
      "description": "The targeted amount of bonded KP3Rs to max-up reward multiplier For example: if the amount of KP3R the keeper has bonded is targetBond or more, then the keeper will get the maximum boost possible in his rewards, if it's less, the reward boost will be proportional.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "workExtraGas()",
      "name": "workExtraGas",
      "description": "The amount of unaccounted gas that is going to be added to keeper payments.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}