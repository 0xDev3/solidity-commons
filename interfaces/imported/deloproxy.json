{"schema":"../schema.json","tags":[],"name":"DeloProxy","description":"","eventDecorators":[{"signature":"Received(address,uint256)","name":"Received","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[],"indexed":false},{"name":"param1","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"cancelOrder(uint256)","name":"cancelOrder","description":"","parameterDecorators":[{"name":"orderID","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"etherOrderTaker(uint256,uint256,uint256)","name":"etherOrderTaker","description":"","parameterDecorators":[{"name":"orderID","description":"","recommendedTypes":[]},{"name":"estGas","description":"","recommendedTypes":[]},{"name":"delay","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"etherToTokenOrder(address,uint256)","name":"etherToTokenOrder","description":"","parameterDecorators":[{"name":"tokenOut","description":"","recommendedTypes":[]},{"name":"amountOut","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"orderID","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"findHighestOrder(uint8,uint8)","name":"findHighestOrder","description":"","parameterDecorators":[{"name":"tokenIn","description":"","recommendedTypes":[]},{"name":"tokenOut","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"amountIn","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"amountOut","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"orderID","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"findOrderByOrderID(uint256)","name":"findOrderByOrderID","description":"","parameterDecorators":[{"name":"orderID","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"amtIn","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"amtOut","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"listOpenOrders()","name":"listOpenOrders","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[5][]"}],"emittableEvents":[],"readOnly":true},{"signature":"poolFee()","name":"poolFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint24"}],"emittableEvents":[],"readOnly":true},{"signature":"swapOrderTaker(uint256,uint256,uint256)","name":"swapOrderTaker","description":"Take the Buy-Ether order -- this does not work on Kovan testnet function buyOrderTaker(uint orderID, uint estGas, uint delay) public payable onlyOwner returns (bool){ //uint amountEth = msg.value; (uint index, bool found) = findBuyOrder(orderID); require ((found), \"Order not found\"); uint8 Idx = buyOrders[index].stableIndex; //ERC20 token = ERC20(stables[Idx]); uint amtIn = buyOrders[index].amountIn; uint expectedAmtOut = buyOrders[index].amountOut; // a) first, approve stablecoin for spending on deproxy //require(token.approve(proxyAddress, amtIn), \"Approval FTDP\"); TransferHelper.safeApprove(stables[Idx], proxyAddress, amtIn); // b) swap stablecoin to get WETH amount uint amtOut = deproxy.convertExactStableToToken(Idx, 0, amtIn, address(this), delay); require ((amtOut >= expectedAmtOut + estGas), \"Insufficient BOA\"); //unwrap WETH -- does not work on Kovan periPay.unwrapWETH9(1, address(this)); require(address(this).balance > 0, \"No ETH converted\"); // c) send ETH to order owner (maker) - actually WETH !!! address payable maker = buyOrders[index].sender; //require (maker.send(expectedAmtOut), \"ETH transfer failed\"); send() does not work! //maker.transfer(expectedAmtOut); (bool success,) = maker.call{value: expectedAmtOut}(\"\"); require(success, \"ETH TF\"); //TransferHelper.safeApprove(WETH, maker, expectedAmtOut); //TransferHelper.safeTransferFrom(WETH, address(this), maker, expectedAmtOut); // d) remaining amount to caller address payable sender = payable(msg.sender); if (amtOut > expectedAmtOut){ (bool done,) = sender.call{value: (amtOut - expectedAmtOut)}(\"\"); require(done, \"ETH RTF\"); //sender.transfer(amtOut - expectedAmtOut); //TransferHelper.safeApprove(WETH, sender, (amtOut - expectedAmtOut)); //TransferHelper.safeTransferFrom(WETH, address(this), sender, (amtOut - expectedAmtOut)); } //-- send DAI to caller: NOT NEEDED anymore!!! //require(token.transferFrom(address(this), msg.sender, buyOrders[index].amount), \"Transfer token failed\"); // e) remove order from list for (uint i = index; i<numBuyOrders-1; i++){ buyOrders[i] = buyOrders[i+1]; } numBuyOrders--; return true; } *.","parameterDecorators":[{"name":"orderID","description":"","recommendedTypes":[]},{"name":"estGas","description":"","recommendedTypes":[]},{"name":"delay","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"tokenToOtherOrder(address,address,uint256,uint256)","name":"tokenToOtherOrder","description":"","parameterDecorators":[{"name":"tokenIn","description":"","recommendedTypes":[]},{"name":"tokenOut","description":"","recommendedTypes":[]},{"name":"amountIn","description":"","recommendedTypes":[]},{"name":"amountOut","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"orderID","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"uniswapRouter()","name":"uniswapRouter","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}