{"schema":"../schema.json","tags":["swaps","uniswap"],"name":"UniswapV3","description":"","eventDecorators":[],"functionDecorators":[{"signature":"buy(address,address,uint256,uint256,address,bytes)","name":"buy","description":"The function which performs the swap on an exchange. Exchange needs to implement this method in order to support swapping of tokens through it.","parameterDecorators":[{"name":"fromToken","description":"Address of the source token.","recommendedTypes":[]},{"name":"toToken","description":"Address of the destination token.","recommendedTypes":[]},{"name":"fromAmount","description":"Max Amount of source tokens to be swapped.","recommendedTypes":[]},{"name":"toAmount","description":"Destination token amount expected out of this swap.","recommendedTypes":[]},{"name":"exchange","description":"Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap.","recommendedTypes":[]},{"name":"payload","description":"Any exchange specific data which is required can be passed in this argument in encoded format which will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getKey()","name":"getKey","description":"Returns unique identifier for the adapter.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(bytes)","name":"initialize","description":"Certain adapters/exchanges needs to be initialized. This method will be called from Augustus.","parameterDecorators":[{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"onChainSwap(address,address,uint256,uint256)","name":"onChainSwap","description":"This function is used to perform onChainSwap. It build all the parameters onchain. Basically the information encoded in payload param of swap will calculated in this case Exchange needs to implement this method in order to support swapping of tokens through it.","parameterDecorators":[{"name":"fromToken","description":"Address of the source token.","recommendedTypes":[]},{"name":"toToken","description":"Address of the destination token.","recommendedTypes":[]},{"name":"fromAmount","description":"Amount of source tokens to be swapped.","recommendedTypes":[]},{"name":"toAmount","description":"Minimum destination token amount expected out of this swap.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"swap(address,address,uint256,uint256,address,bytes)","name":"swap","description":"The function which performs the swap on an exchange. Exchange needs to implement this method in order to support swapping of tokens through it.","parameterDecorators":[{"name":"fromToken","description":"Address of the source token.","recommendedTypes":[]},{"name":"toToken","description":"Address of the destination token.","recommendedTypes":[]},{"name":"fromAmount","description":"Amount of source tokens to be swapped.","recommendedTypes":[]},{"name":"toAmount","description":"Minimum destination token amount expected out of this swap.","recommendedTypes":[]},{"name":"exchange","description":"Internal exchange or factory contract address for the exchange. For example Registry address for the Uniswap.","recommendedTypes":[]},{"name":"payload","description":"Any exchange specific data which is required can be passed in this argument in encoded format which will be decoded by the exchange. Each exchange will publish it's own decoding/encoding mechanism.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}