{
  "schema": "../schema.json",
  "tags": [
    "nft"
  ],
  "name": "SonxPresale",
  "description": "SonxPresale. Presale contract for SONX platform coin and NFT platform.",
  "eventDecorators": [
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "** EVENTS ** ///.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "** EVENTS ** ///.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "Balances(address)",
      "name": "Balances",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "clearBalance()",
      "name": "clearBalance",
      "description": "Clears balance of the contract and transfers it to the owner Requirements: - Only the owner can call this function.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "presaleEnd()",
      "name": "presaleEnd",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "presalePrice()",
      "name": "presalePrice",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "presaleTokens()",
      "name": "presaleTokens",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "purchasePresaleToken(uint256)",
      "name": "purchasePresaleToken",
      "description": "Purchase a presale token.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "is the amount of presale token that the signer is purchasing Requirements: - The value sent must be equal to the amount purchased multiplied by the presale price - The amount purchased must be less then the available balance.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemPresaleTokens(uint256,address)",
      "name": "redeemPresaleTokens",
      "description": "Function called by other smart contracts to adjust the balance of the user, this will remove some of their presale tokens in return for functionality on the new platform.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "is the amount of tokens that are being redeemed.",
          "recommendedTypes": []
        },
        {
          "name": "_from",
          "description": "is the address of whose tokens are being redeemed Requirements: - The contract making the call has to be approved - The signer of the function has to have a balance greater or equal to the amount redeemed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRedemptionContract(address)",
      "name": "setRedemptionContract",
      "description": "Sets the address of the contract that can redeem the tokens.",
      "parameterDecorators": [
        {
          "name": "_redemptionAddress",
          "description": "is the address of the contract that can redeem tokens Requirements: - Only the owner can call this function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}