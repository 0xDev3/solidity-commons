{
  "schema": "../schema.json",
  "tags": [],
  "name": "DisputeManager",
  "description": "",
  "eventDecorators": [
    {
      "signature": "ContractSynced(bytes32,address)",
      "name": "ContractSynced",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "nameHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DisputeAccepted(bytes32,address,address,uint256)",
      "name": "DisputeAccepted",
      "description": "Emitted when a edition is created reserving the corresponding token IDs. Emitted when arbitrator accepts a `disputeID` to `indexer` created by `fisherman`. The event emits the amount `tokens` transferred to the fisherman, the deposit plus reward.",
      "parameterDecorators": [
        {
          "name": "disputeID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fisherman",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DisputeDrawn(bytes32,address,address,uint256)",
      "name": "DisputeDrawn",
      "description": "Emitted when a edition is created reserving the corresponding token IDs. Emitted when arbitrator draw a `disputeID` for `indexer` created by `fisherman`. The event emits the amount `tokens` used as deposit and returned to the fisherman.",
      "parameterDecorators": [
        {
          "name": "disputeID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fisherman",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DisputeLinked(bytes32,bytes32)",
      "name": "DisputeLinked",
      "description": "Emitted when a edition is created reserving the corresponding token IDs. Emitted when two disputes are in conflict to link them. This event will be emitted after each DisputeCreated event is emitted for each of the individual disputes.",
      "parameterDecorators": [
        {
          "name": "disputeID1",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "disputeID2",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "DisputeRejected(bytes32,address,address,uint256)",
      "name": "DisputeRejected",
      "description": "Emitted when a edition is created reserving the corresponding token IDs. Emitted when arbitrator rejects a `disputeID` for `indexer` created by `fisherman`. The event emits the amount `tokens` burned from the fisherman deposit.",
      "parameterDecorators": [
        {
          "name": "disputeID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fisherman",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "IndexingDisputeCreated(bytes32,address,address,uint256,address)",
      "name": "IndexingDisputeCreated",
      "description": "Emitted when a edition is created reserving the corresponding token IDs. Emitted when an indexing dispute is created for `allocationID` and `indexer` by `fisherman`. The event emits the amount of `tokens` deposited by the fisherman.",
      "parameterDecorators": [
        {
          "name": "disputeID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fisherman",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "allocationID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ParameterUpdated(string)",
      "name": "ParameterUpdated",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "param",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "QueryDisputeCreated(bytes32,address,address,uint256,bytes32,bytes)",
      "name": "QueryDisputeCreated",
      "description": "Emitted when a edition is created reserving the corresponding token IDs. Emitted when a query dispute is created for `subgraphDeploymentID` and `indexer` by `fisherman`. The event emits the amount of `tokens` deposited by the fisherman and `attestation` submitted.",
      "parameterDecorators": [
        {
          "name": "disputeID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fisherman",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "attestation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetController(address)",
      "name": "SetController",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "controller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptDispute(bytes32)",
      "name": "acceptDispute",
      "description": "Accept a dispute with ID `_disputeID`. The arbitrator accepts a dispute as being valid. This function will revert if the indexer is not slashable, whether because it does not have any stake available or the slashing percentage is configured to be zero. In those cases a dispute must be resolved using drawDispute or rejectDispute.",
      "parameterDecorators": [
        {
          "name": "_disputeID",
          "description": "ID of the dispute to be accepted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "acceptProxy(address)",
      "name": "acceptProxy",
      "description": "Accept to be an implementation of proxy.",
      "parameterDecorators": [
        {
          "name": "_proxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "acceptProxyAndCall(address,bytes)",
      "name": "acceptProxyAndCall",
      "description": "Accept to be an implementation of proxy and then call a function from the new implementation as specified by `_data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract.",
      "parameterDecorators": [
        {
          "name": "_proxy",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "arbitrator()",
      "name": "arbitrator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "areConflictingAttestations(tuple(bytes32,bytes32,bytes32,bytes32,bytes32,uint8),tuple(bytes32,bytes32,bytes32,bytes32,bytes32,uint8))",
      "name": "areConflictingAttestations",
      "description": "Returns if two attestations are conflicting. Everything must match except for the responseID.",
      "parameterDecorators": [
        {
          "name": "_attestation1",
          "description": "Attestation.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "requestCID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "responseCID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "subgraphDeploymentID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "r",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "s",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "v",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_attestation2",
          "description": "Attestation.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "requestCID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "responseCID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "subgraphDeploymentID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "r",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "s",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "v",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if the two attestations are conflicting.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createIndexingDispute(address,uint256)",
      "name": "createIndexingDispute",
      "description": "Create an indexing dispute for the arbitrator to resolve. The disputes are created in reference to an allocationID This function is called by a challenger that will need to `_deposit` at least `minimumDeposit` GRT tokens.",
      "parameterDecorators": [
        {
          "name": "_allocationID",
          "description": "The allocation to dispute.",
          "recommendedTypes": []
        },
        {
          "name": "_deposit",
          "description": "Amount of tokens staked as deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createQueryDispute(bytes,uint256)",
      "name": "createQueryDispute",
      "description": "Create a query dispute for the arbitrator to resolve. This function is called by a fisherman that will need to `_deposit` at least `minimumDeposit` GRT tokens.",
      "parameterDecorators": [
        {
          "name": "_attestationData",
          "description": "Attestation bytes submitted by the fisherman.",
          "recommendedTypes": []
        },
        {
          "name": "_deposit",
          "description": "Amount of tokens staked as deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createQueryDisputeConflict(bytes,bytes)",
      "name": "createQueryDisputeConflict",
      "description": "Create query disputes for two conflicting attestations. A conflicting attestation is a proof presented by two different indexers where for the same request on a subgraph the response is different. For this type of dispute the submitter is not required to present a deposit as one of the attestation is considered to be right. Two linked disputes will be created and if the arbitrator resolve one, the other one will be automatically resolved.",
      "parameterDecorators": [
        {
          "name": "_attestationData1",
          "description": "First attestation data submitted.",
          "recommendedTypes": []
        },
        {
          "name": "_attestationData2",
          "description": "Second attestation data submitted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disputes(bytes32)",
      "name": "disputes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "fisherman",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "relatedDisputeID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "disputeType",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "drawDispute(bytes32)",
      "name": "drawDispute",
      "description": "Ignore a dispute with ID `_disputeID`. The arbitrator draws dispute.",
      "parameterDecorators": [
        {
          "name": "_disputeID",
          "description": "ID of the dispute to be disregarded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "encodeHashReceipt(tuple(bytes32,bytes32,bytes32))",
      "name": "encodeHashReceipt",
      "description": "Return the message hash used to sign the receipt. Get the message hash that an indexer used to sign the receipt. Encodes a receipt using a domain separator, as described on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#specification.",
      "parameterDecorators": [
        {
          "name": "_receipt",
          "description": "Receipt returned by indexer and submitted by fisherman.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "requestCID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "responseCID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "subgraphDeploymentID",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Message hash used to sign the receipt.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fishermanRewardPercentage()",
      "name": "fishermanRewardPercentage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAttestationIndexer(tuple(bytes32,bytes32,bytes32,bytes32,bytes32,uint8))",
      "name": "getAttestationIndexer",
      "description": "Returns the indexer that signed an attestation.",
      "parameterDecorators": [
        {
          "name": "_attestation",
          "description": "Attestation.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "requestCID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "responseCID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "subgraphDeploymentID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "r",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "s",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "v",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Indexer address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "idxSlashingPercentage()",
      "name": "idxSlashingPercentage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,uint256,uint32,uint32,uint32)",
      "name": "initialize",
      "description": "Initialize this contract.",
      "parameterDecorators": [
        {
          "name": "_controller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_arbitrator",
          "description": "Arbitrator role.",
          "recommendedTypes": []
        },
        {
          "name": "_minimumDeposit",
          "description": "Minimum deposit required to create a Dispute.",
          "recommendedTypes": []
        },
        {
          "name": "_fishermanRewardPercentage",
          "description": "Percent of slashed funds for fisherman (ppm).",
          "recommendedTypes": []
        },
        {
          "name": "_qrySlashingPercentage",
          "description": "Percentage of indexer stake slashed for query disputes (ppm).",
          "recommendedTypes": []
        },
        {
          "name": "_idxSlashingPercentage",
          "description": "Percentage of indexer stake slashed for indexing disputes (ppm).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isDisputeCreated(bytes32)",
      "name": "isDisputeCreated",
      "description": "Return if dispute with ID `_disputeID` exists. Return whether a dispute exists or not.",
      "parameterDecorators": [
        {
          "name": "_disputeID",
          "description": "True if dispute already exists.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minimumDeposit()",
      "name": "minimumDeposit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "qrySlashingPercentage()",
      "name": "qrySlashingPercentage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rejectDispute(bytes32)",
      "name": "rejectDispute",
      "description": "Reject a dispute with ID `_disputeID`. The arbitrator rejects a dispute as being invalid.",
      "parameterDecorators": [
        {
          "name": "_disputeID",
          "description": "ID of the dispute to be rejected.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setArbitrator(address)",
      "name": "setArbitrator",
      "description": "Update the arbitrator to `_arbitrator`. Set the arbitrator address.",
      "parameterDecorators": [
        {
          "name": "_arbitrator",
          "description": "The address of the arbitration contract or party.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setController(address)",
      "name": "setController",
      "description": "Set Controller. Only callable by current controller.",
      "parameterDecorators": [
        {
          "name": "_controller",
          "description": "Controller contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFishermanRewardPercentage(uint32)",
      "name": "setFishermanRewardPercentage",
      "description": "Update the reward percentage to `_percentage`. Set the percent reward that the fisherman gets when slashing occurs.",
      "parameterDecorators": [
        {
          "name": "_percentage",
          "description": "Reward as a percentage of indexer stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumDeposit(uint256)",
      "name": "setMinimumDeposit",
      "description": "Update the minimum deposit to `_minimumDeposit` Graph Tokens. Set the minimum deposit required to create a dispute.",
      "parameterDecorators": [
        {
          "name": "_minimumDeposit",
          "description": "The minimum deposit in Graph Tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSlashingPercentage(uint32,uint32)",
      "name": "setSlashingPercentage",
      "description": "Set the percentage used for slashing indexers.",
      "parameterDecorators": [
        {
          "name": "_qryPercentage",
          "description": "Percentage slashing for query disputes.",
          "recommendedTypes": []
        },
        {
          "name": "_idxPercentage",
          "description": "Percentage slashing for indexing disputes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "syncAllContracts()",
      "name": "syncAllContracts",
      "description": "Sync protocol contract addresses from the Controller registry. This function will cache all the contracts using the latest addresses Anyone can call the function whenever a Proxy contract change in the controller to ensure the protocol is using the latest version.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}