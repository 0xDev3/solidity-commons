{
  "schema": "../schema.json",
  "tags": [],
  "name": "ERC1538QueryDelegate",
  "description": "ERC1538QueryDelegate. Modern + commented solidity implementation of https://github.com/mudgen/transparent-contracts-erc1538/blob/master/contracts/ERC1538QueryDelegates.sol by Nick Mudge 2018.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "delegateAddress(string)",
      "name": "delegateAddress",
      "description": "Query the delegate associated with a function signature.",
      "parameterDecorators": [
        {
          "name": "_functionSignature",
          "description": "The queried function signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The delegate associated with a function signature.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delegateAddresses()",
      "name": "delegateAddresses",
      "description": "Query the array of all used delegates by this transparent contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The array of all used delegates by this transparent contract.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delegateFunctionSignatures(address)",
      "name": "delegateFunctionSignatures",
      "description": "Query the concatenation of all function signatures associated with a specific delegate. Might throw if too long, gas hungry.",
      "parameterDecorators": [
        {
          "name": "_delegate",
          "description": "The address of the queried delegate.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The concatenation of all function signatures associated with a specific delegate.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "functionById(bytes4)",
      "name": "functionById",
      "description": "Query the function signature and associated delegate of an EVM function hash.",
      "parameterDecorators": [
        {
          "name": "_functionId",
          "description": "The queried function EVM hash.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "signature",
          "description": "The signature associated with a function hash.",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "delegate",
          "description": "The delegate associated with a function hash.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "functionByIndex(uint256)",
      "name": "functionByIndex",
      "description": "Query the function details at a given index.",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "the index of the function in the transparent contract storage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "functionSignature",
          "description": "the function signature as a string.",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "functionId",
          "description": "it's EVM hashcall.",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        },
        {
          "name": "delegate",
          "description": "it's logic code smart contract address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "functionExists(string)",
      "name": "functionExists",
      "description": "Query if a function signature exist in the transparent contract.",
      "parameterDecorators": [
        {
          "name": "_functionSignature",
          "description": "the function signature as a string.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "TRUE if it exist, FALSE if it doesn't.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "functionSignatures()",
      "name": "functionSignatures",
      "description": "Query the concatenation of all function signatures. Might throw if too long, gas hungry.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The concatenation of all function signatures.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalFunctions()",
      "name": "totalFunctions",
      "description": "Query the number of supported function that can be ran by the proxy.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the number of supported function that can be ran by the proxy.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}