{"schema":"../schema.json","tags":["oracles","tokens"],"name":"Store","description":"An implementation of Store that can accept Oracle fees in ETH or any arbitrary ERC20 token.","eventDecorators":[{"signature":"AddedSharedMember(uint256,address,address)","name":"AddedSharedMember","description":"An event emitted when a vault is liquidated.","parameterDecorators":[{"name":"roleId","description":"","recommendedTypes":[],"indexed":true},{"name":"newMember","description":"","recommendedTypes":[],"indexed":true},{"name":"manager","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"NewFinalFee(tuple)","name":"NewFinalFee","description":"An event emitted when a vault is liquidated.","parameterDecorators":[{"name":"newFinalFee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewFixedOracleFeePerSecondPerPfc(tuple)","name":"NewFixedOracleFeePerSecondPerPfc","description":"An event emitted when a vault is liquidated.","parameterDecorators":[{"name":"newOracleFee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewWeeklyDelayFeePerSecondPerPfc(tuple)","name":"NewWeeklyDelayFeePerSecondPerPfc","description":"An event emitted when a vault is liquidated.","parameterDecorators":[{"name":"newWeeklyDelayFeePerSecondPerPfc","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RemovedSharedMember(uint256,address,address)","name":"RemovedSharedMember","description":"An event emitted when a vault is liquidated.","parameterDecorators":[{"name":"roleId","description":"","recommendedTypes":[],"indexed":true},{"name":"oldMember","description":"","recommendedTypes":[],"indexed":true},{"name":"manager","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ResetExclusiveMember(uint256,address,address)","name":"ResetExclusiveMember","description":"An event emitted when a vault is liquidated.","parameterDecorators":[{"name":"roleId","description":"","recommendedTypes":[],"indexed":true},{"name":"newMember","description":"","recommendedTypes":[],"indexed":true},{"name":"manager","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"SECONDS_PER_WEEK()","name":"SECONDS_PER_WEEK","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"addMember(uint256,address)","name":"addMember","description":"Adds `newMember` to the shared role, `roleId`. Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.","parameterDecorators":[{"name":"roleId","description":"the SharedRole membership to modify.","recommendedTypes":[]},{"name":"newMember","description":"the new SharedRole member.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"computeFinalFee(address)","name":"computeFinalFee","description":"Computes the final oracle fees that a contract should pay at settlement.","parameterDecorators":[{"name":"currency","description":"token used to pay the final fee.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"finalFee amount due denominated in units of `currency`.","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"computeRegularFee(uint256,uint256,tuple(uint256))","name":"computeRegularFee","description":"Computes the regular oracle fees that a contract should pay for a period. The late penalty is similar to the regular fee in that is is charged per second over the period between startTime and endTime. The late penalty percentage increases over time as follows: - 0-1 week since startTime: no late penalty - 1-2 weeks since startTime: 1x late penalty percentage is applied - 2-3 weeks since startTime: 2x late penalty percentage is applied - ...","parameterDecorators":[{"name":"startTime","description":"defines the beginning time from which the fee is paid.","recommendedTypes":[]},{"name":"endTime","description":"end time until which the fee is paid.","recommendedTypes":[]},{"name":"pfc","description":"\"profit from corruption\", or the maximum amount of margin currency that a token sponsor could extract from the contract through corrupting the price feed in their favor.","recommendedTypes":[],"parameters":[{"name":"rawValue","description":"","type":"uint256"}]}],"returnDecorators":[{"name":"regularFee","description":"amount owed for the duration from start to end time for the given pfc.","recommendedTypes":[],"solidityType":"tuple"},{"name":"latePenalty","description":"penalty percentage, if any, for paying the fee after the deadline.","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"finalFees(address)","name":"finalFees","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"rawValue","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"fixedOracleFeePerSecondPerPfc()","name":"fixedOracleFeePerSecondPerPfc","description":"","parameterDecorators":[],"returnDecorators":[{"name":"rawValue","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getCurrentTime()","name":"getCurrentTime","description":"Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"uint for the current Testable timestamp.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getMember(uint256)","name":"getMember","description":"Gets the current holder of the exclusive role, `roleId`. Reverts if `roleId` does not represent an initialized, exclusive role.","parameterDecorators":[{"name":"roleId","description":"the ExclusiveRole membership to check.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"the address of the current ExclusiveRole member.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"holdsRole(uint256,address)","name":"holdsRole","description":"Whether `memberToCheck` is a member of roleId. Reverts if roleId does not correspond to an initialized role.","parameterDecorators":[{"name":"roleId","description":"the Role to check.","recommendedTypes":[]},{"name":"memberToCheck","description":"the address to check.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if `memberToCheck` is a member of `roleId`.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"payOracleFees()","name":"payOracleFees","description":"Pays Oracle fees in ETH to the store. To be used by contracts whose margin currency is ETH.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"payOracleFeesErc20(address,tuple(uint256))","name":"payOracleFeesErc20","description":"Pays oracle fees in the margin currency, erc20Address, to the store. To be used if the margin currency is an ERC20 token rather than ETH.","parameterDecorators":[{"name":"erc20Address","description":"address of the ERC20 token used to pay the fee.","recommendedTypes":[]},{"name":"amount","description":"number of tokens to transfer. An approval for at least this amount must exist.","recommendedTypes":[],"parameters":[{"name":"rawValue","description":"","type":"uint256"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeMember(uint256,address)","name":"removeMember","description":"Removes `memberToRemove` from the shared role, `roleId`. Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.","parameterDecorators":[{"name":"roleId","description":"the SharedRole membership to modify.","recommendedTypes":[]},{"name":"memberToRemove","description":"the current SharedRole member to remove.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceMembership(uint256)","name":"renounceMembership","description":"Removes caller from the role, `roleId`. Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.","parameterDecorators":[{"name":"roleId","description":"the SharedRole membership to modify.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"resetMember(uint256,address)","name":"resetMember","description":"Changes the exclusive role holder of `roleId` to `newMember`. Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.","parameterDecorators":[{"name":"roleId","description":"the ExclusiveRole membership to modify.","recommendedTypes":[]},{"name":"newMember","description":"the new ExclusiveRole member.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setCurrentTime(uint256)","name":"setCurrentTime","description":"Sets the current time. Will revert if not running in test mode.","parameterDecorators":[{"name":"time","description":"timestamp to set current Testable time to.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setFinalFee(address,tuple(uint256))","name":"setFinalFee","description":"Sets a new final fee for a particular currency.","parameterDecorators":[{"name":"currency","description":"defines the token currency used to pay the final fee.","recommendedTypes":[]},{"name":"newFinalFee","description":"final fee amount.","recommendedTypes":[],"parameters":[{"name":"rawValue","description":"","type":"uint256"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setFixedOracleFeePerSecondPerPfc(tuple(uint256))","name":"setFixedOracleFeePerSecondPerPfc","description":"Sets a new oracle fee per second.","parameterDecorators":[{"name":"newFixedOracleFeePerSecondPerPfc","description":"new fee per second charged to use the oracle.","recommendedTypes":[],"parameters":[{"name":"rawValue","description":"","type":"uint256"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setWeeklyDelayFeePerSecondPerPfc(tuple(uint256))","name":"setWeeklyDelayFeePerSecondPerPfc","description":"Sets a new weekly delay fee.","parameterDecorators":[{"name":"newWeeklyDelayFeePerSecondPerPfc","description":"fee escalation per week of late fee payment.","recommendedTypes":[],"parameters":[{"name":"rawValue","description":"","type":"uint256"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"timerAddress()","name":"timerAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"weeklyDelayFeePerSecondPerPfc()","name":"weeklyDelayFeePerSecondPerPfc","description":"","parameterDecorators":[],"returnDecorators":[{"name":"rawValue","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(uint256)","name":"withdraw","description":"Withdraws ETH from the contract.","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawErc20(address,uint256)","name":"withdrawErc20","description":"Withdraws ERC20 tokens from the contract.","parameterDecorators":[{"name":"erc20Address","description":"ERC20 token to withdraw.","recommendedTypes":[]},{"name":"amount","description":"amount of tokens to withdraw.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}