{
  "schema": "../schema.json",
  "tags": [
    "nft"
  ],
  "name": "MarbleNFTFactory",
  "description": "Marble NFT Factory.",
  "eventDecorators": [
    {
      "signature": "MarbleNFTCreated(address,uint256)",
      "name": "MarbleNFTCreated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_creator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MarbleNFTBurned(uint256,address,address)",
      "name": "MarbleNFTBurned",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_creator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Pause()",
      "name": "Pause",
      "description": "",
      "parameterDecorators": []
    },
    {
      "signature": "Unpause()",
      "name": "Unpause",
      "description": "",
      "parameterDecorators": []
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "Function to check which interfaces are suported by this contract.",
      "parameterDecorators": [
        {
          "name": "_interfaceID",
          "description": "Id of the interface.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminList(uint256)",
      "name": "adminList",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeAdmin(address)",
      "name": "removeAdmin",
      "description": "Removes special rights for provided address.",
      "parameterDecorators": [
        {
          "name": "adminAddress",
          "description": "- address of current admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isAdmin(address)",
      "name": "isAdmin",
      "description": "Returns true, if provided address has special privilages, otherwise false.",
      "parameterDecorators": [
        {
          "name": "adminAddress",
          "description": "- address to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isIndeed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marbleNFTCandidateContract()",
      "name": "marbleNFTCandidateContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "called by the owner to unpause, returns to normal state.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "burn(uint256)",
      "name": "burn",
      "description": "Creates Marble NFT. Then place it over auction in special fashion and remove candidate entry......hmm removing of candidate is not important and we can remove it from the minting process. NOTE: !! rather careful with this stuff, it burns.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "Id of Marble NFT to burn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimOwnership()",
      "name": "claimOwnership",
      "description": "Allows the current pending owner to claim the ownership of the contract. It emits OwnershipTransferred event and resets pending owner to 0.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marbleNFTContract()",
      "name": "marbleNFTContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addAdmin(address)",
      "name": "addAdmin",
      "description": "Grants special rights for address holder.",
      "parameterDecorators": [
        {
          "name": "adminAddress",
          "description": "- address of future admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setLastMintedNFTId(uint256)",
      "name": "setLastMintedNFTId",
      "description": "Sets new last minted ID, !! use careful.",
      "parameterDecorators": [
        {
          "name": "_lastMintedNFTId",
          "description": "New value of last mineted NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "called by the owner to pause, triggers stopped state.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setCandidateContract(address)",
      "name": "setCandidateContract",
      "description": "Sets Candidate contract.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "Contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNFTContract(address)",
      "name": "setNFTContract",
      "description": "Sets Marble NFT contract.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "Contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mint(string,string,string,uint256,uint256,uint256)",
      "name": "mint",
      "description": "Creates Marble NFT. Then place it over auction in special fashion and remove candidate entry. NOTE: we are not removing candidates, should we or should we not??.",
      "parameterDecorators": [
        {
          "name": "_uri",
          "description": "URI determining Marble NFT, lets say this is our DNA...",
          "recommendedTypes": []
        },
        {
          "name": "_metadataUri",
          "description": "URI pointing to \"ERC721 Metadata JSON Schema\".",
          "recommendedTypes": []
        },
        {
          "name": "_candidateUri",
          "description": "URI initially provided to user for purposes of creation Marble NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_auctionStartingPrice",
          "description": "Starting price of auction.",
          "recommendedTypes": []
        },
        {
          "name": "_auctionMinimalPrice",
          "description": "Ending price of auction.",
          "recommendedTypes": []
        },
        {
          "name": "_auctionDuration",
          "description": "Duration (in seconds) of auction when price is moving, lets say, it determines dynamic part of auction price creation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMarbleDutchAuctionContract(address)",
      "name": "setMarbleDutchAuctionContract",
      "description": "Sets auction contract.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "Contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "marbleDutchAuctionContract()",
      "name": "marbleDutchAuctionContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastMintedNFTId()",
      "name": "lastMintedNFTId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingOwner()",
      "name": "pendingOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminsMap(address)",
      "name": "adminsMap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to give new owner ability to claim the ownership of the contract. This differs from the Owner's function in that it allows setting pedingOwner address to 0x0, which effectively cancels an active claim.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "The address which can claim ownership of the contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}