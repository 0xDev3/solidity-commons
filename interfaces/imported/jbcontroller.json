{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "JBController",
  "description": "A project can transfer control from this contract to another allowed controller contract at any time. Inherits from: IJBController - general interface for the generic controller methods in this contract that interacts with funding cycles and tokens according to the Juicebox protocol's rules. JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project. ReentrencyGuard - several function in this contract shouldn't be accessible recursively.",
  "eventDecorators": [
    {
      "signature": "BurnTokens(address,uint256,uint256,string,address)",
      "name": "BurnTokens",
      "description": "The event emitted when the uniswap window changes. Emitted when admins mapping is modified.",
      "parameterDecorators": [
        {
          "name": "holder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "memo",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DistributeReservedTokens(uint256,uint256,uint256,address,uint256,uint256,string,address)",
      "name": "DistributeReservedTokens",
      "description": "The event emitted when the uniswap window changes. Emitted when admins mapping is modified.",
      "parameterDecorators": [
        {
          "name": "fundingCycleConfiguration",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fundingCycleNumber",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "beneficiaryTokenCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "memo",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DistributeToReservedTokenSplit(uint256,uint256,uint256,tuple,uint256,address)",
      "name": "DistributeToReservedTokenSplit",
      "description": "The event emitted when the uniswap window changes. Emitted when admins mapping is modified.",
      "parameterDecorators": [
        {
          "name": "fundingCycleConfiguration",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fundingCycleNumber",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "split",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Migrate(uint256,address,address)",
      "name": "Migrate",
      "description": "The event emitted when the uniswap window changes. Emitted when admins mapping is modified.",
      "parameterDecorators": [
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MintTokens(address,uint256,uint256,string,uint256,address)",
      "name": "MintTokens",
      "description": "The event emitted when the uniswap window changes. Emitted when admins mapping is modified.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "memo",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reservedRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetFundAccessConstraints(uint256,uint256,uint256,tuple,address)",
      "name": "SetFundAccessConstraints",
      "description": "The event emitted when the uniswap window changes. Emitted when admins mapping is modified.",
      "parameterDecorators": [
        {
          "name": "fundingCycleConfiguration",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fundingCycleNumber",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "constraints",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "burnTokensOf(address,uint256,uint256,string,bool)",
      "name": "burnTokensOf",
      "description": "Burns a token holder's supply. Only a token's holder, a designated operator, or a project's terminal's delegate can burn it.",
      "parameterDecorators": [
        {
          "name": "_holder",
          "description": "The account that is having its tokens burned.",
          "recommendedTypes": []
        },
        {
          "name": "_projectId",
          "description": "The ID of the project to which the tokens being burned belong.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenCount",
          "description": "The number of tokens to burn.",
          "recommendedTypes": []
        },
        {
          "name": "_memo",
          "description": "A memo to pass along to the emitted event.",
          "recommendedTypes": []
        },
        {
          "name": "_preferClaimedTokens",
          "description": "A flag indicating whether ERC20's should be burned first if they have been issued.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeTokenOf(uint256,address,address)",
      "name": "changeTokenOf",
      "description": "Swap the current project's token that is minted and burned for another, and transfer ownership of the current token to another address if needed. Only a project owner or operator can change its token.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to which the changed token belongs.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "The new token.",
          "recommendedTypes": []
        },
        {
          "name": "_newOwner",
          "description": "An address to transfer the current token's ownership to. This is optional, but it cannot be done later.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "directory()",
      "name": "directory",
      "description": "The directory of terminals and controllers for projects.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "distributeReservedTokensOf(uint256,string)",
      "name": "distributeReservedTokensOf",
      "description": "Distributes all outstanding reserved tokens for a project.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to which the reserved tokens belong.",
          "recommendedTypes": []
        },
        {
          "name": "_memo",
          "description": "A memo to pass along to the emitted event.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of minted reserved tokens.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "distributionLimitCurrencyOf(uint256,uint256,address)",
      "name": "distributionLimitCurrencyOf",
      "description": "The currency of the amount of that a project can withdraw per funding cycle.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to get the distribution limit currency of.",
          "recommendedTypes": []
        },
        {
          "name": "_configuration",
          "description": "The configuration during which the distribution limit currency applies.",
          "recommendedTypes": []
        },
        {
          "name": "_terminal",
          "description": "The terminal from which distributions are being limited.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "distributionLimitOf(uint256,uint256,address)",
      "name": "distributionLimitOf",
      "description": "The amount of token that a project can withdraw per funding cycle.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to get the distribution limit of.",
          "recommendedTypes": []
        },
        {
          "name": "_configuration",
          "description": "The configuration during which the distribution limit applies.",
          "recommendedTypes": []
        },
        {
          "name": "_terminal",
          "description": "The terminal from which distributions are being limited.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fundingCycleStore()",
      "name": "fundingCycleStore",
      "description": "The contract storing all funding cycle configurations.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "issueTokenFor(uint256,string,string)",
      "name": "issueTokenFor",
      "description": "Issues an owner's ERC-20 Tokens that'll be used when claiming tokens. Deploys a project's ERC-20 token contract.Only a project owner or operator can issue its token.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project being issued tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "The ERC-20's name.",
          "recommendedTypes": []
        },
        {
          "name": "_symbol",
          "description": "The ERC-20's symbol.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "launchFundingCycleFor(uint256,tuple(uint256,uint256,uint256,address),tuple(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,tuple(uint256,tuple[])[],tuple(address,uint256,uint256,uint256,uint256)[],address[])",
      "name": "launchFundingCycleFor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "duration",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "weight",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "discountRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "ballot",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_metadata",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "reservedRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "redemptionRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "ballotRedemptionRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pausePay",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseDistributions",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseRedeem",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseMint",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseBurn",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowChangeToken",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowTerminalMigration",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowControllerMigration",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "holdFees",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "useLocalBalanceForRedemptions",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "useDataSourceForPay",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "useDataSourceForRedeem",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "dataSource",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_mustStartAtOrAfter",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_groupedSplits",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "group",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "splits",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_fundAccessConstraints",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "terminal",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "distributionLimit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "distributionLimitCurrency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "overflowAllowance",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "overflowAllowanceCurrency",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_terminals",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "configuration",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "launchProjectFor(address,tuple(string,uint256),tuple(uint256,uint256,uint256,address),tuple(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,tuple(uint256,tuple[])[],tuple(address,uint256,uint256,uint256,uint256)[],address[])",
      "name": "launchProjectFor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_projectMetadata",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "content",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "domain",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "duration",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "weight",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "discountRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "ballot",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_metadata",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "reservedRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "redemptionRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "ballotRedemptionRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pausePay",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseDistributions",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseRedeem",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseMint",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseBurn",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowChangeToken",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowTerminalMigration",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowControllerMigration",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "holdFees",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "useLocalBalanceForRedemptions",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "useDataSourceForPay",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "useDataSourceForRedeem",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "dataSource",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_mustStartAtOrAfter",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_groupedSplits",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "group",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "splits",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_fundAccessConstraints",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "terminal",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "distributionLimit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "distributionLimitCurrency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "overflowAllowance",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "overflowAllowanceCurrency",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_terminals",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "migrate(uint256,address)",
      "name": "migrate",
      "description": "Allows a project to migrate from this controller to another. Only a project's owner or a designated operator can migrate it.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project that will be migrated from this controller.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "The controller to which the project is migrating.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintTokensOf(uint256,uint256,address,string,bool,uint256)",
      "name": "mintTokensOf",
      "description": "Mint new token supply into an account. Only a project's owner, a designated operator, or one of its terminal's delegate can mint its tokens.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to which the tokens being minted belong.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenCount",
          "description": "The amount of tokens to mint.",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "The account that the tokens are being minted for.",
          "recommendedTypes": []
        },
        {
          "name": "_memo",
          "description": "A memo to pass along to the emitted event.",
          "recommendedTypes": []
        },
        {
          "name": "_preferClaimedTokens",
          "description": "A flag indicating whether ERC20's should be minted if they have been issued.",
          "recommendedTypes": []
        },
        {
          "name": "_reservedRate",
          "description": "The reserved rate to use when minting tokens. A positive amount will reduce the token count minted to the beneficiary, instead being reserved for preprogrammed splits. This number is out of 10000.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "beneficiaryTokenCount",
          "description": "The amount of tokens minted for the beneficiary.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "operatorStore()",
      "name": "operatorStore",
      "description": "A contract storing operator assignments.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "overflowAllowanceCurrencyOf(uint256,uint256,address)",
      "name": "overflowAllowanceCurrencyOf",
      "description": "The currency of the amount of overflow that a project is allowed to tap into.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to get the overflow allowance currency of.",
          "recommendedTypes": []
        },
        {
          "name": "_configuration",
          "description": "The configuration of the during which the allowance currency applies.",
          "recommendedTypes": []
        },
        {
          "name": "_terminal",
          "description": "The terminal managing the overflow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "overflowAllowanceOf(uint256,uint256,address)",
      "name": "overflowAllowanceOf",
      "description": "The amount of overflow that a project is allowed to tap into on-demand throughout configuration.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to get the overflow allowance of.",
          "recommendedTypes": []
        },
        {
          "name": "_configuration",
          "description": "The configuration of the during which the allowance applies.",
          "recommendedTypes": []
        },
        {
          "name": "_terminal",
          "description": "The terminal managing the overflow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prepForMigrationOf(uint256,address)",
      "name": "prepForMigrationOf",
      "description": "Allows other controllers to signal to this one that a migration is expected for the specified project.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project that will be migrated to this controller.",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "projects()",
      "name": "projects",
      "description": "The Projects contract which mints ERC-721's that represent project ownership.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reconfigureFundingCyclesOf(uint256,tuple(uint256,uint256,uint256,address),tuple(uint256,uint256,uint256,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool,address),uint256,tuple(uint256,tuple[])[],tuple(address,uint256,uint256,uint256,uint256)[])",
      "name": "reconfigureFundingCyclesOf",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "duration",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "weight",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "discountRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "ballot",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_metadata",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "reservedRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "redemptionRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "ballotRedemptionRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pausePay",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseDistributions",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseRedeem",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseMint",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "pauseBurn",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowChangeToken",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowTerminalMigration",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowControllerMigration",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "holdFees",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "useLocalBalanceForRedemptions",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "useDataSourceForPay",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "useDataSourceForRedeem",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "dataSource",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_mustStartAtOrAfter",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_groupedSplits",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "group",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "splits",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_fundAccessConstraints",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "terminal",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "distributionLimit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "distributionLimitCurrency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "overflowAllowance",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "overflowAllowanceCurrency",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reservedTokenBalanceOf(uint256,uint256)",
      "name": "reservedTokenBalanceOf",
      "description": "Gets the amount of reserved tokens that a project has available to distribute.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to get a reserved token balance of.",
          "recommendedTypes": []
        },
        {
          "name": "_reservedRate",
          "description": "The reserved rate to use when making the calculation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The current amount of reserved tokens.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "splitsStore()",
      "name": "splitsStore",
      "description": "The contract that stores splits for each project.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenStore()",
      "name": "tokenStore",
      "description": "The contract that manages token minting and burning.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}