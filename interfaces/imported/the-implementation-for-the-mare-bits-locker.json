{"schema":"../schema.json","tags":["locking"],"name":"MarebitsLocker","description":"The implementation for the Mare Bits Locker.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"This emits when ownership of a contract changes.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"TokenRedeemed(uint256,address,uint256,address,uint256,uint8)","name":"TokenRedeemed","description":"Emitted after a Mare Bits Locker Token is redeemed for its locked tokens.","parameterDecorators":[{"name":"accountId","description":"","recommendedTypes":[],"indexed":true},{"name":"owner","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenContract","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenId","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenType","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokensLocked(uint256,address,uint256,address,uint256,uint8,uint64)","name":"TokensLocked","description":"Emitted when a token is locked or the lock on a token is extended.","parameterDecorators":[{"name":"accountId","description":"","recommendedTypes":[],"indexed":true},{"name":"owner","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenContract","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenId","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenType","description":"","recommendedTypes":[],"indexed":false},{"name":"unlockTime","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"__burn(uint256)","name":"__burn","description":"Internally marks a token as having been burnt. Only callable by the {Ownable.owner} of this contract.","parameterDecorators":[{"name":"accountId","description":"representing the account being burned.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"__recoverEther()","name":"__recoverEther","description":"Recovers ether accidentally sent to this contract or the contracts owned by this one ({MarebitsLockerAccount}, {MarebitsLockerToken}, and {MarebitsVault}). Only callable by the {Ownable.owner} of this contract.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"__recoverTokens(uint8,address,uint256)","name":"__recoverTokens","description":"Recovers ERC20, ERC721, or ERC1155 tokens accidentally sent to this contract or the non-vault contracts owned by this one ({MarebitsLockerAccount} and {MarebitsLockerToken}). Only callable by the {Ownable.owner} of this contract.","parameterDecorators":[{"name":"tokenType","description":"of token to recover; see {Token.Type}.","recommendedTypes":[]},{"name":"tokenContract","description":"address of the token to recover.","recommendedTypes":[]},{"name":"tokenId","description":"of the token to recover; should always be 0 for ERC20 tokens.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"accounts()","name":"accounts","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"bestPony()","name":"bestPony","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"string the absolute best pony (hint: it's Twilight Sparkle).","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"extendLock(uint256,uint64)","name":"extendLock","description":"Extends the `unlockTime` for a given `accountId`. Emits a {TokensLocked} event.","parameterDecorators":[{"name":"accountId","description":"(also `tokenId`) representing the locked account.","recommendedTypes":[]},{"name":"unlockTime","description":"after which locked tokens can be withdrawn (in seconds after UNIX epoch, must be greater than existing `unlockTime` value).","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"accountId for the locked tokens.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":["TokensLocked(uint256,address,uint256,address,uint256,uint8,uint64)"],"readOnly":false},{"signature":"getAccount(uint256)","name":"getAccount","description":"Gets the account details for the account `accountId`.","parameterDecorators":[{"name":"accountId","description":"(also `tokenId`) representing the locked account.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Account.Info representing `accountId`; see {Account.Info}.","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"lockTokens(uint8,address,uint256,uint256,uint64)","name":"lockTokens","description":"Locks tokens in a Mare Bits Locker and issues a redeemable Mare Bits Locker Token that can be used to unlock the tokens after the time `unlockTime` has passed. Emits a {TokensLocked} event.","parameterDecorators":[{"name":"tokenType","description":"of token to be locked; see {Token.Type}.","recommendedTypes":[]},{"name":"tokenContract","description":"for the token to be locked.","recommendedTypes":[]},{"name":"tokenId","description":"of the token to be locked; should always be 0 for locked ERC20 tokens.","recommendedTypes":[]},{"name":"amount","description":"of tokens to lock in locker.","recommendedTypes":[]},{"name":"unlockTime","description":"after which locked tokens can be withdrawn (in seconds after UNIX epoch).","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"accountId for the locked tokens.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":["TokensLocked(uint256,address,uint256,address,uint256,uint8,uint64)"],"readOnly":false},{"signature":"lockerToken()","name":"lockerToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Get the address of the owner.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The address of the owner.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"redeemToken(uint256)","name":"redeemToken","description":"Redeems (burns) a Mare Bits Locker Token and transfers all locked tokens back to the caller. Emits a {TokenRedeemed} event.","parameterDecorators":[{"name":"accountId","description":"(also `tokenId`) representing the locked account.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["TokenRedeemed(uint256,address,uint256,address,uint256,uint8)"],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"Implementation of the {IERC165} interface.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newAccount`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"address of the new owner.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"vault()","name":"vault","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}