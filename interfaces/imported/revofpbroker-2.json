{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "RevoFPBroker",
  "description": "RevoFPBroker helps users get FP directly from staking tokens (skipping the step where you get LP first).",
  "eventDecorators": [
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "- The token recipient.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RFPBrokerDeposit(address,address,uint256,uint256,uint256,uint256)",
      "name": "RFPBrokerDeposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "farmBotAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "depositorAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token0Invested",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token1Invested",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lpGained",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fpGained",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RFPBrokerWithdrawal(address,address,uint256,uint256,uint256,uint256)",
      "name": "RFPBrokerWithdrawal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "farmBotAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "withdrawerAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fpBurned",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lpGained",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token0Gained",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token1Gained",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "- The token recipient.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "- The token recipient.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "- The token recipient.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUniswapLPAndDeposit(address,tuple(uint256,uint256,uint256,uint256),uint256)",
      "name": "getUniswapLPAndDeposit",
      "description": "Get LP and deposit them into a farm bot. Works only for farm bots implementing RevoUniswapStakingTokenStrategy.",
      "parameterDecorators": [
        {
          "name": "_farmBotAddress",
          "description": ": address of RevoUniswapStakingTokenStrategy contract.",
          "recommendedTypes": []
        },
        {
          "name": "_liquidityAmounts",
          "description": ": how much liquidity to add (grouped to avoid 'stack too deep' error).",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "amount0Desired",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "amount1Desired",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "amount0Min",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "amount1Min",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "_deadline",
          "description": ": deadline to finish transaction by, in epoch seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawFPForStakingTokens(address,uint256,uint256,uint256,uint256)",
      "name": "withdrawFPForStakingTokens",
      "description": "Withdraw from a farm bot and remove liquidity from the underlying pool.",
      "parameterDecorators": [
        {
          "name": "_farmBotAddress",
          "description": ": address of the farm bot to withdraw from.",
          "recommendedTypes": []
        },
        {
          "name": "_fpAmount",
          "description": ": amount to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "_amountAMin",
          "description": ": minimum amount of staking token 0 (aka \"token A\") to receive in exchange.",
          "recommendedTypes": []
        },
        {
          "name": "_amountBMin",
          "description": ": minimum amount of staking token 1 (aka \"token B\") to receive in exchange.",
          "recommendedTypes": []
        },
        {
          "name": "_deadline",
          "description": ": time to finish by, in epoch seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}