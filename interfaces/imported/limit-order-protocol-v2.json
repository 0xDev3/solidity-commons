{
  "schema": "../schema.json",
  "tags": [],
  "name": "LimitOrderProtocol",
  "description": "Limit Order Protocol v2.",
  "eventDecorators": [
    {
      "signature": "NonceIncreased(address,uint256)",
      "name": "NonceIncreased",
      "description": "Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newNonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OrderCanceled(address,bytes32,uint256)",
      "name": "OrderCanceled",
      "description": "Emitted when order gets cancelled. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "orderHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "remainingRaw",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OrderFilled(address,bytes32,uint256)",
      "name": "OrderFilled",
      "description": "Emitted every time order gets filled, including partial fills. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "orderHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "remaining",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OrderFilledRFQ(bytes32,uint256)",
      "name": "OrderFilledRFQ",
      "description": "Emitted when RFQ gets filled. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "orderHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "makingAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DOMAIN_SEPARATOR()",
      "name": "DOMAIN_SEPARATOR",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "LIMIT_ORDER_RFQ_TYPEHASH()",
      "name": "LIMIT_ORDER_RFQ_TYPEHASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "LIMIT_ORDER_TYPEHASH()",
      "name": "LIMIT_ORDER_TYPEHASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "advanceNonce(uint8)",
      "name": "advanceNonce",
      "description": "Advances nonce by specified amount.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "and(address[],bytes[])",
      "name": "and",
      "description": "Calls every target with corresponding data.",
      "parameterDecorators": [
        {
          "name": "targets",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result True if calls to all targets returned True. Otherwise, false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "arbitraryStaticCall(address,bytes)",
      "name": "arbitraryStaticCall",
      "description": "Performs an arbitrary call to target with data.",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result Bytes transmuted to uint256.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelOrder(tuple(uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes))",
      "name": "cancelOrder",
      "description": "Cancels order by setting remaining amount to zero.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "salt",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receiver",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getMakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getTakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "predicate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "permit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "interaction",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelOrderRFQ(uint256)",
      "name": "cancelOrderRFQ",
      "description": "Cancels order's quote.",
      "parameterDecorators": [
        {
          "name": "orderInfo",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "checkPredicate(tuple(uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes))",
      "name": "checkPredicate",
      "description": "Checks order predicate.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "salt",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receiver",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getMakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getTakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "predicate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "permit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "interaction",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "doublePrice(address,address,uint256,int256,uint256)",
      "name": "doublePrice",
      "description": "Calculates price of token A relative to token B. Note that order is important.",
      "parameterDecorators": [
        {
          "name": "oracle1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "oracle2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "spread",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "decimalsScale",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result Token A relative price times amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "eq(uint256,address,bytes)",
      "name": "eq",
      "description": "Calls target with specified data and tests if it's equal to the value.",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "Value to test.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result True if call to target returns the same value as `value`. Otherwise, false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fillOrder(tuple(uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,tuple(uint256,uint256,uint256))",
      "name": "fillOrder",
      "description": "Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "Order quote to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "salt",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receiver",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getMakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getTakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "predicate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "permit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "interaction",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "signature",
          "description": "Signature to confirm quote ownership.",
          "recommendedTypes": []
        },
        {
          "name": "orderAmounts",
          "description": "Amounts to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "thresholdAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillOrderRFQ(tuple(uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)",
      "name": "fillOrderRFQ",
      "description": "Fills order's quote, fully or partially (whichever is possible).",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "Order quote to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "info",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "signature",
          "description": "Signature to confirm quote ownership.",
          "recommendedTypes": []
        },
        {
          "name": "makingAmount",
          "description": "Making amount.",
          "recommendedTypes": []
        },
        {
          "name": "takingAmount",
          "description": "Taking amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillOrderRFQTo(tuple(uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address)",
      "name": "fillOrderRFQTo",
      "description": "Same as `fillOrderRFQ` but allows to specify funds destination instead of `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "Order quote to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "info",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "signature",
          "description": "Signature to confirm quote ownership.",
          "recommendedTypes": []
        },
        {
          "name": "makingAmount",
          "description": "Making amount.",
          "recommendedTypes": []
        },
        {
          "name": "takingAmount",
          "description": "Taking amount.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "Address that will receive swap funds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillOrderRFQToWithPermit(tuple(uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address,bytes)",
      "name": "fillOrderRFQToWithPermit",
      "description": "Fills Same as `fillOrderRFQ` but calls permit first, allowing to approve token spending and make a swap in one transaction. Also allows to specify funds destination instead of `msg.sender`. See tests for examples.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "Order quote to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "info",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "signature",
          "description": "Signature to confirm quote ownership.",
          "recommendedTypes": []
        },
        {
          "name": "makingAmount",
          "description": "Making amount.",
          "recommendedTypes": []
        },
        {
          "name": "takingAmount",
          "description": "Taking amount.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "Address that will receive swap funds.",
          "recommendedTypes": []
        },
        {
          "name": "permit",
          "description": "Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillOrderTo(tuple(uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,tuple(uint256,uint256,uint256),address)",
      "name": "fillOrderTo",
      "description": "Same as `fillOrder` but allows to specify funds destination instead of `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "Order quote to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "salt",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receiver",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getMakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getTakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "predicate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "permit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "interaction",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "signature",
          "description": "Signature to confirm quote ownership.",
          "recommendedTypes": []
        },
        {
          "name": "orderAmounts",
          "description": "Amounts to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "thresholdAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "target",
          "description": "Address that will receive swap funds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillOrderToWithExtraInteraction(tuple(uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,tuple(uint256,uint256,uint256),address,bytes)",
      "name": "fillOrderToWithExtraInteraction",
      "description": "Same as `fillOrderTo` but allows for additional interaction between asset transfers.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "Order quote to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "salt",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receiver",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getMakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getTakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "predicate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "permit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "interaction",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "signature",
          "description": "Signature to confirm quote ownership.",
          "recommendedTypes": []
        },
        {
          "name": "orderAmounts",
          "description": "Amounts to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "thresholdAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "target",
          "description": "Address that will receive swap funds.",
          "recommendedTypes": []
        },
        {
          "name": "extraInteraction",
          "description": "Optional interaction. If present, is triggered between asset transfers.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillOrderToWithPermit(tuple(uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,tuple(uint256,uint256,uint256),address,bytes)",
      "name": "fillOrderToWithPermit",
      "description": "Same as `fillOrder` but calls permit first, allowing to approve token spending and make a swap in one transaction. Also allows to specify funds destination instead of `msg.sender`. See tests for examples.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "Order quote to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "salt",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receiver",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getMakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getTakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "predicate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "permit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "interaction",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "signature",
          "description": "Signature to confirm quote ownership.",
          "recommendedTypes": []
        },
        {
          "name": "orderAmounts",
          "description": "Amounts to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "thresholdAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "target",
          "description": "Address that will receive swap funds.",
          "recommendedTypes": []
        },
        {
          "name": "permit",
          "description": "Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getMakerAmount(uint256,uint256,uint256)",
      "name": "getMakerAmount",
      "description": "Calculates maker amount.",
      "parameterDecorators": [
        {
          "name": "orderMakerAmount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "orderTakerAmount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "swapTakerAmount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result Floored maker amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTakerAmount(uint256,uint256,uint256)",
      "name": "getTakerAmount",
      "description": "Calculates taker amount.",
      "parameterDecorators": [
        {
          "name": "orderMakerAmount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "orderTakerAmount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "swapMakerAmount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result Ceiled taker amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "gt(uint256,address,bytes)",
      "name": "gt",
      "description": "Calls target with specified data and tests if it's bigger than value.",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "Value to test.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result True if call to target returns value which is bigger than `value`. Otherwise, false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hashOrder(tuple(uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes))",
      "name": "hashOrder",
      "description": "",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "salt",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receiver",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAssetData",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getMakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "getTakerAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "predicate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "permit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "interaction",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hashOrderRFQ(tuple(uint256,address,address,address,address,uint256,uint256))",
      "name": "hashOrderRFQ",
      "description": "",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "info",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "increaseNonce()",
      "name": "increaseNonce",
      "description": "Advances nonce by one.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "invalidatorForOrderRFQ(address,uint256)",
      "name": "invalidatorForOrderRFQ",
      "description": "Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes.",
      "parameterDecorators": [
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "slot",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result Each bit represents whether corresponding was already invalidated.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lt(uint256,address,bytes)",
      "name": "lt",
      "description": "Calls target with specified data and tests if it's lower than value.",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "Value to test.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result True if call to target returns value which is lower than `value`. Otherwise, false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nonce(address)",
      "name": "nonce",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nonceEquals(address,uint256)",
      "name": "nonceEquals",
      "description": "Checks if `makerAddress` has specified `makerNonce`.",
      "parameterDecorators": [
        {
          "name": "makerAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "makerNonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result True if `makerAddress` has specified nonce. Otherwise, false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "or(address[],bytes[])",
      "name": "or",
      "description": "Calls every target with corresponding data.",
      "parameterDecorators": [
        {
          "name": "targets",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result True if call to any target returned True. Otherwise, false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "remaining(bytes32)",
      "name": "remaining",
      "description": "Returns unfilled amount for order. Throws if order does not exist.",
      "parameterDecorators": [
        {
          "name": "orderHash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "remainingRaw(bytes32)",
      "name": "remainingRaw",
      "description": "Returns unfilled amount for order.",
      "parameterDecorators": [
        {
          "name": "orderHash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result Unfilled amount of order plus one if order exists. Otherwise 0.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "remainingsRaw(bytes32[])",
      "name": "remainingsRaw",
      "description": "Same as `remainingRaw` but for multiple orders.",
      "parameterDecorators": [
        {
          "name": "orderHashes",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "simulateCalls(address[],bytes[])",
      "name": "simulateCalls",
      "description": "Calls every target with corresponding data. Then reverts with CALL_RESULTS_0101011 where zeroes and ones denote failure or success of the corresponding call.",
      "parameterDecorators": [
        {
          "name": "targets",
          "description": "Array of addresses that will be called.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Array of data that will be passed to each call.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "singlePrice(address,uint256,uint256)",
      "name": "singlePrice",
      "description": "Calculates price of token relative to oracle unit (ETH or USD).",
      "parameterDecorators": [
        {
          "name": "oracle",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "inverseAndSpread",
          "description": "concatenated inverse flag and spread. Lowest 254 bits specify spread amount. Spread is scaled by 1e9, i.e. 101% = 1.01e9, 99% = 0.99e9. Highest bit is set when oracle price should be inverted, e.g. for DAI-ETH oracle, inverse=false means that we request DAI price in ETH and inverse=true means that we request ETH price in DAI.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount * spread * oracle price.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "timestampBelow(uint256)",
      "name": "timestampBelow",
      "description": "Checks passed time against block timestamp.",
      "parameterDecorators": [
        {
          "name": "time",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result True if current block timestamp is lower than `time`. Otherwise, false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}