{
  "schema": "../schema.json",
  "tags": [
    "swaps"
  ],
  "name": "RainbowRouter",
  "description": "Rainbow swap aggregator contract.",
  "eventDecorators": [
    {
      "signature": "EthWithdrawn(address,uint256)",
      "name": "EthWithdrawn",
      "description": "Event emitted when ETH fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerChanged(address,address)",
      "name": "OwnerChanged",
      "description": "Event emitted when the owner changes.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SwapTargetAdded(address)",
      "name": "SwapTargetAdded",
      "description": "Event emitted when a swap target gets added.",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SwapTargetRemoved(address)",
      "name": "SwapTargetRemoved",
      "description": "Event emitted when a swap target gets removed.",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TokenWithdrawn(address,address,uint256)",
      "name": "TokenWithdrawn",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "fillQuoteEthToToken(address,address,bytes,uint256)",
      "name": "fillQuoteEthToToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "buyTokenAddress",
          "description": "the address of token that the user should receive.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "the address of the aggregator contract that will exec the swap.",
          "recommendedTypes": []
        },
        {
          "name": "swapCallData",
          "description": "the calldata that will be passed to the aggregator contract.",
          "recommendedTypes": []
        },
        {
          "name": "feeAmount",
          "description": "the amount of ETH that we will take as a fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillQuoteTokenToEth(address,address,bytes,uint256,uint256)",
      "name": "fillQuoteTokenToEth",
      "description": "method that executes ERC20 to ETH token swaps with the ability to take a fee from the output.",
      "parameterDecorators": [
        {
          "name": "sellTokenAddress",
          "description": "the address of token that the user is selling.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "the address of the aggregator contract that will exec the swap.",
          "recommendedTypes": []
        },
        {
          "name": "swapCallData",
          "description": "the calldata that will be passed to the aggregator contract.",
          "recommendedTypes": []
        },
        {
          "name": "sellAmount",
          "description": "the amount of tokens that the user is selling.",
          "recommendedTypes": []
        },
        {
          "name": "feePercentageBasisPoints",
          "description": "the amount of ETH that we will take as a fee in 1e18 basis points (basis points with 4 decimals plus 14 extra decimals of precision).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillQuoteTokenToEthWithPermit(address,address,bytes,uint256,uint256,tuple(uint256,uint256,uint256,bool,uint8,bytes32,bytes32))",
      "name": "fillQuoteTokenToEthWithPermit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sellTokenAddress",
          "description": "the address of token that the user is selling.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "the address of the aggregator contract that will exec the swap.",
          "recommendedTypes": []
        },
        {
          "name": "swapCallData",
          "description": "the calldata that will be passed to the aggregator contract.",
          "recommendedTypes": []
        },
        {
          "name": "sellAmount",
          "description": "the amount of tokens that the user is selling.",
          "recommendedTypes": []
        },
        {
          "name": "feePercentageBasisPoints",
          "description": "the amount of ETH that we will take as a fee in 1e18 basis points (basis points with 4 decimals plus 14 extra decimals of precision).",
          "recommendedTypes": []
        },
        {
          "name": "permitData",
          "description": "struct containing the amount, nonce, deadline, v, r and s values of the permit data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "value",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "isDaiStylePermit",
              "description": "",
              "type": "bool"
            },
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillQuoteTokenToToken(address,address,address,bytes,uint256,uint256)",
      "name": "fillQuoteTokenToToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sellTokenAddress",
          "description": "the address of token that the user is selling.",
          "recommendedTypes": []
        },
        {
          "name": "buyTokenAddress",
          "description": "the address of token that the user should receive.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "the address of the aggregator contract that will exec the swap.",
          "recommendedTypes": []
        },
        {
          "name": "swapCallData",
          "description": "the calldata that will be passed to the aggregator contract.",
          "recommendedTypes": []
        },
        {
          "name": "sellAmount",
          "description": "the amount of tokens that the user is selling.",
          "recommendedTypes": []
        },
        {
          "name": "feeAmount",
          "description": "the amount of the tokens to sell that we will take as a fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillQuoteTokenToTokenWithPermit(address,address,address,bytes,uint256,uint256,tuple(uint256,uint256,uint256,bool,uint8,bytes32,bytes32))",
      "name": "fillQuoteTokenToTokenWithPermit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sellTokenAddress",
          "description": "the address of token that the user is selling.",
          "recommendedTypes": []
        },
        {
          "name": "buyTokenAddress",
          "description": "the address of token that the user should receive.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "the address of the aggregator contract that will exec the swap.",
          "recommendedTypes": []
        },
        {
          "name": "swapCallData",
          "description": "the calldata that will be passed to the aggregator contract.",
          "recommendedTypes": []
        },
        {
          "name": "sellAmount",
          "description": "the amount of tokens that the user is selling.",
          "recommendedTypes": []
        },
        {
          "name": "feeAmount",
          "description": "the amount of the tokens to sell that we will take as a fee.",
          "recommendedTypes": []
        },
        {
          "name": "permitData",
          "description": "struct containing the value, nonce, deadline, v, r and s values of the permit data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "value",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "isDaiStylePermit",
              "description": "",
              "type": "bool"
            },
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swapTargets(address)",
      "name": "swapTargets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`).",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "address of the new owner Can only be called by the current owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateSwapTargets(address,bool)",
      "name": "updateSwapTargets",
      "description": "method to add or remove swap targets from swapTargets This is required so we only approve \"trusted\" swap targets to transfer tokens out of this contract.",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "address of the swap target to add.",
          "recommendedTypes": []
        },
        {
          "name": "add",
          "description": "flag to add or remove the swap target.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawEth(address,uint256)",
      "name": "withdrawEth",
      "description": "method to withdraw ETH (from the fees).",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "address that's receiving the ETH.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "amount of ETH to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawToken(address,address,uint256)",
      "name": "withdrawToken",
      "description": "method to withdraw ERC20 tokens (from the fees).",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "address of the token to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "address that's receiving the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "amount of tokens to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}