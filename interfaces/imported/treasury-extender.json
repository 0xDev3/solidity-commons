{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "TreasuryExtender",
  "description": "Treasury Extender.",
  "eventDecorators": [
    {
      "signature": "AllocatorFunded(uint256,uint256,uint256)",
      "name": "AllocatorFunded",
      "description": "Emitted when an Allocator is funded.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AllocatorLimitsChanged(uint256,uint128,uint128)",
      "name": "AllocatorLimitsChanged",
      "description": "Emitted when an Allocator limits are modified.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "allocationLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lossLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AllocatorReportedGain(uint256,uint128)",
      "name": "AllocatorReportedGain",
      "description": "Emitted when an Allocator reports a gain.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "gain",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AllocatorReportedLoss(uint256,uint128)",
      "name": "AllocatorReportedLoss",
      "description": "Emitted when an Allocator reports a loss.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "loss",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AllocatorReportedMigration(uint256)",
      "name": "AllocatorReportedMigration",
      "description": "Emitted when an Allocator reports a migration.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AllocatorRewardsWithdrawal(address,uint256,uint256)",
      "name": "AllocatorRewardsWithdrawal",
      "description": "Emitted when rewards are withdrawn from an Allocator.",
      "parameterDecorators": [
        {
          "name": "allocator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AllocatorWithdrawal(uint256,uint256,uint256)",
      "name": "AllocatorWithdrawal",
      "description": "Emitted when allocated funds are withdrawn from an Allocator.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AuthorityUpdated(address)",
      "name": "AuthorityUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "authority",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewDepositRegistered(address,address,uint256)",
      "name": "NewDepositRegistered",
      "description": "Emitted when a new Deposit is registered.",
      "parameterDecorators": [
        {
          "name": "allocator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "allocatorData(address,uint256)",
      "name": "allocatorData",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "holdings",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "allocated",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "limits",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "allocated",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint128"
            },
            {
              "name": "loss",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint128"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "performance",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "gain",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint128"
            },
            {
              "name": "loss",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint128"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allocators(uint256)",
      "name": "allocators",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "authority()",
      "name": "authority",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllocatorAllocated(uint256)",
      "name": "getAllocatorAllocated",
      "description": "Get an Allocators amount allocated. This is simply the amount of `token` which was allocated to the allocator.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the Allocator's amount allocated.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllocatorByID(uint256)",
      "name": "getAllocatorByID",
      "description": "Get an Allocators address by it's ID. Our first Allocator is at index 1, NOTE: 0 is a placeholder.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "the id of the allocator, NOTE: valid interval: 1 =< id < allocators.length.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "allocatorAddress",
          "description": "the allocator's address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllocatorLimits(uint256)",
      "name": "getAllocatorLimits",
      "description": "Get an Allocators limits. For an explanation of AllocatorLimits, see `setAllocatorLimits`.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the Allocator's limits.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "allocated",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint128"
            },
            {
              "name": "loss",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint128"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllocatorPerformance(uint256)",
      "name": "getAllocatorPerformance",
      "description": "Get an Allocators performance. An Allocator's performance is the amount of `gain` and `loss` it has sustained in its lifetime. `gain` is the amount of allocated tokens (underlying) acquired, while `loss` is the amount lost. `gain` and `loss` are incremented separately. Thus, overall performance can be gauged as gain - loss.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the Allocator's performance.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "gain",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint128"
            },
            {
              "name": "loss",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint128"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalAllocatorCount()",
      "name": "getTotalAllocatorCount",
      "description": "Get the total number of Allocators ever registered. Our first Allocator is at index 1, 0 is a placeholder.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "total number of allocators ever registered.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registerDeposit(address)",
      "name": "registerDeposit",
      "description": "Registers an Allocator. Adds a deposit id and prepares storage slots for writing. Does not activate the Allocator. Calls `addId` from `IAllocator` with the index of the deposit in `allocators`.",
      "parameterDecorators": [
        {
          "name": "newAllocator",
          "description": "the Allocator to be registered.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "report(uint256,uint128,uint128)",
      "name": "report",
      "description": "Reports an Allocators status to the Extender. Updates Extender state accordingly. Can only be called while the Allocator is activated or migrating. The idea is that first the Allocator updates its own state, then it reports this state to the Extender, which then updates its own state. There is 3 different combinations the Allocator may report: (gain + loss) == 0, the Allocator will NEVER report this state gain > loss, gain is reported and incremented but allocated not. loss > gain, loss is reported, allocated and incremented. loss == gain == type(uint128).max , migration case, zero out gain, loss, allocated NOTE: please take care to properly calculate loss by, say, only reporting loss above a % threshold of allocated. This is to serve as a low pass filter of sorts to ignore noise in price movements. NOTE: when migrating the next Allocator should report his state to the Extender, in say an `_activate` call.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "the deposit id of the token to report state for.",
          "recommendedTypes": []
        },
        {
          "name": "gain",
          "description": "the gain the Allocator has made in allocated token.",
          "recommendedTypes": []
        },
        {
          "name": "loss",
          "description": "the loss the Allocator has sustained in allocated token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestFundsFromTreasury(uint256,uint256)",
      "name": "requestFundsFromTreasury",
      "description": "Requests funds from the Olympus Treasury to fund an Allocator. Can only be called while the Allocator is activated. Can only be called by the Guardian. This function is going to allocate an `amount` of deposit id tokens to the Allocator and properly record this in storage. This done so that at any point, we know exactly how much was initially allocated and also how much value is allocated in total. The related functions are `getAllocatorAllocated` and `getTotalValueAllocated`. To note is also the `_allocatorBelowLimit` check.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "the deposit id of the token to fund allocator with.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the amount of token to withdraw, the token is known in the Allocator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "returnFundsToTreasury(uint256,uint256)",
      "name": "returnFundsToTreasury",
      "description": "Returns funds from an Allocator to the Treasury. External hook: Logic is handled in the internal function. Can only be called by the Guardian. This function is going to withdraw `amount` of allocated token from an Allocator back to the Treasury. Prior to calling this function, `deallocate` should be called, in order to prepare the funds for withdrawal. The maximum amount which can be withdrawn is `gain` + `allocated`. `allocated` is decremented first after which `gain` is decremented in the case that `allocated` is not sufficient.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "the deposit id of the token to fund allocator with.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the amount of token to withdraw, the token is known in the Allocator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "returnRewardsToTreasury(address,address,uint256)",
      "name": "returnRewardsToTreasury",
      "description": "Returns rewards from an Allocator to the Treasury. Also see `_returnRewardsToTreasury`. External hook: Logic is handled in the internal function. Can only be called by the Guardian.",
      "parameterDecorators": [
        {
          "name": "allocatorAddress",
          "description": "the address of the Allocator to returns rewards from.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "the address of the reward token to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the amount of the reward token to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "returnRewardsToTreasury(uint256,address,uint256)",
      "name": "returnRewardsToTreasury",
      "description": "Returns rewards from an Allocator to the Treasury. Also see `_returnRewardsToTreasury`. External hook: Logic is handled in the internal function. Can only be called by the Guardian.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "the deposit id of the token to fund allocator with.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "the address of the reward token to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the amount of the reward token to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAllocatorLimits(uint256,tuple(uint128,uint128))",
      "name": "setAllocatorLimits",
      "description": "Sets an Allocators AllocatorLimits. AllocatorLimits is part of AllocatorData, variable meanings follow: allocated - The maximum amount a Guardian may allocate this Allocator from Treasury. loss - The maximum loss amount this Allocator can take. Can only be called while the Allocator is offline.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "the deposit id to set AllocatorLimits for.",
          "recommendedTypes": []
        },
        {
          "name": "limits",
          "description": "the AllocatorLimits to set.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "allocated",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "loss",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAuthority(address)",
      "name": "setAuthority",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newAuthority",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "treasury()",
      "name": "treasury",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}