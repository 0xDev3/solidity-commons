{
  "schema": "../schema.json",
  "tags": [
    "vesting"
  ],
  "name": "LUSDAllocator",
  "description": "Contract deploys reserves from treasury into the liquity stabilty pool, and those rewards are then paid out to the staking contract. See harvest() function for more details.",
  "eventDecorators": [
    {
      "signature": "AuthorityUpdated(address)",
      "name": "AuthorityUpdated",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "authority",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Deposit(address,uint256)",
      "name": "Deposit",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "dst",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "FEE_PRECISION()",
      "name": "FEE_PRECISION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "POOL_FEE_MAX()",
      "name": "POOL_FEE_MAX",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "authority()",
      "name": "authority",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(uint256)",
      "name": "deposit",
      "description": "withdraws asset from treasury, deposits asset into stability pool.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "uint.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ethToLUSDRatio()",
      "name": "ethToLUSDRatio",
      "description": "The target percent of eth to swap to LUSD at uniswap. divide by 1e6 to get actual value. Examples: 500000 => 500000 / 1e6 = 0.50 = 50% 330000 => 330000 / 1e6 = 0.33 = 33%.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "frontEndAddress()",
      "name": "frontEndAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getETHRewards()",
      "name": "getETHRewards",
      "description": "get ETH rewards from SP.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLQTYRewards()",
      "name": "getLQTYRewards",
      "description": "get LQTY rewards from SP.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "harvest(uint256)",
      "name": "harvest",
      "description": "claims LQTY & ETH Rewards. minETHLUSDRate minimum rate of when swapping ETH->LUSD. e.g. 3500 means we swap at a rate of 1 ETH for a minimum 3500 LUSD 1. Harvest from LUSD StabilityPool to get ETH+LQTY rewards 2. Stake LQTY rewards from #1. This txn will also give out any outstanding ETH+LUSD rewards from prior staking 3. If we have eth, convert to weth, then swap a percentage of it to LUSD. If swap successul then send all remaining WETH to treasury 4. Deposit LUSD from #2 and potentially #3 into StabilityPool.",
      "parameterDecorators": [
        {
          "name": "minETHLUSDRate",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hopTokenAddress()",
      "name": "hopTokenAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lqtyTokenAddress()",
      "name": "lqtyTokenAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lusdTokenAddress()",
      "name": "lusdTokenAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolFee()",
      "name": "poolFee",
      "description": "poolFee parameter for uniswap swaprouter, divide by 1e6 to get the actual value. See https://docs.uniswap.org/protocol/guides/swaps/multihop-swaps#calling-the-function-1 Maximum allowed value is 10000 (1%) Examples: poolFee = 3000 => 3000 / 1e6 = 0.003 = 0.3% poolFee = 10000 => 10000 / 1e6 = 0.01 = 1.0%.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAuthority(address)",
      "name": "setAuthority",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newAuthority",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setEthToLUSDRatio(uint256)",
      "name": "setEthToLUSDRatio",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_ethToLUSDRatio",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFrontEndAddress(address)",
      "name": "setFrontEndAddress",
      "description": "setsFrontEndAddress for Stability pool rewards.",
      "parameterDecorators": [
        {
          "name": "_frontEndAddress",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setHopTokenAddress(address)",
      "name": "setHopTokenAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_hopTokenAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPoolFee(uint256)",
      "name": "setPoolFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_poolFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalAmountDeployed()",
      "name": "totalAmountDeployed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalValueDeployed()",
      "name": "totalValueDeployed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "treasury()",
      "name": "treasury",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateTreasury()",
      "name": "updateTreasury",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(address,uint256)",
      "name": "withdraw",
      "description": "withdraws from stability pool, and deposits asset into treasury.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "uint.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}