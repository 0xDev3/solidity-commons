{
  "schema": "../schema.json",
  "tags": [
    "dao"
  ],
  "name": "EndaomentAdmin",
  "description": "EndaomentAdmin. Provides admin controls for the Endaoment contract ecosystem using a roles-based system. Available roles are PAUSER (1), ACCOUNTANT (2), REVIEWER (3), FUND_FACTORY (4), ORG_FACTORY (5), and ADMIN (6).",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleModified(uint8,address)",
      "name": "RoleModified",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RolePaused(uint8)",
      "name": "RolePaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleUnpaused(uint8)",
      "name": "RoleUnpaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TransferCancelled(address)",
      "name": "TransferCancelled",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newPotentialOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TransferInitiated(address)",
      "name": "TransferInitiated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "Transfers ownership of the contract to the caller. Can only be called by a new potential owner set by the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelOwnershipTransfer()",
      "name": "cancelOwnershipTransfer",
      "description": "Cancel a transfer of ownership to a new account. Can only be called by the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getNewPotentialOwner()",
      "name": "getNewPotentialOwner",
      "description": "Returns the address of the current potential new owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOwner()",
      "name": "getOwner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAddress(uint8)",
      "name": "getRoleAddress",
      "description": "External view function to check the account currently holding the given role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "The desired role to fetch the current address of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The address of the requested role, or the null address if none is set.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPaused(uint8)",
      "name": "isPaused",
      "description": "External view function to check whether or not the functionality associated with a given role is currently paused or not. The owner or the pauser may pause any given role (including the pauser itself), but only the owner may unpause functionality. Additionally, the owner may call paused functions directly.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "The role to check the pause status on.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "A boolean to indicate if the functionality associated with the role in question is currently paused.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRole(uint8)",
      "name": "isRole",
      "description": "External view function to check whether the caller is the current role holder.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "The role to check for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "A boolean indicating if the caller has the specified role.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause(uint8)",
      "name": "pause",
      "description": "Pause a currently unpaused role and emit a `RolePaused` event. Only the owner or the designated pauser may call this function. Also, bear in mind that only the owner may unpause a role once paused.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "The role to pause.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeRole(uint8)",
      "name": "removeRole",
      "description": "Remove any current role bearer for a given role and emit a `RoleModified` event if a role holder was previously set. Only the owner may call this function.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "The role that the account will be removed from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRole(uint8,address)",
      "name": "setRole",
      "description": "Set a new account on a given role and emit a `RoleModified` event if the role holder has changed. Only the owner may call this function.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "The role that the account will be set for.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "The account to set as the designated role bearer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows a new account (`newOwner`) to accept ownership. Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newPotentialOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause(uint8)",
      "name": "unpause",
      "description": "Unpause a currently paused role and emit a `RoleUnpaused` event. Only the owner may call this function.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "The role to pause.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}