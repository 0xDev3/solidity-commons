{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "SuperTokenFactory",
  "description": "",
  "eventDecorators": [
    {
      "signature": "CodeUpdated(bytes32,address)",
      "name": "CodeUpdated",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "uuid",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "codeAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CustomSuperTokenCreated(address)",
      "name": "CustomSuperTokenCreated",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SuperTokenCreated(address)",
      "name": "SuperTokenCreated",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SuperTokenLogicCreated(address)",
      "name": "SuperTokenLogicCreated",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "tokenLogic",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "createERC20Wrapper(address,uint8,string,string)",
      "name": "createERC20Wrapper",
      "description": "Create new super token wrapper for the underlying ERC20 token with extra token info.",
      "parameterDecorators": [
        {
          "name": "underlyingToken",
          "description": "Underlying ERC20 token.",
          "recommendedTypes": []
        },
        {
          "name": "upgradability",
          "description": "Upgradability mode.",
          "recommendedTypes": []
        },
        {
          "name": "name",
          "description": "Super token name.",
          "recommendedTypes": []
        },
        {
          "name": "symbol",
          "description": "Super token symbol NOTE: - It assumes token provide the .decimals() function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "superToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createERC20Wrapper(address,uint8,uint8,string,string)",
      "name": "createERC20Wrapper",
      "description": "Create new super token wrapper for the underlying ERC20 token.",
      "parameterDecorators": [
        {
          "name": "underlyingToken",
          "description": "Underlying ERC20 token.",
          "recommendedTypes": []
        },
        {
          "name": "underlyingDecimals",
          "description": "Underlying token decimals.",
          "recommendedTypes": []
        },
        {
          "name": "upgradability",
          "description": "Upgradability mode.",
          "recommendedTypes": []
        },
        {
          "name": "name",
          "description": "Super token name.",
          "recommendedTypes": []
        },
        {
          "name": "symbol",
          "description": "Super token symbol.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "superToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createSuperTokenLogic(address)",
      "name": "createSuperTokenLogic",
      "description": "",
      "parameterDecorators": [
        {
          "name": "host",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "logic",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getCodeAddress()",
      "name": "getCodeAddress",
      "description": "Get current implementation code address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "codeAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getHost()",
      "name": "getHost",
      "description": "ISuperTokenFactory.getHost implementation.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "host",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSuperTokenLogic()",
      "name": "getSuperTokenLogic",
      "description": "Get the current super token logic used by the factory.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize()",
      "name": "initialize",
      "description": "Initialize the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initializeCustomSuperToken(address)",
      "name": "initializeCustomSuperToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "customSuperTokenProxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proxiableUUID()",
      "name": "proxiableUUID",
      "description": "Proxiable UUID marker function. This would help to avoid wrong logic contract to be used for upgrading.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateCode(address)",
      "name": "updateCode",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}