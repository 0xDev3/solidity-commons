{
  "schema": "../schema.json",
  "tags": [],
  "name": "Merchant",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AddLiquidityFailed(uint256,uint256,address)",
      "name": "AddLiquidityFailed",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "tokenAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "etherAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AdminTokenRecovery(address,uint256)",
      "name": "AdminTokenRecovery",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "tokenRecovered",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AffiliatePoolUpdated(address,address)",
      "name": "AffiliatePoolUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "oldPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AffiliatorWalletUpdatd(address,address)",
      "name": "AffiliatorWalletUpdatd",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "oldWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DonationFeeUpdated(uint256,uint256)",
      "name": "DonationFeeUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "previousFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DonationWalletUpdated(address,address)",
      "name": "DonationWalletUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "oldWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FeeMaxPercentUpdated(uint256,uint256)",
      "name": "FeeMaxPercentUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "previousFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FeeMinPercentUpdated(uint256,uint256)",
      "name": "FeeMinPercentUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "previousFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FeeProcessingMethodUpdated(uint8,uint8)",
      "name": "FeeProcessingMethodUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "oldMethod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newMethod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MainSwapRouterUpdated(address,address)",
      "name": "MainSwapRouterUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "oldRouter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newRouter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MarketingWalletUpdated(address,address)",
      "name": "MarketingWalletUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "oldWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MerchantWalletUpdated(address,address)",
      "name": "MerchantWalletUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "oldWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MinAmountToProcessFeeUpdated(uint256,uint256)",
      "name": "MinAmountToProcessFeeUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "oldAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewTransaction(bytes16,address,address,uint256,uint256)",
      "name": "NewTransaction",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "txId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "userAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "payingToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timeStamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Pause()",
      "name": "Pause",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": []
    },
    {
      "signature": "StakingPoolUpdated(address,address)",
      "name": "StakingPoolUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "oldPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SwapEtherToWeb3TokenFailed(uint256)",
      "name": "SwapEtherToWeb3TokenFailed",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "etherAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SwapRouterAdded(address)",
      "name": "SwapRouterAdded",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "newRouter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TransactionFeeUpdated(uint16,uint16)",
      "name": "TransactionFeeUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "previousFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpause()",
      "name": "Unpause",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": []
    },
    {
      "signature": "Web3BalanceForFreeTxUpdated(uint256,uint256)",
      "name": "Web3BalanceForFreeTxUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "previousBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Web3TokenUpdated(address,address)",
      "name": "Web3TokenUpdated",
      "description": "Event for token purchase logging. Event emitted in purchases. `buyer` is the account that sent the ETH, `beneficiary` is the account that got the tokens, `weiAmount` the amount of wei received from `buyer` and sent to the wallet, `tokenAmount` is the amount of tokens sent to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "oldToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MAX_TRANSACTION_FEE()",
      "name": "MAX_TRANSACTION_FEE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MERCHANT_FACTORY()",
      "name": "MERCHANT_FACTORY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addSwapRouter(address)",
      "name": "addSwapRouter",
      "description": "Update the swap router. Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_router",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "affiliatorWallet()",
      "name": "affiliatorWallet",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "donationFeeCollected()",
      "name": "donationFeeCollected",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "excludeFromPayTokenBlacklist(address)",
      "name": "excludeFromPayTokenBlacklist",
      "description": "Exclude a token from paying blacklist Only callable by owner.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "excludeFromRecTokenWhitelist(address)",
      "name": "excludeFromRecTokenWhitelist",
      "description": "Exclude a token from receiving whitelist Only callable by owner.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feeProcessingMethod()",
      "name": "feeProcessingMethod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmountIn(address,uint256,address[])",
      "name": "getAmountIn",
      "description": "Get in-amount to get out-amount of receive token.",
      "parameterDecorators": [
        {
          "name": "_payingToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amountOut",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "in-amount of token.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmountOut(address,uint256,address[])",
      "name": "getAmountOut",
      "description": "Get out-amount from the in-amount of token.",
      "parameterDecorators": [
        {
          "name": "_payingToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amountIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "out-amount of receive token.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFeeAmount(address,uint256,address[])",
      "name": "getFeeAmount",
      "description": "Get fee amount from the in-amount of token.",
      "parameterDecorators": [
        {
          "name": "_payingTokenAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amountIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "feePath",
          "description": ": swap path from _payingTokenAddress to WETH.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "totalFee: in Ether.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_1",
          "description": "donationFee: in Ether.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTxDetailById(bytes16)",
      "name": "getTxDetailById",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_txNumber",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserAllTxDetails(address)",
      "name": "getUserAllTxDetails",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes16[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserTxCount(address)",
      "name": "getUserTxCount",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "includeInPayTokenBlacklist(address)",
      "name": "includeInPayTokenBlacklist",
      "description": "Include a token in paying blacklist Only callable by owner.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "includeInRecTokenWhitelist(address)",
      "name": "includeInRecTokenWhitelist",
      "description": "Include a token in receiving whitelist Only callable by owner.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address,address,address,address)",
      "name": "initialize",
      "description": "Initialize merchant contract Only merchant factory callable.",
      "parameterDecorators": [
        {
          "name": "_merchantFactory",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_merchantWallet",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_receiveToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_merchantOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isBlacklistedFromPayToken(address)",
      "name": "isBlacklistedFromPayToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isInitialized()",
      "name": "isInitialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isWhitelistedForRecToken(address)",
      "name": "isWhitelistedForRecToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "merchantWallet()",
      "name": "merchantWallet",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "called by the owner to pause, triggers stopped state.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "receiveToken()",
      "name": "receiveToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recoverWrongTokens(address,uint256)",
      "name": "recoverWrongTokens",
      "description": "It allows the admin to recover wrong tokens sent to the contract. This function is only callable by admin.",
      "parameterDecorators": [
        {
          "name": "_tokenAddress",
          "description": ": the address of the token to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenAmount",
          "description": ": the number of tokens to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "submitTransaction(address,uint256,address[],address[])",
      "name": "submitTransaction",
      "description": "Submit transaction.",
      "parameterDecorators": [
        {
          "name": "_payingTokenAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amountIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "path",
          "description": ": swap path from _payingTokenAddress to receive token.",
          "recommendedTypes": []
        },
        {
          "name": "feePath",
          "description": ": swap path from _payingTokenAddress to WETH.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "txNumber",
          "description": "Transaction number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalTxCount()",
      "name": "totalTxCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transactionPagination(address,uint256,uint256)",
      "name": "transactionPagination",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_offset",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_length",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_txIds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes16[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "called by the owner to unpause, returns to normal state.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateAffiliatorWalletAddress(address)",
      "name": "updateAffiliatorWalletAddress",
      "description": "Update affiliator wallet address Only callable by owner.",
      "parameterDecorators": [
        {
          "name": "_walletAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateDonationFee(uint16)",
      "name": "updateDonationFee",
      "description": "Update donation fee Only callable by owner.",
      "parameterDecorators": [
        {
          "name": "_fee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateDonationWallet(address)",
      "name": "updateDonationWallet",
      "description": "Update the donation wallet address Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_donationWallet",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateFeeMaxPercent(uint16)",
      "name": "updateFeeMaxPercent",
      "description": "Update fee max percentage Only callable by owner.",
      "parameterDecorators": [
        {
          "name": "_maxPercent",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateFeeMinPercent(uint16)",
      "name": "updateFeeMinPercent",
      "description": "Update fee min percentage Only callable by owner.",
      "parameterDecorators": [
        {
          "name": "_minPercent",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateFeeProcessingMethod(uint8)",
      "name": "updateFeeProcessingMethod",
      "description": "Update fee processing method Only callable by owner.",
      "parameterDecorators": [
        {
          "name": "_method",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateMainSwapRouter(address)",
      "name": "updateMainSwapRouter",
      "description": "Update the main swap router. Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_router",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateMarketingWallet(address)",
      "name": "updateMarketingWallet",
      "description": "Update the marketing wallet address Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_marketingWallet",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateMerchantWallet(address)",
      "name": "updateMerchantWallet",
      "description": "Update the merchant wallet address Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_merchantWallet",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateMinAmountToProcessFee(uint256)",
      "name": "updateMinAmountToProcessFee",
      "description": "Update the web3 balance for free transaction Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_minAmount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStakingPool(address)",
      "name": "updateStakingPool",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_stakingPool",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateTransactionFee(uint16)",
      "name": "updateTransactionFee",
      "description": "Update the transaction fee Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_fee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateWeb3BalanceForFreeTx(uint256)",
      "name": "updateWeb3BalanceForFreeTx",
      "description": "Update the web3 balance for free transaction Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_web3Balance",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateWeb3TokenAddress(address)",
      "name": "updateWeb3TokenAddress",
      "description": "Update web3 token address Callable only by owner.",
      "parameterDecorators": [
        {
          "name": "_tokenAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateaffiliatePool(address)",
      "name": "updateaffiliatePool",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_affiliatePool",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userTxCount(address)",
      "name": "userTxCount",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewAffiliatePool()",
      "name": "viewAffiliatePool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewDonationFee()",
      "name": "viewDonationFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewDonationWallet()",
      "name": "viewDonationWallet",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewFeeMaxPercent()",
      "name": "viewFeeMaxPercent",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewFeeMinPercent()",
      "name": "viewFeeMinPercent",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewMainSwapRouter()",
      "name": "viewMainSwapRouter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewMarketingWallet()",
      "name": "viewMarketingWallet",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewMinAmountToProcessFee()",
      "name": "viewMinAmountToProcessFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewStakingPool()",
      "name": "viewStakingPool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewSwapRouters()",
      "name": "viewSwapRouters",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewTransactionFee()",
      "name": "viewTransactionFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewWeb3BalanceForFreeTx()",
      "name": "viewWeb3BalanceForFreeTx",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewWeb3Token()",
      "name": "viewWeb3Token",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}