{"schema":"../schema.json","tags":["tokens","curve finance"],"name":"Curation","description":"Curation contract.","eventDecorators":[{"signature":"Burned(address,bytes32,uint256,uint256)","name":"Burned","description":"Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` burned `signal` for a `subgraphDeploymentID`. The curator will receive `tokens` according to the value of the bonding curve.","parameterDecorators":[{"name":"curator","description":"","recommendedTypes":[],"indexed":true},{"name":"subgraphDeploymentID","description":"","recommendedTypes":[],"indexed":true},{"name":"tokens","description":"","recommendedTypes":[],"indexed":false},{"name":"signal","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Collected(bytes32,uint256)","name":"Collected","description":"Emitted when a token is locked or the lock on a token is extended. Emitted when `tokens` amount were collected for `subgraphDeploymentID` as part of fees distributed by an indexer from query fees received from state channels.","parameterDecorators":[{"name":"subgraphDeploymentID","description":"","recommendedTypes":[],"indexed":true},{"name":"tokens","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ContractSynced(bytes32,address)","name":"ContractSynced","description":"Emitted when a token is locked or the lock on a token is extended.","parameterDecorators":[{"name":"nameHash","description":"","recommendedTypes":[],"indexed":true},{"name":"contractAddress","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ParameterUpdated(string)","name":"ParameterUpdated","description":"Emitted when a token is locked or the lock on a token is extended.","parameterDecorators":[{"name":"param","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SetController(address)","name":"SetController","description":"Emitted when a token is locked or the lock on a token is extended.","parameterDecorators":[{"name":"controller","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Signalled(address,bytes32,uint256,uint256,uint256)","name":"Signalled","description":"Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[{"name":"curator","description":"","recommendedTypes":[],"indexed":true},{"name":"subgraphDeploymentID","description":"","recommendedTypes":[],"indexed":true},{"name":"tokens","description":"","recommendedTypes":[],"indexed":false},{"name":"signal","description":"","recommendedTypes":[],"indexed":false},{"name":"curationTax","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"acceptProxy(address)","name":"acceptProxy","description":"Accept to be an implementation of proxy.","parameterDecorators":[{"name":"_proxy","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"acceptProxyAndCall(address,bytes)","name":"acceptProxyAndCall","description":"Accept to be an implementation of proxy and then call a function from the new implementation as specified by `_data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract.","parameterDecorators":[{"name":"_proxy","description":"","recommendedTypes":[]},{"name":"_data","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"bondingCurve()","name":"bondingCurve","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"burn(bytes32,uint256,uint256)","name":"burn","description":"Burn _signal from the SubgraphDeployment curation pool. Return an amount of signal to get tokens back.","parameterDecorators":[{"name":"_subgraphDeploymentID","description":"SubgraphDeployment the curator is returning signal.","recommendedTypes":[]},{"name":"_signalIn","description":"Amount of signal to return.","recommendedTypes":[]},{"name":"_tokensOutMin","description":"Expected minimum amount of tokens to receive.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Tokens returned.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"collect(bytes32,uint256)","name":"collect","description":"Assign Graph Tokens collected as curation fees to the curation pool reserve. This function can only be called by the Staking contract and will do the bookeeping of transferred tokens into this contract.","parameterDecorators":[{"name":"_subgraphDeploymentID","description":"SubgraphDeployment where funds should be allocated as reserves.","recommendedTypes":[]},{"name":"_tokens","description":"Amount of Graph Tokens to add to reserves.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"controller()","name":"controller","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"curationTaxPercentage()","name":"curationTaxPercentage","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":true},{"signature":"curationTokenMaster()","name":"curationTokenMaster","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"defaultReserveRatio()","name":"defaultReserveRatio","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":true},{"signature":"getCurationPoolSignal(bytes32)","name":"getCurationPoolSignal","description":"Get the amount of signal in a curation pool.","parameterDecorators":[{"name":"_subgraphDeploymentID","description":"Subgraph deployment curation poool.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Amount of signal minted for the subgraph deployment.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getCurationPoolTokens(bytes32)","name":"getCurationPoolTokens","description":"Get the amount of token reserves in a curation pool.","parameterDecorators":[{"name":"_subgraphDeploymentID","description":"Subgraph deployment curation poool.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Amount of token reserves in the curation pool.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getCuratorSignal(address,bytes32)","name":"getCuratorSignal","description":"Get the amount of signal a curator has in a curation pool.","parameterDecorators":[{"name":"_curator","description":"Curator owning the signal tokens.","recommendedTypes":[]},{"name":"_subgraphDeploymentID","description":"Subgraph deployment curation pool.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Amount of signal owned by a curator for the subgraph deployment.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,address,address,uint32,uint32,uint256)","name":"initialize","description":"Initialize this contract.","parameterDecorators":[{"name":"_controller","description":"","recommendedTypes":[]},{"name":"_bondingCurve","description":"","recommendedTypes":[]},{"name":"_curationTokenMaster","description":"","recommendedTypes":[]},{"name":"_defaultReserveRatio","description":"","recommendedTypes":[]},{"name":"_curationTaxPercentage","description":"","recommendedTypes":[]},{"name":"_minimumCurationDeposit","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isCurated(bytes32)","name":"isCurated","description":"Check if any GRT tokens are deposited for a SubgraphDeployment.","parameterDecorators":[{"name":"_subgraphDeploymentID","description":"SubgraphDeployment to check if curated.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if curated.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"minimumCurationDeposit()","name":"minimumCurationDeposit","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"mint(bytes32,uint256,uint256)","name":"mint","description":"Deposit Graph Tokens in exchange for signal of a SubgraphDeployment curation pool.","parameterDecorators":[{"name":"_subgraphDeploymentID","description":"Subgraph deployment pool from where to mint signal.","recommendedTypes":[]},{"name":"_tokensIn","description":"Amount of Graph Tokens to deposit.","recommendedTypes":[]},{"name":"_signalOutMin","description":"Expected minimum amount of signal to receive.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"pools(bytes32)","name":"pools","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"tokens","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"reserveRatio","description":"","recommendedTypes":[],"solidityType":"uint32"},{"name":"gcs","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"setController(address)","name":"setController","description":"Set Controller. Only callable by current controller.","parameterDecorators":[{"name":"_controller","description":"Controller contract address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setCurationTaxPercentage(uint32)","name":"setCurationTaxPercentage","description":"Set the curation tax percentage to charge when a curator deposits GRT tokens.","parameterDecorators":[{"name":"_percentage","description":"Curation tax percentage charged when depositing GRT tokens.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setCurationTokenMaster(address)","name":"setCurationTokenMaster","description":"Set the master copy to use as clones for the curation token.","parameterDecorators":[{"name":"_curationTokenMaster","description":"Address of implementation contract to use for curation tokens.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDefaultReserveRatio(uint32)","name":"setDefaultReserveRatio","description":"Update the default reserver ratio to `_defaultReserveRatio`. Set the default reserve ratio percentage for a curation pool.","parameterDecorators":[{"name":"_defaultReserveRatio","description":"Reserve ratio (in PPM).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMinimumCurationDeposit(uint256)","name":"setMinimumCurationDeposit","description":"Update the minimum deposit amount to `_minimumCurationDeposit`. Set the minimum deposit amount for curators.","parameterDecorators":[{"name":"_minimumCurationDeposit","description":"Minimum amount of tokens required deposit.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"signalToTokens(bytes32,uint256)","name":"signalToTokens","description":"Calculate number of tokens to get when burning signal from a curation pool.","parameterDecorators":[{"name":"_subgraphDeploymentID","description":"Subgraph deployment to burn signal.","recommendedTypes":[]},{"name":"_signalIn","description":"Amount of signal to burn.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Amount of tokens to get for an amount of signal.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"syncAllContracts()","name":"syncAllContracts","description":"Sync protocol contract addresses from the Controller registry. This function will cache all the contracts using the latest addresses Anyone can call the function whenever a Proxy contract change in the controller to ensure the protocol is using the latest version.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"tokensToSignal(bytes32,uint256)","name":"tokensToSignal","description":"Calculate amount of signal that can be bought with tokens in a curation pool. This function considers and excludes the deposit tax.","parameterDecorators":[{"name":"_subgraphDeploymentID","description":"Subgraph deployment to mint signal.","recommendedTypes":[]},{"name":"_tokensIn","description":"Amount of tokens used to mint signal.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}