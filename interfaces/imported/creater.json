{
  "schema": "../schema.json",
  "tags": [],
  "name": "Creater",
  "description": "Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.",
  "eventDecorators": [
    {
      "signature": "Deployed(address,bytes32)",
      "name": "Deployed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "salt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "computeAddress1(bytes32,bytes32)",
      "name": "computeAddress1",
      "description": "Returns the address where a contract will be stored if deployed via {deploy}. Any change in the `bytecodeHash` or `salt` will result in a new destination address. This function is helper function to derive the address of the.",
      "parameterDecorators": [
        {
          "name": "salt",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "bytecodeHash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "computeAddress2(bytes32,bytes32,address)",
      "name": "computeAddress2",
      "description": "Returns the address where a contract will be stored if deployed via {deploy} from a contract located at `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}. It computes using the four parameter , first one is constant 0xff , address of the deployer (mostly the contract address of the contract from which it is called), salt(It is a random integer value which actually differs the contract address) , Bytecode of the contract to be deployed.",
      "parameterDecorators": [
        {
          "name": "salt",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "bytecodeHash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deployer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deploy(bytes32,bytes)",
      "name": "deploy",
      "description": "Deploys a contract using `CREATE2` OPCODE. The address where the contract will be deployed can be known in advance via {computeAddress}. * The bytecode for a contract can be obtained from Solidity with `type(contractName).creationCode`. * Requirements: * - `bytecode` must not be empty. - `salt` must have not been used for `bytecode` already. - the factory must have a balance of at least `amount`. - if `amount` is non-zero, `bytecode` must have a `payable` constructor.",
      "parameterDecorators": [
        {
          "name": "salt",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "bytecode",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}