{
  "schema": "../schema.json",
  "tags": [],
  "name": "PanaBondDepository",
  "description": "Pana Bond Depository.",
  "eventDecorators": [
    {
      "signature": "AuthorityUpdated(address)",
      "name": "AuthorityUpdated",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "authority",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Bond(uint256,uint256,uint256)",
      "name": "Bond",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CloseMarket(uint256)",
      "name": "CloseMarket",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CreateMarket(uint256,address,address,uint256)",
      "name": "CreateMarket",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "baseToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "quoteToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "initialPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Tuned(uint256,uint256,uint256)",
      "name": "Tuned",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldControlVariable",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newControlVariable",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "adjustments(uint256)",
      "name": "adjustments",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "change",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastAdjustment",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "timeToAdjusted",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "active",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowUserRewards()",
      "name": "allowUserRewards",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "authority()",
      "name": "authority",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "close(uint256)",
      "name": "close",
      "description": "disable existing market.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "ID of market to close.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "concurrentBondsPermitted()",
      "name": "concurrentBondsPermitted",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "create(address,uint256[3],bool[4],uint256[2],uint32[2])",
      "name": "create",
      "description": "creates a new market type. current price should be in 18 decimals.",
      "parameterDecorators": [
        {
          "name": "_quoteToken",
          "description": "token used to deposit.",
          "recommendedTypes": []
        },
        {
          "name": "_market",
          "description": "[capacity (in PANA or quote), initial price / PANA (18 decimals), debt buffer (3 decimals)].",
          "recommendedTypes": []
        },
        {
          "name": "_booleans",
          "description": "[capacity in quote, quote is reserve, quote is LP, fixed term].",
          "recommendedTypes": []
        },
        {
          "name": "_terms",
          "description": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp].",
          "recommendedTypes": []
        },
        {
          "name": "_intervals",
          "description": "[deposit interval (seconds), tune interval (seconds)].",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "id_",
          "description": "ID of new bond market.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "currentControlVariable(uint256)",
      "name": "currentControlVariable",
      "description": "up to date control variable. accounts for control variable adjustment.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "ID of market.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "control variable for market in PANA decimals.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentDebt(uint256)",
      "name": "currentDebt",
      "description": "calculate debt factoring in decay. accounts for debt decay since last deposit.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "ID of market.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "current debt for market in PANA decimals.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "debtDecay(uint256)",
      "name": "debtDecay",
      "description": "amount of debt to decay from total debt for market ID.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "ID of market.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of debt to decay.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "debtRatio(uint256)",
      "name": "debtRatio",
      "description": "calculate current ratio of debt to supply. uses current debt, which accounts for debt decay since last deposit (vs _debtRatio()).",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "ID of market.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "debt ratio for market in quote decimals.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(uint256,uint256,uint256,address,address)",
      "name": "deposit",
      "description": "deposit quote tokens in exchange for a bond from a specified market.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "the ID of the market.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "the amount of quote token to spend.",
          "recommendedTypes": []
        },
        {
          "name": "_maxPrice",
          "description": "the maximum price at which to buy.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "the recipient of the payout.",
          "recommendedTypes": []
        },
        {
          "name": "_referral",
          "description": "the front end operator address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "payout_",
          "description": "the amount of KARSHA due.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "expiry_",
          "description": "the timestamp at which payout is redeemable.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "index_",
          "description": "the user index of the Note (used to redeem or query information).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getOraclePriceView(uint256)",
      "name": "getOraclePriceView",
      "description": "View Only - gets token price in quote tokens from oracle.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "ID of market.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "oracle price for market in PANA decimals.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReward()",
      "name": "getReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getTreasuryRewards()",
      "name": "getTreasuryRewards",
      "description": "Manually fetch remaining rewards for Treasury.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hasNonMaturedNotes(address)",
      "name": "hasNonMaturedNotes",
      "description": "checks whether the user has at least one unvested note.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "the user that the note belongs to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "if the user has at least one unvested note.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "indexesFor(address)",
      "name": "indexesFor",
      "description": "all pending notes for user.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "the user to query notes for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the pending notes for the user.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isLive(uint256)",
      "name": "isLive",
      "description": "is a given market accepting deposits.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "ID of market.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liveMarkets()",
      "name": "liveMarkets",
      "description": "returns an array of all active market IDs.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liveMarketsFor(address)",
      "name": "liveMarketsFor",
      "description": "returns an array of all active market IDs for a given quote token.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "quote token to check for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketPrice(uint256)",
      "name": "marketPrice",
      "description": "View Only Function - calculate current market price of quote token in base token.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "market ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "price for market in PANA decimals.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "markets(uint256)",
      "name": "markets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "capacity",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "quoteToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "capacityInQuote",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "quoteTokenIsReserve",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "totalDebt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "maxPayout",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "sold",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "purchased",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketsForQuote(address,uint256)",
      "name": "marketsForQuote",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "metadata(uint256)",
      "name": "metadata",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "lastTune",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "lastDecay",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "length",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "depositInterval",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "tuneInterval",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "quoteDecimals",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "quoteIsLPToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "notes(address,uint256)",
      "name": "notes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "payout",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "created",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "matured",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "redeemed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "marketID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingFor(address,uint256)",
      "name": "pendingFor",
      "description": "calculate amount available for claim for a single note.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "the user that the note belongs to.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "the index of the note in the user's array.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "payout_",
          "description": "the payout due, in Karsha.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "matured_",
          "description": "if the payout can be redeemed.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "permitConcurrentBonds(bool)",
      "name": "permitConcurrentBonds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "permit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "priceOracle()",
      "name": "priceOracle",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pullNote(address,uint256)",
      "name": "pullNote",
      "description": "transfer a note that has been approved by an address.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "the address that approved the note transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "the index of the note to transfer (in the sender's array).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "newIndex_",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pushNote(address,uint256)",
      "name": "pushNote",
      "description": "approve an address to transfer a note.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "address to approve note transfer for.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "index of note to approve transfer for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeem(address,uint256[])",
      "name": "redeem",
      "description": "redeem notes for user.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "the user to redeem for.",
          "recommendedTypes": []
        },
        {
          "name": "_indexes",
          "description": "the note indexes to redeem.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "payout_",
          "description": "sum of payout sent, in Karsha.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemAll(address)",
      "name": "redeemAll",
      "description": "redeem all redeemable markets for user. if possible, query indexesFor() off-chain and input in redeem() to save gas.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "user to redeem all notes for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "sum of payout sent, in Karsha.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "refReward()",
      "name": "refReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewards(address)",
      "name": "rewards",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAuthority(address)",
      "name": "setAuthority",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newAuthority",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPriceOracle(address)",
      "name": "setPriceOracle",
      "description": "sets price oracle for bond depository.",
      "parameterDecorators": [
        {
          "name": "_priceOracle",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRewards(uint256,uint256)",
      "name": "setRewards",
      "description": "set rewards for front end operators and DAO.",
      "parameterDecorators": [
        {
          "name": "_toFrontEnd",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_toTreasury",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUserRewards()",
      "name": "setUserRewards",
      "description": "toggle user having reward, only by governer.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "terms(uint256)",
      "name": "terms",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "fixedTerm",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "controlVariable",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "vesting",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "conclusion",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "maxDebt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "treasuryReward()",
      "name": "treasuryReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateTreasury()",
      "name": "updateTreasury",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelist(address)",
      "name": "whitelist",
      "description": "add or remove addresses from the reward whitelist.",
      "parameterDecorators": [
        {
          "name": "_operator",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelisted(address)",
      "name": "whitelisted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}