{"schema":"../schema.json","tags":["vesting"],"name":"SmartVesting","description":"","eventDecorators":[{"signature":"ApproveTransfer(address)","name":"ApproveTransfer","description":"Event for token swap logging.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Call(address,uint256,bytes,bool)","name":"Call","description":"Event for token swap logging.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":false},{"name":"value","description":"","recommendedTypes":[],"indexed":false},{"name":"data","description":"","recommendedTypes":[],"indexed":false},{"name":"transfersAllowed","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ClaimEther(uint256)","name":"ClaimEther","description":"Event for token swap logging.","parameterDecorators":[{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false}]},{"signature":"ClaimToken(address,uint256)","name":"ClaimToken","description":"Event for token swap logging.","parameterDecorators":[{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false},{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Event for token swap logging.","parameterDecorators":[{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":true},{"name":"beneficiary","description":"who got the tokens.","recommendedTypes":[],"indexed":true}]},{"signature":"RevokeTransfer(address)","name":"RevokeTransfer","description":"Event for token swap logging.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokensReleased(address,uint256)","name":"TokensReleased","description":"Event for token swap logging.","parameterDecorators":[{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false},{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"approveTransfer(address)","name":"approveTransfer","description":"","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"beneficiary()","name":"beneficiary","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"the beneficiary of the tokens.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"call(address,uint256,bytes)","name":"call","description":"Allows the timelock to call arbitrary contracts, as long as it does not reduce it's locked token balance. Initialization check is implicitly provided by `voteExists()` as new votes can only be created via `newVote(),` which requires initialization.","parameterDecorators":[{"name":"to","description":"Contract address to call.","recommendedTypes":[]},{"name":"value","description":"ETH value to send, if any.","recommendedTypes":[]},{"name":"data","description":"Encoded data to send.","recommendedTypes":[]}],"returnDecorators":[{"name":"success","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"changeBeneficiary(address)","name":"changeBeneficiary","description":"Allows the beneficiary to be changed for future multi sig deploys or team structure changes.","parameterDecorators":[{"name":"newBeneficiary","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"claimEther()","name":"claimEther","description":"Claim Ether in contract.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"claimToken(address)","name":"claimToken","description":"Claim ERC20-compliant tokens other than locked token.","parameterDecorators":[{"name":"tokenToClaim","description":"Token to claim balance of.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"cliff()","name":"cliff","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"the cliff time of the token vesting.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"duration()","name":"duration","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"the duration of the token vesting.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"governor()","name":"governor","description":"Governor address.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"releasableAmount()","name":"releasableAmount","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"release()","name":"release","description":"Transfers vested tokens to beneficiary.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"released()","name":"released","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"the amount of the token released.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"revokeTransfer(address)","name":"revokeTransfer","description":"","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"start()","name":"start","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"the start time of the token vesting.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"token()","name":"token","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"the token being held.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}