{
  "schema": "../schema.json",
  "tags": [],
  "name": "PartyBid",
  "description": "",
  "eventDecorators": [
    {
      "signature": "PartyBidPlaced(uint256,uint256)",
      "name": "PartyBidPlaced",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "auctionID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PartyExecuteSale(uint256)",
      "name": "PartyExecuteSale",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "depositor",
          "description": "who deposited value.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PartyJoined(address,uint256)",
      "name": "PartyJoined",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "member",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PartyMemberExited(address,uint256,bool)",
      "name": "PartyMemberExited",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "member",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "postFailure",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PartyProposalVote(uint256,address)",
      "name": "PartyProposalVote",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "voter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PartyProposeNewZoraBid(uint256,address,address,uint256)",
      "name": "PartyProposeNewZoraBid",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "bidder",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "BidProposals(uint256)",
      "name": "BidProposals",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "proposer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "bidder",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "aggregateSupport",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DAOExecuteZoraBid(uint256)",
      "name": "DAOExecuteZoraBid",
      "description": "Execute a Zora bid proposal assuming it still exists and matches amount in storage.",
      "parameterDecorators": [
        {
          "name": "_proposalId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "DAOProposeZoraBid(address)",
      "name": "DAOProposeZoraBid",
      "description": "Propose a new Zora bid for acceptance to the DAO.",
      "parameterDecorators": [
        {
          "name": "_bidder",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "DAOVoteForZoraBidProposal(uint256)",
      "name": "DAOVoteForZoraBidProposal",
      "description": "Vote for a new Zora bid proposal if you have not already.",
      "parameterDecorators": [
        {
          "name": "_proposalId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "NFTAddress()",
      "name": "NFTAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "NFTResold()",
      "name": "NFTResold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "NFTResoldValue()",
      "name": "NFTResoldValue",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "NFTWon()",
      "name": "NFTWon",
      "description": "Returns boolean status of if DAO has won NFT.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ReserveAuctionV3Address()",
      "name": "ReserveAuctionV3Address",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "auctionID()",
      "name": "auctionID",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bidAmount()",
      "name": "bidAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bidPlaced()",
      "name": "bidPlaced",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentRaisedAmount()",
      "name": "currentRaisedAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "daoStakes(address)",
      "name": "daoStakes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exit()",
      "name": "exit",
      "description": "Public utility function to call internal exit functions based on bid state.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exitTimeout()",
      "name": "exitTimeout",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "join(uint256)",
      "name": "join",
      "description": "Join the DAO by sending ETH Requires bidding to be enabled, forced matching of deposit value to sent eth, and there to be capacity in DAO.",
      "parameterDecorators": [
        {
          "name": "_value",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "placeBid()",
      "name": "placeBid",
      "description": "Execute bid placement, as DAO member, so long as required conditions are met.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "wETHAddress()",
      "name": "wETHAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}