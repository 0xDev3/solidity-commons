{
  "schema": "../schema.json",
  "tags": [],
  "name": "Controller",
  "description": "Contract use UUPS proxy.",
  "eventDecorators": [
    {
      "signature": "AdminChanged(address,address)",
      "name": "AdminChanged",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "previousAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BeaconUpgraded(address)",
      "name": "BeaconUpgraded",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "beacon",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CancelOrder(address,uint256,address,uint256,uint256)",
      "name": "CancelOrder",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "poolAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "transferedToken0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "transferedToken1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CreateOrder(address,address,uint256,int24,int24,uint8)",
      "name": "CreateOrder",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "poolAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tickLower",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tickUpper",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "orderType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExecuteOrder(address,uint256,address,uint256,uint256)",
      "name": "ExecuteOrder",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "poolAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "transferedToken0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "transferedToken1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Initialized(uint8)",
      "name": "Initialized",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "version",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Upgraded(address)",
      "name": "Upgraded",
      "description": "Emitted when a token is locked or the lock on a token is extended. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SLIPPAGE()",
      "name": "SLIPPAGE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SLIPPAGE_ACCURACY()",
      "name": "SLIPPAGE_ACCURACY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelOrder(uint256,address)",
      "name": "cancelOrder",
      "description": "cancel order and transfer all possible funds to receiver.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "tokenId of uniswapV3 nft.",
          "recommendedTypes": []
        },
        {
          "name": "_poolAddress",
          "description": "address of uniswapV3 pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "checkOrder(uint256,address)",
      "name": "checkOrder",
      "description": "returns current order state.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "tokenId of uniswapV3 nft.",
          "recommendedTypes": []
        },
        {
          "name": "_poolAddress",
          "description": "address of uniswapV3 pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isClosable",
          "description": "true if order is complete.",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "owner",
          "description": "address receiver of funds.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "quoteToken",
          "description": "address of token which whould be received.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "quoteAmount",
          "description": "amount of quoteToken.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "baseToken",
          "description": "address of token which was used for creating order.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "baseAmount",
          "description": "amount of baseToken.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createOrder(tuple(uint24,address,address,int24,int24,uint256,uint256,uint256,uint256,uint256,uint8))",
      "name": "createOrder",
      "description": "creates order on uniswap v3 position manager.",
      "parameterDecorators": [
        {
          "name": "_params",
          "description": "order type parameters.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "fee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "token0",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "token1",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tickLower",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tickUpper",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amountOfToken0",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amountOfToken1",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "recievedAmountOfToken0",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "recievedAmountOfToken1",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "deadline",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "orderType",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "editOrder(tuple(uint256,address,uint256))",
      "name": "editOrder",
      "description": "return new order state. newAmountOfToken0an can be 0 if order type is BUY_LIMITnewAmountOfToken1an can be 0 if order type is TAKE_PROFIT.",
      "parameterDecorators": [
        {
          "name": "_editParams",
          "description": "edit order parameters.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "poolAddress",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amountOfToken",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "newAmountOfToken0",
          "description": "new amount after order editing.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "newAmountOfToken1",
          "description": "new amount after order editing.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ethForExecute(uint256)",
      "name": "ethForExecute",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executeOrder(uint256,address)",
      "name": "executeOrder",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "tokenId of uniswapV3 nft.",
          "recommendedTypes": []
        },
        {
          "name": "_poolAddress",
          "description": "address of uniswapV3 pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executionFee()",
      "name": "executionFee",
      "description": "Amount of eth which whould be payd for execution.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmount0FromAmount1(uint256,int24,int24)",
      "name": "getAmount0FromAmount1",
      "description": "return received amount for BUY_LIMIT order.",
      "parameterDecorators": [
        {
          "name": "_amount1",
          "description": "amount of tokens to swap.",
          "recommendedTypes": []
        },
        {
          "name": "_tickLower",
          "description": "the lower tick of the range.",
          "recommendedTypes": []
        },
        {
          "name": "_tickUpper",
          "description": "the upper tick of the range.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_amount0",
          "description": "received amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmount1FromAmount0(uint256,int24,int24)",
      "name": "getAmount1FromAmount0",
      "description": "return received amount for TAKE_PROFIT order.",
      "parameterDecorators": [
        {
          "name": "_amount0",
          "description": "amount of tokens to swap.",
          "recommendedTypes": []
        },
        {
          "name": "_tickLower",
          "description": "the lower tick of the range.",
          "recommendedTypes": []
        },
        {
          "name": "_tickUpper",
          "description": "the upper tick of the range.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_amount1",
          "description": "received amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)",
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address,address,uint256)",
      "name": "initialize",
      "description": "Initialyze necessary data.",
      "parameterDecorators": [
        {
          "name": "_nftPositionManager",
          "description": "address of UniswapV3 position manager.",
          "recommendedTypes": []
        },
        {
          "name": "_uniswapV3Factory",
          "description": "address of UniswapV3 factory.",
          "recommendedTypes": []
        },
        {
          "name": "_weth",
          "description": "address of wrapepd ether.",
          "recommendedTypes": []
        },
        {
          "name": "_uniV3Nft",
          "description": "address of UniswapV3 position nft.",
          "recommendedTypes": []
        },
        {
          "name": "_executionFee",
          "description": "amount of eth which whould be payd for execution.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nftPositionManager()",
      "name": "nftPositionManager",
      "description": "Address of UniswapV3 position manager.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "orders(address,uint256)",
      "name": "orders",
      "description": "poolAddress => positionNFT_ID => orderData.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "token0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "token1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "tickLower",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int24"
        },
        {
          "name": "tickUpper",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int24"
        },
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint24"
        },
        {
          "name": "amountOfToken0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountOfToken1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "recievedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        },
        {
          "name": "orderType",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxiableUUID()",
      "name": "proxiableUUID",
      "description": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)",
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)",
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "setExecutionFee(uint256)",
      "name": "setExecutionFee",
      "description": "Sets new executionFee.",
      "parameterDecorators": [
        {
          "name": "_executionFee",
          "description": "new executionFee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPause(bool)",
      "name": "setPause",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newPauseState",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSlippage(uint256,uint256)",
      "name": "setSlippage",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newSlippage",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_newSlippageAccuracy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sweepTokens(address,address,uint256)",
      "name": "sweepTokens",
      "description": "Transfer any tokens left on contract.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of token.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "address of reciever.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uniV3Nft()",
      "name": "uniV3Nft",
      "description": "Address of UniswapV3 position nft.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "uniswapV3Factory()",
      "name": "uniswapV3Factory",
      "description": "Address of UniswapV3 factory.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "upgradeTo(address)",
      "name": "upgradeTo",
      "description": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "upgradeToAndCall(address,bytes)",
      "name": "upgradeToAndCall",
      "description": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "weth()",
      "name": "weth",
      "description": "Address of wrapped ether.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}