{
  "schema": "../schema.json",
  "tags": [
    "swaps"
  ],
  "name": "DutchAuction",
  "description": "Attribution to delta.financialAttribution to dutchswap.com.",
  "eventDecorators": [
    {
      "signature": "AddedCommitment(address,uint256)",
      "name": "AddedCommitment",
      "description": "Event for adding a commitment.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "commitment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AdminRoleGranted(address,address)",
      "name": "AdminRoleGranted",
      "description": "Events for adding and removing various roles.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AdminRoleRemoved(address,address)",
      "name": "AdminRoleRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AuctionCancelled()",
      "name": "AuctionCancelled",
      "description": "Event for cancellation of the auction.",
      "parameterDecorators": []
    },
    {
      "signature": "AuctionFinalized()",
      "name": "AuctionFinalized",
      "description": "Event for finalization of the auction.",
      "parameterDecorators": []
    },
    {
      "signature": "AuctionPriceUpdated(uint256,uint256)",
      "name": "AuctionPriceUpdated",
      "description": "Event for updating auction prices. Needs to be before auction starts.",
      "parameterDecorators": [
        {
          "name": "startPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "minimumPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AuctionTimeUpdated(uint256,uint256)",
      "name": "AuctionTimeUpdated",
      "description": "Event for updating auction times. Needs to be before auction starts.",
      "parameterDecorators": [
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "endTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AuctionWalletUpdated(address)",
      "name": "AuctionWalletUpdated",
      "description": "Event for updating auction wallet. Needs to be before auction starts.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DocumentRemoved(string,string)",
      "name": "DocumentRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DocumentUpdated(string,string)",
      "name": "DocumentUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MinterRoleGranted(address,address)",
      "name": "MinterRoleGranted",
      "description": "Events for adding and removing various roles.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MinterRoleRemoved(address,address)",
      "name": "MinterRoleRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OperatorRoleGranted(address,address)",
      "name": "OperatorRoleGranted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OperatorRoleRemoved(address,address)",
      "name": "OperatorRoleRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SmartContractRoleGranted(address,address)",
      "name": "SmartContractRoleGranted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SmartContractRoleRemoved(address,address)",
      "name": "SmartContractRoleRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MINTER_ROLE()",
      "name": "MINTER_ROLE",
      "description": "Role definitions.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "OPERATOR_ROLE()",
      "name": "OPERATOR_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SMART_CONTRACT_ROLE()",
      "name": "SMART_CONTRACT_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addAdminRole(address)",
      "name": "addAdminRole",
      "description": "Grants the admin role to an address. The sender must have the admin role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract receiving the new role.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addMinterRole(address)",
      "name": "addMinterRole",
      "description": "Grants the minter role to an address. The sender must have the admin role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract receiving the new role.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addOperatorRole(address)",
      "name": "addOperatorRole",
      "description": "Grants the operator role to an address. The sender must have the admin role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract receiving the new role.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addSmartContractRole(address)",
      "name": "addSmartContractRole",
      "description": "Grants the smart contract role to an address. The sender must have the admin role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract receiving the new role.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "auctionEnded()",
      "name": "auctionEnded",
      "description": "Checks if the auction has ended.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if auction is successful or time has ended.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "auctionSuccessful()",
      "name": "auctionSuccessful",
      "description": "Successful if tokens sold equals totalTokens.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if tokenPrice is bigger or equal clearingPrice.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "auctionToken()",
      "name": "auctionToken",
      "description": "The token being sold.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "batch(bytes[],bool)",
      "name": "batch",
      "description": "Allows batched call to self (this contract).",
      "parameterDecorators": [
        {
          "name": "calls",
          "description": "An array of inputs for each call.",
          "recommendedTypes": []
        },
        {
          "name": "revertOnFail",
          "description": "If True then reverts after a failed call and stops doing further calls.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "successes",
          "description": "An array indicating the success of a call, mapped one-to-one to `calls`.",
          "recommendedTypes": [],
          "solidityType": "bool[]"
        },
        {
          "name": "results",
          "description": "An array with the returned data of each function call, mapped one-to-one to `calls`.",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateCommitment(uint256)",
      "name": "calculateCommitment",
      "description": "Calculates the amount able to be committed during an auction.",
      "parameterDecorators": [
        {
          "name": "_commitment",
          "description": "Commitment user would like to make.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "committed",
          "description": "Amount allowed to commit.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelAuction()",
      "name": "cancelAuction",
      "description": "Cancel Auction. Admin can cancel the auction before it starts.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimed(address)",
      "name": "claimed",
      "description": "Amount of tokens to claim per address.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "clearingPrice()",
      "name": "clearingPrice",
      "description": "The current clearing price of the Dutch auction.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The bigger from tokenPrice and priceFunction.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "commitEth(address,bool)",
      "name": "commitEth",
      "description": "Checks the amount of ETH to commit and adds the commitment. Refunds the buyer if commit is too high.",
      "parameterDecorators": [
        {
          "name": "_beneficiary",
          "description": "Auction participant ETH address.",
          "recommendedTypes": []
        },
        {
          "name": "readAndAgreedToMarketParticipationAgreement",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "commitTokens(uint256,bool)",
      "name": "commitTokens",
      "description": "Buy Tokens by commiting approved ERC20 tokens to this contract address.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "Amount of tokens to commit.",
          "recommendedTypes": []
        },
        {
          "name": "readAndAgreedToMarketParticipationAgreement",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "commitTokensFrom(address,uint256,bool)",
      "name": "commitTokensFrom",
      "description": "Checks how much is user able to commit and processes that commitment. Users must approve contract prior to committing tokens to auction.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "User ERC20 address.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount of approved ERC20 tokens.",
          "recommendedTypes": []
        },
        {
          "name": "readAndAgreedToMarketParticipationAgreement",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "commitments(address)",
      "name": "commitments",
      "description": "The committed amount of accounts.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "enableList(bool)",
      "name": "enableList",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_status",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "finalize()",
      "name": "finalize",
      "description": "Auction finishes successfully above the reserve. Transfer contract funds to initialized wallet.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "finalizeTimeExpired()",
      "name": "finalizeTimeExpired",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns true if 7 days have passed since the end of the auction.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "finalized()",
      "name": "finalized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns true if market has been finalized.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllDocuments()",
      "name": "getAllDocuments",
      "description": "Used to retrieve a full list of documents attached to the smart contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "string List of all documents names present in the contract.",
          "recommendedTypes": [],
          "solidityType": "string[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAuctionInitData(address,address,uint256,uint256,uint256,address,uint256,uint256,address,address,address)",
      "name": "getAuctionInitData",
      "description": "Collects data to initialize the auction and encodes them.",
      "parameterDecorators": [
        {
          "name": "_funder",
          "description": "The address that funds the token for DutchAuction.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "Address of the token being sold.",
          "recommendedTypes": []
        },
        {
          "name": "_totalTokens",
          "description": "The total number of tokens to sell in auction.",
          "recommendedTypes": []
        },
        {
          "name": "_startTime",
          "description": "Auction start time.",
          "recommendedTypes": []
        },
        {
          "name": "_endTime",
          "description": "Auction end time.",
          "recommendedTypes": []
        },
        {
          "name": "_paymentCurrency",
          "description": "The currency the DutchAuction accepts for payment. Can be ETH or token address.",
          "recommendedTypes": []
        },
        {
          "name": "_startPrice",
          "description": "Starting price of the auction.",
          "recommendedTypes": []
        },
        {
          "name": "_minimumPrice",
          "description": "The minimum auction price.",
          "recommendedTypes": []
        },
        {
          "name": "_admin",
          "description": "Address that can finalize auction.",
          "recommendedTypes": []
        },
        {
          "name": "_pointList",
          "description": "Address that will manage auction approvals.",
          "recommendedTypes": []
        },
        {
          "name": "_wallet",
          "description": "Address where collected funds will be forwarded to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_data",
          "description": "All the data in bytes format.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBaseInformation()",
      "name": "getBaseInformation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDocument(string)",
      "name": "getDocument",
      "description": "Used to return the details of a document with a known name (`string`).",
      "parameterDecorators": [
        {
          "name": "_name",
          "description": "Name of the document.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "string The data associated with the document.",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "_1",
          "description": "uint256 the timestamp at which the document was last modified.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDocumentCount()",
      "name": "getDocumentCount",
      "description": "Used to retrieve the total documents in the smart contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256 Count of the document names present in the contract.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDocumentName(uint256)",
      "name": "getDocumentName",
      "description": "Used to retrieve the document name from index in the smart contract.",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "string Name of the document name.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMember(bytes32,uint256)",
      "name": "getRoleMember",
      "description": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMemberCount(bytes32)",
      "name": "getRoleMemberCount",
      "description": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalTokens()",
      "name": "getTotalTokens",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasAdminRole(address)",
      "name": "hasAdminRole",
      "description": "Used to check whether an address has the admin role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract being checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool True if the account has the role or false if it does not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasMinterRole(address)",
      "name": "hasMinterRole",
      "description": "Used to check whether an address has the minter role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract being checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool True if the account has the role or false if it does not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasOperatorRole(address)",
      "name": "hasOperatorRole",
      "description": "Used to check whether an address has the operator role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract being checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool True if the account has the role or false if it does not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasSmartContractRole(address)",
      "name": "hasSmartContractRole",
      "description": "Used to check whether an address has the smart contract role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract being checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool True if the account has the role or false if it does not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "init(bytes)",
      "name": "init",
      "description": "Decodes and hands auction data to the initAuction function.",
      "parameterDecorators": [
        {
          "name": "_data",
          "description": "Encoded data for initialization.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initAccessControls(address)",
      "name": "initAccessControls",
      "description": "Initializes access controls.",
      "parameterDecorators": [
        {
          "name": "_admin",
          "description": "Admins address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initAuction(address,address,uint256,uint256,uint256,address,uint256,uint256,address,address,address)",
      "name": "initAuction",
      "description": "Initializes main contract variables and transfers funds for the auction. Init function.",
      "parameterDecorators": [
        {
          "name": "_funder",
          "description": "The address that funds the token for DutchAuction.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "Address of the token being sold.",
          "recommendedTypes": []
        },
        {
          "name": "_totalTokens",
          "description": "The total number of tokens to sell in auction.",
          "recommendedTypes": []
        },
        {
          "name": "_startTime",
          "description": "Auction start time.",
          "recommendedTypes": []
        },
        {
          "name": "_endTime",
          "description": "Auction end time.",
          "recommendedTypes": []
        },
        {
          "name": "_paymentCurrency",
          "description": "The currency the DutchAuction accepts for payment. Can be ETH or token address.",
          "recommendedTypes": []
        },
        {
          "name": "_startPrice",
          "description": "Starting price of the auction.",
          "recommendedTypes": []
        },
        {
          "name": "_minimumPrice",
          "description": "The minimum auction price.",
          "recommendedTypes": []
        },
        {
          "name": "_admin",
          "description": "Address that can finalize auction.",
          "recommendedTypes": []
        },
        {
          "name": "_pointList",
          "description": "Address that will manage auction approvals.",
          "recommendedTypes": []
        },
        {
          "name": "_wallet",
          "description": "Address where collected funds will be forwarded to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initMarket(bytes)",
      "name": "initMarket",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isOpen()",
      "name": "isOpen",
      "description": "Checks if the auction is open.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if current time is greater than startTime and less than endTime.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketInfo()",
      "name": "marketInfo",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "endTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "totalTokens",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketParticipationAgreement()",
      "name": "marketParticipationAgreement",
      "description": "Attribution to the awesome delta.financial contracts.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketPrice()",
      "name": "marketPrice",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "startPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        },
        {
          "name": "minimumPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketStatus()",
      "name": "marketStatus",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "commitmentsTotal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        },
        {
          "name": "finalized",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "usePointList",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketTemplate()",
      "name": "marketTemplate",
      "description": "MISOMarket template id for the factory contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paymentCurrency()",
      "name": "paymentCurrency",
      "description": "The currency the auction accepts for payment. Can be ETH or token address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)",
      "name": "permitToken",
      "description": "Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pointList()",
      "name": "pointList",
      "description": "Address that manages auction approvals.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "priceDrop()",
      "name": "priceDrop",
      "description": "Calculates the pricedrop factor.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Value calculated from auction start and end price difference divided the auction duration.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "priceFunction()",
      "name": "priceFunction",
      "description": "Returns auction price in any time.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Fixed start price or minimum price if outside of auction time, otherwise calculated current price.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeAdminRole(address)",
      "name": "removeAdminRole",
      "description": "Removes the admin role from an address. The sender must have the admin role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract affected.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeDocument(string)",
      "name": "removeDocument",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeMinterRole(address)",
      "name": "removeMinterRole",
      "description": "Removes the minter role from an address. The sender must have the admin role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract affected.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeOperatorRole(address)",
      "name": "removeOperatorRole",
      "description": "Removes the operator role from an address. The sender must have the admin role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract affected.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeSmartContractRole(address)",
      "name": "removeSmartContractRole",
      "description": "Removes the smart contract role from an address. The sender must have the admin role.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "EOA or contract affected.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "setAuctionPrice(uint256,uint256)",
      "name": "setAuctionPrice",
      "description": "Admin can set start and min price through this function.",
      "parameterDecorators": [
        {
          "name": "_startPrice",
          "description": "Auction start price.",
          "recommendedTypes": []
        },
        {
          "name": "_minimumPrice",
          "description": "Auction minimum price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAuctionTime(uint256,uint256)",
      "name": "setAuctionTime",
      "description": "Admin can set start and end time through this function.",
      "parameterDecorators": [
        {
          "name": "_startTime",
          "description": "Auction start time.",
          "recommendedTypes": []
        },
        {
          "name": "_endTime",
          "description": "Auction end time.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAuctionWallet(address)",
      "name": "setAuctionWallet",
      "description": "Admin can set the auction wallet through this function.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "Auction wallet is where funds will be sent.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDocument(string,string)",
      "name": "setDocument",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDocuments(string[],string[])",
      "name": "setDocuments",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setList(address)",
      "name": "setList",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_list",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenPrice()",
      "name": "tokenPrice",
      "description": "Calculates the average price of each token from all commitments.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Average token price.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokensClaimable(address)",
      "name": "tokensClaimable",
      "description": "How many tokens the user is able to claim.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "Auction participant address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "claimerCommitment",
          "description": "User commitments reduced by already claimed tokens.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalTokensCommitted()",
      "name": "totalTokensCommitted",
      "description": "Calculates total amount of tokens committed at current auction price.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Number of tokens committed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "wallet()",
      "name": "wallet",
      "description": "Where the auction funds will get paid.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawTokens(address)",
      "name": "withdrawTokens",
      "description": "Withdraws bought tokens, or returns commitment if the sale is unsuccessful. Withdraw tokens only after auction ends.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "Whose tokens will be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawTokens()",
      "name": "withdrawTokens",
      "description": "Withdraws bought tokens, or returns commitment if the sale is unsuccessful.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}