{
  "schema": "../schema.json",
  "tags": [],
  "name": "HoprChannels",
  "description": "",
  "eventDecorators": [
    {
      "signature": "SecretHashSet(address,bytes27,uint32)",
      "name": "SecretHashSet",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "secretHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "counter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "TOKENS_RECIPIENT_INTERFACE_HASH()",
      "name": "TOKENS_RECIPIENT_INTERFACE_HASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "accounts(address)",
      "name": "accounts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "accountX",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "hashedSecret",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes27"
        },
        {
          "name": "counter",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "oddY",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "canImplementInterfaceForAddress(bytes32,address)",
      "name": "canImplementInterfaceForAddress",
      "description": "See {IERC1820Implementer-canImplementInterfaceForAddress}.",
      "parameterDecorators": [
        {
          "name": "interfaceHash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "channels(bytes32)",
      "name": "channels",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        },
        {
          "name": "partyABalance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        },
        {
          "name": "closureTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint40"
        },
        {
          "name": "stateCounter",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint24"
        },
        {
          "name": "closureByPartyA",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimChannelClosure(address)",
      "name": "claimChannelClosure",
      "description": "If the timeout is reached without the 'counterParty' reedeming a ticket, then the tokens can be claimed by 'msg.sender'. claim channel's closure.",
      "parameterDecorators": [
        {
          "name": "counterparty",
          "description": "address counter party of 'msg.sender'.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fundChannelWithSig(uint256,uint256,uint256,uint256,bytes32,bytes32,uint8)",
      "name": "fundChannelWithSig",
      "description": "Fund a channel between 'initiator' and 'counterParty' using a signature, specified tokens must be approved beforehand. fund a channel.",
      "parameterDecorators": [
        {
          "name": "additionalDeposit",
          "description": "uint256.",
          "recommendedTypes": []
        },
        {
          "name": "partyAAmount",
          "description": "uint256.",
          "recommendedTypes": []
        },
        {
          "name": "notAfter",
          "description": "uint256.",
          "recommendedTypes": []
        },
        {
          "name": "stateCounter",
          "description": "uint128.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "bytes32.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "bytes32.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "uint8.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "init(uint256,uint256,bytes27)",
      "name": "init",
      "description": "Initialize the account's on-chain variables.",
      "parameterDecorators": [
        {
          "name": "senderX",
          "description": "uint256 first component of msg.sender's public key.",
          "recommendedTypes": []
        },
        {
          "name": "senderY",
          "description": "uint256 second component of msg.sender's public key.",
          "recommendedTypes": []
        },
        {
          "name": "hashedSecret",
          "description": "initial value for hashedSecret.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initiateChannelClosure(address)",
      "name": "initiateChannelClosure",
      "description": "A channel's party can initiate channel closure at any time, it starts a timeout. initiate channel's closure.",
      "parameterDecorators": [
        {
          "name": "counterparty",
          "description": "address counter party of 'msg.sender'.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "openChannel(address)",
      "name": "openChannel",
      "description": "open a channel.",
      "parameterDecorators": [
        {
          "name": "counterparty",
          "description": "address the counterParty of 'msg.sender'.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemTicket(bytes32,bytes32,uint256,bytes32,address,bytes32,bytes32,uint8)",
      "name": "redeemTicket",
      "description": "redeem ticket.",
      "parameterDecorators": [
        {
          "name": "preImage",
          "description": "bytes32 the value that once hashed produces recipients hashedSecret.",
          "recommendedTypes": []
        },
        {
          "name": "hashedSecretASecretB",
          "description": "bytes32 hash of secretA concatenated with secretB.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "uint256 amount 'msg.sender' will receive.",
          "recommendedTypes": []
        },
        {
          "name": "winProb",
          "description": "bytes32 win probability.",
          "recommendedTypes": []
        },
        {
          "name": "counterparty",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "bytes32.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "bytes32.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "uint8.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemedTickets(bytes32)",
      "name": "redeemedTickets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "secsClosure()",
      "name": "secsClosure",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setHashedSecret(bytes27)",
      "name": "setHashedSecret",
      "description": "sets caller's hashedSecret.",
      "parameterDecorators": [
        {
          "name": "hashedSecret",
          "description": "bytes27 hashedSecret to store.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "token()",
      "name": "token",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokensReceived(address,address,address,uint256,bytes,bytes)",
      "name": "tokensReceived",
      "description": "A hook triggered when HOPR tokens are send to this contract.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "address operator requesting the transfer.",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "address token holder address.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "address recipient address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "uint256 amount of tokens to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "userData",
          "description": "bytes extra information provided by the token holder (if any).",
          "recommendedTypes": []
        },
        {
          "name": "operatorData",
          "description": "bytes extra information provided by the operator (if any).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}