{
  "schema": "../schema.json",
  "tags": [],
  "name": "ABDKMathQuad",
  "description": "Smart contract library of mathematical functions operating with IEEE 754 quadruple-precision binary floating-point numbers (quadruple precision numbers). As long as quadruple precision numbers are 16-bytes long, they are represented by bytes16 type.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "abs(bytes16)",
      "name": "abs",
      "description": "Calculate |x|.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "add(bytes16,bytes16)",
      "name": "add",
      "description": "Calculate x + y. Special values behave in the following way: NAN + x = NAN for any x. Infinity + x = Infinity for any finite x. -Infinity + x = -Infinity for any finite x. Infinity + Infinity = Infinity. -Infinity + -Infinity = -Infinity. Infinity + -Infinity = -Infinity + Infinity = NAN.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        },
        {
          "name": "y",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cmp(bytes16,bytes16)",
      "name": "cmp",
      "description": "Calculate sign (x - y). Revert if either argument is NAN, or both arguments are infinities of the same sign.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        },
        {
          "name": "y",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "sign (x - y).",
          "recommendedTypes": [],
          "solidityType": "int8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "div(bytes16,bytes16)",
      "name": "div",
      "description": "Calculate x / y. Special values behave in the following way: NAN / x = NAN for any x. x / NAN = NAN for any x. Infinity / x = Infinity for any finite non-negative x. Infinity / x = -Infinity for any finite negative x including -0. -Infinity / x = -Infinity for any finite non-negative x. -Infinity / x = Infinity for any finite negative x including -0. x / Infinity = 0 for any finite non-negative x. x / -Infinity = -0 for any finite non-negative x. x / Infinity = -0 for any finite non-negative x including -0. x / -Infinity = 0 for any finite non-negative x including -0. Infinity / Infinity = NAN. Infinity / -Infinity = -NAN. -Infinity / Infinity = -NAN. -Infinity / -Infinity = NAN. Division by zero behaves in the following way: x / 0 = Infinity for any finite positive x. x / -0 = -Infinity for any finite positive x. x / 0 = -Infinity for any finite negative x. x / -0 = Infinity for any finite negative x. 0 / 0 = NAN. 0 / -0 = NAN. -0 / 0 = NAN. -0 / -0 = NAN.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        },
        {
          "name": "y",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "eq(bytes16,bytes16)",
      "name": "eq",
      "description": "Test whether x equals y. NAN, infinity, and -infinity are not equal to anything.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        },
        {
          "name": "y",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if x equals to y, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exp(bytes16)",
      "name": "exp",
      "description": "Calculate e^x.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "from128x128(int256)",
      "name": "from128x128",
      "description": "Convert signed 128.128 bit fixed point number into quadruple precision number.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "signed 128.128 bit fixed point number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "from64x64(int128)",
      "name": "from64x64",
      "description": "Convert signed 64.64 bit fixed point number into quadruple precision number.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "signed 64.64 bit fixed point number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fromDouble(bytes8)",
      "name": "fromDouble",
      "description": "Convert double precision number into quadruple precision number.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "double precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fromInt(int256)",
      "name": "fromInt",
      "description": "Convert signed 256-bit integer number into quadruple precision number.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "signed 256-bit integer number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fromOctuple(bytes32)",
      "name": "fromOctuple",
      "description": "Convert octuple precision number into quadruple precision number.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "octuple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fromUInt(uint256)",
      "name": "fromUInt",
      "description": "Convert unsigned 256-bit integer number into quadruple precision number.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "unsigned 256-bit integer number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isInfinity(bytes16)",
      "name": "isInfinity",
      "description": "Test whether given quadruple precision number is positive or negative infinity.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if x is positive or negative infinity, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isNAN(bytes16)",
      "name": "isNAN",
      "description": "Test whether given quadruple precision number is NAN.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if x is NAN, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ln(bytes16)",
      "name": "ln",
      "description": "Calculate natural logarithm of x. Return NAN on negative x excluding -0.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "logBase2(bytes16)",
      "name": "logBase2",
      "description": "Calculate binary logarithm of x. Return NAN on negative x excluding -0.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mul(bytes16,bytes16)",
      "name": "mul",
      "description": "Calculate x * y. Special values behave in the following way: NAN * x = NAN for any x. Infinity * x = Infinity for any finite positive x. Infinity * x = -Infinity for any finite negative x. -Infinity * x = -Infinity for any finite positive x. -Infinity * x = Infinity for any finite negative x. Infinity * 0 = NAN. -Infinity * 0 = NAN. Infinity * Infinity = Infinity. Infinity * -Infinity = -Infinity. -Infinity * Infinity = -Infinity. -Infinity * -Infinity = Infinity.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        },
        {
          "name": "y",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "neg(bytes16)",
      "name": "neg",
      "description": "Calculate -x.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pow(bytes16,bytes16)",
      "name": "pow",
      "description": "Calculate x^y.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        },
        {
          "name": "y",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "powerBase2(bytes16)",
      "name": "powerBase2",
      "description": "Calculate 2^x.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sign(bytes16)",
      "name": "sign",
      "description": "Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x is positive. Note that sign (-0) is zero. Revert if x is NAN.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "sign of x.",
          "recommendedTypes": [],
          "solidityType": "int8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sqrt(bytes16)",
      "name": "sqrt",
      "description": "Calculate square root of x. Return NAN on negative x excluding -0.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sub(bytes16,bytes16)",
      "name": "sub",
      "description": "Calculate x - y. Special values behave in the following way: NAN - x = NAN for any x. Infinity - x = Infinity for any finite x. -Infinity - x = -Infinity for any finite x. Infinity - -Infinity = Infinity. -Infinity - Infinity = -Infinity. Infinity - Infinity = -Infinity - -Infinity = NAN.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        },
        {
          "name": "y",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "quadruple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "to128x128(bytes16)",
      "name": "to128x128",
      "description": "Convert quadruple precision number into signed 128.128 bit fixed point number. Revert on overflow.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "signed 128.128 bit fixed point number.",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "to64x64(bytes16)",
      "name": "to64x64",
      "description": "Convert quadruple precision number into signed 64.64 bit fixed point number. Revert on overflow.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "signed 64.64 bit fixed point number.",
          "recommendedTypes": [],
          "solidityType": "int128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toDouble(bytes16)",
      "name": "toDouble",
      "description": "Convert quadruple precision number into double precision number.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "double precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toInt(bytes16)",
      "name": "toInt",
      "description": "Convert quadruple precision number into signed 256-bit integer number rounding towards zero. Revert on overflow.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "signed 256-bit integer number.",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toOctuple(bytes16)",
      "name": "toOctuple",
      "description": "Convert quadruple precision number into octuple precision number.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "octuple precision number.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toUInt(bytes16)",
      "name": "toUInt",
      "description": "Convert quadruple precision number into unsigned 256-bit integer number rounding towards zero. Revert on underflow. Note, that negative floating point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer without error, because they are rounded to zero.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "quadruple precision number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "unsigned 256-bit integer number.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}