{
  "schema": "../schema.json",
  "tags": [],
  "name": "InstantRefundRelay",
  "description": "Relay contract. Two-stage deployment required. Deploy via CREATE2 and INIT() in the same transaction. Handles relaying transactions, managing the relayers & user deposits.",
  "eventDecorators": [
    {
      "signature": "Deposit(address,uint256,uint256)",
      "name": "Deposit",
      "description": "Emit when strategy is set.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OutOfCoins()",
      "name": "OutOfCoins",
      "description": "Emit when strategy is set.",
      "parameterDecorators": []
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emit when strategy is set.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RelayExecuted(bytes32,bool,address,uint256,uint256)",
      "name": "RelayExecuted",
      "description": "Emit when strategy is set.",
      "parameterDecorators": [
        {
          "name": "relayTxId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "gasUsed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "gasPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RelayerInstalled(address)",
      "name": "RelayerInstalled",
      "description": "Emit when strategy is set.",
      "parameterDecorators": [
        {
          "name": "relayer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RelayerUninstalled(address)",
      "name": "RelayerUninstalled",
      "description": "Emit when strategy is set.",
      "parameterDecorators": [
        {
          "name": "relayer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdraw(address,address,uint256)",
      "name": "Withdraw",
      "description": "Emit when strategy is set.",
      "parameterDecorators": [
        {
          "name": "depositor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "absoluteTopUp(address,uint256)",
      "name": "absoluteTopUp",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_recipient",
          "description": "Receiver of the topup.",
          "recommendedTypes": []
        },
        {
          "name": "_topUp",
          "description": "Funds to send Called by a relayer to perform an \"absolute\" top up. It can exceed the expected max balance of a relayer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositFor(address)",
      "name": "depositFor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_recipient",
          "description": "Associate funds with this address. Supply a deposit for a specified recipient. Caution: The recipient must be an externally owned account as all jobs sent to any.sender must be signed and associated with a positive balance in this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositors(address)",
      "name": "depositors",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "execute(tuple(bytes32,address,bytes,uint256),uint256)",
      "name": "execute",
      "description": "Only authorised relayer can execute relay jobs and they are refunded gas at the end of the call. Critically, if the relay job fails, we can simply catch exception and continue with the refund.",
      "parameterDecorators": [
        {
          "name": "_relayTx",
          "description": "A relay tx containing the job to execute.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "id",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "to",
              "description": "",
              "type": "address"
            },
            {
              "name": "data",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "gasLimit",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "_gasRefund",
          "description": "Gas amount to refund.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "installRelayer(address)",
      "name": "installRelayer",
      "description": "Only the owner can install a new relayer.",
      "parameterDecorators": [
        {
          "name": "_relayer",
          "description": "New relayer address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "migrate(address,uint256,address)",
      "name": "migrate",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_recipient",
          "description": "Address that receives funds in the new PaymentDeposit.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Funds to send.",
          "recommendedTypes": []
        },
        {
          "name": "_otherDeposit",
          "description": "New Payment Deposit contract Use admin privileges to migrate a user's deposits to another deposit contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "relativeTopUp(address,uint256)",
      "name": "relativeTopUp",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_recipient",
          "description": "Receiver of the topup.",
          "recommendedTypes": []
        },
        {
          "name": "_maxBalance",
          "description": "Maximum topup to send Called by a relayer to perform a relative top up. Only sends enough funds for relayer to reach max balance.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "relayers(address)",
      "name": "relayers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Owner cannot be a relayer or this contract.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "Owner of contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uninstallRelayer(address)",
      "name": "uninstallRelayer",
      "description": "Only the owner can uninstall a new relayer.",
      "parameterDecorators": [
        {
          "name": "_relayer",
          "description": "New relayer address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uniqueDepositors()",
      "name": "uniqueDepositors",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawFor(address,address,uint256)",
      "name": "withdrawFor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_depositor",
          "description": "Funds being withdrawn from (e.g. deducts their balance).",
          "recommendedTypes": []
        },
        {
          "name": "_recipient",
          "description": "Receiver of the funds.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Funds to send Move funds out of the contract Depositor is the OWNER of the funds being withdrawn. Recipient is the RECEIVER of the funds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}