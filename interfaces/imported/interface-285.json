{"schema":"../schema.json","tags":["dao"],"name":"DAOTracker","description":"An on-chain \"source of truth\" for what DAOs should be index into DAOstack's subgraph.","eventDecorators":[{"signature":"BlacklistDAO(address,string)","name":"BlacklistDAO","description":"","parameterDecorators":[{"name":"_avatar","description":"","recommendedTypes":[],"indexed":true},{"name":"_explanationHash","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ResetDAO(address,string)","name":"ResetDAO","description":"","parameterDecorators":[{"name":"_avatar","description":"","recommendedTypes":[],"indexed":true},{"name":"_explanationHash","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TrackDAO(address,address,address,address,address,string)","name":"TrackDAO","description":"","parameterDecorators":[{"name":"_avatar","description":"","recommendedTypes":[],"indexed":true},{"name":"_controller","description":"","recommendedTypes":[],"indexed":false},{"name":"_reputation","description":"","recommendedTypes":[],"indexed":false},{"name":"_daoToken","description":"","recommendedTypes":[],"indexed":false},{"name":"_sender","description":"","recommendedTypes":[],"indexed":false},{"name":"_arcVersion","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"blacklist(address,string)","name":"blacklist","description":"blacklist a DAO from the cache. This should be callable by maintainer of the cache. Blacklisting can be used to defend against DoS attacks, or to remove spam. In order for this blacklisting to take affect within the cache, it would need to be rebuilt.","parameterDecorators":[{"name":"_avatar","description":"the organization avatar.","recommendedTypes":[]},{"name":"_explanationHash","description":"A hash of a document explaining why this DAO was blacklisted.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"blacklisted(address)","name":"blacklisted","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"reset(address,string)","name":"reset","description":"reset a DAO in the cache. This should be callable by the maintainer of the cache.","parameterDecorators":[{"name":"_avatar","description":"the organization avatar.","recommendedTypes":[]},{"name":"_explanationHash","description":"A hash of a document explaining why this DAO was reset.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"track(address,address,string)","name":"track","description":"track a new organization. This function will tell the subgraph to start ingesting events from the DAO's contracts. NOTE: This function should be called as early as possible in the DAO deployment process. **Smart Contract Events that are emitted from blocks prior to this function's event being emitted WILL NOT be ingested into the subgraph**, leading to an incorrect cache. If this happens to you, please contact the subgraph maintainer. Your DAO will need to be added to the subgraph's startup config, and the cache will need to be rebuilt.","parameterDecorators":[{"name":"_avatar","description":"the organization avatar.","recommendedTypes":[]},{"name":"_controller","description":"the organization controller.","recommendedTypes":[]},{"name":"_arcVersion","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}