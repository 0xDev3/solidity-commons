{
  "schema": "../schema.json",
  "tags": [],
  "name": "PublicResolverUpgradeable",
  "description": "A simple resolver anyone can use; only allows the owner of a node to set its address.",
  "eventDecorators": [
    {
      "signature": "ABIChanged(bytes32,uint256)",
      "name": "ABIChanged",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "contentType",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AddrChanged(bytes32,address)",
      "name": "AddrChanged",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "a",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AddressChanged(bytes32,uint256,bytes)",
      "name": "AddressChanged",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AdminChanged(address,address)",
      "name": "AdminChanged",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "previousAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ApprovalForAll(address,address,bool)",
      "name": "ApprovalForAll",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BeaconUpgraded(address)",
      "name": "BeaconUpgraded",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "beacon",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ContenthashChanged(bytes32,bytes)",
      "name": "ContenthashChanged",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "InterfaceChanged(bytes32,bytes4,address)",
      "name": "InterfaceChanged",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NameChanged(bytes32,string)",
      "name": "NameChanged",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PubkeyChanged(bytes32,bytes32,bytes32)",
      "name": "PubkeyChanged",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TextChanged(bytes32,string,string)",
      "name": "TextChanged",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Upgraded(address)",
      "name": "Upgraded",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ABI(bytes32,uint256)",
      "name": "ABI",
      "description": "Returns the ABI associated with an ENS node. Defined in EIP205.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The ENS node to query.",
          "recommendedTypes": []
        },
        {
          "name": "contentTypes",
          "description": "A bitwise OR of the ABI formats accepted by the caller.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "contentType The content type of the return value.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_1",
          "description": "data The ABI data.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addr(bytes32)",
      "name": "addr",
      "description": "Returns the address associated with an ENS node.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The ENS node to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The associated address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addr(bytes32,uint256)",
      "name": "addr",
      "description": "",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "coinType",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeProxyAdmin(address)",
      "name": "changeProxyAdmin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "contenthash(bytes32)",
      "name": "contenthash",
      "description": "Returns the contenthash associated with an ENS node.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The ENS node to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The associated contenthash.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProxyAdmin()",
      "name": "getProxyAdmin",
      "description": "Returns the active proxy admin.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address)",
      "name": "initialize",
      "description": "Initialiser.",
      "parameterDecorators": [
        {
          "name": "_ens",
          "description": "The address of the ENS registry.",
          "recommendedTypes": []
        },
        {
          "name": "wrapperAddress",
          "description": "The address of the ERC1155 NameWrapper.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "interfaceImplementer(bytes32,bytes4)",
      "name": "interfaceImplementer",
      "description": "Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The ENS node to query.",
          "recommendedTypes": []
        },
        {
          "name": "interfaceID",
          "description": "The EIP 165 interface ID to check for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The address that implements this interface, or 0 if the interface is unsupported.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isApprovedForAll(address,address)",
      "name": "isApprovedForAll",
      "description": "See {IERC1155-isApprovedForAll}.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "name(bytes32)",
      "name": "name",
      "description": "Returns the name associated with an ENS node, for reverse records. Defined in EIP181.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The ENS node to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The associated name.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pubkey(bytes32)",
      "name": "pubkey",
      "description": "Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The ENS node to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "x",
          "description": "The X coordinate of the curve point for the public key.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "y",
          "description": "The Y coordinate of the curve point for the public key.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setABI(bytes32,uint256,bytes)",
      "name": "setABI",
      "description": "Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The node to update.",
          "recommendedTypes": []
        },
        {
          "name": "contentType",
          "description": "The content type of the ABI.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "The ABI data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAddr(bytes32,uint256,bytes)",
      "name": "setAddr",
      "description": "",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "coinType",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "a",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAddr(bytes32,address)",
      "name": "setAddr",
      "description": "Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The node to update.",
          "recommendedTypes": []
        },
        {
          "name": "a",
          "description": "The address to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setApprovalForAll(address,bool)",
      "name": "setApprovalForAll",
      "description": "See {IERC1155-setApprovalForAll}.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "approved",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setContenthash(bytes32,bytes)",
      "name": "setContenthash",
      "description": "Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The node to update.",
          "recommendedTypes": []
        },
        {
          "name": "hash",
          "description": "The contenthash to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setInterface(bytes32,bytes4,address)",
      "name": "setInterface",
      "description": "Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The node to update.",
          "recommendedTypes": []
        },
        {
          "name": "interfaceID",
          "description": "The EIP 165 interface ID.",
          "recommendedTypes": []
        },
        {
          "name": "implementer",
          "description": "The address of a contract that implements this interface for this node.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setName(bytes32,string)",
      "name": "setName",
      "description": "Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The node to update.",
          "recommendedTypes": []
        },
        {
          "name": "newName",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPubkey(bytes32,bytes32,bytes32)",
      "name": "setPubkey",
      "description": "Sets the SECP256k1 public key associated with an ENS node.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The ENS node to query.",
          "recommendedTypes": []
        },
        {
          "name": "x",
          "description": "the X coordinate of the curve point for the public key.",
          "recommendedTypes": []
        },
        {
          "name": "y",
          "description": "the Y coordinate of the curve point for the public key.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setText(bytes32,string,string)",
      "name": "setText",
      "description": "Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The node to update.",
          "recommendedTypes": []
        },
        {
          "name": "key",
          "description": "The key to set.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The text data value to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "",
      "parameterDecorators": [
        {
          "name": "interfaceID",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "text(bytes32,string)",
      "name": "text",
      "description": "Returns the text data associated with an ENS node and key.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The ENS node to query.",
          "recommendedTypes": []
        },
        {
          "name": "key",
          "description": "The text data key to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The associated text data.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeTo(address)",
      "name": "upgradeTo",
      "description": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "upgradeToAndCall(address,bytes)",
      "name": "upgradeToAndCall",
      "description": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    }
  ]
}