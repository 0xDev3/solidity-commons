{
  "schema": "../schema.json",
  "tags": [
    "borrowing",
    "lending",
    "compound"
  ],
  "name": "CompoundLeverageModule",
  "description": "CompoundLeverageModule.",
  "eventDecorators": [
    {
      "signature": "AnySetAllowedUpdated(bool)",
      "name": "AnySetAllowedUpdated",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "_anySetAllowed",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BorrowAssetsUpdated(address,bool,address[])",
      "name": "BorrowAssetsUpdated",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount withdrawn.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fdId",
          "description": "Fixed deposit Id.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "userAddr",
          "description": "User address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "COMPGulped(address,address,address,uint256,uint256,uint256)",
      "name": "COMPGulped",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_collateralAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_exchangeAdapter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_totalCompClaimed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_totalReceiveAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_protocolFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CollateralAssetsUpdated(address,bool,address[])",
      "name": "CollateralAssetsUpdated",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount withdrawn.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fdId",
          "description": "Fixed deposit Id.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "userAddr",
          "description": "User address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LeverageDecreased(address,address,address,address,uint256,uint256,uint256)",
      "name": "LeverageDecreased",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_collateralAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_repayAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_exchangeAdapter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_totalRedeemAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_totalRepayAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_protocolFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LeverageIncreased(address,address,address,address,uint256,uint256,uint256)",
      "name": "LeverageIncreased",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_borrowAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_collateralAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_exchangeAdapter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_totalBorrowAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_totalReceiveAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_protocolFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetTokenStatusUpdated(address,bool)",
      "name": "SetTokenStatusUpdated",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_added",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addBorrowAssets(address,address[])",
      "name": "addBorrowAssets",
      "description": "MANAGER ONLY: Add borrow asset. Borrow asset is tracked for syncing positions and entered in Compound markets.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_newBorrowAssets",
          "description": "Addresses of borrow underlying assets to add.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addCollateralAssets(address,address[])",
      "name": "addCollateralAssets",
      "description": "MANAGER ONLY: Add enabled collateral assets. Collateral assets are tracked for syncing positions and entered in Compound markets.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_newCollateralAssets",
          "description": "Addresses of new collateral underlying assets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addCompoundMarket(address,address)",
      "name": "addCompoundMarket",
      "description": "GOVERNANCE ONLY: Add Compound market to module with stored underlying to cToken mapping in case of market additions to Compound. // importANT: Validations are skipped in order to get contract under bytecode limit.",
      "parameterDecorators": [
        {
          "name": "_cToken",
          "description": "Address of cToken to add.",
          "recommendedTypes": []
        },
        {
          "name": "_underlying",
          "description": "Address of underlying token that maps to cToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "allowedSetTokens(address)",
      "name": "allowedSetTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "anySetAllowed()",
      "name": "anySetAllowed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "borrowCTokenEnabled(address,address)",
      "name": "borrowCTokenEnabled",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collateralCTokenEnabled(address,address)",
      "name": "collateralCTokenEnabled",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "componentIssueHook(address,uint256,address,bool)",
      "name": "componentIssueHook",
      "description": "MODULE ONLY: Hook called prior to looping through each component on issuance. Invokes borrow in order for module to return debt to issuer. Only callable by valid module.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_setTokenQuantity",
          "description": "Quantity of SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_component",
          "description": "Address of component.",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "componentRedeemHook(address,uint256,address,bool)",
      "name": "componentRedeemHook",
      "description": "MODULE ONLY: Hook called prior to looping through each component on redemption. Invokes repay after issuance module transfers debt from issuer. Only callable by valid module.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_setTokenQuantity",
          "description": "Quantity of SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_component",
          "description": "Address of component.",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delever(address,address,address,uint256,uint256,string,bytes)",
      "name": "delever",
      "description": "MANAGER ONLY: Decrease leverage for a given collateral position using an enabled borrow asset that is enabled.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_collateralAsset",
          "description": "Address of collateral asset (underlying of cToken).",
          "recommendedTypes": []
        },
        {
          "name": "_repayAsset",
          "description": "Address of asset being repaid.",
          "recommendedTypes": []
        },
        {
          "name": "_redeemQuantity",
          "description": "Quantity of collateral asset to delever.",
          "recommendedTypes": []
        },
        {
          "name": "_minRepayQuantity",
          "description": "Minimum amount of repay asset to receive post trade.",
          "recommendedTypes": []
        },
        {
          "name": "_tradeAdapterName",
          "description": "Name of trade adapter.",
          "recommendedTypes": []
        },
        {
          "name": "_tradeData",
          "description": "Arbitrary data for trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getEnabledAssets(address)",
      "name": "getEnabledAssets",
      "description": "Get enabled assets for SetToken. Returns an array of enabled cTokens that are collateral assets and an array of underlying that are borrow assets.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Collateral cToken assets that are enabled.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "_1",
          "description": "Underlying borrowed assets that are enabled.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "gulp(address,address,uint256,string,bytes)",
      "name": "gulp",
      "description": "MANAGER ONLY: Claims COMP and trades for specified collateral asset. If collateral asset is COMP, then no trade occurs and min notional reapy quantity, trade adapter name and trade data parameters are not used.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_collateralAsset",
          "description": "Address of underlying cToken asset.",
          "recommendedTypes": []
        },
        {
          "name": "_minNotionalReceiveQuantity",
          "description": "Minimum total amount of collateral asset to receive post trade.",
          "recommendedTypes": []
        },
        {
          "name": "_tradeAdapterName",
          "description": "Name of trade adapter.",
          "recommendedTypes": []
        },
        {
          "name": "_tradeData",
          "description": "Arbitrary data for trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address,address[],address[])",
      "name": "initialize",
      "description": "MANAGER ONLY: Initializes this module to the SetToken. Only callable by the SetToken's manager. Note: managers can enable collateral and borrow assets that don't exist as positions on the SetToken.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken to initialize.",
          "recommendedTypes": []
        },
        {
          "name": "_collateralAssets",
          "description": "Underlying tokens to be enabled as collateral in the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_borrowAssets",
          "description": "Underlying tokens to be enabled as borrow in the SetToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lever(address,address,address,uint256,uint256,string,bytes)",
      "name": "lever",
      "description": "MANAGER ONLY: Increases leverage for a given collateral position using an enabled borrow asset that is enabled. Performs a DEX trade, exchanging the borrow asset for collateral asset.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_borrowAsset",
          "description": "Address of asset being borrowed for leverage.",
          "recommendedTypes": []
        },
        {
          "name": "_collateralAsset",
          "description": "Address of collateral asset (underlying of cToken).",
          "recommendedTypes": []
        },
        {
          "name": "_borrowQuantity",
          "description": "Borrow quantity of asset in position units.",
          "recommendedTypes": []
        },
        {
          "name": "_minReceiveQuantity",
          "description": "Min receive quantity of collateral asset to receive post-trade in position units.",
          "recommendedTypes": []
        },
        {
          "name": "_tradeAdapterName",
          "description": "Name of trade adapter.",
          "recommendedTypes": []
        },
        {
          "name": "_tradeData",
          "description": "Arbitrary data for trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "moduleIssueHook(address,uint256)",
      "name": "moduleIssueHook",
      "description": "MODULE ONLY: Hook called prior to issuance to sync positions on SetToken. Only callable by valid module.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "moduleRedeemHook(address,uint256)",
      "name": "moduleRedeemHook",
      "description": "MODULE ONLY: Hook called prior to redemption to sync positions on SetToken. For redemption, always use current borrowed balance after interest accrual. Only callable by valid module.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registerToModule(address,address)",
      "name": "registerToModule",
      "description": "MANAGER ONLY: Add registration of this module on debt issuance module for the SetToken. Note: if the debt issuance module is not added to SetToken before this module is initialized, then this function needs to be called if the debt issuance module is later added and initialized to prevent state inconsistencies.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_debtIssuanceModule",
          "description": "Debt issuance module address to register.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeBorrowAssets(address,address[])",
      "name": "removeBorrowAssets",
      "description": "MANAGER ONLY: Remove borrow asset. Borrow asset is exited in Compound markets If there is a borrow balance, borrow asset cannot be removed.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_borrowAssets",
          "description": "Addresses of borrow underlying assets to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeCollateralAssets(address,address[])",
      "name": "removeCollateralAssets",
      "description": "MANAGER ONLY: Remove collateral asset. Collateral asset exited in Compound markets If there is a borrow balance, collateral asset cannot be removed.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_collateralAssets",
          "description": "Addresses of collateral underlying assets to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeCompoundMarket(address)",
      "name": "removeCompoundMarket",
      "description": "GOVERNANCE ONLY: Remove Compound market on stored underlying to cToken mapping in case of market removals // importANT: Validations are skipped in order to get contract under bytecode limit.",
      "parameterDecorators": [
        {
          "name": "_underlying",
          "description": "Address of underlying token to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeModule()",
      "name": "removeModule",
      "description": "MANAGER ONLY: Removes this module from the SetToken, via call by the SetToken. Compound Settings and manager enabled cTokens are deleted. Markets are exited on Comptroller (only valid if borrow balances are zero).",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sync(address,bool)",
      "name": "sync",
      "description": "CALLABLE BY ANYBODY: Sync Set positions with enabled Compound collateral and borrow positions. For collateral assets, update cToken default position. For borrow assets, update external borrow position. - Collateral assets may come out of sync when a position is liquidated - Borrow assets may come out of sync when interest is accrued or position is liquidated and borrow is repaid.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_shouldAccrueInterest",
          "description": "Boolean indicating whether use current block interest rate value or stored value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "underlyingToCToken(address)",
      "name": "underlyingToCToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateAllowedSetToken(address,bool)",
      "name": "updateAllowedSetToken",
      "description": "GOVERNANCE ONLY: Add or remove allowed SetToken to initialize this module. Only callable by governance.",
      "parameterDecorators": [
        {
          "name": "_setToken",
          "description": "Instance of the SetToken.",
          "recommendedTypes": []
        },
        {
          "name": "_status",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateAnySetAllowed(bool)",
      "name": "updateAnySetAllowed",
      "description": "GOVERNANCE ONLY: Toggle whether any SetToken is allowed to initialize this module. Only callable by governance.",
      "parameterDecorators": [
        {
          "name": "_anySetAllowed",
          "description": "Bool indicating whether allowedSetTokens is enabled.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}