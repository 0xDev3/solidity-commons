{
  "schema": "../schema.json",
  "tags": [
    "swaps",
    "yearn finance"
  ],
  "name": "Core",
  "description": "HedgeCore Upgradable Contract for `gohm`. Main Core contract for `Soft Hedge & Leverage` protocol - Users(EOA or WhitelistedContracts) can: # deposit # withdraw # swap # sponsor & sponsorWithdraw.",
  "eventDecorators": [
    {
      "signature": "AdminChanged(address,address)",
      "name": "AdminChanged",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "- The account that called the function.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "relayer",
          "description": "- The relayer address to be added or removed.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BeaconUpgraded(address)",
      "name": "BeaconUpgraded",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "beacon",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Deposited(address,uint256,uint256)",
      "name": "Deposited",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "user_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "shortAmount_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "longAmount_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "HedgeLog(uint256,bool,uint256)",
      "name": "HedgeLog",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "isLong",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rebaseTotalAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Initialized(address)",
      "name": "Initialized",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "initializer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Logger(uint256,uint256,uint256,uint256)",
      "name": "Logger",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "shortIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "longIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "shortRebase_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "longRebased_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PriceUpdated(uint256)",
      "name": "PriceUpdated",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "price_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Rebased(uint256,uint256)",
      "name": "Rebased",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "- The account that called the function.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "relayer",
          "description": "- The relayer address to be added or removed.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SponsorWithdrawn(address,uint256)",
      "name": "SponsorWithdrawn",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "- The account that called the function.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "relayer",
          "description": "- The relayer address to be added or removed.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Sponsored(address,uint256)",
      "name": "Sponsored",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "- The account that called the function.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "relayer",
          "description": "- The relayer address to be added or removed.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Swaped(address,bool,uint256)",
      "name": "Swaped",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "user_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fromLongToShort_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Upgraded(address)",
      "name": "Upgraded",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdrawn(address,uint256,uint256)",
      "name": "Withdrawn",
      "description": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.",
      "parameterDecorators": [
        {
          "name": "to_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "shortAmount_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "longAmount_",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "PRECISION()",
      "name": "PRECISION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PRICE_PRECISION()",
      "name": "PRICE_PRECISION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "RATIO_PRECISION()",
      "name": "RATIO_PRECISION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addressProvider()",
      "name": "addressProvider",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceFromWToken(uint256)",
      "name": "balanceFromWToken",
      "description": "gohm => ohm balance.",
      "parameterDecorators": [
        {
          "name": "amount_",
          "description": "gohm amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "ohm/sohm amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceToWToken(uint256)",
      "name": "balanceToWToken",
      "description": "ohm => gohm balance.",
      "parameterDecorators": [
        {
          "name": "amount_",
          "description": "ohm/sohm amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "gohm amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currSTokenIndex()",
      "name": "currSTokenIndex",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(uint256,uint256)",
      "name": "deposit",
      "description": "deposit gOHM to soft hedge & leverage and get hgeToken and levToken. for frontend.",
      "parameterDecorators": [
        {
          "name": "hgeAmount_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "levAmount_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositFor(address,uint256,uint256)",
      "name": "depositFor",
      "description": "caller depositFor depositFor `user_`.",
      "parameterDecorators": [
        {
          "name": "user_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "hgeAmount_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "levAmount_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "earnedProfit(address)",
      "name": "earnedProfit",
      "description": "view your earned profits. for user view and reference only! might not be accurate if user transfer their hge/lev tokens.",
      "parameterDecorators": [
        {
          "name": "user_",
          "description": "user address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "earnedProfit_",
          "description": "earned profit for `user_`.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fetchLastNRoundsResults(uint256)",
      "name": "fetchLastNRoundsResults",
      "description": "return last n rounds result in an array. results array start from old result to new results.",
      "parameterDecorators": [
        {
          "name": "n_",
          "description": "number of results you wish to fectch.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results_",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "gauge()",
      "name": "gauge",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hedgeCoreStatus()",
      "name": "hedgeCoreStatus",
      "description": "true: deposit open. false: deposit close. 2 & 3 is not likely to happen but tripple check 1. in allowed period, 2. price updated is not called. 3. before rebased.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "isUnlocked_",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hedgeInfo()",
      "name": "hedgeInfo",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "lastPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "hedgeTokenPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rebaseTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "cnt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hedgeRebaseCnt()",
      "name": "hedgeRebaseCnt",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hgeToken()",
      "name": "hgeToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "index()",
      "name": "index",
      "description": "fetch index. data source is chainlink oracle. get from oracle master and the mapping entry is set to the chainlink aggregator address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initGnesisHedge(address,address,address,uint256)",
      "name": "initGnesisHedge",
      "description": "[onlyDAO] we init critical settings and variables for rebase here.",
      "parameterDecorators": [
        {
          "name": "hgeToken_",
          "description": "Hedge token (interest bearing token).",
          "recommendedTypes": []
        },
        {
          "name": "levToken_",
          "description": "Leverage token (interest bearing token).",
          "recommendedTypes": []
        },
        {
          "name": "sponsorToken_",
          "description": "Sponsor token (normal ERC20 token).",
          "recommendedTypes": []
        },
        {
          "name": "lastRebaseTime_",
          "description": "set the last rebase begin time. (for rebase and price update).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(string,address,address)",
      "name": "initialize",
      "description": "initialize function for upgradable contract.",
      "parameterDecorators": [
        {
          "name": "name_",
          "description": "name of this contract.",
          "recommendedTypes": []
        },
        {
          "name": "addressProvider_",
          "description": "addressProvider.",
          "recommendedTypes": []
        },
        {
          "name": "wToken_",
          "description": "wrapped token (gohm).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isLevWin(bool,uint256,uint256)",
      "name": "isLevWin",
      "description": "check if lev win. (>=: lev, <: hedge).",
      "parameterDecorators": [
        {
          "name": "ispriceRatioUp_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "lastPrice_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "currPrice_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isLev_",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPriceRatioUp()",
      "name": "isPriceRatioUp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPriceUpdatedBeforeRebase()",
      "name": "isPriceUpdatedBeforeRebase",
      "description": "check if current round price fetched if updated before rebase. the priceCnt = logs.length(rebase cnt) + 1 if updated after rebase or not updated before rebase. the priceCnt = rebaseCnt.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "updated",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSTokenRebased()",
      "name": "isSTokenRebased",
      "description": "check if sToken rebase since last time.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastPriceUpdateTimestamp()",
      "name": "lastPriceUpdateTimestamp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "levRebaseCnt()",
      "name": "levRebaseCnt",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "levToken()",
      "name": "levToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "logs(uint256)",
      "name": "logs",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isLev",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "atualRebasedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "totalRebasedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "timestampOccured",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "tokenIdx",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "logsLen()",
      "name": "logsLen",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minSingleSideDepositAmount()",
      "name": "minSingleSideDepositAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "name()",
      "name": "name",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "priceAfterRatio()",
      "name": "priceAfterRatio",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "price_",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "priceRatio()",
      "name": "priceRatio",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "resctrictedPeriod()",
      "name": "resctrictedPeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rescueTokens(address,uint256)",
      "name": "rescueTokens",
      "description": "[onlyDAO] rescue leftover tokens and send them to DAO.",
      "parameterDecorators": [
        {
          "name": "token_",
          "description": "reserve curreny.",
          "recommendedTypes": []
        },
        {
          "name": "amount_",
          "description": "amount of reserve token to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPause(bool)",
      "name": "setPause",
      "description": "[onlyEmergencyAdmin] pause or unpause protocol.",
      "parameterDecorators": [
        {
          "name": "paused_",
          "description": "true => pause, false => unpause.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSingleSideMinDepositAmount(uint256)",
      "name": "setSingleSideMinDepositAmount",
      "description": "",
      "parameterDecorators": [
        {
          "name": "minAmount_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWhiteListContract(address,bool)",
      "name": "setWhiteListContract",
      "description": "",
      "parameterDecorators": [
        {
          "name": "contract_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "whitelisted_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWithdrawAllPause(bool)",
      "name": "setWithdrawAllPause",
      "description": "[onlyEmergencyAdmin] pause or unpause withdrawAll.",
      "parameterDecorators": [
        {
          "name": "paused_",
          "description": "true => pause, false => unpause.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sponsorDeposit(uint256)",
      "name": "sponsorDeposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sponsorToken()",
      "name": "sponsorToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sponsorWithdraw(uint256)",
      "name": "sponsorWithdraw",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "startNewHedge()",
      "name": "startNewHedge",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swap(bool,uint256)",
      "name": "swap",
      "description": "swap between soft hedge and soft leverage.",
      "parameterDecorators": [
        {
          "name": "fromLongToShort_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "toGaugeRatio()",
      "name": "toGaugeRatio",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateGaugeAndRatio(address,uint256)",
      "name": "updateGaugeAndRatio",
      "description": "update toGauge address and ratio. The fee is activated when both are set correct. the fee is deducted from the loser' side rebase reward.",
      "parameterDecorators": [
        {
          "name": "newGauge_",
          "description": "gauge address. set to address(0) to turn off fee.",
          "recommendedTypes": []
        },
        {
          "name": "ratio_",
          "description": "fee ratio. ratio is 10^5 precision. so 1000 => 1%. 20000 => 20%.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePriceBeforeRebase()",
      "name": "updatePriceBeforeRebase",
      "description": "record price every 8 hours. called by keeper. can only be called before rebase.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "price_",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePriceRatio(bool,uint256)",
      "name": "updatePriceRatio",
      "description": "update price impact.",
      "parameterDecorators": [
        {
          "name": "isUp_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "newRatio_",
          "description": "no upper limit (0-100%).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateRestrictedPeriod(uint256)",
      "name": "updateRestrictedPeriod",
      "description": "[onlyDAO] range 0-8hours => deposit available window (0 - 8 hours).",
      "parameterDecorators": [
        {
          "name": "value_",
          "description": "new restricted period.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeTo(address)",
      "name": "upgradeTo",
      "description": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "upgradeToAndCall(address,bytes)",
      "name": "upgradeToAndCall",
      "description": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "userDeposited(address)",
      "name": "userDeposited",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "wToken()",
      "name": "wToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "wTokenPrice()",
      "name": "wTokenPrice",
      "description": "gohm price.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "whitelistedContracts(address)",
      "name": "whitelistedContracts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256,uint256)",
      "name": "withdraw",
      "description": "withdraw gOHM. for frontend.",
      "parameterDecorators": [
        {
          "name": "hgeAmount_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "levAmount_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAllPaused()",
      "name": "withdrawAllPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawAllWhenPaused()",
      "name": "withdrawAllWhenPaused",
      "description": "redeem back all available sVSQ after game paused. for user to exit the game completely after the game paused. All hgeToken and levToken of `msg.sender` will be burned.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawTo(address,uint256,uint256)",
      "name": "withdrawTo",
      "description": "caller withdrawTo withdrawTo `user_`.",
      "parameterDecorators": [
        {
          "name": "recipent_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "hgeAmount_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "levAmount_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}