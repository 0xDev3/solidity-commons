{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "vesting",
    "locking"
  ],
  "name": "GraphTokenLockWallet",
  "description": "GraphTokenLockWallet.",
  "eventDecorators": [
    {
      "signature": "ManagerUpdated(address,address)",
      "name": "ManagerUpdated",
      "description": "Event declarations.",
      "parameterDecorators": [
        {
          "name": "_oldManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event declarations.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TokenDestinationsApproved()",
      "name": "TokenDestinationsApproved",
      "description": "Event declarations.",
      "parameterDecorators": []
    },
    {
      "signature": "TokenDestinationsRevoked()",
      "name": "TokenDestinationsRevoked",
      "description": "Event declarations.",
      "parameterDecorators": []
    },
    {
      "signature": "TokensReleased(address,uint256)",
      "name": "TokensReleased",
      "description": "Event declarations.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokensRevoked(address,uint256)",
      "name": "TokensRevoked",
      "description": "Event declarations.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokensWithdrawn(address,uint256)",
      "name": "TokensWithdrawn",
      "description": "Event declarations.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "amountPerPeriod()",
      "name": "amountPerPeriod",
      "description": "Returns amount available to be released after each period according to schedule.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of tokens available after each period.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "approveProtocol()",
      "name": "approveProtocol",
      "description": "Approves protocol access of the tokens managed by this contract. Approves all token destinations registered in the manager to pull tokens.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "availableAmount()",
      "name": "availableAmount",
      "description": "Gets the currently available token according to the schedule. Implements the step-by-step schedule based on periods for available tokens.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of tokens available according to the schedule.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiary()",
      "name": "beneficiary",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentBalance()",
      "name": "currentBalance",
      "description": "Returns the amount of tokens currently held by the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Tokens held in the contract.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentPeriod()",
      "name": "currentPeriod",
      "description": "Gets the current period based on the schedule.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "A number that represents the current period.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentTime()",
      "name": "currentTime",
      "description": "Returns the current block timestamp.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Current block timestamp.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "duration()",
      "name": "duration",
      "description": "Gets duration of contract from start to end in seconds.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of seconds from contract startTime to endTime.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "endTime()",
      "name": "endTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_manager",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_managedAmount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_startTime",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_endTime",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_periods",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_releaseStartTime",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_vestingCliffTime",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_revocable",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isInitialized()",
      "name": "isInitialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRevoked()",
      "name": "isRevoked",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "managedAmount()",
      "name": "managedAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "manager()",
      "name": "manager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "passedPeriods()",
      "name": "passedPeriods",
      "description": "Gets the number of periods that passed since the first period.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "A number of periods that passed since the schedule started.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "periodDuration()",
      "name": "periodDuration",
      "description": "Returns the duration of each period in seconds.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Duration of each period in seconds.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "periods()",
      "name": "periods",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "releasableAmount()",
      "name": "releasableAmount",
      "description": "Gets tokens currently available for release. Considers the schedule and takes into account already released tokens.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of tokens ready to be released.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "release()",
      "name": "release",
      "description": "Releases tokens based on the configured schedule. All available releasable tokens are transferred to beneficiary.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "releaseStartTime()",
      "name": "releaseStartTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "releasedAmount()",
      "name": "releasedAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revocable()",
      "name": "revocable",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "revoke()",
      "name": "revoke",
      "description": "Revokes a vesting schedule and return the unvested tokens to the owner. Vesting schedule is always calculated based on managed tokens.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeProtocol()",
      "name": "revokeProtocol",
      "description": "Revokes protocol access of the tokens managed by this contract. Revokes approval to all token destinations in the manager to pull tokens.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setManager(address)",
      "name": "setManager",
      "description": "Sets a new manager for this contract.",
      "parameterDecorators": [
        {
          "name": "_newManager",
          "description": "Address of the new manager.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sinceStartTime()",
      "name": "sinceStartTime",
      "description": "Gets time elapsed since the start of the contract. Returns zero if called before conctract starTime.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Seconds elapsed from contract startTime.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "startTime()",
      "name": "startTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "surplusAmount()",
      "name": "surplusAmount",
      "description": "Gets surplus amount in the contract based on outstanding amount to release. All funds over outstanding amount is considered surplus that can be withdrawn by beneficiary.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of tokens considered as surplus.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "token()",
      "name": "token",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalOutstandingAmount()",
      "name": "totalOutstandingAmount",
      "description": "Gets the outstanding amount yet to be released based on the whole contract lifetime. Does not consider schedule but just global amounts tracked.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of outstanding tokens for the lifetime of the contract.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "usedAmount()",
      "name": "usedAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vestedAmount()",
      "name": "vestedAmount",
      "description": "Gets the amount of currently vested tokens. Similar to available amount, but is fully vested when contract is non-revocable.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of tokens already vested.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vestingCliffTime()",
      "name": "vestingCliffTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawSurplus(uint256)",
      "name": "withdrawSurplus",
      "description": "Withdraws surplus, unmanaged tokens from the contract. Tokens in the contract over outstanding amount are considered as surplus.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "Amount of tokens to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}