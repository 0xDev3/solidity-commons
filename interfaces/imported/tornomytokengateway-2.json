{"schema":"../schema.json","tags":["tokens"],"name":"TornomyTokenGateway","description":"Gateway handles verifying mint and burn requests. A mintAuthority approves new assets to be minted by providing a digital signature. An ownernpm of an asset can request for it to be burnt.","eventDecorators":[{"signature":"LogBurn(bytes,uint256,uint256,bytes)","name":"LogBurn","description":"event for token purchase logging.","parameterDecorators":[{"name":"_to","description":"","recommendedTypes":[],"indexed":false},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false},{"name":"_n","description":"","recommendedTypes":[],"indexed":true},{"name":"_indexedTo","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"LogMint(address,uint256,uint256,bytes32)","name":"LogMint","description":"event for token purchase logging.","parameterDecorators":[{"name":"_to","description":"","recommendedTypes":[],"indexed":true},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false},{"name":"_n","description":"","recommendedTypes":[],"indexed":true},{"name":"_signedMessageHash","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"LogMintAuthorityUpdated(address)","name":"LogMintAuthorityUpdated","description":"event for token purchase logging.","parameterDecorators":[{"name":"_newMintAuthority","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"event for token purchase logging.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"blacklistRecoverableToken(address)","name":"blacklistRecoverableToken","description":"","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"burn(bytes,uint256)","name":"burn","description":"burn destroys tokens after taking a fee for the `_feeRecipient`, allowing the associated assets to be released on their native chain.","parameterDecorators":[{"name":"_to","description":"The address to receive the un-bridged asset. The format of this address should be of the destination chain. For example, when burning to Bitcoin, _to should be a Bitcoin address.","recommendedTypes":[]},{"name":"_amount","description":"The amount of the token being burnt, in its smallest value. (e.g. satoshis for BTC).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"burnFee()","name":"burnFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint16"}],"emittableEvents":[],"readOnly":true},{"signature":"claimOwnership()","name":"claimOwnership","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"claimTokenOwnership()","name":"claimTokenOwnership","description":"Claims ownership of the token passed in to the constructor. `transferStoreOwnership` must have previously been called. Anyone can call this function.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"feeRecipient()","name":"feeRecipient","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"hashForSignature(string,address,uint256,address,bytes32)","name":"hashForSignature","description":"hashForSignature hashes the parameters so that they can be signed.","parameterDecorators":[{"name":"_symbol","description":"","recommendedTypes":[]},{"name":"_recipient","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]},{"name":"_caller","description":"","recommendedTypes":[]},{"name":"_nHash","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,address,address,uint16,uint16,uint256)","name":"initialize","description":"","parameterDecorators":[{"name":"_token","description":"The TornomyERC20 this Gateway is responsible for.","recommendedTypes":[]},{"name":"_feeRecipient","description":"The recipient of burning and minting fees.","recommendedTypes":[]},{"name":"_mintAuthority","description":"The address of the key that can sign mint requests.","recommendedTypes":[]},{"name":"_mintFee","description":"The amount subtracted each mint request and forwarded to the feeRecipient. In BIPS.","recommendedTypes":[]},{"name":"_burnFee","description":"The amount subtracted each burn request and forwarded to the feeRecipient. In BIPS.","recommendedTypes":[]},{"name":"_minimumBurnAmount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialize(address)","name":"initialize","description":"","parameterDecorators":[{"name":"_nextOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"minimumBurnAmount()","name":"minimumBurnAmount","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"mint(string,address,uint256,bytes32,bytes)","name":"mint","description":"","parameterDecorators":[{"name":"_symbol","description":"","recommendedTypes":[]},{"name":"_recipient","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]},{"name":"_nHash","description":"","recommendedTypes":[]},{"name":"_sig","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"mintAuthority()","name":"mintAuthority","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"mintFee()","name":"mintFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint16"}],"emittableEvents":[],"readOnly":true},{"signature":"nextN()","name":"nextN","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingOwner()","name":"pendingOwner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"recoverTokens(address)","name":"recoverTokens","description":"Allow the owner of the contract to recover funds accidentally sent to the contract. To withdraw ETH, the token should be set to `0x0`.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"status(bytes32)","name":"status","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"token()","name":"token","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferTokenOwnership(address)","name":"transferTokenOwnership","description":"Allow the owner to update the owner of the TornomyERC20 token.","parameterDecorators":[{"name":"_nextTokenOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateBurnFee(uint16)","name":"updateBurnFee","description":"Allow the owner to update the burn fee.","parameterDecorators":[{"name":"_nextBurnFee","description":"The new fee for minting and burning.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateFeeRecipient(address)","name":"updateFeeRecipient","description":"Allow the owner to update the fee recipient.","parameterDecorators":[{"name":"_nextFeeRecipient","description":"The address to start paying fees to.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateMinimumBurnAmount(uint256)","name":"updateMinimumBurnAmount","description":"Allow the owner to update the minimum burn amount.","parameterDecorators":[{"name":"_minimumBurnAmount","description":"The new min burn amount.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateMintAuthority(address)","name":"updateMintAuthority","description":"Allow the owner to update the fee recipient.","parameterDecorators":[{"name":"_nextMintAuthority","description":"The address to start paying fees to.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateMintFee(uint16)","name":"updateMintFee","description":"Allow the owner to update the 'mint' fee.","parameterDecorators":[{"name":"_nextMintFee","description":"The new fee for minting and burning.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"verifySignature(bytes32,bytes)","name":"verifySignature","description":"verifySignature checks the the provided signature matches the provided parameters.","parameterDecorators":[{"name":"_signedMessageHash","description":"","recommendedTypes":[]},{"name":"_sig","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true}]}