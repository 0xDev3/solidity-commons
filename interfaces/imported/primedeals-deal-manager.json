{
  "schema": "../schema.json",
  "tags": [],
  "name": "DealManager",
  "description": "PrimeDeals Deal Manager. Smart contract to serve as the manager for the PrimeDeals architecture.",
  "eventDecorators": [
    {
      "signature": "DaoDepositManagerCreated(address,address)",
      "name": "DaoDepositManagerCreated",
      "description": "This event is emitted when a DaoDepositManager is created.",
      "parameterDecorators": [
        {
          "name": "dao",
          "description": "DAO address to which the DaoDepositManager is linked.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "daoDepositManager",
          "description": "Newly created DaoDepositManager contract address.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "activateModule(address)",
      "name": "activateModule",
      "description": "Activates a new Deals module.",
      "parameterDecorators": [
        {
          "name": "_moduleAddress",
          "description": "The address of a Deals module.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createDaoDepositManager(address)",
      "name": "createDaoDepositManager",
      "description": "Creates a DaoDepositManager for a DAO.",
      "parameterDecorators": [
        {
          "name": "_dao",
          "description": "Address of the DAO for the DaoDepositContract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "daoDepositManager(address)",
      "name": "daoDepositManager",
      "description": "Address DAO => address DaoDepositManager of the DAO.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "daoDepositManagerImplementation()",
      "name": "daoDepositManagerImplementation",
      "description": "Address of the current implementation of the DaoDepositManager.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deactivateModule(address)",
      "name": "deactivateModule",
      "description": "Deactivates a Deals module.",
      "parameterDecorators": [
        {
          "name": "_moduleAddress",
          "description": "The address of a Deals module.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getDaoDepositManager(address)",
      "name": "getDaoDepositManager",
      "description": "Returns the DaoDepositManager of a DAO.",
      "parameterDecorators": [
        {
          "name": "_dao",
          "description": "DAO address for which to return the DaoDepositManger.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address Address of the DaoDepositManager associated with the _dao.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasDaoDepositManager(address)",
      "name": "hasDaoDepositManager",
      "description": "Returns whether a DAO already has a DaoDepositManager.",
      "parameterDecorators": [
        {
          "name": "_dao",
          "description": "DAO address for which to check for an existing DaoDepositManger.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool A bool flag indicating whether a DaoDepositManager contract exists.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isModule(address)",
      "name": "isModule",
      "description": "module address => true/false.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDaoDepositManagerImplementation(address)",
      "name": "setDaoDepositManagerImplementation",
      "description": "Sets a new address for the DaoDepositManager implementation.",
      "parameterDecorators": [
        {
          "name": "_newImplementation",
          "description": "The new address of the DaoDepositManager.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDealManagerInModule(address,address)",
      "name": "setDealManagerInModule",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newDealManager",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_module",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}