{"schema":"../schema.json","tags":[],"name":"WhitelistedAggregatorProxy","description":"","eventDecorators":[{"signature":"AddedToWhitelist(address)","name":"AddedToWhitelist","description":"Emitted when setting contract parameters.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"AnswerUpdated(int256,uint256,uint256)","name":"AnswerUpdated","description":"Emitted when setting contract parameters.","parameterDecorators":[{"name":"current","description":"","recommendedTypes":[],"indexed":true},{"name":"roundId","description":"","recommendedTypes":[],"indexed":true},{"name":"timestamp","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewRound(uint256,address,uint256)","name":"NewRound","description":"Emitted when setting contract parameters.","parameterDecorators":[{"name":"roundId","description":"","recommendedTypes":[],"indexed":true},{"name":"startedBy","description":"","recommendedTypes":[],"indexed":true},{"name":"startedAt","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferRequested(address,address)","name":"OwnershipTransferRequested","description":"Emitted when setting contract parameters.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"to","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when setting contract parameters.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"to","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RemovedFromWhitelist(address)","name":"RemovedFromWhitelist","description":"Emitted when setting contract parameters.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"WhitelistDisabled()","name":"WhitelistDisabled","description":"Emitted when setting contract parameters.","parameterDecorators":[]},{"signature":"WhitelistEnabled()","name":"WhitelistEnabled","description":"Emitted when setting contract parameters.","parameterDecorators":[]}],"functionDecorators":[{"signature":"acceptOwnership()","name":"acceptOwnership","description":"Allows an ownership transfer to be completed by the recipient.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addToWhitelist(address)","name":"addToWhitelist","description":"Adds an address to the whitelist.","parameterDecorators":[{"name":"_user","description":"The address to whitelist.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"aggregator()","name":"aggregator","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"decimals()","name":"decimals","description":"represents the number of decimals the aggregator responses represent.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":false},{"signature":"disableWhitelist()","name":"disableWhitelist","description":"makes the whitelist check unenforced.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"enableWhitelist()","name":"enableWhitelist","description":"makes the whitelist check enforced.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getAnswer(uint256)","name":"getAnswer","description":"get past rounds answers. overridden function to add the isWhitelisted() modifier.","parameterDecorators":[{"name":"_roundId","description":"the answer number to retrieve the answer for.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":false},{"signature":"getRoundData(uint256)","name":"getRoundData","description":"get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorInterface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them. Note that answer and updatedAt may change between queries.","parameterDecorators":[{"name":"_roundId","description":"the round ID to retrieve the round data for.","recommendedTypes":[]}],"returnDecorators":[{"name":"roundId","description":"is the round ID for which data was retrieved.","recommendedTypes":[],"solidityType":"uint256"},{"name":"answer","description":"is the answer for the given round.","recommendedTypes":[],"solidityType":"int256"},{"name":"startedAt","description":"is the timestamp when the round was started. (Only some AggregatorInterface implementations return meaningful values).","recommendedTypes":[],"solidityType":"uint256"},{"name":"updatedAt","description":"is the timestamp when the round last was updated (i.e. answer was last computed).","recommendedTypes":[],"solidityType":"uint256"},{"name":"answeredInRound","description":"is the round ID of the round in which the answer was computed. (Only some AggregatorInterface implementations return meaningful values).","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"getTimestamp(uint256)","name":"getTimestamp","description":"get block timestamp when an answer was last updated. overridden function to add the isWhitelisted() modifier.","parameterDecorators":[{"name":"_roundId","description":"the answer number to retrieve the updated timestamp for.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"latestAnswer()","name":"latestAnswer","description":"Reads the current answer from aggregator delegated to. overridden function to add the isWhitelisted() modifier.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":false},{"signature":"latestRound()","name":"latestRound","description":"get the latest completed round where the answer was updated. overridden function to add the isWhitelisted() modifier.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"latestRoundData()","name":"latestRoundData","description":"get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that different underlying implementations of AggregatorInterface have slightly different semantics for some of the return values. Consumers should determine what implementations they expect to receive data from and validate that they can properly handle return data from all of them. Note that answer and updatedAt may change between queries.","parameterDecorators":[],"returnDecorators":[{"name":"roundId","description":"is the round ID for which data was retrieved.","recommendedTypes":[],"solidityType":"uint256"},{"name":"answer","description":"is the answer for the given round.","recommendedTypes":[],"solidityType":"int256"},{"name":"startedAt","description":"is the timestamp when the round was started. (Only some AggregatorInterface implementations return meaningful values).","recommendedTypes":[],"solidityType":"uint256"},{"name":"updatedAt","description":"is the timestamp when the round last was updated (i.e. answer was last computed).","recommendedTypes":[],"solidityType":"uint256"},{"name":"answeredInRound","description":"is the round ID of the round in which the answer was computed. (Only some AggregatorInterface implementations return meaningful values).","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"latestTimestamp()","name":"latestTimestamp","description":"Reads the last updated height from aggregator delegated to. overridden function to add the isWhitelisted() modifier.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"removeFromWhitelist(address)","name":"removeFromWhitelist","description":"Removes an address from the whitelist.","parameterDecorators":[{"name":"_user","description":"The address to remove.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setAggregator(address)","name":"setAggregator","description":"Allows the owner to update the aggregator address.","parameterDecorators":[{"name":"_aggregator","description":"The new address for the aggregator contract.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Allows an owner to begin transferring ownership to a new address, pending.","parameterDecorators":[{"name":"_to","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"whitelistEnabled()","name":"whitelistEnabled","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"whitelisted(address)","name":"whitelisted","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true}]}