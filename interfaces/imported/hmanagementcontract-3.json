{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "locking"
  ],
  "name": "HManagementContract",
  "description": "HManagementContract.",
  "eventDecorators": [
    {
      "signature": "Freeze(address)",
      "name": "Freeze",
      "description": "Emitted when `addr` is frozen.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SuperWhitelist(address)",
      "name": "SuperWhitelist",
      "description": "Emitted when `addr` is added to the {superWhiteListed}.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UnFreeze(address)",
      "name": "UnFreeze",
      "description": "Emitted when `addr` is unfrozen.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UnSuperWhitelist(address)",
      "name": "UnSuperWhitelist",
      "description": "Emitted when `addr` is removed from the {superWhiteListed}.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UnWhitelist(address)",
      "name": "UnWhitelist",
      "description": "Emitted when `addr` is unwhitelisted.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Whitelist(address)",
      "name": "Whitelist",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addSuperWhitelisted(address)",
      "name": "addSuperWhitelisted",
      "description": "Adds `addr` to the {superWhitelisted} list. Sender must have Admin Role. Emits {SuperWhitelist} event. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "SuperWhitelist(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "addToken(address)",
      "name": "addToken",
      "description": "Adds `tokenAddress` to the {tokenList} list. If token is already on the lists, it is not added again. Sender must have Admin Role. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "freeze(address)",
      "name": "freeze",
      "description": "Set `addr` to frozen status. Emits {Freeze} event. Requirements: - the caller must have the `WHITELIST_ROLE`.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Freeze(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMember(bytes32,uint256)",
      "name": "getRoleMember",
      "description": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMemberCount(bytes32)",
      "name": "getRoleMemberCount",
      "description": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenList()",
      "name": "getTokenList",
      "description": "View that returns list of all tokens, connected to this contract. Returns list of addresses `address[]`.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Sets the value of `admin` to the Admin, minter, pauser and whitelister roles. Initializes {nonWhitelistedDelay} to 24 hours, {nonWhitelistedDepositLimit} to 100 and sets 0x0 address as whitelisted in order to save storage by not collecting pendingDeposits on the 0x0 address during token burning.",
      "parameterDecorators": [
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isFrozen(address)",
      "name": "isFrozen",
      "description": "View only function which checks is `addr` is frozen. Returns `true` or `false`.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSuperWhitelisted(address)",
      "name": "isSuperWhitelisted",
      "description": "View which checks if `addr` is on the {superWhitelisted} list. Returns `true` or `false`.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isWhitelisted(address)",
      "name": "isWhitelisted",
      "description": "View function which checks if `addr` is whitelisted. Returns `true` or `false`.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nonWhitelistedDelay()",
      "name": "nonWhitelistedDelay",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nonWhitelistedDepositLimit()",
      "name": "nonWhitelistedDepositLimit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Pauses all contracts from transfering funds. Sender must have Pauser Role.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pauseToken(address)",
      "name": "pauseToken",
      "description": "Pauses specific token from transfering funds. Sender must have Pauser Role.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeSuperWhitelisted(address)",
      "name": "removeSuperWhitelisted",
      "description": "Removes `addr` from the {superWhitelisted} list. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeToken(address)",
      "name": "removeToken",
      "description": "REmoves `tokenAddress` from the {tokenList} list. If token is not on the lists, nothing happens. Sender must have Admin Role. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "setNonWhitelistedDelay(uint256)",
      "name": "setNonWhitelistedDelay",
      "description": "Set the {nonWhitelistedDelay}. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.",
      "parameterDecorators": [
        {
          "name": "_nonWhitelistedDelay",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNonWhitelistedDepositLimit(uint256)",
      "name": "setNonWhitelistedDepositLimit",
      "description": "Set the {nonWhitelistedDepositLimit}. Requirements: - the caller must have the `DEFAULT_ADMIN_ROLE`.",
      "parameterDecorators": [
        {
          "name": "_nonWhitelistedDepositLimit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unFreeze(address)",
      "name": "unFreeze",
      "description": "Removes `addr` from the the frozen list. Emits {UnFreeze} event. Requirements: - the caller must have the `WHITELIST_ROLE`. - contract must not be paused.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "UnFreeze(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "unWhitelist(address)",
      "name": "unWhitelist",
      "description": "Removes an account from the {whitelisted} list. The contract cannot be paused. Emits {UnWhitelist} event. Requirements: - the caller must have the `WHITELIST_ROLE`. - contract must not be paused.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "UnWhitelist(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "Unpauses contracts from transfering funds. Sender must have Pauser Role.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpauseToken(address)",
      "name": "unpauseToken",
      "description": "UnPauses specific token from transfering funds. Sender must have Pauser Role.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelist(address)",
      "name": "whitelist",
      "description": "Whitelist `addr`. Only Whitelister Role can call this. It is used when a new account has completed KYC. It allows the `addr` to receive funds without the {nonWhitelistedDelay} Emits {Whitelist} event Requirements: - the caller must have the `WHITELIST_ROLE`.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Whitelist(address)"
      ],
      "readOnly": false
    }
  ]
}