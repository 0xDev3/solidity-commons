{
  "schema": "../schema.json",
  "tags": [],
  "name": "Erc20Delegator",
  "description": "",
  "eventDecorators": [
    {
      "signature": "NewImplementation(address,address)",
      "name": "NewImplementation",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "oldImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_acceptAdmin()",
      "name": "_acceptAdmin",
      "description": "Accepts transfer of admin rights. msg.sender must be pendingAdmin. Admin function for pending admin to accept role and update admin.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setComptroller(address)",
      "name": "_setComptroller",
      "description": "Sets a new comptroller for the market. Admin function to set a new comptroller.",
      "parameterDecorators": [
        {
          "name": "newComptroller",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setImplementation(address,bool,bytes)",
      "name": "_setImplementation",
      "description": "Called by the admin to update the implementation of the delegator.",
      "parameterDecorators": [
        {
          "name": "implementation_",
          "description": "The address of the new implementation for delegation.",
          "recommendedTypes": []
        },
        {
          "name": "allowResign",
          "description": "Flag to indicate whether to call _resignImplementation on the old implementation.",
          "recommendedTypes": []
        },
        {
          "name": "becomeImplementationData",
          "description": "The encoded bytes data to be passed to _becomeImplementation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setPendingAdmin(address)",
      "name": "_setPendingAdmin",
      "description": "Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer. Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.",
      "parameterDecorators": [
        {
          "name": "newPendingAdmin",
          "description": "New pending admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "admin()",
      "name": "admin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowance(address,address)",
      "name": "allowance",
      "description": "Get the current allowance from `owner` for `spender`.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "The address of the account which owns the tokens to be spent.",
          "recommendedTypes": []
        },
        {
          "name": "spender",
          "description": "The address of the account which may transfer tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "approve(address,uint256)",
      "name": "approve",
      "description": "Approve `spender` to transfer up to `amount` from `src`. This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve).",
      "parameterDecorators": [
        {
          "name": "spender",
          "description": "The address of the account which may transfer tokens.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The number of tokens that are approved (-1 means infinite).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "balanceOf(address)",
      "name": "balanceOf",
      "description": "Get the token balance of the `owner`.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "The address of the account to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delegateToImplementation(bytes)",
      "name": "delegateToImplementation",
      "description": "Delegates execution to the implementation contract. It returns to the external caller whatever the implementation returns or forwards reverts.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "The raw data to delegatecall.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "delegateToViewImplementation(bytes)",
      "name": "delegateToViewImplementation",
      "description": "Delegates execution to an implementation contract. It returns to the external caller whatever the implementation returns or forwards reverts There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "The raw data to delegatecall.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "implementation()",
      "name": "implementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "init()",
      "name": "init",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pendingAdmin()",
      "name": "pendingAdmin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "seize(address,address,uint256)",
      "name": "seize",
      "description": "Transfers collateral tokens (this market) to the liquidator. Will fail unless called by another cToken during the process of liquidation. Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.",
      "parameterDecorators": [
        {
          "name": "liquidator",
          "description": "The account receiving seized collateral.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "The account having collateral seized.",
          "recommendedTypes": []
        },
        {
          "name": "seizeTokens",
          "description": "The number of cTokens to seize.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transfer(address,uint256)",
      "name": "transfer",
      "description": "Transfer `amount` tokens from `msg.sender` to `dst`.",
      "parameterDecorators": [
        {
          "name": "dst",
          "description": "The address of the destination account.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The number of tokens to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferFrom(address,address,uint256)",
      "name": "transferFrom",
      "description": "Transfer `amount` tokens from `src` to `dst`.",
      "parameterDecorators": [
        {
          "name": "src",
          "description": "The address of the source account.",
          "recommendedTypes": []
        },
        {
          "name": "dst",
          "description": "The address of the destination account.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The number of tokens to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}