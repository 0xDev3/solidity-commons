{
  "schema": "../schema.json",
  "tags": [
    "bridges"
  ],
  "name": "Admin_ChildMessenger",
  "description": "No parent messenger is needed for this case, as the admin could be trusted to manually send DVM requests on mainnet. This is intended to be used as a \"beta\" deployment compatible with any EVM-compatible chains before implementing a full bridge adapter. Put simply, it is meant as a stop-gap. A version of the child messenger that allows an admin to relay messages on its behalf.",
  "eventDecorators": [
    {
      "signature": "MessageReceivedFromParent(bytes,address,address)",
      "name": "MessageReceivedFromParent",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "targetSpoke",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MessageSentToParent(bytes,address)",
      "name": "MessageSentToParent",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oracleSpoke",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetOracleSpoke(address)",
      "name": "SetOracleSpoke",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "oracleSpoke()",
      "name": "oracleSpoke",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "processMessageFromCrossChainParent(bytes,address)",
      "name": "processMessageFromCrossChainParent",
      "description": "Process a received message from the admin. The caller must be the the admin.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "data message sent from the admin. Should be an encoded function call or packed data.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "desired recipient of `data`. Target must implement the `processMessageFromParent` function. Having this as a param enables the Admin to send messages to arbitrary addresses from the messenger contract. This is primarily used to send messages to the OracleSpoke and GovernorSpoke.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sendMessageToParent(bytes)",
      "name": "sendMessageToParent",
      "description": "Logs a message to be manually relayed to L1. The caller must be the OracleSpoke on L2. No other contract is permissioned to call this function.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "data message sent to the L1 messenger. Should be an encoded function call or packed data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOracleSpoke(address)",
      "name": "setOracleSpoke",
      "description": "Changes the stored address of the Oracle spoke, deployed on L2. The caller of this function must be the admin.",
      "parameterDecorators": [
        {
          "name": "newOracleSpoke",
          "description": "address of the new oracle spoke, deployed on L2.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}