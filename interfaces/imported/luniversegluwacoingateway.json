{"schema":"../schema.json","tags":[],"name":"LuniverseGluwacoinGateway","description":"","eventDecorators":[{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"GLUWA_ADMIN_ROLE()","name":"GLUWA_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"GLUWA_ROLE()","name":"GLUWA_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"LUNIVERSE_ADMIN_ROLE()","name":"LUNIVERSE_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"LUNIVERSE_ROLE()","name":"LUNIVERSE_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getUnpeg(bytes32)","name":"getUnpeg","description":"Returns Unpeg for the {txnHash}.","parameterDecorators":[{"name":"txnHash","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"sender","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"gluwaApproved","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"luniverseApproved","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"processed","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"gluwaApprove(bytes32,address,bytes)","name":"gluwaApprove","description":"Gluwa approves Unpeg with the {txnHash}, ETHlessly. The {sig} must be a correct signature of the {approver}. There must be an Unpeg object with the {txnHash}. The {approver} must have a Gluwa role. The Unpeg object must not be Gluwa approved already.*.","parameterDecorators":[{"name":"txnHash","description":"","recommendedTypes":[]},{"name":"approver","description":"","recommendedTypes":[]},{"name":"sig","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"gluwaApprove(bytes32)","name":"gluwaApprove","description":"Gluwa approves Unpeg with the {txnHash}. There must be an Unpeg object with the {txnHash}. The caller must have a Gluwa role. The Unpeg object must not be Gluwa approved already.*.","parameterDecorators":[{"name":"txnHash","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,address,address)","name":"initialize","description":"","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"gluwa","description":"","recommendedTypes":[]},{"name":"luniverse","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isUnpegged(bytes32)","name":"isUnpegged","description":"Returns if there is Unpeg for the {txnHash}.","parameterDecorators":[{"name":"txnHash","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"unpegged","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"luniverseApprove(bytes32)","name":"luniverseApprove","description":"Luniverse approves Unpeg with the {txnHash}. There must be an Unpeg object with the {txnHash}. The caller must have a Luniverse role. The Unpeg object must not be Luniverse approved already.*.","parameterDecorators":[{"name":"txnHash","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"luniverseApprove(bytes32,address,bytes)","name":"luniverseApprove","description":"Luniverse approves Unpeg with the {txnHash}, ETHlessly. The {sig} must be a correct signature of the {approver}. There must be an Unpeg object with the {txnHash}. The {approver} must have a Luniverse role. The Unpeg object must not be Luniverse approved already.*.","parameterDecorators":[{"name":"txnHash","description":"","recommendedTypes":[]},{"name":"approver","description":"","recommendedTypes":[]},{"name":"sig","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"processUnpeg(bytes32,address,uint256,bytes)","name":"processUnpeg","description":"Process Unpeg request ETHlessly and release the unpegged Gluwacoin to the requestor. Requirements: - the Unpeg must be Gluwa Approved and Luniverse Approved. - the Unpeg must be not processed yet. - the caller must have the Gluwa role.","parameterDecorators":[{"name":"txnHash","description":"","recommendedTypes":[]},{"name":"sender","description":"","recommendedTypes":[]},{"name":"fee","description":"","recommendedTypes":[]},{"name":"sig","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"processUnpeg(bytes32)","name":"processUnpeg","description":"Process Unpeg request and release the unpegged Gluwacoin to the requestor. Requirements: - the Unpeg must be Gluwa Approved and Luniverse Approved. - the Unpeg must be not processed yet.","parameterDecorators":[{"name":"txnHash","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"token()","name":"token","description":"Returns the address of the base token.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"unpeg(bytes32,uint256,address)","name":"unpeg","description":"Creates Unpeg for the {txnHash}. The creator must submit correct address of the {sender} and the {amount}, else gatekeepers will not approve the unpeg request.","parameterDecorators":[{"name":"txnHash","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]},{"name":"sender","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}