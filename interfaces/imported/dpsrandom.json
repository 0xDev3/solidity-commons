{
  "schema": "../schema.json",
  "tags": [],
  "name": "DPSRandom",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "checkCausalityParams(tuple(uint256[],bytes32[],bytes32[],uint256[],bytes[]),tuple(uint8,uint8,uint16,uint8[],uint256,uint256),tuple(uint8,uint8,uint8,uint8[9],uint8[],uint16,uint16,uint16,uint256,uint256,uint256,uint256,uint256,uint256))",
      "name": "checkCausalityParams",
      "description": "Checks if causality params are correct in terms of blocks generated based on block of buying and locked.",
      "parameterDecorators": [
        {
          "name": "_causalityParams",
          "description": "params that needs to be checked.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "blockNumber",
              "description": "",
              "type": "uint256[]"
            },
            {
              "name": "hash1",
              "description": "",
              "type": "bytes32[]"
            },
            {
              "name": "hash2",
              "description": "",
              "type": "bytes32[]"
            },
            {
              "name": "timestamp",
              "description": "",
              "type": "uint256[]"
            },
            {
              "name": "signature",
              "description": "",
              "type": "bytes[]"
            }
          ]
        },
        {
          "name": "_voyageConfig",
          "description": "config of the voyage.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "typeOfVoyage",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "noOfInteractions",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "noOfBlockJumps",
              "description": "",
              "type": "uint16"
            },
            {
              "name": "sequence",
              "description": "",
              "type": "uint8[]"
            },
            {
              "name": "boughtAt",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "gapBetweenInteractions",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "_lockedVoyage",
          "description": "locked voyage params.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "totalSupportShips",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "voyageType",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "artifactId",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "supportShips",
              "description": "",
              "type": "uint8[9]"
            },
            {
              "name": "sequence",
              "description": "",
              "type": "uint8[]"
            },
            {
              "name": "navigation",
              "description": "",
              "type": "uint16"
            },
            {
              "name": "luck",
              "description": "",
              "type": "uint16"
            },
            {
              "name": "strength",
              "description": "",
              "type": "uint16"
            },
            {
              "name": "voyageId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "dpsId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "flagshipId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "lockedBlock",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "lockedTimestamp",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "claimedTime",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRandom(address,uint256,bytes32,bytes32,uint256,bytes,string,uint256,uint256)",
      "name": "getRandom",
      "description": "generating random numbers based on parameters retrieved from the future blocks. This method does verify the params to be signed by the verifier wallet.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "address of the user who wants to generate the random numbers.",
          "recommendedTypes": []
        },
        {
          "name": "_blockNumber",
          "description": "block number used for randomness.",
          "recommendedTypes": []
        },
        {
          "name": "_hash1",
          "description": "hash of the first transaction.",
          "recommendedTypes": []
        },
        {
          "name": "_hash2",
          "description": "hash of the last transaction.",
          "recommendedTypes": []
        },
        {
          "name": "_blockTimestamp",
          "description": "timestamp of the block that we use for random generation.",
          "recommendedTypes": []
        },
        {
          "name": "_signature",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_entropy",
          "description": "entropy used to add more randomness.",
          "recommendedTypes": []
        },
        {
          "name": "_min",
          "description": "min number that can be generated.",
          "recommendedTypes": []
        },
        {
          "name": "_max",
          "description": "max number that can be generated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "returns a random number beetween _min/_max.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRandomBatch(address,uint256[],bytes32[],bytes32[],uint256[],bytes[],string[],uint256,uint256)",
      "name": "getRandomBatch",
      "description": "batching verified.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_blockNumber",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_hash1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_hash2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_blockTimestamp",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_signature",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_entropy",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_min",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_max",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRandomUnverified(address,uint256,bytes32,bytes32,uint256,string,uint256,uint256)",
      "name": "getRandomUnverified",
      "description": "generating random numbers based on parameters retrieved from the future blocks. This method does not verifies the params to be signed by the verifier wallet.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "address of the user who wants to generate the random numbers.",
          "recommendedTypes": []
        },
        {
          "name": "_blockNumber",
          "description": "block number used for randomness.",
          "recommendedTypes": []
        },
        {
          "name": "_hash1",
          "description": "hash of the first transaction.",
          "recommendedTypes": []
        },
        {
          "name": "_hash2",
          "description": "hash of the last transaction.",
          "recommendedTypes": []
        },
        {
          "name": "_blockTimestamp",
          "description": "timestamp of the block that we use for random generation.",
          "recommendedTypes": []
        },
        {
          "name": "_entropy",
          "description": "entropy used to add more randomness.",
          "recommendedTypes": []
        },
        {
          "name": "_min",
          "description": "min number that can be generated.",
          "recommendedTypes": []
        },
        {
          "name": "_max",
          "description": "max number that can be generated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "returns a random number beetween _min/_max.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRandomUnverifiedBatch(address,uint256[],bytes32[],bytes32[],uint256[],string[],uint256,uint256)",
      "name": "getRandomUnverifiedBatch",
      "description": "batching unverified.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_blockNumber",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_hash1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_hash2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_blockTimestamp",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_entropy",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_min",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_max",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSignerAddress(address)",
      "name": "setSignerAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}