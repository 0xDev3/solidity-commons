{"schema":"../schema.json","tags":[],"name":"LotteryContract","description":"","eventDecorators":[{"signature":"LotteryReset()","name":"LotteryReset","description":"Event for RigelTokens purchase logging.","parameterDecorators":[]},{"signature":"LotterySettled()","name":"LotterySettled","description":"Event for RigelTokens purchase logging.","parameterDecorators":[]},{"signature":"LotteryStarted(address,uint256,uint256,uint256,uint256)","name":"LotteryStarted","description":"Event for RigelTokens purchase logging.","parameterDecorators":[{"name":"lotteryTokenAddress","description":"","recommendedTypes":[],"indexed":true},{"name":"playersLimit","description":"","recommendedTypes":[],"indexed":false},{"name":"numOfWinners","description":"","recommendedTypes":[],"indexed":false},{"name":"registrationAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"startedAt","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"MaxParticipationCompleted(address)","name":"MaxParticipationCompleted","description":"Event for RigelTokens purchase logging.","parameterDecorators":[{"name":"_from","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RandomNumberGenerated(uint256)","name":"RandomNumberGenerated","description":"Event for RigelTokens purchase logging.","parameterDecorators":[{"name":"randomness","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"WinnersGenerated(uint256[])","name":"WinnersGenerated","description":"Event for RigelTokens purchase logging.","parameterDecorators":[{"name":"winnerIndexes","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"enterLottery()","name":"enterLottery","description":"Player enters the lottery and the registration amount is transferred from the player to the contract. * Emits an {MaxParticipationCompleted} event indicating that all the required players have entered the lottery. * Requirements: * - The player has set the necessary allowance to the Contract. - The Lottery is in progress. - Number of players allowed to enter in the lottery should be less than or equal to the allowed players `lotteryConfig.playersLimit`.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":["MaxParticipationCompleted(address)"],"readOnly":false},{"signature":"lotteryStatus()","name":"lotteryStatus","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"nonces(bytes32)","name":"nonces","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rawFulfillRandomness(bytes32,uint256)","name":"rawFulfillRandomness","description":"","parameterDecorators":[{"name":"requestId","description":"","recommendedTypes":[]},{"name":"randomness","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"resetLottery()","name":"resetLottery","description":"Resets the lottery, clears the existing state variable values and the lottery can be initialized again. * Emits {LotteryReset} event indicating that the lottery config and contract state is reset. * Requirements: * - Only the address set at `adminAddress` can call this function. - The Lottery has closed.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":["LotteryReset()"],"readOnly":false},{"signature":"setLotteryRules(uint256,uint256,uint256,uint256,address,uint256)","name":"setLotteryRules","description":"Sets the Lottery Config, initializes an instance of ERC20 contract that the lottery is based on and starts the lottery. * Emits an {LotteryStarted} event indicating the Admin has started the Lottery. * Requirements: * - Cannot be called if the lottery is in progress. - Only the address set at `adminAddress` can call this function. - Number of winners `numOfWinners` should be less than or equal to half the number of players `playersLimit`.","parameterDecorators":[{"name":"numOfWinners","description":"","recommendedTypes":[]},{"name":"playersLimit","description":"","recommendedTypes":[]},{"name":"registrationAmount","description":"","recommendedTypes":[]},{"name":"adminFeePercentage","description":"","recommendedTypes":[]},{"name":"lotteryTokenAddress","description":"","recommendedTypes":[]},{"name":"randomSeed","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["LotteryStarted(address,uint256,uint256,uint256,uint256)"],"readOnly":false},{"signature":"settleLottery()","name":"settleLottery","description":"Settles the lottery, the winners are calculated based on the random number generated and the winnings are transferred from the contract to the winning players. The Admin fee is calculated and transferred back to Admin `adminAddress`. * Emits an {WinnersGenerated} event indicating that the winners for the lottery have been generated. Emits {LotterySettled} event indicating that the winnings have been transferred to the Admin and the winners. * Requirements: * - The random number has been generated - The Lottery is in progress.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":["WinnersGenerated(uint256[])","LotterySettled()"],"readOnly":false}]}