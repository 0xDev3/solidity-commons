{
  "schema": "../schema.json",
  "tags": [],
  "name": "StakingImpl",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Stake(address,uint256,uint256)",
      "name": "Stake",
      "description": "CTSI tokens were deposited, they count as stake after _maturationDate. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "maturationDate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unstake(address,uint256,uint256)",
      "name": "Unstake",
      "description": "Unstake tokens, moving them to releasing structure. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "maturationDate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256)",
      "name": "Withdraw",
      "description": "Withdraw process was finalized. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "getMaturingBalance(address)",
      "name": "getMaturingBalance",
      "description": "Returns the balance waiting/ready to be matured.",
      "parameterDecorators": [
        {
          "name": "_userAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount that will get staked after finalization.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMaturingTimestamp(address)",
      "name": "getMaturingTimestamp",
      "description": "Returns the timestamp when next deposit can be finalized.",
      "parameterDecorators": [
        {
          "name": "_userAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "timestamp of when finalizeStakes() is callable.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReleasingBalance(address)",
      "name": "getReleasingBalance",
      "description": "Returns the balance waiting/ready to be released.",
      "parameterDecorators": [
        {
          "name": "_userAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount that will get withdrew after finalization.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReleasingTimestamp(address)",
      "name": "getReleasingTimestamp",
      "description": "Returns the timestamp when next withdraw can be finalized.",
      "parameterDecorators": [
        {
          "name": "_userAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "timestamp of when finalizeWithdraw() is callable.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakedBalance(address)",
      "name": "getStakedBalance",
      "description": "Returns total amount of tokens counted as stake.",
      "parameterDecorators": [
        {
          "name": "_userAddress",
          "description": "user to retrieve staked balance from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "finalized staked of _userAddress.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stake(uint256)",
      "name": "stake",
      "description": "Deposit CTSI to be staked. The money will turn into staked balance after timeToStake days.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "The amount of tokens that are gonna be deposited.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unstake(uint256)",
      "name": "unstake",
      "description": "Remove tokens from staked balance. The money can be released after timeToRelease seconds, if the function withdraw is called.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "The amount of tokens that are gonna be unstaked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Transfer tokens to user's wallet.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "The amount of tokens that are gonna be transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}