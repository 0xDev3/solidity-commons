{"schema":"../schema.json","tags":["tokens"],"name":"DevToken","description":"DevToken is a development token that we use to learn how to code solidity and what X interface requires.","eventDecorators":[{"signature":"Approval(address,address,uint256)","name":"Approval","description":"Approval is emitted when a new Spender is approved to spend Tokens on the Owners account. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[{"name":"owner","description":"","recommendedTypes":[],"indexed":true},{"name":"spender","description":"","recommendedTypes":[],"indexed":true},{"name":"value","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"BonusTreeTokens(address,uint256)","name":"BonusTreeTokens","description":"Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[{"name":"inviter","description":"","recommendedTypes":[],"indexed":false},{"name":"commissionInviter","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"BuyTokens(address,uint256,uint256)","name":"BuyTokens","description":"Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[{"name":"buyer","description":"","recommendedTypes":[],"indexed":false},{"name":"amountOfETH","description":"","recommendedTypes":[],"indexed":false},{"name":"amountOfTokens","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Pause()","name":"Pause","description":"Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[]},{"signature":"PausePresale()","name":"PausePresale","description":"Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[]},{"signature":"SellPause()","name":"SellPause","description":"Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[]},{"signature":"SellTokens(address,uint256,uint256)","name":"SellTokens","description":"Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[{"name":"seller","description":"","recommendedTypes":[],"indexed":false},{"name":"amountOfTokens","description":"","recommendedTypes":[],"indexed":false},{"name":"amountOfETH","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SellUnpause()","name":"SellUnpause","description":"Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[]},{"signature":"Staked(address,uint256,uint256,uint256,uint256,uint256)","name":"Staked","description":"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"index","description":"","recommendedTypes":[],"indexed":false},{"name":"sinceBlock","description":"","recommendedTypes":[],"indexed":false},{"name":"untilBlock","description":"","recommendedTypes":[],"indexed":false},{"name":"rewardRate","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Transfer(address,address,uint256)","name":"Transfer","description":"Events are created below. Transfer event is a event that notify the blockchain that a transfer of assets has taken place. Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"value","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unpause()","name":"Unpause","description":"Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[]},{"signature":"UnpausePresale()","name":"UnpausePresale","description":"Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[]},{"signature":"migrationTokens(address,uint256)","name":"migrationTokens","description":"Emitted when `curator` deposited `tokens` on `subgraphDeploymentID` as curation signal. The `curator` receives `signal` amount according to the curation pool bonding curve. An amount of `curationTax` will be collected and burned.","parameterDecorators":[{"name":"destinations","description":"","recommendedTypes":[],"indexed":false},{"name":"values","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"Sellpause()","name":"Sellpause","description":"called by the owner to pause, triggers stopped state.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"Sellpaused()","name":"Sellpaused","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"Sellunpause()","name":"Sellunpause","description":"called by the owner to unpause, returns to normal state.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"allowance(address,address)","name":"allowance","description":"allowance is used view how much allowance an spender has.","parameterDecorators":[{"name":"owner","description":"","recommendedTypes":[]},{"name":"spender","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"approve(address,uint256)","name":"approve","description":"approve will use the senders address and allow the spender to use X amount of tokens on his behalf.","parameterDecorators":[{"name":"spender","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"balanceOf(address)","name":"balanceOf","description":"balanceOf will return the account balance for the given account.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"batchTransfer(address[],uint256[])","name":"batchTransfer","description":"","parameterDecorators":[{"name":"destinations","description":"","recommendedTypes":[]},{"name":"values","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"burn(address,uint256)","name":"burn","description":"burn is used to destroy tokens on an address See {_burn} Requires - msg.sender must be the token owner.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"buyTokens(address)","name":"buyTokens","description":"Allow users to buy tokens for ETH.","parameterDecorators":[{"name":"inviter","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"tokenAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"changeMinimumPurchaseAmount(uint256)","name":"changeMinimumPurchaseAmount","description":"cambiar el precio de los tokens.","parameterDecorators":[{"name":"_minimum_purchase_amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"changeMinimumStakesAmount(uint256)","name":"changeMinimumStakesAmount","description":"change minimum purchase amount.","parameterDecorators":[{"name":"_minimum_purchase_amount_staked","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"decreaseAllowance(address,uint256)","name":"decreaseAllowance","description":"decreaseAllowance Decrease the allowance on the account inputted from the caller address.","parameterDecorators":[{"name":"spender","description":"","recommendedTypes":[]},{"name":"subtractedValue","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"getEthUsd()","name":"getEthUsd","description":"Returns the latest price.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"getInfoToken()","name":"getInfoToken","description":"we get the token information.","parameterDecorators":[],"returnDecorators":[{"name":"_propertyObj","description":"","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"getOwner()","name":"getOwner","description":"getOwner just calls Ownables owner function. returns owner of the token.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getTime()","name":"getTime","description":"","parameterDecorators":[],"returnDecorators":[{"name":"time","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"hasStake(address)","name":"hasStake","description":"hasStake is used to check if a account has stakes and the total amount along with all the seperate stakes.","parameterDecorators":[{"name":"_staker","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"increaseAllowance(address,uint256)","name":"increaseAllowance","description":"increaseAllowance Adds allowance to a account from the function caller address.","parameterDecorators":[{"name":"spender","description":"","recommendedTypes":[]},{"name":"addedValue","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"mint(address,uint256)","name":"mint","description":"mint is used to create tokens and assign them to msg.sender See {_mint} Requires - msg.sender must be the token owner.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pause()","name":"pause","description":"called by the owner to pause, triggers stopped state.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"pausePresale()","name":"pausePresale","description":"called by the owner to pause, triggers stopped state.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"paused()","name":"paused","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"pausedPresale()","name":"pausedPresale","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"sellTokens(uint256)","name":"sellTokens","description":"Allow users to sell tokens for ETH.","parameterDecorators":[{"name":"tokenAmountToSell","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"stake(uint256,uint256,uint256)","name":"stake","description":"Add functionality like burn to the _stake afunction.","parameterDecorators":[{"name":"_amount","description":"","recommendedTypes":[]},{"name":"_untilBlock","description":"","recommendedTypes":[]},{"name":"_rewardRate","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"tokensPerEth()","name":"tokensPerEth","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"totalStakes()","name":"totalStakes","description":"A method to the aggregated stakes from all stakeholders.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"uint256 The aggregated stakes from all stakeholders.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transfer(address,uint256)","name":"transfer","description":"transfer is used to transfer funds from the sender to the recipient This function is only callable from outside the contract. For internal usage see _transfer Requires - Caller cannot be zero - Caller must have a balance = or bigger than amount.","parameterDecorators":[{"name":"recipient","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"transferFrom(address,address,uint256)","name":"transferFrom","description":"transferFrom is uesd to transfer Tokens from a Accounts allowance Spender address should be the token holder Requires - The caller must have a allowance = or bigger than the amount spending.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[]},{"name":"recipient","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unpause()","name":"unpause","description":"called by the owner to unpause, returns to normal state.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"unpausePresale()","name":"unpausePresale","description":"called by the owner to unpause, returns to normal state.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"withdraw()","name":"withdraw","description":"Allow the owner of the contract to withdraw ETH.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawStake(uint256,uint256)","name":"withdrawStake","description":"withdrawStake is used to withdraw stakes from the account holder.","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[]},{"name":"stake_index","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}