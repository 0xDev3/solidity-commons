{
  "schema": "../schema.json",
  "tags": [
    "strategies",
    "convex"
  ],
  "name": "ConvexStrategy",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Deposit(address,address,uint256)",
      "name": "Deposit",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_pToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GovernorshipTransferred(address,address)",
      "name": "GovernorshipTransferred",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "previousGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "HarvesterAddressesUpdated(address,address)",
      "name": "HarvesterAddressesUpdated",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "_oldHarvesterAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_newHarvesterAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PTokenAdded(address,address)",
      "name": "PTokenAdded",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_pToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PTokenRemoved(address,address)",
      "name": "PTokenRemoved",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_pToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PendingGovernorshipTransfer(address,address)",
      "name": "PendingGovernorshipTransfer",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "previousGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RewardTokenAddressesUpdated(address[],address[])",
      "name": "RewardTokenAddressesUpdated",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "_oldAddresses",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_newAddresses",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RewardTokenCollected(address,address,uint256)",
      "name": "RewardTokenCollected",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rewardToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdrawal(address,address,uint256)",
      "name": "Withdrawal",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_pToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_deprecated_cvxRewardTokenAddress()",
      "name": "_deprecated_cvxRewardTokenAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_deprecated_rewardLiquidationThreshold()",
      "name": "_deprecated_rewardLiquidationThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_deprecated_rewardTokenAddress()",
      "name": "_deprecated_rewardTokenAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetToPToken(address)",
      "name": "assetToPToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkBalance(address)",
      "name": "checkBalance",
      "description": "Get the total asset value held in the platform.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "Address of the asset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "balance",
          "description": "Total value of the asset in the platform.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimGovernance()",
      "name": "claimGovernance",
      "description": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collectRewardTokens()",
      "name": "collectRewardTokens",
      "description": "Collect accumulated CRV and CVX and send to Vault.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(address,uint256)",
      "name": "deposit",
      "description": "Deposit asset into the Curve 3Pool.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "Address of asset to deposit.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount of asset to deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositAll()",
      "name": "depositAll",
      "description": "Deposit the entire balance of any supported asset into the Curve 3pool.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRewardTokenAddresses()",
      "name": "getRewardTokenAddresses",
      "description": "Get the reward token addresses.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address[] the reward token addresses.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "governor()",
      "name": "governor",
      "description": "Returns the address of the current Governor.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "harvesterAddress()",
      "name": "harvesterAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address[],address[],address[])",
      "name": "initialize",
      "description": "Internal initialize function, to set up initial internal state.",
      "parameterDecorators": [
        {
          "name": "_platformAddress",
          "description": "Generic platform address.",
          "recommendedTypes": []
        },
        {
          "name": "_vaultAddress",
          "description": "Address of the Vault.",
          "recommendedTypes": []
        },
        {
          "name": "_rewardTokenAddresses",
          "description": "Address of reward token for platform.",
          "recommendedTypes": []
        },
        {
          "name": "_assets",
          "description": "Addresses of initial supported assets.",
          "recommendedTypes": []
        },
        {
          "name": "_pTokens",
          "description": "Platform Token corresponding addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address,address,address[],address[],address[],address,address,uint256)",
      "name": "initialize",
      "description": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Curve strategies don't fit well within that abstraction.",
      "parameterDecorators": [
        {
          "name": "_platformAddress",
          "description": "Address of the Curve 3pool.",
          "recommendedTypes": []
        },
        {
          "name": "_vaultAddress",
          "description": "Address of the vault.",
          "recommendedTypes": []
        },
        {
          "name": "_rewardTokenAddresses",
          "description": "Address of CRV & CVX.",
          "recommendedTypes": []
        },
        {
          "name": "_assets",
          "description": "Addresses of supported assets. MUST be passed in the same order as returned by coins on the pool contract, i.e. DAI, USDC, USDT.",
          "recommendedTypes": []
        },
        {
          "name": "_pTokens",
          "description": "Platform Token corresponding addresses.",
          "recommendedTypes": []
        },
        {
          "name": "_cvxDepositorAddress",
          "description": "Address of the Convex depositor(AKA booster) for this pool.",
          "recommendedTypes": []
        },
        {
          "name": "_cvxRewardStakerAddress",
          "description": "Address of the CVX rewards staker.",
          "recommendedTypes": []
        },
        {
          "name": "_cvxDepositorPTokenId",
          "description": "Pid of the pool referred to by Depositor and staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isGovernor()",
      "name": "isGovernor",
      "description": "Returns true if the caller is the current Governor.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "platformAddress()",
      "name": "platformAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removePToken(uint256)",
      "name": "removePToken",
      "description": "Remove a supported asset by passing its index. This method can only be called by the system Governor.",
      "parameterDecorators": [
        {
          "name": "_assetIndex",
          "description": "Index of the asset to be removed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewardTokenAddresses(uint256)",
      "name": "rewardTokenAddresses",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "safeApproveAllTokens()",
      "name": "safeApproveAllTokens",
      "description": "Approve the spending of all assets by their corresponding pool tokens, if for some reason is it necessary.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setHarvesterAddress(address)",
      "name": "setHarvesterAddress",
      "description": "Set the reward token addresses.",
      "parameterDecorators": [
        {
          "name": "_harvesterAddress",
          "description": "Address of the harvester.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPTokenAddress(address,address)",
      "name": "setPTokenAddress",
      "description": "Provide support for asset by passing its pToken address. This method can only be called by the system Governor.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "Address for the asset.",
          "recommendedTypes": []
        },
        {
          "name": "_pToken",
          "description": "Address for the corresponding platform token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRewardTokenAddresses(address[])",
      "name": "setRewardTokenAddresses",
      "description": "Set the reward token addresses.",
      "parameterDecorators": [
        {
          "name": "_rewardTokenAddresses",
          "description": "Address array of the reward token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsAsset(address)",
      "name": "supportsAsset",
      "description": "Retuns bool indicating whether asset is supported by strategy.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "Address of the asset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferGovernance(address)",
      "name": "transferGovernance",
      "description": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete.",
      "parameterDecorators": [
        {
          "name": "_newGovernor",
          "description": "Address of the new Governor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferToken(address,uint256)",
      "name": "transferToken",
      "description": "Transfer token to governor. Intended for recovering tokens stuck in strategy contracts, i.e. mistaken sends.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "Address for the asset.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount of the asset to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vaultAddress()",
      "name": "vaultAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(address,address,uint256)",
      "name": "withdraw",
      "description": "Withdraw asset from Curve 3Pool.",
      "parameterDecorators": [
        {
          "name": "_recipient",
          "description": "Address to receive withdrawn asset.",
          "recommendedTypes": []
        },
        {
          "name": "_asset",
          "description": "Address of asset to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount of asset to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAll()",
      "name": "withdrawAll",
      "description": "Remove all assets from platform and send them to Vault contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}