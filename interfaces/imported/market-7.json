{
  "schema": "../schema.json",
  "tags": [],
  "name": "Market",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AdminChanged(address,address)",
      "name": "AdminChanged",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "previousAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BeaconUpgraded(address)",
      "name": "BeaconUpgraded",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "beacon",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Deposit(uint8,uint112,address,uint32)",
      "name": "Deposit",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ExecuteEpochSettlementMintUser(uint8,address,uint32)",
      "name": "ExecuteEpochSettlementMintUser",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "poolId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epochSettledUntil",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ExecuteEpochSettlementRedeemUser(uint8,address,uint32)",
      "name": "ExecuteEpochSettlementRedeemUser",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "poolId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epochSettledUntil",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Initialized(uint8)",
      "name": "Initialized",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "version",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MarketDeprecation()",
      "name": "MarketDeprecation",
      "description": "Event for token purchase logging.",
      "parameterDecorators": []
    },
    {
      "signature": "OracleUpdated(address,address)",
      "name": "OracleUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "oldOracleAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newOracleAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Redeem(uint8,uint256,address,uint32)",
      "name": "Redeem",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SystemUpdateInfo(uint32,uint256,tuple[])",
      "name": "SystemUpdateInfo",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "underlyingAssetPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "poolStates",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Upgraded(address)",
      "name": "Upgraded",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ADMIN_ROLE()",
      "name": "ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "UPGRADER_ROLE()",
      "name": "UPGRADER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deprecateMarket()",
      "name": "deprecateMarket",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deprecateMarketNoOracleUpdates()",
      "name": "deprecateMarketNoOracleUpdates",
      "description": "This function will auto-deprecate the market if there are no updates for more than 10 days. 10 days should be enough time for the team to make an informed desision on how to handle this error.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exitDeprecatedMarket()",
      "name": "exitDeprecatedMarket",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exitDeprecatedMarket(address)",
      "name": "exitDeprecatedMarket",
      "description": "Allows users to exit the market after it has been deprecated.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUsersConfirmedButNotSettledPoolTokenBalance(address,uint8,uint8)",
      "name": "getUsersConfirmedButNotSettledPoolTokenBalance",
      "description": "Returns the balance of user actions in epochs which have been executed but not yet distributed to users. Prices have a fixed 18 decimals.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "Address of user.",
          "recommendedTypes": []
        },
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "The index of the pool in the side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "confirmedButNotSettledBalance",
          "description": "Returns balance of user actions in epochs which have been executed but not yet distributed to users.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "get_epochInfo()",
      "name": "get_epochInfo",
      "description": "Returns the epochInfo struct.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "epochInfo Struct containing info about the latest executed epoch and previous epoch.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "get_liquidityManager()",
      "name": "get_liquidityManager",
      "description": "Returns the address of the YieldManager for the market.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "liquidityManager address of the YieldManager.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "get_oracleManager()",
      "name": "get_oracleManager",
      "description": "Returns the interface of OracleManager for the market.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "oracleManager OracleManager interface.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "get_poolToken_priceSnapshot(uint32,uint8,uint256)",
      "name": "get_poolToken_priceSnapshot",
      "description": "Returns the price of the pool token token given poolType and poolTier. Prices have a fixed 18 decimals.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": "Number of epoch that has been executed.",
          "recommendedTypes": []
        },
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "The index of the pool in the side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "poolToken_priceSnapshot Price of the pool token tokens in the pool.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "get_pool_leverage(uint8,uint256)",
      "name": "get_pool_leverage",
      "description": "",
      "parameterDecorators": [
        {
          "name": "poolType",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "get_pool_token(uint8,uint256)",
      "name": "get_pool_token",
      "description": "",
      "parameterDecorators": [
        {
          "name": "poolType",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "get_pool_value(uint8,uint256)",
      "name": "get_pool_value",
      "description": "Returns the pool struct given poolType and poolTier.",
      "parameterDecorators": [
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "The index of the pool in the side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "pools Struct containing information about the pool i.e. value, leverage etc.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "get_userAction_depositPaymentToken(address,uint8,uint256)",
      "name": "get_userAction_depositPaymentToken",
      "description": "Returns the deposit action in payment tokens of provided user for the given poolType and poolTier. Action amounts have a fixed 18 decimals.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "Address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "The index of the pool in the side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "userAction_depositPaymentToken Outstanding deposit action by user for the given poolType and poolTier.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "get_userAction_redeemPoolToken(address,uint8,uint256)",
      "name": "get_userAction_redeemPoolToken",
      "description": "Returns the redeem action in pool token tokens of provided user for the given poolType and poolTier. Action amounts have a fixed 18 decimals.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "Address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "The index of the pool in the side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "userAction_redeemPoolToken Outstanding redeem action by user for the given poolType and poolTier.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)",
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintFloatPool(uint112)",
      "name": "mintFloatPool",
      "description": "Allows users to mint float pool token assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denomination for which to mint pool token assets at next price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintFloatPoolFor(uint112,address)",
      "name": "mintFloatPoolFor",
      "description": "Allows mint float pool token assets for a market on behalf of some user. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denomination for which to mint pool token assets at next price.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "Address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintLong(uint256,uint112)",
      "name": "mintLong",
      "description": "Allows users to mint long pool token assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denomination for which to mint pool token assets at next price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintLongFor(uint256,uint112,address)",
      "name": "mintLongFor",
      "description": "Allows mint long pool token assets for a market on behalf of some user. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denomination for which to mint pool token assets at next price.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "Address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintShort(uint256,uint112)",
      "name": "mintShort",
      "description": "Allows users to mint short pool token assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denomination for which to mint pool token assets at next price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintShortFor(uint256,uint112,address)",
      "name": "mintShortFor",
      "description": "Allows mint short pool token assets for a market on behalf of some user. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denomination for which to mint pool token assets at next price.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "Address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nonCoreFunctionsDelegatee()",
      "name": "nonCoreFunctionsDelegatee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberOfPoolsOfType(uint8)",
      "name": "numberOfPoolsOfType",
      "description": "Returns the number of pools of poolType i.e. Long or Short.",
      "parameterDecorators": [
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "numberOfPoolsOfType Number of pools of poolType.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paymentToken()",
      "name": "paymentToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxiableUUID()",
      "name": "proxiableUUID",
      "description": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemFloatPool(uint112)",
      "name": "redeemFloatPool",
      "description": "Allows users to redeem float pool token assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denominationfor which to redeem pool token assets at next price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemLong(uint256,uint112)",
      "name": "redeemLong",
      "description": "Allows users to mint long pool token assets for a market. To prevent front-running these mints are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denominationfor which to mint pool token assets at next price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemShort(uint256,uint112)",
      "name": "redeemShort",
      "description": "Allows users to redeem short pool token assets for a market. To prevent front-running these redeems are executed on the next price update from the oracle.",
      "parameterDecorators": [
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of payment tokens in that token's lowest denominationfor which to redeem pool token assets at next price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)",
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)",
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "settlePoolUserMints(address,uint8,uint256)",
      "name": "settlePoolUserMints",
      "description": "After markets have been batched updated on a new oracle price, transfers any owed tokens to a user from their mints during that epoch to that user.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "Address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settlePoolUserRedeems(address,uint8,uint256)",
      "name": "settlePoolUserRedeems",
      "description": "After markets have been batched updated on a new oracle price, transfers any owed tokens to a user from their redeems during that epoch to that user.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "Address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "poolType",
          "description": "an enum representing the type of poolTier for eg. LONG or SHORT.",
          "recommendedTypes": []
        },
        {
          "name": "poolTier",
          "description": "leveraged poolTier index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateSystemStateUsingValidatedOracleRoundIds(uint80[])",
      "name": "updateSystemStateUsingValidatedOracleRoundIds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "oracleRoundIdsToExecute",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeTo(address)",
      "name": "upgradeTo",
      "description": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "upgradeToAndCall(address,bytes)",
      "name": "upgradeToAndCall",
      "description": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    }
  ]
}