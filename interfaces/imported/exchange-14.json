{"schema":"../schema.json","tags":["tokens"],"name":"Exchange","description":"Exchange contract. This contract gives to the user the ability to create offers to a specific address or to the 0 address. In the first case only the given address will be able to achieve the transaction, in the second case, the offer is openned to anybody. An offer is basically a transaction from a token A with amount x to a token B with amount y. Any user can create an offer by paying the offer creation fees in SAFE.","eventDecorators":[{"signature":"EndOfOffer(uint256,address,address,uint256,address,uint256,address,uint256,bool)","name":"EndOfOffer","description":"","parameterDecorators":[{"name":"id","description":"","recommendedTypes":[],"indexed":false},{"name":"seller","description":"","recommendedTypes":[],"indexed":true},{"name":"buyer","description":"","recommendedTypes":[],"indexed":true},{"name":"fees","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenA","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenAAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenB","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenBAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"completed","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"NewOffer(uint256,address,address,uint256,address,uint256,address,uint256)","name":"NewOffer","description":"","parameterDecorators":[{"name":"id","description":"","recommendedTypes":[],"indexed":false},{"name":"seller","description":"","recommendedTypes":[],"indexed":true},{"name":"buyer","description":"","recommendedTypes":[],"indexed":true},{"name":"fees","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenA","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenAAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenB","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenBAmount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"SafeEx()","name":"SafeEx","description":"Returns the SafeExToken contract address.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"balanceOf(address)","name":"balanceOf","description":"Returns the deposited amount of SAFE for `account` with the same number of decimals as the SAFE token (e.g. 0).","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"createOffer(address,address,address,uint256,uint256)","name":"createOffer","description":"Creates a new offer. Requirements: - the caller must have a balance of at least `fees` SAFE token locked in this contract - `tokenA` cannot be 0x0 - `tokenB` cannot be 0x0 - the caller must have at least `amountA` of `tokenA` - `amountA` cannot be equal to 0 - `amountB` cannot be equal to 0.","parameterDecorators":[{"name":"buyer","description":"","recommendedTypes":[]},{"name":"tokenA","description":"","recommendedTypes":[]},{"name":"tokenB","description":"","recommendedTypes":[]},{"name":"amountA","description":"","recommendedTypes":[]},{"name":"amountB","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"deposit(uint256)","name":"deposit","description":"Deposits `amount` of SAFE token. Requirements: - the contract must have an allowance of at least `amount` - the caller must have at least `amount` of token.","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"fees()","name":"fees","description":"Returns fees in SAFE to be paid for creating an offer.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getOfferFromId(uint256)","name":"getOfferFromId","description":"Returns the detailed offer from its `offerID`.","parameterDecorators":[{"name":"offerID","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"offersFrom(address)","name":"offersFrom","description":"Returns an array containing all offer ids concerning the seller address `from`.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"offersTo(address)","name":"offersTo","description":"Returns an array containing all offer ids concerning the buyer address `to` To see open offers, it is possible to call this method with the zero address.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"removeOffer(uint256)","name":"removeOffer","description":"Removes an offer before its validation. Fees will be re-funded to the caller. Requirements: - the caller must be the seller of the offer identified by `offerID`.","parameterDecorators":[{"name":"offerID","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setFees(uint256)","name":"setFees","description":"Set the fees. Note here fees can be 0. See {fees} for more information Requirements: - the caller must be the contract owner - fees must be strictly positive.","parameterDecorators":[{"name":"fees_","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSafeEx(address)","name":"setSafeEx","description":"Sets the SafeExToken contract address Requirements: - the caller must be the contract owner - `safe_` cannot be the 0x0 address.","parameterDecorators":[{"name":"safe_","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"validateOffer(uint256)","name":"validateOffer","description":"Validates an offer by transferring `amountB` of `tokenB` and getting `amountA` of `tokenA`. `amountB` will be sent to the seller; From this point the offer is automatically removed from active offers. Requirements: - the caller must be the buyer of the offer identified by `offerID`, or buyer address must be defined as the 0x0 address - the caller must have at least `amountB` of `tokenB`.","parameterDecorators":[{"name":"offerID","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw(uint256)","name":"withdraw","description":"Withdraws `amount` of SAFE token. Requirements: - the caller must have deposited at least `amount` of token.","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}