{
  "schema": "../schema.json",
  "tags": [],
  "name": "MainContract",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Validator's status changed. Event emitted for each executed trade.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "Validator's status changed. Event emitted for each executed trade.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "Validator's status changed. Event emitted for each executed trade.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "Validator's status changed. Event emitted for each executed trade.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Validator's status changed. Event emitted for each executed trade.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MANAGER_ROLE()",
      "name": "MANAGER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "OWNER_ROLE()",
      "name": "OWNER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "RELAYER_ROLE()",
      "name": "RELAYER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "RubicAddresses(uint256)",
      "name": "RubicAddresses",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SIGNATURE_LENGTH()",
      "name": "SIGNATURE_LENGTH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "VALIDATOR_ROLE()",
      "name": "VALIDATOR_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "accTokenFee()",
      "name": "accTokenFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addInstance(bytes4,address,address)",
      "name": "addInstance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sig",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_router",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addOtherBlockchain(uint128)",
      "name": "addOtherBlockchain",
      "description": "Registers another blockchain for availability to swap.",
      "parameterDecorators": [
        {
          "name": "numOfOtherBlockchain",
          "description": "number of blockchain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveTokenToRouter(address,address)",
      "name": "approveTokenToRouter",
      "description": "Approves tokens to a swap Router. We can approve the most popular tokens before any swaps To spare users from paying for it.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "The token address to approve.",
          "recommendedTypes": []
        },
        {
          "name": "_router",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "blockchainCryptoFee(uint256)",
      "name": "blockchainCryptoFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "blockchainRouter()",
      "name": "blockchainRouter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeOtherBlockchain(uint128,uint128)",
      "name": "changeOtherBlockchain",
      "description": "Change existing blockchain id.",
      "parameterDecorators": [
        {
          "name": "oldNumOfOtherBlockchain",
          "description": "number of existing blockchain.",
          "recommendedTypes": []
        },
        {
          "name": "newNumOfOtherBlockchain",
          "description": "number of new blockchain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeTxStatus(bytes32,uint256)",
      "name": "changeTxStatus",
      "description": "Function changes values associated with certain originalTxHash.",
      "parameterDecorators": [
        {
          "name": "originalTxHash",
          "description": "Transaction hash to change.",
          "recommendedTypes": []
        },
        {
          "name": "statusCode",
          "description": "Associated status: 0-Not processed, 1-Processed, 2-Reverted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collectCryptoFee(address)",
      "name": "collectCryptoFee",
      "description": "Sends collected crypto fee to the owner.",
      "parameterDecorators": [
        {
          "name": "toAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collectTokenFee()",
      "name": "collectTokenFee",
      "description": "Sends collected token fee to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "continueExecution()",
      "name": "continueExecution",
      "description": "Resumes transfers of tokens on contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ecOffsetRecover(bytes32,bytes,uint256)",
      "name": "ecOffsetRecover",
      "description": "",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "signature",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "offset",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "existingOtherBlockchain(uint256)",
      "name": "existingOtherBlockchain",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feeAmountOfBlockchain(uint256)",
      "name": "feeAmountOfBlockchain",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getHashPacked(address,uint256,bytes32,uint256)",
      "name": "getHashPacked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountWithFee",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "originalTxHash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "blockchainNum",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getInfoAboutSig(bytes4,bytes32)",
      "name": "getInfoAboutSig",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sig",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "slot",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "implementationAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "router",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOtherBlockchainAvailableByNum(uint256)",
      "name": "getOtherBlockchainAvailableByNum",
      "description": "",
      "parameterDecorators": [
        {
          "name": "blockchain",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isManager(address)",
      "name": "isManager",
      "description": "Function to check if address is belongs to manager role.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Address to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner(address)",
      "name": "isOwner",
      "description": "Function to check if address is belongs to owner role.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Address to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRelayer(address)",
      "name": "isRelayer",
      "description": "Function to check if address is belongs to relayer role.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Address to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isValidator(address)",
      "name": "isValidator",
      "description": "Function to check if address is belongs to validator role.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Address to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxGasPrice()",
      "name": "maxGasPrice",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxTokenAmount()",
      "name": "maxTokenAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minConfirmationBlocks()",
      "name": "minConfirmationBlocks",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minConfirmationSignatures()",
      "name": "minConfirmationSignatures",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minTokenAmount()",
      "name": "minTokenAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numOfThisBlockchain()",
      "name": "numOfThisBlockchain",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pauseExecution()",
      "name": "pauseExecution",
      "description": "Pauses transfers of tokens on contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolBalancing(uint256)",
      "name": "poolBalancing",
      "description": "With this function owner, which is a multisig account, can withdraw some RBC from the pool.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "processedTransactions(bytes32)",
      "name": "processedTransactions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeOtherBlockchain(uint128)",
      "name": "removeOtherBlockchain",
      "description": "Unregisters another blockchain for availability to swap.",
      "parameterDecorators": [
        {
          "name": "numOfOtherBlockchain",
          "description": "number of blockchain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "setCryptoFeeOfBlockchain(uint128,uint256)",
      "name": "setCryptoFeeOfBlockchain",
      "description": "Changes crypto fee values for blockchains in blockchainCryptoFee variables.",
      "parameterDecorators": [
        {
          "name": "_blockchainNum",
          "description": "Existing number of blockchain.",
          "recommendedTypes": []
        },
        {
          "name": "feeAmount",
          "description": "Fee amount that must be sent calling transferToOtherBlockchain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeAmountOfBlockchain(uint128,uint256)",
      "name": "setFeeAmountOfBlockchain",
      "description": "fee is represented as hundredths of a bip, i.e. 1e-6. Changes fee values for blockchains in feeAmountOfBlockchain variables.",
      "parameterDecorators": [
        {
          "name": "_blockchainNum",
          "description": "Existing number of blockchain.",
          "recommendedTypes": []
        },
        {
          "name": "feeAmount",
          "description": "Fee amount to substruct from transfer amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxGasPrice(uint256)",
      "name": "setMaxGasPrice",
      "description": "Changes parameter of maximum gas price on which relayer nodes will operate.",
      "parameterDecorators": [
        {
          "name": "_maxGasPrice",
          "description": "Price of gas in wei.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxTokenAmount(uint256)",
      "name": "setMaxTokenAmount",
      "description": "Changes requirement for maximum token amount on transfers.",
      "parameterDecorators": [
        {
          "name": "_maxTokenAmount",
          "description": "Amount of tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinConfirmationBlocks(uint256)",
      "name": "setMinConfirmationBlocks",
      "description": "Changes requirement for minimal amount of block to consider tx confirmed on validator.",
      "parameterDecorators": [
        {
          "name": "_minConfirmationBlocks",
          "description": "Amount of blocks.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinConfirmationSignatures(uint256)",
      "name": "setMinConfirmationSignatures",
      "description": "Changes requirement for minimal amount of signatures to validate on transfer.",
      "parameterDecorators": [
        {
          "name": "_minConfirmationSignatures",
          "description": "Number of signatures to verify.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinTokenAmount(uint256)",
      "name": "setMinTokenAmount",
      "description": "Changes requirement for minimal token amount on transfers.",
      "parameterDecorators": [
        {
          "name": "_minTokenAmount",
          "description": "Amount of tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRouter(bytes4,address)",
      "name": "setRouter",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sig",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_router",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRubicAddressOfBlockchain(uint128,bytes32)",
      "name": "setRubicAddressOfBlockchain",
      "description": "Changes the address of Rubic in the certain blockchain.",
      "parameterDecorators": [
        {
          "name": "_blockchainNum",
          "description": "Existing number of blockchain.",
          "recommendedTypes": []
        },
        {
          "name": "_RubicAddress",
          "description": "The Rubic address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toEthSignedMessageHash(bytes32)",
      "name": "toEthSignedMessageHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnerAndSetManager(address,address)",
      "name": "transferOwnerAndSetManager",
      "description": "Transfers permissions of contract ownership. Will setup new owner and one manager on contract. Main purpose of this function is to transfer ownership from deployer account ot real owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "Address of new owner.",
          "recommendedTypes": []
        },
        {
          "name": "newManager",
          "description": "Address of new manager.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}