{"schema":"../schema.json","tags":["swaps","borrowing","escrows","uniswap","compound"],"name":"Escrow","description":"The current Dapp implementations are: Uniswap and Compound. This contract is used by borrowers to call Dapp functions (using delegate calls).This contract should only be constructed using it's upgradeable Proxy contract.In order to call a Dapp function, the Dapp must be added in the EscrowFactory instance.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when a new Vault is deployed.","parameterDecorators":[{"name":"underlying","description":"The underlying token the new Vault accepts.","recommendedTypes":[],"indexed":true},{"name":"vault","description":"The newly deployed Vault contract.","recommendedTypes":[],"indexed":true}]},{"signature":"TokensClaimed(address)","name":"TokensClaimed","description":"Emitted when a new Vault is deployed.","parameterDecorators":[{"name":"recipient","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"calculateTotalValue()","name":"calculateTotalValue","description":"Calculate the value of the loan by getting the value of all tokens the Escrow owns.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"callDapp(tuple(address,bytes))","name":"callDapp","description":"It calls a given dapp using a delegatecall function by a borrower owned the current loan id associated to this escrow contract.","parameterDecorators":[{"name":"dappData","description":"the current dapp data to be executed.","recommendedTypes":[],"parameters":[{"name":"location","description":"","type":"address"},{"name":"data","description":"","type":"bytes"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"claimTokens()","name":"claimTokens","description":"Sends the tokens owned by this escrow to the owner. The loan must not be active.The recipient must be the loan borrower AND the loan must be already liquidated.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"claimTokensByCollateralValue(address,uint256)","name":"claimTokensByCollateralValue","description":"Send the equivilant of tokens owned by this escrow (in collateral value) to the recipient,. The loan must not be activeThe loan must be liquidatedThe recipeient must be the loans contract.","parameterDecorators":[{"name":"recipient","description":"address to send the tokens to.","recommendedTypes":[]},{"name":"value","description":"The value of escrow held tokens, to be claimed based on collateral value.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"findTokenIndex(address)","name":"findTokenIndex","description":"Returns the index of a given token address from the stored address array.","parameterDecorators":[{"name":"tokenAddress","description":"The contract address for which the index is required.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"getBorrower()","name":"getBorrower","description":"Gets the borrower for this Escrow's loan.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getLoan()","name":"getLoan","description":"Returns this Escrow's loan instance.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"getTokens()","name":"getTokens","description":"Returns an array of token addresses, for which this Escrow contract has a balance.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address)","name":"initialize","description":"Initializes the contract setting the deployer as the initial owner.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialize(address,uint256)","name":"initialize","description":"It initializes this escrow instance for a given loans address and loan id.","parameterDecorators":[{"name":"loansAddress","description":"loans contract address.","recommendedTypes":[]},{"name":"aLoanID","description":"the loan ID associated to this escrow instance.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialized()","name":"initialized","description":"Gets if the contract is initialized.","parameterDecorators":[],"returnDecorators":[{"name":"value","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"loanID()","name":"loanID","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"loans()","name":"loans","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"repay(uint256)","name":"repay","description":"Repay this Escrow's loan. If the Escrow's balance of the borrowed token is less than the amount to repay, transfer tokens from the sender's wallet.Only the owner of the Escrow can call this. If someone else wants to make a payment, they should call the loans contract directly.","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"settings()","name":"settings","description":"The gets the settings contract address from the SETTINGS_SLOT. This address should NOT change over the time. See details in the _setSettings(...) function.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}