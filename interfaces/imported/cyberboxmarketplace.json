{
  "schema": "../schema.json",
  "tags": [],
  "name": "CyberBoxMarketplace",
  "description": "",
  "eventDecorators": [
    {
      "signature": "CyberMarketCleanBid(address,uint256)",
      "name": "CyberMarketCleanBid",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketCleanList(address,uint256)",
      "name": "CyberMarketCleanList",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketDevFeeChanged(address,address,uint256)",
      "name": "CyberMarketDevFeeChanged",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "marketPlaceFeeAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "marketFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketFeeChanged(address,uint256,uint256)",
      "name": "CyberMarketFeeChanged",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "createrFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "producerFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketTokenAdded(string,string,address,string,string,address,address)",
      "name": "CyberMarketTokenAdded",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftName",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "nftSymbol",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "erc20Name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "erc20Symbol",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "erc20Address",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "marketPlaceAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketTokenBidAccepted(address,uint256,address,address,uint256,uint256,uint256)",
      "name": "CyberMarketTokenBidAccepted",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "bidder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "total",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fees",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketTokenBidEntered(address,uint256,address,uint256)",
      "name": "CyberMarketTokenBidEntered",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fromAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketTokenBidWithdrawn(address,uint256,address)",
      "name": "CyberMarketTokenBidWithdrawn",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fromAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CyberMarketTokenBought(address,uint256,address,address,uint256,uint256,uint256)",
      "name": "CyberMarketTokenBought",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fromAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "toAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "total",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fees",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketTokenChanged(address,string,string,address,address)",
      "name": "CyberMarketTokenChanged",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "erc20Name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "erc20Symbol",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "erc20Address",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "marketPlaceAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketTokenCreaterChanged(address,address)",
      "name": "CyberMarketTokenCreaterChanged",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenCreaterAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketTokenDelisted(address,uint256)",
      "name": "CyberMarketTokenDelisted",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CyberMarketTokenListed(address,uint256,address,uint256)",
      "name": "CyberMarketTokenListed",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fromAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "minValue",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketTokenPriceChanged(address,uint256,uint256)",
      "name": "CyberMarketTokenPriceChanged",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketTokenProducerChanged(address,address)",
      "name": "CyberMarketTokenProducerChanged",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenCreaterAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CyberMarketTokenTransfered(address,uint256,address,address,uint256)",
      "name": "CyberMarketTokenTransfered",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "total",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptBidForToken(address,uint256,address)",
      "name": "acceptBidForToken",
      "description": "See {INFTKEYMarketPlaceV1-acceptBidForToken}. Must be owner of this token Must have approved this contract to transfer token Must have a valid existing bid that matches the bidder address.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "bidder",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addERC1155Token(string,string,address,string,string,address)",
      "name": "addERC1155Token",
      "description": "add new nft to contract The seller must be the dev nftName: display name of nft nftSymbol: nft token symbol nftAddress: nft token address.",
      "parameterDecorators": [
        {
          "name": "_nftName",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_nftSymbol",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Symbol",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addERC721Token(string,string,address,string,string,address)",
      "name": "addERC721Token",
      "description": "add new nft to contract The seller must be the dev nftName: display name of nft nftSymbol: nft token symbol nftAddress: nft token address.",
      "parameterDecorators": [
        {
          "name": "_nftName",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_nftSymbol",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Symbol",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buyToken(address,uint256,uint256)",
      "name": "buyToken",
      "description": "See {INFTKEYMarketPlaceV1-buyToken}. Must have a valid listing msg.sender must not the owner of token msg.value must be at least sell price plus fees.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeDev(address)",
      "name": "changeDev",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newDev",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeERC20Token(address,string,string,address)",
      "name": "changeERC20Token",
      "description": "set marketPlace address and fee of nft contract nftAddress: nft token address.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Symbol",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changePrice(address,uint256,uint256)",
      "name": "changePrice",
      "description": "change price for already listed token. Must have a valid listing msg.sender must not the owner of token.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "newPrice",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cleanAllInvalidBids()",
      "name": "cleanAllInvalidBids",
      "description": "See {INFTKEYMarketPlaceV1-cleanAllInvalidBids}.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cleanAllInvalidListings()",
      "name": "cleanAllInvalidListings",
      "description": "See {INFTKEYMarketPlaceV1-cleanAllInvalidListings}.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "delistToken(address,uint256)",
      "name": "delistToken",
      "description": "See {INFTKEYMarketPlaceV1-delistToken}. msg.sender must be the seller of the listing record.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "devAddress()",
      "name": "devAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "enterBidForToken(address,uint256,uint256)",
      "name": "enterBidForToken",
      "description": "See {INFTKEYMarketPlaceV1-enterBidForToken}. People can only enter bid if bid is allowed The timestamp set needs to be in the allowed range bid price > 0 must not be token owner must allow this contract to spend enough pay ment token.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "bidPrice",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAllTokenListings()",
      "name": "getAllTokenListings",
      "description": "See {INFTKEYMarketPlaceV1-getAllTokenListings}.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "listingPrice",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "seller",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMarketPlaceToken()",
      "name": "getMarketPlaceToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNFTToken(address)",
      "name": "getNFTToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "nftToken",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "tuple"
            },
            {
              "name": "paymentToken",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "tuple"
            },
            {
              "name": "marketPlaceAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "is721",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSelectedERC20Address()",
      "name": "getSelectedERC20Address",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSelectedERC20Token()",
      "name": "getSelectedERC20Token",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSelectedNFTAddress()",
      "name": "getSelectedNFTAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getServiceFee(address)",
      "name": "getServiceFee",
      "description": "return token fee of nft contract nftAddress: nft token address.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param5",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getSupportMarketPlaceToken(address)",
      "name": "getSupportMarketPlaceToken",
      "description": "get support market place token list.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSupportNFTToken(address)",
      "name": "getSupportNFTToken",
      "description": "get support nft list.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenName",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "string"
            },
            {
              "name": "tokenSymbol",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "string"
            },
            {
              "name": "tokenAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSupportPaymentToken(address)",
      "name": "getSupportPaymentToken",
      "description": "get support payment token list.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenName",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "string"
            },
            {
              "name": "tokenSymbol",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "string"
            },
            {
              "name": "tokenAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenBids(uint256)",
      "name": "getTokenBids",
      "description": "See {INFTKEYMarketPlaceV1-getTokenBids}.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "bidPrice",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "bidder",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenListing(uint256)",
      "name": "getTokenListing",
      "description": "See {INFTKEYMarketPlaceV1-getTokenListing}.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "listingPrice",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "seller",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "implementation()",
      "name": "implementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "importExistMarketPlace(string,string,address,string,string,address,address,bool)",
      "name": "importExistMarketPlace",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_nftName",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_nftSymbol",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Symbol",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_erc20Address",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_marketPlaceAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "isSupportERC721",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isEtherToken(address)",
      "name": "isEtherToken",
      "description": "returns ERC20 is celo token or not.",
      "parameterDecorators": [
        {
          "name": "paymentToken",
          "description": "payment token address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "listToken(address,uint256,uint256)",
      "name": "listToken",
      "description": "List token for sale.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "erc721 token Id.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "min price to sell the token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ownerAddress()",
      "name": "ownerAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "selectNFT(address)",
      "name": "selectNFT",
      "description": "set active erc20 to erc20 address The seller must be the dev.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sendERC20(address,address,address,uint256)",
      "name": "sendERC20",
      "description": "payment from sender to receiver with Custom ERC20 or Celo.",
      "parameterDecorators": [
        {
          "name": "paymentToken",
          "description": "payment ERC20.",
          "recommendedTypes": []
        },
        {
          "name": "sender",
          "description": "payment from address.",
          "recommendedTypes": []
        },
        {
          "name": "receiver",
          "description": "payment to address.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "payment amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaketPlaceAddressAndDevFee(address,address,uint256)",
      "name": "setMaketPlaceAddressAndDevFee",
      "description": "set marketPlace address and fee of nft contract nftAddress: nft token address.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maketPlaceFeeAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maketPlaceFeePercentage",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNFTFees(address,uint256,uint256)",
      "name": "setNFTFees",
      "description": "set token fee to nft contract nftAddress: nft token address.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_feeCreater",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_feeProducer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNewMarketPlaceAddress(address)",
      "name": "setNewMarketPlaceAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenCreaterAddress(address,address)",
      "name": "setTokenCreaterAddress",
      "description": "Set partner address and profit share.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "Token maket fee address.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenCreaterAddress",
          "description": "Token maket fee address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenProducerAddress(address,address)",
      "name": "setTokenProducerAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_tokenProducerAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportNFTs(uint256)",
      "name": "supportNFTs",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transfer(address,address,uint256)",
      "name": "transfer",
      "description": "Transfer token to Other Must be owner of this token Must have approved this contract to transfer token Must have a valid existing bid that matches the bidder address.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawBidForToken(address,uint256)",
      "name": "withdrawBidForToken",
      "description": "See {INFTKEYMarketPlaceV1-withdrawBidForToken}. There must be a bid exists remove this bid record.",
      "parameterDecorators": [
        {
          "name": "_nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawCelo(address)",
      "name": "withdrawCelo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawERC20(address,address)",
      "name": "withdrawERC20",
      "description": "",
      "parameterDecorators": [
        {
          "name": "address20",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}