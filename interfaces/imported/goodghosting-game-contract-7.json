{
  "schema": "../schema.json",
  "tags": [
    "aave",
    "celo network"
  ],
  "name": "GoodGhostingCelo",
  "description": "GoodGhosting Game Contract. Used for games deployed on Ethereum Mainnet, using Aave as the underlying pool.",
  "eventDecorators": [
    {
      "signature": "AdminWithdrawal(address,uint256,uint256,uint256)",
      "name": "AdminWithdrawal",
      "description": "Emitted every time an order is broadcasted. The {NylonTransferred} event is emitted once Nylon are sent.",
      "parameterDecorators": [
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "totalGameInterest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "adminFeeAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "adminIncentiveAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Deposit(address,uint256,uint256)",
      "name": "Deposit",
      "description": "Emitted every time an order is broadcasted. The {NylonTransferred} event is emitted once Nylon are sent.",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "segment",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EarlyWithdrawal(address,uint256,uint256)",
      "name": "EarlyWithdrawal",
      "description": "Emitted every time an order is broadcasted. The {NylonTransferred} event is emitted once Nylon are sent.",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalGamePrincipal",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundsRedeemedFromExternalPool(uint256,uint256,uint256,uint256,uint256)",
      "name": "FundsRedeemedFromExternalPool",
      "description": "Emitted every time an order is broadcasted. The {NylonTransferred} event is emitted once Nylon are sent.",
      "parameterDecorators": [
        {
          "name": "totalAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalGamePrincipal",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalGameInterest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rewards",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalIncentiveAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "JoinedGame(address,uint256)",
      "name": "JoinedGame",
      "description": "Emitted every time an order is broadcasted. The {NylonTransferred} event is emitted once Nylon are sent.",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted every time an order is broadcasted. The {NylonTransferred} event is emitted once Nylon are sent.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Emitted every time an order is broadcasted. The {NylonTransferred} event is emitted once Nylon are sent.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Emitted every time an order is broadcasted. The {NylonTransferred} event is emitted once Nylon are sent.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WinnersAnnouncement(address[])",
      "name": "WinnersAnnouncement",
      "description": "Emitted every time an order is broadcasted. The {NylonTransferred} event is emitted once Nylon are sent.",
      "parameterDecorators": [
        {
          "name": "winners",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdrawal(address,uint256,uint256,uint256)",
      "name": "Withdrawal",
      "description": "Emitted every time an order is broadcasted. The {NylonTransferred} event is emitted once Nylon are sent.",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "playerReward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "playerIncentive",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "activePlayersCount()",
      "name": "activePlayersCount",
      "description": "Controls the amount of active players in the game (ignores players that early withdraw).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adaiToken()",
      "name": "adaiToken",
      "description": "Address of the interest bearing token received when funds are transferred to the external pool.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminFeeAmount()",
      "name": "adminFeeAmount",
      "description": "performance fee amount allocated to the admin.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminFeeWithdraw()",
      "name": "adminFeeWithdraw",
      "description": "Allows the admin to withdraw the performance fee, if applicable. This function can be called only by the contract's admin. Cannot be called before the game ends.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminWithdraw()",
      "name": "adminWithdraw",
      "description": "controls if admin withdrew or not the performance fee.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "customFee()",
      "name": "customFee",
      "description": "The performance admin fee (percentage).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "daiToken()",
      "name": "daiToken",
      "description": "Address of the token used for depositing into the game by players (DAI).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "earlyWithdraw()",
      "name": "earlyWithdraw",
      "description": "Allows a player to withdraws funds before the game ends. An early withdrawl fee is charged. Cannot be called after the game is completed.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "earlyWithdrawalFee()",
      "name": "earlyWithdrawalFee",
      "description": "The early withdrawal fee (percentage).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "firstSegmentStart()",
      "name": "firstSegmentStart",
      "description": "When the game started (deployed timestamp).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentSegment()",
      "name": "getCurrentSegment",
      "description": "Calculates the current segment of the game.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "current game segment.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNumberOfPlayers()",
      "name": "getNumberOfPlayers",
      "description": "gets the number of players in the game.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "number of players.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "incentiveToken()",
      "name": "incentiveToken",
      "description": "Defines an optional token address used to provide additional incentives to users. Accepts \"0x0\" adresses when no incentive token exists.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isGameCompleted()",
      "name": "isGameCompleted",
      "description": "Checks if the game is completed or not.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "\"true\" if completeted; otherwise, \"false\".",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "iterablePlayers(uint256)",
      "name": "iterablePlayers",
      "description": "controls the amount deposited in each segment that was not yet transferred to the external underlying poollist of players.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "joinGame()",
      "name": "joinGame",
      "description": "Allows a player to join the game.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lastSegment()",
      "name": "lastSegment",
      "description": "The number of segments in the game (segment count).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lendingPool()",
      "name": "lendingPool",
      "description": "Lending pool address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lendingPoolAddressProvider()",
      "name": "lendingPoolAddressProvider",
      "description": "Which Aave instance we use to swap DAI to interest bearing aDAI.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lendingPoolCore()",
      "name": "lendingPoolCore",
      "description": "Lending pool core address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "makeDeposit()",
      "name": "makeDeposit",
      "description": "Allows players to make deposits for the game segments, after joining the game.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "maxPlayersCount()",
      "name": "maxPlayersCount",
      "description": "Defines the max quantity of players allowed in the game.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "pauses the game. This function can be called only by the contract's admin.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "players(address)",
      "name": "players",
      "description": "Stores info about the players in the game.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "withdrawn",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "canRejoin",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "mostRecentSegmentPaid",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountPaid",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemFromExternalPool()",
      "name": "redeemFromExternalPool",
      "description": "Redeems funds from the external pool and updates the internal accounting controls related to the game stats. Can only be called after the game is completed.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemed()",
      "name": "redeemed",
      "description": "Controls if tokens were redeemed or not from the pool.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "segmentLength()",
      "name": "segmentLength",
      "description": "The time duration (in seconds) of each segment.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "segmentPayment()",
      "name": "segmentPayment",
      "description": "The amount to be paid on each segment.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalGameInterest()",
      "name": "totalGameInterest",
      "description": "Stores the total amount of net interest received in the game.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalGamePrincipal()",
      "name": "totalGamePrincipal",
      "description": "total principal amount.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalIncentiveAmount()",
      "name": "totalIncentiveAmount",
      "description": "total amount of incentive tokens to be distributed among winners.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "unpauses the game. This function can be called only by the contract's admin.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "winners(uint256)",
      "name": "winners",
      "description": "list of winners.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw()",
      "name": "withdraw",
      "description": "Allows player to withdraw their funds after the game ends with no loss (fee). Winners get a share of the interest earned.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}