{
  "schema": "../schema.json",
  "tags": [
    "staking",
    "liquidity",
    "dao",
    "vaults"
  ],
  "name": "arNXMVault",
  "description": "arNXM Vault. Vault to stake wNXM or NXM in Nexus Mutual while maintaining your liquidity. This is V2 which replaces V1 behind a proxy. Updated variables at the bottom.",
  "eventDecorators": [
    {
      "signature": "Deposit(address,uint256,uint256,uint256)",
      "name": "Deposit",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "arAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NxmReward(uint256,uint256,uint256)",
      "name": "NxmReward",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "reward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalAum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Restake(uint256,uint256,uint256,uint256,uint256)",
      "name": "Restake",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "withdrawn",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "unstaked",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "staked",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalAum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SecondOwnershipTransferred(address,address)",
      "name": "SecondOwnershipTransferred",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdrawal(address,uint256,uint256,uint256)",
      "name": "Withdrawal",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "arAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "____deprecated____()",
      "name": "____deprecated____",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminPercent()",
      "name": "adminPercent",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "alertTransfer(address,address,uint256)",
      "name": "alertTransfer",
      "description": "When arNXM tokens are transferred, the referrer stakes must be adjusted on RewardManager. This is taken care of by a \"_beforeTokenTransfer\" function on the arNXM ERC20.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "The user that tokens are being transferred from.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "The user that tokens are being transferred to.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of tokens that are being transferred.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "arNxm()",
      "name": "arNxm",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "arNxmValue(uint256)",
      "name": "arNxmValue",
      "description": "Find the arNxm value of a certain amount of wNxm.",
      "parameterDecorators": [
        {
          "name": "_nAmount",
          "description": "The amount of NXM to check arNxm value of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "arAmount",
          "description": "The amount of arNxm the input amount of wNxm is worth.*.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "aum()",
      "name": "aum",
      "description": "Used to determine total Assets Under Management.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "aumTotal",
          "description": "Full amount of assets under management (wNXM balance + stake deposit).*.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiary()",
      "name": "beneficiary",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bucketSize()",
      "name": "bucketSize",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeAdminPercent(uint256)",
      "name": "changeAdminPercent",
      "description": "Change the percent of rewards that are given for administration of the contract.",
      "parameterDecorators": [
        {
          "name": "_adminPercent",
          "description": "The percent of rewards to be given for administration (10 == 1%, 1000 == 100%)*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeBeneficiary(address)",
      "name": "changeBeneficiary",
      "description": "Change beneficiary of the administration funds.",
      "parameterDecorators": [
        {
          "name": "_newBeneficiary",
          "description": "Address of the new beneficiary to receive funds.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeBucketSize(uint256)",
      "name": "changeBucketSize",
      "description": "Owner can change the size of a bucket.",
      "parameterDecorators": [
        {
          "name": "_bucketSize",
          "description": "The new amount of protocols to stake on each week.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeCheckpointAndStart(uint256,uint256)",
      "name": "changeCheckpointAndStart",
      "description": "Owner can change checkpoint for where we want all rotations to start and the start of the upcoming rotation.",
      "parameterDecorators": [
        {
          "name": "_checkpointProtocol",
          "description": "The protocol to begin rotations on if we don't want to stake or unstake on some.",
          "recommendedTypes": []
        },
        {
          "name": "_startProtocol",
          "description": "The protocol that the upcoming rotation will begin on.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changePauseDuration(uint256)",
      "name": "changePauseDuration",
      "description": "Owner may change the amount of time that withdrawals are paused after a hack is confirmed.",
      "parameterDecorators": [
        {
          "name": "_pauseDuration",
          "description": "The new amount of time that withdrawals will be paused.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeProtocols(address[],uint256[],address[],uint256)",
      "name": "changeProtocols",
      "description": "Owner may change protocols that we stake for and remove any.",
      "parameterDecorators": [
        {
          "name": "_protocols",
          "description": "New list of protocols to stake for.",
          "recommendedTypes": []
        },
        {
          "name": "_unstakePercents",
          "description": "Percent to unstake for each protocol.",
          "recommendedTypes": []
        },
        {
          "name": "_removedProtocols",
          "description": "Protocols removed from our staking that must be 100% unstaked.*.",
          "recommendedTypes": []
        },
        {
          "name": "_lastId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeReferPercent(uint256)",
      "name": "changeReferPercent",
      "description": "Owner may change the percent of insurance fees referrers receive.",
      "parameterDecorators": [
        {
          "name": "_referPercent",
          "description": "The percent of fees referrers receive. 50 == 5%.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeReserveAmount(uint256)",
      "name": "changeReserveAmount",
      "description": "Owner may change how much of the AUM should be saved in reserve each period.",
      "parameterDecorators": [
        {
          "name": "_reserveAmount",
          "description": "The amount of wNXM (in token Wei) to reserve each period.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeRestakePeriod(uint256)",
      "name": "changeRestakePeriod",
      "description": "Owner may change the amount of time required to be waited between restaking.",
      "parameterDecorators": [
        {
          "name": "_restakePeriod",
          "description": "Amount of time required between restakes (starts at 6 days or 86400 * 6).*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeRewardDuration(uint256)",
      "name": "changeRewardDuration",
      "description": "Owner may change the amount of time it takes to distribute rewards from Nexus.",
      "parameterDecorators": [
        {
          "name": "_rewardDuration",
          "description": "The amount of time it takes to fully distribute rewards.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "checkpointProtocol()",
      "name": "checkpointProtocol",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentReward()",
      "name": "currentReward",
      "description": "Used to determine distributed reward amount.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "reward",
          "description": "distributed reward amount*.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(uint256,address,bool)",
      "name": "deposit",
      "description": "Deposit wNxm or NXM to get arNxm in return.",
      "parameterDecorators": [
        {
          "name": "_nAmount",
          "description": "The amount of NXM to stake.",
          "recommendedTypes": []
        },
        {
          "name": "_referrer",
          "description": "The address that referred this user.",
          "recommendedTypes": []
        },
        {
          "name": "_isNxm",
          "description": "True if the token is NXM, false if the token is wNXM.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRewardNxm()",
      "name": "getRewardNxm",
      "description": "Split off from restake() function to enable reward fetching at any time.*.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getShieldMiningRewards(address,address,address,address)",
      "name": "getShieldMiningRewards",
      "description": "claim rewards from shield mining.",
      "parameterDecorators": [
        {
          "name": "_shieldMining",
          "description": "shield mining contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_protocol",
          "description": "Protocol funding the rewards.",
          "recommendedTypes": []
        },
        {
          "name": "_sponsor",
          "description": "sponsor address who funded the shield mining.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "token address that sponsor is distributing*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address[],address,address,address,address,address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_protocols",
          "description": "List of the 10 protocols we're using.",
          "recommendedTypes": []
        },
        {
          "name": "_wNxm",
          "description": "Address of the wNxm contract.",
          "recommendedTypes": []
        },
        {
          "name": "_arNxm",
          "description": "Address of the arNxm contract.",
          "recommendedTypes": []
        },
        {
          "name": "_nxm",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_nxmMaster",
          "description": "Address of Nexus' master address (to fetch others).",
          "recommendedTypes": []
        },
        {
          "name": "_rewardManager",
          "description": "Address of the ReferralRewards smart contract.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if `msg.sender` is the owner of the contract.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastCall(address)",
      "name": "lastCall",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastRestake()",
      "name": "lastRestake",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastReward()",
      "name": "lastReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastRewardTimestamp()",
      "name": "lastRewardTimestamp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nxm()",
      "name": "nxm",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nxmMaster()",
      "name": "nxmMaster",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nxmValue(uint256)",
      "name": "nxmValue",
      "description": "Find the wNxm value of a certain amount of arNxm.",
      "parameterDecorators": [
        {
          "name": "_arAmount",
          "description": "The amount of arNxm to check wNxm value of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "nAmount",
          "description": "The amount of wNxm the input amount of arNxm is worth.*.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the address of the owner.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ownerRestake(uint256)",
      "name": "ownerRestake",
      "description": "Restake that may be called only by owner. Bypasses restake period restrictions.",
      "parameterDecorators": [
        {
          "name": "_lastId",
          "description": "Last unstake request ID on Nexus Mutual.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pauseDuration()",
      "name": "pauseDuration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pauseWithdrawals(uint256)",
      "name": "pauseWithdrawals",
      "description": "Anyone may call this function to pause withdrawals for a certain amount of time. We check Nexus contracts for a recent accepted claim, then can pause to avoid further withdrawals.",
      "parameterDecorators": [
        {
          "name": "_claimId",
          "description": "The ID of the cover that has been accepted for a confirmed hack.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "protocols(uint256)",
      "name": "protocols",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "receiveOwnership()",
      "name": "receiveOwnership",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "receiveSecondOwnership()",
      "name": "receiveSecondOwnership",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "referPercent()",
      "name": "referPercent",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "referrers(address)",
      "name": "referrers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rescueToken(address)",
      "name": "rescueToken",
      "description": "rescue tokens locked in contract.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "address of token to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reserveAmount()",
      "name": "reserveAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "restake(uint256)",
      "name": "restake",
      "description": "Restake that may be called by anyone.",
      "parameterDecorators": [
        {
          "name": "_lastId",
          "description": "Last unstake request ID on Nexus Mutual.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "restakePeriod()",
      "name": "restakePeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardDuration()",
      "name": "rewardDuration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardManager()",
      "name": "rewardManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "secondOwner()",
      "name": "secondOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the address of the owner.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakeNxmManual(address[],uint256[])",
      "name": "stakeNxmManual",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_protocols",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_stakeAmounts",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakedNxm()",
      "name": "stakedNxm",
      "description": "Used to determine staked nxm amount in pooled staking contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "staked",
          "description": "Staked nxm amount.*.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "startProtocol()",
      "name": "startProtocol",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to transfer control of the contract to a newOwner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferSecondOwnership(address)",
      "name": "transferSecondOwnership",
      "description": "Allows the current owner to transfer control of the contract to a newOwner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unstakePercents(uint256)",
      "name": "unstakePercents",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unwrapWnxm()",
      "name": "unwrapWnxm",
      "description": "Used to unwrap wnxm tokens to nxm*.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "wNxm()",
      "name": "wNxm",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Withdraw an amount of wNxm or NXM by burning arNxm.",
      "parameterDecorators": [
        {
          "name": "_arAmount",
          "description": "The amount of arNxm to burn for the wNxm withdraw.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawalsPaused()",
      "name": "withdrawalsPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}