{
  "schema": "../schema.json",
  "tags": [
    "curve finance"
  ],
  "name": "EllipticCurve",
  "description": "EllipticCurve. NOTE: To disambiguate public keys when verifying signatures, activate condition 'rs[1] > lowSmax' in validateSignature(). Implements elliptic curve math; Parametrized for SECP256R1. Includes components of code by Andreas Olofsson, Alexander Vlasov (https://github.com/BANKEX/CurveArithmetics), and Avi Asayag (https://github.com/orbs-network/elliptic-curve-solidity) Source: https://github.com/tdrerup/elliptic-curve-solidity.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "add(uint256,uint256,uint256,uint256)",
      "name": "add",
      "description": "Add two elliptic curve points in affine coordinates.",
      "parameterDecorators": [
        {
          "name": "x0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "x1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addAndReturnProjectivePoint(uint256,uint256,uint256,uint256)",
      "name": "addAndReturnProjectivePoint",
      "description": "Add two points in affine coordinates and return projective point.",
      "parameterDecorators": [
        {
          "name": "x1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "x2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "P",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[3]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addProj(uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "addProj",
      "description": "Add two elliptic curve points in projective coordinates. See https://www.nayuki.io/page/elliptic-curve-point-addition-in-projective-coordinates.",
      "parameterDecorators": [
        {
          "name": "x0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "z0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "x1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "z1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "x2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "y2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "z2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOnCurve(uint256,uint256)",
      "name": "isOnCurve",
      "description": "Check if a point in affine coordinates is on the curve.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isZeroCurve(uint256,uint256)",
      "name": "isZeroCurve",
      "description": "Check if the curve is the zero curve.",
      "parameterDecorators": [
        {
          "name": "x0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isZero",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "multipleGeneratorByScalar(uint256)",
      "name": "multipleGeneratorByScalar",
      "description": "Multiply the curve's generator point by a scalar.",
      "parameterDecorators": [
        {
          "name": "scalar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "multiplyPowerBase2(uint256,uint256,uint256)",
      "name": "multiplyPowerBase2",
      "description": "Multiply an elliptic curve point by a 2 power base (i.e., (2^exp)*P)).",
      "parameterDecorators": [
        {
          "name": "x0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "exp",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "multiplyScalar(uint256,uint256,uint256)",
      "name": "multiplyScalar",
      "description": "Multiply an elliptic curve point by a scalar.",
      "parameterDecorators": [
        {
          "name": "x0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "scalar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "x1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "y1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toAffinePoint(uint256,uint256,uint256)",
      "name": "toAffinePoint",
      "description": "Transform from projective to affine coordinates.",
      "parameterDecorators": [
        {
          "name": "x0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "z0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "x1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "y1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toProjectivePoint(uint256,uint256)",
      "name": "toProjectivePoint",
      "description": "Transform affine coordinates into projective coordinates.",
      "parameterDecorators": [
        {
          "name": "x0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "P",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[3]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "twice(uint256,uint256)",
      "name": "twice",
      "description": "Double an elliptic curve point in affine coordinates.",
      "parameterDecorators": [
        {
          "name": "x0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "twiceProj(uint256,uint256,uint256)",
      "name": "twiceProj",
      "description": "Double an elliptic curve point in projective coordinates. See https://www.nayuki.io/page/elliptic-curve-point-addition-in-projective-coordinates.",
      "parameterDecorators": [
        {
          "name": "x0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "y0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "z0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "x1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "y1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "z1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validateSignature(bytes32,uint256[2],uint256[2])",
      "name": "validateSignature",
      "description": "Validate combination of message, signature, and public key.",
      "parameterDecorators": [
        {
          "name": "message",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "rs",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "Q",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "zeroAffine()",
      "name": "zeroAffine",
      "description": "Return the zero curve in affine coordinates.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "x",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "y",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "zeroProj()",
      "name": "zeroProj",
      "description": "Return the zero curve in projective coordinates.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "x",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "y",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "z",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}