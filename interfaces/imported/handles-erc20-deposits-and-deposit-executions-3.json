{
  "schema": "../schema.json",
  "tags": [
    "bridges"
  ],
  "name": "ERC20HandlerUpgradeable",
  "description": "Handles ERC20 deposits and deposit executions. This contract is intended to be used with the Bridge contract.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "ETHReserve()",
      "name": "ETHReserve",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_bridgeAddress()",
      "name": "_bridgeAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_burnList(address)",
      "name": "_burnList",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_contractWhitelist(address)",
      "name": "_contractWhitelist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_resourceIDToTokenContractAddress(bytes32)",
      "name": "_resourceIDToTokenContractAddress",
      "description": "Exposing getter for {_resourceIDToTokenContractAddress}.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_tokenContractAddressToResourceID(address)",
      "name": "_tokenContractAddressToResourceID",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(bytes32,address,bytes)",
      "name": "deposit",
      "description": "A deposit is initiatied by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: amount uint256 bytes 0 - 32. Depending if the corresponding {tokenAddress} for the parsed {resourceID} is marked true in {_burnList}, deposited tokens will be burned, if not, they will be locked.",
      "parameterDecorators": [
        {
          "name": "resourceID",
          "description": "ResourceID used to find address of token to be used for deposit.",
          "recommendedTypes": []
        },
        {
          "name": "depositer",
          "description": "Address of account making the deposit in the Bridge contract.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Consists of {amount} padded to 32 bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "an empty data.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeProposal(bytes32,bytes)",
      "name": "executeProposal",
      "description": "Proposal execution should be initiated when a proposal is finalized in the Bridge contract. by a relayer on the deposit's destination chain.Data passed into the function should be constructed as follows: amount uint256 bytes 0 - 32 destinationRecipientAddress length uint256 bytes 32 - 64 destinationRecipientAddress bytes bytes 64 - END.",
      "parameterDecorators": [
        {
          "name": "resourceID",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Consists of {resourceID}, {amount}, {lenDestinationRecipientAddress}, and {destinationRecipientAddress} all padded to 32 bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "bridgeAddress",
          "description": "Contract address of previously deployed Bridge.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isNative(address)",
      "name": "isNative",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setBurnable(address)",
      "name": "setBurnable",
      "description": "First verifies {contractAddress} is whitelisted, then sets {_burnList}[{contractAddress}] to true.",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "Address of contract to be used when making or executing deposits.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNative(address,bool)",
      "name": "setNative",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nativeAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_isNative",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setResource(bytes32,address)",
      "name": "setResource",
      "description": "First verifies {_resourceIDToContractAddress}[{resourceID}] and {_contractAddressToResourceID}[{contractAddress}] are not already set, then sets {_resourceIDToContractAddress} with {contractAddress}, {_contractAddressToResourceID} with {resourceID}, and {_contractWhitelist} to true for {contractAddress}.",
      "parameterDecorators": [
        {
          "name": "resourceID",
          "description": "ResourceID to be used when making deposits.",
          "recommendedTypes": []
        },
        {
          "name": "contractAddress",
          "description": "Address of contract to be called when a deposit is made and a deposited is executed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(bytes)",
      "name": "withdraw",
      "description": "Used to manually release ERC20 tokens from ERC20Safe.Data passed into the function should be constructed as follows: tokenAddress address bytes 0 - 32 recipient address bytes 32 - 64 amount uint bytes 64 - 96.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "Consists of {tokenAddress}, {recipient}, and {amount} all padded to 32 bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawETH(bytes)",
      "name": "withdrawETH",
      "description": "Used to manually release ETH ERC20Safe.Data passed into the function should be constructed as follows: recipient address bytes 0 - 32 amount uint bytes 32 - 64.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "Consists of {recipient}, and {amount} all padded to 32 bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}