{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "WalletSimple",
  "description": "",
  "eventDecorators": [
    {
      "signature": "BatchTransacted(address,address,bytes32)",
      "name": "BatchTransacted",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "msgSender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "otherSigner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "operation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BatchTransfer(address,address,uint256)",
      "name": "BatchTransfer",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Deposited(address,uint256,bytes)",
      "name": "Deposited",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SafeModeActivated(address)",
      "name": "SafeModeActivated",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "msgSender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Transacted(address,address,bytes32,address,uint256,bytes)",
      "name": "Transacted",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "msgSender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "otherSigner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "operation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "toAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "activateSafeMode()",
      "name": "activateSafeMode",
      "description": "Irrevocably puts contract into safe mode. When in this mode, transactions may only be sent to signing addresses.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "flushForwarderTokens(address,address)",
      "name": "flushForwarderTokens",
      "description": "Execute a token flush from one of the forwarder addresses. This transfer needs only a single signature and can be done by any signer.",
      "parameterDecorators": [
        {
          "name": "forwarderAddress",
          "description": "the address of the forwarder address to flush the tokens from.",
          "recommendedTypes": []
        },
        {
          "name": "tokenContractAddress",
          "description": "the address of the erc20 token contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getNextSequenceId()",
      "name": "getNextSequenceId",
      "description": "Gets the next available sequence ID for signing when using executeAndConfirm returns the sequenceId one higher than the one currently stored.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "init(address[])",
      "name": "init",
      "description": "Set up a simple multi-sig wallet by specifying the signers allowed to be used on this wallet. 2 signers will be required to send a transaction from this wallet. Note: The sender is NOT automatically added to the list of signers. Signers CANNOT be changed once they are set.",
      "parameterDecorators": [
        {
          "name": "allowedSigners",
          "description": "An array of signers on the wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSigner(address)",
      "name": "isSigner",
      "description": "Determine if an address is a signer on this wallet.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "address to check returns boolean indicating whether address is signer or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "safeMode()",
      "name": "safeMode",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sendMultiSig(address,uint256,bytes,uint256,uint256,bytes)",
      "name": "sendMultiSig",
      "description": "Execute a multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover. Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.",
      "parameterDecorators": [
        {
          "name": "toAddress",
          "description": "the destination address to send an outgoing transaction.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "the amount in Wei to be sent.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "the data to send to the toAddress when invoking the transaction.",
          "recommendedTypes": []
        },
        {
          "name": "expireTime",
          "description": "the number of seconds since 1970 for which this transaction is valid.",
          "recommendedTypes": []
        },
        {
          "name": "sequenceId",
          "description": "the unique sequence id obtainable from getNextSequenceId.",
          "recommendedTypes": []
        },
        {
          "name": "signature",
          "description": "see Data Formats.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sendMultiSigBatch(address[],uint256[],uint256,uint256,bytes)",
      "name": "sendMultiSigBatch",
      "description": "Execute a batched multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover. Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated. The recipients and values to send are encoded in two arrays, where for index i, recipients[i] will be sent values[i].",
      "parameterDecorators": [
        {
          "name": "recipients",
          "description": "The list of recipients to send to.",
          "recommendedTypes": []
        },
        {
          "name": "values",
          "description": "The list of values to send to.",
          "recommendedTypes": []
        },
        {
          "name": "expireTime",
          "description": "the number of seconds since 1970 for which this transaction is valid.",
          "recommendedTypes": []
        },
        {
          "name": "sequenceId",
          "description": "the unique sequence id obtainable from getNextSequenceId.",
          "recommendedTypes": []
        },
        {
          "name": "signature",
          "description": "see Data Formats.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sendMultiSigToken(address,uint256,address,uint256,uint256,bytes)",
      "name": "sendMultiSigToken",
      "description": "Execute a multi-signature token transfer from this wallet using 2 signers: one from msg.sender and the other from ecrecover. Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.",
      "parameterDecorators": [
        {
          "name": "toAddress",
          "description": "the destination address to send an outgoing transaction.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "the amount in tokens to be sent.",
          "recommendedTypes": []
        },
        {
          "name": "tokenContractAddress",
          "description": "the address of the erc20 token contract.",
          "recommendedTypes": []
        },
        {
          "name": "expireTime",
          "description": "the number of seconds since 1970 for which this transaction is valid.",
          "recommendedTypes": []
        },
        {
          "name": "sequenceId",
          "description": "the unique sequence id obtainable from getNextSequenceId.",
          "recommendedTypes": []
        },
        {
          "name": "signature",
          "description": "see Data Formats.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "signers(address)",
      "name": "signers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}