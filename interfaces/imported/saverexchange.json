{
  "schema": "../schema.json",
  "tags": [],
  "name": "SaverExchange",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "DGD_ADDRESS()",
      "name": "DGD_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DISCOUNT_ADDRESS()",
      "name": "DISCOUNT_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ERC20_PROXY_0X()",
      "name": "ERC20_PROXY_0X",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "KYBER_ETH_ADDRESS()",
      "name": "KYBER_ETH_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "KYBER_WRAPPER()",
      "name": "KYBER_WRAPPER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "OASIS_WRAPPER()",
      "name": "OASIS_WRAPPER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SERVICE_FEE()",
      "name": "SERVICE_FEE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "UNISWAP_WRAPPER()",
      "name": "UNISWAP_WRAPPER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WALLET_ID()",
      "name": "WALLET_ID",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WETH_ADDRESS()",
      "name": "WETH_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burnAmount()",
      "name": "burnAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "buy(tuple(address,address,uint256,uint256,uint256,uint8,address,bytes,uint256))",
      "name": "buy",
      "description": "Takes a dest amount of tokens and converts it from the src token. Send always more than needed for the swap, extra will be returned.",
      "parameterDecorators": [
        {
          "name": "exData",
          "description": "[srcAddr, destAddr, srcAmount, destAmount, minPrice, exchangeType, exchangeAddr, callData, price0x].",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "srcAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "destAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "srcAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "destAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minPrice",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "exchangeType",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "exchangeAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "callData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "price0x",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeBurnAmount(uint256)",
      "name": "changeBurnAmount",
      "description": "Changes the amount of gas token we burn for each call. Only callable by the owner.",
      "parameterDecorators": [
        {
          "name": "_newBurnAmount",
          "description": "New amount of gas tokens to be burned.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getBestPrice(uint256,address,address,uint8,uint8)",
      "name": "getBestPrice",
      "description": "Returns the best estimated price from 2 exchanges.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "Amount of source tokens you want to exchange.",
          "recommendedTypes": []
        },
        {
          "name": "_srcToken",
          "description": "Address of the source token.",
          "recommendedTypes": []
        },
        {
          "name": "_destToken",
          "description": "Address of the destination token.",
          "recommendedTypes": []
        },
        {
          "name": "_exchangeType",
          "description": "Which exchange will be used.",
          "recommendedTypes": []
        },
        {
          "name": "_type",
          "description": "Type of action SELL|BUY.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getExpectedRate(address,address,address,uint256,uint8)",
      "name": "getExpectedRate",
      "description": "Return the expected rate from the exchange wrapper. In case of Oasis/Uniswap handles the different precision tokens.",
      "parameterDecorators": [
        {
          "name": "_wrapper",
          "description": "Address of exchange wrapper.",
          "recommendedTypes": []
        },
        {
          "name": "_srcToken",
          "description": "From token.",
          "recommendedTypes": []
        },
        {
          "name": "_destToken",
          "description": "To token.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount to be exchanged.",
          "recommendedTypes": []
        },
        {
          "name": "_type",
          "description": "Type of action SELL|BUY.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "logger()",
      "name": "logger",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sell(tuple(address,address,uint256,uint256,uint256,uint8,address,bytes,uint256))",
      "name": "sell",
      "description": "Takes a src amount of tokens and converts it into the dest token. Takes fee from the _srcAmount before the exchange.",
      "parameterDecorators": [
        {
          "name": "exData",
          "description": "[srcAddr, destAddr, srcAmount, destAmount, minPrice, exchangeType, exchangeAddr, callData, price0x].",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "srcAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "destAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "srcAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "destAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minPrice",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "exchangeType",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "exchangeAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "callData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "price0x",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWrapper(address,uint256)",
      "name": "setWrapper",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newWrapper",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_type",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}