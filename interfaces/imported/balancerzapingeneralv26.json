{
  "schema": "../schema.json",
  "tags": [
    "balancer"
  ],
  "name": "Balancer_ZapIn_General_V2_6",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Zapin(address,address,uint256)",
      "name": "Zapin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ZapIn(address,address,address,uint256,uint256,address,address,bytes)",
      "name": "ZapIn",
      "description": "This function is used to invest in given balancer pool using ETH/ERC20 Tokens.",
      "parameterDecorators": [
        {
          "name": "_FromTokenContractAddress",
          "description": "The token used for investment (address(0x00) if ether).",
          "recommendedTypes": []
        },
        {
          "name": "_ToBalancerPoolAddress",
          "description": "The address of balancer pool to zapin.",
          "recommendedTypes": []
        },
        {
          "name": "_toTokenContractAddress",
          "description": "The token with which we are adding liquidity.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of ERC to invest.",
          "recommendedTypes": []
        },
        {
          "name": "_minPoolTokens",
          "description": "for slippage.",
          "recommendedTypes": []
        },
        {
          "name": "_allowanceTarget",
          "description": "indiacates the spender for swap.",
          "recommendedTypes": []
        },
        {
          "name": "_swapTarget",
          "description": "indicates the execution target for swap.",
          "recommendedTypes": []
        },
        {
          "name": "swapCallData",
          "description": "indicates the callData for execution.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "LPTRec",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "goodwill()",
      "name": "goodwill",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "inCaseTokengetsStuck(address)",
      "name": "inCaseTokengetsStuck",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_TokenAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "set_new_goodwill(uint16)",
      "name": "set_new_goodwill",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_new_goodwill",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "set_new_zgoodwillAddress(address)",
      "name": "set_new_zgoodwillAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_new_zgoodwillAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stopped()",
      "name": "stopped",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toggleContractActive()",
      "name": "toggleContractActive",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw()",
      "name": "withdraw",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "zgoodwillAddress()",
      "name": "zgoodwillAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}