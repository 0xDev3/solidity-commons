{
  "schema": "../schema.json",
  "tags": [
    "locking"
  ],
  "name": "MarebitsLockerAccount",
  "description": "The implementation for the Mare Bits Locker Account.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "This emits when ownership of a contract changes.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "__burn(uint256)",
      "name": "__burn",
      "description": "Internally marks a token as having been burnt by setting the `isBurned` flag in the {IMarebitsLockerAccount.Account}. Only callable by the {Ownable.owner} of this contract.",
      "parameterDecorators": [
        {
          "name": "accountId",
          "description": "representing the account being burned.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "__createAccount(uint256,uint256,address,uint256,uint8,uint64)",
      "name": "__createAccount",
      "description": "Creates a new {IMarebitsLockerAccount.Account}. Only callable by the {Ownable.owner} of this contract.",
      "parameterDecorators": [
        {
          "name": "accountId",
          "description": "representing the new account.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "of tokens to lock in locker.",
          "recommendedTypes": []
        },
        {
          "name": "tokenContract",
          "description": "for the token to be locked.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "of the token to be locked; should always be 0 for locked ERC20 tokens.",
          "recommendedTypes": []
        },
        {
          "name": "tokenType",
          "description": "of token to be locked; see {Token.Type}.",
          "recommendedTypes": []
        },
        {
          "name": "unlockTime",
          "description": "after which locked tokens can be withdrawn (in seconds after UNIX epoch).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "__recoverEther()",
      "name": "__recoverEther",
      "description": "Recovers ether accidentally sent to this contract. Only callable by the {Ownable.owner} of this contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "__recoverTokens(uint8,address,uint256)",
      "name": "__recoverTokens",
      "description": "Recovers ERC20, ERC721, or ERC1155 tokens accidentally sent to this contract. Only callable by the {Ownable.owner} of this contract.",
      "parameterDecorators": [
        {
          "name": "tokenType",
          "description": "of token to recover; see {Token.Type}.",
          "recommendedTypes": []
        },
        {
          "name": "tokenContract",
          "description": "address of the token to recover.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "of the token to recover; should always be 0 for ERC20 tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "__redeem(uint256)",
      "name": "__redeem",
      "description": "Marks account `accountId` as redeemed by setting the `amount` to 0, `isRedeemed` to true, and the `unlockTime` to the current time. Only callable by the {Ownable.owner} of this contract.",
      "parameterDecorators": [
        {
          "name": "accountId",
          "description": "representing the account to redeem.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "__setUnlockTime(uint256,uint64)",
      "name": "__setUnlockTime",
      "description": "Updates the unlock time of tokens locked in this account to `unlockTime`; called by {IMarebitsLocker.extendLock}. Only callable by the {Ownable.owner} of this contract.",
      "parameterDecorators": [
        {
          "name": "accountId",
          "description": "representing the account.",
          "recommendedTypes": []
        },
        {
          "name": "unlockTime",
          "description": "in seconds after UNIX epoch.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "bestPony()",
      "name": "bestPony",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "string the absolute best pony (hint: it's Twilight Sparkle).",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccount(uint256)",
      "name": "getAccount",
      "description": "Gets the account details for the account `accountId`.",
      "parameterDecorators": [
        {
          "name": "accountId",
          "description": "(also `tokenId`) representing the locked account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Account representing `accountId`; see {IMarebitsLockerAccount.Account}.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "accountId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "tokenId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "tokenContract",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "tokenType",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint8"
            },
            {
              "name": "unlockTime",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint64"
            },
            {
              "name": "isBurned",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "isRedeemed",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Get the address of the owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The address of the owner.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "Implementation of the {IERC165} interface.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}