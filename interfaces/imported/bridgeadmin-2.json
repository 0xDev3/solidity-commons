{
  "schema": "../schema.json",
  "tags": [
    "bridges",
    "liquidity"
  ],
  "name": "BridgeAdmin",
  "description": "This contract is responsible for making global variables accessible to BridgePool contracts, which house passive liquidity and enable relaying of L2 deposits.The owner of this contract can also call permissioned functions on registered L2 DepositBoxes. Administrative contract deployed on L1 that has implicit references to all L2 DepositBoxes.",
  "eventDecorators": [
    {
      "signature": "BridgePoolsAdminTransferred(address[],address)",
      "name": "BridgePoolsAdminTransferred",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "bridgePools",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DepositsEnabled(uint256,address,bool)",
      "name": "DepositsEnabled",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "l2Token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "depositsEnabled",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetCrossDomainAdmin(uint256,address)",
      "name": "SetCrossDomainAdmin",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetDepositContracts(uint256,address,address)",
      "name": "SetDepositContracts",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "l2DepositContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "l2MessengerContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetMinimumBridgingDelay(uint256,uint64)",
      "name": "SetMinimumBridgingDelay",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newMinimumBridgingDelay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetOptimisticOracleLiveness(uint32)",
      "name": "SetOptimisticOracleLiveness",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "liveness",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetProposerBondPct(uint64)",
      "name": "SetProposerBondPct",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "proposerBondPct",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetRelayIdentifier(bytes32)",
      "name": "SetRelayIdentifier",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WhitelistToken(uint256,address,address,address)",
      "name": "WhitelistToken",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "l1Token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "l2Token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "bridgePool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "depositContracts(uint256)",
      "name": "depositContracts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "depositContract",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "messengerContract",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "finder()",
      "name": "finder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "identifier()",
      "name": "identifier",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "optimisticOracleLiveness()",
      "name": "optimisticOracleLiveness",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposerBondPct()",
      "name": "proposerBondPct",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCrossDomainAdmin(uint256,address,uint256,uint256,uint256,uint256)",
      "name": "setCrossDomainAdmin",
      "description": "Set new contract as the admin address in the L2 Deposit contract. Only callable by the current owner.msg.value must equal to l1CallValue.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "L2 network ID where Deposit contract is deployed.",
          "recommendedTypes": []
        },
        {
          "name": "admin",
          "description": "New admin address to set on L2.",
          "recommendedTypes": []
        },
        {
          "name": "l1CallValue",
          "description": "Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies depending on the L2 network that this contract sends a message to.",
          "recommendedTypes": []
        },
        {
          "name": "l2Gas",
          "description": "Gas limit to set for relayed message on L2.",
          "recommendedTypes": []
        },
        {
          "name": "l2GasPrice",
          "description": "Gas price bid to set for relayed message on L2.",
          "recommendedTypes": []
        },
        {
          "name": "maxSubmissionCost",
          "description": ": Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDepositContract(uint256,address,address)",
      "name": "setDepositContract",
      "description": "Associates the L2 deposit and L1 messenger helper addresses with an L2 network ID. Only callable by the current owner.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "L2 network ID to set addresses for.",
          "recommendedTypes": []
        },
        {
          "name": "depositContract",
          "description": "Address of L2 deposit contract.",
          "recommendedTypes": []
        },
        {
          "name": "messengerContract",
          "description": "Address of L1 helper contract that relays messages to L2.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setEnableDeposits(uint256,address,bool,uint256,uint256,uint256,uint256)",
      "name": "setEnableDeposits",
      "description": "Owner can pause/unpause L2 deposits for a tokens. Only callable by Owner of this contract. Will set the same setting in the L2 Deposit contract via the cross domain messenger.msg.value must equal to l1CallValue.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "L2 network ID where Deposit contract is deployed.",
          "recommendedTypes": []
        },
        {
          "name": "l2Token",
          "description": "address of L2 token to enable/disable deposits for.",
          "recommendedTypes": []
        },
        {
          "name": "depositsEnabled",
          "description": "bool to set if the deposit box should accept/reject deposits.",
          "recommendedTypes": []
        },
        {
          "name": "l1CallValue",
          "description": "Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies depending on the L2 network that this contract sends a message to.",
          "recommendedTypes": []
        },
        {
          "name": "l2Gas",
          "description": "Gas limit to set for relayed message on L2.",
          "recommendedTypes": []
        },
        {
          "name": "l2GasPrice",
          "description": "Gas price bid to set for relayed message on L2.",
          "recommendedTypes": []
        },
        {
          "name": "maxSubmissionCost",
          "description": ": Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setIdentifier(bytes32)",
      "name": "setIdentifier",
      "description": "Sets a price identifier to use for relayed deposits. BridgePools reads the identifier from this contract. Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "_identifier",
          "description": "New identifier to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumBridgingDelay(uint256,uint64,uint256,uint256,uint256,uint256)",
      "name": "setMinimumBridgingDelay",
      "description": "Sets the minimum time between L2-->L1 token withdrawals in the L2 Deposit contract. Only callable by the current owner.msg.value must equal to l1CallValue.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "L2 network ID where Deposit contract is deployed.",
          "recommendedTypes": []
        },
        {
          "name": "minimumBridgingDelay",
          "description": "the new minimum delay.",
          "recommendedTypes": []
        },
        {
          "name": "l1CallValue",
          "description": "Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies depending on the L2 network that this contract sends a message to.",
          "recommendedTypes": []
        },
        {
          "name": "l2Gas",
          "description": "Gas limit to set for relayed message on L2.",
          "recommendedTypes": []
        },
        {
          "name": "l2GasPrice",
          "description": "Gas price bid to set for relayed message on L2.",
          "recommendedTypes": []
        },
        {
          "name": "maxSubmissionCost",
          "description": ": Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOptimisticOracleLiveness(uint32)",
      "name": "setOptimisticOracleLiveness",
      "description": "Sets challenge period for relayed deposits. BridgePools will read this value from this contract. Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "liveness",
          "description": "New OptimisticOracle liveness period to set for relay price requests.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setProposerBondPct(uint64)",
      "name": "setProposerBondPct",
      "description": "Sets challenge period for relayed deposits. BridgePools will read this value from this contract. Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "_proposerBondPct",
          "description": "New OptimisticOracle proposer bond % to set for relay price requests. 1e18 = 100%.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferBridgePoolAdmin(address[],address)",
      "name": "transferBridgePoolAdmin",
      "description": "Enables the current owner to transfer ownership of a set of owned bridge pools to a new owner. Only callable by the current owner.",
      "parameterDecorators": [
        {
          "name": "bridgePools",
          "description": "array of bridge pools to transfer ownership.",
          "recommendedTypes": []
        },
        {
          "name": "newAdmin",
          "description": "new admin contract to set ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistToken(uint256,address,address,address,uint256,uint256,uint256,uint256)",
      "name": "whitelistToken",
      "description": "Privileged account can associate a whitelisted token with its linked token address on L2. The linked L2 token can thereafter be deposited into the Deposit contract on L2 and relayed via the BridgePool contract. msg.value must equal to l1CallValue.This method is also used to to update the address of the bridgePool within a BridgeDepositBox through the re-whitelisting of a previously whitelisted token to update the address of the bridge pool in the deposit box.Only callable by Owner of this contract. Also initiates a cross-chain call to the L2 Deposit contract to whitelist the token mapping.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "L2 network ID where Deposit contract is deployed.",
          "recommendedTypes": []
        },
        {
          "name": "l1Token",
          "description": "Address of L1 token that can be used to relay L2 token deposits.",
          "recommendedTypes": []
        },
        {
          "name": "l2Token",
          "description": "Address of L2 token whose deposits are fulfilled by `l1Token`.",
          "recommendedTypes": []
        },
        {
          "name": "bridgePool",
          "description": "Address of BridgePool which manages liquidity to fulfill L2-->L1 relays.",
          "recommendedTypes": []
        },
        {
          "name": "l1CallValue",
          "description": "Amount of ETH to include in msg.value. Used to pay for L2 fees, but its exact usage varies depending on the L2 network that this contract sends a message to.",
          "recommendedTypes": []
        },
        {
          "name": "l2Gas",
          "description": "Gas limit to set for relayed message on L2.",
          "recommendedTypes": []
        },
        {
          "name": "l2GasPrice",
          "description": "Gas price bid to set for relayed message on L2.",
          "recommendedTypes": []
        },
        {
          "name": "maxSubmissionCost",
          "description": ": Arbitrum only: fee deducted from L2 sender's balance to pay for L2 gas.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistedTokens(address,uint256)",
      "name": "whitelistedTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "l1Token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "chainId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "l2Token",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "bridgePool",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}