{
  "schema": "../schema.json",
  "tags": [
    "swaps",
    "staking",
    "uniswap"
  ],
  "name": "UniswapV3Staker",
  "description": "Uniswap V3 canonical staking interface.",
  "eventDecorators": [
    {
      "signature": "DepositTransferred(uint256,address,address)",
      "name": "DepositTransferred",
      "description": "Emitted when ownership of a deposit changes.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "IncentiveCreated(address,address,uint256,uint256,address,uint256)",
      "name": "IncentiveCreated",
      "description": "Event emitted when a liquidity mining incentive has been created.",
      "parameterDecorators": [
        {
          "name": "rewardToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "endTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "refundee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "IncentiveEnded(bytes32,uint256)",
      "name": "IncentiveEnded",
      "description": "Event that can be emitted when a liquidity mining incentive has ended.",
      "parameterDecorators": [
        {
          "name": "incentiveId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "refund",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RewardClaimed(address,uint256)",
      "name": "RewardClaimed",
      "description": "Event emitted when a reward token has been claimed.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "reward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenStaked(uint256,bytes32,uint128)",
      "name": "TokenStaked",
      "description": "Event emitted when a Uniswap V3 LP token has been staked.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "incentiveId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenUnstaked(uint256,bytes32)",
      "name": "TokenUnstaked",
      "description": "Event emitted when a Uniswap V3 LP token has been unstaked.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "incentiveId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "claimReward(address,address,uint256)",
      "name": "claimReward",
      "description": "Transfers `amountRequested` of accrued `rewardToken` rewards from the contract to the recipient `to`.",
      "parameterDecorators": [
        {
          "name": "rewardToken",
          "description": "The token being distributed as a reward.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The address where claimed rewards will be sent to.",
          "recommendedTypes": []
        },
        {
          "name": "amountRequested",
          "description": "The amount of reward tokens to claim. Claims entire reward amount if set to 0.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "reward",
          "description": "The amount of reward tokens claimed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createIncentive(tuple(address,address,uint256,uint256,address),uint256)",
      "name": "createIncentive",
      "description": "Creates a new liquidity mining incentive program.",
      "parameterDecorators": [
        {
          "name": "key",
          "description": "Details of the incentive to create.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rewardToken",
              "description": "",
              "type": "address"
            },
            {
              "name": "pool",
              "description": "",
              "type": "address"
            },
            {
              "name": "startTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "endTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "refundee",
              "description": "",
              "type": "address"
            }
          ]
        },
        {
          "name": "reward",
          "description": "The amount of reward tokens to be distributed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposits(uint256)",
      "name": "deposits",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "numberOfStakes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        },
        {
          "name": "tickLower",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int24"
        },
        {
          "name": "tickUpper",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int24"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "endIncentive(tuple(address,address,uint256,uint256,address))",
      "name": "endIncentive",
      "description": "Ends an incentive after the incentive end time has passed and all stakes have been withdrawn.",
      "parameterDecorators": [
        {
          "name": "key",
          "description": "Details of the incentive to end.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rewardToken",
              "description": "",
              "type": "address"
            },
            {
              "name": "pool",
              "description": "",
              "type": "address"
            },
            {
              "name": "startTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "endTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "refundee",
              "description": "",
              "type": "address"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "refund",
          "description": "The remaining reward tokens when the incentive is ended.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "factory()",
      "name": "factory",
      "description": "The Uniswap V3 Factory.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewardInfo(tuple(address,address,uint256,uint256,address),uint256)",
      "name": "getRewardInfo",
      "description": "Calculates the reward amount that will be received for the given stake.",
      "parameterDecorators": [
        {
          "name": "key",
          "description": "The key of the incentive.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rewardToken",
              "description": "",
              "type": "address"
            },
            {
              "name": "pool",
              "description": "",
              "type": "address"
            },
            {
              "name": "startTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "endTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "refundee",
              "description": "",
              "type": "address"
            }
          ]
        },
        {
          "name": "tokenId",
          "description": "The ID of the token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "reward",
          "description": "The reward accrued to the NFT for the given incentive thus far.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "secondsInsideX128",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint160"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "incentives(bytes32)",
      "name": "incentives",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalRewardUnclaimed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "totalSecondsClaimedX128",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint160"
        },
        {
          "name": "numberOfStakes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxIncentiveDuration()",
      "name": "maxIncentiveDuration",
      "description": "The max duration of an incentive in seconds.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxIncentiveStartLeadTime()",
      "name": "maxIncentiveStartLeadTime",
      "description": "The max amount of seconds into the future the incentive startTime can be set.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "multicall(bytes[])",
      "name": "multicall",
      "description": "Call multiple functions in the current contract and return the data from all of them if they all succeed. The `msg.value` should not be trusted for any method callable from multicall.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "The encoded function data for each of the calls to make to this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "The results from each of the calls passed in via data.",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nonfungiblePositionManager()",
      "name": "nonfungiblePositionManager",
      "description": "The nonfungible position manager with which this staking contract is compatible.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onERC721Received(address,address,uint256,bytes)",
      "name": "onERC721Received",
      "description": "Upon receiving a Uniswap V3 ERC721, creates the token deposit setting owner to `from`. Also stakes token in one or more incentives if properly formatted `data` has a length > 0. Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewards(address,address)",
      "name": "rewards",
      "description": "Returns amounts of reward tokens owed to a given address according to the last time all stakes were updated.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakeToken(tuple(address,address,uint256,uint256,address),uint256)",
      "name": "stakeToken",
      "description": "Stakes a Uniswap V3 LP token.",
      "parameterDecorators": [
        {
          "name": "key",
          "description": "The key of the incentive for which to stake the NFT.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rewardToken",
              "description": "",
              "type": "address"
            },
            {
              "name": "pool",
              "description": "",
              "type": "address"
            },
            {
              "name": "startTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "endTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "refundee",
              "description": "",
              "type": "address"
            }
          ]
        },
        {
          "name": "tokenId",
          "description": "The ID of the token to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakes(uint256,bytes32)",
      "name": "stakes",
      "description": "Returns information about a staked liquidity NFT.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "The ID of the staked token.",
          "recommendedTypes": []
        },
        {
          "name": "incentiveId",
          "description": "The ID of the incentive for which the token is staked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "secondsPerLiquidityInsideInitialX128",
          "description": "secondsPerLiquidity represented as a UQ32.128.",
          "recommendedTypes": [],
          "solidityType": "uint160"
        },
        {
          "name": "liquidity",
          "description": "The amount of liquidity in the NFT as of the last time the rewards were computed.",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferDeposit(uint256,address)",
      "name": "transferDeposit",
      "description": "Transfers ownership of a deposit from the sender to the given recipient.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "The ID of the token (and the deposit) to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The new owner of the deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unstakeToken(tuple(address,address,uint256,uint256,address),uint256)",
      "name": "unstakeToken",
      "description": "Unstakes a Uniswap V3 LP token.",
      "parameterDecorators": [
        {
          "name": "key",
          "description": "The key of the incentive for which to unstake the NFT.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rewardToken",
              "description": "",
              "type": "address"
            },
            {
              "name": "pool",
              "description": "",
              "type": "address"
            },
            {
              "name": "startTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "endTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "refundee",
              "description": "",
              "type": "address"
            }
          ]
        },
        {
          "name": "tokenId",
          "description": "The ID of the token to unstake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawToken(uint256,address,bytes)",
      "name": "withdrawToken",
      "description": "Withdraws a Uniswap V3 LP token `tokenId` from this contract to the recipient `to`.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "The unique identifier of an Uniswap V3 LP token.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The address where the LP token will be sent.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "An optional data array that will be passed along to the `to` address via the NFT safeTransferFrom.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}