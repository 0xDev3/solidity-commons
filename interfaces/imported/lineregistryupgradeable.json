{
  "schema": "../schema.json",
  "tags": [],
  "name": "LineRegistryUpgradeable",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "can(bytes32,bytes32)",
      "name": "can",
      "description": "Get service provider's permissions on an industry.",
      "parameterDecorators": [
        {
          "name": "line",
          "description": "of industry to check permissions on.",
          "recommendedTypes": []
        },
        {
          "name": "which",
          "description": "service provider's permissions to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if which service provider is authorised on line industry.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cut(bytes32)",
      "name": "cut",
      "description": "Protocol fee levied on industrial line.",
      "parameterDecorators": [
        {
          "name": "line",
          "description": "of industry for protocol fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "protocol fee levied in to 27 decimal places.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deny(address)",
      "name": "deny",
      "description": "",
      "parameterDecorators": [
        {
          "name": "usr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deregister(bytes32,bytes32)",
      "name": "deregister",
      "description": "Deregister a service provider for an industry. Irrespective, all stubs issued will remain valid per their termsdoes not check if a line exists beforehand!.",
      "parameterDecorators": [
        {
          "name": "line",
          "description": "of industry to deregister from.",
          "recommendedTypes": []
        },
        {
          "name": "which",
          "description": "service provider to deregitser.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exists(bytes32)",
      "name": "exists",
      "description": "Whether an industrial line exists.",
      "parameterDecorators": [
        {
          "name": "line",
          "description": "of industry to check the existance of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the line of industry exists in videre.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "file(bytes32,bytes32,uint256)",
      "name": "file",
      "description": "set a specific uint parameter on the registry.",
      "parameterDecorators": [
        {
          "name": "what",
          "description": "data to set.",
          "recommendedTypes": []
        },
        {
          "name": "line",
          "description": "on which to set uint data (option depending on `what`).",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "uint to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "file(bytes32,bytes32,address)",
      "name": "file",
      "description": "set a specific address parameter on the registry.",
      "parameterDecorators": [
        {
          "name": "what",
          "description": "data to set.",
          "recommendedTypes": []
        },
        {
          "name": "line",
          "description": "on which to set address data (optional depending on `what`).",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "address to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hope(bytes32,bytes32)",
      "name": "hope",
      "description": "Root method to add a service provider's authorisation.",
      "parameterDecorators": [
        {
          "name": "line",
          "description": "of industry to hope privileges on.",
          "recommendedTypes": []
        },
        {
          "name": "which",
          "description": "service provider to hope.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lines(bytes32)",
      "name": "lines",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "terms",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "cut",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nope(bytes32,bytes32)",
      "name": "nope",
      "description": "Root method to remove a service provider's authorisation.",
      "parameterDecorators": [
        {
          "name": "line",
          "description": "of industry to deny privileges on.",
          "recommendedTypes": []
        },
        {
          "name": "which",
          "description": "service provider to deny.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "postUpgrade(address,uint256)",
      "name": "postUpgrade",
      "description": "",
      "parameterDecorators": [
        {
          "name": "registry",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_selfRegister",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "register(bytes32,bytes32)",
      "name": "register",
      "description": "Register a service provider for an industry. only allowed by authorised admins on service provider.",
      "parameterDecorators": [
        {
          "name": "line",
          "description": "of industry to register on.",
          "recommendedTypes": []
        },
        {
          "name": "which",
          "description": "service provider to register.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rely(address)",
      "name": "rely",
      "description": "",
      "parameterDecorators": [
        {
          "name": "usr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "serviceProviderRegistry()",
      "name": "serviceProviderRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "terms(bytes32)",
      "name": "terms",
      "description": "Pointer to the industry-specific terms contract.",
      "parameterDecorators": [
        {
          "name": "line",
          "description": "of industry for which contract to get.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "upgrader()",
      "name": "upgrader",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "wards(address)",
      "name": "wards",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}