{"schema":"../schema.json","tags":["swaps"],"name":"Zapper_Swap_General_V1_3","description":"","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"cToken(address)","name":"cToken","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"toggleContractActive()","name":"toggleContractActive","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unwrap(address,address,uint256,uint256)","name":"unwrap","description":"","parameterDecorators":[{"name":"_toWhomToIssue","description":"","recommendedTypes":[]},{"name":"_FromTokenContractAddress","description":"","recommendedTypes":[]},{"name":"tokens2Trade","description":"","recommendedTypes":[]},{"name":"minTokens","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"tokensUnwrapped","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"toToken","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":false},{"signature":"wrap(address,address,address,uint256,uint256,uint256)","name":"wrap","description":"","parameterDecorators":[{"name":"_toWhomToIssue","description":"","recommendedTypes":[]},{"name":"_FromTokenContractAddress","description":"","recommendedTypes":[]},{"name":"_ToTokenContractAddress","description":"","recommendedTypes":[]},{"name":"tokens2Trade","description":"","recommendedTypes":[]},{"name":"minTokens","description":"","recommendedTypes":[]},{"name":"_wrapInto","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"tokensWrapped","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"aToken(address)","name":"aToken","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"inCaseTokengetsStuck(address)","name":"inCaseTokengetsStuck","description":"","parameterDecorators":[{"name":"_TokenAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addAToken(address[])","name":"addAToken","description":"This function adds a token addresses to a mapping.","parameterDecorators":[{"name":"_aToken","description":"token address of a-token for given underlying asset.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"stopped()","name":"stopped","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"MultiExchangeSwap(address,address[],uint256,uint256,uint8[],uint8[],address[])","name":"MultiExchangeSwap","description":"This function is used swap tokens using multiple exchanges.","parameterDecorators":[{"name":"toWhomToIssue","description":"address to which tokens should be sent after swap.","recommendedTypes":[]},{"name":"path","description":"token addresses indicating the conversion path.","recommendedTypes":[]},{"name":"amountIn","description":"amount of tokens to swap.","recommendedTypes":[]},{"name":"minTokenOut","description":"min amount of expected tokens.","recommendedTypes":[]},{"name":"starts","description":"indicates the index of path array for each swap.","recommendedTypes":[]},{"name":"withPool","description":"indicates the exchange and its sequence we want to swap from.","recommendedTypes":[]},{"name":"poolData","description":"pool or token addresses needed for swapping tokens according to the exchange.","recommendedTypes":[]}],"returnDecorators":[{"name":"tokensBought","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"addCToken(address[])","name":"addCToken","description":"This function adds c token addresses to a mapping. For cETH token, mapping is already added in constructor.","parameterDecorators":[{"name":"_cToken","description":"token address of c-token for given underlying asset.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"yToken(address)","name":"yToken","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"addYToken(address[])","name":"addYToken","description":"This function adds y token addresses to a mapping.","parameterDecorators":[{"name":"_yToken","description":"token address of y-token.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unwrapWeth(address,address,uint256,uint256)","name":"unwrapWeth","description":"","parameterDecorators":[{"name":"_toWhomToIssue","description":"","recommendedTypes":[]},{"name":"_FromTokenContractAddress","description":"","recommendedTypes":[]},{"name":"tokens2Trade","description":"","recommendedTypes":[]},{"name":"minTokens","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"tokensUnwrapped","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"toToken","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}