{"schema":"../schema.json","tags":["vaults"],"name":"VaultsCore","description":"","eventDecorators":[{"signature":"Borrowed(uint256,uint256,address)","name":"Borrowed","description":"","parameterDecorators":[{"name":"access","description":"TRUE if the Watcher was given permissions, FALSE if permissions were removed.","recommendedTypes":[],"indexed":true},{"name":"domain","description":"the remote domain of the Home contract for the Replica.","recommendedTypes":[],"indexed":false},{"name":"watcher","description":"the address of the Watcher.","recommendedTypes":[],"indexed":true}]},{"signature":"Deposited(uint256,uint256,address)","name":"Deposited","description":"","parameterDecorators":[{"name":"access","description":"TRUE if the Watcher was given permissions, FALSE if permissions were removed.","recommendedTypes":[],"indexed":true},{"name":"domain","description":"the remote domain of the Home contract for the Replica.","recommendedTypes":[],"indexed":false},{"name":"watcher","description":"the address of the Watcher.","recommendedTypes":[],"indexed":true}]},{"signature":"InsurancePaid(uint256,uint256,address)","name":"InsurancePaid","description":"","parameterDecorators":[{"name":"access","description":"TRUE if the Watcher was given permissions, FALSE if permissions were removed.","recommendedTypes":[],"indexed":true},{"name":"domain","description":"the remote domain of the Home contract for the Replica.","recommendedTypes":[],"indexed":false},{"name":"watcher","description":"the address of the Watcher.","recommendedTypes":[],"indexed":true}]},{"signature":"Liquidated(uint256,uint256,uint256,address,address)","name":"Liquidated","description":"","parameterDecorators":[{"name":"vaultId","description":"","recommendedTypes":[],"indexed":true},{"name":"debtRepaid","description":"","recommendedTypes":[],"indexed":false},{"name":"collateralLiquidated","description":"","recommendedTypes":[],"indexed":false},{"name":"owner","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Opened(uint256,address,address)","name":"Opened","description":"","parameterDecorators":[{"name":"access","description":"TRUE if the Watcher was given permissions, FALSE if permissions were removed.","recommendedTypes":[],"indexed":true},{"name":"domain","description":"the remote domain of the Home contract for the Replica.","recommendedTypes":[],"indexed":true},{"name":"watcher","description":"the address of the Watcher.","recommendedTypes":[],"indexed":true}]},{"signature":"Repaid(uint256,uint256,address)","name":"Repaid","description":"","parameterDecorators":[{"name":"access","description":"TRUE if the Watcher was given permissions, FALSE if permissions were removed.","recommendedTypes":[],"indexed":true},{"name":"domain","description":"the remote domain of the Home contract for the Replica.","recommendedTypes":[],"indexed":false},{"name":"watcher","description":"the address of the Watcher.","recommendedTypes":[],"indexed":true}]},{"signature":"Withdrawn(uint256,uint256,address)","name":"Withdrawn","description":"","parameterDecorators":[{"name":"access","description":"TRUE if the Watcher was given permissions, FALSE if permissions were removed.","recommendedTypes":[],"indexed":true},{"name":"domain","description":"the remote domain of the Home contract for the Replica.","recommendedTypes":[],"indexed":false},{"name":"watcher","description":"the address of the Watcher.","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"WETH()","name":"WETH","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"a()","name":"a","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"acceptUpgrade(address)","name":"acceptUpgrade","description":"","parameterDecorators":[{"name":"_oldVaultsCore","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"borrow(uint256,uint256)","name":"borrow","description":"Borrow new PAR tokens from a vault. Only the owner of a vault can borrow from it. `borrow()` will update the outstanding vault debt to the current time before attempting the withdrawal. `borrow()` will fail if it would bring the vault below the minimum collateralization treshold.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault from which to borrow.","recommendedTypes":[]},{"name":"_amount","description":"the amount of borrowed PAR tokens in WEI.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"cumulativeRates(address)","name":"cumulativeRates","description":"Returns the cumulativeRate of a collateral type. This function exists for backwards compatibility with the VaultsDataProvider.","parameterDecorators":[{"name":"_collateralType","description":"the address of the collateral type.*.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"debtNotifier()","name":"debtNotifier","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"deposit(address,uint256)","name":"deposit","description":"Deposit an ERC20 token into the vault of the msg.sender as collateral. A new vault is created if no vault exists for the `msg.sender` with the specified collateral type. this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.","parameterDecorators":[{"name":"_collateralType","description":"the address of the collateral type to be deposited.","recommendedTypes":[]},{"name":"_amount","description":"the amount of tokens to be deposited in WEI.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"depositAndBorrow(address,uint256,uint256)","name":"depositAndBorrow","description":"Deposit an ERC20 token into the vault of the msg.sender as collateral and borrows the specified amount of tokens in WEI. see deposit() and borrow().","parameterDecorators":[{"name":"_collateralType","description":"the address of the collateral type to be deposited.","recommendedTypes":[]},{"name":"_depositAmount","description":"the amount of tokens to be deposited in WEI.","recommendedTypes":[]},{"name":"_borrowAmount","description":"the amount of borrowed StableX tokens in WEI.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"depositByVaultId(uint256,uint256)","name":"depositByVaultId","description":"Deposit an ERC20 token into the specified vault as collateral. this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.","parameterDecorators":[{"name":"_vaultId","description":"the address of the collateral type to be deposited.","recommendedTypes":[]},{"name":"_amount","description":"the amount of tokens to be deposited in WEI.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"depositETH()","name":"depositETH","description":"Wraps ETH and deposits WETH into the vault of the msg.sender as collateral. A new vault is created if no WETH vault exists*.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"depositETHAndBorrow(uint256)","name":"depositETHAndBorrow","description":"Wraps ETH and deposits WETH into the vault of the msg.sender as collateral and borrows the specified amount of tokens in WEI. see depositETH() and borrow().","parameterDecorators":[{"name":"_borrowAmount","description":"the amount of borrowed StableX tokens in WEI.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"depositETHByVaultId(uint256)","name":"depositETHByVaultId","description":"Wraps ETH and deposits WETH into the specified vault as collateral. this function uses `transferFrom()` and requires pre-approval via `approve()` on the ERC20.","parameterDecorators":[{"name":"_vaultId","description":"the address of the collateral type to be deposited*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"liquidate(uint256)","name":"liquidate","description":"Liquidate a vault that is below the liquidation treshold by repaying its outstanding debt. `liquidate()` will update the outstanding vault debt to the current time and pay a `liquidationBonus` to the liquidator. `liquidate()` can be called by anyone.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault to be liquidated.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"liquidatePartial(uint256,uint256)","name":"liquidatePartial","description":"Liquidate a vault partially that is below the liquidation treshold by repaying part of its outstanding debt. `liquidatePartial()` will update the outstanding vault debt to the current time and pay a `liquidationBonus` to the liquidator. A LiquidationFee will be applied to the borrower during the liquidation. This means that the change in outstanding debt can be smaller than the repaid amount. `liquidatePartial()` can be called by anyone.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault to be liquidated.","recommendedTypes":[]},{"name":"_amount","description":"the amount of debt+liquidationFee to repay.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"repay(uint256,uint256)","name":"repay","description":"Repay an outstanding PAR balance to a vault. `repay()` will update the outstanding vault debt to the current time.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault for which to repay the outstanding debt balance.","recommendedTypes":[]},{"name":"_amount","description":"the amount of PAR tokens in WEI to be repaid.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"repayAll(uint256)","name":"repayAll","description":"Convenience function to repay all debt of a vault. `repayAll()` will update the outstanding vault debt to the current time.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault for which to repay the debt.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDebtNotifier(address)","name":"setDebtNotifier","description":"Configure the debt notifier.","parameterDecorators":[{"name":"_debtNotifier","description":"the new DebtNotifier module address.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"state()","name":"state","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"upgrade(address)","name":"upgrade","description":"","parameterDecorators":[{"name":"_newVaultsCore","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw(uint256,uint256)","name":"withdraw","description":"Withdraws ERC20 tokens from a vault. Only the owner of a vault can withdraw collateral from it. `withdraw()` will fail if it would bring the vault below the minimum collateralization treshold.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault from which to withdraw the collateral.","recommendedTypes":[]},{"name":"_amount","description":"the amount of ERC20 tokens to be withdrawn in WEI.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawETH(uint256,uint256)","name":"withdrawETH","description":"Withdraws ETH from a WETH vault. Only the owner of a vault can withdraw collateral from it. `withdraw()` will fail if it would bring the vault below the minimum collateralization treshold.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault from which to withdraw the collateral.","recommendedTypes":[]},{"name":"_amount","description":"the amount of ETH to be withdrawn in WEI.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}