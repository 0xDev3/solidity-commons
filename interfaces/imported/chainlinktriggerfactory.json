{
  "schema": "../schema.json",
  "tags": [
    "oracles",
    "chainlink"
  ],
  "name": "ChainlinkTriggerFactory",
  "description": "Deploys Chainlink triggers that ensure two oracles stay within the given price tolerance. It also supports creating a fixed price oracle to use as the truth oracle, useful for e.g. ensuring stablecoins maintain their peg.",
  "eventDecorators": [
    {
      "signature": "TriggerDeployed(address,bytes32,address,address,uint256,uint256,uint256)",
      "name": "TriggerDeployed",
      "description": "event for token purchase logging. Emitted when short or short collateral is adjusted.",
      "parameterDecorators": [
        {
          "name": "trigger",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "triggerConfigId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "truthOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "trackingOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "priceTolerance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "truthFrequencyTolerance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "trackingFrequencyTolerance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "computeFixedPriceAggregatorAddress(int256,uint8)",
      "name": "computeFixedPriceAggregatorAddress",
      "description": "Call this function to compute the address that a FixedPriceAggregator contract would be deployed to with the provided args.",
      "parameterDecorators": [
        {
          "name": "_price",
          "description": "The fixed price, in the decimals indicated, returned by the deployed oracle.",
          "recommendedTypes": []
        },
        {
          "name": "_decimals",
          "description": "The number of decimals of the fixed price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "computeTriggerAddress(address,address,uint256,uint256,uint256,uint256)",
      "name": "computeTriggerAddress",
      "description": "Call this function to determine the address at which a trigger with the supplied configuration would be deployed.",
      "parameterDecorators": [
        {
          "name": "_truthOracle",
          "description": "The address of the desired truthOracle for the trigger.",
          "recommendedTypes": []
        },
        {
          "name": "_trackingOracle",
          "description": "The address of the desired trackingOracle for the trigger.",
          "recommendedTypes": []
        },
        {
          "name": "_priceTolerance",
          "description": "The priceTolerance that the deployed trigger would have. See ChainlinkTrigger.priceTolerance() for more information.",
          "recommendedTypes": []
        },
        {
          "name": "_truthFrequencyTolerance",
          "description": "The frequency tolerance that the deployed trigger would have for the truth oracle. See ChainlinkTrigger.truthFrequencyTolerance() for more information.",
          "recommendedTypes": []
        },
        {
          "name": "_trackingFrequencyTolerance",
          "description": "The frequency tolerance that the deployed trigger would have for the tracking oracle. See ChainlinkTrigger.trackingFrequencyTolerance() for more information.",
          "recommendedTypes": []
        },
        {
          "name": "_triggerCount",
          "description": "The zero-indexed ordinal of the trigger with respect to its configuration, e.g. if this were to be the fifth trigger deployed with these configs, then _triggerCount should be 4.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deployFixedPriceAggregator(int256,uint8)",
      "name": "deployFixedPriceAggregator",
      "description": "Call this function to deploy a FixedPriceAggregator contract, which behaves like a Chainlink oracle except that it always returns the same price. If the specified contract is already deployed, we return it's address instead of reverting to avoid duplicate aggregators.",
      "parameterDecorators": [
        {
          "name": "_price",
          "description": "The fixed price, in the decimals indicated, returned by the deployed oracle.",
          "recommendedTypes": []
        },
        {
          "name": "_decimals",
          "description": "The number of decimals of the fixed price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deployTrigger(int256,uint8,address,uint256,uint256)",
      "name": "deployTrigger",
      "description": "Call this function to deploy a ChainlinkTrigger with a FixedPriceAggregator as its truthOracle. This is useful if you were building a market in which you wanted to track whether or not a stablecoin asset had become depegged.",
      "parameterDecorators": [
        {
          "name": "_price",
          "description": "The fixed price, or peg, with which to compare the trackingOracle price.",
          "recommendedTypes": []
        },
        {
          "name": "_decimals",
          "description": "The number of decimals of the fixed price. This should match the number of decimals used by the desired _trackingOracle.",
          "recommendedTypes": []
        },
        {
          "name": "_trackingOracle",
          "description": "The address of the desired trackingOracle for the trigger.",
          "recommendedTypes": []
        },
        {
          "name": "_priceTolerance",
          "description": "The priceTolerance that the deployed trigger will have. See ChainlinkTrigger.priceTolerance() for more information.",
          "recommendedTypes": []
        },
        {
          "name": "_frequencyTolerance",
          "description": "The frequency tolerance that the deployed trigger will have for the tracking oracle. See ChainlinkTrigger.trackingFrequencyTolerance() for more information.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_trigger",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deployTrigger(address,address,uint256,uint256,uint256)",
      "name": "deployTrigger",
      "description": "Call this function to deploy a ChainlinkTrigger.",
      "parameterDecorators": [
        {
          "name": "_truthOracle",
          "description": "The address of the desired truthOracle for the trigger.",
          "recommendedTypes": []
        },
        {
          "name": "_trackingOracle",
          "description": "The address of the desired trackingOracle for the trigger.",
          "recommendedTypes": []
        },
        {
          "name": "_priceTolerance",
          "description": "The priceTolerance that the deployed trigger will have. See ChainlinkTrigger.priceTolerance() for more information.",
          "recommendedTypes": []
        },
        {
          "name": "_truthFrequencyTolerance",
          "description": "The frequency tolerance that the deployed trigger will have for the truth oracle. See ChainlinkTrigger.truthFrequencyTolerance() for more information.",
          "recommendedTypes": []
        },
        {
          "name": "_trackingFrequencyTolerance",
          "description": "The frequency tolerance that the deployed trigger will have for the tracking oracle. See ChainlinkTrigger.trackingFrequencyTolerance() for more information.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_trigger",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "findAvailableTrigger(address,address,uint256,uint256,uint256)",
      "name": "findAvailableTrigger",
      "description": "Call this function to find triggers with the specified configurations that can be used for new markets in Sets. If this function returns the zero address, that means that an available trigger was not found with the supplied configuration. Use `deployTrigger` to deploy a new one.",
      "parameterDecorators": [
        {
          "name": "_truthOracle",
          "description": "The address of the desired truthOracle for the trigger.",
          "recommendedTypes": []
        },
        {
          "name": "_trackingOracle",
          "description": "The address of the desired trackingOracle for the trigger.",
          "recommendedTypes": []
        },
        {
          "name": "_priceTolerance",
          "description": "The priceTolerance that the deployed trigger will have. See ChainlinkTrigger.priceTolerance() for more information.",
          "recommendedTypes": []
        },
        {
          "name": "_truthFrequencyTolerance",
          "description": "The frequency tolerance that the deployed trigger will have for the truth oracle. See ChainlinkTrigger.truthFrequencyTolerance() for more information.",
          "recommendedTypes": []
        },
        {
          "name": "_trackingFrequencyTolerance",
          "description": "The frequency tolerance that the deployed trigger will have for the tracking oracle. See ChainlinkTrigger.trackingFrequencyTolerance() for more information.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "manager()",
      "name": "manager",
      "description": "The manager of the Cozy protocol.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "triggerConfigId(address,address,uint256,uint256,uint256)",
      "name": "triggerConfigId",
      "description": "Call this function to determine the identifier of the supplied trigger configuration. This identifier is used both to track the number of triggers deployed with this configuration (see `triggerCount`) and is emitted at the time triggers with that configuration are deployed.",
      "parameterDecorators": [
        {
          "name": "_truthOracle",
          "description": "The address of the desired truthOracle for the trigger.",
          "recommendedTypes": []
        },
        {
          "name": "_trackingOracle",
          "description": "The address of the desired trackingOracle for the trigger.",
          "recommendedTypes": []
        },
        {
          "name": "_priceTolerance",
          "description": "The priceTolerance that the deployed trigger will have. See ChainlinkTrigger.priceTolerance() for more information.",
          "recommendedTypes": []
        },
        {
          "name": "_truthFrequencyTolerance",
          "description": "The frequency tolerance that the deployed trigger will have for the truth oracle. See ChainlinkTrigger.truthFrequencyTolerance() for more information.",
          "recommendedTypes": []
        },
        {
          "name": "_trackingFrequencyTolerance",
          "description": "The frequency tolerance that the deployed trigger will have for the tracking oracle. See ChainlinkTrigger.trackingFrequencyTolerance() for more information.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "triggerCount(bytes32)",
      "name": "triggerCount",
      "description": "Maps the triggerConfigId to the number of triggers created with those configs.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}