{
  "schema": "../schema.json",
  "tags": [],
  "name": "RiseRebaser",
  "description": "",
  "eventDecorators": [
    {
      "signature": "NewDeviationThreshold(uint256,uint256)",
      "name": "NewDeviationThreshold",
      "description": "Event for token purchase logging. Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "oldDeviationThreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newDeviationThreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "RiseAddress()",
      "name": "RiseAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deviationThreshold()",
      "name": "deviationThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "epoch()",
      "name": "epoch",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPrice()",
      "name": "getPrice",
      "description": "Use Circuit Breakers (Prevents some un godly amount of XETHG to be minted) 1.Rise Price Marker 2.Set Rebase 20% treashold 3.Calculate Uni Pair Price 4.Target Price + Circuit Breaker 5.Accepted Riseprice Price For Rebase 6.Is Uniswap Price Over Circuit Breaker? 7.Yes, Use Rebase RiseCircuit Breaker Price 8.No, Use Uniswap Price.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "gov()",
      "name": "gov",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "inRebaseWindow()",
      "name": "inRebaseWindow",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastRebaseTimestampSec()",
      "name": "lastRebaseTimestampSec",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minRebaseTimeIntervalSec()",
      "name": "minRebaseTimeIntervalSec",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rebase()",
      "name": "rebase",
      "description": "Initiates a new rebase operation, provided the minimum time period has elapsed. The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate and targetRate is 1e18.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rebaseDelay()",
      "name": "rebaseDelay",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rebaseLag()",
      "name": "rebaseLag",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rebaseWindowLengthSec()",
      "name": "rebaseWindowLengthSec",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rebaseWindowOffsetSec()",
      "name": "rebaseWindowOffsetSec",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setDeviationThreshold(uint256)",
      "name": "setDeviationThreshold",
      "description": "",
      "parameterDecorators": [
        {
          "name": "deviationThreshold_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRebaseLag(uint256)",
      "name": "setRebaseLag",
      "description": "Sets the rebase lag parameter. It is used to dampen the applied supply adjustment by 1 / rebaseLag If the rebase lag R, equals 1, the smallest value for R, then the full supply correction is applied on each rebase cycle. If it is greater than 1, then a correction of 1/R of is applied on each rebase.",
      "parameterDecorators": [
        {
          "name": "rebaseLag_",
          "description": "The new rebase lag parameter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRebaseTimingParameters(uint256,uint256,uint256)",
      "name": "setRebaseTimingParameters",
      "description": "Sets the parameters which control the timing and frequency of rebase operations. a) the minimum time period that must elapse between rebase cycles. b) the rebase window offset parameter. c) the rebase window length parameter.",
      "parameterDecorators": [
        {
          "name": "minRebaseTimeIntervalSec_",
          "description": "More than this much time must pass between rebase operations, in seconds.",
          "recommendedTypes": []
        },
        {
          "name": "rebaseWindowOffsetSec_",
          "description": "The number of seconds from the beginning of the rebase interval, where the rebase window begins.",
          "recommendedTypes": []
        },
        {
          "name": "rebaseWindowLengthSec_",
          "description": "The length of the rebase window in seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTargetRate(uint256)",
      "name": "setTargetRate",
      "description": "Sets the targetRate parameter.",
      "parameterDecorators": [
        {
          "name": "targetRate_",
          "description": "The new target rate parameter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTimesXvalue(uint256)",
      "name": "setTimesXvalue",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_xValue",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWhitelistedFrom(address,bool)",
      "name": "setWhitelistedFrom",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_whitelisted",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "targetRate()",
      "name": "targetRate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "uniswap_rise_eth_pair()",
      "name": "uniswap_rise_eth_pair",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "whitelistFrom(address)",
      "name": "whitelistFrom",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "xValue()",
      "name": "xValue",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}