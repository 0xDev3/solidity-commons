{
  "schema": "../schema.json",
  "tags": [
    "locking"
  ],
  "name": "BlockchainParameters",
  "description": "Contract for storing blockchain parameters that can be set by governance.",
  "eventDecorators": [
    {
      "signature": "BlockGasLimitSet(uint256)",
      "name": "BlockGasLimitSet",
      "description": "Emitted when tokens are redeemed.",
      "parameterDecorators": [
        {
          "name": "limit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "IntrinsicGasForAlternativeFeeCurrencySet(uint256)",
      "name": "IntrinsicGasForAlternativeFeeCurrencySet",
      "description": "Emitted when tokens are redeemed.",
      "parameterDecorators": [
        {
          "name": "gas",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MinimumClientVersionSet(uint256,uint256,uint256)",
      "name": "MinimumClientVersionSet",
      "description": "Emitted when tokens are redeemed.",
      "parameterDecorators": [
        {
          "name": "major",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "minor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "patch",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when tokens are redeemed.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UptimeLookbackWindowSet(uint256,uint256)",
      "name": "UptimeLookbackWindowSet",
      "description": "Emitted when tokens are redeemed.",
      "parameterDecorators": [
        {
          "name": "window",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "activationEpoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "blockGasLimit()",
      "name": "blockGasLimit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkProofOfPossession(address,bytes,bytes)",
      "name": "checkProofOfPossession",
      "description": "Checks a BLS proof of possession.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "The address signed by the BLS key to generate the proof of possession.",
          "recommendedTypes": []
        },
        {
          "name": "blsKey",
          "description": "The BLS public key that the validator is using for consensus, should pass proof of possession. 48 bytes.",
          "recommendedTypes": []
        },
        {
          "name": "blsPop",
          "description": "The BLS public key proof-of-possession, which consists of a signature on the account address. 96 bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "fractionMulExp",
      "description": "calculate a * b^x for fractions a, b to `decimals` precision.",
      "parameterDecorators": [
        {
          "name": "aNumerator",
          "description": "Numerator of first fraction.",
          "recommendedTypes": []
        },
        {
          "name": "aDenominator",
          "description": "Denominator of first fraction.",
          "recommendedTypes": []
        },
        {
          "name": "bNumerator",
          "description": "Numerator of exponentiated fraction.",
          "recommendedTypes": []
        },
        {
          "name": "bDenominator",
          "description": "Denominator of exponentiated fraction.",
          "recommendedTypes": []
        },
        {
          "name": "exponent",
          "description": "exponent to raise b to.",
          "recommendedTypes": []
        },
        {
          "name": "_decimals",
          "description": "precision.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBlockNumberFromHeader(bytes)",
      "name": "getBlockNumberFromHeader",
      "description": "Parses block number out of header.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochNumber()",
      "name": "getEpochNumber",
      "description": "Returns the epoch number at a block.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochNumberOfBlock(uint256)",
      "name": "getEpochNumberOfBlock",
      "description": "Returns the epoch number at a block.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number where epoch number is calculated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochSize()",
      "name": "getEpochSize",
      "description": "Returns the current epoch size in blocks.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMinimumClientVersion()",
      "name": "getMinimumClientVersion",
      "description": "Query minimum client version.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "major",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "minor",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "patch",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getParentSealBitmap(uint256)",
      "name": "getParentSealBitmap",
      "description": "Gets the parent seal bitmap from the header at the given block number.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number to retrieve. Must be within 4 epochs of the current number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUptimeLookbackWindow()",
      "name": "getUptimeLookbackWindow",
      "description": "Gets the uptime lookback window.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "lookbackWindow",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVerifiedSealBitmapFromHeader(bytes)",
      "name": "getVerifiedSealBitmapFromHeader",
      "description": "Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header. If the parent hash is not in the blockchain, verification fails.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVersionNumber()",
      "name": "getVersionNumber",
      "description": "Returns the storage, major, minor, and patch version of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hashHeader(bytes)",
      "name": "hashHeader",
      "description": "Computes hash of header.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "initialize",
      "description": "Used in place of the constructor to allow the contract to be upgradable via proxy.",
      "parameterDecorators": [
        {
          "name": "major",
          "description": "Minimum client version that can be used in the chain, major version.",
          "recommendedTypes": []
        },
        {
          "name": "minor",
          "description": "Minimum client version that can be used in the chain, minor version.",
          "recommendedTypes": []
        },
        {
          "name": "patch",
          "description": "Minimum client version that can be used in the chain, patch level.",
          "recommendedTypes": []
        },
        {
          "name": "_gasForNonGoldCurrencies",
          "description": "Intrinsic gas for non-gold gas currencies.",
          "recommendedTypes": []
        },
        {
          "name": "gasLimit",
          "description": "Block gas limit.",
          "recommendedTypes": []
        },
        {
          "name": "lookbackWindow",
          "description": "Lookback window for measuring validator uptime.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "intrinsicGasForAlternativeFeeCurrency()",
      "name": "intrinsicGasForAlternativeFeeCurrency",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minQuorumSize(uint256)",
      "name": "minQuorumSize",
      "description": "Returns the minimum number of required signers for a given block number. Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3)).",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minQuorumSizeInCurrentSet()",
      "name": "minQuorumSizeInCurrentSet",
      "description": "Computes byzantine quorum from current validator set size.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberValidatorsInCurrentSet()",
      "name": "numberValidatorsInCurrentSet",
      "description": "Gets the size of the current elected validator set.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberValidatorsInSet(uint256)",
      "name": "numberValidatorsInSet",
      "description": "Gets the size of the validator set that must sign the given block number.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number to retrieve the validator set from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBlockGasLimit(uint256)",
      "name": "setBlockGasLimit",
      "description": "Sets the block gas limit.",
      "parameterDecorators": [
        {
          "name": "gasLimit",
          "description": "New block gas limit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setIntrinsicGasForAlternativeFeeCurrency(uint256)",
      "name": "setIntrinsicGasForAlternativeFeeCurrency",
      "description": "Sets the intrinsic gas for non-gold gas currencies.",
      "parameterDecorators": [
        {
          "name": "gas",
          "description": "Intrinsic gas for non-gold gas currencies.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumClientVersion(uint256,uint256,uint256)",
      "name": "setMinimumClientVersion",
      "description": "Sets the minimum client version. For example if the version is 1.9.2, 1 is the major version, 9 is minor, and 2 is the patch level.",
      "parameterDecorators": [
        {
          "name": "major",
          "description": "Major version.",
          "recommendedTypes": []
        },
        {
          "name": "minor",
          "description": "Minor version.",
          "recommendedTypes": []
        },
        {
          "name": "patch",
          "description": "Patch version.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUptimeLookbackWindow(uint256)",
      "name": "setUptimeLookbackWindow",
      "description": "Sets the uptime lookback window.",
      "parameterDecorators": [
        {
          "name": "window",
          "description": "New window.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uptimeLookbackWindow()",
      "name": "uptimeLookbackWindow",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "oldValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "nextValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "nextValueActivationEpoch",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validatorSignerAddressFromCurrentSet(uint256)",
      "name": "validatorSignerAddressFromCurrentSet",
      "description": "Gets a validator address from the current validator set.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "Index of requested validator in the validator set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validatorSignerAddressFromSet(uint256,uint256)",
      "name": "validatorSignerAddressFromSet",
      "description": "Gets a validator address from the validator set at the given block number.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "Index of requested validator in the validator set.",
          "recommendedTypes": []
        },
        {
          "name": "blockNumber",
          "description": "Block number to retrieve the validator set from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}