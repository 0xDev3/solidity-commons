{
  "schema": "../schema.json",
  "tags": [],
  "name": "SingleRandomWinner",
  "description": "",
  "eventDecorators": [
    {
      "signature": "ExternalErc20AwardAdded(address)",
      "name": "ExternalErc20AwardAdded",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "externalErc20",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ExternalErc20AwardRemoved(address)",
      "name": "ExternalErc20AwardRemoved",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "externalErc20Award",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ExternalErc721AwardAdded(address,uint256[])",
      "name": "ExternalErc721AwardAdded",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "externalErc721",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenIds",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExternalErc721AwardRemoved(address)",
      "name": "ExternalErc721AwardRemoved",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "externalErc721Award",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Initialized(uint256,uint256,address,address,address,address,address[])",
      "name": "Initialized",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "prizePeriodStart",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prizePeriodSeconds",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prizePool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "ticket",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sponsorship",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rng",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "externalErc20Awards",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NoWinner()",
      "name": "NoWinner",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": []
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PeriodicPrizeStrategyListenerSet(address)",
      "name": "PeriodicPrizeStrategyListenerSet",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "periodicPrizeStrategyListener",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PrizePoolAwardCancelled(address,address,uint32,uint32)",
      "name": "PrizePoolAwardCancelled",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "prizePool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "rngRequestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "rngLockBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PrizePoolAwardStarted(address,address,uint32,uint32)",
      "name": "PrizePoolAwardStarted",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "prizePool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "rngRequestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "rngLockBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PrizePoolAwarded(address,uint256)",
      "name": "PrizePoolAwarded",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "randomNumber",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PrizePoolOpened(address,uint256)",
      "name": "PrizePoolOpened",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "prizePeriodStartedAt",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RngRequestFailed()",
      "name": "RngRequestFailed",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": []
    },
    {
      "signature": "RngRequestTimeoutSet(uint32)",
      "name": "RngRequestTimeoutSet",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "rngRequestTimeout",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RngServiceUpdated(address)",
      "name": "RngServiceUpdated",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "rngService",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TokenListenerUpdated(address)",
      "name": "TokenListenerUpdated",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "tokenListener",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addExternalErc20Award(address)",
      "name": "addExternalErc20Award",
      "description": "Adds an external ERC20 token type as an additional prize that can be awarded. Only the Prize-Strategy owner/creator can assign external tokens, and they must be approved by the Prize-Pool.",
      "parameterDecorators": [
        {
          "name": "_externalErc20",
          "description": "The address of an ERC20 token to be awarded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addExternalErc20Awards(address[])",
      "name": "addExternalErc20Awards",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_externalErc20s",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addExternalErc721Award(address,uint256[])",
      "name": "addExternalErc721Award",
      "description": "Adds an external ERC721 token as an additional prize that can be awarded. Only the Prize-Strategy owner/creator can assign external tokens, and they must be approved by the Prize-Pool NOTE: The NFT must already be owned by the Prize-Pool.",
      "parameterDecorators": [
        {
          "name": "_externalErc721",
          "description": "The address of an ERC721 token to be awarded.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenIds",
          "description": "An array of token IDs of the ERC721 to be awarded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "beforeTokenMint(address,uint256,address,address)",
      "name": "beforeTokenMint",
      "description": "Called by the PrizePool when minting controlled tokens.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "controlledToken",
          "description": "The type of collateral that is being minted.",
          "recommendedTypes": []
        },
        {
          "name": "referrer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "beforeTokenTransfer(address,address,uint256,address)",
      "name": "beforeTokenTransfer",
      "description": "Called by the PrizePool for transfers of controlled tokens. Note that this is only for *transfers*, not mints or burns.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "controlledToken",
          "description": "The type of collateral that is being sent.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateNextPrizePeriodStartTime(uint256)",
      "name": "calculateNextPrizePeriodStartTime",
      "description": "Calculates when the next prize period will start.",
      "parameterDecorators": [
        {
          "name": "currentTime",
          "description": "The timestamp to use as the current time.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The timestamp at which the next prize period would start.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "canCompleteAward()",
      "name": "canCompleteAward",
      "description": "Returns whether an award process can be completed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if an award can be completed, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "canStartAward()",
      "name": "canStartAward",
      "description": "Returns whether an award process can be started.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if an award can be started, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelAward()",
      "name": "cancelAward",
      "description": "Can be called by anyone to unlock the tickets if the RNG has timed out.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "completeAward()",
      "name": "completeAward",
      "description": "Completes the award process and awards the winners. The random number must have been requested and is now available.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "currentPrize()",
      "name": "currentPrize",
      "description": "Calculates and returns the currently accrued prize.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The current prize size.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "estimateRemainingBlocksToPrize(uint256)",
      "name": "estimateRemainingBlocksToPrize",
      "description": "Estimates the remaining blocks until the prize given a number of seconds per block.",
      "parameterDecorators": [
        {
          "name": "secondsPerBlockMantissa",
          "description": "The number of seconds per block to use for the calculation. Should be a fixed point 18 number like Ether.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The estimated number of blocks remaining until the prize can be awarded.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getExternalErc20Awards()",
      "name": "getExternalErc20Awards",
      "description": "Gets the current list of External ERC20 tokens that will be awarded with the current prize.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "An array of External ERC20 token addresses.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getExternalErc721AwardTokenIds(address)",
      "name": "getExternalErc721AwardTokenIds",
      "description": "Gets the current list of External ERC721 tokens that will be awarded with the current prize.",
      "parameterDecorators": [
        {
          "name": "_externalErc721",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "An array of External ERC721 token addresses.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getExternalErc721Awards()",
      "name": "getExternalErc721Awards",
      "description": "Gets the current list of External ERC721 tokens that will be awarded with the current prize.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "An array of External ERC721 token addresses.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLastRngLockBlock()",
      "name": "getLastRngLockBlock",
      "description": "Returns the block number that the current RNG request has been locked to.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The block number that the RNG request is locked to.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLastRngRequestId()",
      "name": "getLastRngRequestId",
      "description": "Returns the current RNG Request ID.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The current Request ID.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(uint256,uint256,address,address,address,address,address[])",
      "name": "initialize",
      "description": "Initializes a new strategy.",
      "parameterDecorators": [
        {
          "name": "_prizePeriodStart",
          "description": "The starting timestamp of the prize period.",
          "recommendedTypes": []
        },
        {
          "name": "_prizePeriodSeconds",
          "description": "The duration of the prize period in seconds.",
          "recommendedTypes": []
        },
        {
          "name": "_prizePool",
          "description": "The prize pool to award.",
          "recommendedTypes": []
        },
        {
          "name": "_ticket",
          "description": "The ticket to use to draw winners.",
          "recommendedTypes": []
        },
        {
          "name": "_sponsorship",
          "description": "The sponsorship token.",
          "recommendedTypes": []
        },
        {
          "name": "_rng",
          "description": "The RNG service to use.",
          "recommendedTypes": []
        },
        {
          "name": "externalErc20Awards",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isPrizePeriodOver()",
      "name": "isPrizePeriodOver",
      "description": "Returns whether the prize period is over.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if the prize period is over, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRngCompleted()",
      "name": "isRngCompleted",
      "description": "Returns whether the random number request has completed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if a random number request has completed, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRngRequested()",
      "name": "isRngRequested",
      "description": "Returns whether a random number has been requested.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if a random number has been requested, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRngTimedOut()",
      "name": "isRngTimedOut",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "periodicPrizeStrategyListener()",
      "name": "periodicPrizeStrategyListener",
      "description": "A listener that receives callbacks before certain events.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prizePeriodEndAt()",
      "name": "prizePeriodEndAt",
      "description": "Returns the timestamp at which the prize period ends.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The timestamp at which the prize period ends.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prizePeriodRemainingSeconds()",
      "name": "prizePeriodRemainingSeconds",
      "description": "Returns the number of seconds remaining until the prize can be awarded.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The number of seconds remaining until the prize can be awarded.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prizePeriodSeconds()",
      "name": "prizePeriodSeconds",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prizePeriodStartedAt()",
      "name": "prizePeriodStartedAt",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prizePool()",
      "name": "prizePool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeExternalErc20Award(address,address)",
      "name": "removeExternalErc20Award",
      "description": "Removes an external ERC20 token type as an additional prize that can be awarded. Only the Prize-Strategy owner/creator can remove external tokens.",
      "parameterDecorators": [
        {
          "name": "_externalErc20",
          "description": "The address of an ERC20 token to be removed.",
          "recommendedTypes": []
        },
        {
          "name": "_prevExternalErc20",
          "description": "The address of the previous ERC20 token in the `externalErc20s` list. If the ERC20 is the first address, then the previous address is the SENTINEL address: 0x0000000000000000000000000000000000000001.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeExternalErc721Award(address,address)",
      "name": "removeExternalErc721Award",
      "description": "Removes an external ERC721 token as an additional prize that can be awarded. Only the Prize-Strategy owner/creator can remove external tokens.",
      "parameterDecorators": [
        {
          "name": "_externalErc721",
          "description": "The address of an ERC721 token to be removed.",
          "recommendedTypes": []
        },
        {
          "name": "_prevExternalErc721",
          "description": "The address of the previous ERC721 token in the list. If no previous, then pass the SENTINEL address: 0x0000000000000000000000000000000000000001.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rng()",
      "name": "rng",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rngRequestTimeout()",
      "name": "rngRequestTimeout",
      "description": "RNG Request Timeout. In fact, this is really a \"complete award\" timeout. If the rng completes the award can still be cancelled.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setPeriodicPrizeStrategyListener(address)",
      "name": "setPeriodicPrizeStrategyListener",
      "description": "Allows the owner to set a listener for prize strategy callbacks.",
      "parameterDecorators": [
        {
          "name": "_periodicPrizeStrategyListener",
          "description": "The address of the listener contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRngRequestTimeout(uint32)",
      "name": "setRngRequestTimeout",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_rngRequestTimeout",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRngService(address)",
      "name": "setRngService",
      "description": "Sets the RNG service that the Prize Strategy is connected to.",
      "parameterDecorators": [
        {
          "name": "rngService",
          "description": "The address of the new RNG service interface.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenListener(address)",
      "name": "setTokenListener",
      "description": "Allows the owner to set the token listener.",
      "parameterDecorators": [
        {
          "name": "_tokenListener",
          "description": "A contract that implements the token listener interface.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sponsorship()",
      "name": "sponsorship",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "startAward()",
      "name": "startAward",
      "description": "Starts the award process by starting random number request. The prize period must have ended. The RNG-Request-Fee is expected to be held within this contract before calling this function.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ticket()",
      "name": "ticket",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenListener()",
      "name": "tokenListener",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferExternalERC20(address,address,uint256)",
      "name": "transferExternalERC20",
      "description": "Allows the owner to transfer out external ERC20 tokens. Used to transfer out tokens held by the Prize Pool. Could be liquidated, or anything.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address that receives the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "externalToken",
          "description": "The address of the external asset token being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of external assets to be transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}