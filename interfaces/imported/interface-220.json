{
  "schema": "../schema.json",
  "tags": [
    "staking"
  ],
  "name": "BONQStaking",
  "description": "BONQ Staking contract, rewards stakers in StableCoin that is used to pay fee.",
  "eventDecorators": [
    {
      "signature": "BonqTokenAddressSet(address)",
      "name": "BonqTokenAddressSet",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "_bonqTokenAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FactoryAddressSet(address)",
      "name": "FactoryAddressSet",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "_factoryAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FeeTaken(uint256,uint256,bool)",
      "name": "FeeTaken",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_F_StableCoin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_redemptionFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RewardRedeemed(address,uint256,address)",
      "name": "RewardRedeemed",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_stableAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_troveAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StableCoinAddressSet(address)",
      "name": "StableCoinAddressSet",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "_stableCoinAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakeChanged(address,uint256)",
      "name": "StakeChanged",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "_staker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newStake",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakerSnapshotsUpdated(address,uint256,uint256)",
      "name": "StakerSnapshotsUpdated",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "_staker",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_F_StableCoin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_stableGains",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TotalBONQStakedUpdated(uint256)",
      "name": "TotalBONQStakedUpdated",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "_totalBONQStaked",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DECIMAL_PRECISION()",
      "name": "DECIMAL_PRECISION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "F_StableCoin()",
      "name": "F_StableCoin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "F_StableCoinSnapshots(address)",
      "name": "F_StableCoinSnapshots",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "LIQUIDATION_RESERVE()",
      "name": "LIQUIDATION_RESERVE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_BORROWING_RATE()",
      "name": "MAX_BORROWING_RATE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_INT()",
      "name": "MAX_INT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "NAME()",
      "name": "NAME",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PERCENT()",
      "name": "PERCENT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PERCENT10()",
      "name": "PERCENT10",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PERCENT_05()",
      "name": "PERCENT_05",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "alpha()",
      "name": "alpha",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "baseRate()",
      "name": "baseRate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beta()",
      "name": "beta",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bonqToken()",
      "name": "bonqToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calcDecayedBaseRate(uint256)",
      "name": "calcDecayedBaseRate",
      "description": "calculates the rate dacayed by time passed since last fee, uses `decPow` from BONQMath.",
      "parameterDecorators": [
        {
          "name": "_currentBaseRate",
          "description": "current rate to decay.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256 decayed baseRate in uint256.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "factory()",
      "name": "factory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBorrowingFee(uint256)",
      "name": "getBorrowingFee",
      "description": "returns fee from borrowing the amount.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "amount to borrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256 resulting fee.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRedemptionFeeRatio(uint256,uint256)",
      "name": "getRedemptionFeeRatio",
      "description": "calculates redemption fee from CR.",
      "parameterDecorators": [
        {
          "name": "_collateralRatio",
          "description": "collateral ratio of the trove.",
          "recommendedTypes": []
        },
        {
          "name": "_mcr",
          "description": "minimal collateral ratio of the trove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256 resulting fee.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewardsTotal()",
      "name": "getRewardsTotal",
      "description": "reads the unpaid rewards of the user.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUnpaidStableCoinGain(address)",
      "name": "getUnpaidStableCoinGain",
      "description": "reads the unpaid rewards of the user.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "the user to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "increaseBaseRate(uint256)",
      "name": "increaseBaseRate",
      "description": "_increase. updates baseRate.",
      "parameterDecorators": [
        {
          "name": "_increase",
          "description": "value to add to baseRate.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lastFeeOperationTime()",
      "name": "lastFeeOperationTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxFeeCollateralRatio()",
      "name": "maxFeeCollateralRatio",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minuteDecayFactor()",
      "name": "minuteDecayFactor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemReward(uint256,address,address)",
      "name": "redeemReward",
      "description": "user can redeem StableCoin rewards only to repay the debt of the troves. to redeem StableCoin rewards, transfers the amount only to repay debt of the Trove.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "amount of StableCoin to repay the debt.",
          "recommendedTypes": []
        },
        {
          "name": "_troveAddress",
          "description": "address of the valid trove to repay the debt.",
          "recommendedTypes": []
        },
        {
          "name": "_newNextTrove",
          "description": "hint for the newNextTrove position (next trove).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAlphaValue(uint256)",
      "name": "setAlphaValue",
      "description": "set the new alpha value.",
      "parameterDecorators": [
        {
          "name": "_alpha",
          "description": "uint256 value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBONQToken(address)",
      "name": "setBONQToken",
      "description": "sets the BONQ token contract, if new address was updated.",
      "parameterDecorators": [
        {
          "name": "_bonqTokenAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBetaValue(uint256)",
      "name": "setBetaValue",
      "description": "set the new beta value.",
      "parameterDecorators": [
        {
          "name": "_beta",
          "description": "uint256 value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFactory(address)",
      "name": "setFactory",
      "description": "sets the TroveFactory contract, if address was updated.",
      "parameterDecorators": [
        {
          "name": "_factoryAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setInitialLastFee(uint256)",
      "name": "setInitialLastFee",
      "description": "set timestamp to calculate next decayed rate from.",
      "parameterDecorators": [
        {
          "name": "_timestamp",
          "description": "uint256 in seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxFeeCollateralRatio(uint256)",
      "name": "setMaxFeeCollateralRatio",
      "description": "set the maximum Collateral Ratio threshold to return 100% feeRatio.",
      "parameterDecorators": [
        {
          "name": "_maxFeeCollateralRatio",
          "description": "uint256 value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinuteDecayFactor(uint256)",
      "name": "setMinuteDecayFactor",
      "description": "set the new fee decay factor per minute.",
      "parameterDecorators": [
        {
          "name": "_newMinuteDecayFactor",
          "description": "uint256 value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stableCoin()",
      "name": "stableCoin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stableCoinUserGains(address)",
      "name": "stableCoinUserGains",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stake(uint256)",
      "name": "stake",
      "description": "If caller has a pre-existing stake, records any accumulated StableCoin gains to them. to stake BONQ.",
      "parameterDecorators": [
        {
          "name": "_bonqAmount",
          "description": "amount of BONQ to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakes(address)",
      "name": "stakes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "takeFees(uint256)",
      "name": "takeFees",
      "description": "Unstake the BONQ and send the it back to the caller, and record accumulated StableCoin gains. If requested amount > stake, send their entire stake. to pay fee in StableCoin, transfer the amount specified.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "amount of StableCoin to pay as fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalBONQStaked()",
      "name": "totalBONQStaked",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalStake()",
      "name": "totalStake",
      "description": "to get total BONQ stkae amount.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unstake(uint256)",
      "name": "unstake",
      "description": "Unstake the BONQ and send the it back to the caller, and record accumulated StableCoin gains. If requested amount > stake, send their entire stake. to unstake BONQ.",
      "parameterDecorators": [
        {
          "name": "_bonqAmount",
          "description": "amount of BONQ to unstake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStableCoin()",
      "name": "updateStableCoin",
      "description": "sets the StableCoin token contract, if address was updated.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}