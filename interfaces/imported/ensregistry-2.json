{
  "schema": "../schema.json",
  "tags": [],
  "name": "ENSRegistry",
  "description": "The ENS registry contract.",
  "eventDecorators": [
    {
      "signature": "ApprovalForAll(address,address,bool)",
      "name": "ApprovalForAll",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewOwner(bytes32,bytes32,address)",
      "name": "NewOwner",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewResolver(bytes32,address)",
      "name": "NewResolver",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "resolver",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewTTL(bytes32,uint64)",
      "name": "NewTTL",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "ttl",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetTrustedForwarder(address,bool)",
      "name": "SetTrustedForwarder",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allowed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Transfer(bytes32,address)",
      "name": "Transfer",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "isApprovedForAll(address,address)",
      "name": "isApprovedForAll",
      "description": "Query if an address is an authorized operator for another address.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "The address that owns the records.",
          "recommendedTypes": []
        },
        {
          "name": "operator",
          "description": "The address that acts on behalf of the owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if `operator` is an approved operator for `owner`, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isTrustedForwarder(address)",
      "name": "isTrustedForwarder",
      "description": "",
      "parameterDecorators": [
        {
          "name": "forwarder",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner(bytes32)",
      "name": "owner",
      "description": "Returns the address that owns the specified node.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The specified node.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of the owner.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recordExists(bytes32)",
      "name": "recordExists",
      "description": "Returns whether a record has been imported to the registry.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The specified node.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Bool if record exists.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resolver(bytes32)",
      "name": "resolver",
      "description": "Returns the address of the resolver for the specified node.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The specified node.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of the resolver.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setApprovalForAll(address,bool)",
      "name": "setApprovalForAll",
      "description": "Enable or disable approval for a third party (\"operator\") to manage all of `_msgSender()`'s ENS records. Emits the ApprovalForAll event.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "Address to add to the set of authorized operators.",
          "recommendedTypes": []
        },
        {
          "name": "approved",
          "description": "True if the operator is approved, false to revoke approval.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwner(bytes32,address)",
      "name": "setOwner",
      "description": "Transfers ownership of a node to a new address. May only be called by the current owner of the node.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The node to transfer ownership of.",
          "recommendedTypes": []
        },
        {
          "name": "owner",
          "description": "The address of the new owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRecord(bytes32,address,address,uint64)",
      "name": "setRecord",
      "description": "Sets the record for a node.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The node to update.",
          "recommendedTypes": []
        },
        {
          "name": "owner",
          "description": "The address of the new owner.",
          "recommendedTypes": []
        },
        {
          "name": "resolver",
          "description": "The address of the resolver.",
          "recommendedTypes": []
        },
        {
          "name": "ttl",
          "description": "The TTL in seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setResolver(bytes32,address)",
      "name": "setResolver",
      "description": "Sets the resolver address for the specified node.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The node to update.",
          "recommendedTypes": []
        },
        {
          "name": "resolver",
          "description": "The address of the resolver.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSubnodeOwner(bytes32,bytes32,address)",
      "name": "setSubnodeOwner",
      "description": "Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The parent node.",
          "recommendedTypes": []
        },
        {
          "name": "label",
          "description": "The hash of the label specifying the subnode.",
          "recommendedTypes": []
        },
        {
          "name": "owner",
          "description": "The address of the new owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSubnodeRecord(bytes32,bytes32,address,address,uint64)",
      "name": "setSubnodeRecord",
      "description": "Sets the record for a subnode.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The parent node.",
          "recommendedTypes": []
        },
        {
          "name": "label",
          "description": "The hash of the label specifying the subnode.",
          "recommendedTypes": []
        },
        {
          "name": "owner",
          "description": "The address of the new owner.",
          "recommendedTypes": []
        },
        {
          "name": "resolver",
          "description": "The address of the resolver.",
          "recommendedTypes": []
        },
        {
          "name": "ttl",
          "description": "The TTL in seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTTL(bytes32,uint64)",
      "name": "setTTL",
      "description": "Sets the TTL for the specified node.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The node to update.",
          "recommendedTypes": []
        },
        {
          "name": "ttl",
          "description": "The TTL in seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTrustedForwarder(address,bool)",
      "name": "setTrustedForwarder",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_allowed",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ttl(bytes32)",
      "name": "ttl",
      "description": "Returns the TTL of a node, and any records associated with it.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The specified node.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "ttl of the node.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}