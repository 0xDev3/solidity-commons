{
  "schema": "../schema.json",
  "tags": [],
  "name": "MarketV2",
  "description": "",
  "eventDecorators": [
    {
      "signature": "LogGroupToken(address,address,uint256)",
      "name": "LogGroupToken",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LogNewToken(address,address,uint256)",
      "name": "LogNewToken",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LogTokenSold(address,uint256,address,address,uint256,uint256)",
      "name": "LogTokenSold",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "marketAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "numTokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WithdrawCredits(address,uint256)",
      "name": "WithdrawCredits",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "userAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "INVERSE_BASIS_POINT()",
      "name": "INVERSE_BASIS_POINT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_commissionPoints()",
      "name": "_commissionPoints",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createToken(uint256,uint256,tuple(address,uint256)[])",
      "name": "createToken",
      "description": "Create a NFT/Token that will be stored in the EQTradable ContractThis emits the tokenId and the creator/minter.",
      "parameterDecorators": [
        {
          "name": "numTokens",
          "description": "Amount of tokens to be created and minted.",
          "recommendedTypes": []
        },
        {
          "name": "price",
          "description": "Value of each token.",
          "recommendedTypes": []
        },
        {
          "name": "splitStructure",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "splitAddress",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "percentagePoints",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createUniqueTokenLazy(uint256,uint256,tuple(address,uint256)[])",
      "name": "createUniqueTokenLazy",
      "description": "Store a token information for lazy mintingEach token will have it's own token ID similar to ERC-721 implementationThis emits the tokenId and the creator/minter per tokenID.",
      "parameterDecorators": [
        {
          "name": "numTokens",
          "description": "Amount of tokens to be created and minted.",
          "recommendedTypes": []
        },
        {
          "name": "price",
          "description": "Value of each token.",
          "recommendedTypes": []
        },
        {
          "name": "splitStructure",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "splitAddress",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "percentagePoints",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getCommissionRecipient()",
      "name": "getCommissionRecipient",
      "description": "Get CommissionRecipient.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentGroupId()",
      "name": "getCurrentGroupId",
      "description": "Get _currentGroupId.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGroupIdAmount(uint256)",
      "name": "getGroupIdAmount",
      "description": "Get number of max minted amount of unique token Ids.",
      "parameterDecorators": [
        {
          "name": "groupId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGroupIdAmountMinted(uint256)",
      "name": "getGroupIdAmountMinted",
      "description": "Get number of minted unique token Ids.",
      "parameterDecorators": [
        {
          "name": "groupId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGroupIdPrice(uint256)",
      "name": "getGroupIdPrice",
      "description": "Get price of unique token Id.",
      "parameterDecorators": [
        {
          "name": "groupId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenMinter(uint256)",
      "name": "getTokenMinter",
      "description": "Get token minter.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenPrice(uint256)",
      "name": "getTokenPrice",
      "description": "Get token price.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "purchaseToken(uint256)",
      "name": "purchaseToken",
      "description": "Purchase tokens baed on the {numTokens} specified.This emits the tokenId, number of tokens and the new owner.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "The ID of the token that's being purchased.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "purchaseTokenLazy(uint256,uint256)",
      "name": "purchaseTokenLazy",
      "description": "Purchase tokens baed on the {numTokens} specified for lazy minted tokens.",
      "parameterDecorators": [
        {
          "name": "groupTokenId",
          "description": "The ID of the token that's being purchased.",
          "recommendedTypes": []
        },
        {
          "name": "numTokens",
          "description": "Amount of tokens to be purchased.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "putTokenForSale(uint256)",
      "name": "putTokenForSale",
      "description": "Puts a token id for sale. Requirements: - tokenId must not currently for sale. - the caller must be the owner of the token.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeTokenFromSale(uint256)",
      "name": "removeTokenFromSale",
      "description": "Removes a token id from sale. Requirements: - tokenId must be for sale. - the caller must be the owner of the token.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCommissionRecipient(address)",
      "name": "setCommissionRecipient",
      "description": "Set the commission recipient address.",
      "parameterDecorators": [
        {
          "name": "commissionRecipient",
          "description": "Commission Recipient Address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setURI(string)",
      "name": "setURI",
      "description": "Set base URI Requirements: - the caller must be the owner of the contract.*.",
      "parameterDecorators": [
        {
          "name": "newURI",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}