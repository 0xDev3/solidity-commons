{"schema":"../schema.json","tags":["bridges"],"name":"SynapseBridge","description":"","eventDecorators":[{"signature":"Paused(address)","name":"Paused","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"TokenDeposit(address,uint256,address,uint256)","name":"TokenDeposit","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"chainId","description":"","recommendedTypes":[],"indexed":false},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokenDepositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)","name":"TokenDepositAndSwap","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"chainId","description":"","recommendedTypes":[],"indexed":false},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenIndexFrom","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenIndexTo","description":"","recommendedTypes":[],"indexed":false},{"name":"minDy","description":"","recommendedTypes":[],"indexed":false},{"name":"deadline","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokenMint(address,address,uint256,uint256,bytes32)","name":"TokenMint","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"fee","description":"","recommendedTypes":[],"indexed":false},{"name":"kappa","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"TokenMintAndSwap(address,address,uint256,uint256,uint8,uint8,uint256,uint256,bool,bytes32)","name":"TokenMintAndSwap","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"fee","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenIndexFrom","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenIndexTo","description":"","recommendedTypes":[],"indexed":false},{"name":"minDy","description":"","recommendedTypes":[],"indexed":false},{"name":"deadline","description":"","recommendedTypes":[],"indexed":false},{"name":"swapSuccess","description":"","recommendedTypes":[],"indexed":false},{"name":"kappa","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"TokenRedeem(address,uint256,address,uint256)","name":"TokenRedeem","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"chainId","description":"","recommendedTypes":[],"indexed":false},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokenRedeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)","name":"TokenRedeemAndRemove","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"chainId","description":"","recommendedTypes":[],"indexed":false},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"swapTokenIndex","description":"","recommendedTypes":[],"indexed":false},{"name":"swapMinAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"swapDeadline","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokenRedeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)","name":"TokenRedeemAndSwap","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"chainId","description":"","recommendedTypes":[],"indexed":false},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenIndexFrom","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenIndexTo","description":"","recommendedTypes":[],"indexed":false},{"name":"minDy","description":"","recommendedTypes":[],"indexed":false},{"name":"deadline","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokenWithdraw(address,address,uint256,uint256,bytes32)","name":"TokenWithdraw","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"fee","description":"","recommendedTypes":[],"indexed":false},{"name":"kappa","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"TokenWithdrawAndRemove(address,address,uint256,uint256,uint8,uint256,uint256,bool,bytes32)","name":"TokenWithdrawAndRemove","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"fee","description":"","recommendedTypes":[],"indexed":false},{"name":"swapTokenIndex","description":"","recommendedTypes":[],"indexed":false},{"name":"swapMinAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"swapDeadline","description":"","recommendedTypes":[],"indexed":false},{"name":"swapSuccess","description":"","recommendedTypes":[],"indexed":false},{"name":"kappa","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Unpaused(address)","name":"Unpaused","description":"Emitted when `cancelOrder` is called.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"GOVERNANCE_ROLE()","name":"GOVERNANCE_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"NODEGROUP_ROLE()","name":"NODEGROUP_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"WETH_ADDRESS()","name":"WETH_ADDRESS","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"addKappas(bytes32[])","name":"addKappas","description":"","parameterDecorators":[{"name":"kappas","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"bridgeVersion()","name":"bridgeVersion","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"chainGasAmount()","name":"chainGasAmount","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"deposit(address,uint256,address,uint256)","name":"deposit","description":"Relays to nodes to transfers an ERC20 token cross-chain.","parameterDecorators":[{"name":"to","description":"address on other chain to bridge assets to.","recommendedTypes":[]},{"name":"chainId","description":"which chain to bridge assets onto.","recommendedTypes":[]},{"name":"token","description":"ERC20 compatible token to deposit into the bridge.","recommendedTypes":[]},{"name":"amount","description":"Amount in native token decimals to transfer cross-chain pre-fees*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)","name":"depositAndSwap","description":"Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user.","parameterDecorators":[{"name":"to","description":"address on other chain to bridge assets to.","recommendedTypes":[]},{"name":"chainId","description":"which chain to bridge assets onto.","recommendedTypes":[]},{"name":"token","description":"ERC20 compatible token to deposit into the bridge.","recommendedTypes":[]},{"name":"amount","description":"Amount in native token decimals to transfer cross-chain pre-fees.","recommendedTypes":[]},{"name":"tokenIndexFrom","description":"the token the user wants to swap from.","recommendedTypes":[]},{"name":"tokenIndexTo","description":"the token the user wants to swap to.","recommendedTypes":[]},{"name":"minDy","description":"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.","recommendedTypes":[]},{"name":"deadline","description":"latest timestamp to accept this transaction*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getFeeBalance(address)","name":"getFeeBalance","description":"","parameterDecorators":[{"name":"tokenAddress","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize()","name":"initialize","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"kappaExists(bytes32)","name":"kappaExists","description":"","parameterDecorators":[{"name":"kappa","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"mint(address,address,uint256,uint256,bytes32)","name":"mint","description":"Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to). This is called by the nodes after a TokenDeposit event is emitted. This means the SynapseBridge.sol contract must have minter access to the token attempting to be minted.","parameterDecorators":[{"name":"to","description":"address on other chain to redeem underlying assets to.","recommendedTypes":[]},{"name":"token","description":"ERC20 compatible token to deposit into the bridge.","recommendedTypes":[]},{"name":"amount","description":"Amount in native token decimals to transfer cross-chain post-fees.","recommendedTypes":[]},{"name":"fee","description":"Amount in native token decimals to save to the contract as fees.","recommendedTypes":[]},{"name":"kappa","description":"kappa*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"mintAndSwap(address,address,uint256,uint256,address,uint8,uint8,uint256,uint256,bytes32)","name":"mintAndSwap","description":"Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwap event is emitted. This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted.","parameterDecorators":[{"name":"to","description":"address on other chain to redeem underlying assets to.","recommendedTypes":[]},{"name":"token","description":"ERC20 compatible token to deposit into the bridge.","recommendedTypes":[]},{"name":"amount","description":"Amount in native token decimals to transfer cross-chain post-fees.","recommendedTypes":[]},{"name":"fee","description":"Amount in native token decimals to save to the contract as fees.","recommendedTypes":[]},{"name":"pool","description":"Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.","recommendedTypes":[]},{"name":"tokenIndexFrom","description":"Index of the SynERC20 asset in the pool.","recommendedTypes":[]},{"name":"tokenIndexTo","description":"Index of the desired final asset.","recommendedTypes":[]},{"name":"minDy","description":"Minumum amount (in final asset decimals) that must be swapped for, otherwise the user will receive the SynERC20.","recommendedTypes":[]},{"name":"deadline","description":"Epoch time of the deadline that the swap is allowed to be executed.","recommendedTypes":[]},{"name":"kappa","description":"kappa*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"pause()","name":"pause","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"paused()","name":"paused","description":"Returns true if the contract is paused, and false otherwise.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"redeem(address,uint256,address,uint256)","name":"redeem","description":"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain.","parameterDecorators":[{"name":"to","description":"address on other chain to redeem underlying assets to.","recommendedTypes":[]},{"name":"chainId","description":"which underlying chain to bridge assets onto.","recommendedTypes":[]},{"name":"token","description":"ERC20 compatible token to deposit into the bridge.","recommendedTypes":[]},{"name":"amount","description":"Amount in native token decimals to transfer cross-chain pre-fees*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)","name":"redeemAndRemove","description":"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token).","parameterDecorators":[{"name":"to","description":"address on other chain to redeem underlying assets to.","recommendedTypes":[]},{"name":"chainId","description":"which underlying chain to bridge assets onto.","recommendedTypes":[]},{"name":"token","description":"ERC20 compatible token to deposit into the bridge.","recommendedTypes":[]},{"name":"amount","description":"Amount in native token decimals to transfer cross-chain pre-fees.","recommendedTypes":[]},{"name":"swapTokenIndex","description":"Specifies which of the underlying LP assets the nodes should attempt to redeem for.","recommendedTypes":[]},{"name":"swapMinAmount","description":"Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap.","recommendedTypes":[]},{"name":"swapDeadline","description":"Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)","name":"redeemAndSwap","description":"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token).","parameterDecorators":[{"name":"to","description":"address on other chain to redeem underlying assets to.","recommendedTypes":[]},{"name":"chainId","description":"which underlying chain to bridge assets onto.","recommendedTypes":[]},{"name":"token","description":"ERC20 compatible token to deposit into the bridge.","recommendedTypes":[]},{"name":"amount","description":"Amount in native token decimals to transfer cross-chain pre-fees.","recommendedTypes":[]},{"name":"tokenIndexFrom","description":"the token the user wants to swap from.","recommendedTypes":[]},{"name":"tokenIndexTo","description":"the token the user wants to swap to.","recommendedTypes":[]},{"name":"minDy","description":"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.","recommendedTypes":[]},{"name":"deadline","description":"latest timestamp to accept this transaction*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"setChainGasAmount(uint256)","name":"setChainGasAmount","description":"","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setWethAddress(address)","name":"setWethAddress","description":"","parameterDecorators":[{"name":"_wethAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"startBlockNumber()","name":"startBlockNumber","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"unpause()","name":"unpause","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw(address,address,uint256,uint256,bytes32)","name":"withdraw","description":"Function to be called by the node group to withdraw the underlying assets from the contract.","parameterDecorators":[{"name":"to","description":"address on chain to send underlying assets to.","recommendedTypes":[]},{"name":"token","description":"ERC20 compatible token to withdraw from the bridge.","recommendedTypes":[]},{"name":"amount","description":"Amount in native token decimals to withdraw.","recommendedTypes":[]},{"name":"fee","description":"Amount in native token decimals to save to the contract as fees.","recommendedTypes":[]},{"name":"kappa","description":"kappa*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawAndRemove(address,address,uint256,uint256,address,uint8,uint256,uint256,bytes32)","name":"withdrawAndRemove","description":"Function to be called by the node group to withdraw the underlying assets from the contract.","parameterDecorators":[{"name":"to","description":"address on chain to send underlying assets to.","recommendedTypes":[]},{"name":"token","description":"ERC20 compatible token to withdraw from the bridge.","recommendedTypes":[]},{"name":"amount","description":"Amount in native token decimals to withdraw.","recommendedTypes":[]},{"name":"fee","description":"Amount in native token decimals to save to the contract as fees.","recommendedTypes":[]},{"name":"pool","description":"Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.","recommendedTypes":[]},{"name":"swapTokenIndex","description":"Specifies which of the underlying LP assets the nodes should attempt to redeem for.","recommendedTypes":[]},{"name":"swapMinAmount","description":"Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap.","recommendedTypes":[]},{"name":"swapDeadline","description":"Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token.","recommendedTypes":[]},{"name":"kappa","description":"kappa*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawFees(address,address)","name":"withdrawFees","description":"withdraw specified ERC20 token fees to a given address.","parameterDecorators":[{"name":"token","description":"ERC20 token in which fees acccumulated to transfer.","recommendedTypes":[]},{"name":"to","description":"Address to send the fees to.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}