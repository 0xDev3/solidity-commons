{
  "schema": "../schema.json",
  "tags": [],
  "name": "SpiralsStakingV2",
  "description": "SpiralsStakingV2. We inherit \"SpiralsStaking\" first so that existing state variables preserve their slot assignments. New state variables introduced on this smart contract occupy slots after all inherited contract variables are assigned. This is a 2nd iteration of SpiralsStaking that inherits some basic OpenZeppelin upgradeable contracts to enhance security on the core staking logic.",
  "eventDecorators": [
    {
      "signature": "Deposit(address,uint256,bool)",
      "name": "Deposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "isBuffer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Initialized(uint8)",
      "name": "Initialized",
      "description": "",
      "parameterDecorators": [
        {
          "name": "version",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProtocolCeloActivated(address,uint256)",
      "name": "ProtocolCeloActivated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_validatorGroup",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProtocolCeloWithdrawn(uint256,uint256)",
      "name": "ProtocolCeloWithdrawn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "totalAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UserCeloStaked(address,address,uint256)",
      "name": "UserCeloStaked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_validatorGroup",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UserCeloUnstaked(address,address,uint256)",
      "name": "UserCeloUnstaked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_validatorGroup",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UserCeloWithdrawn(address,uint256)",
      "name": "UserCeloWithdrawn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "activateForProtocol()",
      "name": "activateForProtocol",
      "description": "Activates pending votes (if ready) with a given validator group. Onus is on the protocol owners to activate to make sure CELO staked with protocol is staked on CELO L1.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "bufferPool()",
      "name": "bufferPool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositBP()",
      "name": "depositBP",
      "description": "Allows deposits into the protocol's buffer pool to facilitate unstaking.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAccount(address)",
      "name": "getAccount",
      "description": "Returns all details relevant to an account staking with Spirals.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getActiveVotes()",
      "name": "getActiveVotes",
      "description": "Get active votes (staked + rewards) for this smart contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPendingVotes()",
      "name": "getPendingVotes",
      "description": "Get pending votes for this smart contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initializes the Spirals staking smart contract. Should only be called once (stored in state variable).",
      "parameterDecorators": [
        {
          "name": "_validatorGroup",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "numStakers()",
      "name": "numStakers",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resume()",
      "name": "resume",
      "description": "Resumes the smart contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStakingStats(uint256,uint256)",
      "name": "setStakingStats",
      "description": "Helper function for updating this value;.",
      "parameterDecorators": [
        {
          "name": "_totalStaked",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_numStakers",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setValidatorGroup(address)",
      "name": "setValidatorGroup",
      "description": "See \"setValidatorGroup\" in SpiralsStaking.sol. Same implementation as original with 2 new modifiers.",
      "parameterDecorators": [
        {
          "name": "_newValidatorGroup",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stake()",
      "name": "stake",
      "description": "See \"stake\" in SpiralsStaking.sol. Same implementation as original with 2 new modifiers.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stop()",
      "name": "stop",
      "description": "Pauses the smart contract. This is useful if a critical issue or vulnerability is discovered that requires patching or if the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalPendingWithdrawal()",
      "name": "totalPendingWithdrawal",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalStaked()",
      "name": "totalStaked",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unstake(uint256)",
      "name": "unstake",
      "description": "See \"unstake\" in SpiralsStaking.sol. Same implementation as original with 2 new modifiers.",
      "parameterDecorators": [
        {
          "name": "_value",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userCanWithdraw(address)",
      "name": "userCanWithdraw",
      "description": "Helper function for checking whether protocol can support a user who wants to withdraw.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validatorGroup()",
      "name": "validatorGroup",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw()",
      "name": "withdraw",
      "description": "See \"withdraw\" in SpiralsStaking.sol. Same implementation as original with 2 new modifiers.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawForProtocol()",
      "name": "withdrawForProtocol",
      "description": "Attemps to withdraw CELO for all pending withdrawals that are available for the proxy contract address. Onus is on the protocol owners to withdraw CELO from LockedGold.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}