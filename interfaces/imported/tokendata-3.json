{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "TokenData",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Commission(address,address,uint256,uint256)",
      "name": "Commission",
      "description": "",
      "parameterDecorators": [
        {
          "name": "stakedContractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "stakerAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "scIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "commissionAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addStake(address,address,uint256)",
      "name": "addStake",
      "description": "Adds a new stake record.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "staker address.",
          "recommendedTypes": []
        },
        {
          "name": "_stakedContractAddress",
          "description": "smart contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amountof SOTE to be staked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "scIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "bookCATokens(address)",
      "name": "bookCATokens",
      "description": "books the user's tokens for maintaining Assessor Velocity, i.e. once a token is used to cast a vote as a Claims assessor,.",
      "parameterDecorators": [
        {
          "name": "_of",
          "description": "user's address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "bookTime()",
      "name": "bookTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeDependentContractAddress()",
      "name": "changeDependentContractAddress",
      "description": "Just for interface.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeMasterAddress(address)",
      "name": "changeMasterAddress",
      "description": "change master address.",
      "parameterDecorators": [
        {
          "name": "_masterAddress",
          "description": "is the new address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeWalletAddress(address)",
      "name": "changeWalletAddress",
      "description": "Change the wallet address which receive Joining Fee.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositedCN(uint256)",
      "name": "depositedCN",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "isDeposited",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakedContractStakerByIndex(address,uint256)",
      "name": "getStakedContractStakerByIndex",
      "description": "to get the staker address on a staked contract.",
      "parameterDecorators": [
        {
          "name": "_stakedContractAddress",
          "description": "is the address of the staked contract in concern.",
          "recommendedTypes": []
        },
        {
          "name": "_stakedContractIndex",
          "description": "is the index of staked contract's index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "stakerAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakedContractStakerIndex(address,uint256)",
      "name": "getStakedContractStakerIndex",
      "description": "to get the staker index of the staked contract.",
      "parameterDecorators": [
        {
          "name": "_stakedContractAddress",
          "description": "is the address of the staked contract.",
          "recommendedTypes": []
        },
        {
          "name": "_stakedContractIndex",
          "description": "is the index of staked contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "sIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakedContractStakersLength(address)",
      "name": "getStakedContractStakersLength",
      "description": "to get the length of stakers on a staked contract.",
      "parameterDecorators": [
        {
          "name": "_stakedContractAddress",
          "description": "is the address of the staked contract in concern.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "length",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerEarnedStakeCommission(address,uint256)",
      "name": "getStakerEarnedStakeCommission",
      "description": "Gets stake commission given to an underwriter for particular stakedcontract on given index.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "address of staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "index of the staker commission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerInitialStakedAmountOnContract(address,uint256)",
      "name": "getStakerInitialStakedAmountOnContract",
      "description": "to get the staker's initial staked amount on the contract.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "is the address of the staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "is the index of staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerRedeemedStakeCommission(address,uint256)",
      "name": "getStakerRedeemedStakeCommission",
      "description": "Gets stake commission redeemed by an underwriter for particular staked contract on given index.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "address of staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "index of the staker commission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerStakedBurnedByIndex(address,uint256)",
      "name": "getStakerStakedBurnedByIndex",
      "description": "to get the staker's staked burned.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "is the address of the staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "is the index of staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "burnedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerStakedContractByIndex(address,uint256)",
      "name": "getStakerStakedContractByIndex",
      "description": "to get the contract staked by a staker.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "is the address of the staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "is the index of staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "stakedContractAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerStakedContractIndex(address,uint256)",
      "name": "getStakerStakedContractIndex",
      "description": "to get the staker's staked contract index.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "is the address of the staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "is the index of staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "scIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerStakedContractLength(address)",
      "name": "getStakerStakedContractLength",
      "description": "to get the staker's staked contract length.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "is the address of the staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "length",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerStakedUnlockableBeforeLastBurnByIndex(address,uint256)",
      "name": "getStakerStakedUnlockableBeforeLastBurnByIndex",
      "description": "to get the staker's staked unlockable before the last burn.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "is the address of the staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "is the index of staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "unlockable",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerTotalEarnedStakeCommission(address)",
      "name": "getStakerTotalEarnedStakeCommission",
      "description": "Gets total stake commission given to an underwriter.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "address of staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalCommissionEarned",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerTotalReedmedStakeCommission(address)",
      "name": "getStakerTotalReedmedStakeCommission",
      "description": "Gets total stake commission given to an underwriter.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "address of staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalCommissionRedeemed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerUnlockedStakedTokens(address,uint256)",
      "name": "getStakerUnlockedStakedTokens",
      "description": "to get the staker's unlocked tokens which were staked.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "is the address of the staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "is the index of staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUintParameters(bytes8)",
      "name": "getUintParameters",
      "description": "Gets Uint Parameters of a code.",
      "parameterDecorators": [
        {
          "name": "code",
          "description": "whose details we want.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "codeVal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes8"
        },
        {
          "name": "val",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isCATokensBooked(address)",
      "name": "isCATokensBooked",
      "description": "to know if claim assessor's tokens are booked or not.",
      "parameterDecorators": [
        {
          "name": "_of",
          "description": "is the claim assessor's address in concern.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "res",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "joiningFee()",
      "name": "joiningFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastCompletedStakeCommission(address)",
      "name": "lastCompletedStakeCommission",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockCADays()",
      "name": "lockCADays",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockMVDays()",
      "name": "lockMVDays",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockTokenTimeAfterCoverExp()",
      "name": "lockTokenTimeAfterCoverExp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ms()",
      "name": "ms",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "priceStep()",
      "name": "priceStep",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pushBurnedTokens(address,uint256,uint256)",
      "name": "pushBurnedTokens",
      "description": "pushes the Burned tokens for a staker.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "address of staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "index of the staker.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to be burned.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pushEarnedStakeCommissions(address,address,uint256,uint256)",
      "name": "pushEarnedStakeCommissions",
      "description": "pushes the earned commission earned by a staker.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "address of staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakedContractAddress",
          "description": "address of smart contract.",
          "recommendedTypes": []
        },
        {
          "name": "_stakedContractIndex",
          "description": "index of the staker to distribute commission.",
          "recommendedTypes": []
        },
        {
          "name": "_commissionAmount",
          "description": "amount to be given as commission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pushRedeemedStakeCommissions(address,uint256,uint256)",
      "name": "pushRedeemedStakeCommissions",
      "description": "pushes the redeemed commission redeemed by a staker.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "address of staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "index of the staker to distribute commission.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to be given as commission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pushUnlockableBeforeLastBurnTokens(address,uint256,uint256)",
      "name": "pushUnlockableBeforeLastBurnTokens",
      "description": "pushes the unLockable tokens for a staker before last burn.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "address of staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "index of the staker.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to be added to unlockable.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pushUnlockedStakedTokens(address,uint256,uint256)",
      "name": "pushUnlockedStakedTokens",
      "description": "pushes the unlocked staked tokens by a staker.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "address of staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "index of the staker to distribute commission.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to be given as commission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "scValidDays()",
      "name": "scValidDays",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setDepositCN(uint256,bool)",
      "name": "setDepositCN",
      "description": "set flag to deposit/ undeposit cover note against a cover Id.",
      "parameterDecorators": [
        {
          "name": "coverId",
          "description": "coverId of Cover.",
          "recommendedTypes": []
        },
        {
          "name": "flag",
          "description": "true/false for deposit/undeposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDepositCNAmount(uint256,uint256)",
      "name": "setDepositCNAmount",
      "description": "set locked cover note amount against a cover Id.",
      "parameterDecorators": [
        {
          "name": "coverId",
          "description": "coverId of Cover.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "amount of sote to be locked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setLastCompletedStakeCommissionIndex(address,uint256)",
      "name": "setLastCompletedStakeCommissionIndex",
      "description": "Sets the last complete commission index.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "smart contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "current index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStakedContractCurrentBurnIndex(address,uint256)",
      "name": "setStakedContractCurrentBurnIndex",
      "description": "Sets the index till which commission is distrubuted.",
      "parameterDecorators": [
        {
          "name": "_stakedContractAddress",
          "description": "smart contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "current index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStakedContractCurrentCommissionIndex(address,uint256)",
      "name": "setStakedContractCurrentCommissionIndex",
      "description": "Sets the index which will receive commission.",
      "parameterDecorators": [
        {
          "name": "_stakedContractAddress",
          "description": "smart contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "current index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUnlockableBeforeLastBurnTokens(address,uint256,uint256)",
      "name": "setUnlockableBeforeLastBurnTokens",
      "description": "sets the unLockable tokens for a staker before last burn.",
      "parameterDecorators": [
        {
          "name": "_stakerAddress",
          "description": "address of staker.",
          "recommendedTypes": []
        },
        {
          "name": "_stakerIndex",
          "description": "index of the staker.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to be added to unlockable.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "soteMasterAddress()",
      "name": "soteMasterAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakedContractCurrentBurnIndex(address)",
      "name": "stakedContractCurrentBurnIndex",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakedContractCurrentCommissionIndex(address)",
      "name": "stakedContractCurrentCommissionIndex",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakedContractStakeCommission(address,uint256)",
      "name": "stakedContractStakeCommission",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "commissionEarned",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "commissionRedeemed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakedContractStakers(address,uint256)",
      "name": "stakedContractStakers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "stakerAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "stakerIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakerCommissionPer()",
      "name": "stakerCommissionPer",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakerMaxCommissionPer()",
      "name": "stakerMaxCommissionPer",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakerStakedContracts(address,uint256)",
      "name": "stakerStakedContracts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "stakedContractAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "stakedContractIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "dateAdd",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "stakeAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "unlockedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "burnedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "unLockableBeforeLastBurn",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenExponent()",
      "name": "tokenExponent",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateUintParameters(bytes8,uint256)",
      "name": "updateUintParameters",
      "description": "Updates Uint Parameters of a code.",
      "parameterDecorators": [
        {
          "name": "code",
          "description": "whose details we want to update.",
          "recommendedTypes": []
        },
        {
          "name": "val",
          "description": "value to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "walletAddress()",
      "name": "walletAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}