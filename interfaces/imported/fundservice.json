{"schema":"../schema.json","tags":["tokens"],"name":"FundService","description":"FundService. Receive funds, manage and distribute tokens to winners.","eventDecorators":[{"signature":"AdminAdded(uint256,string,string,address,address,bool)","name":"AdminAdded","description":"An event thats emitted when a withdrawal is made from Pool.","parameterDecorators":[{"name":"id","description":"","recommendedTypes":[],"indexed":false},{"name":"_id","description":"","recommendedTypes":[],"indexed":false},{"name":"name","description":"","recommendedTypes":[],"indexed":false},{"name":"admin","description":"","recommendedTypes":[],"indexed":false},{"name":"father","description":"","recommendedTypes":[],"indexed":false},{"name":"isActive","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"AdminRevoked(uint256,string,string,address,address,bool)","name":"AdminRevoked","description":"An event thats emitted when a withdrawal is made from Pool.","parameterDecorators":[{"name":"id","description":"","recommendedTypes":[],"indexed":false},{"name":"_id","description":"","recommendedTypes":[],"indexed":false},{"name":"name","description":"","recommendedTypes":[],"indexed":false},{"name":"admin","description":"","recommendedTypes":[],"indexed":false},{"name":"father","description":"","recommendedTypes":[],"indexed":false},{"name":"isActive","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"FundExtracted(address[],uint256[],string,string)","name":"FundExtracted","description":"An event thats emitted when a withdrawal is made from Pool.","parameterDecorators":[{"name":"winners","description":"","recommendedTypes":[],"indexed":false},{"name":"amounts","description":"","recommendedTypes":[],"indexed":false},{"name":"launchpadSaleId","description":"","recommendedTypes":[],"indexed":true},{"name":"batchID","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"FundInjected(address[],uint256[],string,string)","name":"FundInjected","description":"An event thats emitted when a withdrawal is made from Pool.","parameterDecorators":[{"name":"winners","description":"","recommendedTypes":[],"indexed":false},{"name":"amounts","description":"","recommendedTypes":[],"indexed":false},{"name":"launchpadSaleId","description":"","recommendedTypes":[],"indexed":true},{"name":"batchID","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"MemberBalanceMappingUpdated(address,address)","name":"MemberBalanceMappingUpdated","description":"An event thats emitted when a withdrawal is made from Pool.","parameterDecorators":[{"name":"oldAddress","description":"","recommendedTypes":[],"indexed":true},{"name":"newAddress","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"NativeTokenDistributted(address[],uint256[],uint256,string,string)","name":"NativeTokenDistributted","description":"An event thats emitted when a withdrawal is made from Pool.","parameterDecorators":[{"name":"recipients","description":"","recommendedTypes":[],"indexed":false},{"name":"amounts","description":"","recommendedTypes":[],"indexed":false},{"name":"admin","description":"","recommendedTypes":[],"indexed":false},{"name":"launchpadSaleId","description":"","recommendedTypes":[],"indexed":true},{"name":"batchID","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnerSet(address,address)","name":"OwnerSet","description":"An event thats emitted when a withdrawal is made from Pool.","parameterDecorators":[{"name":"oldOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Received(address,uint256)","name":"Received","description":"An event thats emitted when a withdrawal is made from Pool.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[],"indexed":false},{"name":"param1","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"StableCurrencyDeposited(uint256,uint256,address)","name":"StableCurrencyDeposited","description":"An event thats emitted when a withdrawal is made from Pool.","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"balance","description":"","recommendedTypes":[],"indexed":false},{"name":"memberAddress","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"TokenDistributted(address,address[],uint256[],uint256,string)","name":"TokenDistributted","description":"An event thats emitted when a withdrawal is made from Pool.","parameterDecorators":[{"name":"contract_address","description":"","recommendedTypes":[],"indexed":false},{"name":"recipients","description":"","recommendedTypes":[],"indexed":false},{"name":"amounts","description":"","recommendedTypes":[],"indexed":false},{"name":"admin","description":"","recommendedTypes":[],"indexed":false},{"name":"batchID","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"TokenTransfer(address,address,uint256,uint256,uint256)","name":"TokenTransfer","description":"An event thats emitted when a withdrawal is made from Pool.","parameterDecorators":[{"name":"contractAddress","description":"","recommendedTypes":[],"indexed":false},{"name":"recipient","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"adminId","description":"","recommendedTypes":[],"indexed":true},{"name":"date","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"acceptOwnership()","name":"acceptOwnership","description":"Accept to become the new contract owner(if you are set as newOwner already) and be able to perform actions. accept is required should changeOwner makes mistake it can be reverted by him too MUST revert if `msg.sender` is not set as newOwner already by the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"adminCount()","name":"adminCount","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"admins(uint256)","name":"admins","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"id","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_id","description":"","recommendedTypes":[],"solidityType":"string"},{"name":"name","description":"","recommendedTypes":[],"solidityType":"string"},{"name":"admin","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"father","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"isActive","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"allowWithdrawal()","name":"allowWithdrawal","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"changeOwner(address)","name":"changeOwner","description":"Contract Creator can make another account the contract owner MUST revert if `msg.sender` is the zero address.","parameterDecorators":[{"name":"_newOwner","description":"The wallet address of the new expected owner.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if the action complete.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"createAdmin(string,string,address)","name":"createAdmin","description":"Contract Creator can make other accounts admin MUST revert if `admin name` is not provided.","parameterDecorators":[{"name":"_id","description":"The id of the admin in our local db, usially ObjectID (string).","recommendedTypes":[]},{"name":"_name","description":"The last_name of the admin in our local db, usually string like 'Amaka'.","recommendedTypes":[]},{"name":"_admin_address","description":"The default_wallet of the admin in our local db.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"depositStableCurrency(uint256)","name":"depositStableCurrency","description":"Member Deposit our stable currency (eg BUSD) to this contract address approve function is called on the stable currency contract first via web3 (Member approve this() to spend token) We then call transferFrom to complete action and update the member balance in MemberBalance => public balances here.","parameterDecorators":[{"name":"amount","description":"The amount of the token the member wants to deposit(in wei).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"distributeNativeToken(address[],uint256[],uint256,string,string)","name":"distributeNativeToken","description":"Admin call this function to mass distrubute eth to winners in batches only owner/admins can perform this action : Should the Project wants to distribute Ether or BNB intead of an ERC20 Token (you are covered).","parameterDecorators":[{"name":"recipients","description":"The array of winner wallet address (strings) separated by comas thus ['0x0...', '0xa', ...].","recommendedTypes":[]},{"name":"amounts","description":"The array of winner amounts(in wei) matching winners[] indexes separated by comas thus [500000, 70000000, ...].","recommendedTypes":[]},{"name":"admin_id","description":"ID of the admin calling the function.","recommendedTypes":[]},{"name":"launchpad_sale_id","description":"ID of the sale in local Db usually ObjectID, strigified here.","recommendedTypes":[]},{"name":"batch_id","description":"token distribution can be done in batches when the number of winners are large.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if the action complete.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"distributeToken(address,address[],uint256[],uint256,string)","name":"distributeToken","description":"Admin call this function to mass distrubute tokens to winners in batches only owner/admins can perform this action : Projects can always send their erc20 token to this contract for distribution.","parameterDecorators":[{"name":"contract_address","description":"The token contract address of the token that must have already been sent to the contract from the Company doing sale.","recommendedTypes":[]},{"name":"recipients","description":"The array of winner wallet address (strings) separated by comas thus ['0x0...', '0xa', ...].","recommendedTypes":[]},{"name":"amounts","description":"The array of winner amounts(in wei) matching winners[] indexes separated by comas thus [500000, 70000000, ...].","recommendedTypes":[]},{"name":"admin_id","description":"ID of the admin calling the function.","recommendedTypes":[]},{"name":"batch_id","description":"token distribution can be done in batches when the number of winners are large.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if the action complete.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"extractWinnersFund(address[],uint256[],string,string)","name":"extractWinnersFund","description":"Owner call this function to extract/Deduct locked funds; When Members apply for a Sale, their deposited fund is locked in local db(mongo), admin must call this function in batches to mass deduct the fund from the raffle winners memberBalances after the reffle draw: esle the winners can still withdraw fund from the contract. Meanwhile if a member have unsuficient fund while admin is trying to call this function, vaidations in front end will remove such user from winners list and asign the next available member with valid requirements.","parameterDecorators":[{"name":"winners","description":"The array of winner wallet address (strings) separated by comas thus ['0x0...', '0xa', ...].","recommendedTypes":[]},{"name":"amounts","description":"The array of winner amounts(in wei) matching winners[] indexes separated by comas thus [500000, 70000000, ...].","recommendedTypes":[]},{"name":"launchpad_sale_id","description":"The id of the lauchpad sale id in our local db, usually ObjectID set as string here.","recommendedTypes":[]},{"name":"batch_id","description":"The id of the fund extraction batch in our local db, usually ObjectID set as string here: should we have over 10k records, of cus we might not post all once to this function.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if the action complete.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"getBalance()","name":"getBalance","description":"Get the ETH balance of this contract.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"ETH balance.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getMemberBalance(address)","name":"getMemberBalance","description":"Get the balance of an account's Tokens.","parameterDecorators":[{"name":"_address","description":"The address of the token depositor.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The balance of the Token depositor requested.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"injectWalletFunds(address[],uint256[],string,string)","name":"injectWalletFunds","description":"This is direct Oposite of extractWinnersFund() function should admin have to add funds to user wallets in mass for any reason.","parameterDecorators":[{"name":"winners","description":"","recommendedTypes":[]},{"name":"amounts","description":"","recommendedTypes":[]},{"name":"launchpad_sale_id","description":"","recommendedTypes":[]},{"name":"batch_id","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if the action complete.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"memberBalances(address)","name":"memberBalances","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_address","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"balance","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"name()","name":"name","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"newOwner()","name":"newOwner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"revokeAdmin(uint256,bool)","name":"revokeAdmin","description":"Contract Creator can change the admin status, suspend and unsuspend MUST revert if `_id` is not provided or not in contract index.","parameterDecorators":[{"name":"_id","description":"The id of the admin in contract emiited when admin was created.","recommendedTypes":[]},{"name":"_status","description":"can be true or false.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"revokeWithdrawal()","name":"revokeWithdrawal","description":"Contract Creator can stop/enable members from withdrawals Switches the status to opoosite of what it is currently.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"True if the action complete.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setMaxLoopTimes(uint256)","name":"setMaxLoopTimes","description":"Contract Creator can set MaxLoopCount number of times a loop is allowed to run here eg. switch from BUSD to DAI etc.","parameterDecorators":[{"name":"_count","description":"number like 100 or 30.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if the action complete.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setStableContractAddress(address)","name":"setStableContractAddress","description":"Contract Creator can change the stable currency contract address that memebrs use to deposit and withdraw eg. switch from BUSD to DAI etc.","parameterDecorators":[{"name":"_address","description":"The token contract address.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if the action complete.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"transferNativeToken(address,uint256)","name":"transferNativeToken","description":"Contract Creator can withdraw ether if accidentaly sent to this contract or otherwise.","parameterDecorators":[{"name":"recipient","description":"The wallet to receive the transfer.","recommendedTypes":[]},{"name":"amount","description":"mount to wthdraw.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if the action complete.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"transferToken(address,address,uint256,uint256)","name":"transferToken","description":"Transfers any ERC20 token found in this contract given the token contract address: only owner/admins can perform this action : should any token is accidentaly sent to the contract we can recover it with this.","parameterDecorators":[{"name":"contract_address","description":"The token contract address.","recommendedTypes":[]},{"name":"recipient","description":"address to receive the token.","recommendedTypes":[]},{"name":"amount","description":"Amount of token to be sent (in wei).","recommendedTypes":[]},{"name":"_admin_id","description":"ID of the admin calling the function.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if the action complete.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"updateMemberBalanceMapping(address,address)","name":"updateMemberBalanceMapping","description":"Contract Creator can update the member address if needed ----.","parameterDecorators":[{"name":"member_address","description":"","recommendedTypes":[]},{"name":"member_new_address","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawStableCurrency(uint256)","name":"withdrawStableCurrency","description":"Withdraw amount in wei posted by member to his wallet; $memberBalances must show the user have funds and contract must have fund, and allowWithdrawal is set to true by Owner substract the amount from member balance and update the member balance in MemberBalance => public balances;.","parameterDecorators":[{"name":"amount","description":"The amount of the token the member wants to withdraw(in wei).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}