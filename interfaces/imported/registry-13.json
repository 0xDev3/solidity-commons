{"schema":"../schema.json","tags":[],"name":"Registry","description":"The handler registry database for Furucombo.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when a user sells wTokens to the AMM. triggered when the system balance for a given token is updated.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"DEPRECATED()","name":"DEPRECATED","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"infos(address)","name":"infos","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"isValid(address)","name":"isValid","description":"Check if the handler is valid.","parameterDecorators":[{"name":"handler","description":"The handler to be verified.","recommendedTypes":[]}],"returnDecorators":[{"name":"result","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"register(address,bytes32)","name":"register","description":"Register a handler with a bytes32 information. Dapps that triggers callback function should also be registered. In this case, registration is the Dapp address and the leading 20 bytes of info is the handler address.","parameterDecorators":[{"name":"registration","description":"Handler address.","recommendedTypes":[]},{"name":"info","description":"Info string.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unregister(address)","name":"unregister","description":"Unregister a handler. The handler will be deprecated.","parameterDecorators":[{"name":"registration","description":"The handler to be unregistered.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}