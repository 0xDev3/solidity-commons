{
  "schema": "../schema.json",
  "tags": [
    "vaults"
  ],
  "name": "yVault_ZapIn_V2",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "zapIn(address,address,uint256)",
      "name": "zapIn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "pool",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokensRec",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ZapInCurveVault(address,uint256,address,address,uint256,address,bytes,address)",
      "name": "ZapInCurveVault",
      "description": "This function adds liquidity to a Yearn Curve vaults with ETH or ERC20 tokens.",
      "parameterDecorators": [
        {
          "name": "fromToken",
          "description": "The token used for entry (address(0) if ether).",
          "recommendedTypes": []
        },
        {
          "name": "amountIn",
          "description": "The amount of fromToken to invest.",
          "recommendedTypes": []
        },
        {
          "name": "toToken",
          "description": "Intermediate token to swap to.",
          "recommendedTypes": []
        },
        {
          "name": "toVault",
          "description": "Yearn vault address.",
          "recommendedTypes": []
        },
        {
          "name": "minYVTokens",
          "description": "The minimum acceptable quantity vault tokens to receive. Reverts otherwise.",
          "recommendedTypes": []
        },
        {
          "name": "_swapTarget",
          "description": "Excecution target for the swap.",
          "recommendedTypes": []
        },
        {
          "name": "swapData",
          "description": "DEX quote data.",
          "recommendedTypes": []
        },
        {
          "name": "affiliate",
          "description": "Affiliate address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "tokensReceived",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ZapInTokenVault(address,uint256,address,bool,uint256,address,bytes,address)",
      "name": "ZapInTokenVault",
      "description": "This function adds liquidity to a Yearn vaults with ETH or ERC20 tokens.",
      "parameterDecorators": [
        {
          "name": "fromToken",
          "description": "The token used for entry (address(0) if ether).",
          "recommendedTypes": []
        },
        {
          "name": "amountIn",
          "description": "The amount of fromToken to invest.",
          "recommendedTypes": []
        },
        {
          "name": "toVault",
          "description": "Yearn vault address.",
          "recommendedTypes": []
        },
        {
          "name": "isAaveUnderlying",
          "description": "True is vault contains aave token.",
          "recommendedTypes": []
        },
        {
          "name": "minYVTokens",
          "description": "The minimum acceptable quantity vault tokens to receive. Reverts otherwise.",
          "recommendedTypes": []
        },
        {
          "name": "_swapTarget",
          "description": "Excecution target for the swap.",
          "recommendedTypes": []
        },
        {
          "name": "swapData",
          "description": "DEX quote data.",
          "recommendedTypes": []
        },
        {
          "name": "affiliate",
          "description": "Affiliate address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "tokensReceived",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_owner()",
      "name": "_owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "affiliateBalance(address,address)",
      "name": "affiliateBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "affiliates(address)",
      "name": "affiliates",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "affilliateWithdraw(address[])",
      "name": "affilliateWithdraw",
      "description": "Withdraw affilliate share, retaining goodwill share.",
      "parameterDecorators": [
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "curveReg()",
      "name": "curveReg",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "curveZapIn()",
      "name": "curveZapIn",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feeWhitelist(address)",
      "name": "feeWhitelist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "goodwill()",
      "name": "goodwill",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "set_affiliate(address,bool)",
      "name": "set_affiliate",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_affiliate",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_status",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "set_feeWhitelist(address,bool)",
      "name": "set_feeWhitelist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "zapAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "status",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "set_new_affiliateSplit(uint16)",
      "name": "set_new_affiliateSplit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_new_affiliateSplit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "set_new_goodwill(uint16)",
      "name": "set_new_goodwill",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_new_goodwill",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stopped()",
      "name": "stopped",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toggleContractActive()",
      "name": "toggleContractActive",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalAffiliateBalance(address)",
      "name": "totalAffiliateBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateCurveRegistry(address)",
      "name": "updateCurveRegistry",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newCurveRegistry",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateCurveZapIn(address)",
      "name": "updateCurveZapIn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newCurveZapIn",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawTokens(address[])",
      "name": "withdrawTokens",
      "description": "Withdraw goodwill share, retaining affilliate share.",
      "parameterDecorators": [
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}