{"schema":"../schema.json","tags":["nft"],"name":"NFTYFactory","description":"","eventDecorators":[{"signature":"NewMinted(address)","name":"NewMinted","description":"when the auction of a token gets started.","parameterDecorators":[{"name":"newMintAddress","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"when the auction of a token gets started.","parameterDecorators":[{"name":"ntoken","description":"The address of the ntoken w.r.t. token for incentives.","recommendedTypes":[],"indexed":true},{"name":"owner","description":"The address of miner who opened the oracle.","recommendedTypes":[],"indexed":true},{"name":"token","description":"The address of the (ERC20) token.","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"when the auction of a token gets started.","parameterDecorators":[{"name":"ntoken","description":"The address of the ntoken w.r.t. token for incentives.","recommendedTypes":[],"indexed":true},{"name":"owner","description":"The address of miner who opened the oracle.","recommendedTypes":[],"indexed":true},{"name":"token","description":"The address of the (ERC20) token.","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"when the auction of a token gets started.","parameterDecorators":[{"name":"ntoken","description":"The address of the ntoken w.r.t. token for incentives.","recommendedTypes":[],"indexed":true},{"name":"owner","description":"The address of miner who opened the oracle.","recommendedTypes":[],"indexed":true},{"name":"token","description":"The address of the (ERC20) token.","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"addAirdrop(string,uint256,uint256,uint256,string,bytes,address[],uint256)","name":"addAirdrop","description":"Add airdrop.","parameterDecorators":[{"name":"_collectionName","description":"Collection name for minting.","recommendedTypes":[]},{"name":"_totalAmount","description":"How many copies to create.","recommendedTypes":[]},{"name":"_price","description":"","recommendedTypes":[]},{"name":"_royaltyAmount","description":"","recommendedTypes":[]},{"name":"_metadataURI","description":"Metadata URI.","recommendedTypes":[]},{"name":"_data","description":"Data. By default \"0x00\".","recommendedTypes":[]},{"name":"_recipients","description":"Array of recipients.","recommendedTypes":[]},{"name":"_amountEach","description":"How many copy each account will get.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Token ID of created airdrop.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"allAddresses(uint256)","name":"allAddresses","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"checkClaimableAirdrop(address,address)","name":"checkClaimableAirdrop","description":"Check if airdrop available.","parameterDecorators":[{"name":"_sender","description":"ID against which airdrop will be checked.","recommendedTypes":[]},{"name":"_addressOfClonedContract","description":"Address for which created nft list will return.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Indexes of Token IDs.","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"claimAirdrop(address,uint256,address)","name":"claimAirdrop","description":"Claim an airdrop.","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Address for which created nft list will return.","recommendedTypes":[]},{"name":"_index","description":"Index of an airdrop in struct array.","recommendedTypes":[]},{"name":"_sender","description":"ID against which airdrop will be checked.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True for successfully claimed. Otherwise False.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"getAllAddresses()","name":"getAllAddresses","description":"All cloned addresses.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"Array of all cloned addresses.","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getBalanceOf(address,address,uint256)","name":"getBalanceOf","description":"Returing owned amount of an NFT.","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Address of the cloned contract.","recommendedTypes":[]},{"name":"_account","description":"For the account which contains an NFT.","recommendedTypes":[]},{"name":"_tokenId","description":"Token ID.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Owned number.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getCreatedNFT(address,address)","name":"getCreatedNFT","description":"Returning created NFTs.","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Address for which created nft list will return.","recommendedTypes":[]},{"name":"_addressOfContractCreator","description":"Address of user.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"NFT IDs array.","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getERCtokenOwners(address,uint256)","name":"getERCtokenOwners","description":"All current owner of a token id.","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Address for which created nft list will return.","recommendedTypes":[]},{"name":"_tokenId","description":"Token ID.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Owner address array.","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getNFTCreator(address,uint256)","name":"getNFTCreator","description":"Returning NFT creators address.","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Address of the cloned contract.","recommendedTypes":[]},{"name":"_id","description":"Token ID.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"NFT Token creator's address.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getOwnedNFT(address)","name":"getOwnedNFT","description":"Returning Owned NFTs for a specific contract address.","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Address of the cloned contract.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Owned NFT IDs array.","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoyaltyInfo(address,uint256,uint256)","name":"getRoyaltyInfo","description":"","parameterDecorators":[{"name":"_addressOfClonedContract","description":"","recommendedTypes":[]},{"name":"tokenId","description":"","recommendedTypes":[]},{"name":"salePrice","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTokenPrice(address,uint256)","name":"getTokenPrice","description":"Return price of a perticular token.","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Token address.","recommendedTypes":[]},{"name":"tokenId","description":"Token id.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Token Price integer.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTrendingNFT(address)","name":"getTrendingNFT","description":"Returning Trending NFTs for a specific contract address.","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Address of the cloned contract.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Trending NFT IDs array.","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"implementedContractAddress()","name":"implementedContractAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"isTrustedForwarder(address)","name":"isTrustedForwarder","description":"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.","parameterDecorators":[{"name":"forwarder","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"mint(string,uint256,uint256,uint256,string,bytes)","name":"mint","description":"Minting an NFT.","parameterDecorators":[{"name":"_collectionName","description":"Collection Name to view in opensea.","recommendedTypes":[]},{"name":"_amount","description":"How many copies to create.","recommendedTypes":[]},{"name":"_price","description":"Token price.","recommendedTypes":[]},{"name":"_royaltyAmount","description":"","recommendedTypes":[]},{"name":"_metadataURI","description":"Metadata URI.","recommendedTypes":[]},{"name":"_data","description":"Data. By default \"0x00\".","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"NFT ID integer.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)","name":"onERC1155BatchReceived","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]},{"name":"param2","description":"","recommendedTypes":[]},{"name":"param3","description":"","recommendedTypes":[]},{"name":"param4","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes4"}],"emittableEvents":[],"readOnly":false},{"signature":"onERC1155Received(address,address,uint256,uint256,bytes)","name":"onERC1155Received","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]},{"name":"param2","description":"","recommendedTypes":[]},{"name":"param3","description":"","recommendedTypes":[]},{"name":"param4","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes4"}],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"ownerAddress(address)","name":"ownerAddress","description":"Returing an user deployed contract's owner address.","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Address of the cloned contract.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Contract owner address.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"purchaseToken(address,address,uint256,uint256)","name":"purchaseToken","description":"Purchase token.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[]},{"name":"_addressOfClonedContract","description":"Token address.","recommendedTypes":[]},{"name":"tokenId","description":"Token id.","recommendedTypes":[]},{"name":"amount","description":"Total no of token amount wants to purchase.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"setTrustForwarder(address)","name":"setTrustForwarder","description":"OPTIONAL You should add one setTrustedForwarder(address _trustedForwarder) method with onlyOwner modifier so you can change the trusted forwarder address to switch to some other meta transaction protocol if any better protocol comes tomorrow or current one is upgraded.","parameterDecorators":[{"name":"_trustedForwarderAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"transferNFT(address,address,uint256,uint256,bytes)","name":"transferNFT","description":"Transfer NFT (Change ownership).","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Address of the cloned contract.","recommendedTypes":[]},{"name":"_to","description":"In which account it will transfer (New Owner).","recommendedTypes":[]},{"name":"_id","description":"Token ID.","recommendedTypes":[]},{"name":"_amount","description":"Quantity.","recommendedTypes":[]},{"name":"_data","description":"Additional data.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"trustedForwarder()","name":"trustedForwarder","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"updateTokenPrice(address,uint256,uint256)","name":"updateTokenPrice","description":"Update price for token.","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Address for which nft price will be set.","recommendedTypes":[]},{"name":"tokenId","description":"Token id.","recommendedTypes":[]},{"name":"price","description":"Price of the token.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"uri(address,uint256)","name":"uri","description":"Returing URI of a token from specific contract address.","parameterDecorators":[{"name":"_addressOfClonedContract","description":"Address of the cloned contract.","recommendedTypes":[]},{"name":"_id","description":"Token ID.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Metadata URI of specific ID.","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"versionRecipient()","name":"versionRecipient","description":"Override this function. This version is to keep track of BaseRelayRecipient you are using in your contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true}]}