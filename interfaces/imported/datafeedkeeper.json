{
  "schema": "../schema.json",
  "tags": [],
  "name": "DataFeedKeeper",
  "description": "",
  "eventDecorators": [
    {
      "signature": "DefaultBridgeSenderAdapterUpdated(address)",
      "name": "DefaultBridgeSenderAdapterUpdated",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "_defaultBridgeSenderAdapter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "JobCooldownUpdated(uint256)",
      "name": "JobCooldownUpdated",
      "description": "Emitted when the owner updates the job cooldown. Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "_jobCooldown",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Keep3rSet(address)",
      "name": "Keep3rSet",
      "description": "Emitted when a new Keep3r contract is set. Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "_keep3r",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PendingGovernorAccepted(address)",
      "name": "PendingGovernorAccepted",
      "description": "Emitted when a new governor is set. Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "_newGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PendingGovernorSet(address,address)",
      "name": "PendingGovernorSet",
      "description": "Emitted when a new pending governor is set. Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "_governor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_pendingGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PoolWhitelisted(uint16,bytes32,bool)",
      "name": "PoolWhitelisted",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "_chainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_poolSalt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_isWhitelisted",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptPendingGovernor()",
      "name": "acceptPendingGovernor",
      "description": "Allows a proposed governor to accept the governance.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateSecondsAgos(uint32,uint32)",
      "name": "calculateSecondsAgos",
      "description": "Builds the secondsAgos array with periodLength between each datapoint.",
      "parameterDecorators": [
        {
          "name": "_periodLength",
          "description": "The resolution of the bridged datapoints.",
          "recommendedTypes": []
        },
        {
          "name": "_fromTimestamp",
          "description": "Last observed timestamp.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_secondsAgos",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dataFeed()",
      "name": "dataFeed",
      "description": "Gets the address of the DataFeed contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "defaultBridgeSenderAdapter()",
      "name": "defaultBridgeSenderAdapter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "forceWork(bytes32,uint32)",
      "name": "forceWork",
      "description": "Allows governor to choose a timestamp from which to send data (overcome !OLD error).",
      "parameterDecorators": [
        {
          "name": "_poolSalt",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_fromTimestamp",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "governor()",
      "name": "governor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "jobCooldown()",
      "name": "jobCooldown",
      "description": "Gets the job cooldown.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "keep3r()",
      "name": "keep3r",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingGovernor()",
      "name": "pendingGovernor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "periodLength()",
      "name": "periodLength",
      "description": "Gets the length of the bridged periods.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setDefaultBridgeSenderAdapter(address)",
      "name": "setDefaultBridgeSenderAdapter",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_defaultBridgeSenderAdapter",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setJobCooldown(uint256)",
      "name": "setJobCooldown",
      "description": "Sets the job cooldown.",
      "parameterDecorators": [
        {
          "name": "_jobCooldown",
          "description": "The job cooldown to be set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setKeep3r(address)",
      "name": "setKeep3r",
      "description": "Allows governor to set a new Keep3r contract.",
      "parameterDecorators": [
        {
          "name": "_keep3r",
          "description": "Address of the new Keep3r contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPendingGovernor(address)",
      "name": "setPendingGovernor",
      "description": "Allows a governor to propose a new governor.",
      "parameterDecorators": [
        {
          "name": "_pendingGovernor",
          "description": "Address of the proposed new governor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistPool(uint16,bytes32,bool)",
      "name": "whitelistPool",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_chainId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_poolSalt",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_isWhitelisted",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistPools(uint16[],bytes32[],bool[])",
      "name": "whitelistPools",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_chainIds",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_poolSalts",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_isWhitelisted",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistedPools(uint16,bytes32)",
      "name": "whitelistedPools",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "work(bytes32)",
      "name": "work",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_poolSalt",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "work(uint16,bytes32,uint24,tuple(uint32,int24)[])",
      "name": "work",
      "description": "Calls to send observations in the DataFeed contract.",
      "parameterDecorators": [
        {
          "name": "_chainId",
          "description": "The Ethereum chain identification.",
          "recommendedTypes": []
        },
        {
          "name": "_poolSalt",
          "description": "The pool salt defined by token0 token1 and fee.",
          "recommendedTypes": []
        },
        {
          "name": "_poolNonce",
          "description": "The nonce of the observations fetched by pool.",
          "recommendedTypes": []
        },
        {
          "name": "_observationsData",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "blockTimestamp",
              "description": "",
              "type": "uint32"
            },
            {
              "name": "tick",
              "description": "",
              "type": "int24"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "workable(uint16,bytes32,uint24)",
      "name": "workable",
      "description": "Returns if the job can be worked.",
      "parameterDecorators": [
        {
          "name": "_chainId",
          "description": "The destination chain ID.",
          "recommendedTypes": []
        },
        {
          "name": "_poolSalt",
          "description": "The pool salt defined by token0 token1 and fee.",
          "recommendedTypes": []
        },
        {
          "name": "_poolNonce",
          "description": "The nonce of the observations fetched by pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_isWorkable",
          "description": "Whether the job is workable or not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "workable(bytes32)",
      "name": "workable",
      "description": "Returns if the job can be worked.",
      "parameterDecorators": [
        {
          "name": "_poolSalt",
          "description": "The pool salt defined by token0 token1 and fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_isWorkable",
          "description": "Whether the job is workable or not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}