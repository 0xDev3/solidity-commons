{
  "schema": "../schema.json",
  "tags": [
    "dao"
  ],
  "name": "BuyBack",
  "description": "BuyBack: for Governor Dao.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event for token purchase logging. trigger notification of withdrawal.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Receive(address,uint256)",
      "name": "Receive",
      "description": "Event for token purchase logging. trigger notification of withdrawal.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ReceiveERC20(address,address,uint256)",
      "name": "ReceiveERC20",
      "description": "Event for token purchase logging. trigger notification of withdrawal.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "GDAO()",
      "name": "GDAO",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "GOV_VAULT()",
      "name": "GOV_VAULT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "TREASURY()",
      "name": "TREASURY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WETH()",
      "name": "WETH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "defeatMEV(uint256)",
      "name": "defeatMEV",
      "description": "",
      "parameterDecorators": [
        {
          "name": "minGDAOtoReceive",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "distributeGDAO()",
      "name": "distributeGDAO",
      "description": "is called automatically for sweepAll/sweepMany but not if you do an individual sweep.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdrawal(address,address)",
      "name": "emergencyWithdrawal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_coin",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_receiver",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdrawalAll(address)",
      "name": "emergencyWithdrawalAll",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_receiver",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdrawalETH(address)",
      "name": "emergencyWithdrawalETH",
      "description": "NOTE may be needed depending on price of GDAO. As ETH may pile up in the contract when adding liquidity.",
      "parameterDecorators": [
        {
          "name": "_receiver",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "forGovVault()",
      "name": "forGovVault",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "forLPool()",
      "name": "forLPool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "forTreasury()",
      "name": "forTreasury",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "gasReimbursement()",
      "name": "gasReimbursement",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint48"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastSweep()",
      "name": "lastSweep",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minGDAO()",
      "name": "minGDAO",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "receiveERC20(address,uint256)",
      "name": "receiveERC20",
      "description": "functon to receive a token. Use this instead of sending directly. must approve the token before transfer.",
      "parameterDecorators": [
        {
          "name": "_coin",
          "description": "is the address of the ERC20 to send.",
          "recommendedTypes": []
        },
        {
          "name": "_amm",
          "description": "is the ammount of the token to send.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sweepAll()",
      "name": "sweepAll",
      "description": "function sweeps all tokens ever deposited to contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sweepERC20(address)",
      "name": "sweepERC20",
      "description": "sweeps a token according to the percents defined through uniswap.",
      "parameterDecorators": [
        {
          "name": "_erc20ToSweep",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "false if there's a 0 balance of that token.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sweepGDAO(uint256)",
      "name": "sweepGDAO",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_amm",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sweepMany(address[])",
      "name": "sweepMany",
      "description": "sweeps any ammount of tokens.",
      "parameterDecorators": [
        {
          "name": "_erc20sToSweep",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sweepMax()",
      "name": "sweepMax",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sweepMin()",
      "name": "sweepMin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sweepTimeLock()",
      "name": "sweepTimeLock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokensReceived(uint256)",
      "name": "tokensReceived",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateConfig(uint256,uint256,uint256)",
      "name": "updateConfig",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_min",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_max",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_timelock",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateFundPlan(uint48,uint48,uint48,uint48)",
      "name": "updateFundPlan",
      "description": "owners function to update the percent rewards. notice, the rewards must sum to 100%. denominated as 10^14.",
      "parameterDecorators": [
        {
          "name": "_gasReimbursement",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_forGovVault",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_forLPool",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_forTreasury",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateTreasury(address)",
      "name": "updateTreasury",
      "description": "can update treasury as there are migration plans for it in the future.",
      "parameterDecorators": [
        {
          "name": "_new",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateVault(address)",
      "name": "updateVault",
      "description": "can update treasury as there are migration plans for it in the future.",
      "parameterDecorators": [
        {
          "name": "_new",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}