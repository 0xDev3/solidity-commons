{
  "schema": "../schema.json",
  "tags": [
    "nft"
  ],
  "name": "NFTMarketplace",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AdminBurned(uint256,uint32,uint256)",
      "name": "AdminBurned",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenProfileId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "curSellPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AdminMinted(uint32,uint256,address,uint256)",
      "name": "AdminMinted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "profileID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "curPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Burned(uint32,uint256,address,uint256,uint256)",
      "name": "Burned",
      "description": "",
      "parameterDecorators": [
        {
          "name": "profileID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cytrAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buybackPriceAtMoment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FinneyDeposited(uint256,address)",
      "name": "FinneyDeposited",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GotCYTRForNFT(uint32,address,uint256,uint256)",
      "name": "GotCYTRForNFT",
      "description": "",
      "parameterDecorators": [
        {
          "name": "profileID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cytrAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "priceAtMoment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Minted(uint32,uint256,address,uint256,uint256)",
      "name": "Minted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "profileID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cytrAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "priceAtMoment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SendCYTRForNFT(uint32,address,uint256,uint256)",
      "name": "SendCYTRForNFT",
      "description": "",
      "parameterDecorators": [
        {
          "name": "profileID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cytrAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buybackPriceAtMoment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokensDeposited(uint256,address)",
      "name": "TokensDeposited",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokensWithdrawn(uint256,address)",
      "name": "TokensWithdrawn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdrawn(uint256,address)",
      "name": "Withdrawn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "CANNOT_TRANSFER_TO_ZERO_ADDRESS()",
      "name": "CANNOT_TRANSFER_TO_ZERO_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "NOT_CURRENT_OWNER()",
      "name": "NOT_CURRENT_OWNER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addNFTProfile(uint32,uint256,uint256,string,uint32)",
      "name": "addNFTProfile",
      "description": "adds 'record' to 'database'.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": ", unique id of profiles.",
          "recommendedTypes": []
        },
        {
          "name": "price",
          "description": ", price of NFT assets which will be generated based on profile.",
          "recommendedTypes": []
        },
        {
          "name": "sell_price",
          "description": ", when we will buy out from owner (burn).",
          "recommendedTypes": []
        },
        {
          "name": "url",
          "description": ", url of NFT assets which will be generated based on profile.",
          "recommendedTypes": []
        },
        {
          "name": "limit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminBurn(uint256)",
      "name": "adminBurn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminMint(uint32,address,uint256)",
      "name": "adminMint",
      "description": "",
      "parameterDecorators": [
        {
          "name": "profileID",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buyNFT(uint32,uint256,address,uint256)",
      "name": "buyNFT",
      "description": "accepts payment only in CYTR(!) for mint NFT & calls external contract it is public function, i.e called by buyer via dApp buyer selects profile (profileID), provides own wallet address (_to) and dApp provides available _tokenId (for flexibility its calculation is not automatic on smart contract level, but it is possible to implement) - > nftContract.totalSupply()+1 why not recommended: outsite of smart contract with multiple simultaneous customers we can instanteneusly on level of backend determinte next free id. on CyclopsTokens smartcontract level it can be only calculated correctly after mint transaction is confirmed here utility function is implemented which is used by backend ,getNextTokenId() it is also possible to use setNextTokenId function (by owner) to reset token id if needed normal use is dApp requests next token id (tid = getNextTokenId()) and after that calls publicMint(profile, to, tid) it allows different dApps use different token ids areas like dapp1: tid = getNextTokenId() + 10000 dapp2: tid = getNextTokenId() + 20000.",
      "parameterDecorators": [
        {
          "name": "profileID",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "cytrAmount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(uint256)",
      "name": "deposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositTokens(uint256)",
      "name": "depositTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getContractBalance()",
      "name": "getContractBalance",
      "description": "returns contract balance, in wei.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getContractTokensBalance()",
      "name": "getContractTokensBalance",
      "description": "returns contract tokens balance.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLimitById(uint32)",
      "name": "getLimitById",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNFTContract()",
      "name": "getNFTContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNextTokenId()",
      "name": "getNextTokenId",
      "description": "getter for next_token_id.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPaymentToken()",
      "name": "getPaymentToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPriceById(uint32)",
      "name": "getPriceById",
      "description": "get price by id from 'database'.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": ", unique id of profiles.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPriceCurve()",
      "name": "getPriceCurve",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPriceManager()",
      "name": "getPriceManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProfileIdByTokenId(uint256)",
      "name": "getProfileIdByTokenId",
      "description": "",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProfileIdbyUrl(string)",
      "name": "getProfileIdbyUrl",
      "description": "",
      "parameterDecorators": [
        {
          "name": "url",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSellPriceById(uint32)",
      "name": "getSellPriceById",
      "description": "get sell price by id from 'database'.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": ", unique id of profiles.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenPriceByTokenId(uint256)",
      "name": "getTokenPriceByTokenId",
      "description": "",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUrlById(uint32)",
      "name": "getUrlById",
      "description": "get url by id from 'database'.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": ", unique id of profiles.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isFreeTokenId(uint256)",
      "name": "isFreeTokenId",
      "description": "",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPriceCurveInternal()",
      "name": "isPriceCurveInternal",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nftProfiles(uint256)",
      "name": "nftProfiles",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "sell_price",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "url",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "limit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeNFTProfileAtId(uint32)",
      "name": "removeNFTProfileAtId",
      "description": "removes 'record' to 'database'.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "(profile id).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "replaceNFTProfileAtId(uint32,uint256,uint256,string,uint32)",
      "name": "replaceNFTProfileAtId",
      "description": "replaces 'record' in the 'database'.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": ", unique id of profile.",
          "recommendedTypes": []
        },
        {
          "name": "price",
          "description": ", price of NFT assets which will be generated based on profile.",
          "recommendedTypes": []
        },
        {
          "name": "sell_price",
          "description": ", sell price (back to owner) of NFT assets when owner sell to us (and we burn).",
          "recommendedTypes": []
        },
        {
          "name": "url",
          "description": ", url of NFT assets which will be generated based on profile.",
          "recommendedTypes": []
        },
        {
          "name": "limit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "replaceNFTProfileAtIndex(uint32,uint32,uint256,uint256,string,uint32)",
      "name": "replaceNFTProfileAtIndex",
      "description": "replaces 'record' in the 'database'.",
      "parameterDecorators": [
        {
          "name": "atIndex",
          "description": ", at which row of array to make replacement.",
          "recommendedTypes": []
        },
        {
          "name": "id",
          "description": ", unique id of profiles.",
          "recommendedTypes": []
        },
        {
          "name": "price",
          "description": ", price of NFT assets which will be generated based on profile.",
          "recommendedTypes": []
        },
        {
          "name": "sell_price",
          "description": ", sell price (back to owner) of NFT assets when owner sell to us (and we burn).",
          "recommendedTypes": []
        },
        {
          "name": "url",
          "description": ", url of NFT assets which will be generated based on profile.",
          "recommendedTypes": []
        },
        {
          "name": "limit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sellNFTBack(uint256)",
      "name": "sellNFTBack",
      "description": "method allows collectible owner to sell it back for sell price collectible is burned, amount of sell price returned to owner of collectible tokenId -> tokenProfileId -> sell price.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setExternalPriceCurve()",
      "name": "setExternalPriceCurve",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setInternalPriceCurve()",
      "name": "setInternalPriceCurve",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNFTContract(address)",
      "name": "setNFTContract",
      "description": "setter/getter for NFT publisher linked to 'marketplace' smartcontract.",
      "parameterDecorators": [
        {
          "name": "newNFTContract",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNextTokenId(uint32)",
      "name": "setNextTokenId",
      "description": "setter for next_token_id.",
      "parameterDecorators": [
        {
          "name": "setId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPaymentToken(address)",
      "name": "setPaymentToken",
      "description": "setter/getter for ERC20 linked to exchange (current) smartcontract.",
      "parameterDecorators": [
        {
          "name": "newERC20Contract",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPriceById(uint32,uint256)",
      "name": "setPriceById",
      "description": "set new price for asset (profile of NFT), price for which customer can buy.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": ", unique id of profiles.",
          "recommendedTypes": []
        },
        {
          "name": "new_price",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPriceCurve(uint256)",
      "name": "setPriceCurve",
      "description": "",
      "parameterDecorators": [
        {
          "name": "new_curve",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPriceManagerRight(address)",
      "name": "setPriceManagerRight",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newPriceManager",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSellPriceById(uint32,uint256)",
      "name": "setSellPriceById",
      "description": "set new sell (buy back) price for asset (profile of NFT), price for which customer can sell to us.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": ", unique id of profiles.",
          "recommendedTypes": []
        },
        {
          "name": "new_price",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setupFrom(address,uint32)",
      "name": "setupFrom",
      "description": "adds - do not use if you do not know what is it, it will destroy current contract data.",
      "parameterDecorators": [
        {
          "name": "mpContractAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "lenght",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to transfer control of the contract to a newOwner.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePricesById(uint32,uint256,uint256)",
      "name": "updatePricesById",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "new_price",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "new_sell_price",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "viewNFTProfileDetails(uint32)",
      "name": "viewNFTProfileDetails",
      "description": "return price, sell_price & url for profile by id.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "viewNFTProfilesPrices()",
      "name": "viewNFTProfilesPrices",
      "description": "return array of strings is not supported by solidity, we return ids & prices.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32[]"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(address,uint256)",
      "name": "withdraw",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sendTo",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawTokens(address,uint256)",
      "name": "withdrawTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "to_wallet",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "realAmountTokens",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}