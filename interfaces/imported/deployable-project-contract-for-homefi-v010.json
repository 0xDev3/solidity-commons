{"schema":"../schema.json","tags":[],"name":"Project","description":"Deployable Project Contract for HomeFi v0.1.0. This contract is created as a clone copy for the end user. This contract is for project management of HomeFi. Project contract responsible for aggregating payments and data by/ for users on-chain.","eventDecorators":[],"functionDecorators":[{"signature":"acceptInviteSC(uint256[])","name":"acceptInviteSC","description":"accept invite as subcontractor for a particular task. Only subcontractor invited can call this. subcontractor must be unapproved.","parameterDecorators":[{"name":"_taskList","description":"the task list of indexes for which sender wants to accept invite.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addPhasesGC(bytes,bytes)","name":"addPhasesGC","description":"change order to add phases in project. signature of both builder and contractor required. modifier contractorAccepted.","parameterDecorators":[{"name":"_data","description":"bytes encoded from- - uint256[] _phaseCosts array where each element represent phase cost, length of this array is number of phase to be added - uint256 _phaseCount current phase count, for signature security - address _projectAddress this project address, for signature security.","recommendedTypes":[]},{"name":"_signature","description":"bytes representing signature on _data by builder and contractor.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addTasks(bytes,bytes)","name":"addTasks","description":"adds tasks in a particular phase. Needs both builder and contractor signature. contractor must be approved.","parameterDecorators":[{"name":"_data","description":"bytes encoded from- - uint256 _phaseID phase number in which tasks are added - bytes[] _hash bytes ipfs hash of task details - uint256[] _cost an array of cost for each task index - address[] _sc an array subcontractor address for each task index - uint256 _taskCount current task count before adding these tasks. Can be fetched by taskCount. For signature security. - address _projectAddress the address of this contract. For signature security.","recommendedTypes":[]},{"name":"_signature","description":"bytes representing signature on _data by builder and contractor.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"builder()","name":"builder","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"builderFee()","name":"builderFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"changeCostGC(bytes,bytes)","name":"changeCostGC","description":"change order to change cost of existing phases. signature of both builder and contractor required. modifier contractorAccepted.","parameterDecorators":[{"name":"_data","description":"bytes encoded from- - uint256[] _phaseList array of phase indexes that needs to be updated - uint256[] _phaseCosts cost that needs to be updated for each phase index in _phaseList - address _projectAddress this project address, for signature security.","recommendedTypes":[]},{"name":"_signature","description":"bytes representing signature on _data by builder and contractor.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"changeOrder(bytes,bytes)","name":"changeOrder","description":"change order to change a task's subcontractor, cost or both. Needs builder,contractor and subcontractor signature.","parameterDecorators":[{"name":"_data","description":"bytes encoded from- - uint256 _phaseID index of phase in which the task is present - uint256 _taskID index of the task - address _newSC address of new subcontractor. If do not want to replace subcontractor, then pass address of existing subcontractor. - uint256 _newCost new cost for the task. If do not want to change cost, then pass existing cost. - address _project address of project.","recommendedTypes":[]},{"name":"_signature","description":"bytes representing signature on _data by builder,contractor and subcontractor.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"contractor()","name":"contractor","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"contractorConfirmed()","name":"contractorConfirmed","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"currency()","name":"currency","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"fundProject()","name":"fundProject","description":"allocates funds for unallocated tasks and phases, and mark them as funded. this is by default called by investInProject. But when unallocated task/phase count are beyond 50 then this is needed to be called externally.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getAlerts(uint256)","name":"getAlerts","description":"VIEWABLE FUNCTIONS ///.","parameterDecorators":[{"name":"_taskID","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_alerts","description":"","recommendedTypes":[],"solidityType":"bool[3]"}],"emittableEvents":[],"readOnly":true},{"signature":"getPhaseToTaskList(uint256)","name":"getPhaseToTaskList","description":"returns tasks index array in a phase.","parameterDecorators":[{"name":"_phaseID","description":"phase index for fetching tasks.","recommendedTypes":[]}],"returnDecorators":[{"name":"_taskList","description":"uint256[] task indexes.","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"hashChangeNonce()","name":"hashChangeNonce","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"homeFi()","name":"homeFi","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,address,address)","name":"initialize","description":"initialize this contract with required parameters. This is initialized by HomeFi contract. modifier initializer.","parameterDecorators":[{"name":"_currency","description":"currency address for this project.","recommendedTypes":[]},{"name":"_sender","description":"address of the creator / builder for this project.","recommendedTypes":[]},{"name":"_homeFiAddress","description":"address of the HomeFi contract.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"investInProject(uint256)","name":"investInProject","description":"allows investing in the project, also funds 50 phase and tasks. If the project currency is ERC20 token, then before calling this function the sender must approve the tokens to this contract. If the project's currency is native, then user can also pay in the native currencyby passing msg.value, it will be converted in to wrapped tokens internallycan only be called by builder or community contract(via investor).","parameterDecorators":[{"name":"_cost","description":"the cost that is needed to be invested.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"investorFee()","name":"investorFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"inviteContractor(bytes,bytes)","name":"inviteContractor","description":"Contractor with fee schedule can be added to project. nonReentrant.","parameterDecorators":[{"name":"_data","description":"bytes encoded from- - address _contractor: address of project contractor - uint256[] _phaseCosts: array where each element represent phase cost, length of this array is number of phase to be added - address _projectAddress this project address, for signature security.","recommendedTypes":[]},{"name":"_signature","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"inviteSC(uint256[],address[])","name":"inviteSC","description":"invite subcontractors for existing tasks. This can be called by builder or contractor. this function internally calls _inviteSC. _taskList must not have a task which already has approved subcontractor.","parameterDecorators":[{"name":"_taskList","description":"array the task index for which subcontractors needs to be assigned.","recommendedTypes":[]},{"name":"_scList","description":"array of addresses of subcontractor for the respective task index.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isTrustedForwarder(address)","name":"isTrustedForwarder","description":"checks trustedForwarder on HomeFi contract.","parameterDecorators":[{"name":"_forwarder","description":"address of contract forwarding meta tx.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"phaseCount()","name":"phaseCount","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"phases(uint256)","name":"phases","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"phaseCost","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"paid","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"projectCost()","name":"projectCost","description":"returns cost of project. Cost of project is sum of phase and task costs.","parameterDecorators":[],"returnDecorators":[{"name":"_cost","description":"uint256 cost of project.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"raiseDispute(bytes,bytes)","name":"raiseDispute","description":"Raise a dispute to arbitrate & potentially enforce requested state changes. prolly reentrant.","parameterDecorators":[{"name":"_data","description":"bytes - 0: project address, 1: task id (0 if none), 2: action type, 3: action data, 5: ipfs cid of pdf - const types = [\"address\", \"uint256\", \"uint8\", \"bytes\", \"bytes\"].","recommendedTypes":[]},{"name":"_signature","description":"bytes - hash of _data signed by the address raising dispute.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"recoverTokens(address)","name":"recoverTokens","description":"recover any amount sent mistakenly to this contract. Funds are transferred to builder account. If _tokenAddress is equal to this project currency, then we will first check is all the phases are complete. If _tokenAddress is equal to this project currency, then we will first check is all the phases are complete.","parameterDecorators":[{"name":"_tokenAddress","description":"- address address for the token user wants to recover.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"releaseFeeContractor(uint256)","name":"releaseFeeContractor","description":"release phase payment of a contractor. modifier contractorAccepted.","parameterDecorators":[{"name":"_phaseID","description":"the phase index for which the payment needs to be released.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setComplete(bytes,bytes)","name":"setComplete","description":"mark a task a complete and release subcontractor payment. Needs builder,contractor and subcontractor signature. task must be in active state.","parameterDecorators":[{"name":"_data","description":"bytes encoded from- - uint256 _taskID the index of task - address _projectAddress the address of this contract. For signature security.","recommendedTypes":[]},{"name":"_signature","description":"bytes representing signature on _data by builder,contractor and subcontractor.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"taskCount()","name":"taskCount","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"tasks(uint256)","name":"tasks","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"cost","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"subcontractor","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"state","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"totalAllocated()","name":"totalAllocated","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"totalInvested()","name":"totalInvested","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"updateProjectHash(bytes,bytes)","name":"updateProjectHash","description":"update project ipfs hash with adequate signatures. If contractor is approved then both builder and contractor signature needed. Else only builder's.","parameterDecorators":[{"name":"_data","description":"bytes encoded from- - bytes _hash bytes encoded ipfs hash. - uint256 _nonce current hashChangeNonce.","recommendedTypes":[]},{"name":"_signature","description":"bytes representing signature on _data by required members.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateTaskHash(bytes,bytes)","name":"updateTaskHash","description":"update ipfs hash for a particular task. If subcontractor is approved then builder, contractor and subcontractor signature needed. Else only builder and contractor.","parameterDecorators":[{"name":"_data","description":"bytes encoded from- - bytes[] _hash bytes ipfs hash of task details - uint256 _nonce current hashChangeNonce - uint256 _taskID task index.","recommendedTypes":[]},{"name":"_signature","description":"bytes representing signature on _data by required members.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}