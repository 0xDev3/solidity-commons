{
  "schema": "../schema.json",
  "tags": [],
  "name": "ACOPoolFactory2V2",
  "description": "",
  "eventDecorators": [
    {
      "signature": "NewAcoPool(address,address,bool,address,address)",
      "name": "NewAcoPool",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "underlying",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "strikeAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "isCall",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "acoPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "acoPoolImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetAcoFactory(address,address)",
      "name": "SetAcoFactory",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "previousAcoFactory",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAcoFactory",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAcoPoolFee(uint256,uint256)",
      "name": "SetAcoPoolFee",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "previousAcoFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAcoFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAcoPoolFeeDestination(address,address)",
      "name": "SetAcoPoolFeeDestination",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "previousAcoPoolFeeDestination",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAcoPoolFeeDestination",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAcoPoolImplementation(address,address)",
      "name": "SetAcoPoolImplementation",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "previousAcoPoolImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAcoPoolImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAcoPoolLendingPool(address,address)",
      "name": "SetAcoPoolLendingPool",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "oldLendingPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newLendingPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAcoPoolLendingPoolReferral(uint256,uint256)",
      "name": "SetAcoPoolLendingPoolReferral",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "oldLendingPoolReferral",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newLendingPoolReferral",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAcoPoolMaximumOpenAco(uint256,uint256)",
      "name": "SetAcoPoolMaximumOpenAco",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "previousMaximumOpenAco",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newMaximumOpenAco",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAcoPoolPermission(address,bool,bool)",
      "name": "SetAcoPoolPermission",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "poolAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousPermission",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newPermission",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAcoPoolUnderlyingPriceAdjustPercentage(uint256,uint256)",
      "name": "SetAcoPoolUnderlyingPriceAdjustPercentage",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "previousUnderlyingPriceAdjustPercentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newUnderlyingPriceAdjustPercentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAcoPoolWithdrawOpenPositionPenalty(uint256,uint256)",
      "name": "SetAcoPoolWithdrawOpenPositionPenalty",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "previousWithdrawOpenPositionPenalty",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newWithdrawOpenPositionPenalty",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAssetConverterHelper(address,address)",
      "name": "SetAssetConverterHelper",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "previousAssetConverterHelper",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAssetConverterHelper",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetChiToken(address,address)",
      "name": "SetChiToken",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "previousChiToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newChiToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetFactoryAdmin(address,address)",
      "name": "SetFactoryAdmin",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "previousFactoryAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newFactoryAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetStrategyPermission(address,bool,bool)",
      "name": "SetStrategyPermission",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source. Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "strategy",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousPermission",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newPermission",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acoFactory()",
      "name": "acoFactory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acoPoolBasicData(address)",
      "name": "acoPoolBasicData",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "underlying",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "strikeAsset",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "isCall",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acoPoolFee()",
      "name": "acoPoolFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acoPoolFeeDestination()",
      "name": "acoPoolFeeDestination",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acoPoolImplementation()",
      "name": "acoPoolImplementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acoPoolMaximumOpenAco()",
      "name": "acoPoolMaximumOpenAco",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acoPoolUnderlyingPriceAdjustPercentage()",
      "name": "acoPoolUnderlyingPriceAdjustPercentage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acoPoolWithdrawOpenPositionPenalty()",
      "name": "acoPoolWithdrawOpenPositionPenalty",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetConverterHelper()",
      "name": "assetConverterHelper",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "chiToken()",
      "name": "chiToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createAcoPool(address,address,bool,uint256,uint256,uint256,uint256,address,uint256)",
      "name": "createAcoPool",
      "description": "Function to create a new ACO pool. It deploys a minimal proxy for the ACO pool implementation address.",
      "parameterDecorators": [
        {
          "name": "underlying",
          "description": "Address of the underlying asset (0x0 for Ethereum).",
          "recommendedTypes": []
        },
        {
          "name": "strikeAsset",
          "description": "Address of the strike asset (0x0 for Ethereum).",
          "recommendedTypes": []
        },
        {
          "name": "isCall",
          "description": "True if the type is CALL, false for PUT.",
          "recommendedTypes": []
        },
        {
          "name": "tolerancePriceBelow",
          "description": "The below tolerance price percentage for ACO tokens.",
          "recommendedTypes": []
        },
        {
          "name": "tolerancePriceAbove",
          "description": "The above tolerance price percentage for ACO tokens.",
          "recommendedTypes": []
        },
        {
          "name": "minExpiration",
          "description": "The minimum expiration seconds after the current time for ACO tokens.",
          "recommendedTypes": []
        },
        {
          "name": "maxExpiration",
          "description": "The maximum expiration seconds after the current time for ACO tokens.",
          "recommendedTypes": []
        },
        {
          "name": "strategy",
          "description": "Address of the pool strategy to be used.",
          "recommendedTypes": []
        },
        {
          "name": "baseVolatility",
          "description": "The base volatility for the pool starts. It is a percentage value (100000 is 100%).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The created ACO pool address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "factoryAdmin()",
      "name": "factoryAdmin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "init(address,address,address,address,address,uint256,address,uint256,uint256,uint256)",
      "name": "init",
      "description": "Function to initialize the contract. It should be called through the `data` argument when creating the proxy. It must be called only once. The first `require` is to guarantee that behavior.",
      "parameterDecorators": [
        {
          "name": "_factoryAdmin",
          "description": "Address of the factory admin.",
          "recommendedTypes": []
        },
        {
          "name": "_acoPoolImplementation",
          "description": "Address of the ACO pool implementation.",
          "recommendedTypes": []
        },
        {
          "name": "_acoFactory",
          "description": "Address of the ACO token factory.",
          "recommendedTypes": []
        },
        {
          "name": "_assetConverterHelper",
          "description": "Address of the asset converter helper.",
          "recommendedTypes": []
        },
        {
          "name": "_chiToken",
          "description": "Address of the Chi token.",
          "recommendedTypes": []
        },
        {
          "name": "_acoPoolFee",
          "description": "ACO pool fee percentage.",
          "recommendedTypes": []
        },
        {
          "name": "_acoPoolFeeDestination",
          "description": "ACO pool fee destination.",
          "recommendedTypes": []
        },
        {
          "name": "_acoPoolWithdrawOpenPositionPenalty",
          "description": "ACO pool penalty percentage on withdrawing open positions.",
          "recommendedTypes": []
        },
        {
          "name": "_acoPoolUnderlyingPriceAdjustPercentage",
          "description": "ACO pool underlying price percentage adjust.",
          "recommendedTypes": []
        },
        {
          "name": "_acoPoolMaximumOpenAco",
          "description": "ACO pool maximum number of open ACOs allowed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lendingPool()",
      "name": "lendingPool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lendingPoolReferral()",
      "name": "lendingPoolReferral",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolAdminPermission(address)",
      "name": "poolAdminPermission",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAcoFactory(address)",
      "name": "setAcoFactory",
      "description": "Function to set the ACO factory address. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newAcoFactory",
          "description": "Address of the ACO token factory.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoPermissionDataOnAcoPool(uint256[],uint256[],uint256[],uint256[],address[])",
      "name": "setAcoPermissionDataOnAcoPool",
      "description": "Function to change the ACO pools fee data. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "tolerancePricesBelow",
          "description": "Array of the below tolerance price percentages.",
          "recommendedTypes": []
        },
        {
          "name": "tolerancePricesAbove",
          "description": "Array of the above tolerance price percentages.",
          "recommendedTypes": []
        },
        {
          "name": "minExpirations",
          "description": "Array of the minimum expirations.",
          "recommendedTypes": []
        },
        {
          "name": "maxExpirations",
          "description": "Array of the maximum expirations.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoPoolFee(uint256)",
      "name": "setAcoPoolFee",
      "description": "Function to set the ACO Pool fee. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newAcoPoolFee",
          "description": "Value of the new ACO Pool fee. It is a percentage value (100000 is 100%).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoPoolFeeDestination(address)",
      "name": "setAcoPoolFeeDestination",
      "description": "Function to set the ACO Pool destination address. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newAcoPoolFeeDestination",
          "description": "Address of the new ACO Pool destination.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoPoolImplementation(address)",
      "name": "setAcoPoolImplementation",
      "description": "Function to set the ACO pool implementation address. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newAcoPoolImplementation",
          "description": "Address of the new ACO pool implementation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoPoolLendingPool(address)",
      "name": "setAcoPoolLendingPool",
      "description": "Function to set the lending pool. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newLendingPool",
          "description": "Address of the new lending pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoPoolLendingPoolReferral(uint16)",
      "name": "setAcoPoolLendingPoolReferral",
      "description": "Function to set the lending pool referral. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newLendingPoolReferral",
          "description": "Value of the new lending pool referral.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoPoolMaximumOpenAco(uint256)",
      "name": "setAcoPoolMaximumOpenAco",
      "description": "Function to set the ACO Pool maximum number of open ACOs allowed. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newMaximumOpenAco",
          "description": "Value of the new ACO Pool maximum number of open ACOs allowed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoPoolPermission(address,bool)",
      "name": "setAcoPoolPermission",
      "description": "Function to set the ACO pool permission. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "poolAdmin",
          "description": "Address of the pool admin.",
          "recommendedTypes": []
        },
        {
          "name": "newPermission",
          "description": "The permission to be set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoPoolStrategyPermission(address,bool)",
      "name": "setAcoPoolStrategyPermission",
      "description": "Function to set the ACO pool strategies permitted. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "strategy",
          "description": "Address of the strategy.",
          "recommendedTypes": []
        },
        {
          "name": "newPermission",
          "description": "The permission to be set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoPoolUnderlyingPriceAdjustPercentage(uint256)",
      "name": "setAcoPoolUnderlyingPriceAdjustPercentage",
      "description": "Function to set the ACO Pool underlying price percentage adjust. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newUnderlyingPriceAdjustPercentage",
          "description": "Value of the new ACO Pool underlying price percentage adjust. It is a percentage value (100000 is 100%).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcoPoolWithdrawOpenPositionPenalty(uint256)",
      "name": "setAcoPoolWithdrawOpenPositionPenalty",
      "description": "Function to set the ACO Pool penalty percentage on withdrawing open positions. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newWithdrawOpenPositionPenalty",
          "description": "Value of the new ACO Pool penalty percentage on withdrawing open positions. It is a percentage value (100000 is 100%).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAssetConverterHelper(address)",
      "name": "setAssetConverterHelper",
      "description": "Function to set the asset converter helper address. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newAssetConverterHelper",
          "description": "Address of the new asset converter helper.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAssetConverterOnAcoPool(address[],address[])",
      "name": "setAssetConverterOnAcoPool",
      "description": "Function to change the ACO pools asset converters. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "assetConverters",
          "description": "Array of the asset converters.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBaseVolatilityOnAcoPool(uint256[],address[])",
      "name": "setBaseVolatilityOnAcoPool",
      "description": "Function to change the ACO pools base volatilities. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "baseVolatilities",
          "description": "Array of the base volatilities to be set.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setChiToken(address)",
      "name": "setChiToken",
      "description": "Function to set the Chi Token address. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newChiToken",
          "description": "Address of the new Chi Token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFactoryAdmin(address)",
      "name": "setFactoryAdmin",
      "description": "Function to set the factory admin address. Only can be called by the factory admin.",
      "parameterDecorators": [
        {
          "name": "newFactoryAdmin",
          "description": "Address of the new factory admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeDataOnAcoPool(address[],uint256[],address[])",
      "name": "setFeeDataOnAcoPool",
      "description": "Function to change the ACO pools fee data. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "feeDestinations",
          "description": "Array of the fee destinations addresses.",
          "recommendedTypes": []
        },
        {
          "name": "fees",
          "description": "Array of the fee percentages.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeDestinationOnAcoPool(address[],address[])",
      "name": "setFeeDestinationOnAcoPool",
      "description": "Function to change the ACO pools fee destinations. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "feeDestinations",
          "description": "Array of the fee destinations.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeOnAcoPool(uint256[],address[])",
      "name": "setFeeOnAcoPool",
      "description": "Function to change the ACO pools fee. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "fees",
          "description": "Array of the fees.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setLendingPoolReferralOnAcoPool(uint256[],address[])",
      "name": "setLendingPoolReferralOnAcoPool",
      "description": "Function to change the ACO pools lending pool referrals. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "lendingPoolReferrals",
          "description": "Array of the lending pool referrals.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxExpirationOnAcoPool(uint256[],address[])",
      "name": "setMaxExpirationOnAcoPool",
      "description": "Function to change the ACO pools maximum expirations. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "maxExpirations",
          "description": "Array of the maximum expirations to be set.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaximumOpenAcoOnAcoPool(uint256[],address[])",
      "name": "setMaximumOpenAcoOnAcoPool",
      "description": "Function to change the ACO pools maximum number of open ACOs allowed. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "maximumOpenAcos",
          "description": "Array of the maximum number of open ACOs allowed.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinExpirationOnAcoPool(uint256[],address[])",
      "name": "setMinExpirationOnAcoPool",
      "description": "Function to change the ACO pools minimum expirations. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "minExpirations",
          "description": "Array of the minimum expirations.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStrategyOnAcoPool(address,address[])",
      "name": "setStrategyOnAcoPool",
      "description": "Function to change the ACO pools strategy. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "strategy",
          "description": "Address of the strategy to be set.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTolerancePriceAboveOnAcoPool(uint256[],address[])",
      "name": "setTolerancePriceAboveOnAcoPool",
      "description": "Function to change the ACO pools above tolerance prices percentages. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "tolerancePricesAbove",
          "description": "Array of the above tolerance prices percentages to be set.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTolerancePriceBelowOnAcoPool(uint256[],address[])",
      "name": "setTolerancePriceBelowOnAcoPool",
      "description": "Function to change the ACO pools below tolerance prices percentages. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "tolerancePricesBelow",
          "description": "Array of the below tolerance prices percentages to be set.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUnderlyingPriceAdjustPercentageOnAcoPool(uint256[],address[])",
      "name": "setUnderlyingPriceAdjustPercentageOnAcoPool",
      "description": "Function to change the ACO pools underlying prices percentages adjust. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "underlyingPriceAdjustPercentages",
          "description": "Array of the underlying prices percentages to be set.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setValidAcoCreatorOnAcoPool(address,bool,address[])",
      "name": "setValidAcoCreatorOnAcoPool",
      "description": "Function to change the ACO pools ACO creator permission. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "acoCreator",
          "description": "Address of the ACO creator.",
          "recommendedTypes": []
        },
        {
          "name": "permission",
          "description": "Permission situation.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWithdrawOpenPositionPenaltyOnAcoPool(uint256[],address[])",
      "name": "setWithdrawOpenPositionPenaltyOnAcoPool",
      "description": "Function to change the ACO pools penalties percentages on withdrawing open positions. Only can be called by a pool admin.",
      "parameterDecorators": [
        {
          "name": "withdrawOpenPositionPenalties",
          "description": "Array of the penalties percentages on withdrawing open positions to be set.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "strategyPermitted(address)",
      "name": "strategyPermitted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawStuckAssetOnAcoPool(address,address,address[])",
      "name": "withdrawStuckAssetOnAcoPool",
      "description": "Function to withdraw the ACO pools stucked asset.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "Address of the asset.",
          "recommendedTypes": []
        },
        {
          "name": "destination",
          "description": "Address of the destination.",
          "recommendedTypes": []
        },
        {
          "name": "acoPools",
          "description": "Array of ACO pools addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}