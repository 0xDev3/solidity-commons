{"schema":"../schema.json","tags":["tokens"],"name":"LAPISMigrator","description":"LAPISMigrator. This contract implements the migration from old to new LAPIS token.","eventDecorators":[{"signature":"LAPISMigrated(address,uint256)","name":"LAPISMigrated","description":"emitted on migration.","parameterDecorators":[{"name":"sender","description":"the caller of the migration.","recommendedTypes":[],"indexed":true},{"name":"amount","description":"the amount being migrated.","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"claimOwnership()","name":"claimOwnership","description":"Needs to be called by `pendingOwner` to claim ownership.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deadline()","name":"deadline","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"migrateLAPIS(uint256)","name":"migrateLAPIS","description":"executes the migration from old LAPIS to new LAPIS. Users need to give allowance to this contract to transfer old LAPIS before executing this transaction. Migration needs to be done before the deadline.","parameterDecorators":[{"name":"_amount","description":"the amount of old LAPIS to be migrated.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"newLAPIS()","name":"newLAPIS","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"oldLAPIS()","name":"oldLAPIS","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingOwner()","name":"pendingOwner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"recoverBNB()","name":"recoverBNB","description":"recover BNB from the contract.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"recoverBep20(address)","name":"recoverBep20","description":"recover BEP20 token from the contract. Old and new LAPIS tokens can be withdraw to be burned after the migration deadline.","parameterDecorators":[{"name":"_token","description":"Bep20 token address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"totalLAPISMigrated()","name":"totalLAPISMigrated","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address,bool)","name":"transferOwnership","description":"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.","parameterDecorators":[{"name":"_newOwner","description":"Address of the new owner.","recommendedTypes":[]},{"name":"_direct","description":"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}