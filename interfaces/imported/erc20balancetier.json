{"schema":"../schema.json","tags":["tokens","flash loans","loans","locking","voting"],"name":"ERC20BalanceTier","description":"ERC20BalanceTier. `ERC20BalanceTier` inherits from `ReadOnlyTier`. There is no internal accounting, the balance tier simply reads the balance of the user whenever `report` is called. `setTier` always fails. There is no historical information so each tier will either be `0x00000000` or `0xFFFFFFFF` for the block number.","eventDecorators":[{"signature":"Initialize(address,address)","name":"Initialize","description":"Result of initialize.","parameterDecorators":[{"name":"sender","description":"`msg.sender` of the initialize.","recommendedTypes":[],"indexed":false},{"name":"erc20","description":"erc20 token to check balance of.","recommendedTypes":[],"indexed":false}]},{"signature":"InitializeValueTier(address,address)","name":"InitializeValueTier","description":"TODO: Typescript errors on uint256[8] so can't include tierValues here.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":false},{"name":"pointer","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TierChange(address,address,uint256,uint256,bytes)","name":"TierChange","description":"Every time a tier changes we log start and end tier against the account. This MAY NOT be emitted if reports are being read from the state of an external contract. The start tier MAY be lower than the current tier as at the block this event is emitted in.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":false},{"name":"account","description":"","recommendedTypes":[],"indexed":false},{"name":"startTier","description":"","recommendedTypes":[],"indexed":false},{"name":"endTier","description":"","recommendedTypes":[],"indexed":false},{"name":"data","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"initialize(tuple(address,uint256[8]))","name":"initialize","description":"","parameterDecorators":[{"name":"config_","description":"Initialize config.","recommendedTypes":[],"parameters":[{"name":"erc20","description":"","type":"address"},{"name":"tierValues","description":"","type":"uint256[8]"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"report(address)","name":"report","description":"Report simply truncates all tiers above the highest value held. Returns the earliest block the account has held each tier for continuously. This is encoded as a uint256 with blocks represented as 8x concatenated uint32. I.e. Each 4 bytes of the uint256 represents a u32 tier start time. The low bits represent low tiers and high bits the high tiers. Implementing contracts should return 0xFFFFFFFF for lost and never-held tiers.","parameterDecorators":[{"name":"account","description":"Account to get the report for.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The report blocks encoded as a uint256.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"setTier(address,uint256,bytes)","name":"setTier","description":"Always reverts because it is not possible to set a read only tier. Updates the tier of an account. The implementing contract is responsible for all checks and state changes required to set the tier. For example, taking/refunding funds/NFTs etc. Contracts may disallow directly setting tiers, preferring to derive reports from other onchain data. In this case they should `revert(\"SET_TIER\");`.","parameterDecorators":[{"name":"account","description":"Account to change the tier for.","recommendedTypes":[]},{"name":"data","description":"Arbitrary input to disambiguate ownership (e.g. NFTs to lock).","recommendedTypes":[]},{"name":"endTier","description":"Tier after the change.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":true},{"signature":"tierValues()","name":"tierValues","description":"Complements the default solidity accessor for `tierValues`. Returns all the values in a list rather than requiring an index be specified.","parameterDecorators":[],"returnDecorators":[{"name":"tierValues_","description":"The immutable `tierValues`.","recommendedTypes":[],"solidityType":"uint256[8]"}],"emittableEvents":[],"readOnly":true}]}