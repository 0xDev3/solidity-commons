{
  "schema": "../schema.json",
  "tags": [],
  "name": "Depot",
  "description": "",
  "eventDecorators": [
    {
      "signature": "ClearedDeposit(address,address,uint256,uint256,uint256)",
      "name": "ClearedDeposit",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "fromAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "toAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fromETHAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "toAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "depositIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Exchange(string,uint256,string,uint256)",
      "name": "Exchange",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "fromCurrency",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fromAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "toCurrency",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "toAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundsWalletUpdated(address)",
      "name": "FundsWalletUpdated",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "newFundsWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MaxEthPurchaseUpdated(uint256)",
      "name": "MaxEthPurchaseUpdated",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MinimumDepositAmountUpdated(uint256)",
      "name": "MinimumDepositAmountUpdated",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NonPayableContract(address,uint256)",
      "name": "NonPayableContract",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerChanged(address,address)",
      "name": "OwnerChanged",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "oldOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerNominated(address)",
      "name": "OwnerNominated",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PauseChanged(bool)",
      "name": "PauseChanged",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "isPaused",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SelfDestructBeneficiaryUpdated(address)",
      "name": "SelfDestructBeneficiaryUpdated",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "newBeneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SelfDestructInitiated(uint256)",
      "name": "SelfDestructInitiated",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "selfDestructDelay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SelfDestructTerminated()",
      "name": "SelfDestructTerminated",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": []
    },
    {
      "signature": "SelfDestructed(address)",
      "name": "SelfDestructed",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SynthDeposit(address,uint256,uint256)",
      "name": "SynthDeposit",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "depositIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SynthDepositNotAccepted(address,uint256,uint256)",
      "name": "SynthDepositNotAccepted",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "minimum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SynthDepositRemoved(address,uint256,uint256)",
      "name": "SynthDepositRemoved",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "depositIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SynthWithdrawal(address,uint256)",
      "name": "SynthWithdrawal",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MAX_ADDRESSES_FROM_RESOLVER()",
      "name": "MAX_ADDRESSES_FROM_RESOLVER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SELFDESTRUCT_DELAY()",
      "name": "SELFDESTRUCT_DELAY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositEndIndex()",
      "name": "depositEndIndex",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositStartIndex()",
      "name": "depositStartIndex",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositSynths(uint256)",
      "name": "depositSynths",
      "description": "depositSynths: Allows users to deposit synths via the approve / transferFrom workflow.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of dUSD you wish to deposit (must have been approved first).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposits(uint256)",
      "name": "deposits",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dtradeReceivedForEther(uint256)",
      "name": "dtradeReceivedForEther",
      "description": "Calculate how many DET you will receive if you transfer an amount of ether.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of ether (in wei) you want to ask about.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dtradeReceivedForSynths(uint256)",
      "name": "dtradeReceivedForSynths",
      "description": "Calculate how many DET you will receive if you transfer an amount of synths.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of synths (in 18 decimal places) you want to ask about.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchangeEtherForDET()",
      "name": "exchangeEtherForDET",
      "description": "Exchange ETH to DET.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchangeEtherForDETAtRate(uint256,uint256)",
      "name": "exchangeEtherForDETAtRate",
      "description": "Exchange ETH to DET while insisting on a particular set of rates. This allows a user to exchange while protecting against frontrunning by the contract owner on the exchange rates.",
      "parameterDecorators": [
        {
          "name": "guaranteedEtherRate",
          "description": "The ether exchange rate which must be honored or the call will revert.",
          "recommendedTypes": []
        },
        {
          "name": "guaranteeddTradeRate",
          "description": "The dtrade exchange rate which must be honored or the call will revert.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchangeEtherForSynths()",
      "name": "exchangeEtherForSynths",
      "description": "Exchange ETH to dUSD.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchangeEtherForSynthsAtRate(uint256)",
      "name": "exchangeEtherForSynthsAtRate",
      "description": "Exchange ETH to dUSD while insisting on a particular rate. This allows a user to exchange while protecting against frontrunning by the contract owner on the exchange rate.",
      "parameterDecorators": [
        {
          "name": "guaranteedRate",
          "description": "The exchange rate (ether price) which must be honored or the call will revert.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchangeSynthsForDET(uint256)",
      "name": "exchangeSynthsForDET",
      "description": "Exchange dUSD for DET.",
      "parameterDecorators": [
        {
          "name": "synthAmount",
          "description": "The amount of synths the user wishes to exchange.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchangeSynthsForDETAtRate(uint256,uint256)",
      "name": "exchangeSynthsForDETAtRate",
      "description": "Exchange dUSD for DET while insisting on a particular rate. This allows a user to exchange while protecting against frontrunning by the contract owner on the exchange rate.",
      "parameterDecorators": [
        {
          "name": "synthAmount",
          "description": "The amount of synths the user wishes to exchange.",
          "recommendedTypes": []
        },
        {
          "name": "guaranteedRate",
          "description": "A rate (dtrade price) the caller wishes to insist upon.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fundsWallet()",
      "name": "fundsWallet",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getResolverAddressesRequired()",
      "name": "getResolverAddressesRequired",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "addressesRequired",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32[24]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initiateSelfDestruct()",
      "name": "initiateSelfDestruct",
      "description": "Begin the self-destruction counter of this contract. Once the delay has elapsed, the contract may be self-destructed. Only the contract owner may call this.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initiationTime()",
      "name": "initiationTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isResolverCached(address)",
      "name": "isResolverCached",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_resolver",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastPauseTime()",
      "name": "lastPauseTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxEthPurchase()",
      "name": "maxEthPurchase",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minimumDepositAmount()",
      "name": "minimumDepositAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nominateNewOwner(address)",
      "name": "nominateNewOwner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nominatedOwner()",
      "name": "nominatedOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "resolver()",
      "name": "resolver",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "resolverAddressesRequired(uint256)",
      "name": "resolverAddressesRequired",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "selfDestruct()",
      "name": "selfDestruct",
      "description": "If the self-destruction delay has elapsed, destroy this contract and remit any ether it owns to the beneficiary address. Only the contract owner may call this.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "selfDestructBeneficiary()",
      "name": "selfDestructBeneficiary",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "selfDestructInitiated()",
      "name": "selfDestructInitiated",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setFundsWallet(address)",
      "name": "setFundsWallet",
      "description": "Set the funds wallet where ETH raised is held.",
      "parameterDecorators": [
        {
          "name": "_fundsWallet",
          "description": "The new address to forward ETH and Synths to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxEthPurchase(uint256)",
      "name": "setMaxEthPurchase",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_maxEthPurchase",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumDepositAmount(uint256)",
      "name": "setMinimumDepositAmount",
      "description": "Set the minimum deposit amount required to depoist dUSD into the FIFO queue.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "The new new minimum number of dUSD required to deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPaused(bool)",
      "name": "setPaused",
      "description": "Change the paused state of the contract. Only the contract owner may call this.",
      "parameterDecorators": [
        {
          "name": "_paused",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setResolverAndSyncCache(address)",
      "name": "setResolverAndSyncCache",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_resolver",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSelfDestructBeneficiary(address)",
      "name": "setSelfDestructBeneficiary",
      "description": "Set the beneficiary address of this contract. Only the contract owner may call this. The provided beneficiary must be non-null.",
      "parameterDecorators": [
        {
          "name": "_beneficiary",
          "description": "The address to pay any eth contained in this contract to upon self-destruction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "smallDeposits(address)",
      "name": "smallDeposits",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "synthsReceivedForEther(uint256)",
      "name": "synthsReceivedForEther",
      "description": "Calculate how many synths you will receive if you transfer an amount of ether.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of ether (in wei) you want to ask about.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "terminateSelfDestruct()",
      "name": "terminateSelfDestruct",
      "description": "Terminate and reset the self-destruction timer. Only the contract owner may call this.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalSellableDeposits()",
      "name": "totalSellableDeposits",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawMyDepositedSynths()",
      "name": "withdrawMyDepositedSynths",
      "description": "Allows a user to withdraw all of their previously deposited synths from this contract if needed. Developer note: We could keep an index of address to deposits to make this operation more efficient but then all the other operations on the queue become less efficient. It's expected that this function will be very rarely used, so placing the inefficiency here is intentional. The usual use case does not involve a withdrawal.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawdTrade(uint256)",
      "name": "withdrawdTrade",
      "description": "Allows the owner to withdraw DET from this contract if needed.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of DET to attempt to withdraw (in 18 decimal places).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}