{
  "schema": "../schema.json",
  "tags": [
    "swaps",
    "nft",
    "uniswap"
  ],
  "name": "MetaverseNFTFactory",
  "description": "MetaverseNFT is a cloneable contract for your NFT collection. It's adapted from OpenZeppeling ERC721 implementation upgradeable versions. This is needed to make it possible to create clones that work via delegatecall ! The constructor is replaced with initializer, too This way, deployment costs about 350k gas instead of 4.5M. 1. https://forum.openzeppelin.com/t/how-to-set-implementation-contracts-for-clones/6085/4 2. https://github.com/OpenZeppelin/workshops/tree/master/02-contracts-clone/contracts/2-uniswap 3. https://docs.openzeppelin.com/contracts/4.x/api/proxy.",
  "eventDecorators": [
    {
      "signature": "NFTCreated(address,address,uint256,uint256,uint256,string,string,bool,bool,bool,bool)",
      "name": "NFTCreated",
      "description": "Emitted when the RecoveryManager role is transferred.",
      "parameterDecorators": [
        {
          "name": "deployedAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "creator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "maxSupply",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "nReserved",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "symbol",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "shouldUseJSONExtension",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "shouldStartAtOne",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "shouldStartSale",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "shouldLockPayoutChange",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when the RecoveryManager role is transferred.",
      "parameterDecorators": [
        {
          "name": "newRecoveryManager",
          "description": "the address of the new RecoveryManager.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousRecoveryManager",
          "description": "the address of the previous RecoveryManager.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "createNFT(uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "name": "createNFT",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_startPrice",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxSupply",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_nReserved",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxTokensPerMint",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_royaltyFee",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_uri",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_symbol",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createNFTWithSettings(uint256,uint256,uint256,uint256,uint256,string,string,string,address,bool,uint16)",
      "name": "createNFTWithSettings",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_startPrice",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxSupply",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_nReserved",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxTokensPerMint",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_royaltyFee",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_uri",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_symbol",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "payoutReceiver",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "shouldUseJSONExtension",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "miscParams",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createNFTWithoutAccessPass(uint256,uint256,uint256,uint256,uint256,string,string,string,address,bool,uint16)",
      "name": "createNFTWithoutAccessPass",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_startPrice",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxSupply",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_nReserved",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxTokensPerMint",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_royaltyFee",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_uri",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_symbol",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "payoutReceiver",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "shouldUseJSONExtension",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "miscParams",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "earlyAccessPass()",
      "name": "earlyAccessPass",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxAllowedAmount()",
      "name": "maxAllowedAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxPerMintLimit()",
      "name": "maxPerMintLimit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxyImplementation()",
      "name": "proxyImplementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxPerMintLimit(uint256)",
      "name": "setMaxPerMintLimit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_maxPerMintLimit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateEarlyAccessPass(address)",
      "name": "updateEarlyAccessPass",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_earlyAccessPass",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateMaxAllowedAmount(uint256)",
      "name": "updateMaxAllowedAmount",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_maxAllowedAmount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}