{
  "schema": "../schema.json",
  "tags": [],
  "name": "BotProxy",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "addNewUser(address)",
      "name": "addNewUser",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeUser(address)",
      "name": "removeUser",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sellAllTokens(address,address,address,address,address,uint256)",
      "name": "sellAllTokens",
      "description": "Given a router addres, sells all given tokens (first token in path) for as many tokens as possible (second token in path) Sends output tokens to _to, pulls input tokens from _from.",
      "parameterDecorators": [
        {
          "name": "_routerAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_inputTokenAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_outputTokenAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_fromAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_toAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_deadline",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapExactTokensForTokens(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "swapExactTokensForTokens",
      "description": "Given a router address, performs a swapExactTokensForTokens swap after performing a transferFrom(from, amountIn) on the first token in the provided path.",
      "parameterDecorators": [
        {
          "name": "_routerAddress",
          "description": "address of the router we want to swap with.",
          "recommendedTypes": []
        },
        {
          "name": "_factoryAddress",
          "description": "address of the factory; only needed if _minimumInputTokenLiquidity is used.",
          "recommendedTypes": []
        },
        {
          "name": "_fromAddress",
          "description": "address to _transferFrom the input tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_toAddress",
          "description": "address to send output tokens + input dust to.",
          "recommendedTypes": []
        },
        {
          "name": "_inputTokenAddress",
          "description": "first address of path.",
          "recommendedTypes": []
        },
        {
          "name": "_outputTokenAddress",
          "description": "second address/output of path.",
          "recommendedTypes": []
        },
        {
          "name": "_amountIn",
          "description": "see swapExactTokensForTokens.",
          "recommendedTypes": []
        },
        {
          "name": "_amountOutMin",
          "description": "see swapExactTokensForTokens.",
          "recommendedTypes": []
        },
        {
          "name": "_deadline",
          "description": "see swapExactTokensForTokens.",
          "recommendedTypes": []
        },
        {
          "name": "_buySellCheckPercentage",
          "description": "if nonzero, the percentage of our input amount to sell to test for scammy contracts.",
          "recommendedTypes": []
        },
        {
          "name": "_minimumInputTokenLiquidity",
          "description": "if nonzero, the amount of input tokens the pair must have to not abort this swap.",
          "recommendedTypes": []
        },
        {
          "name": "_uniqueTransactionId",
          "description": "if nonzero, enforces a unique transaction via custom txid.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawCurrency()",
      "name": "withdrawCurrency",
      "description": "Withdraws any eth/bnb/etc that may have gotten stuck.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawTokens(address,uint256)",
      "name": "withdrawTokens",
      "description": "Withdraws any tokens that may have gotten stuck.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenAmount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}