{
  "schema": "../schema.json",
  "tags": [],
  "name": "NewUpkeepRegistrationRequests",
  "description": "",
  "eventDecorators": [
    {
      "signature": "MinLINKChanged(uint256,uint256)",
      "name": "MinLINKChanged",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferRequested(address,address)",
      "name": "OwnershipTransferRequested",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RegistrationApproved(bytes32,string,uint256)",
      "name": "RegistrationApproved",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The address of the underlying asset of the reserve.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "implementation",
          "description": "The new subToken implementation*.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proxy",
          "description": "The variable debt token proxy address.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RegistrationRequested(bytes32,string,bytes,address,uint32,address,bytes,uint8)",
      "name": "RegistrationRequested",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "encryptedEmail",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "upkeepContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "gasLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "adminAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "checkData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "source",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "LINK_ADDRESS()",
      "name": "LINK_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "Allows an ownership transfer to be completed by the recipient.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approve(bytes32,string,uint256)",
      "name": "approve",
      "description": "this function is called after registering upkeep on the Registry contract.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "hash of the message data of the registration request that is being approved.",
          "recommendedTypes": []
        },
        {
          "name": "displayName",
          "description": "display name for the upkeep being approved.",
          "recommendedTypes": []
        },
        {
          "name": "upkeepId",
          "description": "id of the upkeep that has been registered.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getMinLINKJuels()",
      "name": "getMinLINKJuels",
      "description": "read the minimum LINK required to send registration request.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRegistrationConfig()",
      "name": "getRegistrationConfig",
      "description": "read the current registration configuration.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "enabled",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "windowSizeInBlocks",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "allowedPerWindow",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        },
        {
          "name": "keeperRegistry",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "windowStart",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "approvedInCurrentWindow",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onTokenTransfer(address,uint256,bytes)",
      "name": "onTokenTransfer",
      "description": "Called when LINK is sent to the contract via `transferAndCall`.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of LINK sent (specified in Juels).",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Payload of the transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "register(string,bytes,address,uint32,address,bytes,uint8)",
      "name": "register",
      "description": "register can only be called through transferAndCall on LINK contract.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "name of the upkeep to be registered.",
          "recommendedTypes": []
        },
        {
          "name": "encryptedEmail",
          "description": "Amount of LINK sent (specified in Juels).",
          "recommendedTypes": []
        },
        {
          "name": "upkeepContract",
          "description": "address to peform upkeep on.",
          "recommendedTypes": []
        },
        {
          "name": "gasLimit",
          "description": "amount of gas to provide the target contract when performing upkeep.",
          "recommendedTypes": []
        },
        {
          "name": "adminAddress",
          "description": "address to cancel upkeep and withdraw remaining funds.",
          "recommendedTypes": []
        },
        {
          "name": "checkData",
          "description": "data passed to the contract when checking for upkeep.",
          "recommendedTypes": []
        },
        {
          "name": "source",
          "description": "application sending this request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sendRegisterUpkeep(string,address,uint32,address,bytes,bytes32)",
      "name": "sendRegisterUpkeep",
      "description": "auto register only if max number of allowed registrations are not already completed for this auto approve window.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "upkeepContract",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "gasLimit",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "adminAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "checkData",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinLINKJuels(uint256)",
      "name": "setMinLINKJuels",
      "description": "owner calls this function to set minimum LINK required to send registration request.",
      "parameterDecorators": [
        {
          "name": "minimumLINKJuels",
          "description": "minimum LINK required to send registration request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRegistrationConfig(bool,uint32,uint16,address)",
      "name": "setRegistrationConfig",
      "description": "owner calls this function to set if registration requests should be sent directly to the Keeper Registry.",
      "parameterDecorators": [
        {
          "name": "enabled",
          "description": "setting for autoapprove registrations.",
          "recommendedTypes": []
        },
        {
          "name": "windowSizeInBlocks",
          "description": "window size defined in number of blocks.",
          "recommendedTypes": []
        },
        {
          "name": "allowedPerWindow",
          "description": "number of registrations that can be auto approved in above window.",
          "recommendedTypes": []
        },
        {
          "name": "keeperRegistry",
          "description": "new keeper registry address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows an owner to begin transferring ownership to a new address, pending.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}