{"schema":"../schema.json","tags":[],"name":"EtruriaV1","description":"","eventDecorators":[{"signature":"Deposit(address,uint256,uint256)","name":"Deposit","description":"To call when there is consensus on final result.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false}]},{"signature":"EmergencyWithdraw(address,uint256,uint256)","name":"EmergencyWithdraw","description":"To call when there is consensus on final result.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"To call when there is consensus on final result.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Withdraw(address,uint256,uint256)","name":"Withdraw","description":"To call when there is consensus on final result.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"add(uint256[],address[])","name":"add","description":"- A function to add a pool or multiple pools to the contract.","parameterDecorators":[{"name":"_allocPoints","description":"- An array of the allocation points for each pool that will be added.","recommendedTypes":[]},{"name":"_lpTokens","description":"- An array of each LP token for which a pool is created.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"claimTimeout()","name":"claimTimeout","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"deployAureus(string,string,uint256,uint256,address)","name":"deployAureus","description":"Deploys a new RewardToken contract. Callable only by Owner. Mints the cap amount and transfers it to this contract.","parameterDecorators":[{"name":"_name","description":"- Pass a name for the token.","recommendedTypes":[]},{"name":"_symbol","description":"- Pass a symbol for the token.","recommendedTypes":[]},{"name":"_cap","description":"- set a cap on how many ERC20 reward tokens can be minted.","recommendedTypes":[]},{"name":"_amountForPool","description":"- a portion of the ERC20 reward token is transferred to owner to create a new pool on a DEX.","recommendedTypes":[]},{"name":"_rewardReceiver","description":"- receiver of the portion of ERC20 reward token.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deposit(uint256,uint256)","name":"deposit","description":"- A function to be called when depositing LP tokens to a certain pool.","parameterDecorators":[{"name":"_pid","description":"- The pool id to which the user wants to deposit LP tokens.","recommendedTypes":[]},{"name":"_amount","description":"- The amount of LP tokens to be deposited emit - Emits the Deposit event.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"emergencyWithdraw(uint256)","name":"emergencyWithdraw","description":"- A function to withdraw any outstanding LP tokens of a user without withdrawing ERC20 reward tokens.","parameterDecorators":[{"name":"_pid","description":"- The pool id on which to perform emergency withdraw.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"endBlock()","name":"endBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getMultiplier(uint256,uint256)","name":"getMultiplier","description":"- Calculates and returns reward multiplier over the given _from to _to block.","parameterDecorators":[{"name":"_from","description":"- Should be a block number.","recommendedTypes":[]},{"name":"_to","description":"- Should be a block number.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"massUpdatePools()","name":"massUpdatePools","description":"- Updates the variables of each pool in the array.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingRwd(uint256,address)","name":"pendingRwd","description":"- Calculates the pending ERC20 reward tokens the user can claim.","parameterDecorators":[{"name":"_pid","description":"- The pool id.","recommendedTypes":[]},{"name":"_user","description":"- The address of the user.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"- the pending ERC20 reward tokens to be claimed.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"poolInfo(uint256)","name":"poolInfo","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"lpToken","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"allocPoint","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"lastRewardBlock","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"accRwdPerShare","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"poolLength()","name":"poolLength","description":"Checks the poolInfo struct lenght.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"the number of active pools.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"rwdPerBlock()","name":"rwdPerBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rwdToken()","name":"rwdToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"set(uint256[],uint256[])","name":"set","description":"- Updates the allocationPoints for an array of pools.","parameterDecorators":[{"name":"_pids","description":"- An array of pool ids which will be updated.","recommendedTypes":[]},{"name":"_allocPoints","description":"- An array of allocationPoints for each pool that will be updated.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setProgramParameters(uint256,uint256,uint256,uint256)","name":"setProgramParameters","description":"Allows the owner to set the parameters for a new upcomming farming program.","parameterDecorators":[{"name":"_startBlock","description":"- the starting block when the farming program will start.","recommendedTypes":[]},{"name":"_endBlock","description":"- the block on which the farming program will end.","recommendedTypes":[]},{"name":"_rwdPerBlock","description":"- updates the rwdPerBlock variable for the new farming program.","recommendedTypes":[]},{"name":"_ownerWithdrawBlockTimeout","description":"- The added timeout after a program finishes after which the excess ERC20 tokens stored can be withdrawn by the owner.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"startBlock()","name":"startBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"totalAllocPoints()","name":"totalAllocPoints","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updatePool(uint256)","name":"updatePool","description":"- Updates the pool variables to be up to date.","parameterDecorators":[{"name":"_pid","description":"- The ID of the pool to be updated.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"userInfo(uint256,address)","name":"userInfo","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"rewardDebt","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(uint256,uint256)","name":"withdraw","description":"- A function which is called to withdraw LP tokens from a pool.","parameterDecorators":[{"name":"_pid","description":"- The pool id from which to withdraw the deposited LP tokens.","recommendedTypes":[]},{"name":"_amount","description":"- The amount of LP tokens to withdraw emits - Withdraw event is emited.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawExcessRwd(address)","name":"withdrawExcessRwd","description":"Allows the owner to withdraw any excess ERC20 tokens stored in the contract.","parameterDecorators":[{"name":"_receiver","description":"- The receiving address for the ERC20 tokens.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}