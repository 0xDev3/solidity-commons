{
  "schema": "../schema.json",
  "tags": [
    "locking"
  ],
  "name": "KiwiLeaks",
  "description": "Contract created for the Ethereum programming course of the Blockchain Technology and Cryptocurrencies master's degree at the University of the Basque Country.",
  "eventDecorators": [
    {
      "signature": "LeakPublished(tuple)",
      "name": "LeakPublished",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LeakUnpublished(tuple)",
      "name": "LeakUnpublished",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "availableKWC()",
      "name": "availableKWC",
      "description": "Returns the amount of KWC available for this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "donate()",
      "name": "donate",
      "description": "Sends the value of the transaction to the owner of the contract and returns the amount of KWC transfered to the caller. Fails if the donation is too small or there is not enough KWC available.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getLeakByHash(bytes32)",
      "name": "getLeakByHash",
      "description": "Returns a leak if exists and it's published (fails in other case).",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": ": identifier of the leak in the '_leaks' mapping.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "text",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "string"
            },
            {
              "name": "date",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "isPublic",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLeaks()",
      "name": "getLeaks",
      "description": "Returns an array with all the published leaks.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "text",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "string"
            },
            {
              "name": "date",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "isPublic",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMaxLen()",
      "name": "getMaxLen",
      "description": "Getter for the 'MAX_LEN' constant.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "publishLeak(string)",
      "name": "publishLeak",
      "description": "Shortens the info to be leaked if it's longer that MAX_LEN chars Then publishes a new leak if the info wasn't previously published or if it was unpublished (fails in other case).",
      "parameterDecorators": [
        {
          "name": "leakString",
          "description": ": the info to be leaked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpublishLeak(bytes32)",
      "name": "unpublishLeak",
      "description": "Unpublishes a leak identified by its hash if it exists and it's published (fails in other case).",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": ": identifier of the leak in the '_leaks' mapping to be unpublished.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}