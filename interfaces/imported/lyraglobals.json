{
  "schema": "../schema.json",
  "tags": [
    "synthetix"
  ],
  "name": "LyraGlobals",
  "description": "LyraGlobals. Manages variables across all OptionMarkets, along with managing access to Synthetix. Groups access to variables needed during a trade to reduce the gas costs associated with repetitive inter-contract calls. The OptionMarket contract address is used as the key to access the variables for the market.",
  "eventDecorators": [
    {
      "signature": "BaseKeySet(address,bytes32)",
      "name": "BaseKeySet",
      "description": "Emitted when base key is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_baseKey",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GlobalsSet(address,address,address,address)",
      "name": "GlobalsSet",
      "description": "Emitted when globals are set.",
      "parameterDecorators": [
        {
          "name": "_synthetix",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_exchanger",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_exchangeRates",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_collateralShort",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MinDeltaSet(address,int256)",
      "name": "MinDeltaSet",
      "description": "Emitted when min delta is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_minDelta",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OptionPriceFeeCoefficientSet(address,uint256)",
      "name": "OptionPriceFeeCoefficientSet",
      "description": "Emitted when option price fee coefficient is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_optionPriceFeeCoefficient",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(bool)",
      "name": "Paused",
      "description": "Emitted when paused.",
      "parameterDecorators": [
        {
          "name": "isPaused",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "QuoteKeySet(address,bytes32)",
      "name": "QuoteKeySet",
      "description": "Emitted when quote key is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_quoteKey",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RateAndCarrySet(address,int256)",
      "name": "RateAndCarrySet",
      "description": "Emitted when rate and carry is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_rateAndCarry",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SkewAdjustmentFactorSet(address,uint256)",
      "name": "SkewAdjustmentFactorSet",
      "description": "Emitted when skew ddjustment factor is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_skewAdjustmentFactor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SpotPriceFeeCoefficientSet(address,uint256)",
      "name": "SpotPriceFeeCoefficientSet",
      "description": "Emitted when spot price fee coefficient is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_spotPriceFeeCoefficient",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StandardSizeSet(address,uint256)",
      "name": "StandardSizeSet",
      "description": "Emitted when standard size is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_standardSize",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TradingCutoffSet(address,uint256)",
      "name": "TradingCutoffSet",
      "description": "Emitted when trading cut-off is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_tradingCutoff",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VegaFeeCoefficientSet(address,uint256)",
      "name": "VegaFeeCoefficientSet",
      "description": "Emitted when vega fee coefficient is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_vegaFeeCoefficient",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VegaNormFactorSet(address,uint256)",
      "name": "VegaNormFactorSet",
      "description": "Emitted when vegaNorm factor is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_vegaNormFactor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VolatilityCutoffSet(address,uint256)",
      "name": "VolatilityCutoffSet",
      "description": "Emitted when volatility cutoff is set.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_volatilityCutoff",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "baseKey(address)",
      "name": "baseKey",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collateralShort()",
      "name": "collateralShort",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchangeRates()",
      "name": "exchangeRates",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchanger()",
      "name": "exchanger",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getExchangeGlobals(address,uint8)",
      "name": "getExchangeGlobals",
      "description": "Returns the ExchangeGlobals.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "exchangeType",
          "description": "The ExchangeType.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "exchangeGlobals",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "spotPrice",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "quoteKey",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "baseKey",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "synthetix",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "short",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "quoteBaseFeeRate",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "baseQuoteFeeRate",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGlobalsForOptionTrade(address,bool)",
      "name": "getGlobalsForOptionTrade",
      "description": "Returns the globals needed to perform a trade. The purpose of this function is to provide all the necessary variables in 1 call. Note that GreekCacheGlobals are a subset of PricingGlobals, so we generate that struct when OptionMarketPricer calls OptionGreekCache.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "isBuy",
          "description": "Is the trade buying or selling options to the OptionMarket.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "pricingGlobals",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "optionPriceFeeCoefficient",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "spotPriceFeeCoefficient",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "vegaFeeCoefficient",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "vegaNormFactor",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "standardSize",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "skewAdjustmentFactor",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "rateAndCarry",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "int256"
            },
            {
              "name": "minDelta",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "int256"
            },
            {
              "name": "volatilityCutoff",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "spotPrice",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "exchangeGlobals",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "spotPrice",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "quoteKey",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "baseKey",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "synthetix",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "short",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "quoteBaseFeeRate",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "baseQuoteFeeRate",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "tradeCutoff",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGreekCacheGlobals(address)",
      "name": "getGreekCacheGlobals",
      "description": "Returns the GreekCacheGlobals.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rateAndCarry",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "int256"
            },
            {
              "name": "spotPrice",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPricingGlobals(address)",
      "name": "getPricingGlobals",
      "description": "Returns a PricingGlobals struct for a given market address.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "optionPriceFeeCoefficient",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "spotPriceFeeCoefficient",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "vegaFeeCoefficient",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "vegaNormFactor",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "standardSize",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "skewAdjustmentFactor",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "rateAndCarry",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "int256"
            },
            {
              "name": "minDelta",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "int256"
            },
            {
              "name": "volatilityCutoff",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "spotPrice",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSpotPrice(bytes32)",
      "name": "getSpotPrice",
      "description": "Gets spot price of an asset. All rates are denominated in terms of sUSD, so the price of sUSD is always $1.00, and is never stale.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The key of the synthetic asset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSpotPriceForMarket(address)",
      "name": "getSpotPriceForMarket",
      "description": "Returns the price of the baseAsset.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPaused()",
      "name": "isPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minDelta(address)",
      "name": "minDelta",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "optionPriceFeeCoefficient(address)",
      "name": "optionPriceFeeCoefficient",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "quoteKey(address)",
      "name": "quoteKey",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rateAndCarry(address)",
      "name": "rateAndCarry",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBaseKey(address,bytes32)",
      "name": "setBaseKey",
      "description": "Set the baseKey of the OptionMarket.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_baseKey",
          "description": "The key of the baseAsset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGlobals(address,address,address,address)",
      "name": "setGlobals",
      "description": "Set the globals that apply to all OptionMarkets.",
      "parameterDecorators": [
        {
          "name": "_synthetix",
          "description": "The address of Synthetix.",
          "recommendedTypes": []
        },
        {
          "name": "_exchanger",
          "description": "The address of Synthetix's Exchanger.",
          "recommendedTypes": []
        },
        {
          "name": "_exchangeRates",
          "description": "The address of Synthetix's ExchangeRates.",
          "recommendedTypes": []
        },
        {
          "name": "_collateralShort",
          "description": "The address of Synthetix's CollateralShort.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGlobalsForContract(address,uint256,tuple(uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,uint256,uint256),bytes32,bytes32)",
      "name": "setGlobalsForContract",
      "description": "Set the globals for a specific OptionMarket.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_tradingCutoff",
          "description": "The time to stop trading.",
          "recommendedTypes": []
        },
        {
          "name": "pricingGlobals",
          "description": "The PricingGlobals.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "optionPriceFeeCoefficient",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "spotPriceFeeCoefficient",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "vegaFeeCoefficient",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "vegaNormFactor",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "standardSize",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "skewAdjustmentFactor",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "rateAndCarry",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "minDelta",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "volatilityCutoff",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "spotPrice",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_quoteKey",
          "description": "The key of the quoteAsset.",
          "recommendedTypes": []
        },
        {
          "name": "_baseKey",
          "description": "The key of the baseAsset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinDelta(address,int256)",
      "name": "setMinDelta",
      "description": "Set the minimum Delta that the OptionMarket will trade.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_minDelta",
          "description": "The minimum delta value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOptionPriceFeeCoefficient(address,uint256)",
      "name": "setOptionPriceFeeCoefficient",
      "description": "Set the option price fee coefficient for the OptionMarket.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_optionPriceFeeCoefficient",
          "description": "The option price fee coefficient.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPaused(bool)",
      "name": "setPaused",
      "description": "Pauses the contract.",
      "parameterDecorators": [
        {
          "name": "_isPaused",
          "description": "Whether getting globals will revert or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setQuoteKey(address,bytes32)",
      "name": "setQuoteKey",
      "description": "Set the quoteKey of the OptionMarket.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_quoteKey",
          "description": "The key of the quoteAsset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRateAndCarry(address,int256)",
      "name": "setRateAndCarry",
      "description": "Set the rate for the OptionMarket.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_rateAndCarry",
          "description": "The rate.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSkewAdjustmentFactor(address,uint256)",
      "name": "setSkewAdjustmentFactor",
      "description": "Set the skew adjustment factor for the OptionMarket.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_skewAdjustmentFactor",
          "description": "The skew adjustment factor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSpotPriceFeeCoefficient(address,uint256)",
      "name": "setSpotPriceFeeCoefficient",
      "description": "Set the spot price fee coefficient for the OptionMarket.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_spotPriceFeeCoefficient",
          "description": "The spot price fee coefficient.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStandardSize(address,uint256)",
      "name": "setStandardSize",
      "description": "Set the standard size for the OptionMarket.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_standardSize",
          "description": "The size of an average trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTradingCutoff(address,uint256)",
      "name": "setTradingCutoff",
      "description": "Set the time when the OptionMarket will cease trading before expiry.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_tradingCutoff",
          "description": "The time to stop trading.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setVegaFeeCoefficient(address,uint256)",
      "name": "setVegaFeeCoefficient",
      "description": "Set the vega fee coefficient for the OptionMarket.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_vegaFeeCoefficient",
          "description": "The vega fee coefficient.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setVegaNormFactor(address,uint256)",
      "name": "setVegaNormFactor",
      "description": "Set the vega normalisation factor for the OptionMarket.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_vegaNormFactor",
          "description": "The vega normalisation factor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setVolatilityCutoff(address,uint256)",
      "name": "setVolatilityCutoff",
      "description": "Set the minimum volatility option that the OptionMarket will trade.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "The address of the OptionMarket.",
          "recommendedTypes": []
        },
        {
          "name": "_volatilityCutoff",
          "description": "The minimum volatility value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "skewAdjustmentFactor(address)",
      "name": "skewAdjustmentFactor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "spotPriceFeeCoefficient(address)",
      "name": "spotPriceFeeCoefficient",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "standardSize(address)",
      "name": "standardSize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "synthetix()",
      "name": "synthetix",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tradingCutoff(address)",
      "name": "tradingCutoff",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vegaFeeCoefficient(address)",
      "name": "vegaFeeCoefficient",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vegaNormFactor(address)",
      "name": "vegaNormFactor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "volatilityCutoff(address)",
      "name": "volatilityCutoff",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}