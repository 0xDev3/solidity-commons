{
  "schema": "../schema.json",
  "tags": [],
  "name": "HyperDexRouter",
  "description": "Plasma Finance proxy contract for 0x proxy. A generic proxy contract which extracts a fee before delegation.",
  "eventDecorators": [
    {
      "signature": "AllowanceTargetChanged(address)",
      "name": "AllowanceTargetChanged",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "allowanceTarget",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BeneficiaryChanged(address)",
      "name": "BeneficiaryChanged",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "FeePayment(address,address,uint256)",
      "name": "FeePayment",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GasStationChanged(address)",
      "name": "GasStationChanged",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "gasStation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "HyperDexChanged(address)",
      "name": "HyperDexChanged",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "hyperDex",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TokensApproverChanged(address)",
      "name": "TokensApproverChanged",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "approver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "allowanceTarget()",
      "name": "allowanceTarget",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "approver()",
      "name": "approver",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiary()",
      "name": "beneficiary",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feeBeneficiary()",
      "name": "feeBeneficiary",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feeReferrals(uint256)",
      "name": "feeReferrals",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "gasStation()",
      "name": "gasStation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hyperDex()",
      "name": "hyperDex",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwnGasStation(address)",
      "name": "isOwnGasStation",
      "description": "",
      "parameterDecorators": [
        {
          "name": "addressToCheck",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "multiRoute(bytes,address,uint256,address,address[4])",
      "name": "multiRoute",
      "description": "Forwards calls to the HyperDex contract and extracts a fee based on provided arguments.",
      "parameterDecorators": [
        {
          "name": "msgData",
          "description": "The byte data representing a swap using the original HyperDex contract. This is either recieved from the Multiswap API directly or we construct it in order to perform a single swap trade.",
          "recommendedTypes": []
        },
        {
          "name": "inputToken",
          "description": "The ERC20 the user is selling. If this is ETH it should be the standard 0xeee ETH address.",
          "recommendedTypes": []
        },
        {
          "name": "inputAmount",
          "description": "The amount of inputToken being sold, without fees.",
          "recommendedTypes": []
        },
        {
          "name": "outputToken",
          "description": "The ERC20 the user is buying. If this is ETH it should be the standard 0xeee ETH address.",
          "recommendedTypes": []
        },
        {
          "name": "referrals",
          "description": "Referral addresses for which interest will be accrued from each exchange.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "multiRouteWithPermit(bytes,address,uint256,address,address[4],bytes)",
      "name": "multiRouteWithPermit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "msgData",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "inputToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "inputAmount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "outputToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "referrals",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "approvalData",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAllowanceTarget(address)",
      "name": "setAllowanceTarget",
      "description": "Set a new new allowance target address.",
      "parameterDecorators": [
        {
          "name": "_allowanceTarget",
          "description": "New allowance target address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setApprover(address)",
      "name": "setApprover",
      "description": "Set a new tokens approver contract address.",
      "parameterDecorators": [
        {
          "name": "_approver",
          "description": "New approver address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBeneficiary(address)",
      "name": "setBeneficiary",
      "description": "Set a new beneficiary address.",
      "parameterDecorators": [
        {
          "name": "_beneficiary",
          "description": "New beneficiary target address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeBeneficiary(uint256)",
      "name": "setFeeBeneficiary",
      "description": "Set a beneficiary fees.",
      "parameterDecorators": [
        {
          "name": "_feeBeneficiary",
          "description": "New beneficiary fees value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeReferrals(uint256[4])",
      "name": "setFeeReferrals",
      "description": "Set a referrals fees.",
      "parameterDecorators": [
        {
          "name": "_feeReferrals",
          "description": "New referrals fees values.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGasStation(address)",
      "name": "setGasStation",
      "description": "Set a new trusted gas station address.",
      "parameterDecorators": [
        {
          "name": "_gasStation",
          "description": "New gas station address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setHyperDex(address)",
      "name": "setHyperDex",
      "description": "Set a new MultiSwap proxy contract address.",
      "parameterDecorators": [
        {
          "name": "_hyperDex",
          "description": "New Exchange proxy address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}