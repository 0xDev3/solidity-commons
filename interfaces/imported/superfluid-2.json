{
  "schema": "../schema.json",
  "tags": [],
  "name": "Superfluid",
  "description": "The Superfluid host implementation. NOTE: - Please read ISuperfluid for implementation notes. - For some deeper technical notes, please visit protocol-monorepo wiki area.",
  "eventDecorators": [
    {
      "signature": "AgreementClassRegistered(bytes32,address)",
      "name": "AgreementClassRegistered",
      "description": "Agreement class registered event. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "agreementType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "code",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AgreementClassUpdated(bytes32,address)",
      "name": "AgreementClassUpdated",
      "description": "Agreement class updated event. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "agreementType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "code",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AppRegistered(address)",
      "name": "AppRegistered",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CodeUpdated(bytes32,address)",
      "name": "CodeUpdated",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "uuid",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "codeAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GovernanceReplaced(address,address)",
      "name": "GovernanceReplaced",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "oldGov",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newGov",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Jail(address,uint256)",
      "name": "Jail",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "reason",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SuperTokenFactoryUpdated(address)",
      "name": "SuperTokenFactoryUpdated",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "newFactory",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SuperTokenLogicUpdated(address,address)",
      "name": "SuperTokenLogicUpdated",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "code",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "APP_WHITE_LISTING_ENABLED()",
      "name": "APP_WHITE_LISTING_ENABLED",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "CALLBACK_GAS_LIMIT()",
      "name": "CALLBACK_GAS_LIMIT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_APP_LEVEL()",
      "name": "MAX_APP_LEVEL",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "NON_UPGRADABLE_DEPLOYMENT()",
      "name": "NON_UPGRADABLE_DEPLOYMENT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addToAgreementClassesBitmap(uint256,bytes32)",
      "name": "addToAgreementClassesBitmap",
      "description": "Create a new bitmask by adding a agreement class to it. agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\".",
      "parameterDecorators": [
        {
          "name": "bitmap",
          "description": "Agreement class bitmap.",
          "recommendedTypes": []
        },
        {
          "name": "agreementType",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "newBitmap",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowCompositeApp(address)",
      "name": "allowCompositeApp",
      "description": "Whitelist the target app for app composition for the source app (msg.sender).",
      "parameterDecorators": [
        {
          "name": "targetApp",
          "description": "The target super app address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "appCallbackPop(bytes,int256)",
      "name": "appCallbackPop",
      "description": "(For agreements) Pop from the current app callback stack.",
      "parameterDecorators": [
        {
          "name": "ctx",
          "description": "The ctx that was pushed before the callback stack.",
          "recommendedTypes": []
        },
        {
          "name": "appAllowanceUsedDelta",
          "description": "App allowance used by the app.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "newCtx",
          "description": "The current context of the transaction.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "appCallbackPush(bytes,address,uint256,int256,address)",
      "name": "appCallbackPush",
      "description": "(For agreements) Create a new callback stack.",
      "parameterDecorators": [
        {
          "name": "ctx",
          "description": "The current ctx, it will be validated.",
          "recommendedTypes": []
        },
        {
          "name": "app",
          "description": "The super app.",
          "recommendedTypes": []
        },
        {
          "name": "appAllowanceGranted",
          "description": "App allowance granted so far.",
          "recommendedTypes": []
        },
        {
          "name": "appAllowanceUsed",
          "description": "App allowance used so far.",
          "recommendedTypes": []
        },
        {
          "name": "appAllowanceToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "appCtx",
          "description": "The current context of the transaction.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "batchCall(tuple(uint32,address,bytes)[])",
      "name": "batchCall",
      "description": "ISuperfluid.batchCall implementation.",
      "parameterDecorators": [
        {
          "name": "operations",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "operationType",
              "description": "",
              "type": "uint32"
            },
            {
              "name": "target",
              "description": "",
              "type": "address"
            },
            {
              "name": "data",
              "description": "",
              "type": "bytes"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "callAgreement(address,bytes,bytes)",
      "name": "callAgreement",
      "description": "Call agreement function.",
      "parameterDecorators": [
        {
          "name": "agreementClass",
          "description": "The agreement address you are calling.",
          "recommendedTypes": []
        },
        {
          "name": "callData",
          "description": "The contextual call data with placeholder ctx.",
          "recommendedTypes": []
        },
        {
          "name": "userData",
          "description": "Extra user data being sent to the super app callbacks.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "returnedData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "callAgreementWithContext(address,bytes,bytes,bytes)",
      "name": "callAgreementWithContext",
      "description": "",
      "parameterDecorators": [
        {
          "name": "agreementClass",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "callData",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "userData",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "ctx",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "newCtx",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        },
        {
          "name": "returnedData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "callAppAction(address,bytes)",
      "name": "callAppAction",
      "description": "Call app action. Main use case is calling app action in a batch call via the host.",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "callData",
          "description": "The contextual call data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "returnedData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "callAppActionWithContext(address,bytes,bytes)",
      "name": "callAppActionWithContext",
      "description": "",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "callData",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "ctx",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "newCtx",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "callAppAfterCallback(address,bytes,bool,bytes)",
      "name": "callAppAfterCallback",
      "description": "(For agreements) Call the app after callback.",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "The super app.",
          "recommendedTypes": []
        },
        {
          "name": "callData",
          "description": "The call data sending to the super app.",
          "recommendedTypes": []
        },
        {
          "name": "isTermination",
          "description": "Is it a termination callback?.",
          "recommendedTypes": []
        },
        {
          "name": "ctx",
          "description": "Current ctx, it will be validated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "newCtx",
          "description": "The current context of the transaction.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "callAppBeforeCallback(address,bytes,bool,bytes)",
      "name": "callAppBeforeCallback",
      "description": "(For agreements) StaticCall the app before callback.",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "The super app.",
          "recommendedTypes": []
        },
        {
          "name": "callData",
          "description": "The call data sending to the super app.",
          "recommendedTypes": []
        },
        {
          "name": "isTermination",
          "description": "Is it a termination callback?.",
          "recommendedTypes": []
        },
        {
          "name": "ctx",
          "description": "Current ctx, it will be validated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "cbdata",
          "description": "Data returned from the callback.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ctxUseAllowance(bytes,uint256,int256)",
      "name": "ctxUseAllowance",
      "description": "(For agreements) Use app allowance.",
      "parameterDecorators": [
        {
          "name": "ctx",
          "description": "The current ctx, it will be validated.",
          "recommendedTypes": []
        },
        {
          "name": "appAllowanceWantedMore",
          "description": "See app allowance for more details.",
          "recommendedTypes": []
        },
        {
          "name": "appAllowanceUsedDelta",
          "description": "See app allowance for more details.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "newCtx",
          "description": "The current context of the transaction.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "decodeCtx(bytes)",
      "name": "decodeCtx",
      "description": "",
      "parameterDecorators": [
        {
          "name": "ctx",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "context",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "forwardBatchCall(tuple(uint32,address,bytes)[])",
      "name": "forwardBatchCall",
      "description": "ISuperfluid.forwardBatchCall implementation.",
      "parameterDecorators": [
        {
          "name": "operations",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "operationType",
              "description": "",
              "type": "uint32"
            },
            {
              "name": "target",
              "description": "",
              "type": "address"
            },
            {
              "name": "data",
              "description": "",
              "type": "bytes"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAgreementClass(bytes32)",
      "name": "getAgreementClass",
      "description": "Get agreement class. agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\".",
      "parameterDecorators": [
        {
          "name": "agreementType",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "agreementClass",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAppLevel(address)",
      "name": "getAppLevel",
      "description": "",
      "parameterDecorators": [
        {
          "name": "appAddr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAppManifest(address)",
      "name": "getAppManifest",
      "description": "Get the manifest of the super app.",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "Super app address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isSuperApp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "isJailed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "noopMask",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCodeAddress()",
      "name": "getCodeAddress",
      "description": "Get current implementation code address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "codeAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGovernance()",
      "name": "getGovernance",
      "description": "Get the current governance address of the Superfluid host.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNow()",
      "name": "getNow",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSuperTokenFactory()",
      "name": "getSuperTokenFactory",
      "description": "Get the super token factory.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "factory",
          "description": "The factory.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSuperTokenFactoryLogic()",
      "name": "getSuperTokenFactoryLogic",
      "description": "Get the super token factory logic (applicable to upgradable deployment).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "logic",
          "description": "The factory logic.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "gov",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isAgreementClassListed(address)",
      "name": "isAgreementClassListed",
      "description": "Check if the agreement class is whitelisted.",
      "parameterDecorators": [
        {
          "name": "agreementClass",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "yes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAgreementTypeListed(bytes32)",
      "name": "isAgreementTypeListed",
      "description": "Check if the agreement type is whitelisted. agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\".",
      "parameterDecorators": [
        {
          "name": "agreementType",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "yes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isApp(address)",
      "name": "isApp",
      "description": "Query if the app is registered.",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "Super app address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAppJailed(address)",
      "name": "isAppJailed",
      "description": "Query if the app has been jailed.",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "Super app address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isCompositeAppAllowed(address,address)",
      "name": "isCompositeAppAllowed",
      "description": "Query if source app is allowed to call the target app as downstream app.",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "Super app address.",
          "recommendedTypes": []
        },
        {
          "name": "targetApp",
          "description": "The target super app address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isCtxValid(bytes)",
      "name": "isCtxValid",
      "description": "",
      "parameterDecorators": [
        {
          "name": "ctx",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isTrustedForwarder(address)",
      "name": "isTrustedForwarder",
      "description": "BaseRelayRecipient.isTrustedForwarder implementation.",
      "parameterDecorators": [
        {
          "name": "forwarder",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "jailApp(bytes,address,uint256)",
      "name": "jailApp",
      "description": "(For agreements) Jail the app.",
      "parameterDecorators": [
        {
          "name": "ctx",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "app",
          "description": "The super app.",
          "recommendedTypes": []
        },
        {
          "name": "reason",
          "description": "Jail reason code.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "newCtx",
          "description": "The current context of the transaction.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mapAgreementClasses(uint256)",
      "name": "mapAgreementClasses",
      "description": "Map list of the agreement classes using a bitmap.",
      "parameterDecorators": [
        {
          "name": "bitmap",
          "description": "Agreement class bitmap.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "agreementClasses",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxiableUUID()",
      "name": "proxiableUUID",
      "description": "Proxiable UUID marker function, this would help to avoid wrong logic contract to be used for upgrading. NOTE: The semantics of the UUID deviates from the actual UUPS standard, where it is equivalent of _IMPLEMENTATION_SLOT.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registerAgreementClass(address)",
      "name": "registerAgreementClass",
      "description": "Register a new agreement class to the system.",
      "parameterDecorators": [
        {
          "name": "agreementClassLogic",
          "description": "Initial agreement class code.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registerApp(uint256)",
      "name": "registerApp",
      "description": "Message sender (must be a contract) declares itself as a super app.",
      "parameterDecorators": [
        {
          "name": "configWord",
          "description": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registerAppByFactory(address,uint256)",
      "name": "registerAppByFactory",
      "description": "On mainnet deployments, only factory contracts pre-authorized by governance can use this. See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide. Message sender (must be a contract) declares app as a super app.",
      "parameterDecorators": [
        {
          "name": "app",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "configWord",
          "description": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registerAppWithKey(uint256,string)",
      "name": "registerAppWithKey",
      "description": "See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide On testnets or in dev environment, a placeholder (e.g. empty string) can be used. While the message sender must be the super app itself, the transaction sender (tx.origin) must be the deployer account the registration key was issued for. Message sender declares itself as a super app.",
      "parameterDecorators": [
        {
          "name": "configWord",
          "description": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`.",
          "recommendedTypes": []
        },
        {
          "name": "registrationKey",
          "description": "The registration key issued by the governance, needed to register on a mainnet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeFromAgreementClassesBitmap(uint256,bytes32)",
      "name": "removeFromAgreementClassesBitmap",
      "description": "Create a new bitmask by removing a agreement class from it. agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\".",
      "parameterDecorators": [
        {
          "name": "bitmap",
          "description": "Agreement class bitmap.",
          "recommendedTypes": []
        },
        {
          "name": "agreementType",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "newBitmap",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "replaceGovernance(address)",
      "name": "replaceGovernance",
      "description": "Replace the current governance with a new one.",
      "parameterDecorators": [
        {
          "name": "newGov",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateAgreementClass(address)",
      "name": "updateAgreementClass",
      "description": "Update code of an agreement class.",
      "parameterDecorators": [
        {
          "name": "agreementClassLogic",
          "description": "New code for the agreement class.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateCode(address)",
      "name": "updateCode",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateSuperTokenFactory(address)",
      "name": "updateSuperTokenFactory",
      "description": "Update super token factory.",
      "parameterDecorators": [
        {
          "name": "newFactory",
          "description": "New factory logic.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateSuperTokenLogic(address)",
      "name": "updateSuperTokenLogic",
      "description": "Update the super token logic to the latest. Refer to ISuperTokenFactory.Upgradability for expected behaviours.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "versionRecipient()",
      "name": "versionRecipient",
      "description": "IRelayRecipient.isTrustedForwarder implementation.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}