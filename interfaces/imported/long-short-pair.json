{"schema":"../schema.json","tags":["tokens"],"name":"LongShortPair","description":"Long Short Pair. Uses a combination of long and short tokens to tokenize the bounded price exposure to a given identifier.","eventDecorators":[{"signature":"ContractExpired(address)","name":"ContractExpired","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"caller","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"EarlyExpirationRequested(address,uint64)","name":"EarlyExpirationRequested","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"caller","description":"","recommendedTypes":[],"indexed":true},{"name":"earlyExpirationTimeStamp","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"PositionSettled(address,uint256,uint256,uint256)","name":"PositionSettled","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"sponsor","description":"","recommendedTypes":[],"indexed":true},{"name":"collateralReturned","description":"","recommendedTypes":[],"indexed":false},{"name":"longTokens","description":"","recommendedTypes":[],"indexed":false},{"name":"shortTokens","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokensCreated(address,uint256,uint256)","name":"TokensCreated","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"sponsor","description":"","recommendedTypes":[],"indexed":true},{"name":"collateralUsed","description":"","recommendedTypes":[],"indexed":true},{"name":"tokensMinted","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"TokensRedeemed(address,uint256,uint256)","name":"TokensRedeemed","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"sponsor","description":"","recommendedTypes":[],"indexed":true},{"name":"collateralReturned","description":"","recommendedTypes":[],"indexed":true},{"name":"tokensRedeemed","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"collateralPerPair()","name":"collateralPerPair","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"collateralToken()","name":"collateralToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"create(uint256)","name":"create","description":"Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value. The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.","parameterDecorators":[{"name":"tokensToCreate","description":"number of long and short synthetic tokens to create.","recommendedTypes":[]}],"returnDecorators":[{"name":"collateralUsed","description":"total collateral used to mint the synthetics.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"customAncillaryData()","name":"customAncillaryData","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"earlyExpirationTimestamp()","name":"earlyExpirationTimestamp","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":true},{"signature":"enableEarlyExpiration()","name":"enableEarlyExpiration","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"expirationTimestamp()","name":"expirationTimestamp","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":true},{"signature":"expire()","name":"expire","description":"Expire the LSP contract. Makes a request to the optimistic oracle to inform the settlement price. The caller must approve this contract to transfer `proposerReward` amount of collateral.Will revert if: a) the contract is already early expired, b) it is before the expiration timestamp or c) an expire call has already been made.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"expiryPercentLong()","name":"expiryPercentLong","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"expiryPrice()","name":"expiryPrice","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"financialProductLibrary()","name":"financialProductLibrary","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"finder()","name":"finder","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getCurrentTime()","name":"getCurrentTime","description":"Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"uint for the current Testable timestamp.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEarlyExpirationAncillaryData()","name":"getEarlyExpirationAncillaryData","description":"Generates a modified ancillary data that indicates the contract is being expired early.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"getPositionTokens(address)","name":"getPositionTokens","description":"Returns the number of long and short tokens a sponsor wallet holds.","parameterDecorators":[{"name":"sponsor","description":"address of the sponsor to query.","recommendedTypes":[]}],"returnDecorators":[{"name":"longTokens","description":"the number of long tokens held by the sponsor.","recommendedTypes":[],"solidityType":"uint256"},{"name":"shortTokens","description":"the number of short tokens held by the sponsor.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"ignoreEarlyExpirationPrice()","name":"ignoreEarlyExpirationPrice","description":"Defines a special number that, if returned during an attempted early expiration, will cause the contract to do nothing and not expire. This enables the OO (and DVM voters in the case of a dispute) to choose to keep the contract running, thereby denying the early settlement request.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"isContractEarlyExpired()","name":"isContractEarlyExpired","description":"If the earlyExpirationTimestamp is != 0 then a previous early expiration OO request might still be in the pending state. Check if the OO contains the ignore early price. If it does not contain this then the contract was early expired correctly. Note that _getOraclePrice call will revert if the price request is still pending, thereby reverting all upstream calls pre-settlement of the early expiration price request.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"longToken()","name":"longToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"optimisticOracleLivenessTime()","name":"optimisticOracleLivenessTime","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"optimisticOracleProposerBond()","name":"optimisticOracleProposerBond","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"pairName()","name":"pairName","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"priceIdentifier()","name":"priceIdentifier","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"proposerReward()","name":"proposerReward","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"receivedSettlementPrice()","name":"receivedSettlementPrice","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"redeem(uint256)","name":"redeem","description":"Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value. This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.This method can be called either pre or post expiration.","parameterDecorators":[{"name":"tokensToRedeem","description":"number of long and short synthetic tokens to redeem.","recommendedTypes":[]}],"returnDecorators":[{"name":"collateralReturned","description":"total collateral returned in exchange for the pair of synthetics.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"requestEarlyExpiration(uint64)","name":"requestEarlyExpiration","description":"Enables the LSP to request early expiration. This initiates a price request to the optimistic oracle at the provided timestamp with a modified version of the ancillary data that includes the key \"earlyExpiration:1\" which signals to the OO that this is an early expiration request, rather than standard settlement. The caller must approve this contract to transfer `proposerReward` amount of collateral.Will revert if: a) the contract is already early expired, b) it is after the expiration timestamp, c) early expiration is disabled for this contract, d) the proposed expiration timestamp is in the future. e) an early expiration attempt has already been made (in pending state).","parameterDecorators":[{"name":"_earlyExpirationTimestamp","description":"timestamp at which the early expiration is proposed.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setCurrentTime(uint256)","name":"setCurrentTime","description":"Sets the current time. Will revert if not running in test mode.","parameterDecorators":[{"name":"time","description":"timestamp to set current Testable time to.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"settle(uint256,uint256)","name":"settle","description":"Settle long and/or short tokens in for collateral at a rate informed by the contract settlement. Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.This function can be called before or after expiration to facilitate early expiration. If a price has not yet been resolved for either normal or early expiration yet then it will revert.","parameterDecorators":[{"name":"longTokensToRedeem","description":"number of long tokens to settle.","recommendedTypes":[]},{"name":"shortTokensToRedeem","description":"number of short tokens to settle.","recommendedTypes":[]}],"returnDecorators":[{"name":"collateralReturned","description":"total collateral returned in exchange for the pair of synthetics.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"shortToken()","name":"shortToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"timerAddress()","name":"timerAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}