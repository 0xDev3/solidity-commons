{
  "schema": "../schema.json",
  "tags": [],
  "name": "RamdomNumberTest",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "fee()",
      "name": "fee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRandomNumber(uint256)",
      "name": "getRandomNumber",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_seed",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "keyHash()",
      "name": "keyHash",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nonces(bytes32)",
      "name": "nonces",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "randomNumber()",
      "name": "randomNumber",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rawFulfillRandomness(bytes32,uint256)",
      "name": "rawFulfillRandomness",
      "description": "",
      "parameterDecorators": [
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "randomness",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestRandomness(bytes32,uint256,uint256)",
      "name": "requestRandomness",
      "description": "requestRandomness initiates a request for VRF output given _seed. See \"SECURITY CONSIDERATIONS\" above for more information on _seed. The fulfillRandomness method receives the output, once it's providedby the Oracle, and verified by the vrfCoordinator. The _keyHash must already be registered with the VRFCoordinator, andthe _fee must exceed the fee specified during registration of the_keyHash. The returned requestId can be used to distinguish responses to *concurrent requests. It is passed as the first argument tofulfillRandomness.",
      "parameterDecorators": [
        {
          "name": "_keyHash",
          "description": "ID of public key against which randomness is generated.",
          "recommendedTypes": []
        },
        {
          "name": "_fee",
          "description": "The amount of LINK to send with the request.",
          "recommendedTypes": []
        },
        {
          "name": "_seed",
          "description": "seed mixed into the input of the VRF.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "requestId",
          "description": "unique ID for this request.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}