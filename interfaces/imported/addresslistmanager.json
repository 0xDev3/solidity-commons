{
  "schema": "../schema.json",
  "tags": [],
  "name": "AddresslistManager",
  "description": "",
  "eventDecorators": [
    {
      "signature": "adminModified(string,address)",
      "name": "adminModified",
      "description": "An event emitted when a vote has been cast on a proposal. Emitted when admins mapping is modified.",
      "parameterDecorators": [
        {
          "name": "eventName",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addAddressTo(string,address)",
      "name": "addAddressTo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addAdmin(address)",
      "name": "addAdmin",
      "description": "Adds a new admin to admins mapping. Function can only called by admins or owner. An admin can't add itself twice Emits an { adminModified } event.",
      "parameterDecorators": [
        {
          "name": "newAdmin",
          "description": "Address of new admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addresslists(bytes32,address)",
      "name": "addresslists",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "admins(address)",
      "name": "admins",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkEntry(string,address)",
      "name": "checkEntry",
      "description": "",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nameTracking(bytes32)",
      "name": "nameTracking",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newAddresslist(string)",
      "name": "newAddresslist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeAddressfrom(string,address)",
      "name": "removeAddressfrom",
      "description": "",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeAdmin(address)",
      "name": "removeAdmin",
      "description": "Removes an admin from admins mapping. Function can only called by admins or owner. Admins can't remove themself. Owner of this smart contract can't be removed drom admins list. Set admins[<address>] to 0. Emits an { adminModified } event.",
      "parameterDecorators": [
        {
          "name": "oldAdmin",
          "description": "The address to remove from admins list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwner(address)",
      "name": "setOwner",
      "description": "Overwrites the existing owner. Only the current owner can call this function. Adds new owner to admins list if necessary. Emits an { adminModified } event.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "Address of the new owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}