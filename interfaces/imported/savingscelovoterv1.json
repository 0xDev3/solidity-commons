{
  "schema": "../schema.json",
  "tags": [
    "voting",
    "celo network"
  ],
  "name": "SavingsCELOVoterV1",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_proxy()",
      "name": "_proxy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "activateAndVote(address,address)",
      "name": "activateAndVote",
      "description": "Activates any activatable votes and also casts new votes if there is new locked CELO in SavingsCELO contract. Anyone can call this method, and it is expected to be called regularly to make sure all new locked CELO is deployed to earn rewards.",
      "parameterDecorators": [
        {
          "name": "lesser",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "greater",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeVotedGroup(address,uint256,address,address,address,address)",
      "name": "changeVotedGroup",
      "description": "Changes voted group. This call revokes all current votes for currently voted group. votedGroupIndex is the index of votedGroup in SavingsCELO votes. This is expected to be 0 since SavingsCELO is supposed to be voting only for one group. /// lesser.../greater... parameters are needed to perform Election.revokePending and Election.revokeActive calls. See Election contract for more details. /// NOTE: changeVotedGroup can be used to clear out all votes even if SavingsCELO is voting for multiple groups. This can be useful if SavingsCELO is in a weird voting state before VoterV1 contract is installed as the voter contract.",
      "parameterDecorators": [
        {
          "name": "newGroup",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "votedGroupIndex",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "lesserAfterPendingRevoke",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "greaterAfterPendingRevoke",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "lesserAfterActiveRevoke",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "greaterAfterActiveRevoke",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "votedGroup()",
      "name": "votedGroup",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}