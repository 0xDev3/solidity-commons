{
  "schema": "../schema.json",
  "tags": [],
  "name": "ModuleManager",
  "description": "ModuleManager.",
  "eventDecorators": [
    {
      "signature": "TransactionExecuted(address,bool,bytes32)",
      "name": "TransactionExecuted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "signedHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ModuleCreated(bytes32)",
      "name": "ModuleCreated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ModuleInitialised(address)",
      "name": "ModuleInitialised",
      "description": "",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "init(address)",
      "name": "init",
      "description": "Inits the module for a wallet by logging an event. The method can only be called by the wallet itself.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getNonce(address)",
      "name": "getNonce",
      "description": "Gets the current nonce for a wallet.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addModule(address,address)",
      "name": "addModule",
      "description": "Adds a module to a wallet. First checks that the module is registered.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_module",
          "description": "The modules to authorise.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgrade(address,address)",
      "name": "upgrade",
      "description": "Upgrades the modules of a wallet. The implementation of the upgrade is delegated to a contract implementing the Upgrade interface. This makes it possible for the manager to implement any possible present and future upgrades without the need to authorise modules just for the upgrade process.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_upgrader",
          "description": "The address of an implementation of the Upgrader interface.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "recoverToken(address)",
      "name": "recoverToken",
      "description": "Utility method enbaling anyone to recover ERC20 token sent to the module by mistake and transfer them to the Module Registry.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "The token to recover.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "execute(address,bytes,uint256,bytes,uint256,uint256)",
      "name": "execute",
      "description": "Executes a relayed transaction.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The data for the relayed transaction.",
          "recommendedTypes": []
        },
        {
          "name": "_nonce",
          "description": "The nonce used to prevent replay attacks.",
          "recommendedTypes": []
        },
        {
          "name": "_signatures",
          "description": "The signatures as a concatenated byte array.",
          "recommendedTypes": []
        },
        {
          "name": "_gasPrice",
          "description": "The gas price to use for the gas refund.",
          "recommendedTypes": []
        },
        {
          "name": "_gasLimit",
          "description": "The gas limit to use for the gas refund.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "relayer(address)",
      "name": "relayer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}