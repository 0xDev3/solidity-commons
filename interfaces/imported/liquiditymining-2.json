{"schema":"../schema.json","tags":["liquidity"],"name":"LiquidityMining","description":"","eventDecorators":[{"signature":"ERC20Movement(address,address,uint256,uint256)","name":"ERC20Movement","description":"","parameterDecorators":[{"name":"_movedBy","description":"","recommendedTypes":[],"indexed":false},{"name":"_movedTo","description":"","recommendedTypes":[],"indexed":false},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false},{"name":"_blockHeight","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ETHRescued(address,address,uint256,uint256)","name":"ETHRescued","description":"","parameterDecorators":[{"name":"_movedBy","description":"","recommendedTypes":[],"indexed":false},{"name":"_movedTo","description":"","recommendedTypes":[],"indexed":false},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false},{"name":"_blockHeight","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"PositionAdded(address,uint256,uint256)","name":"PositionAdded","description":"","parameterDecorators":[{"name":"_account","description":"","recommendedTypes":[],"indexed":false},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false},{"name":"_blockHeight","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"PositionCompounded(address,uint256,uint256)","name":"PositionCompounded","description":"","parameterDecorators":[{"name":"_account","description":"","recommendedTypes":[],"indexed":false},{"name":"_amountAdded","description":"","recommendedTypes":[],"indexed":false},{"name":"_blockHeight","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"PositionForceRemoved(address,uint256,uint256)","name":"PositionForceRemoved","description":"","parameterDecorators":[{"name":"_account","description":"","recommendedTypes":[],"indexed":false},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false},{"name":"_blockHeight","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"PositionRemoved(address,uint256,uint256)","name":"PositionRemoved","description":"","parameterDecorators":[{"name":"_account","description":"","recommendedTypes":[],"indexed":false},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false},{"name":"_blockHeight","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"_ADMIN()","name":"_ADMIN","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"_MOVE()","name":"_MOVE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"_REMOVAL()","name":"_REMOVAL","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"_RESCUE()","name":"_RESCUE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"accountPosition(address,uint256)","name":"accountPosition","description":"funtion that returns a callers staked position in a pool using `_pid` as an argument.","parameterDecorators":[{"name":"_account","description":"","recommendedTypes":[]},{"name":"_pid","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_accountAddress","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"_unlockHeight","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_lockedAmount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_lockPeriodInDays","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_userDPY","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_lpTokenAddress","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"_totalRewardsPaidFromPool","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"addDisabled()","name":"addDisabled","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"addLiquidtyPoolToken(address,uint256)","name":"addLiquidtyPoolToken","description":"functions to add and remove Liquidty Pool pairs to allow users to stake the pools LP Tokens towards earnign rewards. Can only be called by accounts with the `_ADMIN` role and should only be added once. The index at which the pool pair is stored will determine the pools `_pid`. Note if you remove a pool the index remians but is just left empty making the _pid return zero value if called.","parameterDecorators":[{"name":"_lpTokenAddress","description":"","recommendedTypes":[]},{"name":"_bonus","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addPosition(uint256,uint256,uint256)","name":"addPosition","description":"this function allows a user to add a liquidity Staking position. The user will need to choose one of the three configured lock Periods. Users may add to the position only once per lock period.","parameterDecorators":[{"name":"_lpTokenAmount","description":"","recommendedTypes":[]},{"name":"_lockPeriod","description":"","recommendedTypes":[]},{"name":"_pid","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"calculateUserDailyYield(uint256)","name":"calculateUserDailyYield","description":"calculates a users daily yield. DY is calculated using basis points and the lock period as a multiplier. Basis Points and the scale used are configurble by accounts or contracts that have the _ADMIN Role.","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_dailyYield","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"contractBalanceByPoolID(uint256)","name":"contractBalanceByPoolID","description":"function to return the contracts balances of LP Tokens staked from different Uniswap pools.","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_balance","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"disableAdd(bool)","name":"disableAdd","description":"","parameterDecorators":[{"name":"_addDisabled","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"ethRescue(address,uint256)","name":"ethRescue","description":"","parameterDecorators":[{"name":"_dest","description":"","recommendedTypes":[]},{"name":"_etherAmount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"forcePositionRemoval(uint256,address)","name":"forcePositionRemoval","description":"function to forcibly remove a users position. This is required due to the fact that the basis points used to calculate user DPY will be constantly changing. We will need to forceibly remove positions of lazy (or malicious) users who will try to take advantage of DPY being lowered instead of raised and maintining thier current return levels.","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]},{"name":"_account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasPosition(address,uint256)","name":"hasPosition","description":"funtion that returns a true or false regarding whether an account as a position in a pool. Takes the account address and `_pid` as arguments.","parameterDecorators":[{"name":"_userAddress","description":"","recommendedTypes":[]},{"name":"_pid","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_hasPosition","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"maxUserBP()","name":"maxUserBP","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"moveERC20(address,address,uint256)","name":"moveERC20","description":"The below function will allow contracts or accounts with the _MOVE role to move tokens that are staked with the contract. Currently this will not be used nor will any accounts/contracts be granted the _MOVE role. The Reason for including this capability is two fold. One, it allows us to recover tokens if they are sent to the contract by mistake. Two, it will allow us to further extend the use of this contract and the tokens staked within it to allow for use of farming other opprotiunites giving users even further rewards. If and when this is activated/used will be a community decision.","parameterDecorators":[{"name":"_ERC20","description":"","recommendedTypes":[]},{"name":"_dest","description":"","recommendedTypes":[]},{"name":"_ERC20Amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"paused()","name":"paused","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"periodCalc()","name":"periodCalc","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"poolInfo(uint256)","name":"poolInfo","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"ContractAddress","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"TotalRewardsPaidByPool","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"TotalLPTokensLocked","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"PoolBonus","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"poolLength()","name":"poolLength","description":"return the length of the pool array.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"provider(uint256,address)","name":"provider","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"Provider","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"UnlockHeight","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"LockedAmount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"Days","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"UserBP","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"TotalRewardsPaid","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"removeLiquidtyPoolToken(uint256)","name":"removeLiquidtyPoolToken","description":"","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removePosition(uint256,uint256)","name":"removePosition","description":"allows a user to remove a liquidity staking position and will withdraw any pending rewards. User must withdraw the entire position.","parameterDecorators":[{"name":"_lpTokenAmount","description":"","recommendedTypes":[]},{"name":"_pid","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removePositionOnly()","name":"removePositionOnly","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"setCompoundYield(uint256,uint256,uint256)","name":"setCompoundYield","description":"","parameterDecorators":[{"name":"_newCompoundYield0","description":"","recommendedTypes":[]},{"name":"_newCompoundYield1","description":"","recommendedTypes":[]},{"name":"_newCompoundYield2","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setLockPeriodBPScale(uint256)","name":"setLockPeriodBPScale","description":"","parameterDecorators":[{"name":"_newLockPeriodScale","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setLockPeriodBasisPoints(uint256,uint256,uint256)","name":"setLockPeriodBasisPoints","description":"set of functions to set parameters regarding lock periods and basis points which are used to calculate a users daily yield. Can only be called by contract _ADMIN.","parameterDecorators":[{"name":"_newLockPeriod0BasisPoint","description":"","recommendedTypes":[]},{"name":"_newLockPeriod1BasisPoint","description":"","recommendedTypes":[]},{"name":"_newLockPeriod2BasisPoint","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setLockPeriods(uint256,uint256,uint256)","name":"setLockPeriods","description":"allows accounts with the _ADMIN role to set new lock periods.","parameterDecorators":[{"name":"_newPeriod0","description":"","recommendedTypes":[]},{"name":"_newPeriod1","description":"","recommendedTypes":[]},{"name":"_newPeriod2","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMaxUserBP(uint256)","name":"setMaxUserBP","description":"","parameterDecorators":[{"name":"_newMaxUserBP","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPaused(bool)","name":"setPaused","description":"","parameterDecorators":[{"name":"_paused","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPeriodCalc(uint256)","name":"setPeriodCalc","description":"allows contract owner to set a new `periodCalc`.","parameterDecorators":[{"name":"_newPeriodCalc","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPoolBonus(uint256,uint256)","name":"setPoolBonus","description":"","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]},{"name":"_bonus","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPreYieldDivisor(uint256)","name":"setPreYieldDivisor","description":"","parameterDecorators":[{"name":"_newDivisor","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRemovePosOnly(bool)","name":"setRemovePosOnly","description":"","parameterDecorators":[{"name":"_removeOnly","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setTokenContract(address)","name":"setTokenContract","description":"function to set the token that will be minting rewards for Liquidity Providers.","parameterDecorators":[{"name":"_fmta","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"showCurrentLockPeriods()","name":"showCurrentLockPeriods","description":"function to show current lock periods.","parameterDecorators":[],"returnDecorators":[{"name":"_lockPeriod0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_lockPeriod1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_lockPeriod2","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawAccruedYieldAndAdd(uint256,uint256)","name":"withdrawAccruedYieldAndAdd","description":"allow user to withdraw thier accrued yield. Reset the lock period to continue liquidity mining and apply CDPY to DPY. Allow user to add more stake if desired in the process. Once a user has reached the `maxUserBP` DPY will no longer increase.","parameterDecorators":[{"name":"_pid","description":"","recommendedTypes":[]},{"name":"_lpTokenAmount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}