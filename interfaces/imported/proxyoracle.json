{
  "schema": "../schema.json",
  "tags": [
    "oracles",
    "chainlink"
  ],
  "name": "ProxyOracle",
  "description": "ProxyOracle. Oracle used for getting the price of xSUSHI based on Chainlink.",
  "eventDecorators": [
    {
      "signature": "LogOracleImplementationChange(address,address)",
      "name": "LogOracleImplementationChange",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "oldOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "changeOracleImplementation(address)",
      "name": "changeOracleImplementation",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newOracle",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimOwnership()",
      "name": "claimOwnership",
      "description": "Needs to be called by `pendingOwner` to claim ownership.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "get(bytes)",
      "name": "get",
      "description": "Get the latest exchange rate.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "success if no valid (recent) rate is available, return false else true.",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "_1",
          "description": "rate The rate of the requested asset / pair / pool.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "name(bytes)",
      "name": "name",
      "description": "Returns a human readable name about this oracle.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "(string) A human readable name about this oracle.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracleImplementation()",
      "name": "oracleImplementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "peek(bytes)",
      "name": "peek",
      "description": "Check the last exchange rate without any state changes.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "success if no valid (recent) rate is available, return false else true.",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "_1",
          "description": "rate The rate of the requested asset / pair / pool.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "peekSpot(bytes)",
      "name": "peekSpot",
      "description": "Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "rate",
          "description": "The rate of the requested asset / pair / pool.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingOwner()",
      "name": "pendingOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "symbol(bytes)",
      "name": "symbol",
      "description": "Returns a human readable (short) name about this oracle.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle. For example: (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "(string) A human readable symbol name about this oracle.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address,bool,bool)",
      "name": "transferOwnership",
      "description": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "Address of the new owner.",
          "recommendedTypes": []
        },
        {
          "name": "direct",
          "description": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "recommendedTypes": []
        },
        {
          "name": "renounce",
          "description": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}