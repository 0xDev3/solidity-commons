{
  "schema": "../schema.json",
  "tags": [],
  "name": "MoneyMarket",
  "description": "",
  "eventDecorators": [
    {
      "signature": "WETHAddressSet(address)",
      "name": "WETHAddressSet",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "wethAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LiquidatorAdded(address)",
      "name": "LiquidatorAdded",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "Liquidator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LiquidatorRemoved(address)",
      "name": "LiquidatorRemoved",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "Liquidator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SupplyReceived(address,address,uint256,uint256,uint256)",
      "name": "SupplyReceived",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "startingBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SupplyWithdrawn(address,address,uint256,uint256,uint256)",
      "name": "SupplyWithdrawn",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "startingBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BorrowTaken(address,address,uint256,uint256,uint256,uint256)",
      "name": "BorrowTaken",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "startingBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "borrowAmountWithFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BorrowRepaid(address,address,uint256,uint256,uint256)",
      "name": "BorrowRepaid",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "startingBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BorrowLiquidated(address,address,uint256,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256)",
      "name": "BorrowLiquidated",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "targetAccount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assetBorrow",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "borrowBalanceBefore",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "borrowBalanceAccumulated",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountRepaid",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "borrowBalanceAfter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assetCollateral",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "collateralBalanceBefore",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "collateralBalanceAccumulated",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountSeized",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "collateralBalanceAfter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewPendingAdmin(address,address)",
      "name": "NewPendingAdmin",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "oldPendingAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newPendingAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewAdmin(address,address)",
      "name": "NewAdmin",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "oldAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewOracle(address,address)",
      "name": "NewOracle",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "oldOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SupportedMarket(address,address)",
      "name": "SupportedMarket",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "interestRateModel",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewRiskParameters(uint256,uint256,uint256,uint256)",
      "name": "NewRiskParameters",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "oldCollateralRatioMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newCollateralRatioMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldLiquidationDiscountMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newLiquidationDiscountMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewOriginationFee(uint256,uint256)",
      "name": "NewOriginationFee",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "oldOriginationFeeMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newOriginationFeeMantissa",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetMarketInterestRateModel(address,address)",
      "name": "SetMarketInterestRateModel",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "interestRateModel",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EquityWithdrawn(address,uint256,uint256,address)",
      "name": "EquityWithdrawn",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "equityAvailableBefore",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SuspendedMarket(address)",
      "name": "SuspendedMarket",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetPaused(bool)",
      "name": "SetPaused",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "newState",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "KYCAdminAdded(address)",
      "name": "KYCAdminAdded",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "KYCAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "KYCAdminRemoved(address)",
      "name": "KYCAdminRemoved",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "KYCAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "KYCCustomerAdded(address)",
      "name": "KYCCustomerAdded",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "KYCCustomer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "KYCCustomerRemoved(address)",
      "name": "KYCCustomerRemoved",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "KYCCustomer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Failure(uint256,uint256,uint256)",
      "name": "Failure",
      "description": "Event emitted when a supported token is removed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "error",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "info",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "detail",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "getBorrowBalance(address,address)",
      "name": "getBorrowBalance",
      "description": "return borrow balance with any accumulated interest for `asset` belonging to `account`. returns borrow balance with any accumulated interest for `asset` belonging to `account`.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "the account to examine.",
          "recommendedTypes": []
        },
        {
          "name": "asset",
          "description": "the market asset whose borrow balance belonging to `account` should be checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addCustomerKYC(address)",
      "name": "addCustomerKYC",
      "description": "Function for use by the KYC admins to add KYC Customers.",
      "parameterDecorators": [
        {
          "name": "customer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setOriginationFee(uint256)",
      "name": "_setOriginationFee",
      "description": "Sets the origination fee (which is a multiplier on new borrows). Owner function to set the origination fee.",
      "parameterDecorators": [
        {
          "name": "originationFeeMantissa",
          "description": "rational collateral ratio, scaled by 1e18. The de-scaled value must be >= 1.1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setPaused(bool)",
      "name": "_setPaused",
      "description": "set `paused` to the specified state. Admin function to pause or resume the market.",
      "parameterDecorators": [
        {
          "name": "requestedState",
          "description": "value to assign to `paused`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pendingAdmin()",
      "name": "pendingAdmin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "verifyKYC(address)",
      "name": "verifyKYC",
      "description": "Function to fetch KYC verification status of a customer.",
      "parameterDecorators": [
        {
          "name": "customer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_setOracle(address)",
      "name": "_setOracle",
      "description": "Set new oracle, who can set asset prices. Admin function to change oracle.",
      "parameterDecorators": [
        {
          "name": "newOracle",
          "description": "New oracle address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_withdrawEquity(address,uint256)",
      "name": "_withdrawEquity",
      "description": "withdraws `amount` of `asset` from equity for asset, as long as `amount` <= equity. Equity= cash - (supply + borrows). withdraws `amount` of `asset` from equity for asset, enforcing amount <= cash - (supply + borrows).",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "asset whose equity should be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "amount of equity to withdraw; must not exceed equity available.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "checkKYCAdmin(address)",
      "name": "checkKYCAdmin",
      "description": "Function to fetch KYC Admin status of an admin.",
      "parameterDecorators": [
        {
          "name": "_KYCAdmin",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "borrow(address,uint256)",
      "name": "borrow",
      "description": "Users borrow assets from the protocol to their own address.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The market asset to borrow.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount to borrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addLiquidator(address)",
      "name": "addLiquidator",
      "description": "Function for use by the admin of the contract to add Liquidators.",
      "parameterDecorators": [
        {
          "name": "liquidator",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "wethAddress()",
      "name": "wethAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_setMarketInterestRateModel(address,address)",
      "name": "_setMarketInterestRateModel",
      "description": "Sets the interest rate model for a given market. Admin function to set interest rate model.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "Asset to support.",
          "recommendedTypes": []
        },
        {
          "name": "interestRateModel",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "assetPrices(address)",
      "name": "assetPrices",
      "description": "Reads scaled price of specified asset from the price oracle. Reads scaled price of specified asset from the price oracle. The plural name is to match a previous storage mapping that this function replaced.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "Asset whose price should be retrieved.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccountLiquidity(address)",
      "name": "getAccountLiquidity",
      "description": "returns the liquidity for given account. a positive result indicates ability to borrow, whereas a negative result indicates a shortfall which may be liquidated. returns account liquidity in terms of eth-wei value, scaled by 1e18 note: this includes interest trued up on all balances.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "the account to examine.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCollateralMarketsLength()",
      "name": "getCollateralMarketsLength",
      "description": "return the number of elements in `collateralMarkets`. you can then externally call `collateralMarkets(uint)` to pull each market address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracle()",
      "name": "oracle",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidationDiscount()",
      "name": "liquidationDiscount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "mantissa",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "markets(address)",
      "name": "markets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isSupported",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "blockNumber",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "interestRateModel",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "totalSupply",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "supplyRateMantissa",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "supplyIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "totalBorrows",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "borrowRateMantissa",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "borrowIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addKYCAdmin(address)",
      "name": "addKYCAdmin",
      "description": "Function for use by the admin of the contract to add KYC Admins.",
      "parameterDecorators": [
        {
          "name": "KYCAdmin",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "WETHContract()",
      "name": "WETHContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initializer()",
      "name": "initializer",
      "description": "`MoneyMarket` is the core MoneyMarket contractThis contract uses Openzeppelin Upgrades plugin to make use of the upgradeability functionality using proxiesHence this contract has an 'initializer' in place of a 'constructor'Make sure to add new global variables only at the bottom of all the existing global variables i.e., line #344Also make sure to do extensive testing while modifying any structs and enums during an upgrade.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateAccountValues(address)",
      "name": "calculateAccountValues",
      "description": "Gets the ETH values of the user's accumulated supply and borrow balances, scaled by 10e18. This includes any accumulated interest thus far but does NOT actually update anything in storage. Gets ETH values of accumulated supply and borrow balances.",
      "parameterDecorators": [
        {
          "name": "userAddress",
          "description": "account for which to sum values.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setWethAddress(address)",
      "name": "setWethAddress",
      "description": "Set WETH token contract address.",
      "parameterDecorators": [
        {
          "name": "wethContractAddress",
          "description": "Enter the WETH token address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "repayBorrow(address,uint256)",
      "name": "repayBorrow",
      "description": "Users repay borrowed assets from their own address to the protocol.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The market asset to repay.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount to repay (or -1 for max).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "verifyLiquidator(address)",
      "name": "verifyLiquidator",
      "description": "Function to fetch Liquidator status of a customer.",
      "parameterDecorators": [
        {
          "name": "liquidator",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collateralRatio()",
      "name": "collateralRatio",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "mantissa",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_setPendingAdmin(address)",
      "name": "_setPendingAdmin",
      "description": "Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer. Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.",
      "parameterDecorators": [
        {
          "name": "newPendingAdmin",
          "description": "New pending admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supplyBalances(address,address)",
      "name": "supplyBalances",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "principal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "interestIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "originationFee()",
      "name": "originationFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "mantissa",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSupplyBalance(address,address)",
      "name": "getSupplyBalance",
      "description": "return supply balance with any accumulated interest for `asset` belonging to `account`. returns supply balance with any accumulated interest for `asset` belonging to `account`.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "the account to examine.",
          "recommendedTypes": []
        },
        {
          "name": "asset",
          "description": "the market asset whose supply balance belonging to `account` should be checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collateralMarkets(uint256)",
      "name": "collateralMarkets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_supportMarket(address,address)",
      "name": "_supportMarket",
      "description": "Supports a given market (asset) for use. Admin function to add support for a market.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "Asset to support; MUST already have a non-zero price set.",
          "recommendedTypes": []
        },
        {
          "name": "interestRateModel",
          "description": "InterestRateModel to use for the asset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setRiskParameters(uint256,uint256)",
      "name": "_setRiskParameters",
      "description": "Sets the risk parameters: collateral ratio and liquidation discount. Owner function to set the risk parameters.",
      "parameterDecorators": [
        {
          "name": "collateralRatioMantissa",
          "description": "rational collateral ratio, scaled by 1e18. The de-scaled value must be >= 1.1.",
          "recommendedTypes": []
        },
        {
          "name": "liquidationDiscountMantissa",
          "description": "rational liquidation discount, scaled by 1e18. The de-scaled value must be <= 0.1 and must be less than (descaled collateral ratio minus 1).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeCustomerKYC(address)",
      "name": "removeCustomerKYC",
      "description": "Function for use by the KYC admins to remove KYC Customers.",
      "parameterDecorators": [
        {
          "name": "customer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeKYCAdmin(address)",
      "name": "removeKYCAdmin",
      "description": "Function for use by the admin of the contract to remove KYC Admins.",
      "parameterDecorators": [
        {
          "name": "KYCAdmin",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_suspendMarket(address)",
      "name": "_suspendMarket",
      "description": "Suspends a given *supported* market (asset) from use. Assets in this state do count for collateral, but users may only withdraw, payBorrow, and liquidate the asset. The liquidate function no longer checks collateralization. Admin function to suspend a market.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "Asset to suspend.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "liquidateBorrow(address,address,address,uint256)",
      "name": "liquidateBorrow",
      "description": "users repay all or some of an underwater borrow and receive collateral.",
      "parameterDecorators": [
        {
          "name": "targetAccount",
          "description": "The account whose borrow should be liquidated.",
          "recommendedTypes": []
        },
        {
          "name": "assetBorrow",
          "description": "The market asset to repay.",
          "recommendedTypes": []
        },
        {
          "name": "assetCollateral",
          "description": "The borrower's market asset to receive in exchange.",
          "recommendedTypes": []
        },
        {
          "name": "requestedAmountClose",
          "description": "The amount to repay (or -1 for max).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_acceptAdmin()",
      "name": "_acceptAdmin",
      "description": "Accepts transfer of admin rights. msg.sender must be pendingAdmin. Admin function for pending admin to accept role and update admin.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeLiquidator(address)",
      "name": "removeLiquidator",
      "description": "Function for use by the admin of the contract to remove Liquidators.",
      "parameterDecorators": [
        {
          "name": "liquidator",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supply(address,uint256)",
      "name": "supply",
      "description": "supply `amount` of `asset` (which must be supported) to `msg.sender` in the protocol. add amount of supported asset to msg.sender's account.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The market asset to supply.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount to supply.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(address,uint256)",
      "name": "withdraw",
      "description": "withdraw `amount` of `asset` from sender's account to sender's address. withdraw `amount` of `asset` from msg.sender's account to msg.sender.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The market asset to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "requestedAmount",
          "description": "The amount to withdraw (or -1 for max).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "admin()",
      "name": "admin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sendEtherToUser(address,uint256)",
      "name": "sendEtherToUser",
      "description": "send Ether from contract to a user. Fail safe plan to send Ether stuck in contract in case there is a problem with withdraw.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "borrowBalances(address,address)",
      "name": "borrowBalances",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "principal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "interestIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initializationDone()",
      "name": "initializationDone",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}