{
  "schema": "../schema.json",
  "tags": [],
  "name": "RelayerManager",
  "description": "RelayerManager. Feature to execute transactions signed by ETH-less accounts and sent by a relayer.",
  "eventDecorators": [
    {
      "signature": "FeatureCreated(bytes32)",
      "name": "FeatureCreated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Refund(address,address,address,uint256)",
      "name": "Refund",
      "description": "",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "refundAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "refundToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "refundAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransactionExecuted(address,bool,bytes,bytes32)",
      "name": "TransactionExecuted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "returnData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "signedHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "execute(address,address,bytes,uint256,bytes,uint256,uint256,address,address)",
      "name": "execute",
      "description": "Executes a relayed transaction.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_feature",
          "description": "The target feature.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The data for the relayed transaction.",
          "recommendedTypes": []
        },
        {
          "name": "_nonce",
          "description": "The nonce used to prevent replay attacks.",
          "recommendedTypes": []
        },
        {
          "name": "_signatures",
          "description": "The signatures as a concatenated byte array.",
          "recommendedTypes": []
        },
        {
          "name": "_gasPrice",
          "description": "The gas price to use for the gas refund.",
          "recommendedTypes": []
        },
        {
          "name": "_gasLimit",
          "description": "The gas limit to use for the gas refund.",
          "recommendedTypes": []
        },
        {
          "name": "_refundToken",
          "description": "The token to use for the gas refund.",
          "recommendedTypes": []
        },
        {
          "name": "_refundAddress",
          "description": "The address refunded to prevent front-running.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getNonce(address)",
      "name": "getNonce",
      "description": "Gets the current nonce for a wallet.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRequiredSignatures(address,bytes)",
      "name": "getRequiredSignatures",
      "description": "Gets the number of valid signatures that must be provided to execute a specific relayed transaction.",
      "parameterDecorators": [
        {
          "name": "_data",
          "description": "The data of the relayed transaction.",
          "recommendedTypes": []
        },
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStaticCallSignatures()",
      "name": "getStaticCallSignatures",
      "description": "Gets the list of static call signatures that this feature responds to on behalf of wallets.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_sigs",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "guardianStorage()",
      "name": "guardianStorage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "init(address)",
      "name": "init",
      "description": "Inits the feature for a wallet by doing nothing. !! Overriding methods need make sure `init()` can only be called by the VersionManager !!.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isExecutedTx(address,bytes32)",
      "name": "isExecutedTx",
      "description": "Checks if a transaction identified by its sign hash has already been executed.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_signHash",
          "description": "The sign hash of the transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "executed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isFeatureAuthorisedInVersionManager(address,address)",
      "name": "isFeatureAuthorisedInVersionManager",
      "description": "Helper method to check if an address is an authorised feature of a target wallet.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_feature",
          "description": "The address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "limitStorage()",
      "name": "limitStorage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recoverToken(address)",
      "name": "recoverToken",
      "description": "Utility method to recover any ERC20 token that was sent to the Feature by mistake.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "The token to recover.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "relayer(address)",
      "name": "relayer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenPriceRegistry()",
      "name": "tokenPriceRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}