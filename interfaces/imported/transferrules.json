{
  "schema": "../schema.json",
  "tags": [],
  "name": "TransferRules",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Validator's status changed. Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_erc777()",
      "name": "_erc777",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "applyRuleLockup(address,address,uint256)",
      "name": "applyRuleLockup",
      "description": "Do transfer and checks where funds should go. If both from and to are on the whitelist funds should be transferred but if one of them are on the grey list token-issuer/owner need to approve transfer.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The address to transfer from.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The address to send tokens to.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The amount of tokens to send.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorize(address,address,uint256)",
      "name": "authorize",
      "description": "Checks if transfer passes transfer rules.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The address to transfer from.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The address to send tokens to.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The amount of tokens to send.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "automaticLockupAdd(address,uint256)",
      "name": "automaticLockupAdd",
      "description": "",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "will add automatic lockup for destination address sent address from.",
          "recommendedTypes": []
        },
        {
          "name": "daysAmount",
          "description": "duration in days.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "automaticLockupRemove(address)",
      "name": "automaticLockupRemove",
      "description": "",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "remove automaticLockup from address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cleanERC()",
      "name": "cleanERC",
      "description": "clean ERC777. available only for owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "dailyRate(uint256,uint256)",
      "name": "dailyRate",
      "description": "setup limit sell amount of their tokens per daysAmount.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "token's amount.",
          "recommendedTypes": []
        },
        {
          "name": "daysAmount",
          "description": "days.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getIntercoinAddress()",
      "name": "getIntercoinAddress",
      "description": "got stored intercoin address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "init()",
      "name": "init",
      "description": "init method.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isWhitelisted(address)",
      "name": "isWhitelisted",
      "description": "Checks if a address already exists in a whitelist.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "result",
          "description": "return true if exist.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "managersAdd(address[])",
      "name": "managersAdd",
      "description": "added managers. available only for owner.",
      "parameterDecorators": [
        {
          "name": "addresses",
          "description": "array of manager's addreses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "managersRemove(address[])",
      "name": "managersRemove",
      "description": "removed managers. available only for owner.",
      "parameterDecorators": [
        {
          "name": "addresses",
          "description": "array of manager's addreses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "minimumsAdd(address,uint256,uint256,bool)",
      "name": "minimumsAdd",
      "description": "adding minimum holding at sender during period from now to timestamp.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "address which should be restricted.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "amount.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "period until minimum applied.",
          "recommendedTypes": []
        },
        {
          "name": "gradual",
          "description": "true if the limitation can gradually decrease.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "minimumsClear(address)",
      "name": "minimumsClear",
      "description": "removes all minimums from this address so all tokens are unlocked to send.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "address which should be clear restrict.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "minimumsView(address)",
      "name": "minimumsView",
      "description": "viewing minimum holding in addr sener during period from now to timestamp.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setERC(address)",
      "name": "setERC",
      "description": "Set for what contract this rules are.",
      "parameterDecorators": [
        {
          "name": "erc777",
          "description": "- Address of ERC777 contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setIntercoinAddress(address)",
      "name": "setIntercoinAddress",
      "description": "setup intercoin contract's address. happens once while initialization through factory.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "address of intercoin contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistAdd(address[])",
      "name": "whitelistAdd",
      "description": "Adding addresses list to whitelist. Available from whitelist with group 'managers'(managersGroupName) only.",
      "parameterDecorators": [
        {
          "name": "addresses",
          "description": "list of addresses which will be added to whitelist.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "return true in any cases.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistReduce(uint256)",
      "name": "whitelistReduce",
      "description": "whenever anyone on whitelist receives tokens their lockup time reduce to daysAmount(if less).",
      "parameterDecorators": [
        {
          "name": "daysAmount",
          "description": "duration in days. if equal 0 then reduce mechanizm are removed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistRemove(address[])",
      "name": "whitelistRemove",
      "description": "Removing addresses list from whitelist. Available from whitelist with group 'managers'(managersGroupName) only Requirements: - `addresses` cannot contains the zero address.",
      "parameterDecorators": [
        {
          "name": "addresses",
          "description": "list of addresses which will be removed from whitelist.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "return true in any cases.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}