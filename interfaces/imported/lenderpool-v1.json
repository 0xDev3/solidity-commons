{
  "schema": "../schema.json",
  "tags": [
    "lending"
  ],
  "name": "LenderPool",
  "description": "LenderPool V1.",
  "eventDecorators": [
    {
      "signature": "ClaimStable(address,uint256,uint256)",
      "name": "ClaimStable",
      "description": "Emitted when pendingComptrollerImplementation is changed.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "roundId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ClaimTrade(address,uint256,uint256)",
      "name": "ClaimTrade",
      "description": "Emitted when pendingComptrollerImplementation is changed.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "roundId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Deposit(address,uint256,uint256)",
      "name": "Deposit",
      "description": "Emitted when pendingComptrollerImplementation is changed.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "roundId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when pendingComptrollerImplementation is changed.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Emitted when pendingComptrollerImplementation is changed.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Swapped(uint256,uint256)",
      "name": "Swapped",
      "description": "Emitted when pendingComptrollerImplementation is changed.",
      "parameterDecorators": [
        {
          "name": "amountStable",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountTrade",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Emitted when pendingComptrollerImplementation is changed.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256,uint256)",
      "name": "Withdraw",
      "description": "Emitted when pendingComptrollerImplementation is changed.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "roundId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "bonusRewardOf(address,uint256)",
      "name": "bonusRewardOf",
      "description": "Returns the amount of bonus rewards for a specific lender on a specific roundId. run `_calculateRewards` with `_lenderRounds[lender][roundId].bonusAPY` based on the amountLent.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": ", address of the lender to be checked.",
          "recommendedTypes": []
        },
        {
          "name": "roundId",
          "description": ", Id of the round to be checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "returns the amount of bonus rewards in stable (based on stableInstance).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmountLent(address)",
      "name": "getAmountLent",
      "description": "Returns the total amount lent for the lender on every round.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": ", address of the lender to be checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "returns _amountLent[lender].",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFinishedRounds(address)",
      "name": "getFinishedRounds",
      "description": "Returns roundIds of every finished round.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": ", address of the lender to be checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "returns array with all finished round Ids.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNumberOfRounds(address)",
      "name": "getNumberOfRounds",
      "description": "Returns the number of rounds for the a specific lender.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": ", address of the lender to be checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "returns _roundCount[lender] (last known round).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRound(address,uint256)",
      "name": "getRound",
      "description": "Returns all the information of a specific round for a specific lender. returns Round struct of the specific round for a specific lender.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": ", address of the lender to be checked.",
          "recommendedTypes": []
        },
        {
          "name": "roundId",
          "description": ", Id of the round to be checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Round ({ bool paidTrade, uint16 bonusAPY, uint amountLent, uint startPeriod, uint endPeriod }).",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paidTrade",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "bonusAPY",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint16"
            },
            {
              "name": "amountLent",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "startPeriod",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "endPeriod",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minimumDeposit()",
      "name": "minimumDeposit",
      "description": "uint minimum Deposit amount.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newRound(address,uint256,uint16,uint8,bool)",
      "name": "newRound",
      "description": "create new Round on behalf of the lender, each deposit has its own round. `lender` must approve the amount to be deposited firstonly `Owner` can launch a new roundonly function that can be `Paused`add new round to `_lenderRounds``amount` will be transferred from `lender` to `address(this)`emits Deposit event.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": ", address of the lender.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": ", amount to be deposited by the lender, must be greater than minimumDeposit.",
          "recommendedTypes": []
        },
        {
          "name": "bonusAPY",
          "description": ", bonus ratio to be applied.",
          "recommendedTypes": []
        },
        {
          "name": "tenure",
          "description": ", duration of the round (expressed in number in days).",
          "recommendedTypes": []
        },
        {
          "name": "paidTrade",
          "description": ", specifies whether if stable rewards will be paid in Trade(true) or in stable(false).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "router()",
      "name": "router",
      "description": "IUniswapV2Router instance of the router.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setMinimumDeposit(uint256)",
      "name": "setMinimumDeposit",
      "description": "changes the minimum amount required for deposit (newRound). update `minimumDeposit` with `_minimumDeposit`.",
      "parameterDecorators": [
        {
          "name": "_minimumDeposit",
          "description": ", new minimum deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stableInstance()",
      "name": "stableInstance",
      "description": "IERC20 Instance of the Stable coin.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stableRewardOf(address,uint256)",
      "name": "stableRewardOf",
      "description": "Returns the amount of stable rewards for a specific lender on a specific roundId. run `_calculateRewards` with `_stableAPY` based on the amountLent.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": ", address of the lender to be checked.",
          "recommendedTypes": []
        },
        {
          "name": "roundId",
          "description": ", Id of the round to be checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "returns the amount of stable rewards (based on stableInstance).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalRewardOf(address,uint256)",
      "name": "totalRewardOf",
      "description": "Returns the total amount of rewards for a specific lender on a specific roundId. calculate rewards for stable (stableAPY) and bonus (bonusAPY).",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": ", address of the lender to be checked.",
          "recommendedTypes": []
        },
        {
          "name": "roundId",
          "description": ", Id of the round to be checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "returns the total amount of rewards (stable + bonus) in stable (based on stableInstance).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "trade()",
      "name": "trade",
      "description": "Address of the Trade token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(address,uint256)",
      "name": "withdraw",
      "description": "Withdraw the initial deposit of the specified lender for the specified roundIdclaim rewards of the specified roundId for the specific lender. only `Owner` can withdrawround must be finish (`block.timestamp` must be higher than `round.endPeriod`)run `_claimRewards` and `_withdraw`.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": ", address of the lender.",
          "recommendedTypes": []
        },
        {
          "name": "roundId",
          "description": ", Id of the round.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAllFinishedRounds(address)",
      "name": "withdrawAllFinishedRounds",
      "description": "Withdraw all amounts lent and claim rewards for all finished rounds. `withdraw` function is called for each finished roundonly `Owner` can withdrawAllFinishedRounds.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": ", address of the lender.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}