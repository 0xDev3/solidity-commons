{
  "schema": "../schema.json",
  "tags": [],
  "name": "ExchangeV3",
  "description": "An Implementation of IExchangeV3. This contract supports upgradability proxy, therefore its constructor must do NOTHING.",
  "eventDecorators": [
    {
      "signature": "BlockSubmitted(uint256,bytes32,bytes32)",
      "name": "BlockSubmitted",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "blockIdx",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "merkleRoot",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "publicDataHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DepositRequested(address,address,address,uint16,uint96)",
      "name": "DepositRequested",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExchangeCloned(address,address,bytes32)",
      "name": "ExchangeCloned",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "exchangeAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "genesisMerkleRoot",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ForcedWithdrawalRequested(address,address,uint32)",
      "name": "ForcedWithdrawalRequested",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "accountID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProtocolFeesUpdated(uint8,uint8,uint8,uint8)",
      "name": "ProtocolFeesUpdated",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "takerFeeBips",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "makerFeeBips",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "previousTakerFeeBips",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "previousMakerFeeBips",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Shutdown(uint256)",
      "name": "Shutdown",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenRegistered(address,uint16)",
      "name": "TokenRegistered",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransactionApproved(address,bytes32)",
      "name": "TransactionApproved",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "transactionHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WithdrawalCompleted(uint8,address,address,address,uint256)",
      "name": "WithdrawalCompleted",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "category",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WithdrawalFailed(uint8,address,address,address,uint256)",
      "name": "WithdrawalFailed",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "category",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WithdrawalModeActivated(uint256)",
      "name": "WithdrawalModeActivated",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "approveTransaction(address,bytes32)",
      "name": "approveTransaction",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "transactionHash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveTransactions(address[],bytes32[])",
      "name": "approveTransactions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owners",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "transactionHashes",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "burnExchangeStake()",
      "name": "burnExchangeStake",
      "description": "Can by called by anyone to burn the stake of the exchange when certain conditions are fulfilled. Currently this will only burn the stake of the exchange if the exchange is in withdrawal mode.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimOwnership()",
      "name": "claimOwnership",
      "description": "Allows the pendingOwner address to finalize the transfer.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(address,address,address,uint96,bytes)",
      "name": "deposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "extraData",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "domainSeparator()",
      "name": "domainSeparator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "forceWithdraw(address,address,uint32)",
      "name": "forceWithdraw",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "accountID",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAgentRegistry()",
      "name": "getAgentRegistry",
      "description": "Gets the agent registry contract used by the exchange.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the agent registry contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmountWithdrawable(address,address)",
      "name": "getAmountWithdrawable",
      "description": "Gets the amount that can be withdrawn immediately with `withdrawFromApprovedWithdrawals`.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "The address of the account the withdrawal was done for.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "The token address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount withdrawable.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBlockHeight()",
      "name": "getBlockHeight",
      "description": "Gets the height of this exchange's virtual blockchain. The block height for a new exchange is 1.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The virtual blockchain height which is the index of the last block.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBlockInfo(uint256)",
      "name": "getBlockInfo",
      "description": "Gets some minimal info of a previously submitted block that's kept onchain. A DEX can use this function to implement a payment receipt verification contract with a challange-response scheme.",
      "parameterDecorators": [
        {
          "name": "blockIdx",
          "description": "The block index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConstants()",
      "name": "getConstants",
      "description": "Returns a list of constants used by the exchange.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "constants The list of constants.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDepositContract()",
      "name": "getDepositContract",
      "description": "Gets the deposit contract used by the exchange.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the deposit contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDomainSeparator()",
      "name": "getDomainSeparator",
      "description": "Gets the domain separator used in this exchange.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getExchangeStake()",
      "name": "getExchangeStake",
      "description": "Gets the amount of LRC the owner has staked onchain for this exchange. The stake will be burned if the exchange does not fulfill its duty by processing user requests in time. Please note that order matching may potentially performed by another party and is not part of the exchange's duty.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of LRC staked.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMaxAgeDepositUntilWithdrawable()",
      "name": "getMaxAgeDepositUntilWithdrawable",
      "description": "Returns the max time deposits have to wait before becoming withdrawable.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The value.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMerkleRoot()",
      "name": "getMerkleRoot",
      "description": "Gets the current Merkle root of this exchange's virtual blockchain.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The current Merkle root.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNumAvailableForcedSlots()",
      "name": "getNumAvailableForcedSlots",
      "description": "Gets the number of available forced request slots.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The number of available slots.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPendingDepositAmount(address,address)",
      "name": "getPendingDepositAmount",
      "description": "Gets the amount of tokens that may be added to the owner's account.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "The destination address for the amount deposited.",
          "recommendedTypes": []
        },
        {
          "name": "tokenAddress",
          "description": "The address of the token, use `0x0` for Ether.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of tokens pending.",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProtocolFeeLastWithdrawnTime(address)",
      "name": "getProtocolFeeLastWithdrawnTime",
      "description": "Gets the time the protocol fee for a token was last withdrawn.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The address of the token, use `0x0` for Ether.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The time the protocol fee was last withdrawn.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProtocolFeeValues()",
      "name": "getProtocolFeeValues",
      "description": "Gets the protocol fees for this exchange.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "syncedAt",
          "description": "The timestamp the protocol fees were last updated.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "takerFeeBips",
          "description": "The protocol taker fee.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "makerFeeBips",
          "description": "The protocol maker fee.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "previousTakerFeeBips",
          "description": "The previous protocol taker fee.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "previousMakerFeeBips",
          "description": "The previous protocol maker fee.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenAddress(uint16)",
      "name": "getTokenAddress",
      "description": "Returns the address of a registered token.",
      "parameterDecorators": [
        {
          "name": "tokenID",
          "description": "The token's ID in this exchanges.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "tokenAddress The token's address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenID(address)",
      "name": "getTokenID",
      "description": "Returns the id of a registered token.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The token's address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "tokenID The token's ID in this exchanges.",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWithdrawalRecipient(address,address,address,uint96,uint32)",
      "name": "getWithdrawalRecipient",
      "description": "Gets the withdrawal recipient.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The address of the account that does the withdrawal.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The address to which 'amount' tokens were going to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "The address of the token that is withdrawn ('0x0' for ETH).",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens that are going to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "storageID",
          "description": "The storageID of the withdrawal request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,bytes32)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_loopring",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_genesisMerkleRoot",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isForcedWithdrawalPending(uint32,address)",
      "name": "isForcedWithdrawalPending",
      "description": "Checks if a forced withdrawal is pending for an account balance.",
      "parameterDecorators": [
        {
          "name": "accountID",
          "description": "The accountID of the account to check.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "The token address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if a request is pending, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isInWithdrawalMode()",
      "name": "isInWithdrawalMode",
      "description": "Returns hether the exchange is in withdrawal mode.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns true if the exchange is in withdrawal mode, else false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isShutdown()",
      "name": "isShutdown",
      "description": "Returns whether the exchange is shutdown.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns true if the exchange is shutdown, else false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isTransactionApproved(address,bytes32)",
      "name": "isTransactionApproved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "transactionHash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isUserOrAgent(address)",
      "name": "isUserOrAgent",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isWithdrawnInWithdrawalMode(uint32,address)",
      "name": "isWithdrawnInWithdrawalMode",
      "description": "Checks if the balance for the account was withdrawn with `withdrawFromMerkleTree`.",
      "parameterDecorators": [
        {
          "name": "accountID",
          "description": "The accountID of the balance to check.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "The token address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if it was already withdrawn, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "loopringAddr()",
      "name": "loopringAddr",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "notifyForcedRequestTooOld(uint32,address)",
      "name": "notifyForcedRequestTooOld",
      "description": "Notifies the exchange that the owner did not process a forced request. If this is indeed the case, the exchange will enter withdrawal mode. Can be called by anyone.",
      "parameterDecorators": [
        {
          "name": "accountID",
          "description": "The accountID the forced request was made for.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "The token address of the the forced request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onchainTransferFrom(address,address,address,uint256)",
      "name": "onchainTransferFrom",
      "description": "Allows an agent to transfer ERC-20 tokens for a user using the allowance the user has set for the exchange. This way the user only needs to approve a single exchange contract for all exchange/agent features, which allows for a more seamless user experience. This function can only be called by an agent.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The address of the account that sends the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The address to which 'amount' tokens are transferred.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "The address of the token to transfer (ETH is and cannot be suppported).",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingOwner()",
      "name": "pendingOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "refreshBlockVerifier()",
      "name": "refreshBlockVerifier",
      "description": "refresh the blockVerifier contract which maybe changed in loopringV3 contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registerToken(address)",
      "name": "registerToken",
      "description": "Registers an ERC20 token for a token id. Note that different exchanges may have different ids for the same ERC20 token. Please note that 1 is reserved for Ether (ETH), 2 is reserved for Wrapped Ether (ETH), and 3 is reserved for Loopring Token (LRC). This function is only callable by the exchange owner.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The token's address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "tokenID The token's ID in this exchanges.",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAgentRegistry(address)",
      "name": "setAgentRegistry",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_agentRegistry",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDepositContract(address)",
      "name": "setDepositContract",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_depositContract",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxAgeDepositUntilWithdrawable(uint32)",
      "name": "setMaxAgeDepositUntilWithdrawable",
      "description": "Sets the max time deposits have to wait before becoming withdrawable.",
      "parameterDecorators": [
        {
          "name": "newValue",
          "description": "The new value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The old value.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWithdrawalRecipient(address,address,address,uint96,uint32,address)",
      "name": "setWithdrawalRecipient",
      "description": "Allows a withdrawal to be done to an adddresss that is different than initialy specified in the withdrawal request. This can be used to implement functionality like fast withdrawals. This function can only be called by an agent.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The address of the account that does the withdrawal.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The address to which 'amount' tokens were going to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "The address of the token that is withdrawn ('0x0' for ETH).",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens that are going to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "storageID",
          "description": "The storageID of the withdrawal request.",
          "recommendedTypes": []
        },
        {
          "name": "newRecipient",
          "description": "The new recipient address of the withdrawal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "shutdown()",
      "name": "shutdown",
      "description": "Shuts down the exchange. Once the exchange is shutdown all onchain requests are permanently disabled. When all requirements are fulfilled the exchange owner can withdraw the exchange stake with withdrawStake. Note that the exchange can still enter the withdrawal mode after this function has been invoked successfully. To prevent entering the withdrawal mode before the the echange stake can be withdrawn, all withdrawal requests still need to be handled for at least MIN_TIME_IN_SHUTDOWN seconds. Can only be called by the exchange owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "success",
          "description": "True if the exchange is shutdown, else False.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "state()",
      "name": "state",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "maxAgeDepositUntilWithdrawable",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "DOMAIN_SEPARATOR",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "loopring",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "blockVerifier",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "agentRegistry",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "depositContract",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "merkleRoot",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "numBlocks",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "numPendingForcedTransactions",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "protocolFeeData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        },
        {
          "name": "shutdownModeStartTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "withdrawalModeStartTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submitBlocks(tuple(uint8,uint16,uint8,bytes,uint256[8],bool,tuple[],bytes)[])",
      "name": "submitBlocks",
      "description": "",
      "parameterDecorators": [
        {
          "name": "blocks",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "blockType",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "blockSize",
              "description": "",
              "type": "uint16"
            },
            {
              "name": "blockVersion",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "data",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "proof",
              "description": "",
              "type": "uint256[8]"
            },
            {
              "name": "storeBlockInfoOnchain",
              "description": "",
              "type": "bool"
            },
            {
              "name": "auxiliaryData",
              "description": "",
              "type": "tuple[]"
            },
            {
              "name": "offchainData",
              "description": "",
              "type": "bytes"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to set the pendingOwner address.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "version()",
      "name": "version",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawExchangeFees(address,address)",
      "name": "withdrawExchangeFees",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawExchangeStake(address)",
      "name": "withdrawExchangeStake",
      "description": "Withdraws the amount staked for this exchange. This can only be done if the exchange has been correctly shutdown: - The exchange owner has shutdown the exchange - All deposit requests are processed - All funds are returned to the users (merkle root is reset to initial state) Can only be called by the exchange owner.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amountLRC The amount of LRC withdrawn.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawFromApprovedWithdrawals(address[],address[])",
      "name": "withdrawFromApprovedWithdrawals",
      "description": "Allows withdrawing funds after a withdrawal request (either onchain or offchain) was submitted in a block by the operator. Can be called by anyone. The withdrawn tokens will be sent to the owner of the account they were withdrawn out. Normally it is should not be needed for users to call this manually. Funds from withdrawal requests will be sent to the account owner immediately by the owner when the block is submitted. The user will however need to call this manually if the transfer failed. Tokens and owners must have the same size.",
      "parameterDecorators": [
        {
          "name": "owners",
          "description": "The addresses of the account the withdrawal was done for.",
          "recommendedTypes": []
        },
        {
          "name": "tokens",
          "description": "The token addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawFromDepositRequest(address,address)",
      "name": "withdrawFromDepositRequest",
      "description": "Allows withdrawing funds deposited to the contract in a deposit request when it was never processed by the owner within the maximum time allowed. Can be called by anyone. The deposited tokens will be sent back to the owner of the account they were deposited in.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "The address of the account the withdrawal was done for.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "The token address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawFromMerkleTree(tuple(tuple,tuple,uint256[48],uint256[24]))",
      "name": "withdrawFromMerkleTree",
      "description": "",
      "parameterDecorators": [
        {
          "name": "merkleProof",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "accountLeaf",
              "description": "",
              "type": "tuple"
            },
            {
              "name": "balanceLeaf",
              "description": "",
              "type": "tuple"
            },
            {
              "name": "accountMerkleProof",
              "description": "",
              "type": "uint256[48]"
            },
            {
              "name": "balanceMerkleProof",
              "description": "",
              "type": "uint256[24]"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawProtocolFees(address)",
      "name": "withdrawProtocolFees",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}