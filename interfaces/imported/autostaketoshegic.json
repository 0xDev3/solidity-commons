{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "staking"
  ],
  "name": "AutoStakeToSHegic",
  "description": "AutoStakeToSHegic. Pools HegicIOUToken (rHEGIC) together and deposits to the rHEGIC --> HEGIC redemption contract; withdraws HEGIC and deposits to jmonteer's hegicstakingpool.co at regular intervals.",
  "eventDecorators": [
    {
      "signature": "Deposited(address,uint256)",
      "name": "Deposited",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RefundClaimed(address,uint256)",
      "name": "RefundClaimed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdrawn(address,uint256,uint256)",
      "name": "Withdrawn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountAfterFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "HEGIC()",
      "name": "HEGIC",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowClaimRefund()",
      "name": "allowClaimRefund",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowDeposit()",
      "name": "allowDeposit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimRefund()",
      "name": "claimRefund",
      "description": "Claim a refund of rHEGIC before they are deposited to the redemption contract. The developer will notify users to do this if the project fails to attract enough deposit.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(uint256)",
      "name": "deposit",
      "description": "Deposits a given amount of rHEGIC to the contract.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of rHEGIC to be deposited, i.e. amount of convHEGIC to be minted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositToRedemptionContract()",
      "name": "depositToRedemptionContract",
      "description": "Deposit all rHEGIC to the redemption contract. Once this is executed, no new deposit will be accepted, and users will not be able to claim rHEGIC refund.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feeRate()",
      "name": "feeRate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feeRecipient()",
      "name": "feeRecipient",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserWithdrawableAmount(address)",
      "name": "getUserWithdrawableAmount",
      "description": "Calculate the maximum amount of sHEGIC token available for withdrawable by a user.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The user's account address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "The user's withdrawable amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastRedemptionTimestamp()",
      "name": "lastRedemptionTimestamp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rHEGIC()",
      "name": "rHEGIC",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemAndStake()",
      "name": "redeemAndStake",
      "description": "Redeem the maximum possible amount of rHEGIC to HEGIC, then stake in the sHEGIC contract. The developer will call this at regular intervals. Anyone can call this as well, albeit no benefit.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "amountRedeemed",
          "description": "Amount of HEGIC redeemed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountStaked",
          "description": "Amount of sHEGIC received from staking HEGIC.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redemption()",
      "name": "redemption",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sHEGIC()",
      "name": "sHEGIC",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAllowDeposit(bool)",
      "name": "setAllowDeposit",
      "description": "Set to accept or reject new deposits. May be called if the project fails to attract enough deposits that justify the work. In this case the developer will inform depositors to withdraw their rHEGIC by calling the `claimRefund` function.",
      "parameterDecorators": [
        {
          "name": "_allowDeposit",
          "description": "Whether new deposits are accepted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeRate(uint256)",
      "name": "setFeeRate",
      "description": "Set the fee rate users are charged upon withdrawal.",
      "parameterDecorators": [
        {
          "name": "_feeRate",
          "description": "The new rate in basis points. E.g. 200 = 2%.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeRecipient(address)",
      "name": "setFeeRecipient",
      "description": "Set the recipient address to fees generated.",
      "parameterDecorators": [
        {
          "name": "_feeRecipient",
          "description": "The new recipient address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalDeposited()",
      "name": "totalDeposited",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalDepositors()",
      "name": "totalDepositors",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalFeeCollected()",
      "name": "totalFeeCollected",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalRedeemed()",
      "name": "totalRedeemed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalStaked()",
      "name": "totalStaked",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalWithdrawable()",
      "name": "totalWithdrawable",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalWithdrawn()",
      "name": "totalWithdrawn",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userData(address)",
      "name": "userData",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountDeposited",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountWithdrawn",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawStakedHEGIC()",
      "name": "withdrawStakedHEGIC",
      "description": "Withdraw all available sHEGIC claimable by the user.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}