{
  "schema": "../schema.json",
  "tags": [
    "makerdao"
  ],
  "name": "OptionMarket",
  "description": "Automated market maker that lets users buy and sell options from it.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Redeemed(address,bool,uint256,uint256)",
      "name": "Redeemed",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Settled(uint256)",
      "name": "Settled",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "expiryPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Trade(address,bool,bool,uint256,uint256,uint256,uint256)",
      "name": "Trade",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "isBuy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "isLongToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "strikeIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "size",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cost",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newSupply",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdatedB(uint256,uint256)",
      "name": "UpdatedB",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "b",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cost",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "SCALE()",
      "name": "SCALE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SCALE_SCALE()",
      "name": "SCALE_SCALE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "b()",
      "name": "b",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceCap()",
      "name": "balanceCap",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "baseToken()",
      "name": "baseToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "buy(bool,uint256,uint256,uint256)",
      "name": "buy",
      "description": "Buy `optionsOut` quantity of options.",
      "parameterDecorators": [
        {
          "name": "isLongToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "strikeIndex",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "optionsOut",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "maxAmountIn",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calcBuyAmountAndFee(bool,uint256,uint256)",
      "name": "calcBuyAmountAndFee",
      "description": "Convenience method to calculate cost of a buy trade.",
      "parameterDecorators": [
        {
          "name": "isLongToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "strikeIndex",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "optionsOut",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "cost",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calcCumulativeCost(uint256[])",
      "name": "calcCumulativeCost",
      "description": "Calculates the LMSR cost function C(q_1, ..., q_n) = b * log(exp(q_1 / b) + ... + exp(q_n / b)) where q_i = total supply of ith spread b = liquidity parameter An equivalent expression for C is used to avoid overflow when calculating exponentials C(q_1, ..., q_n) = m + b * log(exp((q_1 - m) / b) + ... + exp((q_n - m) / b)) where m = max(q_1, ..., q_n).",
      "parameterDecorators": [
        {
          "name": "quantities",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calcCumulativePayoff(uint256[],uint256[])",
      "name": "calcCumulativePayoff",
      "description": "Calculates amount of base tokens that needs to be paid out to all users.",
      "parameterDecorators": [
        {
          "name": "longSupplies",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "shortSupplies",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "payoff",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calcFeesAccrued()",
      "name": "calcFeesAccrued",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calcQuantities(uint256[],uint256[])",
      "name": "calcQuantities",
      "description": "",
      "parameterDecorators": [
        {
          "name": "longSupplies",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "shortSupplies",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "quantities",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calcRedeemAmountAndFee(bool,uint256)",
      "name": "calcRedeemAmountAndFee",
      "description": "Convenience method to calculate amount returned from redeeming options after settlement Settlement fee is 0, but still return it in case it's set in the future.",
      "parameterDecorators": [
        {
          "name": "isLongToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "strikeIndex",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "cost",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calcSellAmountAndFee(bool,uint256,uint256)",
      "name": "calcSellAmountAndFee",
      "description": "Convenience method to calculate amount returned from a sell trade Sell fee is 0, but still return it in case it's set in the future.",
      "parameterDecorators": [
        {
          "name": "isLongToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "strikeIndex",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "optionsIn",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "cost",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collectFees()",
      "name": "collectFees",
      "description": "Called by owner to withdraw accrued trading fees.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "currentCumulativeCost()",
      "name": "currentCumulativeCost",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentCumulativePayoff()",
      "name": "currentCumulativePayoff",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "disputeExpiryPrice(uint256)",
      "name": "disputeExpiryPrice",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_expiryPrice",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disputePeriod()",
      "name": "disputePeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "expiryPrice()",
      "name": "expiryPrice",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "expiryTime()",
      "name": "expiryTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLongSupplies()",
      "name": "getLongSupplies",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "totalSupplies",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getShortSupplies()",
      "name": "getShortSupplies",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "totalSupplies",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "increaseB(uint256)",
      "name": "increaseB",
      "description": "Called by owner to increase the LMSR parameter `b` by depositing base tokens. `b` uses same decimals as baseToken.",
      "parameterDecorators": [
        {
          "name": "_b",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address,address,address[],address[],uint256[],uint256,bool,uint256,uint256,uint256)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_baseToken",
          "description": "Underlying ERC20 token. Represents ETH if equal to 0x0.",
          "recommendedTypes": []
        },
        {
          "name": "_oracle",
          "description": "Oracle from which the settlement price is obtained.",
          "recommendedTypes": []
        },
        {
          "name": "_longTokens",
          "description": "Options tokens representing long calls/puts.",
          "recommendedTypes": []
        },
        {
          "name": "_shortTokens",
          "description": "Options tokens representing short calls/puts.",
          "recommendedTypes": []
        },
        {
          "name": "_strikePrices",
          "description": "Strike prices expressed in wei. Must be in ascending order.",
          "recommendedTypes": []
        },
        {
          "name": "_expiryTime",
          "description": "Expiration time as a unix timestamp.",
          "recommendedTypes": []
        },
        {
          "name": "_isPut",
          "description": "Whether options are calls or puts.",
          "recommendedTypes": []
        },
        {
          "name": "_tradingFee",
          "description": "Trading fee as fraction of notional expressed in wei.",
          "recommendedTypes": []
        },
        {
          "name": "_balanceCap",
          "description": "Cap on total value locked in contract. Used for guarded launch. Set to 0 means no cap.",
          "recommendedTypes": []
        },
        {
          "name": "_disputePeriod",
          "description": "How long after expiry the oracle price can be disputed by deployer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isDisputePeriod()",
      "name": "isDisputePeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isExpired()",
      "name": "isExpired",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPaused()",
      "name": "isPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPut()",
      "name": "isPut",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSettled()",
      "name": "isSettled",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastCost()",
      "name": "lastCost",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastPayoff()",
      "name": "lastPayoff",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "longTokens(uint256)",
      "name": "longTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numStrikes()",
      "name": "numStrikes",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracle()",
      "name": "oracle",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeem(bool,uint256)",
      "name": "redeem",
      "description": "After expiration, exercise options by burning them and redeeming them for base tokens.",
      "parameterDecorators": [
        {
          "name": "isLongToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "strikeIndex",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sell(bool,uint256,uint256,uint256)",
      "name": "sell",
      "description": "Sell `optionsIn` quantity of options.",
      "parameterDecorators": [
        {
          "name": "isLongToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "strikeIndex",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "optionsIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "minAmountOut",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountOut",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBalanceCap(uint256)",
      "name": "setBalanceCap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_balanceCap",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDisputePeriod(uint256)",
      "name": "setDisputePeriod",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_disputePeriod",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setExpiryTime(uint256)",
      "name": "setExpiryTime",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_expiryTime",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOracle(address)",
      "name": "setOracle",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_oracle",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settle()",
      "name": "settle",
      "description": "At expiration, retrieve and store the underlying price from the oracle This method can be called by anyone but cannot be called more than once.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "shortTokens(uint256)",
      "name": "shortTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "strikePrices(uint256)",
      "name": "strikePrices",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tradingFee()",
      "name": "tradingFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}