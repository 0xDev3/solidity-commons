{"schema":"../schema.json","tags":["yield"],"name":"CompMiner","description":"CompMiner external pool contract. is an example of external pool which implements maximizing COMP yield mining capabilities. It is curerntly denominated in DAI and accepts it.","eventDecorators":[{"signature":"COMPRatioUpdated(uint256)","name":"COMPRatioUpdated","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"LogValueHolderUpdated(address)","name":"LogValueHolderUpdated","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"Manager","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NotDeposited()","name":"NotDeposited","description":"Triggers on new deposit call.","parameterDecorators":[]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"compChanged(uint256)","name":"compChanged","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"compTooSmall(uint256)","name":"compTooSmall","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ratioUpdated(uint256)","name":"ratioUpdated","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"ValueHolder()","name":"ValueHolder","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"addCollateral()","name":"addCollateral","description":"Supplementary function to ad collateral when b/s ratio is closer to liquidation.","parameterDecorators":[],"returnDecorators":[{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"addPosition()","name":"addPosition","description":"Main function to enter Compound supply/borrow position using the available [DAI] token balance.","parameterDecorators":[],"returnDecorators":[{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"cTokenAddress()","name":"cTokenAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"claimValue()","name":"claimValue","description":"Claim all available COMP from compound and convert to DAI as needed.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"convertComp()","name":"convertComp","description":"Convert COMP to [DAI] using XChanger (XTrinity swap) if there is enough value.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"enterToken()","name":"enterToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"exitPosition(uint256)","name":"exitPosition","description":"Main function to exit Compound supply/borrow position - partially or completely.","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"flRatio()","name":"flRatio","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"flReceiver()","name":"flReceiver","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"flashloanProvider()","name":"flashloanProvider","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"getPoolValue(address)","name":"getPoolValue","description":"Get the total value the Pool in [denominateTo] tokens [DAI?].","parameterDecorators":[{"name":"denominateTo","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"totalValue","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTokenStaked()","name":"getTokenStaked","description":"Get the total amount of DAI currently in Compound.","parameterDecorators":[],"returnDecorators":[{"name":"totalTokenStaked","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"init(address,address,address,address)","name":"init","description":"new contract initializer - we dont' use constructors as it is required to run behind a proxy. For the cases we don't know the owner yet.","parameterDecorators":[{"name":"_xChanger","description":"","recommendedTypes":[]},{"name":"_flReceiver","description":"","recommendedTypes":[]},{"name":"_enterToken","description":"","recommendedTypes":[]},{"name":"_cToken","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"minCompConvert()","name":"minCompConvert","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"quote(address,address,uint256)","name":"quote","description":"get a price of one token amount in another.","parameterDecorators":[{"name":"fromToken","description":"- token we want to change/spend.","recommendedTypes":[]},{"name":"toToken","description":"- token we want to receive/spend to.","recommendedTypes":[]},{"name":"amount","description":"- of the fromToken.","recommendedTypes":[]}],"returnDecorators":[{"name":"returnAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"reInit(address,address,address,address)","name":"reInit","description":"re-initializer might be helpful for the cases where proxy's storage is corrupted by an old contact, but we cannot run init as we have the owner address already. This method might help fixing the storage state.","parameterDecorators":[{"name":"_xChanger","description":"","recommendedTypes":[]},{"name":"_flReceiver","description":"","recommendedTypes":[]},{"name":"_enterToken","description":"","recommendedTypes":[]},{"name":"_cToken","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"reverseQuote(address,address,uint256)","name":"reverseQuote","description":"get a reverse price of one token amount in another the opposite of above 'quote' method when we need to understand how much we need to spend actually.","parameterDecorators":[{"name":"fromToken","description":"- token we want to change/spend.","recommendedTypes":[]},{"name":"toToken","description":"- token we want to receive/spend to.","recommendedTypes":[]},{"name":"returnAmount","description":"- of the toToken.","recommendedTypes":[]}],"returnDecorators":[{"name":"inputAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"setFLReceiverImpl(address)","name":"setFLReceiverImpl","description":"set new flashloan receiver implementation address to use.","parameterDecorators":[{"name":"_flReceiver","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setFlashloanProvider(uint8)","name":"setFlashloanProvider","description":"method for setting flash loan provider (AAVE/dYdX).","parameterDecorators":[{"name":"_flashloanProvider","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setValueHolder(address)","name":"setValueHolder","description":"Sets new ValueHolder address.","parameterDecorators":[{"name":"_ValueHolder","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setXChangerImpl(address)","name":"setXChangerImpl","description":"set new XChanger (XTrinity) contract implementation address to use.","parameterDecorators":[{"name":"_Xchanger","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"swap(address,address,uint256,bool)","name":"swap","description":"swap one token to another given the amount we want to spend.","parameterDecorators":[{"name":"fromToken","description":"- token we want to change/spend.","recommendedTypes":[]},{"name":"toToken","description":"- token we want to receive/spend to.","recommendedTypes":[]},{"name":"amount","description":"- of the fromToken we are spending.","recommendedTypes":[]},{"name":"slipProtect","description":"- flag to ensure the transaction will be performed if the received amount is not less than expected within the given slip %% range (like 1%).","recommendedTypes":[]}],"returnDecorators":[{"name":"returnAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferTokenTo(address,address,uint256)","name":"transferTokenTo","description":"method for retrieving tokens back to ValueHolder or whereever.","parameterDecorators":[{"name":"TokenAddress","description":"","recommendedTypes":[]},{"name":"recipient","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"universalFLcallback(uint256,uint256,uint256)","name":"universalFLcallback","description":"public universal callback function to receive flashloan - used with any flashloan provider.","parameterDecorators":[{"name":"flashloanAmount","description":"","recommendedTypes":[]},{"name":"totalDebt","description":"","recommendedTypes":[]},{"name":"depositAmount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateFlRatio(uint256)","name":"updateFlRatio","description":"set new flashloan ratio (290/100).","parameterDecorators":[{"name":"newValue","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateMinCompConvert(uint256)","name":"updateMinCompConvert","description":"sent new minimum COMP value for conversion as we don't want to spend much gas on cheap COMP.","parameterDecorators":[{"name":"newValue","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"xchanger()","name":"xchanger","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}