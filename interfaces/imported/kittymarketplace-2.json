{
  "schema": "../schema.json",
  "tags": [],
  "name": "KittyMarketPlace",
  "description": "",
  "eventDecorators": [
    {
      "signature": "MarketTransaction(string,address,uint256)",
      "name": "MarketTransaction",
      "description": "An event emitted when a vault is liquidated. emitted when sold out.",
      "parameterDecorators": [
        {
          "name": "TxType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "An event emitted when a vault is liquidated. emitted when sold out.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "buyKitty(uint256)",
      "name": "buyKitty",
      "description": "Executes the purchase of _tokenId. Sends the funds to the seller and transfers the token using transferFrom in Kittycontract. Emits the MarketTransaction event with txType \"Buy\". Requirement: The msg.value needs to equal the price of _tokenId Requirement: There must be an active offer for _tokenId.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buySireRites(uint256,uint256)",
      "name": "buySireRites",
      "description": "Purchase of siring rites Sends funds to the seller and sets sire approval for the matron Emits a MarketTransaction event with TxType \"Sire Rites\" Requirement: The msg.value needs to equal the siring price of _tokenId Requirement: msg.sender owns _matronTokenId Requirement: _matronTokenId is ready to breed Requirement: There must be an active sire offer for _sireTokenId.",
      "parameterDecorators": [
        {
          "name": "_sireTokenId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_matronTokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAllSireOffers()",
      "name": "getAllSireOffers",
      "description": "Get all tokenId's with active sire offers. Returns an empty array if none exist.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "listOfOffers",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllTokenOnSale()",
      "name": "getAllTokenOnSale",
      "description": "Get all tokenId's that are currently for sale. Returns an empty arror if none exist.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "listOfOffers",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOffer(uint256)",
      "name": "getOffer",
      "description": "Get the details about a offer for _tokenId. Throws an error if there is no active offer for _tokenId.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "isSireOffer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "active",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasActiveOffer(uint256)",
      "name": "hasActiveOffer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeOffer(uint256)",
      "name": "removeOffer",
      "description": "Removes an existing offer. Emits the MarketTransaction event with txType \"Remove offer\" Requirement: Only the seller of _tokenId can remove an offer.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore. Allows the current owner to relinquish control of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setKittyContract(address)",
      "name": "setKittyContract",
      "description": "Set the current KittyContract address and initialize the instance of Kittycontract. Requirement: Only the contract owner can call.",
      "parameterDecorators": [
        {
          "name": "_kittyContractAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOffer(uint256,uint256)",
      "name": "setOffer",
      "description": "Creates a new offer for _tokenId for the price _price. Emits the MarketTransaction event with txType \"Create offer\" Requirement: Only the owner of _tokenId can create an offer. Requirement: There can only be one active offer for a token at a time. Requirement: Marketplace contract (this) needs to be an approved operator when the offer is created.",
      "parameterDecorators": [
        {
          "name": "_price",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSireOffer(uint256,uint256)",
      "name": "setSireOffer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_price",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_tokenId",
          "description": "at @param _price Emits the MarketTransaction event with txType \"Sire Offer\" Requirement: The sire must be ready to breed Requirement: Only the owner of _tokenId can create an offer. Requirement: There can only be one active offer for a token at a time. Requirement: Marketplace contract (this) needs to be an approved operator when the offer is created.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to transfer control of the contract to a newOwner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}