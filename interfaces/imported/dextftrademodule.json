{
  "schema": "../schema.json",
  "tags": [
    "locking",
    "makerdao"
  ],
  "name": "DextfTradeModule",
  "description": "DextfTradeModule.",
  "eventDecorators": [
    {
      "signature": "ApprovalVoteCast(address,uint256,address)",
      "name": "ApprovalVoteCast",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "fund",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposalTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "voter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BlockerVoteCast(address,uint256,address)",
      "name": "BlockerVoteCast",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "fund",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposalTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "voter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "InboundComponentReceived(address,uint256,address,address,uint256)",
      "name": "InboundComponentReceived",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "setToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposalTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "marketMaker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "inToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "inboundAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OutboundComponentSent(address,uint256,address,address,uint256)",
      "name": "OutboundComponentSent",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "setToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposalTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "marketMaker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "outToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "outboundAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalConstraintsUpdated(uint256,uint256,uint256)",
      "name": "ProposalConstraintsUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "minimumDelay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "minimumApproverVotes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "minimumBlockerVotes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TradeProposed(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "TradeProposed",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "fund",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposalTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "maxTradedFundTokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "minimumDelay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "minimumApproverVotes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "minimumBlockerVotes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "inboundComponentsCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "outboundComponentsCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TradingStarted(address,uint256)",
      "name": "TradingStarted",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "fund",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposalTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "APPROVER_ROLE()",
      "name": "APPROVER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "BLOCKER_ROLE()",
      "name": "BLOCKER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MARKET_MAKER_ROLE()",
      "name": "MARKET_MAKER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "TRADE_ADMIN_ROLE()",
      "name": "TRADE_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "castApprovalVote(address)",
      "name": "castApprovalVote",
      "description": "ONLY APPROVERS: called by an approver to cast an approval vote to the latest proposal on a certain fund. Once the vote is cast it cannot be retracted.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Address of the fund for which the approval vote is cast.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "castBlockerVote(address)",
      "name": "castBlockerVote",
      "description": "ONLY BLOCKERS: called by a blocker to cast a blocking vote to the latest proposal on a certain fund. Once the vote is cast it cannot be retracted.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Address of the fund for which the blocker vote is cast.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "computeInboundOutboundComponents(address,uint256)",
      "name": "computeInboundOutboundComponents",
      "description": "Compute the proposed/actual trade components according to the given quantity.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Address of the fund subject of the trade.",
          "recommendedTypes": []
        },
        {
          "name": "_quantity",
          "description": "The number of fund base units to be traded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address[] The array of inbound addresses.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "_1",
          "description": "uint256[] The array of inbound quantities in real units.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "_2",
          "description": "address[] The array of outbound addresses.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "_3",
          "description": "uint256[] The array of outbound quantities in real units.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fundState(address)",
      "name": "fundState",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getApprovalVotes(address)",
      "name": "getApprovalVotes",
      "description": "Retrieves the latest tally of the approver votes cast on the most recent proposal.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Fund for which we want to query the approver votes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "approverVotes The array of approvers that cast a vote on the latest proposal.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBlockerVotes(address)",
      "name": "getBlockerVotes",
      "description": "Retrieves the latest tally of the blocker votes cast on the most recent proposal.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Fund for which we want to query the blocker votes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "blockerVotes The array of blockers that cast a vote on the latest proposal.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposalConstraints(address)",
      "name": "getProposalConstraints",
      "description": "Retrieves the constraints of the current fund proposal.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Fund for which we want to query the proposal constraints.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "minimumDelay The minimum time delay between the proposal state and the trading state.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_1",
          "description": "minimumApproverVotes The minimum number of approver votes to transition to the trading state.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_2",
          "description": "minimumBlockerVotes he minimum number of blocker votes needed to stop a proposal.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposalDetails(address)",
      "name": "getProposalDetails",
      "description": "Returns the latest proposal details for a given fund.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Address of the fund for which the proposal details are needed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "proposalDetails The latest trade proposal details for the given fund.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "proposalConstraints",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "tuple"
            },
            {
              "name": "inboundTradeComponents",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "tuple[]"
            },
            {
              "name": "outboundTradeComponents",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "tuple[]"
            },
            {
              "name": "maxTradedFundTokens",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "tradedFundTokens",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "proposalTimestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "approverVotes",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address[]"
            },
            {
              "name": "blockerVotes",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address[]"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposalTimestamp(address)",
      "name": "getProposalTimestamp",
      "description": "Retrieves the timestamp of the current fund proposal.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Fund for which we want to query the proposal timestamp.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "proposalTimestamp The latest proposal timestamp for the given fund.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposedInboundComponents(address)",
      "name": "getProposedInboundComponents",
      "description": "Retrieves the proposed inbound allocation components, in real units.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Fund for which we want to query the inbound components.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "_componentAddresses The addresses of the proposed inbound components.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "_1",
          "description": "_positionRealUnitsArray The value of the inbound component flow.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposedOutboundComponents(address)",
      "name": "getProposedOutboundComponents",
      "description": "Retrieves the proposed outbound allocation components, in real units.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Fund for which we want to query the outbound components.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "_componentAddresses The addresses of the proposed outbound components.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "_1",
          "description": "_positionRealUnitsArray The value of the outbound component flow.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMember(bytes32,uint256)",
      "name": "getRoleMember",
      "description": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMemberCount(bytes32)",
      "name": "getRoleMemberCount",
      "description": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTradedFundTokens(address)",
      "name": "getTradedFundTokens",
      "description": "Retrieves the currently and maximum equivalent traded fund tokens.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Fund for which we want to query the equivalent traded fund tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "tradedFundTokens The equivalent number of fund tokens that have been traded so far.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_1",
          "description": "maxTradedFundTokens The maximum number of equivalent fund tokens that can be traded.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initializes this module to the SetToken. Only callable by the SetToken's manager.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Address of the SetToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "moduleConstraints()",
      "name": "moduleConstraints",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "minimumDelay",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "minimumApproverVotes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "minimumBlockerVotes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "performTrade(address,uint256)",
      "name": "performTrade",
      "description": "ONLY MARKET MAKERS: called by market makers to perform the actual trade by sending inboud components and receiveing outbound ones.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Address of the fund for which want to perform the trade.",
          "recommendedTypes": []
        },
        {
          "name": "_quantity",
          "description": "The equivalent number of fund tokens to be traded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposalDetails(address)",
      "name": "proposalDetails",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "proposalConstraints",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "minimumDelay",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "minimumApproverVotes",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "minimumBlockerVotes",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "maxTradedFundTokens",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "tradedFundTokens",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "proposalTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposeTrade(address,uint256,tuple(uint256,uint256,uint256),address[],uint256[],address[],uint256[])",
      "name": "proposeTrade",
      "description": "ONLY FUND MANAGER: propose a new trade together with new constraint and transition a fund from the regular state to the proposal state. There are no checks on the proposed trade as these checks are left to the approvers and blockers.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Address of the fund subject of the trade.",
          "recommendedTypes": []
        },
        {
          "name": "_maxTradedFundTokens",
          "description": "The maximum number of fund tokens that can be traded.",
          "recommendedTypes": []
        },
        {
          "name": "_proposalConstraints",
          "description": "The constraints for this proposal.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "minimumDelay",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "minimumApproverVotes",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "minimumBlockerVotes",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_inboundAddresses",
          "description": "The component addresses entering the fund.",
          "recommendedTypes": []
        },
        {
          "name": "_inboundRealUnitsArray",
          "description": "The value of the incoming tokens per fund token, in real units.",
          "recommendedTypes": []
        },
        {
          "name": "_outboundAddresses",
          "description": "The component addresses exiting the fund.",
          "recommendedTypes": []
        },
        {
          "name": "_outboundRealUnitsArray",
          "description": "The value of the outgoing tokens per fund token, in real units.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeModule()",
      "name": "removeModule",
      "description": "Called by a SetToken to notify that this module was removed. Clears the proposalDetails and the fundState.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revertToRegularState(address)",
      "name": "revertToRegularState",
      "description": "ONLY FUND MANAGER: regardless of the current fund state, transition the fund to the regular state. It can be use both to cancel a prposal or to cancel trading.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Address of the fund to be transitioned to the regular state.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "startTrading(address)",
      "name": "startTrading",
      "description": "ONLY FUND MANAGER: Transition the fund from the proposal state to the trading state if all constranits are satifid: the minimum proposal time has elapsed, there are enough approval votes and there are not too many blocker votes.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Address of the fund for which trading can start.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateProposalConstraints(uint256,uint256,uint256)",
      "name": "updateProposalConstraints",
      "description": "ONLY BY ADMINISTRATOR: updates the module-wide proposal constraints.",
      "parameterDecorators": [
        {
          "name": "_minimumDelay",
          "description": "The minimum time delay between the proposal state and the trading state.",
          "recommendedTypes": []
        },
        {
          "name": "_minimumApproverVotes",
          "description": "The minimum number of approver votes to transition to the trading state.",
          "recommendedTypes": []
        },
        {
          "name": "_minimumBlockerVotes",
          "description": "The minimum number of blocker votes needed to stop a trade proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}