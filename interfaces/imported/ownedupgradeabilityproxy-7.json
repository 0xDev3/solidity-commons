{
  "schema": "../schema.json",
  "tags": [],
  "name": "OwnedUpgradeabilityProxy",
  "description": "OwnedUpgradeabilityProxy.",
  "eventDecorators": [
    {
      "signature": "ProxyOwnershipTransferred(address,address)",
      "name": "ProxyOwnershipTransferred",
      "description": "The standard EIP-20 transfer event. Fired in remove().",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewPendingOwner(address,address)",
      "name": "NewPendingOwner",
      "description": "The standard EIP-20 transfer event. Fired in remove().",
      "parameterDecorators": [
        {
          "name": "currentOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "pendingOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Upgraded(address)",
      "name": "Upgraded",
      "description": "The standard EIP-20 transfer event. Fired in remove().",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Token address removed.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "proxyOwner()",
      "name": "proxyOwner",
      "description": "Tells the address of the owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingProxyOwner()",
      "name": "pendingProxyOwner",
      "description": "Tells the address of the owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "pendingOwner",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "upgradeTo(address)",
      "name": "upgradeTo",
      "description": "Allows the proxy owner to upgrade the current version of the proxy.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the new implementation to be set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "implementation()",
      "name": "implementation",
      "description": "Tells the address of the current implementation.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "impl",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimProxyOwnership()",
      "name": "claimProxyOwnership",
      "description": "Allows the pendingOwner to claim ownership of the proxy.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferProxyOwnership(address)",
      "name": "transferProxyOwnership",
      "description": "Allows the current owner to transfer control of the contract to a newOwner. hanges the pending owner to newOwner. But doesn't actually transfer.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}