{
  "schema": "../schema.json",
  "tags": [],
  "name": "MintAllowance",
  "description": "Newly minted temple allocated to various temple strategies Any temple held by this contract is assumed to be unused, and hence doesn't effect the intrinsinc value calculation. It's only considered in circulation once a pool pulls it's allowance.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emit on setPercentPerSecond().",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "burnUnusedMintAllowance(address)",
      "name": "burnUnusedMintAllowance",
      "description": "Burn any unused mint allowance for a given pool.",
      "parameterDecorators": [
        {
          "name": "_pool",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "increaseMintAllowance(address,uint256)",
      "name": "increaseMintAllowance",
      "description": "Increase mint allowance for the given pool Atomically pulls amount from treasury before increasing allownance as an extra check and balance.",
      "parameterDecorators": [
        {
          "name": "_pool",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}