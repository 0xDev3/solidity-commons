{"schema":"../schema.json","tags":[],"name":"SchainsInternal","description":"SchainsInternal. Contract contains all functionality logic to internally manage Schains.","eventDecorators":[{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"","parameterDecorators":[{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":true},{"name":"purchaser","description":"who paid for the tokens.","recommendedTypes":[],"indexed":true},{"name":"value","description":"weis paid for purchase.","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"","parameterDecorators":[{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":true},{"name":"purchaser","description":"who paid for the tokens.","recommendedTypes":[],"indexed":true},{"name":"value","description":"weis paid for purchase.","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"addSchainForNode(uint256,bytes32)","name":"addSchainForNode","description":"Allows Schains and NodeRotation contracts to add schain to node.","parameterDecorators":[{"name":"nodeIndex","description":"","recommendedTypes":[]},{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addSchainType(uint8,uint256)","name":"addSchainType","description":"Allows Admin to add schain type.","parameterDecorators":[{"name":"partOfNode","description":"","recommendedTypes":[]},{"name":"numberOfNodes","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"changeLifetime(bytes32,uint256,uint256)","name":"changeLifetime","description":"Allows Schains contract to change the Schain lifetime through an additional SKL token deposit.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"lifetime","description":"","recommendedTypes":[]},{"name":"deposit","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"checkException(bytes32,uint256)","name":"checkException","description":"Returns whether any exceptions exist for node in a schain group.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"checkHoleForSchain(bytes32,uint256)","name":"checkHoleForSchain","description":"","parameterDecorators":[{"name":"schainHash","description":"","recommendedTypes":[]},{"name":"indexOfNode","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"contractManager()","name":"contractManager","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"createGroupForSchain(bytes32,uint256,uint8)","name":"createGroupForSchain","description":"Allows Schain contract to create a node group for an schain.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"numberOfNodes","description":"","recommendedTypes":[]},{"name":"partOfNode","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":false},{"signature":"deleteGroup(bytes32)","name":"deleteGroup","description":"Allows Schains contract to delete a group of schains.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"findSchainAtSchainsForNode(uint256,bytes32)","name":"findSchainAtSchainsForNode","description":"Returns index of Schain in list of schains for a given node.","parameterDecorators":[{"name":"nodeIndex","description":"","recommendedTypes":[]},{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getActiveSchain(uint256)","name":"getActiveSchain","description":"Returns last active schain of a node.","parameterDecorators":[{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getActiveSchains(uint256)","name":"getActiveSchains","description":"Returns active schains of a node.","parameterDecorators":[{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"activeSchains","description":"","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getLengthOfSchainsForNode(uint256)","name":"getLengthOfSchainsForNode","description":"Returns number of Schains on a node.","parameterDecorators":[{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getNodeIndexInGroup(bytes32,uint256)","name":"getNodeIndexInGroup","description":"Returns node index in schain group.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"nodeId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getNodesInGroup(bytes32)","name":"getNodesInGroup","description":"Returns nodes in an schain group.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getNumberOfNodesInGroup(bytes32)","name":"getNumberOfNodesInGroup","description":"Returns number of nodes in an schain group.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getSchainIdsByAddress(address)","name":"getSchainIdsByAddress","description":"Returns hashes of schain names by schain owner.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getSchainIdsForNode(uint256)","name":"getSchainIdsForNode","description":"Returns hashes of schain names running on a node.","parameterDecorators":[{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getSchainListSize(address)","name":"getSchainListSize","description":"Returns number of schains by schain owner.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getSchainName(bytes32)","name":"getSchainName","description":"Returns schain name.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"getSchainOwner(bytes32)","name":"getSchainOwner","description":"Returns the owner of an schain.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getSchains()","name":"getSchains","description":"Returns all Schains in the network.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getSchainsPartOfNode(bytes32)","name":"getSchainsPartOfNode","description":"Returns all occupied resources on one node for an Schain.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"holesForNodes(uint256,uint256)","name":"holesForNodes","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"holesForSchains(bytes32,uint256)","name":"holesForSchains","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address)","name":"initialize","description":"","parameterDecorators":[{"name":"newContractsAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initializeSchain(string,address,uint256,uint256)","name":"initializeSchain","description":"Allows Schain contract to initialize an schain.","parameterDecorators":[{"name":"name","description":"","recommendedTypes":[]},{"name":"from","description":"","recommendedTypes":[]},{"name":"lifetime","description":"","recommendedTypes":[]},{"name":"deposit","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isAnyFreeNode(bytes32)","name":"isAnyFreeNode","description":"Checks whether there are any nodes with free resources for given schain.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isEnoughNodes(bytes32)","name":"isEnoughNodes","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"result","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"isNodeAddressesInGroup(bytes32,address)","name":"isNodeAddressesInGroup","description":"Checks whether sender is a node address from a given schain group.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"sender","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwnerAddress(address,bytes32)","name":"isOwnerAddress","description":"Checks whether address is owner of schain.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[]},{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isSchainActive(bytes32)","name":"isSchainActive","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isSchainExist(bytes32)","name":"isSchainExist","description":"Checks whether schain exists.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isSchainNameAvailable(string)","name":"isSchainNameAvailable","description":"Checks whether schain name is available. TODO Need to delete - copy of web3.utils.soliditySha3.","parameterDecorators":[{"name":"name","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isTimeExpired(bytes32)","name":"isTimeExpired","description":"Checks whether schain lifetime has expired.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"numberOfSchainTypes()","name":"numberOfSchainTypes","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"numberOfSchains()","name":"numberOfSchains","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":true},{"signature":"removeHolesForSchain(bytes32)","name":"removeHolesForSchain","description":"Allows Schains contract to remove holes for schains.","parameterDecorators":[{"name":"schainHash","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeNodeFromExceptions(bytes32,uint256)","name":"removeNodeFromExceptions","description":"Allows Schains contract to remove node from exceptions.","parameterDecorators":[{"name":"schainHash","description":"","recommendedTypes":[]},{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeNodeFromSchain(uint256,bytes32)","name":"removeNodeFromSchain","description":"Allows Schains and SkaleDKG contracts to remove a node from an schain for node rotation or DKG failure.","parameterDecorators":[{"name":"nodeIndex","description":"","recommendedTypes":[]},{"name":"schainHash","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeSchain(bytes32,address)","name":"removeSchain","description":"Allows Schains contract to remove an schain from the network. Generally schains are not removed from the system; instead they are simply allowed to expire.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"from","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeSchainForNode(uint256,uint256)","name":"removeSchainForNode","description":"Allows Schains, NodeRotation, and SkaleDKG contracts to remove an schain from a node.","parameterDecorators":[{"name":"nodeIndex","description":"","recommendedTypes":[]},{"name":"schainIndex","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeSchainType(uint256)","name":"removeSchainType","description":"Allows Admin to remove schain type.","parameterDecorators":[{"name":"typeOfSchain","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"schainIndexes(address,uint256)","name":"schainIndexes","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"schainTypes(uint256)","name":"schainTypes","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"partOfNode","description":"","recommendedTypes":[],"solidityType":"uint8"},{"name":"numberOfNodes","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"schains(bytes32)","name":"schains","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"name","description":"","recommendedTypes":[],"solidityType":"string"},{"name":"owner","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"indexInOwnerList","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"partOfNode","description":"","recommendedTypes":[],"solidityType":"uint8"},{"name":"lifetime","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"startDate","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"startBlock","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"deposit","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"index","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":true},{"signature":"schainsAtSystem(uint256)","name":"schainsAtSystem","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"schainsForNodes(uint256,uint256)","name":"schainsForNodes","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"schainsGroups(bytes32,uint256)","name":"schainsGroups","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"setException(bytes32,uint256)","name":"setException","description":"Allows Schain and NodeRotation contracts to set a Node like exception for a given schain and nodeIndex.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setNodeInGroup(bytes32,uint256)","name":"setNodeInGroup","description":"Allows Schains and NodeRotation contracts to add node to an schain group.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setNumberOfSchainTypes(uint256)","name":"setNumberOfSchainTypes","description":"Allows Admin to set number of schain types.","parameterDecorators":[{"name":"newNumberOfSchainTypes","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSchainIndex(bytes32,address)","name":"setSchainIndex","description":"Allows Schains contract to set index in owner list.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"from","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"sumOfSchainsResources()","name":"sumOfSchainsResources","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"usedSchainNames(bytes32)","name":"usedSchainNames","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true}]}