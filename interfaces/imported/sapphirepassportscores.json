{"schema":"../schema.json","tags":[],"name":"SapphirePassportScores","description":"","eventDecorators":[{"signature":"CurrentEpochSet(uint256,uint256)","name":"CurrentEpochSet","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"_newEpoch","description":"","recommendedTypes":[],"indexed":false},{"name":"_timestamp","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"DelayDurationUpdated(address,uint256)","name":"DelayDurationUpdated","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"account","description":"- The token recipient.","recommendedTypes":[],"indexed":true},{"name":"value","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"MerkleRootUpdated(address,bytes32,uint256)","name":"MerkleRootUpdated","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"updater","description":"","recommendedTypes":[],"indexed":true},{"name":"merkleRoot","description":"","recommendedTypes":[],"indexed":false},{"name":"updatedAt","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"MerkleRootUpdaterUpdated(address)","name":"MerkleRootUpdaterUpdated","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"merkleRootUpdater","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"PauseOperatorUpdated(address)","name":"PauseOperatorUpdated","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"pauseOperator","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"PauseStatusUpdated(bool)","name":"PauseStatusUpdated","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"value","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"currentEpoch()","name":"currentEpoch","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"currentMerkleRoot()","name":"currentMerkleRoot","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"currentTimestamp()","name":"currentTimestamp","description":"This function is introduced in order to properly test time delays in this contract. Returns current block's timestamp.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getAdmin()","name":"getAdmin","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The EIP-1967 proxy admin.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"init(bytes32,address,address,uint256)","name":"init","description":"","parameterDecorators":[{"name":"_merkleRoot","description":"","recommendedTypes":[]},{"name":"_merkleRootUpdater","description":"","recommendedTypes":[]},{"name":"_pauseOperator","description":"","recommendedTypes":[]},{"name":"_initialEpoch","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isPaused()","name":"isPaused","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"lastMerkleRootUpdate()","name":"lastMerkleRootUpdate","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"merkleRootDelayDuration()","name":"merkleRootDelayDuration","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"merkleRootUpdater()","name":"merkleRootUpdater","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pauseOperator()","name":"pauseOperator","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"rootsHistory(uint256)","name":"rootsHistory","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"merkleRoot","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"timestamp","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"setCurrentEpoch(uint256)","name":"setCurrentEpoch","description":"Sets a new current epoch. It has to be greater than the current one.","parameterDecorators":[{"name":"_newEpoch","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMerkleRootDelay(uint256)","name":"setMerkleRootDelay","description":"Update merkle root delay duration.","parameterDecorators":[{"name":"_delay","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMerkleRootUpdater(address)","name":"setMerkleRootUpdater","description":"Sets the merkle root updater.","parameterDecorators":[{"name":"_merkleRootUpdater","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPause(bool)","name":"setPause","description":"Pause or unpause contract, which cause the merkle root updater to not be able to update the merkle root.","parameterDecorators":[{"name":"_value","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPauseOperator(address)","name":"setPauseOperator","description":"Sets the pause operator.","parameterDecorators":[{"name":"_pauseOperator","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"upcomingMerkleRoot()","name":"upcomingMerkleRoot","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"updateMerkleRoot(bytes32)","name":"updateMerkleRoot","description":"Can be called by: - the admin: 1. Check if contract is paused 2. Replace upcoming merkle root - merkle root updater: 1. Check if contract is active 2. Replace current merkle root with upcoming merkle root 3. Update upcoming one with passed Merkle root. 4. Update the last merkle root update with the current timestamp 5. Increment the `currentEpoch`. Update upcoming merkle root.","parameterDecorators":[{"name":"_newRoot","description":"New upcoming merkle root.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"verify(tuple(address,bytes32,uint256,bytes32[]))","name":"verify","description":"Verifies the user's score proof against the current Merkle root. Reverts if the proof is invalid.","parameterDecorators":[{"name":"_proof","description":"Data required to verify if score is correct for the current merkle root.","recommendedTypes":[],"parameters":[{"name":"account","description":"","type":"address"},{"name":"protocol","description":"","type":"bytes32"},{"name":"score","description":"","type":"uint256"},{"name":"merkleProof","description":"","type":"bytes32[]"}]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"verifyForEpoch(tuple(address,bytes32,uint256,bytes32[]),uint256)","name":"verifyForEpoch","description":"Verifies the user's score proof against the merkle root of the given epoch. Reverts if proof is invalid.","parameterDecorators":[{"name":"_proof","description":"Data required to verify if score is correct for the current merkle root.","recommendedTypes":[],"parameters":[{"name":"account","description":"","type":"address"},{"name":"protocol","description":"","type":"bytes32"},{"name":"score","description":"","type":"uint256"},{"name":"merkleProof","description":"","type":"bytes32[]"}]},{"name":"_epoch","description":"The epoch of the Merkle root to verify the proof against.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true}]}