{
  "schema": "../schema.json",
  "tags": [],
  "name": "OmLink",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Blacklisted(address)",
      "name": "Blacklisted",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BlacklisterChanged(address)",
      "name": "BlacklisterChanged",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "newBlacklister",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ContractPaused(uint256,address)",
      "name": "ContractPaused",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "blockHeight",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ContractUnpaused(uint256,address)",
      "name": "ContractUnpaused",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "blockHeight",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ERC20Recovered(address,address,uint256)",
      "name": "ERC20Recovered",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LinkFinalized(uint256,address,address,address,uint256,uint256,address)",
      "name": "LinkFinalized",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LinkStarted(uint256,address,address,address,uint256,uint256)",
      "name": "LinkStarted",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "toChain",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "depositNonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NativeNonceInvalidated(uint256,address,uint256,uint256)",
      "name": "NativeNonceInvalidated",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "atBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NativeNonceUsed(uint256,uint256)",
      "name": "NativeNonceUsed",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "blockNumber",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NonceInvalidated(uint256,address,address,uint256,uint256)",
      "name": "NonceInvalidated",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "chainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "atBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NonceUsed(address,uint256,uint256)",
      "name": "NonceUsed",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "blockNumber",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerChanged(address,address)",
      "name": "OwnerChanged",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "currentOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SupportedTokenAdded(address,bool,address)",
      "name": "SupportedTokenAdded",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "isLToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SupportedTokenRemoved(address,address)",
      "name": "SupportedTokenRemoved",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UnBlacklisted(address)",
      "name": "UnBlacklisted",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ADMIN_ROLE()",
      "name": "ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MINTER_ROLE()",
      "name": "MINTER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_blacklister()",
      "name": "_blacklister",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_chainId()",
      "name": "_chainId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_isLinkToken(address)",
      "name": "_isLinkToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_supportedTokens(address)",
      "name": "_supportedTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addSupportedToken(address,bool)",
      "name": "addSupportedToken",
      "description": "function that adds supported token.",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "isLToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addVerifiedSigner(address)",
      "name": "addVerifiedSigner",
      "description": "function tat adds a new verified signer called only by the owner.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "blacklist(address)",
      "name": "blacklist",
      "description": "can only be called by blacklister. Function that blacklists an account Emits {Blacklisted} event.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address to be blacklisted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Blacklisted(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "changeNativeSupport(bool)",
      "name": "changeNativeSupport",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newValue",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(uint256,address,address,uint256)",
      "name": "deposit",
      "description": "deposit function emits {LinkStarted} event.",
      "parameterDecorators": [
        {
          "name": "toChain",
          "description": "target chain id.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "receiver address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "amount of tokens to be transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [
        "LinkStarted(uint256,address,address,address,uint256,uint256)"
      ],
      "readOnly": false
    },
    {
      "signature": "depositNative(uint256,address,uint256)",
      "name": "depositNative",
      "description": "deposit function for native tokens emits {LinkStarted} event with address(0) as contract address.",
      "parameterDecorators": [
        {
          "name": "toChain",
          "description": "target chain id.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "receiving address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "receiving amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [
        "LinkStarted(uint256,address,address,address,uint256,uint256)"
      ],
      "readOnly": false
    },
    {
      "signature": "finalize(uint256,address,address,address,uint256,uint256,bytes,address)",
      "name": "finalize",
      "description": "implementation of the link finalizer, this function processes the coupon provided by the verified signer backend and mints & transfers the signed amount to the receiving address Checks for whether the token is supported with `onlySupportedToken` modifier Checks for blacklis with `notBlacklisted` modifier Checks for whether contract is paused with `nonPaused` modifier Checks whether the signature is from a verified signer with `onlyVerifiedSigner` modifier.",
      "parameterDecorators": [
        {
          "name": "toChain",
          "description": "the chainId of the receiving chain.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "the contract address of the token.",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "the sender.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "the receiver.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the amount of tokens to be minted & transferred from.",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "the nonce of the transaction coupon.",
          "recommendedTypes": []
        },
        {
          "name": "signature",
          "description": "the signed message from the server.",
          "recommendedTypes": []
        },
        {
          "name": "signer",
          "description": "the address of the coupon signer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "finalizeNative(uint256,address,address,uint256,uint256,bytes,address)",
      "name": "finalizeNative",
      "description": "implementation of the link finalizer on receiving native currency this function processes the coupon provided by the verified signer and transfers the amount of native tokens to the receiving address Checks for whether native token bridging is supported on deployed network Checks whether the sending or receiving address is blacklisted Checks for signature provided and signer.",
      "parameterDecorators": [
        {
          "name": "toChain",
          "description": "the chainId of the receiving chain.",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "the sender.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "the receiver.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the amount of tokens to be minted & transferred from.",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "the nonce of the transaction coupon.",
          "recommendedTypes": []
        },
        {
          "name": "signature",
          "description": "the signed message from the server.",
          "recommendedTypes": []
        },
        {
          "name": "signer",
          "description": "the address of the coupon signer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getDepositNonce(address)",
      "name": "getDepositNonce",
      "description": "gets the current deposit nonce of the given token.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "token contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEthSignedMessageHash(bytes32)",
      "name": "getEthSignedMessageHash",
      "description": "converts the signed message to the ETH signed message format by appending \\x19Ethereum Signed Message:\\n32.",
      "parameterDecorators": [
        {
          "name": "messageHash",
          "description": "the hash of the message.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bytes32.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMessageHash(uint256,address,address,address,uint256,uint256)",
      "name": "getMessageHash",
      "description": "function that returns the hash of the encoded message.",
      "parameterDecorators": [
        {
          "name": "networkId",
          "description": "ID of the network.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "the address of the token's contract.",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "the address of the sender.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "the address of the receiver.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the amount of tokens.",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "the nonce of the message.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bytes32 message hash.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNativeDepositNonce()",
      "name": "getNativeDepositNonce",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNativeMessageHash(uint256,address,address,uint256,uint256)",
      "name": "getNativeMessageHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "networkId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNonceData(address,uint256)",
      "name": "getNonceData",
      "description": "gets information about the given withdrawal nonce of the any given token.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "nonce to be queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "invalidateNative(uint256)",
      "name": "invalidateNative",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "invalidateNonce(address,uint256)",
      "name": "invalidateNonce",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isBlacklisted(address)",
      "name": "isBlacklisted",
      "description": "Function that checks if an address is blacklisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address to be checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool, true if account is blacklisted, false if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isLinkToken(address)",
      "name": "isLinkToken",
      "description": "function that checks whether the token is LinkToken or not.",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPaused()",
      "name": "isPaused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSupportedToken(address)",
      "name": "isSupportedToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isUsedNativeNonce(uint256)",
      "name": "isUsedNativeNonce",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isUsedNonce(address,uint256)",
      "name": "isUsedNonce",
      "description": "checks if a withdraw nonce has been used before.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "nonce to be queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isVerifiedSigner(address)",
      "name": "isVerifiedSigner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "recoverERC20(address,address,uint256)",
      "name": "recoverERC20",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "recoverSigner(bytes32,bytes)",
      "name": "recoverSigner",
      "description": "function that recovers the signer of an eth signed message hash from signature.",
      "parameterDecorators": [
        {
          "name": "ethSignedMessageHash",
          "description": "signed message hash.",
          "recommendedTypes": []
        },
        {
          "name": "signature",
          "description": "signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of the signer.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeSupportedToken(address)",
      "name": "removeSupportedToken",
      "description": "function that removes supported token.",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeVerifiedSigner(address)",
      "name": "removeVerifiedSigner",
      "description": "function that removes a verified signer called only by the owner.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "setRoleAdmin(bytes32,bytes32)",
      "name": "setRoleAdmin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "adminRole",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "splitSignature(bytes)",
      "name": "splitSignature",
      "description": "function that splits the signature.",
      "parameterDecorators": [
        {
          "name": "sig",
          "description": "signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "r",
          "description": "bytes32.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "s",
          "description": "bytes32.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "v",
          "description": "uint8.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwner(address)",
      "name": "transferOwner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unBlacklist(address)",
      "name": "unBlacklist",
      "description": "can only be called by blacklister. Function that removes an address from blacklist Emits {UnBlacklisted} event.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "to be unblacklisted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "UnBlacklisted(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateBlacklister(address)",
      "name": "updateBlacklister",
      "description": "can only be called by the owner of the contract. Function that updates the current blacklister account Emits {BlacklisterChanged} event.",
      "parameterDecorators": [
        {
          "name": "newBlacklister",
          "description": "address that will be the new blacklister.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "BlacklisterChanged(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "verify(tuple(uint256,address,address,address,uint256,uint256,bytes,address))",
      "name": "verify",
      "description": "the function that verifys that a message is indeed signed by the passed signer.",
      "parameterDecorators": [
        {
          "name": "finalizeMessage",
          "description": "a struct that has the message data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "networkId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "token",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "from",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "to",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "nonce",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "signature",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "signer",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool, true if signer is correct, false if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "verifyNative(tuple(uint256,address,address,uint256,uint256,bytes,address))",
      "name": "verifyNative",
      "description": "",
      "parameterDecorators": [
        {
          "name": "finalizeMessage",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "networkId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "from",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "to",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "nonce",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "signature",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "signer",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}