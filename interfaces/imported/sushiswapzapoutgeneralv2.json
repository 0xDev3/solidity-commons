{
  "schema": "../schema.json",
  "tags": [
    "swaps"
  ],
  "name": "Sushiswap_ZapOut_General_V2",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "zapOut(address,address,address,uint256)",
      "name": "zapOut",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "pool",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokensRec",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ZapOut(address,address,uint256,uint256,address[],bytes,bytes,address)",
      "name": "ZapOut",
      "description": "This function is used to zapout of given Sushiswap pair in ETH/ERC20 Tokens.",
      "parameterDecorators": [
        {
          "name": "_ToTokenContractAddress",
          "description": "The ERC20 token to zapout in (address(0x00) if ether).",
          "recommendedTypes": []
        },
        {
          "name": "_FromSushiPoolAddress",
          "description": "Pool to remove liquidity from.",
          "recommendedTypes": []
        },
        {
          "name": "_IncomingLP",
          "description": "Quantity of LP tokens to be burned.",
          "recommendedTypes": []
        },
        {
          "name": "_minTokensRec",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "swapTargets",
          "description": "Execution target for swap.",
          "recommendedTypes": []
        },
        {
          "name": "swap1Data",
          "description": "DEX swap data.",
          "recommendedTypes": []
        },
        {
          "name": "swap2Data",
          "description": "DEX swap data.",
          "recommendedTypes": []
        },
        {
          "name": "affiliate",
          "description": "Affiliate address to share fees.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "tokenBought",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ZapOut2PairToken(address,uint256,address)",
      "name": "ZapOut2PairToken",
      "description": "This function is used to zapout of given SushiSwap pair in the bounded tokens.",
      "parameterDecorators": [
        {
          "name": "_FromSushiPoolAddress",
          "description": "The sushiSwap pair address to zapout.",
          "recommendedTypes": []
        },
        {
          "name": "_IncomingLP",
          "description": "The amount of LP.",
          "recommendedTypes": []
        },
        {
          "name": "affiliate",
          "description": "Affiliate address to share fees.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountA",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountB",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ZapOut2PairTokenWithPermit(address,uint256,address,bytes)",
      "name": "ZapOut2PairTokenWithPermit",
      "description": "This method performs the zapOut to pair tokens with permit.",
      "parameterDecorators": [
        {
          "name": "_FromSushiPoolAddress",
          "description": "indicates the liquidity pool.",
          "recommendedTypes": []
        },
        {
          "name": "_IncomingLP",
          "description": "indicates the amount of LP to remove from pool.",
          "recommendedTypes": []
        },
        {
          "name": "affiliate",
          "description": "Affiliate address to share fees.",
          "recommendedTypes": []
        },
        {
          "name": "_permitData",
          "description": "indicates the encoded permit data, which contains owner, spender, value, deadline, v,r,s values.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountA",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountB",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ZapOutWithPermit(address,address,uint256,uint256,bytes,address[],bytes,bytes,address)",
      "name": "ZapOutWithPermit",
      "description": "Zap out in a signle token with permit.",
      "parameterDecorators": [
        {
          "name": "_ToTokenContractAddress",
          "description": "indicates the toToken address to which tokens to convert.",
          "recommendedTypes": []
        },
        {
          "name": "_FromSushiPoolAddress",
          "description": "indicates the liquidity pool.",
          "recommendedTypes": []
        },
        {
          "name": "_IncomingLP",
          "description": "indicates the amount of LP to remove from pool.",
          "recommendedTypes": []
        },
        {
          "name": "_minTokensRec",
          "description": "indicatest the minimum amount of toTokens to receive.",
          "recommendedTypes": []
        },
        {
          "name": "_permitData",
          "description": "indicates the encoded permit data, which contains owner, spender, value, deadline, v,r,s values.",
          "recommendedTypes": []
        },
        {
          "name": "swapTargets",
          "description": "execution targets for swaps.",
          "recommendedTypes": []
        },
        {
          "name": "swap1Data",
          "description": "DEX swap data.",
          "recommendedTypes": []
        },
        {
          "name": "swap2Data",
          "description": "DEX swap data.",
          "recommendedTypes": []
        },
        {
          "name": "affiliate",
          "description": "Affiliate address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "affiliateBalance(address,address)",
      "name": "affiliateBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "affiliates(address)",
      "name": "affiliates",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "affilliateWithdraw(address[])",
      "name": "affilliateWithdraw",
      "description": "Withdraw affilliate share, retaining goodwill share.",
      "parameterDecorators": [
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feeWhitelist(address)",
      "name": "feeWhitelist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "goodwill()",
      "name": "goodwill",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeLiquidityReturn(address,uint256)",
      "name": "removeLiquidityReturn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_FromSushiPoolAddress",
          "description": "The pool to remove liquidity from.",
          "recommendedTypes": []
        },
        {
          "name": "_liquidity",
          "description": "Auantity of LP tokens to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amount1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_token0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "_token1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "set_affiliate(address,bool)",
      "name": "set_affiliate",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_affiliate",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_status",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "set_feeWhitelist(address,bool)",
      "name": "set_feeWhitelist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "zapAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "status",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "set_new_affiliateSplit(uint256)",
      "name": "set_new_affiliateSplit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_new_affiliateSplit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "set_new_goodwill(uint256)",
      "name": "set_new_goodwill",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_new_goodwill",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stopped()",
      "name": "stopped",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toggleContractActive()",
      "name": "toggleContractActive",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalAffiliateBalance(address)",
      "name": "totalAffiliateBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawTokens(address[])",
      "name": "withdrawTokens",
      "description": "Withdraw goodwill share, retaining affilliate share.",
      "parameterDecorators": [
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}