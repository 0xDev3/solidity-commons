{
  "schema": "../schema.json",
  "tags": [],
  "name": "GNS",
  "description": "GNS. The Graph Name System contract provides a decentralized naming system for subgraphs used in the scope of the Graph Network. It translates Subgraphs into Subgraph Versions. Each version is associated with a Subgraph Deployment. The contract has no knowledge of human-readable names. All human readable names emitted in events. The contract implements a multicall behaviour to support batching multiple calls in a single transaction.",
  "eventDecorators": [
    {
      "signature": "ContractSynced(bytes32,address)",
      "name": "ContractSynced",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nameHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GRTWithdrawn(uint256,address,uint256,uint256)",
      "name": "GRTWithdrawn",
      "description": "Emitted when a curator withdraws GRT from a deprecated subgraph.",
      "parameterDecorators": [
        {
          "name": "subgraphID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "curator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nSignalBurnt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "withdrawnGRT",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LegacySubgraphClaimed(address,uint256)",
      "name": "LegacySubgraphClaimed",
      "description": "Emitted when a legacy subgraph is claimed.",
      "parameterDecorators": [
        {
          "name": "graphAccount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "subgraphNumber",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ParameterUpdated(string)",
      "name": "ParameterUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetController(address)",
      "name": "SetController",
      "description": "",
      "parameterDecorators": [
        {
          "name": "controller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetDefaultName(address,uint256,bytes32,string)",
      "name": "SetDefaultName",
      "description": "Emitted when graph account sets its default name.",
      "parameterDecorators": [
        {
          "name": "graphAccount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nameSystem",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "nameIdentifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SignalBurned(uint256,address,uint256,uint256,uint256)",
      "name": "SignalBurned",
      "description": "Emitted when a curator burns signal.",
      "parameterDecorators": [
        {
          "name": "subgraphID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "curator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nSignalBurnt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "vSignalBurnt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokensReceived",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SignalMinted(uint256,address,uint256,uint256,uint256)",
      "name": "SignalMinted",
      "description": "Emitted when a curator mints signal.",
      "parameterDecorators": [
        {
          "name": "subgraphID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "curator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nSignalCreated",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "vSignalCreated",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokensDeposited",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubgraphDeprecated(uint256,uint256)",
      "name": "SubgraphDeprecated",
      "description": "Emitted when a subgraph is deprecated.",
      "parameterDecorators": [
        {
          "name": "subgraphID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "withdrawableGRT",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubgraphMetadataUpdated(uint256,bytes32)",
      "name": "SubgraphMetadataUpdated",
      "description": "Emitted when the subgraph metadata is updated.",
      "parameterDecorators": [
        {
          "name": "subgraphID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "subgraphMetadata",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubgraphNFTUpdated(address)",
      "name": "SubgraphNFTUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "subgraphNFT",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubgraphPublished(uint256,bytes32,uint32)",
      "name": "SubgraphPublished",
      "description": "Emitted when a subgraph is created.",
      "parameterDecorators": [
        {
          "name": "subgraphID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "reserveRatio",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubgraphUpgraded(uint256,uint256,uint256,bytes32)",
      "name": "SubgraphUpgraded",
      "description": "Emitted when a subgraph is upgraded to point to a new subgraph deployment, burning all the old vSignal and depositing the GRT into the new vSignal curve.",
      "parameterDecorators": [
        {
          "name": "subgraphID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "vSignalCreated",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokensSignalled",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SubgraphVersionUpdated(uint256,bytes32,bytes32)",
      "name": "SubgraphVersionUpdated",
      "description": "Emitted when a subgraph version is updated.",
      "parameterDecorators": [
        {
          "name": "subgraphID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "versionMetadata",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptProxy(address)",
      "name": "acceptProxy",
      "description": "Accept to be an implementation of proxy.",
      "parameterDecorators": [
        {
          "name": "_proxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "acceptProxyAndCall(address,bytes)",
      "name": "acceptProxyAndCall",
      "description": "Accept to be an implementation of proxy and then call a function from the new implementation as specified by `_data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract.",
      "parameterDecorators": [
        {
          "name": "_proxy",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveAll()",
      "name": "approveAll",
      "description": "Approve curation contract to pull funds.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "bondingCurve()",
      "name": "bondingCurve",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burnSignal(uint256,uint256,uint256)",
      "name": "burnSignal",
      "description": "Burn signal for a subgraph and return the GRT.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        },
        {
          "name": "_nSignal",
          "description": "The amount of nSignal the nameCurator wants to burn.",
          "recommendedTypes": []
        },
        {
          "name": "_tokensOutMin",
          "description": "Expected minimum amount of tokens to receive.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deprecateSubgraph(uint256)",
      "name": "deprecateSubgraph",
      "description": "Deprecate a subgraph. The bonding curve is destroyed, the vSignal is burned, and the GNS contract holds the GRT from burning the vSignal, which all curators can withdraw manually. Can only be done by the subgraph owner.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getCuratorSignal(uint256,address)",
      "name": "getCuratorSignal",
      "description": "Get the amount of subgraph signal a curator has.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        },
        {
          "name": "_curator",
          "description": "Curator address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of subgraph signal owned by a curator.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address)",
      "name": "initialize",
      "description": "Initialize this contract.",
      "parameterDecorators": [
        {
          "name": "_controller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bondingCurve",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_subgraphNFT",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isPublished(uint256)",
      "name": "isPublished",
      "description": "Return whether a subgraph is published.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Return true if subgraph is currently published.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "legacySubgraphData(address,uint256)",
      "name": "legacySubgraphData",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "vSignal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "nSignal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "reserveRatio",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "disabled",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "withdrawableGRT",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "legacySubgraphKeys(uint256)",
      "name": "legacySubgraphKeys",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "accountSeqID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "migrateLegacySubgraph(address,uint256,bytes32)",
      "name": "migrateLegacySubgraph",
      "description": "Create subgraphID for legacy subgraph and mint ownership NFT.",
      "parameterDecorators": [
        {
          "name": "_graphAccount",
          "description": "Account that created the subgraph.",
          "recommendedTypes": []
        },
        {
          "name": "_subgraphNumber",
          "description": "The sequence number of the created subgraph.",
          "recommendedTypes": []
        },
        {
          "name": "_subgraphMetadata",
          "description": "IPFS hash for the subgraph metadata.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintSignal(uint256,uint256,uint256)",
      "name": "mintSignal",
      "description": "Deposit GRT into a subgraph and mint signal.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        },
        {
          "name": "_tokensIn",
          "description": "The amount of tokens the nameCurator wants to deposit.",
          "recommendedTypes": []
        },
        {
          "name": "_nSignalOutMin",
          "description": "Expected minimum amount of name signal to receive.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "multicall(bytes[])",
      "name": "multicall",
      "description": "Call multiple functions in the current contract and return the data from all of them if they all succeed.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "The encoded function data for each of the calls to make to this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "The results from each of the calls passed in via data.",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nSignalToTokens(uint256,uint256)",
      "name": "nSignalToTokens",
      "description": "Calculate tokens returned for an amount of subgraph signal.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        },
        {
          "name": "_nSignalIn",
          "description": "Subgraph signal being exchanged for tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nSignalToVSignal(uint256,uint256)",
      "name": "nSignalToVSignal",
      "description": "Calculate subgraph deployment signal to be returned for an amount of subgraph signal.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        },
        {
          "name": "_nSignalIn",
          "description": "Subgraph signal being exchanged for subgraph deployment signal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of subgraph deployment signal that can be returned.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nextAccountSeqID(address)",
      "name": "nextAccountSeqID",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ownerOf(uint256)",
      "name": "ownerOf",
      "description": "Return the owner of a subgraph.",
      "parameterDecorators": [
        {
          "name": "_tokenID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Owner address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ownerTaxPercentage()",
      "name": "ownerTaxPercentage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "publishNewSubgraph(bytes32,bytes32,bytes32)",
      "name": "publishNewSubgraph",
      "description": "Publish a new subgraph.",
      "parameterDecorators": [
        {
          "name": "_subgraphDeploymentID",
          "description": "Subgraph deployment for the subgraph.",
          "recommendedTypes": []
        },
        {
          "name": "_versionMetadata",
          "description": "IPFS hash for the subgraph version metadata.",
          "recommendedTypes": []
        },
        {
          "name": "_subgraphMetadata",
          "description": "IPFS hash for the subgraph metadata.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "publishNewVersion(uint256,bytes32,bytes32)",
      "name": "publishNewVersion",
      "description": "Publish a new version of an existing subgraph.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        },
        {
          "name": "_subgraphDeploymentID",
          "description": "Subgraph deployment ID of the new version.",
          "recommendedTypes": []
        },
        {
          "name": "_versionMetadata",
          "description": "IPFS hash for the subgraph version metadata.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setController(address)",
      "name": "setController",
      "description": "Set Controller. Only callable by current controller.",
      "parameterDecorators": [
        {
          "name": "_controller",
          "description": "Controller contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDefaultName(address,uint8,bytes32,string)",
      "name": "setDefaultName",
      "description": "Allows a graph account to set a default name.",
      "parameterDecorators": [
        {
          "name": "_graphAccount",
          "description": "Account that is setting its name.",
          "recommendedTypes": []
        },
        {
          "name": "_nameSystem",
          "description": "Name system account already has ownership of a name in.",
          "recommendedTypes": []
        },
        {
          "name": "_nameIdentifier",
          "description": "The unique identifier that is used to identify the name in the system.",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "The name being set as default.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwnerTaxPercentage(uint32)",
      "name": "setOwnerTaxPercentage",
      "description": "Set the owner fee percentage. This is used to prevent a subgraph owner to drain all the name curators tokens while upgrading or deprecating and is configurable in parts per million.",
      "parameterDecorators": [
        {
          "name": "_ownerTaxPercentage",
          "description": "Owner tax percentage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSubgraphNFT(address)",
      "name": "setSubgraphNFT",
      "description": "Set the NFT registry contract NOTE: Calling this function will break the ownership model unless it is replaced with a fully migrated version of the NFT contract state Use with care.",
      "parameterDecorators": [
        {
          "name": "_subgraphNFT",
          "description": "Address of the ERC721 contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "subgraphNFT()",
      "name": "subgraphNFT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "subgraphSignal(uint256)",
      "name": "subgraphSignal",
      "description": "Return the total signal on the subgraph.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Total signal on the subgraph.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "subgraphTokens(uint256)",
      "name": "subgraphTokens",
      "description": "Return the total tokens on the subgraph at current value.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Total tokens on the subgraph.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "subgraphs(uint256)",
      "name": "subgraphs",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "vSignal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "nSignal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "reserveRatio",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "disabled",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "withdrawableGRT",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "syncAllContracts()",
      "name": "syncAllContracts",
      "description": "Sync protocol contract addresses from the Controller registry. This function will cache all the contracts using the latest addresses Anyone can call the function whenever a Proxy contract change in the controller to ensure the protocol is using the latest version.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokensToNSignal(uint256,uint256)",
      "name": "tokensToNSignal",
      "description": "Calculate subgraph signal to be returned for an amount of tokens.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        },
        {
          "name": "_tokensIn",
          "description": "Tokens being exchanged for subgraph signal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateSubgraphMetadata(uint256,bytes32)",
      "name": "updateSubgraphMetadata",
      "description": "Allows a subgraph owner to update the metadata of a subgraph they have published.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        },
        {
          "name": "_subgraphMetadata",
          "description": "IPFS hash for the subgraph metadata.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vSignalToNSignal(uint256,uint256)",
      "name": "vSignalToNSignal",
      "description": "Calculate subgraph signal to be returned for an amount of subgraph deployment signal.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        },
        {
          "name": "_vSignalIn",
          "description": "Amount of subgraph deployment signal to exchange for subgraph signal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of subgraph signal that can be bought.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Withdraw tokens from a deprecated subgraph. When the subgraph is deprecated, any curator can call this function and withdraw the GRT they are entitled for its original deposit.",
      "parameterDecorators": [
        {
          "name": "_subgraphID",
          "description": "Subgraph ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}