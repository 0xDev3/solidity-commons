{
  "schema": "../schema.json",
  "tags": [
    "staking"
  ],
  "name": "StakeManager",
  "description": "Encompasses all functions taken by stakers.*.",
  "eventDecorators": [
    {
      "signature": "ExpiredNFT(address,uint256,uint256)",
      "name": "ExpiredNFT",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RemovedNFT(address,address,uint256,uint256,uint256,uint16,uint256)",
      "name": "RemovedNFT",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "protocol",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sumAssured",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "secondPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "coverPeriod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakedNFT(address,address,uint256,uint256,uint256,uint16,uint256)",
      "name": "StakedNFT",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "protocol",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sumAssured",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "secondPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "coverPeriod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WithdrawRequest(address,uint256,uint256,uint256)",
      "name": "WithdrawRequest",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "withdrawTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "BUCKET_STEP()",
      "name": "BUCKET_STEP",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ETH_SIG()",
      "name": "ETH_SIG",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowProtocol(address,bool)",
      "name": "allowProtocol",
      "description": "Allow the owner (DAO soon) to allow or disallow a protocol from being used in Armor.",
      "parameterDecorators": [
        {
          "name": "_protocol",
          "description": "The address of the protocol to allow or disallow.",
          "recommendedTypes": []
        },
        {
          "name": "_allow",
          "description": "Whether to allow or disallow the protocol.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "allowedCover(address,uint256)",
      "name": "allowedCover",
      "description": "Check whether a new TOTAL cover is allowed.",
      "parameterDecorators": [
        {
          "name": "_protocol",
          "description": "Address of the smart contract protocol being protected.",
          "recommendedTypes": []
        },
        {
          "name": "_totalBorrowedAmount",
          "description": "The new total amount that would be being borrowed. returns Whether or not this new total borrowed amount would be able to be covered.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowedProtocol(address)",
      "name": "allowedProtocol",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "batchStakeNft(uint256[])",
      "name": "batchStakeNft",
      "description": "stakeNft allows a user to submit their NFT to the contract and begin getting returns.",
      "parameterDecorators": [
        {
          "name": "_nftIds",
          "description": "The ID of the NFT being staked.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeMaster(address)",
      "name": "changeMaster",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newMaster",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeWithdrawalDelay(uint256)",
      "name": "changeWithdrawalDelay",
      "description": "Allow the owner to change the amount of delay to withdraw an NFT.",
      "parameterDecorators": [
        {
          "name": "_withdrawalDelay",
          "description": "The amount of time--in seconds--to delay an NFT withdrawal.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "checkPoints(uint64)",
      "name": "checkPoints",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "head",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        },
        {
          "name": "tail",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "head()",
      "name": "head",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "infos(uint96)",
      "name": "infos",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "next",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        },
        {
          "name": "prev",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        },
        {
          "name": "expiresAt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Construct the contract with the yNft contract.*.",
      "parameterDecorators": [
        {
          "name": "_armorMaster",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "keep()",
      "name": "keep",
      "description": "Keep function can be called by anyone to remove any NFTs that have expired. Also run when calling many functions. This is external because the doKeep modifier calls back to ArmorMaster, which then calls back to here (and elsewhere).*.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nftOwners(uint256)",
      "name": "nftOwners",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingWithdrawals(uint256)",
      "name": "pendingWithdrawals",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "protocolAddress(uint64)",
      "name": "protocolAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "protocolId(address)",
      "name": "protocolId",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakeNft(uint256)",
      "name": "stakeNft",
      "description": "stakeNft allows a user to submit their NFT to the contract and begin getting returns. This yNft cannot be withdrawn!.",
      "parameterDecorators": [
        {
          "name": "_nftId",
          "description": "The ID of the NFT being staked.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "submitted(uint256)",
      "name": "submitted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "subtractTotal(uint256,address,uint256)",
      "name": "subtractTotal",
      "description": "Subtract from total staked. Used by ClaimManager in case NFT is submitted.",
      "parameterDecorators": [
        {
          "name": "_nftId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_protocol",
          "description": "Address of the protocol to subtract from.",
          "recommendedTypes": []
        },
        {
          "name": "_subtractAmount",
          "description": "Amount of staked to subtract.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tail()",
      "name": "tail",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toggleUF()",
      "name": "toggleUF",
      "description": "Toggle whether utilization farming should be on or off.*.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalStakedAmount(address)",
      "name": "totalStakedAmount",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawNft(uint256)",
      "name": "withdrawNft",
      "description": "A user may call to withdraw their NFT. This may have a delay added to it.",
      "parameterDecorators": [
        {
          "name": "_nftId",
          "description": "ID of the NFT to withdraw.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}