{"schema":"../schema.json","tags":["bridges"],"name":"L1_Bridge","description":"","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Event for token purchase logging.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Stake(uint256)","name":"Stake","description":"Event for token purchase logging.","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TransferRootBonded(bytes32,uint256)","name":"TransferRootBonded","description":"Event for token purchase logging.","parameterDecorators":[{"name":"root","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unstake(uint256)","name":"Unstake","description":"Event for token purchase logging.","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"amountChallenged()","name":"amountChallenged","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"bondTransferRoot(bytes32,uint256[],uint256[])","name":"bondTransferRoot","description":"Setting a TransferRoot is a two step process.1. The TransferRoot is bonded with `bondTransferRoot`. Withdrawals can now begin on L1and recipient L2's2. The TransferRoot is confirmed after `confirmTransferRoot` is called by the l2 bridgewhere the TransferRoot originated.","parameterDecorators":[{"name":"_transferRootHash","description":"","recommendedTypes":[]},{"name":"_chainIds","description":"","recommendedTypes":[]},{"name":"_chainAmounts","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"bondWithdrawal(address,address,uint256,uint256,uint256)","name":"bondWithdrawal","description":"Allows the committee to bond individual withdrawals before their TransferRoot has been committed.","parameterDecorators":[{"name":"_sender","description":"The address sending the Transfer.","recommendedTypes":[]},{"name":"_recipient","description":"The address receiving the Transfer.","recommendedTypes":[]},{"name":"_amount","description":"The amount being transferred including the `_relayerFee`.","recommendedTypes":[]},{"name":"_transferNonce","description":"Used to avoid transferHash collisions.","recommendedTypes":[]},{"name":"_relayerFee","description":"The amount paid to the address that withdraws the Transfer.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"challengeTransferBond(bytes32)","name":"challengeTransferBond","description":"","parameterDecorators":[{"name":"_transferRootHash","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"confirmTransferRoot(bytes32,bytes32)","name":"confirmTransferRoot","description":"","parameterDecorators":[{"name":"_transferRootHash","description":"","recommendedTypes":[]},{"name":"_amountHash","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getAmountHash(uint256[],uint256[])","name":"getAmountHash","description":"Get the hash of the destination chainIds for a given TransferRoot and their respective amounts.","parameterDecorators":[{"name":"_chainIds","description":"The chainIds of all networks receiving Transfers in a given TransferRoot.","recommendedTypes":[]},{"name":"_amounts","description":"The amounts destined for each _chainId.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getBondForTransferAmount(uint256)","name":"getBondForTransferAmount","description":"","parameterDecorators":[{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getBondedWithdrawalAmount(bytes32)","name":"getBondedWithdrawalAmount","description":"Get the TransferRoot for a given rootHash.","parameterDecorators":[{"name":"_transferHash","description":"The Transfer's unique identifier.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getChainId()","name":"getChainId","description":"getChainId can be overridden by subclasses if needed for compatibility or testing purposes. Get the current chainId.","parameterDecorators":[],"returnDecorators":[{"name":"chainId","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getChallengeAmountDivisor()","name":"getChallengeAmountDivisor","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getChallengeAmountForTransferAmount(uint256)","name":"getChallengeAmountForTransferAmount","description":"","parameterDecorators":[{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getChallengeAmountMultiplier()","name":"getChallengeAmountMultiplier","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getChallengePeriod()","name":"getChallengePeriod","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getChallengeResolutionPeriod()","name":"getChallengeResolutionPeriod","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getCommittee()","name":"getCommittee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getCredit()","name":"getCredit","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getCrossDomainMessengerWrapper(uint256)","name":"getCrossDomainMessengerWrapper","description":"","parameterDecorators":[{"name":"_chainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getDebit()","name":"getDebit","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getNumberOfChallengeableTimeSlots()","name":"getNumberOfChallengeableTimeSlots","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTimeSlot(uint256)","name":"getTimeSlot","description":"","parameterDecorators":[{"name":"_time","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTimeSlotSize()","name":"getTimeSlotSize","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTransferHash(uint256,address,address,uint256,uint256,uint256,uint256,uint256)","name":"getTransferHash","description":"Get the hash that represents an individual Transfer.","parameterDecorators":[{"name":"_chainId","description":"The id of the destination chain.","recommendedTypes":[]},{"name":"_sender","description":"The address sending the Transfer.","recommendedTypes":[]},{"name":"_recipient","description":"The address receiving the Transfer.","recommendedTypes":[]},{"name":"_amount","description":"The amount being transferred including the `_relayerFee`.","recommendedTypes":[]},{"name":"_transferNonce","description":"Used to avoid transferHash collisions.","recommendedTypes":[]},{"name":"_relayerFee","description":"The amount paid to the address that withdraws the Transfer.","recommendedTypes":[]},{"name":"_amountOutMin","description":"The minimum amount received after attempting to swap in the destination Uniswap market. 0 if no swap is intended.","recommendedTypes":[]},{"name":"_deadline","description":"The deadline for swapping in the destination Uniswap market. 0 if no swap is intended.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getTransferRoot(bytes32)","name":"getTransferRoot","description":"Get the TransferRoot for a given rootHash.","parameterDecorators":[{"name":"_rootHash","description":"The merkle root of the TransferRoot.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"getUnstakePeriod()","name":"getUnstakePeriod","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"l1CanonicalToken()","name":"l1CanonicalToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"resolveChallenge(bytes32)","name":"resolveChallenge","description":"","parameterDecorators":[{"name":"_transferRootHash","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"sendToL2(uint256,address,uint256)","name":"sendToL2","description":"","parameterDecorators":[{"name":"_chainId","description":"","recommendedTypes":[]},{"name":"_recipient","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"sendToL2AndAttemptSwap(uint256,address,uint256,uint256,uint256)","name":"sendToL2AndAttemptSwap","description":"","parameterDecorators":[{"name":"_chainId","description":"","recommendedTypes":[]},{"name":"_recipient","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]},{"name":"_amountOutMin","description":"","recommendedTypes":[]},{"name":"_deadline","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setChallengeAmountDivisor(uint256)","name":"setChallengeAmountDivisor","description":"","parameterDecorators":[{"name":"_challengeAmountDivisor","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setChallengeAmountMultiplier(uint256)","name":"setChallengeAmountMultiplier","description":"","parameterDecorators":[{"name":"_challengeAmountMultiplier","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setChallengePeriod(uint256)","name":"setChallengePeriod","description":"","parameterDecorators":[{"name":"_challengePeriod","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setChallengeResolutionPeriod(uint256)","name":"setChallengeResolutionPeriod","description":"","parameterDecorators":[{"name":"_challengeResolutionPeriod","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setCrossDomainMessengerWrapper(uint256,address)","name":"setCrossDomainMessengerWrapper","description":"","parameterDecorators":[{"name":"_chainId","description":"","recommendedTypes":[]},{"name":"_crossDomainMessengerWrapper","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setTimeSlotSize(uint256)","name":"setTimeSlotSize","description":"","parameterDecorators":[{"name":"_timeSlotSize","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setUnstakePeriod(uint256)","name":"setUnstakePeriod","description":"","parameterDecorators":[{"name":"_unstakePeriod","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"settleBondedWithdrawal(bytes32,bytes32,bytes32[])","name":"settleBondedWithdrawal","description":"Refunds the committees stake from a bonded withdrawal and counts that withdrawal against its TransferRoot.","parameterDecorators":[{"name":"_transferHash","description":"The Transfer's unique identifier.","recommendedTypes":[]},{"name":"_rootHash","description":"The merkle root of the TransferRoot.","recommendedTypes":[]},{"name":"_proof","description":"The Merkle proof that proves the Transfer's inclusion in the TransferRoot.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"stake(uint256)","name":"stake","description":"Allows the committee to deposit tokens and increase its credit balance.","parameterDecorators":[{"name":"_amount","description":"The amount being staked.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"timeSlotToAmountBonded(uint256)","name":"timeSlotToAmountBonded","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferBonds(bytes32)","name":"transferBonds","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"createdAt","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"amountHash","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"confirmed","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"challengeStartTime","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"challenger","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unstake(uint256)","name":"unstake","description":"Allows the committee to withdraw any available balance and add to its debit balance.","parameterDecorators":[{"name":"_amount","description":"The amount being staked.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw(address,address,uint256,uint256,uint256,bytes32,bytes32[])","name":"withdraw","description":"Can be called by anyone (recipient or relayer). Withdraw a Transfer from its destination bridge.","parameterDecorators":[{"name":"_sender","description":"The address sending the Transfer.","recommendedTypes":[]},{"name":"_recipient","description":"The address receiving the Transfer.","recommendedTypes":[]},{"name":"_amount","description":"The amount being transferred including the `_relayerFee`.","recommendedTypes":[]},{"name":"_transferNonce","description":"Used to avoid transferHash collisions.","recommendedTypes":[]},{"name":"_relayerFee","description":"The amount paid to the address that withdraws the Transfer.","recommendedTypes":[]},{"name":"_transferRootHash","description":"The Merkle root of the TransferRoot.","recommendedTypes":[]},{"name":"_proof","description":"The Merkle proof that proves the Transfer's inclusion in the TransferRoot.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}