{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "DeHiveTokensale",
  "description": "",
  "eventDecorators": [
    {
      "signature": "DHVPurchased(address,address,uint256)",
      "name": "DHVPurchased",
      "description": "EVENTS*. Emitted when setting contract parameters.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "purchaseToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "dhvAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when setting contract parameters.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Emitted when setting contract parameters.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokensClaimed(address,uint256)",
      "name": "TokensClaimed",
      "description": "Emitted when setting contract parameters.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "dhvAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Emitted when setting contract parameters.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DHVToken()",
      "name": "DHVToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ETHRate()",
      "name": "ETHRate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PRECISION()",
      "name": "PRECISION",
      "description": "CONSTANTS*.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PRE_SALE_DHV_NUX_POOL()",
      "name": "PRE_SALE_DHV_NUX_POOL",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PRE_SALE_DHV_POOL()",
      "name": "PRE_SALE_DHV_POOL",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PRE_SALE_END()",
      "name": "PRE_SALE_END",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PRE_SALE_START()",
      "name": "PRE_SALE_START",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PUBLIC_SALE_DHV_POOL()",
      "name": "PUBLIC_SALE_DHV_POOL",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PUBLIC_SALE_END()",
      "name": "PUBLIC_SALE_END",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PUBLIC_SALE_START()",
      "name": "PUBLIC_SALE_START",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminAddPurchase(address,uint256)",
      "name": "adminAddPurchase",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_receiver",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminPause()",
      "name": "adminPause",
      "description": "Stops purchase functions. Owner only.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminSetMaxDHV(uint256)",
      "name": "adminSetMaxDHV",
      "description": "Allows owner to change max allowed DHV token per address.",
      "parameterDecorators": [
        {
          "name": "_maxDHV",
          "description": "New max DHV amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminSetMaxGasPrice(uint256)",
      "name": "adminSetMaxGasPrice",
      "description": "Allows owner to change the max allowed gas price. Prevents gas wars.",
      "parameterDecorators": [
        {
          "name": "_maxGasPrice",
          "description": "New max gas price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminSetPublicPool(uint256)",
      "name": "adminSetPublicPool",
      "description": "Updates public sales pool maximum.",
      "parameterDecorators": [
        {
          "name": "_publicPool",
          "description": "New public pool DHV maximum value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminSetRates(address,uint256)",
      "name": "adminSetRates",
      "description": "Sets the rate for the chosen token based on the contracts precision.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "ERC20 token address or zero address for ETH.",
          "recommendedTypes": []
        },
        {
          "name": "_rate",
          "description": "Exchange rate based on precision (e.g. _rate = PRECISION corresponds to 1:1).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminSetTreasury(address)",
      "name": "adminSetTreasury",
      "description": "Allows owner to change the treasury address. Treasury is the address where all funds from sale go to.",
      "parameterDecorators": [
        {
          "name": "treasury",
          "description": "New treasury address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminSetVestingStart(uint256)",
      "name": "adminSetVestingStart",
      "description": "Updates current vesting start time. Can be used once.",
      "parameterDecorators": [
        {
          "name": "_vestingStart",
          "description": "New vesting start time.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminUnpause()",
      "name": "adminUnpause",
      "description": "Unpauses purchase functions. Owner only.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminWithdraw()",
      "name": "adminWithdraw",
      "description": "Function for the administrator to withdraw ETH for refundsWithdrawals allowed only if there is no sale pending stage.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminWithdrawERC20(address)",
      "name": "adminWithdrawERC20",
      "description": "Function for the administrator to withdraw token (except DHV)Withdrawals allowed only if there is no sale pending stage.",
      "parameterDecorators": [
        {
          "name": "ERC20token",
          "description": "Address of ERC20 token to withdraw from the contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claim()",
      "name": "claim",
      "description": "Transfers available for claim vested tokens to the user.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimable(address)",
      "name": "claimable",
      "description": "Calculates the amount that has already vested but hasn't been claimed yet.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "Address of the user who purchased tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of the token vested and unclaimed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimed(address)",
      "name": "claimed",
      "description": "Gets the amount of tokens the user has already claimed.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "Address of the user who purchased tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of the token claimed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address)",
      "name": "initialize",
      "description": "Initializes the contract with correct addresses settings.",
      "parameterDecorators": [
        {
          "name": "treasury",
          "description": "Address of the DeHive protocol's treasury where funds from sale go to.",
          "recommendedTypes": []
        },
        {
          "name": "dhv",
          "description": "DHVToken mainnet address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "maxGasPrice()",
      "name": "maxGasPrice",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxTokensAmount()",
      "name": "maxTokensAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "publicSaleAvailableDHV()",
      "name": "publicSaleAvailableDHV",
      "description": "Function to get available on public sale amount of DHVUnsold NUX pool and pre-sale pool go to public sale.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of the token released.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "purchaseDHVwithERC20(address,uint256)",
      "name": "purchaseDHVwithERC20",
      "description": "For purchase with allowed stablecoin (USDT and DAI).",
      "parameterDecorators": [
        {
          "name": "ERC20token",
          "description": "Address of the token to be paid in.",
          "recommendedTypes": []
        },
        {
          "name": "ERC20amount",
          "description": "Amount of the token to be paid in.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "purchaseDHVwithETH()",
      "name": "purchaseDHVwithETH",
      "description": "For purchase with ETH. ETH is left on the contract until withdrawn to treasury.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "purchaseDHVwithNUX(uint256)",
      "name": "purchaseDHVwithNUX",
      "description": "For purchase with NUX token only. Available only for tokensale.",
      "parameterDecorators": [
        {
          "name": "nuxAmount",
          "description": "Amount of the NUX token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "purchased(address)",
      "name": "purchased",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "purchasedPreSale()",
      "name": "purchasedPreSale",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "purchasedPublic(address)",
      "name": "purchasedPublic",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "purchasedPublicSale()",
      "name": "purchasedPublicSale",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "purchasedWithNUX()",
      "name": "purchasedWithNUX",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rateForToken(address)",
      "name": "rateForToken",
      "description": "Returns DHV amount for 1 external token.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "External toke (DAI, USDT, NUX, 0 address for ETH).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rates(address)",
      "name": "rates",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vestingDuration()",
      "name": "vestingDuration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vestingStart()",
      "name": "vestingStart",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}