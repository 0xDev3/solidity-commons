{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "DynamicLiquidTokenConverter",
  "description": "Liquid Token Converter The dynamic liquid token converter is a specialized version of a converter that manages a liquid token and allows for a reduction in reserve weight within a predefined set of boundaries. The converters govern a token with a single reserve and allow converting between the two. Liquid tokens usually have fractional reserve (reserve ratio smaller than 100%). The weight can be reduced by the defined stepWeight any time the defined marketCapThreshold has been reached.",
  "eventDecorators": [
    {
      "signature": "Activation(uint16,address,bool)",
      "name": "Activation",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "_type",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_anchor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_activated",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Conversion(address,address,address,uint256,uint256,int256)",
      "name": "Conversion",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "_fromToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_toToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_trader",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_return",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_conversionFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ConversionFeeUpdate(uint32,uint32)",
      "name": "ConversionFeeUpdate",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "_prevFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_newFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerUpdate(address,address)",
      "name": "OwnerUpdate",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "_prevOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ReserveTokenWeightUpdate(uint32,uint32,uint256,uint256)",
      "name": "ReserveTokenWeightUpdate",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "_prevWeight",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_newWeight",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_percentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_balance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenRateUpdate(address,address,uint256,uint256)",
      "name": "TokenRateUpdate",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "_token1",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_token2",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_rateN",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_rateD",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptAnchorOwnership()",
      "name": "acceptAnchorOwnership",
      "description": "accepts ownership of the anchor after an ownership transfer also activates the converter can only be called by the contract owner note that prior to version 28, you should use 'acceptTokenOwnership' instead.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "used by a new owner to accept an ownership transfer.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "acceptTokenOwnership()",
      "name": "acceptTokenOwnership",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addReserve(address,uint32)",
      "name": "addReserve",
      "description": "defines the reserve token for the converter can only be called by the owner while the converter is inactive and the reserve wasn't defined yet.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the reserve token.",
          "recommendedTypes": []
        },
        {
          "name": "_weight",
          "description": "reserve weight, represented in ppm, 1-1000000.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "anchor()",
      "name": "anchor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "connectorTokenCount()",
      "name": "connectorTokenCount",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "connectorTokens(uint256)",
      "name": "connectorTokens",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "connectors(address)",
      "name": "connectors",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "conversionFee()",
      "name": "conversionFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "conversionWhitelist()",
      "name": "conversionWhitelist",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "conversionsEnabled()",
      "name": "conversionsEnabled",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "convert(address,address,uint256,address,address)",
      "name": "convert",
      "description": "converts a specific amount of source tokens to target tokens can only be called by the bancor network contract.",
      "parameterDecorators": [
        {
          "name": "_sourceToken",
          "description": "source ERC20 token.",
          "recommendedTypes": []
        },
        {
          "name": "_targetToken",
          "description": "target ERC20 token.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount of tokens to convert (in units of the source token).",
          "recommendedTypes": []
        },
        {
          "name": "_trader",
          "description": "address of the caller who executed the conversion.",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "wallet to receive the conversion result.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of tokens received (in units of the target token).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "converterType()",
      "name": "converterType",
      "description": "returns the converter type.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "see the converter types in the the main contract doc.",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConnectorBalance(address)",
      "name": "getConnectorBalance",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_connectorToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMarketCap(address)",
      "name": "getMarketCap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReturn(address,address,uint256)",
      "name": "getReturn",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_sourceToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_targetToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasETHReserve()",
      "name": "hasETHReserve",
      "description": "checks whether or not the converter has an ETH reserve.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the converter has an ETH reserve, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isActive()",
      "name": "isActive",
      "description": "returns true if the converter is active, false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the converter is active, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isV28OrHigher()",
      "name": "isV28OrHigher",
      "description": "checks whether or not the converter version is 28 or higher.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true, since the converter version is 28 or higher.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketCapThreshold()",
      "name": "marketCapThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxConversionFee()",
      "name": "maxConversionFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minimumWeight()",
      "name": "minimumWeight",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newOwner()",
      "name": "newOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onlyOwnerCanUpdateRegistry()",
      "name": "onlyOwnerCanUpdateRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prevRegistry()",
      "name": "prevRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reduceWeight(address)",
      "name": "reduceWeight",
      "description": "updates the token reserve weight can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "address of the reserve token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registry()",
      "name": "registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reserveBalance(address)",
      "name": "reserveBalance",
      "description": "returns the reserve's balance note that prior to version 17, you should use 'getConnectorBalance' instead.",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "reserve token contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "reserve balance.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reserveRatio()",
      "name": "reserveRatio",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reserveTokenCount()",
      "name": "reserveTokenCount",
      "description": "returns the number of reserve tokens defined note that prior to version 17, you should use 'connectorTokenCount' instead.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "number of reserve tokens.",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reserveTokens(uint256)",
      "name": "reserveTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reserveWeight(address)",
      "name": "reserveWeight",
      "description": "returns the reserve's weight added in version 28.",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "reserve token contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "reserve weight.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reserves(address)",
      "name": "reserves",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "balance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "weight",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "deprecated1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "deprecated2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "isSet",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "restoreRegistry()",
      "name": "restoreRegistry",
      "description": "restores the previous contract-registry.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "restrictRegistryUpdate(bool)",
      "name": "restrictRegistryUpdate",
      "description": "restricts the permission to update the contract-registry.",
      "parameterDecorators": [
        {
          "name": "_onlyOwnerCanUpdateRegistry",
          "description": "indicates whether or not permission is restricted to owner only.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setConversionFee(uint32)",
      "name": "setConversionFee",
      "description": "updates the current conversion fee can only be called by the contract owner.",
      "parameterDecorators": [
        {
          "name": "_conversionFee",
          "description": "new conversion fee, represented in ppm.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setConversionWhitelist(address)",
      "name": "setConversionWhitelist",
      "description": "allows the owner to update & enable the conversion whitelist contract address when set, only addresses that are whitelisted are actually allowed to use the converter note that the whitelist check is actually done by the BancorNetwork contract.",
      "parameterDecorators": [
        {
          "name": "_whitelist",
          "description": "address of a whitelist contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMarketCapThreshold(uint256)",
      "name": "setMarketCapThreshold",
      "description": "updates the market cap threshold can only be called by the owner while inactive.",
      "parameterDecorators": [
        {
          "name": "_marketCapThreshold",
          "description": "new threshold.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumWeight(uint32)",
      "name": "setMinimumWeight",
      "description": "updates the current minimum weight can only be called by the owner while inactive.",
      "parameterDecorators": [
        {
          "name": "_minimumWeight",
          "description": "new minimum weight, represented in ppm.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStepWeight(uint32)",
      "name": "setStepWeight",
      "description": "updates the current step weight can only be called by the owner while inactive.",
      "parameterDecorators": [
        {
          "name": "_stepWeight",
          "description": "new step weight, represented in ppm.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stepWeight()",
      "name": "stepWeight",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "targetAmountAndFee(address,address,uint256)",
      "name": "targetAmountAndFee",
      "description": "returns the expected target amount of converting the source token to the target token along with the fee.",
      "parameterDecorators": [
        {
          "name": "_sourceToken",
          "description": "contract address of the source token.",
          "recommendedTypes": []
        },
        {
          "name": "_targetToken",
          "description": "contract address of the target token.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount of tokens received from the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "expected target amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_1",
          "description": "expected fee.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "token()",
      "name": "token",
      "description": "deprecated since version 28, backward compatibility - use only for earlier versions.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferAnchorOwnership(address)",
      "name": "transferAnchorOwnership",
      "description": "transfers the anchor ownership the new owner needs to accept the transfer.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "new token owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "allows transferring the contract ownership the new owner still needs to accept the transfer can only be called by the contract owner.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "new contract owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferTokenOwnership(address)",
      "name": "transferTokenOwnership",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateRegistry()",
      "name": "updateRegistry",
      "description": "updates to the new contract-registry.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgrade()",
      "name": "upgrade",
      "description": "upgrades the converter to the latest version can only be called by the owner note that the owner needs to call acceptOwnership on the new converter after the upgrade.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "version()",
      "name": "version",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawETH(address)",
      "name": "withdrawETH",
      "description": "withdraws ether can only be called by the owner can only be called if the converter has an ETH reserve.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "address to send the ETH to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawTokens(address,address,uint256)",
      "name": "withdrawTokens",
      "description": "withdraws tokens held by the converter and sends them to an account can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "ERC20 token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "account to receive the new amount.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}