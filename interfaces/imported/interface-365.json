{
  "schema": "../schema.json",
  "tags": [],
  "name": "GasPriceMinimum",
  "description": "Stores and provides gas price minimum for various currencies.",
  "eventDecorators": [
    {
      "signature": "AdjustmentSpeedSet(uint256)",
      "name": "AdjustmentSpeedSet",
      "description": "Emitted when someone unbundles tokens from the bundle using the rakeback contract.",
      "parameterDecorators": [
        {
          "name": "adjustmentSpeed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GasPriceMinimumFloorSet(uint256)",
      "name": "GasPriceMinimumFloorSet",
      "description": "Emitted when someone unbundles tokens from the bundle using the rakeback contract.",
      "parameterDecorators": [
        {
          "name": "gasPriceMinimumFloor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GasPriceMinimumUpdated(uint256)",
      "name": "GasPriceMinimumUpdated",
      "description": "Emitted when someone unbundles tokens from the bundle using the rakeback contract.",
      "parameterDecorators": [
        {
          "name": "gasPriceMinimum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when someone unbundles tokens from the bundle using the rakeback contract.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RegistrySet(address)",
      "name": "RegistrySet",
      "description": "Emitted when someone unbundles tokens from the bundle using the rakeback contract.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TargetDensitySet(uint256)",
      "name": "TargetDensitySet",
      "description": "Emitted when someone unbundles tokens from the bundle using the rakeback contract.",
      "parameterDecorators": [
        {
          "name": "targetDensity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "adjustmentSpeed()",
      "name": "adjustmentSpeed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "gasPriceMinimum()",
      "name": "gasPriceMinimum",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "gasPriceMinimumFloor()",
      "name": "gasPriceMinimumFloor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGasPriceMinimum(address)",
      "name": "getGasPriceMinimum",
      "description": "Retrieve the current gas price minimum for a currency.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The currency the gas price should be in (defaults to gold).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUpdatedGasPriceMinimum(uint256,uint256)",
      "name": "getUpdatedGasPriceMinimum",
      "description": "Calculates the gas price minimum based on governable parameters and block congestion. Calculate using the following formula: oldGasPriceMinimum * (1 + (adjustmentSpeed * (blockDensity - targetDensity))) + 1.",
      "parameterDecorators": [
        {
          "name": "blockGasTotal",
          "description": "The amount of gas in the most recent block.",
          "recommendedTypes": []
        },
        {
          "name": "blockGasLimit",
          "description": "The maxBlockGasLimit of the past block.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVersionNumber()",
      "name": "getVersionNumber",
      "description": "Returns the storage, major, minor, and patch version of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,uint256,uint256,uint256)",
      "name": "initialize",
      "description": "Used in place of the constructor to allow the contract to be upgradable via proxy.",
      "parameterDecorators": [
        {
          "name": "_registryAddress",
          "description": "The address of the registry core smart contract.",
          "recommendedTypes": []
        },
        {
          "name": "_gasPriceMinimumFloor",
          "description": "The lowest value the gas price minimum can be.",
          "recommendedTypes": []
        },
        {
          "name": "_targetDensity",
          "description": "The target gas fullness of blocks, expressed as a fixidity fraction.",
          "recommendedTypes": []
        },
        {
          "name": "_adjustmentSpeed",
          "description": "How quickly the minimum changes, expressed as a fixidity fraction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registry()",
      "name": "registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAdjustmentSpeed(uint256)",
      "name": "setAdjustmentSpeed",
      "description": "Set a multiplier that impacts how quickly gas price minimum is adjusted. Value is expected to be < 1.",
      "parameterDecorators": [
        {
          "name": "_adjustmentSpeed",
          "description": "How quickly the minimum changes, expressed as a fixidity fraction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGasPriceMinimumFloor(uint256)",
      "name": "setGasPriceMinimumFloor",
      "description": "Set the minimum gas price treshold. Value is expected to be > 0.",
      "parameterDecorators": [
        {
          "name": "_gasPriceMinimumFloor",
          "description": "The lowest value the gas price minimum can be.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRegistry(address)",
      "name": "setRegistry",
      "description": "Updates the address pointing to a Registry contract.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "The address of a registry contract for routing to other contracts.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTargetDensity(uint256)",
      "name": "setTargetDensity",
      "description": "Set the block density targeted by the gas price minimum algorithm. Value is expected to be < 1.",
      "parameterDecorators": [
        {
          "name": "_targetDensity",
          "description": "The target gas fullness of blocks, expressed as a fixidity fraction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "targetDensity()",
      "name": "targetDensity",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateGasPriceMinimum(uint256,uint256)",
      "name": "updateGasPriceMinimum",
      "description": "Adjust the gas price minimum based on governable parameters and block congestion.",
      "parameterDecorators": [
        {
          "name": "blockGasTotal",
          "description": "The amount of gas in the most recent block.",
          "recommendedTypes": []
        },
        {
          "name": "blockGasLimit",
          "description": "The maxBlockGasLimit of the past block.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}