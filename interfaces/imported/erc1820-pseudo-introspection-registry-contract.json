{"schema":"../schema.json","tags":[],"name":"ERC1820Registry","description":"ERC1820 Pseudo-introspection Registry Contract. This contract is the official implementation of the ERC1820 Registry.For more details, see https://eips.ethereum.org/EIPS/eip-1820.","eventDecorators":[{"signature":"InterfaceImplementerSet(address,bytes32,address)","name":"InterfaceImplementerSet","description":"Emitted when a new PIE speed is calculated for a market. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"addr","description":"","recommendedTypes":[],"indexed":true},{"name":"interfaceHash","description":"","recommendedTypes":[],"indexed":true},{"name":"implementer","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ManagerChanged(address,address)","name":"ManagerChanged","description":"Emitted when a new PIE speed is calculated for a market. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"addr","description":"","recommendedTypes":[],"indexed":true},{"name":"newManager","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"setInterfaceImplementer(address,bytes32,address)","name":"setInterfaceImplementer","description":"Sets the contract which implements a specific interface for an address. Only the manager defined for that address can set it. (Each address is the manager for itself until it sets a new manager.).","parameterDecorators":[{"name":"_addr","description":"Address for which to set the interface. (If '_addr' is the zero address then 'msg.sender' is assumed.).","recommendedTypes":[]},{"name":"_interfaceHash","description":"Keccak256 hash of the name of the interface as a string. E.g., 'web3.utils.keccak256(\"ERC777TokensRecipient\")' for the 'ERC777TokensRecipient' interface.","recommendedTypes":[]},{"name":"_implementer","description":"Contract address implementing '_interfaceHash' for '_addr'.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getManager(address)","name":"getManager","description":"Get the manager of an address.","parameterDecorators":[{"name":"_addr","description":"Address for which to return the manager.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"setManager(address,address)","name":"setManager","description":"Sets '_newManager' as manager for '_addr'. The new manager will be able to call 'setInterfaceImplementer' for '_addr'.","parameterDecorators":[{"name":"_addr","description":"Address for which to set the new manager.","recommendedTypes":[]},{"name":"_newManager","description":"Address of the new manager for 'addr'. (Pass '0x0' to reset the manager to '_addr'.).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"interfaceHash(string)","name":"interfaceHash","description":"Compute the keccak256 hash of an interface given its name.","parameterDecorators":[{"name":"_interfaceName","description":"Name of the interface.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"updateERC165Cache(address,bytes4)","name":"updateERC165Cache","description":"Updates the cache with whether the contract implements an ERC165 interface or not.","parameterDecorators":[{"name":"_contract","description":"Address of the contract for which to update the cache.","recommendedTypes":[]},{"name":"_interfaceId","description":"ERC165 interface for which to update the cache.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getInterfaceImplementer(address,bytes32)","name":"getInterfaceImplementer","description":"Query if an address implements an interface and through which contract.","parameterDecorators":[{"name":"_addr","description":"Address being queried for the implementer of an interface. (If '_addr' is the zero address then 'msg.sender' is assumed.).","recommendedTypes":[]},{"name":"_interfaceHash","description":"Keccak256 hash of the name of the interface as a string. E.g., 'web3.utils.keccak256(\"ERC777TokensRecipient\")' for the 'ERC777TokensRecipient' interface.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"implementsERC165InterfaceNoCache(address,bytes4)","name":"implementsERC165InterfaceNoCache","description":"Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.","parameterDecorators":[{"name":"_contract","description":"Address of the contract to check.","recommendedTypes":[]},{"name":"_interfaceId","description":"ERC165 interface to check.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"implementsERC165Interface(address,bytes4)","name":"implementsERC165Interface","description":"","parameterDecorators":[{"name":"_contract","description":"Address of the contract to check.","recommendedTypes":[]},{"name":"_interfaceId","description":"ERC165 interface to check.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true}]}