{
  "schema": "../schema.json",
  "tags": [],
  "name": "VRFCoordinator",
  "description": "VRFCoordinator coordinates on-chain verifiable-randomness requestswith off-chain responses.",
  "eventDecorators": [
    {
      "signature": "NewServiceAgreement(bytes32,uint256)",
      "name": "NewServiceAgreement",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "keyHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RandomnessRequest(bytes32,uint256,bytes32,address,uint256,bytes32)",
      "name": "RandomnessRequest",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "keyHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "seed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "jobID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "requestID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RandomnessRequestFulfilled(bytes32,uint256)",
      "name": "RandomnessRequestFulfilled",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "output",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "PRESEED_OFFSET()",
      "name": "PRESEED_OFFSET",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PROOF_LENGTH()",
      "name": "PROOF_LENGTH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PUBLIC_KEY_OFFSET()",
      "name": "PUBLIC_KEY_OFFSET",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "callbacks(bytes32)",
      "name": "callbacks",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "callbackContract",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "randomnessFee",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        },
        {
          "name": "seedAndBlockNum",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fulfillRandomnessRequest(bytes)",
      "name": "fulfillRandomnessRequest",
      "description": "Called by the VOR node to fulfill requests. The structure of _proof corresponds to vrf.MarshaledOnChainResponse,in the node source code. I.e., it is a vrf.MarshaledProof with theseed replaced by the preSeed, followed by the hash of the requestingblock.",
      "parameterDecorators": [
        {
          "name": "_proof",
          "description": "the proof of randomness. Actual random output built from this.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hashOfKey(uint256[2])",
      "name": "hashOfKey",
      "description": "Returns the serviceAgreements key associated with this public key.",
      "parameterDecorators": [
        {
          "name": "_publicKey",
          "description": "the key to return the address for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onTokenTransfer(address,uint256,bytes)",
      "name": "onTokenTransfer",
      "description": "Called by VRF Token.transferAndCall, on successful VRF transfer. To invoke this, use the requestRandomness method in VRFConsumerBase. The VRFCoordinator will call back to the calling contract when theoracle responds, on the method fulfillRandomness. SeeVRFConsumerBase.fulfilRandomness for its signature. Your consumingcontract should inherit from VRFConsumerBase, and implementfulfilRandomness.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "address: who sent the VRF (must be a contract).",
          "recommendedTypes": []
        },
        {
          "name": "_fee",
          "description": "amount of VRF sent.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "abi-encoded call to randomnessRequest.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registerProvingKey(uint256,address,uint256[2],bytes32)",
      "name": "registerProvingKey",
      "description": "Commits calling address to serve randomness.",
      "parameterDecorators": [
        {
          "name": "_fee",
          "description": "minimum VRF payment required to serve randomness.",
          "recommendedTypes": []
        },
        {
          "name": "_oracle",
          "description": "the address of the VOR node with the proving key and job.",
          "recommendedTypes": []
        },
        {
          "name": "_publicProvingKey",
          "description": "public key used to prove randomness.",
          "recommendedTypes": []
        },
        {
          "name": "_jobID",
          "description": "ID of the corresponding VOR job in the oracle's db.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "serviceAgreements(bytes32)",
      "name": "serviceAgreements",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "vRFOracle",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        },
        {
          "name": "jobID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(address,uint256)",
      "name": "withdraw",
      "description": "Allows the oracle operator to withdraw their VRF Token.",
      "parameterDecorators": [
        {
          "name": "_recipient",
          "description": "is the address the funds will be sent to.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "is the amount of VRF Token transferred from the Coordinator contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawableTokens(address)",
      "name": "withdrawableTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}