{
  "schema": "../schema.json",
  "tags": [
    "voting"
  ],
  "name": "VotingPower",
  "description": "VotingPower. Implementation contract for voting power prism proxy Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract The exception to this is the `become` function specified in PrismProxyImplementation This function is called once and is used by this contract to accept its role as the implementation for the prism proxy.",
  "eventDecorators": [
    {
      "signature": "Staked(address,address,uint256,uint256)",
      "name": "Staked",
      "description": "An event that's emitted when a user's staked balance increases.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "votingPower",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VotingPowerChanged(address,uint256,uint256)",
      "name": "VotingPowerChanged",
      "description": "An event that's emitted when an account's vote balance changes.",
      "parameterDecorators": [
        {
          "name": "voter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdrawn(address,address,uint256,uint256)",
      "name": "Withdrawn",
      "description": "An event that's emitted when a user's staked balance decreases.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "votingPower",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addVotingPowerForVestingTokens(address,uint256)",
      "name": "addVotingPowerForVestingTokens",
      "description": "Count vesting ARCH tokens toward voting power for `account`.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The recipient of voting power.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of voting power to add.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "archToken()",
      "name": "archToken",
      "description": "Address of ARCH token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Address of ARCH token.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceOf(address)",
      "name": "balanceOf",
      "description": "Gets the current votes balance for `account`.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address to get votes balance.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The number of current votes for `account`.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceOfAt(address,uint256)",
      "name": "balanceOfAt",
      "description": "Determine the prior number of votes for an account as of a block number. Block number must be a finalized block or else this function will revert to prevent misinformation.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account to check.",
          "recommendedTypes": []
        },
        {
          "name": "blockNumber",
          "description": "The block number to get the vote balance at.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The number of votes the account had as of the given block.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "become(address)",
      "name": "become",
      "description": "Accept invitation to be implementation contract for proxy.",
      "parameterDecorators": [
        {
          "name": "prism",
          "description": "Prism Proxy contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "decimals()",
      "name": "decimals",
      "description": "Decimals used for voting power.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "decimals.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getARCHAmountStaked(address)",
      "name": "getARCHAmountStaked",
      "description": "Get total amount of ARCH tokens staked in contract by `staker`.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "The user with staked ARCH.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "total ARCH amount staked.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getARCHStake(address)",
      "name": "getARCHStake",
      "description": "Get staked amount and voting power from ARCH tokens staked in contract by `staker`.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "The user with staked ARCH.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "total ARCH staked.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmountStaked(address,address)",
      "name": "getAmountStaked",
      "description": "Get total amount of tokens staked in contract by `staker`.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "The user with staked tokens.",
          "recommendedTypes": []
        },
        {
          "name": "stakedToken",
          "description": "The staked token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "total amount staked.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStake(address,address)",
      "name": "getStake",
      "description": "Get total staked amount and voting power from `stakedToken` staked in contract by `staker`.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "The user with staked tokens.",
          "recommendedTypes": []
        },
        {
          "name": "stakedToken",
          "description": "The staked token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "total staked.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address)",
      "name": "initialize",
      "description": "Initialize VotingPower contract. Should be called via VotingPowerPrism before calling anything else.",
      "parameterDecorators": [
        {
          "name": "_archToken",
          "description": "address of ARCH token.",
          "recommendedTypes": []
        },
        {
          "name": "_vestingContract",
          "description": "address of Vesting contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeVotingPowerForClaimedTokens(address,uint256)",
      "name": "removeVotingPowerForClaimedTokens",
      "description": "Remove claimed vesting ARCH tokens from voting power for `account`.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The account with voting power.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of voting power to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stake(uint256)",
      "name": "stake",
      "description": "Stake ARCH tokens to unlock voting power for `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)",
      "name": "stakeWithPermit",
      "description": "Stake ARCH tokens using offchain approvals to unlock voting power.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount to stake.",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "The time at which to expire the signature.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery byte of the signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Half of the ECDSA signature pair.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Half of the ECDSA signature pair.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vestingContract()",
      "name": "vestingContract",
      "description": "Address of vesting contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Address of vesting contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Withdraw staked ARCH tokens, removing voting power for `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}