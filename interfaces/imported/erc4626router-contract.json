{"schema":"../schema.json","tags":[],"name":"ERC4626Router","description":"ERC4626Router contract.","eventDecorators":[],"functionDecorators":[{"signature":"WETH9()","name":"WETH9","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"approve(address,address,uint256)","name":"approve","description":"","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"to","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deposit(address,address,uint256,uint256)","name":"deposit","description":"deposit `amount` to an ERC4626 vault. throws MinSharesError.","parameterDecorators":[{"name":"vault","description":"The ERC4626 vault to deposit assets to.","recommendedTypes":[]},{"name":"to","description":"The destination of ownership shares.","recommendedTypes":[]},{"name":"amount","description":"The amount of assets to deposit to `vault`.","recommendedTypes":[]},{"name":"minSharesOut","description":"The min amount of `vault` shares received by `to`.","recommendedTypes":[]}],"returnDecorators":[{"name":"sharesOut","description":"the amount of shares received by `to`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"depositMax(address,address,uint256)","name":"depositMax","description":"deposit max assets to an ERC4626 vault. throws MinSharesError.","parameterDecorators":[{"name":"vault","description":"The ERC4626 vault to deposit assets to.","recommendedTypes":[]},{"name":"to","description":"The destination of ownership shares.","recommendedTypes":[]},{"name":"minSharesOut","description":"The min amount of `vault` shares received by `to`.","recommendedTypes":[]}],"returnDecorators":[{"name":"sharesOut","description":"the amount of shares received by `to`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"depositToVault(address,address,uint256,uint256)","name":"depositToVault","description":"deposit `amount` to an ERC4626 vault. throws MinSharesError.","parameterDecorators":[{"name":"vault","description":"The ERC4626 vault to deposit assets to.","recommendedTypes":[]},{"name":"to","description":"The destination of ownership shares.","recommendedTypes":[]},{"name":"amount","description":"The amount of assets to deposit to `vault`.","recommendedTypes":[]},{"name":"minSharesOut","description":"The min amount of `vault` shares received by `to`.","recommendedTypes":[]}],"returnDecorators":[{"name":"sharesOut","description":"the amount of shares received by `to`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"mint(address,address,uint256,uint256)","name":"mint","description":"mint `shares` from an ERC4626 vault. throws MaxAmountError.","parameterDecorators":[{"name":"vault","description":"The ERC4626 vault to mint shares from.","recommendedTypes":[]},{"name":"to","description":"The destination of ownership shares.","recommendedTypes":[]},{"name":"shares","description":"The amount of shares to mint from `vault`.","recommendedTypes":[]},{"name":"maxAmountIn","description":"The max amount of assets used to mint.","recommendedTypes":[]}],"returnDecorators":[{"name":"amountIn","description":"the amount of assets used to mint by `to`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"multicall(bytes[])","name":"multicall","description":"Call multiple functions in the current contract and return the data from all of them if they all succeed. The `msg.value` should not be trusted for any method callable from multicall.","parameterDecorators":[{"name":"data","description":"The encoded function data for each of the calls to make to this contract.","recommendedTypes":[]}],"returnDecorators":[{"name":"results","description":"The results from each of the calls passed in via data.","recommendedTypes":[],"solidityType":"bytes[]"}],"emittableEvents":[],"readOnly":false},{"signature":"pullToken(address,uint256,address)","name":"pullToken","description":"","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]},{"name":"recipient","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"redeem(address,address,uint256,uint256)","name":"redeem","description":"redeem `shares` shares from an ERC4626 vault. throws MinAmountError.","parameterDecorators":[{"name":"vault","description":"The ERC4626 vault to redeem shares from.","recommendedTypes":[]},{"name":"to","description":"The destination of assets.","recommendedTypes":[]},{"name":"shares","description":"The amount of shares to redeem from vault.","recommendedTypes":[]},{"name":"minAmountOut","description":"The min amount of assets received by `to`.","recommendedTypes":[]}],"returnDecorators":[{"name":"amountOut","description":"the amount of assets received by `to`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"redeemMax(address,address,uint256)","name":"redeemMax","description":"redeem max shares to an ERC4626 vault. throws MinAmountError.","parameterDecorators":[{"name":"vault","description":"The ERC4626 vault to redeem shares from.","recommendedTypes":[]},{"name":"to","description":"The destination of assets.","recommendedTypes":[]},{"name":"minAmountOut","description":"The min amount of assets received by `to`.","recommendedTypes":[]}],"returnDecorators":[{"name":"amountOut","description":"the amount of assets received by `to`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"redeemToDeposit(address,address,address,uint256,uint256)","name":"redeemToDeposit","description":"redeem `shares` to an ERC4626 vault. throws MinAmountError, MinSharesError.","parameterDecorators":[{"name":"fromVault","description":"The ERC4626 vault to redeem shares from.","recommendedTypes":[]},{"name":"toVault","description":"The ERC4626 vault to deposit assets to.","recommendedTypes":[]},{"name":"to","description":"The destination of ownership shares.","recommendedTypes":[]},{"name":"shares","description":"The amount of shares to redeem from fromVault.","recommendedTypes":[]},{"name":"minSharesOut","description":"The min amount of toVault shares received by `to`.","recommendedTypes":[]}],"returnDecorators":[{"name":"sharesOut","description":"the amount of shares received by `to`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"refundETH()","name":"refundETH","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)","name":"selfPermit","description":"Permits this contract to spend a given token from `msg.sender`. The `owner` is always msg.sender and the `spender` is always address(this).","parameterDecorators":[{"name":"token","description":"The address of the token spent.","recommendedTypes":[]},{"name":"value","description":"The amount that can be spent of token.","recommendedTypes":[]},{"name":"deadline","description":"A timestamp, the current blocktime must be less than or equal to this timestamp.","recommendedTypes":[]},{"name":"v","description":"Must produce valid secp256k1 signature from the holder along with `r` and `s`.","recommendedTypes":[]},{"name":"r","description":"Must produce valid secp256k1 signature from the holder along with `v` and `s`.","recommendedTypes":[]},{"name":"s","description":"Must produce valid secp256k1 signature from the holder along with `r` and `v`.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)","name":"selfPermitAllowed","description":"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter. The `owner` is always msg.sender and the `spender` is always address(this).","parameterDecorators":[{"name":"token","description":"The address of the token spent.","recommendedTypes":[]},{"name":"nonce","description":"The current nonce of the owner.","recommendedTypes":[]},{"name":"expiry","description":"The timestamp at which the permit is no longer valid.","recommendedTypes":[]},{"name":"v","description":"Must produce valid secp256k1 signature from the holder along with `r` and `s`.","recommendedTypes":[]},{"name":"r","description":"Must produce valid secp256k1 signature from the holder along with `v` and `s`.","recommendedTypes":[]},{"name":"s","description":"Must produce valid secp256k1 signature from the holder along with `r` and `v`.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)","name":"selfPermitAllowedIfNecessary","description":"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter. The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.","parameterDecorators":[{"name":"token","description":"The address of the token spent.","recommendedTypes":[]},{"name":"nonce","description":"The current nonce of the owner.","recommendedTypes":[]},{"name":"expiry","description":"The timestamp at which the permit is no longer valid.","recommendedTypes":[]},{"name":"v","description":"Must produce valid secp256k1 signature from the holder along with `r` and `s`.","recommendedTypes":[]},{"name":"r","description":"Must produce valid secp256k1 signature from the holder along with `v` and `s`.","recommendedTypes":[]},{"name":"s","description":"Must produce valid secp256k1 signature from the holder along with `r` and `v`.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)","name":"selfPermitIfNecessary","description":"Permits this contract to spend a given token from `msg.sender`. The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit.","parameterDecorators":[{"name":"token","description":"The address of the token spent.","recommendedTypes":[]},{"name":"value","description":"The amount that can be spent of token.","recommendedTypes":[]},{"name":"deadline","description":"A timestamp, the current blocktime must be less than or equal to this timestamp.","recommendedTypes":[]},{"name":"v","description":"Must produce valid secp256k1 signature from the holder along with `r` and `s`.","recommendedTypes":[]},{"name":"r","description":"Must produce valid secp256k1 signature from the holder along with `v` and `s`.","recommendedTypes":[]},{"name":"s","description":"Must produce valid secp256k1 signature from the holder along with `r` and `v`.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"sweepToken(address,uint256,address)","name":"sweepToken","description":"","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"amountMinimum","description":"","recommendedTypes":[]},{"name":"recipient","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unwrapWETH9(uint256,address)","name":"unwrapWETH9","description":"","parameterDecorators":[{"name":"amountMinimum","description":"","recommendedTypes":[]},{"name":"recipient","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw(address,address,uint256,uint256)","name":"withdraw","description":"withdraw `amount` from an ERC4626 vault. throws MaxSharesError.","parameterDecorators":[{"name":"vault","description":"The ERC4626 vault to withdraw assets from.","recommendedTypes":[]},{"name":"to","description":"The destination of assets.","recommendedTypes":[]},{"name":"amount","description":"The amount of assets to withdraw from vault.","recommendedTypes":[]},{"name":"vault","description":"The ERC4626 vault to withdraw assets from.","recommendedTypes":[]}],"returnDecorators":[{"name":"sharesOut","description":"the amount of shares received by `to`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"withdrawToDeposit(address,address,address,uint256,uint256,uint256)","name":"withdrawToDeposit","description":"withdraw `amount` to an ERC4626 vault. throws MaxSharesError, MinSharesError.","parameterDecorators":[{"name":"fromVault","description":"The ERC4626 vault to withdraw assets from.","recommendedTypes":[]},{"name":"toVault","description":"The ERC4626 vault to deposit assets to.","recommendedTypes":[]},{"name":"to","description":"The destination of ownership shares.","recommendedTypes":[]},{"name":"amount","description":"The amount of assets to withdraw from fromVault.","recommendedTypes":[]},{"name":"maxSharesIn","description":"The max amount of fromVault shares withdrawn by caller.","recommendedTypes":[]},{"name":"minSharesOut","description":"The min amount of toVault shares received by `to`.","recommendedTypes":[]}],"returnDecorators":[{"name":"sharesOut","description":"the amount of shares received by `to`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"wrapWETH9()","name":"wrapWETH9","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}