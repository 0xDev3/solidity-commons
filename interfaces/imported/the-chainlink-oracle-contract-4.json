{
  "schema": "../schema.json",
  "tags": [
    "oracles",
    "chainlink"
  ],
  "name": "Oracle",
  "description": "The Chainlink Oracle contract.",
  "eventDecorators": [
    {
      "signature": "OracleRequest(bytes32,address,bytes32,uint256,address,bytes4,uint256,uint256,bytes)",
      "name": "OracleRequest",
      "description": "",
      "parameterDecorators": [
        {
          "name": "specId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "payment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "callbackAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "callbackFunctionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cancelExpiration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "dataVersion",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CancelOracleRequest(bytes32)",
      "name": "CancelOracleRequest",
      "description": "",
      "parameterDecorators": [
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipRenounced(address)",
      "name": "OwnershipRenounced",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)",
      "name": "oracleRequest",
      "description": "Creates the Chainlink request. Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "The sender of the request.",
          "recommendedTypes": []
        },
        {
          "name": "_payment",
          "description": "The amount of payment given (specified in wei).",
          "recommendedTypes": []
        },
        {
          "name": "_specId",
          "description": "The Job Specification ID.",
          "recommendedTypes": []
        },
        {
          "name": "_callbackAddress",
          "description": "The callback address for the response.",
          "recommendedTypes": []
        },
        {
          "name": "_callbackFunctionId",
          "description": "The callback function ID for the response.",
          "recommendedTypes": []
        },
        {
          "name": "_nonce",
          "description": "The nonce sent by the requester.",
          "recommendedTypes": []
        },
        {
          "name": "_dataVersion",
          "description": "The specified data version.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The CBOR payload of the request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)",
      "name": "fulfillOracleRequest",
      "description": "Called by the Chainlink node to fulfill requests. Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
      "parameterDecorators": [
        {
          "name": "_requestId",
          "description": "The fulfillment request ID that must match the requester's.",
          "recommendedTypes": []
        },
        {
          "name": "_payment",
          "description": "The payment amount that will be released for the oracle (specified in wei).",
          "recommendedTypes": []
        },
        {
          "name": "_callbackAddress",
          "description": "The callback address to call for fulfillment.",
          "recommendedTypes": []
        },
        {
          "name": "_callbackFunctionId",
          "description": "The callback function ID to use for fulfillment.",
          "recommendedTypes": []
        },
        {
          "name": "_expiration",
          "description": "The expiration that the node should respond by before the requester can cancel.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The data to return to the consuming contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "EXPIRY_TIME()",
      "name": "EXPIRY_TIME",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawable()",
      "name": "withdrawable",
      "description": "Displays the amount of LINK that is available for the node operator to withdraw. We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelOracleRequest(bytes32,uint256,bytes4,uint256)",
      "name": "cancelOracleRequest",
      "description": "Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the requester's address. Given params must hash to a commitment stored on the contract in order for the request to be valid Emits CancelOracleRequest event.",
      "parameterDecorators": [
        {
          "name": "_requestId",
          "description": "The request ID.",
          "recommendedTypes": []
        },
        {
          "name": "_payment",
          "description": "The amount of payment given (specified in wei).",
          "recommendedTypes": []
        },
        {
          "name": "_callbackFunc",
          "description": "The requester's specified callback address.",
          "recommendedTypes": []
        },
        {
          "name": "_expiration",
          "description": "The time of the expiration for the request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore. Allows the current owner to relinquish control of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFulfillmentPermission(address,bool)",
      "name": "setFulfillmentPermission",
      "description": "Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.",
      "parameterDecorators": [
        {
          "name": "_node",
          "description": "The address of the Chainlink node.",
          "recommendedTypes": []
        },
        {
          "name": "_allowed",
          "description": "Bool value to determine if the node can fulfill requests.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onTokenTransfer(address,uint256,bytes)",
      "name": "onTokenTransfer",
      "description": "Called when LINK is sent to the contract via `transferAndCall`. The data payload's first 2 words will be overwritten by the `_sender` and `_amount` values to ensure correctness. Calls oracleRequest.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "Address of the sender.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount of LINK sent (specified in wei).",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "Payload of the transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAuthorizationStatus(address)",
      "name": "getAuthorizationStatus",
      "description": "Use this to check if a node is authorized for fulfilling requests.",
      "parameterDecorators": [
        {
          "name": "_node",
          "description": "The address of the Chainlink node.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to transfer control of the contract to a newOwner.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(address,uint256)",
      "name": "withdraw",
      "description": "Allows the node operator to withdraw earned LINK to a given address. The owner of the contract can be another wallet and does not have to be a Chainlink node.",
      "parameterDecorators": [
        {
          "name": "_recipient",
          "description": "The address to send the LINK token to.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount to send (specified in wei).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}