{
  "schema": "../schema.json",
  "tags": [],
  "name": "MarketplaceController",
  "description": "",
  "eventDecorators": [
    {
      "signature": "ScriptResult(address,bytes,bytes,bytes)",
      "name": "ScriptResult",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "executor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "script",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "input",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "returnData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RecoverToVault(address,address,uint256)",
      "name": "RecoverToVault",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "vault",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "makeBuyOrder(address,uint256,uint256)",
      "name": "makeBuyOrder",
      "description": "Make a buy order worth `@tokenAmount(_collateral, _depositAmount)` for atleast `@tokenAmount(self.token(): address, _minReturnAmountAfterFee)`.",
      "parameterDecorators": [
        {
          "name": "_collateral",
          "description": "The address of the collateral token to be spent.",
          "recommendedTypes": []
        },
        {
          "name": "_depositAmount",
          "description": "The amount of collateral token to be deposited.",
          "recommendedTypes": []
        },
        {
          "name": "_minReturnAmountAfterFee",
          "description": "The minimum amount of the returned bonded tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hasInitialized()",
      "name": "hasInitialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateBeneficiary(address)",
      "name": "updateBeneficiary",
      "description": "Update beneficiary to `_beneficiary`.",
      "parameterDecorators": [
        {
          "name": "_beneficiary",
          "description": "The address of the new beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addCollateralToken(address,uint256,uint256,uint32)",
      "name": "addCollateralToken",
      "description": "Add `_collateral.symbol(): string` as a whitelisted collateral token.",
      "parameterDecorators": [
        {
          "name": "_collateral",
          "description": "The address of the collateral token to be whitelisted.",
          "recommendedTypes": []
        },
        {
          "name": "_virtualSupply",
          "description": "The virtual supply to be used for that collateral token [in wei].",
          "recommendedTypes": []
        },
        {
          "name": "_virtualBalance",
          "description": "The virtual balance to be used for that collateral token [in wei].",
          "recommendedTypes": []
        },
        {
          "name": "_reserveRatio",
          "description": "The reserve ratio to be used for that collateral token [in PPM].",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "UPDATE_FORMULA_ROLE()",
      "name": "UPDATE_FORMULA_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "OPEN_TRADING_ROLE()",
      "name": "OPEN_TRADING_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reAddCollateralToken(address,uint256,uint256,uint32)",
      "name": "reAddCollateralToken",
      "description": "Re-add `_collateral.symbol(): string` as a whitelisted collateral token [if it has been un-whitelisted in the past].",
      "parameterDecorators": [
        {
          "name": "_collateral",
          "description": "The address of the collateral token to be whitelisted.",
          "recommendedTypes": []
        },
        {
          "name": "_virtualSupply",
          "description": "The virtual supply to be used for that collateral token [in wei].",
          "recommendedTypes": []
        },
        {
          "name": "_virtualBalance",
          "description": "The virtual balance to be used for that collateral token [in wei].",
          "recommendedTypes": []
        },
        {
          "name": "_reserveRatio",
          "description": "The reserve ratio to be used for that collateral token [in PPM].",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "OPEN_PRESALE_ROLE()",
      "name": "OPEN_PRESALE_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketMaker()",
      "name": "marketMaker",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEVMScriptExecutor(bytes)",
      "name": "getEVMScriptExecutor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_script",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "UPDATE_COLLATERAL_TOKEN_ROLE()",
      "name": "UPDATE_COLLATERAL_TOKEN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRecoveryVault()",
      "name": "getRecoveryVault",
      "description": "Get the recovery vault for the app.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "refund(address,uint256)",
      "name": "refund",
      "description": "Refund `_contributor`'s presale contribution #`_vestedPurchaseId`.",
      "parameterDecorators": [
        {
          "name": "_contributor",
          "description": "The address of the contributor whose presale contribution is to be refunded.",
          "recommendedTypes": []
        },
        {
          "name": "_vestedPurchaseId",
          "description": "The id of the contribution to be refunded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "UPDATE_BENEFICIARY_ROLE()",
      "name": "UPDATE_BENEFICIARY_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "contributionToken()",
      "name": "contributionToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAKE_BUY_ORDER_ROLE()",
      "name": "MAKE_BUY_ORDER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ADD_COLLATERAL_TOKEN_ROLE()",
      "name": "ADD_COLLATERAL_TOKEN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "UPDATE_FEES_ROLE()",
      "name": "UPDATE_FEES_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "closePresale()",
      "name": "closePresale",
      "description": "Close presale and open trading.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateFees(uint256,uint256)",
      "name": "updateFees",
      "description": "Update fees deducted from buy and sell orders to respectively `@formatPct(_buyFeePct)`% and `@formatPct(_sellFeePct)`%.",
      "parameterDecorators": [
        {
          "name": "_buyFeePct",
          "description": "The new fee to be deducted from buy orders [in PCT_BASE].",
          "recommendedTypes": []
        },
        {
          "name": "_sellFeePct",
          "description": "The new fee to be deducted from sell orders [in PCT_BASE].",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "makeSellOrder(address,uint256,uint256)",
      "name": "makeSellOrder",
      "description": "Make a sell order worth `@tokenAmount(self.token(): address, _sellAmount)` for atleast `@tokenAmount(_collateral, _minReturnAmountAfterFee)`.",
      "parameterDecorators": [
        {
          "name": "_collateral",
          "description": "The address of the collateral token to be returned.",
          "recommendedTypes": []
        },
        {
          "name": "_sellAmount",
          "description": "The amount of bonded token to be spent.",
          "recommendedTypes": []
        },
        {
          "name": "_minReturnAmountAfterFee",
          "description": "The minimum amount of the returned collateral tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "allowRecoverability(address)",
      "name": "allowRecoverability",
      "description": "By default deriving from AragonApp makes it recoverable.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Token address that would be recovered.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "appId()",
      "name": "appId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getInitializationBlock()",
      "name": "getInitializationBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "openPresale()",
      "name": "openPresale",
      "description": "Open presale.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "receiveApproval(address,uint256,address,bytes)",
      "name": "receiveApproval",
      "description": "ApproveAndCallFallBack interface conformance.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "Token sender.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Token amount.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "Token that received approval.",
          "recommendedTypes": []
        },
        {
          "name": "_buyOrderData",
          "description": "Data for the below function call makeBuyOrder(address _buyer, address _collateral, uint256 _depositAmount, uint256 _minReturnAmountAfterFee).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeCollateralToken(address)",
      "name": "removeCollateralToken",
      "description": "Remove `_collateral.symbol(): string` as a whitelisted collateral token.",
      "parameterDecorators": [
        {
          "name": "_collateral",
          "description": "The address of the collateral token to be un-whitelisted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferToVault(address)",
      "name": "transferToVault",
      "description": "Send funds to recovery Vault. This contract should never receive funds, but in case it does, this function allows one to recover them.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "Token balance to be sent to recovery vault.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "canPerform(address,bytes32,uint256[])",
      "name": "canPerform",
      "description": "Check whether an action can be performed by a sender for a particular role on this app.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "Sender of the call.",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Role on this app.",
          "recommendedTypes": []
        },
        {
          "name": "_params",
          "description": "Permission params for the role.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "CONTRIBUTE_ROLE()",
      "name": "CONTRIBUTE_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEVMScriptRegistry()",
      "name": "getEVMScriptRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "REMOVE_COLLATERAL_TOKEN_ROLE()",
      "name": "REMOVE_COLLATERAL_TOKEN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address)",
      "name": "initialize",
      "description": "Initialize Aragon Fundraising controller.",
      "parameterDecorators": [
        {
          "name": "_presale",
          "description": "The address of the presale contract.",
          "recommendedTypes": []
        },
        {
          "name": "_marketMaker",
          "description": "The address of the market maker contract.",
          "recommendedTypes": []
        },
        {
          "name": "_reserve",
          "description": "The address of the reserve [pool] contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "contribute(uint256)",
      "name": "contribute",
      "description": "Contribute to the presale up to `@tokenAmount(self.contributionToken(): address, _value)`.",
      "parameterDecorators": [
        {
          "name": "_value",
          "description": "The amount of contribution token to be spent.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "openTrading()",
      "name": "openTrading",
      "description": "Open trading [enabling users to open buy and sell orders].",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reserve()",
      "name": "reserve",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "kernel()",
      "name": "kernel",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateFormula(address)",
      "name": "updateFormula",
      "description": "Update formula to `_formula`.",
      "parameterDecorators": [
        {
          "name": "_formula",
          "description": "The address of the new beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isPetrified()",
      "name": "isPetrified",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAKE_SELL_ORDER_ROLE()",
      "name": "MAKE_SELL_ORDER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceOf(address,address)",
      "name": "balanceOf",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_who",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "token()",
      "name": "token",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "presale()",
      "name": "presale",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateCollateralToken(address,uint256,uint256,uint32)",
      "name": "updateCollateralToken",
      "description": "Update `_collateral.symbol(): string` collateralization settings.",
      "parameterDecorators": [
        {
          "name": "_collateral",
          "description": "The address of the collateral token whose collateralization settings are to be updated.",
          "recommendedTypes": []
        },
        {
          "name": "_virtualSupply",
          "description": "The new virtual supply to be used for that collateral token [in wei].",
          "recommendedTypes": []
        },
        {
          "name": "_virtualBalance",
          "description": "The new virtual balance to be used for that collateral token [in wei].",
          "recommendedTypes": []
        },
        {
          "name": "_reserveRatio",
          "description": "The new reserve ratio to be used for that collateral token [in PPM].",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}