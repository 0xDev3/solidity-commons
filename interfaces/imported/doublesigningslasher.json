{"schema":"../schema.json","tags":[],"name":"DoubleSigningSlasher","description":"","eventDecorators":[{"signature":"DoubleSigningSlashPerformed(address,uint256)","name":"DoubleSigningSlashPerformed","description":"Emitted after bundle swap.","parameterDecorators":[{"name":"validator","description":"","recommendedTypes":[],"indexed":true},{"name":"blockNumber","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted after bundle swap.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RegistrySet(address)","name":"RegistrySet","description":"Emitted after bundle swap.","parameterDecorators":[{"name":"registryAddress","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"SlashingIncentivesSet(uint256,uint256)","name":"SlashingIncentivesSet","description":"Emitted after bundle swap.","parameterDecorators":[{"name":"penalty","description":"","recommendedTypes":[],"indexed":false},{"name":"reward","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"checkForDoubleSigning(address,uint256,bytes,bytes)","name":"checkForDoubleSigning","description":"Given two RLP encoded blocks, calls into precompiles to require that the two block hashes are different, have the same height, have a quorum of signatures, and that `signer` was part of the quorum.","parameterDecorators":[{"name":"signer","description":"The signer to be slashed.","recommendedTypes":[]},{"name":"index","description":"Validator index at the block.","recommendedTypes":[]},{"name":"headerA","description":"First double signed block header.","recommendedTypes":[]},{"name":"headerB","description":"Second double signed block header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"checkProofOfPossession(address,bytes,bytes)","name":"checkProofOfPossession","description":"Checks a BLS proof of possession.","parameterDecorators":[{"name":"sender","description":"The address signed by the BLS key to generate the proof of possession.","recommendedTypes":[]},{"name":"blsKey","description":"The BLS public key that the validator is using for consensus, should pass proof of possession. 48 bytes.","recommendedTypes":[]},{"name":"blsPop","description":"The BLS public key proof-of-possession, which consists of a signature on the account address. 96 bytes.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)","name":"fractionMulExp","description":"calculate a * b^x for fractions a, b to `decimals` precision.","parameterDecorators":[{"name":"aNumerator","description":"Numerator of first fraction.","recommendedTypes":[]},{"name":"aDenominator","description":"Denominator of first fraction.","recommendedTypes":[]},{"name":"bNumerator","description":"Numerator of exponentiated fraction.","recommendedTypes":[]},{"name":"bDenominator","description":"Denominator of exponentiated fraction.","recommendedTypes":[]},{"name":"exponent","description":"exponent to raise b to.","recommendedTypes":[]},{"name":"_decimals","description":"precision.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getBlockNumberFromHeader(bytes)","name":"getBlockNumberFromHeader","description":"Parses block number out of header.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochNumber()","name":"getEpochNumber","description":"Returns the epoch number at a block.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochNumberOfBlock(uint256)","name":"getEpochNumberOfBlock","description":"Returns the epoch number at a block.","parameterDecorators":[{"name":"blockNumber","description":"Block number where epoch number is calculated.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochSize()","name":"getEpochSize","description":"Returns the current epoch size in blocks.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getParentSealBitmap(uint256)","name":"getParentSealBitmap","description":"Gets the parent seal bitmap from the header at the given block number.","parameterDecorators":[{"name":"blockNumber","description":"Block number to retrieve. Must be within 4 epochs of the current number.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getVerifiedSealBitmapFromHeader(bytes)","name":"getVerifiedSealBitmapFromHeader","description":"Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header. If the parent hash is not in the blockchain, verification fails.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getVersionNumber()","name":"getVersionNumber","description":"Returns the storage, major, minor, and patch version of the contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"groupMembershipAtBlock(address,uint256,uint256)","name":"groupMembershipAtBlock","description":"Returns the group to be slashed.","parameterDecorators":[{"name":"validator","description":"Validator that was slashed.","recommendedTypes":[]},{"name":"blockNumber","description":"Block number associated with slashing.","recommendedTypes":[]},{"name":"groupMembershipHistoryIndex","description":"Index used for history lookup.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"hashHeader(bytes)","name":"hashHeader","description":"Computes hash of header.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,uint256,uint256)","name":"initialize","description":"Used in place of the constructor to allow the contract to be upgradable via proxy.","parameterDecorators":[{"name":"registryAddress","description":"The address of the registry core smart contract.","recommendedTypes":[]},{"name":"_penalty","description":"Penalty for the slashed signer.","recommendedTypes":[]},{"name":"_reward","description":"Reward that the observer gets.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialized()","name":"initialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"minQuorumSize(uint256)","name":"minQuorumSize","description":"Returns the minimum number of required signers for a given block number. Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3)).","parameterDecorators":[{"name":"blockNumber","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"minQuorumSizeInCurrentSet()","name":"minQuorumSizeInCurrentSet","description":"Computes byzantine quorum from current validator set size.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"numberValidatorsInCurrentSet()","name":"numberValidatorsInCurrentSet","description":"Gets the size of the current elected validator set.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"numberValidatorsInSet(uint256)","name":"numberValidatorsInSet","description":"Gets the size of the validator set that must sign the given block number.","parameterDecorators":[{"name":"blockNumber","description":"Block number to retrieve the validator set from.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"registry()","name":"registry","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRegistry(address)","name":"setRegistry","description":"Updates the address pointing to a Registry contract.","parameterDecorators":[{"name":"registryAddress","description":"The address of a registry contract for routing to other contracts.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSlashingIncentives(uint256,uint256)","name":"setSlashingIncentives","description":"Sets slashing incentives.","parameterDecorators":[{"name":"penalty","description":"Penalty for the slashed signer.","recommendedTypes":[]},{"name":"reward","description":"Reward that the observer gets.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"slash(address,uint256,bytes,bytes,uint256,address[],address[],uint256[],address[],address[],uint256[])","name":"slash","description":"Requires that `eval` returns true and that this evidence has not already been used to slash `signer`. If so, fetches the `account` associated with `signer` and the group that `signer` was a member of during the corresponding epoch. Then, calls `LockedGold.slash` on both the validator and group accounts. Calls `Validators.removeSlashedMember` to remove the validator from its current group if it is a member of one. Finally, stores that hash(signer, blockNumber) has been slashed.","parameterDecorators":[{"name":"signer","description":"The signer to be slashed.","recommendedTypes":[]},{"name":"index","description":"Validator index at the block.","recommendedTypes":[]},{"name":"headerA","description":"First double signed block header.","recommendedTypes":[]},{"name":"headerB","description":"Second double signed block header.","recommendedTypes":[]},{"name":"groupMembershipHistoryIndex","description":"Group membership index from where the group should be found.","recommendedTypes":[]},{"name":"validatorElectionLessers","description":"Lesser pointers for validator slashing.","recommendedTypes":[]},{"name":"validatorElectionGreaters","description":"Greater pointers for validator slashing.","recommendedTypes":[]},{"name":"validatorElectionIndices","description":"Vote indices for validator slashing.","recommendedTypes":[]},{"name":"groupElectionLessers","description":"Lesser pointers for group slashing.","recommendedTypes":[]},{"name":"groupElectionGreaters","description":"Greater pointers for group slashing.","recommendedTypes":[]},{"name":"groupElectionIndices","description":"Vote indices for group slashing.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"slashingIncentives()","name":"slashingIncentives","description":"","parameterDecorators":[],"returnDecorators":[{"name":"penalty","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"reward","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"validatorSignerAddressFromCurrentSet(uint256)","name":"validatorSignerAddressFromCurrentSet","description":"Gets a validator address from the current validator set.","parameterDecorators":[{"name":"index","description":"Index of requested validator in the validator set.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"validatorSignerAddressFromSet(uint256,uint256)","name":"validatorSignerAddressFromSet","description":"Gets a validator address from the validator set at the given block number.","parameterDecorators":[{"name":"index","description":"Index of requested validator in the validator set.","recommendedTypes":[]},{"name":"blockNumber","description":"Block number to retrieve the validator set from.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}