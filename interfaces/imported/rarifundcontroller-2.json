{
  "schema": "../schema.json",
  "tags": [
    "liquidity"
  ],
  "name": "RariFundController",
  "description": "RariFundController. This contract handles deposits to and withdrawals from the liquidity pools that power the Rari Stable Pool as well as currency exchanges via 0x.",
  "eventDecorators": [
    {
      "signature": "CurrencyTrade(string,string,uint256,uint256,uint256,uint256,uint8)",
      "name": "CurrencyTrade",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "inputCurrencyCode",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "outputCurrencyCode",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "inputAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "inputAmountUsd",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "outputAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "outputAmountUsd",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "exchange",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "FundDisabled()",
      "name": "FundDisabled",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": []
    },
    {
      "signature": "FundEnabled()",
      "name": "FundEnabled",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": []
    },
    {
      "signature": "FundManagerSet(address)",
      "name": "FundManagerSet",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "newAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundRebalancerSet(address)",
      "name": "FundRebalancerSet",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "newAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PoolAllocation(uint8,uint8,string,uint256)",
      "name": "PoolAllocation",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "RigelTokenAmount",
          "description": "amount of Rigel tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "IS_RARI_FUND_CONTROLLER()",
      "name": "IS_RARI_FUND_CONTROLLER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_getPoolBalance(uint8,string)",
      "name": "_getPoolBalance",
      "description": "Returns the fund controller's balance of the specified currency in the specified pool (without checking `_poolsWithFunds` first).Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `CompoundPoolController.getBalance`) potentially modifies the state.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "The index of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "currencyCode",
          "description": "The currency code of the token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveTo0x(address,uint256)",
      "name": "approveTo0x",
      "description": "Approves tokens to 0x without spending gas on every deposit. Note that this function is vulnerable to the allowance double-spend exploit, as with the `approve` functions of the ERC20 contracts themselves. If you are concerned and setting exact allowances, make sure to set allowance to 0 on the client side before setting an allowance greater than 0.",
      "parameterDecorators": [
        {
          "name": "erc20Contract",
          "description": "The ERC20 contract address of the token to be approved.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens to be approved.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveToMUsd(string,uint256)",
      "name": "approveToMUsd",
      "description": "Approves tokens to the mUSD token contract without spending gas on every deposit. Note that this function is vulnerable to the allowance double-spend exploit, as with the `approve` functions of the ERC20 contracts themselves. If you are concerned and setting exact allowances, make sure to set allowance to 0 on the client side before setting an allowance greater than 0.",
      "parameterDecorators": [
        {
          "name": "currencyCode",
          "description": "The currency code of the token to be approved.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of the specified token to approve to the mUSD token contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveToPool(uint8,string,uint256)",
      "name": "approveToPool",
      "description": "Approves tokens to the specified pool without spending gas on every deposit. Note that this function is vulnerable to the allowance double-spend exploit, as with the `approve` functions of the ERC20 contracts themselves. If you are concerned and setting exact allowances, make sure to set allowance to 0 on the client side before setting an allowance greater than 0.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "The index of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "currencyCode",
          "description": "The currency code of the token to be approved.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens to be approved.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositToPool(uint8,string,uint256)",
      "name": "depositToPool",
      "description": "Deposits funds to the specified pool.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "The index of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "currencyCode",
          "description": "The currency code of the token to be deposited.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens to be deposited.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disableFund()",
      "name": "disableFund",
      "description": "Disables primary functionality of this RariFundController so contract(s) can be upgraded.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "enableFund()",
      "name": "enableFund",
      "description": "Enables primary functionality of this RariFundController once contract(s) are upgraded.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getDydxBalances()",
      "name": "getDydxBalances",
      "description": "Returns the balances of all currencies supported by dYdX.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPoolBalance(uint8,string)",
      "name": "getPoolBalance",
      "description": "Returns the fund controller's balance of the specified currency in the specified pool (checking `_poolsWithFunds` first to save gas).Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `CompoundPoolController.getBalance`) potentially modifies the state.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "The index of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "currencyCode",
          "description": "The currency code of the token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getPoolsByCurrency(string)",
      "name": "getPoolsByCurrency",
      "description": "Returns `_poolsByCurrency[currencyCode]`. Used by `RariFundProxy.getRawFundBalancesAndPrices`.",
      "parameterDecorators": [
        {
          "name": "currencyCode",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasCurrencyInPool(uint8,string)",
      "name": "hasCurrencyInPool",
      "description": "Return a boolean indicating if the fund controller has funds in `currencyCode` in `pool`.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "The index of the pool to check.",
          "recommendedTypes": []
        },
        {
          "name": "currencyCode",
          "description": "The currency code of the token to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initializes the contract setting the deployer as the initial owner.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketSell0xOrdersFillOrKill(string,string,tuple(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],uint256)",
      "name": "marketSell0xOrdersFillOrKill",
      "description": "Market sell to 0x exchange orders (reverting if `takerAssetFillAmount` is not filled or the 24-hour slippage limit is surpassed). We should be able to make this function external and use calldata for all parameters, but Solidity does not support calldata structs (https://github.com/ethereum/solidity/issues/5479).",
      "parameterDecorators": [
        {
          "name": "inputCurrencyCode",
          "description": "The currency code of the token to be sold.",
          "recommendedTypes": []
        },
        {
          "name": "outputCurrencyCode",
          "description": "The currency code of the token to be bought.",
          "recommendedTypes": []
        },
        {
          "name": "orders",
          "description": "The limit orders to be filled in ascending order of price.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "makerAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "takerAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "feeRecipientAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "senderAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "makerAssetAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "takerAssetAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "makerFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "takerFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "expirationTimeSeconds",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "salt",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "makerAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "takerAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "makerFeeAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "takerFeeAssetData",
              "description": "",
              "type": "bytes"
            }
          ]
        },
        {
          "name": "signatures",
          "description": "The signatures for the orders.",
          "recommendedTypes": []
        },
        {
          "name": "takerAssetFillAmount",
          "description": "The amount of the taker asset to sell (excluding taker fees).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rariFundManager()",
      "name": "rariFundManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAaveReferralCode(uint16)",
      "name": "setAaveReferralCode",
      "description": "Sets the referral code for Aave deposits.",
      "parameterDecorators": [
        {
          "name": "referralCode",
          "description": "The referral code.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDailyLossRateLimit(uint256)",
      "name": "setDailyLossRateLimit",
      "description": "Sets or upgrades the daily limit on 0x exchange order loss over raw total fund balance.",
      "parameterDecorators": [
        {
          "name": "limit",
          "description": "The daily limit on 0x exchange order loss over raw total fund balance (scaled by 1e18).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFundManager(address)",
      "name": "setFundManager",
      "description": "Sets or upgrades the RariFundManager of the RariFundController.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "The address of the new RariFundManager contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFundRebalancer(address)",
      "name": "setFundRebalancer",
      "description": "Sets or upgrades the rebalancer of the RariFundController.",
      "parameterDecorators": [
        {
          "name": "newAddress",
          "description": "The Ethereum address of the new rebalancer server.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapMStable(string,string,uint256)",
      "name": "swapMStable",
      "description": "Swaps tokens via mStable mUSD.",
      "parameterDecorators": [
        {
          "name": "inputCurrencyCode",
          "description": "The currency code of the input token to be sold.",
          "recommendedTypes": []
        },
        {
          "name": "outputCurrencyCode",
          "description": "The currency code of the output token to be bought.",
          "recommendedTypes": []
        },
        {
          "name": "inputAmount",
          "description": "The amount of input tokens to be sold.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeFundController(address)",
      "name": "upgradeFundController",
      "description": "Sets or upgrades RariFundController by withdrawing all tokens from all pools and forwarding them from the old to the new.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "The address of the new RariFundController contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeFundController(address,address)",
      "name": "upgradeFundController",
      "description": "Sets or upgrades RariFundController by forwarding tokens from the old to the new.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "The address of the new RariFundController contract.",
          "recommendedTypes": []
        },
        {
          "name": "erc20Contract",
          "description": "The ERC20 contract address of the token to forward.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAllFromPool(uint8,string)",
      "name": "withdrawAllFromPool",
      "description": "Withdraws all funds from the specified pool.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "The index of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "currencyCode",
          "description": "The ERC20 contract of the token to be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAllFromPoolOnUpgrade(uint8,string)",
      "name": "withdrawAllFromPoolOnUpgrade",
      "description": "Withdraws all funds from the specified pool (without requiring the fund to be enabled).",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "The index of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "currencyCode",
          "description": "The ERC20 contract of the token to be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawFromPool(uint8,string,uint256)",
      "name": "withdrawFromPool",
      "description": "Withdraws funds from the specified pool.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "The index of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "currencyCode",
          "description": "The currency code of the token to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens to be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawFromPoolOptimized(uint8,string,uint256,bool)",
      "name": "withdrawFromPoolOptimized",
      "description": "Withdraws funds from the specified pool (with optimizations based on the `all` parameter). If we already know all funds are being withdrawn, we won't have to check again here in this function. If withdrawing all funds, we choose _withdrawFromPool or _withdrawAllFromPool based on estimated gas usage. The value of `all` is trusted because `msg.sender` is always RariFundManager.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "The index of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "currencyCode",
          "description": "The currency code of the token to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "all",
          "description": "Boolean indicating if all funds are being withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}