{"schema":"../schema.json","tags":["tokens"],"name":"CrateKeyFullSale","description":"CrateKeyFullSale A FixedPricesSale contract implementation that handles the full-price (non-discounted) purchase of ERC20 F1DTCrateKey tokens.","eventDecorators":[{"signature":"MagicValues(bytes32[],bytes32[])","name":"MagicValues","description":"","parameterDecorators":[{"name":"names","description":"","recommendedTypes":[],"indexed":false},{"name":"values","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Paused(address)","name":"Paused","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"PayoutWalletSet(address)","name":"PayoutWalletSet","description":"","parameterDecorators":[{"name":"payoutWallet_","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Purchase(address,address,address,bytes32,uint256,bytes,uint256,bytes32[],bytes32[],bytes32[])","name":"Purchase","description":"","parameterDecorators":[{"name":"purchaser","description":"","recommendedTypes":[],"indexed":true},{"name":"recipient","description":"","recommendedTypes":[],"indexed":false},{"name":"token","description":"","recommendedTypes":[],"indexed":true},{"name":"sku","description":"","recommendedTypes":[],"indexed":true},{"name":"quantity","description":"","recommendedTypes":[],"indexed":false},{"name":"userData","description":"","recommendedTypes":[],"indexed":false},{"name":"totalPrice","description":"","recommendedTypes":[],"indexed":false},{"name":"pricingData","description":"","recommendedTypes":[],"indexed":false},{"name":"paymentData","description":"","recommendedTypes":[],"indexed":false},{"name":"deliveryData","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SkuCreation(bytes32,uint256,uint256,address)","name":"SkuCreation","description":"","parameterDecorators":[{"name":"sku","description":"","recommendedTypes":[],"indexed":false},{"name":"totalSupply","description":"","recommendedTypes":[],"indexed":false},{"name":"maxQuantityPerPurchase","description":"","recommendedTypes":[],"indexed":false},{"name":"notificationsReceiver","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SkuPricingUpdate(bytes32,address[],uint256[])","name":"SkuPricingUpdate","description":"","parameterDecorators":[{"name":"sku","description":"","recommendedTypes":[],"indexed":true},{"name":"tokens","description":"","recommendedTypes":[],"indexed":false},{"name":"prices","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Started(address)","name":"Started","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unpaused(address)","name":"Unpaused","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"SUPPLY_UNLIMITED()","name":"SUPPLY_UNLIMITED","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"TOKEN_ETH()","name":"TOKEN_ETH","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"crateKeys(bytes32)","name":"crateKeys","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"createCrateKeySku(bytes32,uint256,uint256,address)","name":"createCrateKeySku","description":"Creates an SKU and associates the specified ERC20 F1DTCrateKey token contract with it. Reverts if called by any other than the contract owner.Reverts if `totalSupply` is zero.Reverts if `sku` already exists.Reverts if the update results in too many SKUs.Reverts if the `totalSupply` is SUPPLY_UNLIMITED.Reverts if the `crateKey` is the zero address.Emits the `SkuCreation` event.","parameterDecorators":[{"name":"sku","description":"The SKU identifier.","recommendedTypes":[]},{"name":"totalSupply","description":"The initial total supply.","recommendedTypes":[]},{"name":"maxQuantityPerPurchase","description":"The maximum allowed quantity for a single purchase.","recommendedTypes":[]},{"name":"crateKey","description":"The ERC20 F1DTCrateKey token contract to bind with the SKU.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"createSku(bytes32,uint256,uint256,address)","name":"createSku","description":"Creates an SKU. Deprecated. Please use `createCrateKeySku(bytes32, uint256, uint256, IF1DTCrateKeyFull)` for creating inventory SKUs.Reverts if called.","parameterDecorators":[{"name":"param0","description":"*notificationsReceiver* The purchase notifications receiver contract address. If set to the zero address, the notification is not enabled.","recommendedTypes":[]},{"name":"param1","description":"*notificationsReceiver* The purchase notifications receiver contract address. If set to the zero address, the notification is not enabled.","recommendedTypes":[]},{"name":"param2","description":"*notificationsReceiver* The purchase notifications receiver contract address. If set to the zero address, the notification is not enabled.","recommendedTypes":[]},{"name":"param3","description":"*notificationsReceiver* The purchase notifications receiver contract address. If set to the zero address, the notification is not enabled.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"estimatePurchase(address,address,bytes32,uint256,bytes)","name":"estimatePurchase","description":"Estimates the computed final total amount to pay for a purchase, including any potential discount. This function MUST compute the same price as `purchaseFor` would in identical conditions (same arguments, same point in time).If an implementer contract uses the `priceInfo` field, it SHOULD document how to interpret the info.Reverts if the sale has not started.Reverts if the sale is paused.Reverts if `token` is the zero address.Reverts if `quantity` is zero.Reverts if `quantity` is greater than the maximum purchase quantity.Reverts if `quantity` is greater than the remaining supply.Reverts if `sku` does not exist.Reverts if `sku` exists but does not have a price set for `token`.","parameterDecorators":[{"name":"recipient","description":"The recipient of the purchase used to calculate the total price amount.","recommendedTypes":[]},{"name":"token","description":"The payment token used to calculate the total price amount.","recommendedTypes":[]},{"name":"sku","description":"The identifier of the SKU used to calculate the total price amount.","recommendedTypes":[]},{"name":"quantity","description":"The quantity used to calculate the total price amount.","recommendedTypes":[]},{"name":"userData","description":"Optional extra user input data.","recommendedTypes":[]}],"returnDecorators":[{"name":"totalPrice","description":"The computed total price.","recommendedTypes":[],"solidityType":"uint256"},{"name":"priceInfo","description":"Implementation-specific extra price information, such as details about potential discounts applied.","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getSkuInfo(bytes32)","name":"getSkuInfo","description":"Returns the information relative to a SKU. WARNING: it is the responsibility of the implementer to ensure that the number of payment tokens is bounded, so that this function does not run out of gas.Reverts if `sku` does not exist.","parameterDecorators":[{"name":"sku","description":"The SKU identifier.","recommendedTypes":[]}],"returnDecorators":[{"name":"totalSupply","description":"The initial total supply for sale.","recommendedTypes":[],"solidityType":"uint256"},{"name":"remainingSupply","description":"The remaining supply for sale.","recommendedTypes":[],"solidityType":"uint256"},{"name":"maxQuantityPerPurchase","description":"The maximum allowed quantity for a single purchase.","recommendedTypes":[],"solidityType":"uint256"},{"name":"notificationsReceiver","description":"The address of a contract on which to call the `onPurchaseNotificationReceived` function.","recommendedTypes":[],"solidityType":"address"},{"name":"tokens","description":"The list of supported payment tokens.","recommendedTypes":[],"solidityType":"address[]"},{"name":"prices","description":"The list of associated prices for each of the `tokens`.","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getSkus()","name":"getSkus","description":"Returns the list of created SKU identifiers.","parameterDecorators":[],"returnDecorators":[{"name":"skus","description":"the list of created SKU identifiers.","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pause()","name":"pause","description":"Pauses the contract. Emits the `Paused` event.Reverts if called by any other than the contract owner.Reverts if the contract has not been started yet.Reverts if the contract is already paused.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"paused()","name":"paused","description":"Returns true if the contract is paused, and false otherwise.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"payoutWallet()","name":"payoutWallet","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"purchaseFor(address,address,bytes32,uint256,bytes)","name":"purchaseFor","description":"Performs a purchase. Reverts if the sale has not started.Reverts if the sale is paused.Reverts if `token` is the address zero.Reverts if `quantity` is zero.Reverts if `quantity` is greater than the maximum purchase quantity.Reverts if `quantity` is greater than the remaining supply.Reverts if `sku` does not exist.Reverts if `sku` exists but does not have a price set for `token`.Emits the Purchase event.","parameterDecorators":[{"name":"recipient","description":"The recipient of the purchase.","recommendedTypes":[]},{"name":"token","description":"The token to use as the payment currency.","recommendedTypes":[]},{"name":"sku","description":"The identifier of the SKU to purchase.","recommendedTypes":[]},{"name":"quantity","description":"The quantity to purchase.","recommendedTypes":[]},{"name":"userData","description":"Optional extra user input data.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPayoutWallet(address)","name":"setPayoutWallet","description":"","parameterDecorators":[{"name":"payoutWallet_","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"start()","name":"start","description":"Actvates, or 'starts', the contract. Emits the `Started` event.Emits the `Unpaused` event.Reverts if called by any other than the contract owner.Reverts if the contract has already been started.Reverts if the contract is not paused.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"startedAt()","name":"startedAt","description":"Returns the timestamp when the contract entered the started state.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The timestamp when the contract entered the started state.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unpause()","name":"unpause","description":"Resumes the contract. Emits the `Unpaused` event.Reverts if called by any other than the contract owner.Reverts if the contract has not been started yet.Reverts if the contract is not paused.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateSkuPricing(bytes32,address[],uint256[])","name":"updateSkuPricing","description":"Sets the token prices for the specified product SKU. Reverts if called by any other than the contract owner.Reverts if `tokens` and `prices` have different lengths.Reverts if `sku` does not exist.Reverts if one of the `tokens` is the zero address.Reverts if the update results in too many tokens for the SKU.Emits the `SkuPricingUpdate` event.","parameterDecorators":[{"name":"sku","description":"The identifier of the SKU.","recommendedTypes":[]},{"name":"tokens","description":"The list of payment tokens to update. If empty, disable all the existing payment tokens.","recommendedTypes":[]},{"name":"prices","description":"The list of prices to apply for each payment token. Zero price values are used to disable a payment token.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}