{"schema":"../schema.json","tags":[],"name":"LPStaking","description":"","eventDecorators":[{"signature":"Log(string,uint256)","name":"Log","description":"EVENTS.","parameterDecorators":[{"name":"message","description":"","recommendedTypes":[],"indexed":false},{"name":"value","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RewardClaimed(address,uint256)","name":"RewardClaimed","description":"EVENTS.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"DAI()","name":"DAI","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"FACTORY()","name":"FACTORY","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"ROUTER()","name":"ROUTER","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"balances(address)","name":"balances","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"dai()","name":"dai","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"earned(address)","name":"earned","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"factory()","name":"factory","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getAmount(uint256,uint256)","name":"getAmount","description":"an auxiliar function to get the optimal swap amount to add liquidity. according to the Uniswap´s whitepaper and it´s maths, regarding to the swaps and fees the formula to calculate the swap before adding liquidity is s = (sqrt(((2-f)r)^2+4(1-f)ar)-(2-f)r)/(2(1-f)) where s = optimal swap amount r = amount of reserve of token a a = amount of token a the user has f = swap fee percent With the actual fee of 0.3% or 3/1000 we have that the final result is the one inside the function.","parameterDecorators":[{"name":"r","description":"amount of reserve of token a.","recommendedTypes":[]},{"name":"a","description":"amount of token a the user has.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getReward()","name":"getReward","description":"Function that allows a user to withdraw his Reward tokens.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialize(address,address,address,address,address)","name":"initialize","description":"Function initializer of this upgradeable contract. This address is the required by UniSwap for swaps between tokens and ETH.","parameterDecorators":[{"name":"_ROUTER","description":"is the address of the Uniswap Router V2.","recommendedTypes":[]},{"name":"_FACTORY","description":"is the address of the Uniswap Factory V2.","recommendedTypes":[]},{"name":"_DAI","description":"is the address of the DAI Token.","recommendedTypes":[]},{"name":"_stakingToken","description":"","recommendedTypes":[]},{"name":"_rewardsToken","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"lastUpdateTime()","name":"lastUpdateTime","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rewardPerToken()","name":"rewardPerToken","description":"functions to calculate rewards and earnings.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rewardPerTokenStored()","name":"rewardPerTokenStored","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rewardRate()","name":"rewardRate","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rewards(address)","name":"rewards","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rewardsToken()","name":"rewardsToken","description":"VARIABLES.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"router()","name":"router","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"stakeLPWithPermit(uint256,bytes)","name":"stakeLPWithPermit","description":"Function used to stake LP tokens already owned by the user. This function doesn't require the user to do an Approval transaction beforeThis function require a signature by the user in the off-chain.","parameterDecorators":[{"name":"_amount","description":"is a uint which is the amount of LP Tokens to be staked.","recommendedTypes":[]},{"name":"sig","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"stakeLPWithoutPermit(uint256)","name":"stakeLPWithoutPermit","description":"Function used to stake LP tokens already owned by the user. This function require the user to do an Approval transaction before.","parameterDecorators":[{"name":"_amount","description":"is a uint which is the amount of LP Tokens to be staked.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"stakingToken()","name":"stakingToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"swapAddLiquidityAndReturnLP()","name":"swapAddLiquidityAndReturnLP","description":"the main function to swap and add liquiditythis function returns the LP Tokens to the msg sender. only adds liquidity to the ETH / DAI pool.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"swapAddLiquidityAndStakeLP()","name":"swapAddLiquidityAndStakeLP","description":"the main function to swap and add liquiditythis function returns the LP Tokens to the msg sender. only adds liquidity to the ETH / DAI pool.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"totalSupply()","name":"totalSupply","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"userRewardPerTokenPaid(address)","name":"userRewardPerTokenPaid","description":"MAPPINGS.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(uint256)","name":"withdraw","description":"Function that allows a user to withdraw his LP Tokens staked in the contract.","parameterDecorators":[{"name":"_amount","description":"is a uint with the amount of LP Tokens to be withdrawed.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}