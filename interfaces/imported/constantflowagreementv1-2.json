{"schema":"../schema.json","tags":[],"name":"ConstantFlowAgreementV1","description":"The ConstantFlowAgreementV1 implementation NOTE: - Please read IConstantFlowAgreementV1 for implementation notes. - For some deeper technical notes, please visit protocol-monorepo wiki area.","eventDecorators":[{"signature":"CodeUpdated(bytes32,address)","name":"CodeUpdated","description":"An event emitted when a vote has been cast on a proposal.","parameterDecorators":[{"name":"uuid","description":"","recommendedTypes":[],"indexed":false},{"name":"codeAddress","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"FlowUpdated(address,address,address,int96,int256,int256,bytes)","name":"FlowUpdated","description":"An event emitted when a vote has been cast on a proposal.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true},{"name":"receiver","description":"","recommendedTypes":[],"indexed":true},{"name":"flowRate","description":"","recommendedTypes":[],"indexed":false},{"name":"totalSenderFlowRate","description":"","recommendedTypes":[],"indexed":false},{"name":"totalReceiverFlowRate","description":"","recommendedTypes":[],"indexed":false},{"name":"userData","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"agreementType()","name":"agreementType","description":"ISuperAgreement.agreementType implementation.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"createFlow(address,address,int96,bytes)","name":"createFlow","description":"IConstantFlowAgreementV1.createFlow implementation.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"receiver","description":"","recommendedTypes":[]},{"name":"flowRate","description":"","recommendedTypes":[]},{"name":"ctx","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"newCtx","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":false},{"signature":"deleteFlow(address,address,address,bytes)","name":"deleteFlow","description":"IConstantFlowAgreementV1.deleteFlow implementation.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"sender","description":"","recommendedTypes":[]},{"name":"receiver","description":"","recommendedTypes":[]},{"name":"ctx","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"newCtx","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":false},{"signature":"getAccountFlowInfo(address,address)","name":"getAccountFlowInfo","description":"IConstantFlowAgreementV1.getAccountFlowInfo implementation.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"timestamp","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"flowRate","description":"","recommendedTypes":[],"solidityType":"int96"},{"name":"deposit","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"owedDeposit","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getCodeAddress()","name":"getCodeAddress","description":"Get current implementation code address.","parameterDecorators":[],"returnDecorators":[{"name":"codeAddress","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getDepositRequiredForFlowRate(address,int96)","name":"getDepositRequiredForFlowRate","description":"Get the deposit required for creating the flow.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"flowRate","description":"Flow rate to be tested NOTE: - if calculated deposit (flowRate * liquidationPeriod) is less than the minimum deposit, we use the minimum deposit otherwise we use the calculated deposit.","recommendedTypes":[]}],"returnDecorators":[{"name":"deposit","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getFlow(address,address,address)","name":"getFlow","description":"IConstantFlowAgreementV1.getFlow implementation.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"sender","description":"","recommendedTypes":[]},{"name":"receiver","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"timestamp","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"flowRate","description":"","recommendedTypes":[],"solidityType":"int96"},{"name":"deposit","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"owedDeposit","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getFlowByID(address,bytes32)","name":"getFlowByID","description":"IConstantFlowAgreementV1.getFlow implementation.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"flowId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"timestamp","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"flowRate","description":"","recommendedTypes":[],"solidityType":"int96"},{"name":"deposit","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"owedDeposit","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getMaximumFlowRateFromDeposit(address,uint256)","name":"getMaximumFlowRateFromDeposit","description":"IConstantFlowAgreementV1.createFlow implementation.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"deposit","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"flowRate","description":"","recommendedTypes":[],"solidityType":"int96"}],"emittableEvents":[],"readOnly":true},{"signature":"getNetFlow(address,address)","name":"getNetFlow","description":"IConstantFlowAgreementV1.getNetFlow implementation.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"flowRate","description":"","recommendedTypes":[],"solidityType":"int96"}],"emittableEvents":[],"readOnly":true},{"signature":"isPatricianPeriod(address,address,uint256)","name":"isPatricianPeriod","description":"Returns whether it is the patrician period based on the inputted timestamp.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]},{"name":"timestamp","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isPatricianPeriodNow(address,address)","name":"isPatricianPeriodNow","description":"Returns whether it is the patrician period based on the current timestamp (block.timestamp).","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"isCurrentlyPatricianPeriod","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"timestamp","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"proxiableUUID()","name":"proxiableUUID","description":"Proxiable UUID marker function, this would help to avoid wrong logic contract to be used for upgrading. NOTE: The semantics of the UUID deviates from the actual UUPS standard, where it is equivalent of _IMPLEMENTATION_SLOT.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"realtimeBalanceOf(address,address,uint256)","name":"realtimeBalanceOf","description":"ISuperAgreement.realtimeBalanceOf implementation.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]},{"name":"time","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"dynamicBalance","description":"","recommendedTypes":[],"solidityType":"int256"},{"name":"deposit","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"owedDeposit","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"updateCode(address)","name":"updateCode","description":"","parameterDecorators":[{"name":"newAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateFlow(address,address,int96,bytes)","name":"updateFlow","description":"IConstantFlowAgreementV1.updateFlow implementation.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"receiver","description":"","recommendedTypes":[]},{"name":"flowRate","description":"","recommendedTypes":[]},{"name":"ctx","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"newCtx","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":false}]}