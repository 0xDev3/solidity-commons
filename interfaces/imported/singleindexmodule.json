{
  "schema": "../schema.json",
  "tags": [],
  "name": "SingleIndexModule",
  "description": "SingleIndexModule.",
  "eventDecorators": [
    {
      "signature": "AnyoneTradeUpdated(bool)",
      "name": "AnyoneTradeUpdated",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "editionId",
          "description": "ID of newly created edition.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AssetExchangeUpdated(address,uint256)",
      "name": "AssetExchangeUpdated",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "_component",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newExchange",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CoolOffPeriodUpdated(address,uint256)",
      "name": "CoolOffPeriodUpdated",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "_component",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newCoolOffPeriod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TargetUnitsUpdated(address,uint256,uint256)",
      "name": "TargetUnitsUpdated",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "_component",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newUnit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_positionMultiplier",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TradeExecuted(address,address,address,uint256,uint256)",
      "name": "TradeExecuted",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "_executor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_sellComponent",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_buyComponent",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_amountSold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_amountBought",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TradeMaximumUpdated(address,uint256)",
      "name": "TradeMaximumUpdated",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "_component",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newMaximum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TraderStatusUpdated(address,bool)",
      "name": "TraderStatusUpdated",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "_trader",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_status",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "anyoneTrade()",
      "name": "anyoneTrade",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetInfo(address)",
      "name": "assetInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "targetUnit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "maxSize",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "coolOffPeriod",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastTradeTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "exchange",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balancerProxy()",
      "name": "balancerProxy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRebalanceComponents()",
      "name": "getRebalanceComponents",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTargetUnits(address[])",
      "name": "getTargetUnits",
      "description": "Get target units for passed components, normalized to current positionMultiplier.",
      "parameterDecorators": [
        {
          "name": "_components",
          "description": "Array of components to get target units for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Array of targetUnits mapping to passed components.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "index()",
      "name": "index",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "MANAGER ONLY: Set target units to current units and last trade to zero. Initialize module.",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "Address of index being used for this CK.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "positionMultiplier()",
      "name": "positionMultiplier",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "raiseAssetTargets()",
      "name": "raiseAssetTargets",
      "description": "ACCESS LIMITED: For situation where all target units met and remaining WETH, uniformly raise targets by same percentage in order to allow further trading. Can be called multiple times if necessary, increase should be small in order to reduce tracking error.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rebalanceComponents(uint256)",
      "name": "rebalanceComponents",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeModule()",
      "name": "removeModule",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCoolOffPeriods(address[],uint256[])",
      "name": "setCoolOffPeriods",
      "description": "MANAGER ONLY: Set exchange for passed components.",
      "parameterDecorators": [
        {
          "name": "_components",
          "description": "Array of components.",
          "recommendedTypes": []
        },
        {
          "name": "_coolOffPeriods",
          "description": "Array of cool off periods to correct component.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setExchanges(address[],uint256[])",
      "name": "setExchanges",
      "description": "MANAGER ONLY: Set exchange for passed components.",
      "parameterDecorators": [
        {
          "name": "_components",
          "description": "Array of components.",
          "recommendedTypes": []
        },
        {
          "name": "_exchanges",
          "description": "Array of exchanges mapping to correct component, uint256 used to signify exchange.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTradeMaximums(address[],uint256[])",
      "name": "setTradeMaximums",
      "description": "MANAGER ONLY: Set trade maximums for passed components.",
      "parameterDecorators": [
        {
          "name": "_components",
          "description": "Array of components.",
          "recommendedTypes": []
        },
        {
          "name": "_tradeMaximums",
          "description": "Array of trade maximums mapping to correct component.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "startRebalance(address[],uint256[],uint256[],uint256)",
      "name": "startRebalance",
      "description": "MANAGER ONLY: Set new target units, zeroing out any units for components being removed from index. Log position multiplier to adjust target units in case fees are accrued. Validate that weth is not a part of the new allocation and that all components in current allocation are in _components array.",
      "parameterDecorators": [
        {
          "name": "_newComponents",
          "description": "Array of new components to add to allocation.",
          "recommendedTypes": []
        },
        {
          "name": "_newComponentsTargetUnits",
          "description": "Array of target units at end of rebalance for new components, maps to same index of component.",
          "recommendedTypes": []
        },
        {
          "name": "_oldComponentsTargetUnits",
          "description": "Array of target units at end of rebalance for old component, maps to same index of component, if component being removed set to 0.",
          "recommendedTypes": []
        },
        {
          "name": "_positionMultiplier",
          "description": "Position multiplier when target units were calculated, needed in order to adjust target units if fees accrued.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sushiswapRouter()",
      "name": "sushiswapRouter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "trade(address)",
      "name": "trade",
      "description": "ACCESS LIMITED: Only approved addresses can call if anyoneTrade is false. Determines trade size and direction and swaps into or out of WETH on exchange specified by manager.",
      "parameterDecorators": [
        {
          "name": "_component",
          "description": "Component to trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tradeAllowList(address)",
      "name": "tradeAllowList",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tradeRemainingWETH(address)",
      "name": "tradeRemainingWETH",
      "description": "ACCESS LIMITED: Only approved addresses can call if anyoneTrade is false. Only callable when 1) there are no more components to be sold and, 2) entire remaining WETH amount can be traded such that resulting inflows won't exceed components maxTradeSize nor overshoot the target unit. To be used near the end of rebalances when a component's calculated trade size is greater in value than remaining WETH.",
      "parameterDecorators": [
        {
          "name": "_component",
          "description": "Component to trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uniswapRouter()",
      "name": "uniswapRouter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateAnyoneTrade(bool)",
      "name": "updateAnyoneTrade",
      "description": "MANAGER ONLY: Toggle whether anyone can trade, bypassing the traderAllowList.",
      "parameterDecorators": [
        {
          "name": "_status",
          "description": "Boolean indicating if anyone can trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateTraderStatus(address[],bool[])",
      "name": "updateTraderStatus",
      "description": "MANAGER ONLY: Toggle ability for passed addresses to trade from current state.",
      "parameterDecorators": [
        {
          "name": "_traders",
          "description": "Array trader addresses to toggle status.",
          "recommendedTypes": []
        },
        {
          "name": "_statuses",
          "description": "Booleans indicating if matching trader can trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "weth()",
      "name": "weth",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}