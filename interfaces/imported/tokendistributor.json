{"schema":"../schema.json","tags":["tokens"],"name":"TokenDistributor","description":"","eventDecorators":[{"signature":"Deposit(address,uint256,uint256)","name":"Deposit","description":"SetLandOwner is emitted whenever the ownership of an land is transfered. Depositor does not have to be (and is usually not) a contributor.","parameterDecorators":[{"name":"depositor","description":"","recommendedTypes":[],"indexed":true},{"name":"distributionId","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"LogCreateDistribution(address,uint256,string,address)","name":"LogCreateDistribution","description":"SetLandOwner is emitted whenever the ownership of an land is transfered.","parameterDecorators":[{"name":"creator","description":"","recommendedTypes":[],"indexed":true},{"name":"distributionId","description":"","recommendedTypes":[],"indexed":true},{"name":"name","description":"","recommendedTypes":[],"indexed":true},{"name":"distributionToken","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"LogUpdateDistribution(uint256,bool,uint256,uint256)","name":"LogUpdateDistribution","description":"SetLandOwner is emitted whenever the ownership of an land is transfered.","parameterDecorators":[{"name":"distributionId","description":"","recommendedTypes":[],"indexed":true},{"name":"paused","description":"","recommendedTypes":[],"indexed":false},{"name":"totalWithdrawn","description":"","recommendedTypes":[],"indexed":false},{"name":"totalRaised","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"SetLandOwner is emitted whenever the ownership of an land is transfered.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"SetLandOwner is emitted whenever the ownership of an land is transfered.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"SetLandOwner is emitted whenever the ownership of an land is transfered.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Withdraw(address,uint256,uint256)","name":"Withdraw","description":"SetLandOwner is emitted whenever the ownership of an land is transfered.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"distributionId","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"WithdrawIncorrectlySentFunds(address,uint256)","name":"WithdrawIncorrectlySentFunds","description":"SetLandOwner is emitted whenever the ownership of an land is transfered.","parameterDecorators":[{"name":"tokenAddress","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"CREATOR_ROLE()","name":"CREATOR_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"EDITOR_ROLE()","name":"EDITOR_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"WITHDRAWER_ROLE()","name":"WITHDRAWER_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"addContributors(uint256,address[],uint256[])","name":"addContributors","description":"Adds contributors to a distribution. Used because the number of contributors can often exceed the block gas limit.","parameterDecorators":[{"name":"distributionId","description":"","recommendedTypes":[]},{"name":"contributors","description":"","recommendedTypes":[]},{"name":"amounts","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"create(string,address,address[],uint256[])","name":"create","description":"Creates a new distribution. Amount at amounts index i should be the contribution for contributor at contributors index i. Names must be unique. contributor addresses MUST be unique.","parameterDecorators":[{"name":"name","description":"","recommendedTypes":[]},{"name":"distributionToken","description":"","recommendedTypes":[]},{"name":"contributors","description":"","recommendedTypes":[]},{"name":"amounts","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deposit(uint256,uint256,uint256)","name":"deposit","description":"Deposit tokens to be distributed.","parameterDecorators":[{"name":"_distributionId","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]},{"name":"_unlockTime","description":"is the time at which this deposit will be unlocked. For safety reasons this must be in the future or zero. Zero denotes an immediate unlock.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deposits(uint256,uint256)","name":"deposits","description":"List of all the deposits for each distribution.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"unlockTime","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"distributionContributors(uint256,uint256)","name":"distributionContributors","description":"List of contributors for each distribution.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"distributionLength()","name":"distributionLength","description":"Returns the number of distributions.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"distributions(uint256)","name":"distributions","description":"List of all distributions.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"name","description":"","recommendedTypes":[],"solidityType":"string"},{"name":"distributionToken","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"totalRaised","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"totalDistributionTokenWithdrawn","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"paused","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getContributors(uint256)","name":"getContributors","description":"Returns the contributors a distribution.","parameterDecorators":[{"name":"_distributionId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getDeposits(uint256)","name":"getDeposits","description":"Returns the deposit info for a distribution.","parameterDecorators":[{"name":"_distributionId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"tuple[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getDistributionIdsForWallet(address)","name":"getDistributionIdsForWallet","description":"Returns the distribution ids for all distributions the wallet is part of.","parameterDecorators":[{"name":"_wallet","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Overload {grantRole} to track enumerable memberships.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingReward(uint256,address)","name":"pendingReward","description":"View function to see the pending rewards for a given user on the frontend.","parameterDecorators":[{"name":"_distributionId","description":"","recommendedTypes":[]},{"name":"_user","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Overload {renounceRole} to track enumerable memberships.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Overload {revokeRole} to track enumerable memberships.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPaused(uint256,bool)","name":"setPaused","description":"Change the paused state of a distribution. Whilst a distribution is paused tokens cannot be withdrawn by contributors but still accrue normally.","parameterDecorators":[{"name":"_distributionId","description":"","recommendedTypes":[]},{"name":"_paused","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"See {IERC165-supportsInterface}.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"totalDeposited(uint256)","name":"totalDeposited","description":"Returns the total amount deposited for a distribution including future unlocks.","parameterDecorators":[{"name":"_distributionId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"undoDeposit(uint256,uint256)","name":"undoDeposit","description":"Attempt to refund the entire amount of a deposit to the caller. Only to be used in emergencies. Future deposits can be rolled back without a problem. Ones in the past are on a best-effort basis. If users have already withdrawn from them then it will only remove what it can. User pending rewards may go negative after this if the amount they've withdrawn is more than they'd be allocated given the total deposits after withdrawal.","parameterDecorators":[{"name":"_distributionId","description":"","recommendedTypes":[]},{"name":"_depositIndex","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"userInfo(uint256,address)","name":"userInfo","description":"Info of each user in distributions.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"rewardWithdrawn","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"amountContributed","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(uint256,uint256)","name":"withdraw","description":"Withdraw tokens from a distribution.","parameterDecorators":[{"name":"_distributionId","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawIncorrectlySentFunds(address,uint256)","name":"withdrawIncorrectlySentFunds","description":"Withdraws excess ERC20 tokens sent to the address. Only counts tokens NOT sent via the deposit method.","parameterDecorators":[{"name":"_tokenAddress","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}