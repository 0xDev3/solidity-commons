{
  "schema": "../schema.json",
  "tags": [],
  "name": "WhitelistedAggregatorProxy",
  "description": "A trusted proxy for updating where current answers are read from. This contract provides a consistent address for the AggregatorInterface but delegates where it reads from to the owner, who is trusted to update it.Only whitelisted addresses are allowed to access getters for aggregated answers and round information.",
  "eventDecorators": [
    {
      "signature": "AddedToWhitelist(address)",
      "name": "AddedToWhitelist",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AnswerUpdated(int256,uint256,uint256)",
      "name": "AnswerUpdated",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "current",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "roundId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewRound(uint256,address,uint256)",
      "name": "NewRound",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "roundId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "startedBy",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "startedAt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferRequested(address,address)",
      "name": "OwnershipTransferRequested",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransfered(address,address)",
      "name": "OwnershipTransfered",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RemovedFromWhitelist(address)",
      "name": "RemovedFromWhitelist",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WhitelistDisabled()",
      "name": "WhitelistDisabled",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": []
    },
    {
      "signature": "WhitelistEnabled()",
      "name": "WhitelistEnabled",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": []
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "Allows an ownership transfer to be completed by the recipient.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addToWhitelist(address)",
      "name": "addToWhitelist",
      "description": "Adds an address to the whitelist.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "The address to whitelist.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "aggregator()",
      "name": "aggregator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "decimals()",
      "name": "decimals",
      "description": "represents the number of decimals the aggregator responses represent.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "disableWhitelist()",
      "name": "disableWhitelist",
      "description": "makes the whitelist check unenforced.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "enableWhitelist()",
      "name": "enableWhitelist",
      "description": "makes the whitelist check enforced.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAnswer(uint256)",
      "name": "getAnswer",
      "description": "get past rounds answers. overridden function to add the isWhitelisted() modifier.",
      "parameterDecorators": [
        {
          "name": "_roundId",
          "description": "the answer number to retrieve the answer for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTimestamp(uint256)",
      "name": "getTimestamp",
      "description": "get block timestamp when an answer was last updated. overridden function to add the isWhitelisted() modifier.",
      "parameterDecorators": [
        {
          "name": "_roundId",
          "description": "the answer number to retrieve the updated timestamp for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestAnswer()",
      "name": "latestAnswer",
      "description": "Reads the current answer from aggregator delegated to. overridden function to add the isWhitelisted() modifier.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestRound()",
      "name": "latestRound",
      "description": "get the latest completed round where the answer was updated. overridden function to add the isWhitelisted() modifier.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestTimestamp()",
      "name": "latestTimestamp",
      "description": "Reads the last updated height from aggregator delegated to. overridden function to add the isWhitelisted() modifier.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeFromWhitelist(address)",
      "name": "removeFromWhitelist",
      "description": "Removes an address from the whitelist.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "The address to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAggregator(address)",
      "name": "setAggregator",
      "description": "Allows the owner to update the aggregator address.",
      "parameterDecorators": [
        {
          "name": "_aggregator",
          "description": "The new address for the aggregator contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows an owner to begin transferring ownership to a new address, pending.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistEnabled()",
      "name": "whitelistEnabled",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "whitelisted(address)",
      "name": "whitelisted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}