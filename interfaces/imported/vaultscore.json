{"schema":"../schema.json","tags":["vaults"],"name":"VaultsCore","description":"","eventDecorators":[{"signature":"Borrowed(uint256,uint256,address)","name":"Borrowed","description":"event emitted when a user has unstaked a token.","parameterDecorators":[{"name":"vaultId","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"CumulativeRateUpdated(address,uint256,uint256)","name":"CumulativeRateUpdated","description":"event emitted when a user has unstaked a token.","parameterDecorators":[{"name":"collateralType","description":"","recommendedTypes":[],"indexed":true},{"name":"elapsedTime","description":"","recommendedTypes":[],"indexed":false},{"name":"newCumulativeRate","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Deposited(uint256,uint256,address)","name":"Deposited","description":"event emitted when a user has unstaked a token.","parameterDecorators":[{"name":"vaultId","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"InsurancePaid(uint256,uint256,address)","name":"InsurancePaid","description":"event emitted when a user has unstaked a token.","parameterDecorators":[{"name":"vaultId","description":"","recommendedTypes":[],"indexed":true},{"name":"insuranceAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Liquidated(uint256,uint256,uint256,address,address)","name":"Liquidated","description":"event emitted when a user has unstaked a token.","parameterDecorators":[{"name":"vaultId","description":"","recommendedTypes":[],"indexed":true},{"name":"debtRepaid","description":"","recommendedTypes":[],"indexed":false},{"name":"collateralLiquidated","description":"","recommendedTypes":[],"indexed":false},{"name":"owner","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Opened(uint256,address,address)","name":"Opened","description":"event emitted when a user has unstaked a token.","parameterDecorators":[{"name":"vaultId","description":"","recommendedTypes":[],"indexed":true},{"name":"collateralType","description":"","recommendedTypes":[],"indexed":true},{"name":"owner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Repaid(uint256,uint256,address)","name":"Repaid","description":"event emitted when a user has unstaked a token.","parameterDecorators":[{"name":"vaultId","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Withdrawn(uint256,uint256,address)","name":"Withdrawn","description":"event emitted when a user has unstaked a token.","parameterDecorators":[{"name":"vaultId","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"a()","name":"a","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"availableIncome()","name":"availableIncome","description":"Calculate the available income.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"available income that has not been minted yet.*.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"borrow(uint256,uint256)","name":"borrow","description":"Borrow new StableX (Eg: PAR) tokens from a vault. Only te owner of a vault can borrow from it. `borrow()` will update the outstanding vault debt to the current time before attempting the withdrawal. and will fail if it would bring the vault below the liquidation treshold.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault from which to borrow.","recommendedTypes":[]},{"name":"_amount","description":"the amount of borrowed StableX tokens in WEI.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"cumulativeRates(address)","name":"cumulativeRates","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"deposit(address,uint256)","name":"deposit","description":"Deposit an ERC20 token into the vault of the msg.sender as collateral. A new vault is created if no vault exists for the `msg.sender` with the specified collateral type. this function used `transferFrom()` and requires pre-approval via `approve()` on the ERC20.","parameterDecorators":[{"name":"_collateralType","description":"the address of the collateral type to be deposited.","recommendedTypes":[]},{"name":"_amount","description":"the amount of tokens to be deposited in WEI.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initializeRates(address)","name":"initializeRates","description":"Initialize the cumulative rates to 1 for a new collateral type.","parameterDecorators":[{"name":"_collateralType","description":"the address of the new collateral type to be initialized*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"lastRefresh(address)","name":"lastRefresh","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"liquidate(uint256)","name":"liquidate","description":"Liquidate a vault that is below the liquidation treshold by repaying it's outstanding debt. `liquidate()` will update the outstanding vault debt to the current time and pay a `liquidationBonus` to the liquidator. `liquidate()` can be called by anyone.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault to be liquidated.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"refresh()","name":"refresh","description":"Refresh the cumulative rates and debts of all vaults and all collateral types.*.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"refreshCollateral(address)","name":"refreshCollateral","description":"Refresh the cumulative rate of a collateraltype. this updates the debt for all vaults with the specified collateral type.","parameterDecorators":[{"name":"_collateralType","description":"the address of the collateral type to be refreshed.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"repay(uint256,uint256)","name":"repay","description":"Repay an outstanding StableX balance to a vault. `repay()` will update the outstanding vault debt to the current time.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault for which to repay the outstanding debt balance.","recommendedTypes":[]},{"name":"_amount","description":"the amount of StableX tokens in WEI to be repaid.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"repayAll(uint256)","name":"repayAll","description":"Convenience function to repay all debt of a vault. `repayAll()` will update the outstanding vault debt to the current time.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault for which to repay the debt.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"upgrade(address)","name":"upgrade","description":"","parameterDecorators":[{"name":"_newVaultsCore","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw(uint256,uint256)","name":"withdraw","description":"Withdraws ERC20 tokens from a vault. Only te owner of a vault can withdraw collateral from it. `withdraw()` will fail if it would bring the vault below the liquidation treshold.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault from which to withdraw the collateral.","recommendedTypes":[]},{"name":"_amount","description":"the amount of ERC20 tokens to be withdrawn in WEI.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawAll(uint256)","name":"withdrawAll","description":"Convenience function to withdraw all collateral of a vault. Only te owner of a vault can withdraw collateral from it. `withdrawAll()` will fail if the vault has any outstanding debt attached to it.","parameterDecorators":[{"name":"_vaultId","description":"the ID of the vault from which to withdraw the collateral.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}