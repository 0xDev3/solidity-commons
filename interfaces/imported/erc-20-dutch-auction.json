{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "CollateralAuction",
  "description": "ERC-20 Dutch auction. If the auction token matches the requested `baseToken`, the auction has a fixed rate of 1:1. Auctions tokens in exchange for `baseToken` using a Dutch auction scheme, the owner of the contract is the sole beneficiary of all the auctions. Auctions follow two linear functions to determine the exchange rate that are determined by the provided `reference` rate.",
  "eventDecorators": [
    {
      "signature": "CreatedAuction(uint256,address,uint256,uint256,uint256,uint256)",
      "name": "CreatedAuction",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_fromToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_startOffer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_refOffer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_limit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "_previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Take(uint256,address,uint256,uint256)",
      "name": "Take",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_taker",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_selling",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_requesting",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "auctions(uint256)",
      "name": "auctions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "fromToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "limitDelta",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "startOffer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "limit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "baseToken()",
      "name": "baseToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "create(address,uint256,uint256,uint256,uint256)",
      "name": "create",
      "description": "Creates a new auction that starts immediately, any address can start an auction, but the beneficiary of all auctions is the owner of the contract.",
      "parameterDecorators": [
        {
          "name": "_fromToken",
          "description": "Token to be sold in exchange for `baseToken`.",
          "recommendedTypes": []
        },
        {
          "name": "_start",
          "description": "Initial offer of `fromToken` for the requested `_amount` of base, should be below the market reference.",
          "recommendedTypes": []
        },
        {
          "name": "_ref",
          "description": "Reference or \"market\" offer of `fromToken` for the requested `_amount` of base, it should be estimated with the current exchange rate, the real offered amount reaches this value after 10 minutes.",
          "recommendedTypes": []
        },
        {
          "name": "_limit",
          "description": "Maximum amount of `fromToken` to exchange for the requested `_amount` of base, after this limit is reached, the requested `_amount` starts to reduce.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount requested in exchange for `fromToken` until `_limit is reached`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "id",
          "description": "The id of the created auction.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAuctionsLength()",
      "name": "getAuctionsLength",
      "description": "Returns the size of the auctions array. The auction with ID 0 is invalid, thus the value returned by this method is the total number of auctions + 1.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The size of the auctions array.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "offer(uint256)",
      "name": "offer",
      "description": "Calculates the current offer of an auction if it were to be taken, how much `baseTokens` are being requested for how much `baseToken`.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "ID of the auction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "selling",
          "description": "How much is being requested.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "requesting",
          "description": "How much is being offered.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "take(uint256,bytes,bool)",
      "name": "take",
      "description": "Takes an ongoing auction, exchanging the requested `baseToken` for offered `fromToken`. The `baseToken` are transfered to the owner address and a callback to the owner is called for further processing of the tokens. In the context of a collateral auction, the tokens are used to pay a loan. If the oracle of the loan requires `oracleData`, such oracle data should be included on the `_data` fieldThe taker of the auction may request a callback to it's own address, this is intended to allow the taker to use the newly received `fromToken` and perform arbitrage with a dex before providing the requested `baseToken`.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "ID of the auction to take.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "Arbitrary data field that's passed to the owner.",
          "recommendedTypes": []
        },
        {
          "name": "_callback",
          "description": "Requests a callback for the taker of the auction, that may be used to perform arbitrage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers the ownership of the contract.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "Address of the new owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}