{
  "schema": "../schema.json",
  "tags": [],
  "name": "SecretDelay",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AvatarSet(address,address)",
      "name": "AvatarSet",
      "description": "Emitted every time an order is broadcasted.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of CELO scheduled.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "group",
          "description": "The validator group the CELO is intended to vote for.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ChangedGuard(address)",
      "name": "ChangedGuard",
      "description": "Emitted every time an order is broadcasted.",
      "parameterDecorators": [
        {
          "name": "guard",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DelaySetup(address,address,address,address)",
      "name": "DelaySetup",
      "description": "Emitted every time an order is broadcasted.",
      "parameterDecorators": [
        {
          "name": "initiator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "avatar",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DisabledModule(address)",
      "name": "DisabledModule",
      "description": "Emitted every time an order is broadcasted.",
      "parameterDecorators": [
        {
          "name": "module",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EnabledModule(address)",
      "name": "EnabledModule",
      "description": "Emitted every time an order is broadcasted.",
      "parameterDecorators": [
        {
          "name": "module",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted every time an order is broadcasted.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of CELO scheduled.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "group",
          "description": "The validator group the CELO is intended to vote for.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TargetSet(address,address)",
      "name": "TargetSet",
      "description": "Emitted every time an order is broadcasted.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of CELO scheduled.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "group",
          "description": "The validator group the CELO is intended to vote for.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TransactionAdded(uint256,bytes32,address,uint256,bytes,uint8)",
      "name": "TransactionAdded",
      "description": "Emitted every time an order is broadcasted.",
      "parameterDecorators": [
        {
          "name": "queueNonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "txHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "operation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransactionPromoted(uint256)",
      "name": "TransactionPromoted",
      "description": "Emitted every time an order is broadcasted.",
      "parameterDecorators": [
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "avatar()",
      "name": "avatar",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "disableModule(address,address)",
      "name": "disableModule",
      "description": "This can only be called by the owner. Disables a module on the modifier.",
      "parameterDecorators": [
        {
          "name": "prevModule",
          "description": "Module that pointed to the module to be removed in the linked list.",
          "recommendedTypes": []
        },
        {
          "name": "module",
          "description": "Module to be removed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "enableModule(address)",
      "name": "enableModule",
      "description": "This can only be called by the owner. Enables a module that can add transactions to the queue.",
      "parameterDecorators": [
        {
          "name": "module",
          "description": "Address of the module to be enabled.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "execTransactionFromModule(address,uint256,bytes,uint8)",
      "name": "execTransactionFromModule",
      "description": "Can only be called by enabled modules. Adds a transaction to the queue (same as avatar interface so that this can be placed between other modules and the avatar).",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Destination address of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Ether value of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data payload of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "Operation type of module transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)",
      "name": "execTransactionFromModuleReturnData",
      "description": "Can only be called by enabled modules. Passes a transaction to the modifier, expects return data.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Destination address of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Ether value of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data payload of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "Operation type of module transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "returnData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeNextTx(address,uint256,bytes,uint8)",
      "name": "executeNextTx",
      "description": "The txIndex used by this function is always 0. Executes the next transaction only if the cooldown has passed and the transaction has not expired.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Destination address of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Ether value of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data payload of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "Operation type of module transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getGuard()",
      "name": "getGuard",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_guard",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getModulesPaginated(address,uint256)",
      "name": "getModulesPaginated",
      "description": "Returns array of modules.",
      "parameterDecorators": [
        {
          "name": "start",
          "description": "Start of the page.",
          "recommendedTypes": []
        },
        {
          "name": "pageSize",
          "description": "Maximum number of modules that should be returned.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "array",
          "description": "Array of modules.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "next",
          "description": "Start of the next page.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTransactionHash(address,uint256,bytes,uint8)",
      "name": "getTransactionHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTxCreatedAt(uint256)",
      "name": "getTxCreatedAt",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_nonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTxHash(uint256)",
      "name": "getTxHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_nonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "guard()",
      "name": "guard",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isModuleEnabled(address)",
      "name": "isModuleEnabled",
      "description": "Returns if an module is enabled.",
      "parameterDecorators": [
        {
          "name": "_module",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if the module is enabled.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "queueNonce()",
      "name": "queueNonce",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAvatar(address)",
      "name": "setAvatar",
      "description": "Can only be called by the current owner. Sets the avatar to a new avatar (`newAvatar`).",
      "parameterDecorators": [
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGuard(address)",
      "name": "setGuard",
      "description": "Set a guard that checks transactions before execution.",
      "parameterDecorators": [
        {
          "name": "_guard",
          "description": "The address of the guard to be used or the 0 address to disable the guard.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTarget(address)",
      "name": "setTarget",
      "description": "Can only be called by the current owner. Sets the target to a new target (`newTarget`).",
      "parameterDecorators": [
        {
          "name": "_target",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTxCooldown(uint256)",
      "name": "setTxCooldown",
      "description": "This can only be called by the owner. Sets the cooldown before a transaction can be executed.",
      "parameterDecorators": [
        {
          "name": "cooldown",
          "description": "Cooldown in seconds that should be required before the transaction can be executed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTxExpiration(uint256)",
      "name": "setTxExpiration",
      "description": "There need to be at least 60 seconds between end of cooldown and expirationThis can only be called by the owner. Sets the duration for which a transaction is valid.",
      "parameterDecorators": [
        {
          "name": "expiration",
          "description": "Duration that a transaction is valid in seconds (or 0 if valid forever) after the cooldown.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTxNonce(uint256)",
      "name": "setTxNonce",
      "description": "This can only be called by the owner. Sets transaction nonce. Used to invalidate or skip transactions in queue.",
      "parameterDecorators": [
        {
          "name": "_nonce",
          "description": "New transaction nonce.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUp(bytes)",
      "name": "setUp",
      "description": "",
      "parameterDecorators": [
        {
          "name": "initParams",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "skipExpired()",
      "name": "skipExpired",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "target()",
      "name": "target",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "txCooldown()",
      "name": "txCooldown",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "txCreatedAt(uint256)",
      "name": "txCreatedAt",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "txExpiration()",
      "name": "txExpiration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "txHash(uint256)",
      "name": "txHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "txNonce()",
      "name": "txNonce",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}