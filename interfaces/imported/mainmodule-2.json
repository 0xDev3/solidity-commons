{
  "schema": "../schema.json",
  "tags": [],
  "name": "MainModule",
  "description": "Contains the core functionality arcadeum wallets will inherit.",
  "eventDecorators": [
    {
      "signature": "CreatedContract(address)",
      "name": "CreatedContract",
      "description": "event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_contract",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NonceChange(uint256)",
      "name": "NonceChange",
      "description": "event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "newNonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TxFailed(uint256,bytes)",
      "name": "TxFailed",
      "description": "event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_reason",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "FACTORY()",
      "name": "FACTORY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "INIT_CODE_HASH()",
      "name": "INIT_CODE_HASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addHook(bytes4,address)",
      "name": "addHook",
      "description": "Adds a new hook to handle a given function selector.",
      "parameterDecorators": [
        {
          "name": "_signature",
          "description": "Signature function linked to the hook.",
          "recommendedTypes": []
        },
        {
          "name": "_implementation",
          "description": "Hook implementation contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createContract(bytes)",
      "name": "createContract",
      "description": "Creates a contract forwarding eth value.",
      "parameterDecorators": [
        {
          "name": "_code",
          "description": "Creation code of the contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "addr",
          "description": "The address of the created contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "execute(tuple(bool,bool,uint256,address,uint256,bytes)[],uint256,bytes)",
      "name": "execute",
      "description": "Allow wallet owner to execute an action.",
      "parameterDecorators": [
        {
          "name": "_txs",
          "description": "Transactions to process.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "delegateCall",
              "description": "",
              "type": "bool"
            },
            {
              "name": "revertOnError",
              "description": "",
              "type": "bool"
            },
            {
              "name": "gasLimit",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "target",
              "description": "",
              "type": "address"
            },
            {
              "name": "value",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "data",
              "description": "",
              "type": "bytes"
            }
          ]
        },
        {
          "name": "_nonce",
          "description": "Signature nonce.",
          "recommendedTypes": []
        },
        {
          "name": "_signature",
          "description": "Encoded signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isValidSignature(bytes32,bytes)",
      "name": "isValidSignature",
      "description": "Verifies whether the provided signature is valid with respect to the provided hash. MUST return the correct magic value if the signature provided is valid for the provided hash > The bytes4 magic value to return when signature is valid is 0x1626ba7e : bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")).",
      "parameterDecorators": [
        {
          "name": "_hash",
          "description": "keccak256 hash that was signed.",
          "recommendedTypes": []
        },
        {
          "name": "_signatures",
          "description": "Signature byte array associated with _data. Encoded as abi.encode(Signature[], Configs).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "magicValue Magic value 0x1626ba7e if the signature is valid and 0x0 otherwise.",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isValidSignature(bytes,bytes)",
      "name": "isValidSignature",
      "description": "Verifies whether the provided signature is valid with respect to the provided data. MUST return the correct magic value if the signature provided is valid for the provided data > The bytes4 magic value to return when signature is valid is 0x20c13b0b : bytes4(keccak256(\"isValidSignature(bytes,bytes)\")).",
      "parameterDecorators": [
        {
          "name": "_data",
          "description": "Arbitrary length data signed on the behalf of address(this).",
          "recommendedTypes": []
        },
        {
          "name": "_signatures",
          "description": "Signature byte array associated with _data. Encoded as abi.encode(Signature[], Configs).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "magicValue Magic value 0x20c13b0b if the signature is valid and 0x0 otherwise.",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nonce()",
      "name": "nonce",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
      "name": "onERC1155BatchReceived",
      "description": "Handle the receipt of multiple ERC1155 token types.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onERC1155Received(address,address,uint256,uint256,bytes)",
      "name": "onERC1155Received",
      "description": "Handle the receipt of a single ERC1155 token type.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onERC721Received(address,address,uint256,bytes)",
      "name": "onERC721Received",
      "description": "Handle the receipt of a single ERC721 token.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "recoverSigner(bytes32,bytes)",
      "name": "recoverSigner",
      "description": "Recover the signer of hash, assuming it's an EOA account. Only for SignatureType.EIP712 and SignatureType.EthSign signatures.",
      "parameterDecorators": [
        {
          "name": "_hash",
          "description": "Hash that was signed encoded as (bytes32 r, bytes32 s, uint8 v, ... , SignatureType sigType).",
          "recommendedTypes": []
        },
        {
          "name": "_signature",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeHook(bytes4)",
      "name": "removeHook",
      "description": "Removes a registered hook.",
      "parameterDecorators": [
        {
          "name": "_signature",
          "description": "Signature function linked to the hook.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateImplementation(address)",
      "name": "updateImplementation",
      "description": "Updates the implementation of the base wallet. WARNING Updating the implementation can brick the wallet.",
      "parameterDecorators": [
        {
          "name": "_implementation",
          "description": "New main module implementation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}