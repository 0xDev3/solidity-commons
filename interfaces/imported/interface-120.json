{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "compound"
  ],
  "name": "Treasury",
  "description": "VUSD Treasury, It stores cTokens and redeem those from Compound as needed.",
  "eventDecorators": [
    {
      "signature": "UpdatedRedeemer(address,address)",
      "name": "UpdatedRedeemer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousRedeemer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newRedeemer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpdatedSwapManager(address,address)",
      "name": "UpdatedSwapManager",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousSwapManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newSwapManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "NAME()",
      "name": "NAME",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "VERSION()",
      "name": "VERSION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addKeeper(address)",
      "name": "addKeeper",
      "description": "Add given address in keepers list.",
      "parameterDecorators": [
        {
          "name": "_keeperAddress",
          "description": "keeper address to add.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addWhitelistedToken(address,address,address)",
      "name": "addWhitelistedToken",
      "description": "Add token into treasury management system. Add token address in whitelistedTokens list and add cToken in mapping.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address which we want to add in token list.",
          "recommendedTypes": []
        },
        {
          "name": "_cToken",
          "description": "CToken address correspond to _token.",
          "recommendedTypes": []
        },
        {
          "name": "_oracle",
          "description": "Chainlink oracle address for token/USD feed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cTokenList()",
      "name": "cTokenList",
      "description": "Return list of cTokens.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cTokens(address)",
      "name": "cTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimCompAndConvertTo(address,uint256)",
      "name": "claimCompAndConvertTo",
      "description": "Claim comp from all markets and convert to given token. Also deposit those tokens to Compound.",
      "parameterDecorators": [
        {
          "name": "_toToken",
          "description": "COMP will be swapped to _toToken.",
          "recommendedTypes": []
        },
        {
          "name": "_minOut",
          "description": "Minimum _toToken expected after conversion.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "governor()",
      "name": "governor",
      "description": "Governor is defined in VUSD token contract only.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isWhitelistedToken(address)",
      "name": "isWhitelistedToken",
      "description": "Returns whether given address is whitelisted or not.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "keepers()",
      "name": "keepers",
      "description": "Return list of keepers.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "migrate(address)",
      "name": "migrate",
      "description": "Migrate assets to new treasury.",
      "parameterDecorators": [
        {
          "name": "_newTreasury",
          "description": "Address of new treasury of VUSD system.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "oracles(address)",
      "name": "oracles",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemer()",
      "name": "redeemer",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeKeeper(address)",
      "name": "removeKeeper",
      "description": "Remove given address from keepers list.",
      "parameterDecorators": [
        {
          "name": "_keeperAddress",
          "description": "keeper address to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeWhitelistedToken(address)",
      "name": "removeWhitelistedToken",
      "description": "Remove token from treasury management system. Removing token even if treasury has some balance of that token is intended behavior.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address which we want to remove from token list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapManager()",
      "name": "swapManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sweep(address)",
      "name": "sweep",
      "description": "Sweep any ERC20 token to governor address. OnlyGovernor can call this and CTokens are not allowed to sweep.",
      "parameterDecorators": [
        {
          "name": "_fromToken",
          "description": "Token address to sweep.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateRedeemer(address)",
      "name": "updateRedeemer",
      "description": "Update redeemer address.",
      "parameterDecorators": [
        {
          "name": "_newRedeemer",
          "description": "new redeemer address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateSwapManager(address)",
      "name": "updateSwapManager",
      "description": "Update swap manager address.",
      "parameterDecorators": [
        {
          "name": "_newSwapManager",
          "description": "new swap manager address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vusd()",
      "name": "vusd",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "whitelistedTokens()",
      "name": "whitelistedTokens",
      "description": "Return list of whitelisted tokens.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(address,uint256,address)",
      "name": "withdraw",
      "description": "Withdraw given amount of token. Only Redeemer and Governor are allowed to call.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "Token to withdraw, it should be 1 of the supported tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "token amount to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenReceiver",
          "description": "Address of token receiver.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(address,uint256)",
      "name": "withdraw",
      "description": "Withdraw given amount of token. Only Redeemer and Governor are allowed to call.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "Token to withdraw, it should be 1 of the supported tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "token amount to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAll(address[])",
      "name": "withdrawAll",
      "description": "Withdraw all of multiple tokens. Only Governor is allowed to call.",
      "parameterDecorators": [
        {
          "name": "_tokens",
          "description": "Array of token addresses, tokens should be supported tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawMulti(address[],uint256[])",
      "name": "withdrawMulti",
      "description": "Withdraw multiple tokens. Only Governor is allowed to call._tokens and _amounts array are 1:1 and should have same length.",
      "parameterDecorators": [
        {
          "name": "_tokens",
          "description": "Array of token addresses, tokens should be supported tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_amounts",
          "description": "Array of token amount to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawable(address)",
      "name": "withdrawable",
      "description": "Current withdrawable amount for given token. If token is not supported by treasury, no cTokens in mapping, it will return 0.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "Token to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}