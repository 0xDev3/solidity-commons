{
  "schema": "../schema.json",
  "tags": [],
  "name": "SynthereumDeployer",
  "description": "",
  "eventDecorators": [
    {
      "signature": "DerivativeDeployed(uint8,address,address)",
      "name": "DerivativeDeployed",
      "description": "Emitted that client terminates the service if the hash(s1) is wrong. Or cloud terminates the service if client does not confirms hash(s1) in time.",
      "parameterDecorators": [
        {
          "name": "derivativeVersion",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newDerivative",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PoolDeployed(uint8,address,address)",
      "name": "PoolDeployed",
      "description": "Emitted that client terminates the service if the hash(s1) is wrong. Or cloud terminates the service if client does not confirms hash(s1) in time.",
      "parameterDecorators": [
        {
          "name": "poolVersion",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "derivative",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "Emitted that client terminates the service if the hash(s1) is wrong. Or cloud terminates the service if client does not confirms hash(s1) in time.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "Emitted that client terminates the service if the hash(s1) is wrong. Or cloud terminates the service if client does not confirms hash(s1) in time.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "Emitted that client terminates the service if the hash(s1) is wrong. Or cloud terminates the service if client does not confirms hash(s1) in time.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAINTAINER_ROLE()",
      "name": "MAINTAINER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deployOnlyDerivative(uint8,bytes,address)",
      "name": "deployOnlyDerivative",
      "description": "Deploys a derivative and links it with an already existing pool.",
      "parameterDecorators": [
        {
          "name": "derivativeVersion",
          "description": "Version of the derivative contract.",
          "recommendedTypes": []
        },
        {
          "name": "derivativeParamsData",
          "description": "Input params of derivative constructor.",
          "recommendedTypes": []
        },
        {
          "name": "pool",
          "description": "Existing pool contract to link with the new derivative.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "derivative",
          "description": "Derivative contract deployed.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deployOnlyPool(uint8,bytes,address)",
      "name": "deployOnlyPool",
      "description": "Deploys a pool and links it with an already existing derivative.",
      "parameterDecorators": [
        {
          "name": "poolVersion",
          "description": "Version of the pool contract.",
          "recommendedTypes": []
        },
        {
          "name": "poolParamsData",
          "description": "Input params of pool constructor.",
          "recommendedTypes": []
        },
        {
          "name": "derivative",
          "description": "Existing derivative contract to link with the new pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "pool",
          "description": "Pool contract deployed.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deployPoolAndDerivative(uint8,uint8,bytes,bytes)",
      "name": "deployPoolAndDerivative",
      "description": "Deploys derivative and pool linking the contracts together.",
      "parameterDecorators": [
        {
          "name": "derivativeVersion",
          "description": "Version of derivative contract.",
          "recommendedTypes": []
        },
        {
          "name": "poolVersion",
          "description": "Version of the pool contract.",
          "recommendedTypes": []
        },
        {
          "name": "derivativeParamsData",
          "description": "Input params of derivative constructor.",
          "recommendedTypes": []
        },
        {
          "name": "poolParamsData",
          "description": "Input params of pool constructor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "derivative",
          "description": "Derivative contract deployed.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "pool",
          "description": "Pool contract deployed.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getPools(string,address,uint8)",
      "name": "getPools",
      "description": "Returns all the pools with partcular symbol, collateral and verion.",
      "parameterDecorators": [
        {
          "name": "poolSymbol",
          "description": "Synthetic token symbol of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "collateral",
          "description": "ERC20 contract of collateral currency.",
          "recommendedTypes": []
        },
        {
          "name": "poolVersion",
          "description": "Version of the pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "pools",
          "description": "List of all pools.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMember(bytes32,uint256)",
      "name": "getRoleMember",
      "description": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMemberCount(bytes32)",
      "name": "getRoleMemberCount",
      "description": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPoolDeployed(string,address,uint8,address)",
      "name": "isPoolDeployed",
      "description": "Returns if a particular pool exists or not.",
      "parameterDecorators": [
        {
          "name": "poolSymbol",
          "description": "Synthetic token symbol of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "collateral",
          "description": "ERC20 contract of collateral currency.",
          "recommendedTypes": []
        },
        {
          "name": "poolVersion",
          "description": "Version of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "pool",
          "description": "Contract of the pool to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isDeployed",
          "description": "Returns true if a particular pool exists, otherwiise false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "synthereumFinder()",
      "name": "synthereumFinder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}