{"schema":"../schema.json","tags":["escrows"],"name":"Escrow","description":"","eventDecorators":[{"signature":"ContestCreated(address,uint256,uint256)","name":"ContestCreated","description":"Triggered when a user has withdrawn. Emits when quiz builder creates the contest.","parameterDecorators":[{"name":"builder","description":"Quiz builder address.","recommendedTypes":[],"indexed":true},{"name":"winnersCount","description":"Number of winners.","recommendedTypes":[],"indexed":false},{"name":"contestId","description":"Created contest id.","recommendedTypes":[],"indexed":false}]},{"signature":"ContestEnded(uint256,address,address[],uint256)","name":"ContestEnded","description":"Triggered when a user has withdrawn. Emits when contest ended.","parameterDecorators":[{"name":"contestId","description":"Ended contest id.","recommendedTypes":[],"indexed":false},{"name":"contestOwner","description":"Address of contest owner.","recommendedTypes":[],"indexed":false},{"name":"winners","description":"Array of winner addresses.","recommendedTypes":[],"indexed":false},{"name":"winnersCount","description":"Number of winners.","recommendedTypes":[],"indexed":false}]},{"signature":"ERC20TokenWithdrew(address,address,uint256)","name":"ERC20TokenWithdrew","description":"Triggered when a user has withdrawn. Emits when owner withdrew all of given ERC20 token in contract.","parameterDecorators":[{"name":"feeReceiver","description":"Address of fee receiver.","recommendedTypes":[],"indexed":true},{"name":"tokenAddress","description":"ERC20 token address.","recommendedTypes":[],"indexed":false},{"name":"balance","description":"Total balance of given token in contract.","recommendedTypes":[],"indexed":false}]},{"signature":"ETHSent(uint256)","name":"ETHSent","description":"Triggered when a user has withdrawn. Emits when quiz builder sent eth to the contract.","parameterDecorators":[{"name":"totalETH","description":"Total ETH amount quiz builder sent.","recommendedTypes":[],"indexed":false}]},{"signature":"ETHWithdrew(address,uint256)","name":"ETHWithdrew","description":"Triggered when a user has withdrawn. Emits when owner withdrew all of eth in contract.","parameterDecorators":[{"name":"feeReceiver","description":"Address of fee receiver.","recommendedTypes":[],"indexed":true},{"name":"balance","description":"Total balance of eth in contract.","recommendedTypes":[],"indexed":false}]},{"signature":"FeeReceiverUpdated(address,address)","name":"FeeReceiverUpdated","description":"Triggered when a user has withdrawn. Emits when owner updated the address of fee receiver.","parameterDecorators":[{"name":"previousReceiver","description":"Address of previous fee receiver.","recommendedTypes":[],"indexed":true},{"name":"newReceiver","description":"Address of new fee receiver.","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Triggered when a user has withdrawn.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ProtocolFeeUpdated(uint256,uint256)","name":"ProtocolFeeUpdated","description":"Triggered when a user has withdrawn. Emits when protocol fee updated.","parameterDecorators":[{"name":"previousFee","description":"Previous protocol fee.","recommendedTypes":[],"indexed":false},{"name":"newFee","description":"New protocol fee.","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"ETHSig(bytes)","name":"ETHSig","description":"Mapping of ETH by signature.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"contests(uint256)","name":"contests","description":"Mapping of contests.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"contestId","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"contestOwner","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"finished","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"createContest(bytes,tuple(address,uint256)[][])","name":"createContest","description":"Create contest with quiz builder's signature and prize token info.Manager should call this method for creating contest instead of quiz builder so that pay gas for them.If the prize token is native token, its token address should be 0.Signature has to be hash with its private key and data.","parameterDecorators":[{"name":"_signature","description":"Quiz builder's signed message from off chain.","recommendedTypes":[]},{"name":"_prize","description":"Array of prize for winners.","recommendedTypes":[],"parameters":[{"name":"tokenAddress","description":"","type":"address"},{"name":"tokenAmount","description":"","type":"uint256"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"currentContest()","name":"currentContest","description":"Current contest Id.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"endContest(uint256,address[])","name":"endContest","description":"End the contest and distribute the prize to the winners.Array of winners and prize layout should be the same.Only owner can end this contest.","parameterDecorators":[{"name":"_contestId","description":"Contest id to end.","recommendedTypes":[]},{"name":"_winners","description":"Array of winner address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"feePaid(bytes)","name":"feePaid","description":"Quiz builder paid fee or not.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"feeReceiver()","name":"feeReceiver","description":"Fee receiver address.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"protocolFee()","name":"protocolFee","description":"Protocol fee.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"sendETHToContract(bytes)","name":"sendETHToContract","description":"Send ETH to the contract.Quiz builder should call this method by paying gas at least if they are going to set ETH for prize token.","parameterDecorators":[{"name":"_signature","description":"Quiz builder's signed message from off chain.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateFeeReceiver(address)","name":"updateFeeReceiver","description":"Set new fee receiver address.","parameterDecorators":[{"name":"_newReceiver","description":"New fee receiver address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateProtocolFee(uint256)","name":"updateProtocolFee","description":"Set new fee protocol fee.","parameterDecorators":[{"name":"_newFee","description":"New protocol fee.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawERC20Token(address)","name":"withdrawERC20Token","description":"Withdraw all given ERC20 token in contract to the fee receiver.","parameterDecorators":[{"name":"_tokenAddress","description":"Token address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawETH()","name":"withdrawETH","description":"Withdraw all ETH in contract to the fee receiver.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}