{"schema":"../schema.json","tags":["swaps"],"name":"SwapUtilsExternal","description":"SwapUtilsExternal library. Contracts relying on this library must initialize SwapUtils.Swap struct then use this library for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins. Admin functions should be protected within contracts using this library. A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.","eventDecorators":[{"signature":"AddLiquidity(address,uint256[],uint256[],uint256,uint256)","name":"AddLiquidity","description":"The governor sets token whitelist for an ERC1155 token.","parameterDecorators":[{"name":"provider","description":"","recommendedTypes":[],"indexed":true},{"name":"tokenAmounts","description":"","recommendedTypes":[],"indexed":false},{"name":"fees","description":"","recommendedTypes":[],"indexed":false},{"name":"invariant","description":"","recommendedTypes":[],"indexed":false},{"name":"lpTokenSupply","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewAdminFee(uint256)","name":"NewAdminFee","description":"The governor sets token whitelist for an ERC1155 token.","parameterDecorators":[{"name":"newAdminFee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewSwapFee(uint256)","name":"NewSwapFee","description":"The governor sets token whitelist for an ERC1155 token.","parameterDecorators":[{"name":"newSwapFee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RampA(uint256,uint256,uint256,uint256)","name":"RampA","description":"The governor sets token whitelist for an ERC1155 token.","parameterDecorators":[{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false},{"name":"beneficiary","description":"who got the tokens.","recommendedTypes":[],"indexed":false},{"name":"purchaser","description":"who paid for the tokens.","recommendedTypes":[],"indexed":false},{"name":"value","description":"weis paid for purchase.","recommendedTypes":[],"indexed":false}]},{"signature":"RemoveLiquidity(address,uint256[],uint256)","name":"RemoveLiquidity","description":"The governor sets token whitelist for an ERC1155 token.","parameterDecorators":[{"name":"provider","description":"","recommendedTypes":[],"indexed":true},{"name":"tokenAmounts","description":"","recommendedTypes":[],"indexed":false},{"name":"lpTokenSupply","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RemoveLiquidityImbalance(address,uint256[],uint256[],uint256,uint256)","name":"RemoveLiquidityImbalance","description":"The governor sets token whitelist for an ERC1155 token.","parameterDecorators":[{"name":"provider","description":"","recommendedTypes":[],"indexed":true},{"name":"tokenAmounts","description":"","recommendedTypes":[],"indexed":false},{"name":"fees","description":"","recommendedTypes":[],"indexed":false},{"name":"invariant","description":"","recommendedTypes":[],"indexed":false},{"name":"lpTokenSupply","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RemoveLiquidityOne(address,uint256,uint256,uint256,uint256)","name":"RemoveLiquidityOne","description":"The governor sets token whitelist for an ERC1155 token.","parameterDecorators":[{"name":"provider","description":"","recommendedTypes":[],"indexed":true},{"name":"lpTokenAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"lpTokenSupply","description":"","recommendedTypes":[],"indexed":false},{"name":"boughtId","description":"","recommendedTypes":[],"indexed":false},{"name":"tokensBought","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"StopRampA(uint256,uint256)","name":"StopRampA","description":"The governor sets token whitelist for an ERC1155 token.","parameterDecorators":[{"name":"currentA","description":"","recommendedTypes":[],"indexed":false},{"name":"time","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokenSwap(address,uint256,uint256,uint128,uint128)","name":"TokenSwap","description":"The governor sets token whitelist for an ERC1155 token.","parameterDecorators":[{"name":"buyer","description":"","recommendedTypes":[],"indexed":true},{"name":"tokensSold","description":"","recommendedTypes":[],"indexed":false},{"name":"tokensBought","description":"","recommendedTypes":[],"indexed":false},{"name":"soldId","description":"","recommendedTypes":[],"indexed":false},{"name":"boughtId","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"A_PRECISION()","name":"A_PRECISION","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"MAX_A()","name":"MAX_A","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getD(uint256[],uint256)","name":"getD","description":"Get D, the StableSwap invariant, based on a set of balances and a particular A.","parameterDecorators":[{"name":"xp","description":"a precision-adjusted set of pool balances. Array should be the same cardinality as the pool.","recommendedTypes":[]},{"name":"a","description":"the amplification coefficient * n * (n - 1) in A_PRECISION. See the StableSwap paper for details.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"the invariant, at the precision of the pool.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getY(uint256,uint8,uint8,uint256,uint256[])","name":"getY","description":"Calculate the new balances of the tokens given the indexes of the token that is swapped from (FROM) and the token that is swapped to (TO). This function is used as a helper function to calculate how much TO token the user should receive on swap.","parameterDecorators":[{"name":"preciseA","description":"precise form of amplification coefficient.","recommendedTypes":[]},{"name":"tokenIndexFrom","description":"index of FROM token.","recommendedTypes":[]},{"name":"tokenIndexTo","description":"index of TO token.","recommendedTypes":[]},{"name":"x","description":"the new total amount of FROM token.","recommendedTypes":[]},{"name":"xp","description":"balances of the tokens in the pool.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"the amount of TO token that should remain in the pool.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getYD(uint256,uint8,uint256[],uint256)","name":"getYD","description":"Calculate the price of a token in the pool with given precision-adjusted balances and a particular D. This is accomplished via solving the invariant iteratively. See the StableSwap paper and Curve.fi implementation for further details. x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A) x_1**2 + b*x_1 = c x_1 = (x_1**2 + c) / (2*x_1 + b).","parameterDecorators":[{"name":"a","description":"the amplification coefficient * n * (n - 1). See the StableSwap paper for details.","recommendedTypes":[]},{"name":"tokenIndex","description":"Index of token we are calculating for.","recommendedTypes":[]},{"name":"xp","description":"a precision-adjusted set of pool balances. Array should be the same cardinality as the pool.","recommendedTypes":[]},{"name":"d","description":"the stableswap invariant.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"the price of the token, in the same precision as in xp.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}