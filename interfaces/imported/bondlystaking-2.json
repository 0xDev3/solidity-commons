{
  "schema": "../schema.json",
  "tags": [],
  "name": "BondlyStaking",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "addToWhitelist(address)",
      "name": "addToWhitelist",
      "description": "add address to the whitelist.",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "is address to add.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimReward()",
      "name": "claimReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositeReward(uint256)",
      "name": "depositeReward",
      "description": "deposite reward.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "to deposite.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getEarlyWithdrawal()",
      "name": "getEarlyWithdrawal",
      "description": "get the earlyWithdrawal.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "earlyWithdrawal.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFirstStakedAtOf(address)",
      "name": "getFirstStakedAtOf",
      "description": "get the first staked time.",
      "parameterDecorators": [
        {
          "name": "_staker",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "firstStakedAt.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFullMaturity()",
      "name": "getFullMaturity",
      "description": "get the fullMaturity.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "fullMaturity.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPoolPeriod()",
      "name": "getPoolPeriod",
      "description": "get the poolPeriod.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "poolPeriod.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPoolSize()",
      "name": "getPoolSize",
      "description": "get the poolSize.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "poolSize.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPoolStartTime()",
      "name": "getPoolStartTime",
      "description": "get the poolStartTime.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "poolStartTime.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewardAPY()",
      "name": "getRewardAPY",
      "description": "get the rewardAPY.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "rewardAPY.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewardSoFarOf(address)",
      "name": "getRewardSoFarOf",
      "description": "get total claimed reward of staker.",
      "parameterDecorators": [
        {
          "name": "_staker",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "rewardSoFar.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalRewards()",
      "name": "getTotalRewards",
      "description": "get the total remaining rewards.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "_total.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalStakes()",
      "name": "getTotalStakes",
      "description": "calculate entire stake amount.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "_total.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPoolOpen()",
      "name": "isPoolOpen",
      "description": "check if pool is open.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "isOpen",
          "description": "isOpen.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isStakingStarted()",
      "name": "isStakingStarted",
      "description": "check if the staking is started.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "isStarted",
          "description": "isStarted.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeFromWhitelist(address)",
      "name": "removeFromWhitelist",
      "description": "removes address from the whitelist.",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "is address to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewardOf(address)",
      "name": "rewardOf",
      "description": "calculate reward of staker.",
      "parameterDecorators": [
        {
          "name": "_staker",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "reward is the reward amount of the staker.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stake(uint256)",
      "name": "stake",
      "description": "stake BONDLY.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "is the bondly amount to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalStakeOf(address)",
      "name": "totalStakeOf",
      "description": "calculate total stakes of staker.",
      "parameterDecorators": [
        {
          "name": "_staker",
          "description": "is the address of staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "_total.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unstake()",
      "name": "unstake",
      "description": "unstake current staking.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateAPY(uint256)",
      "name": "updateAPY",
      "description": "update the apy.",
      "parameterDecorators": [
        {
          "name": "_newApy",
          "description": "is the new apy for update.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateAccessControl(address)",
      "name": "updateAccessControl",
      "description": "change access control contract.",
      "parameterDecorators": [
        {
          "name": "_accessControl",
          "description": "is new access control contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateEarlyWithdrawal(uint256)",
      "name": "updateEarlyWithdrawal",
      "description": "update the earlyWithdrawal.",
      "parameterDecorators": [
        {
          "name": "_earlyWithdrawal",
          "description": "is the new earlyWithdrawal for update.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateFullMaturity(uint256)",
      "name": "updateFullMaturity",
      "description": "update the fullMaturity.",
      "parameterDecorators": [
        {
          "name": "_fullMaturity",
          "description": "is the new fullMaturity for update.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePoolPeriod(uint256)",
      "name": "updatePoolPeriod",
      "description": "update the contribution period.",
      "parameterDecorators": [
        {
          "name": "_poolPeriod",
          "description": "is the new period for update.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}