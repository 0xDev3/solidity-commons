{"schema":"../schema.json","tags":[],"name":"CryptographIndexLogicV1","description":"Cryptograph Index Logic Contract. This contract and its functions should be called by the relevant proxy smart contract only. Provide the logic code related to remembering the address of all the published cryptographs. Cast this contract on the proxy.","eventDecorators":[],"functionDecorators":[{"signature":"ERC2665Lieutenant()","name":"ERC2665Lieutenant","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"communityCryptographs(uint256)","name":"communityCryptographs","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"createACommunityEdition(address,uint256)","name":"createACommunityEdition","description":"Create a new community edition and return the new index position. Only callable by Factory.","parameterDecorators":[{"name":"_minter","description":"The address of the user wallet that will have the responsability to mint all the editions.","recommendedTypes":[]},{"name":"_editionSize","description":"The maximum number of community cryptograph that can be minted in the edition.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"(uint) The new index position in the cryptograph community array.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"createACommunityGGBMA(address,uint256)","name":"createACommunityGGBMA","description":"Create a new cryptograph community edition starting at 0 and return the new index position. Only callable by Factory.","parameterDecorators":[{"name":"_minter","description":"The address of the user wallet that will have the responsability to mint all the editions.","recommendedTypes":[]},{"name":"_editionSize","description":"The maximum number of cryptograph that can be minted in the edition.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"(uint) The new index position in the community cryptograph array.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"createAGGBMA(address,uint256)","name":"createAGGBMA","description":"Create a new cryptograph edition starting at 0 and return the new index position. Only callable by Factory.","parameterDecorators":[{"name":"_minter","description":"The address of the user wallet that will have the responsability to mint all the editions.","recommendedTypes":[]},{"name":"_editionSize","description":"The maximum number of cryptograph that can be minted in the edition.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"(uint) The new index position in the cryptograph array.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"createAnEdition(address,uint256)","name":"createAnEdition","description":"Create a new cryptograph edition and return the new index position. Only callable by Factory.","parameterDecorators":[{"name":"_minter","description":"The address of the user wallet that will have the responsability to mint all the editions.","recommendedTypes":[]},{"name":"_editionSize","description":"The maximum number of cryptograph that can be minted in the edition.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"(uint) The new index position in the cryptograph array.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"cryptographType(address)","name":"cryptographType","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"cryptographs(uint256)","name":"cryptographs","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"editionSizes(address)","name":"editionSizes","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"factory()","name":"factory","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getCryptograph(uint256,bool,uint256)","name":"getCryptograph","description":"Return the address of a Cryptograph using it's parameters. You can then cast this address as a Cryptograph to recover the single auction associated.","parameterDecorators":[{"name":"_cryptographIssue","description":"The issue # of the Cryptograph.","recommendedTypes":[]},{"name":"_isOfficial","description":"True if official Cryptograph, false if community Cryptograph.","recommendedTypes":[]},{"name":"_editionSerial","description":"The edition serial # of the Cryptograph. Ignored if the Cryptograph is not an edition.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The address of the grabbed cryptograph.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"indexerLogicCodeIndex()","name":"indexerLogicCodeIndex","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"init(address,uint256,address)","name":"init","description":"Init function of the Index. Callable only once after deployment.","parameterDecorators":[{"name":"_factory","description":"The address of the CryptographFactory Instance.","recommendedTypes":[]},{"name":"_indexerLogicCodeIndex","description":"The index in the VC of editionIndexers logic code.","recommendedTypes":[]},{"name":"_ERC2665Lieutenant","description":"The address of the ERC721 Instance.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"initialized()","name":"initialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"insertACommunityCryptograph(address)","name":"insertACommunityCryptograph","description":"Insert a community cryptograph in the array and return the new index position. Only callable by Factory.","parameterDecorators":[{"name":"_communityCryptograph","description":"The address of the community cryptograph to insert in the index.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"(uint) The new index position in the community cryptograph array.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"insertACryptograph(address)","name":"insertACryptograph","description":"Insert a cryptograph in the array and return the new index position. Only callable by Factory.","parameterDecorators":[{"name":"_cryptograph","description":"The address of the cryptograph to insert in the index.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"(uint) The new index position in the cryptograph array.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"mintAnEdition(address,uint256,bool,address)","name":"mintAnEdition","description":"Mint an Edition Cryptograph. Only callable by Factory.","parameterDecorators":[{"name":"_minter","description":"The address of the user wallet that is minting the cryptograph.","recommendedTypes":[]},{"name":"_cryptographIssue","description":"The issue # of the edition we are minting a new member of.","recommendedTypes":[]},{"name":"_isOfficial","description":"Is it a community edition or not ?.","recommendedTypes":[]},{"name":"_cryptograph","description":"The address of the cryptograph we are inserting in the edition indexer.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"(uint) The serial of the newly inserted cryptograph.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"mintAnEditionAt(uint256,uint256,bool,address)","name":"mintAnEditionAt","description":"Mint an Edition Cryptograph with a specific serial. Only callable by Factory.","parameterDecorators":[{"name":"_cryptographIssue","description":"The issue # of the edition we are minting a new member of.","recommendedTypes":[]},{"name":"_cryptographSerial","description":"The serial # we want to insert in the edition.","recommendedTypes":[]},{"name":"_isOfficial","description":"Is it a community edition or not ?.","recommendedTypes":[]},{"name":"_cryptograph","description":"The address of the cryptograph we are inserting in the edition indexer.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}