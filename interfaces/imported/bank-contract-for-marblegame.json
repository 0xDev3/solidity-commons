{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "MarbleBank",
  "description": "Bank contract for Marblegame. This contract allows depositing and withdrawing any ERC20 type tokens for users. It also allows other Marble contracts to use this one for payments for their services (e.g. creating a page candidate).",
  "eventDecorators": [
    {
      "signature": "AffiliateAdded(address)",
      "name": "AffiliateAdded",
      "description": "Event emited when a new affiliate is added.",
      "parameterDecorators": [
        {
          "name": "affiliate",
          "description": "Address of the affiliate.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AffiliateRemoved(address)",
      "name": "AffiliateRemoved",
      "description": "Event emited when an existing affiliate is removed.",
      "parameterDecorators": [
        {
          "name": "affiliate",
          "description": "Address of removed affiliate.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Deposit(uint256,address,address,address,uint256,string)",
      "name": "Deposit",
      "description": "Event emited when a user deposits tokens to the bank.",
      "parameterDecorators": [
        {
          "name": "transactionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "from",
          "description": "Address of the user which deposited the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "Address of the user whose account received the deposited tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "Address of the token which was deposited.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "Amount of the deposited tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "note",
          "description": "Description of the transaction.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Payment(uint256,address,address,address,uint256,string)",
      "name": "Payment",
      "description": "Event emited when a payment in tokens occurs.",
      "parameterDecorators": [
        {
          "name": "transactionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "from",
          "description": "Address of the paying user.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "Address of the user which received the payment.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "Address of the token in which the payment was executed.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "Amount of the tokens transfered during the payment.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "note",
          "description": "Description of the transaction.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdrawal(uint256,address,address,uint256,string)",
      "name": "Withdrawal",
      "description": "Event emited when a user withdraws his tokens from the bank.",
      "parameterDecorators": [
        {
          "name": "transactionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "user",
          "description": "Address of the user which withdrawn the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "Address of the token which was withdrawn.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "Amount of the withdrawn tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "note",
          "description": "Description of the transaction.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "accounts(address)",
      "name": "accounts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "userAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "exists",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addAffiliate(address)",
      "name": "addAffiliate",
      "description": "Add the specified user to the list of bank's affiliates. Adds new affiliate. If the address already is affiliate, the transaction reverts. Can be executed only by the owner of this contract. At the end, emits AffiliateAdded event.",
      "parameterDecorators": [
        {
          "name": "newAffiliate",
          "description": "Address if the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(address,uint256,address,string)",
      "name": "deposit",
      "description": "Deposits given amount of given token to the bank. Deposits the tokens to the user's account. If the account does not exists, it is created. Also requires that the user actually has the given amount of tokens. At the end, it emits Deposit event.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Address of the token to be deposited.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of tokens to be deposited.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Address of a user to whose account the tokens are to be deposited.",
          "recommendedTypes": []
        },
        {
          "name": "note",
          "description": "Note for the bank transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hasEnoughTokens(address,uint256,address)",
      "name": "hasEnoughTokens",
      "description": "Checks whether the specified user has specified amount of tokens. This can be used by other contracts to check, whether a user has enough tokens to execute a payment.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Address of the tested token.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of tokens to be checked.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "Address of the tested user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "hasEnough",
          "description": "True, if the user has the corresponding account and specified amount of tokens, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAffiliate(address)",
      "name": "isAffiliate",
      "description": "Checkes, whether the given user is on the list of bank's affiliates.",
      "parameterDecorators": [
        {
          "name": "testedAddress",
          "description": "Address of the user to be tested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "addressIsAffiliate",
          "description": "True, if the user is affiliate, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pay(address,uint256,address,string)",
      "name": "pay",
      "description": "Pays the given amount of given tokens to the specified address. Transfers tokens to the given address, decreasing balance of the user which is paying. Requires that the paying user has account for the given token and enough tokens stored there. At the end, it emits Payment event.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Address of the token to be paid with.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of tokens to be paid.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Address which receives the payment.",
          "recommendedTypes": []
        },
        {
          "name": "note",
          "description": "Note for the bank transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "payByAffiliate(address,uint256,address,address,string)",
      "name": "payByAffiliate",
      "description": "Execute payment by affiliate on behalf of a user. Transfers tokens from the specified account to the specified account. Requires that the msg.sender is affiiliate and the user on whose behalf the payment is executed has enough tokens in the bank. At the end, it emits Payment event.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Address of the token to be paid with.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of tokens to be paid.",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "Address of the user which is paying.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Address which receives the payment.",
          "recommendedTypes": []
        },
        {
          "name": "note",
          "description": "Note for the bank transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeAffiliate(address)",
      "name": "removeAffiliate",
      "description": "Remove the specifiied user from the list of bank's affiliates. Removes the given affiliate. If the address is not affiliate, the transaction reverts. Can be executed only by the owner of this contract. At the end, it emits AffiliateRemoved contract.",
      "parameterDecorators": [
        {
          "name": "affiliate",
          "description": "Address if the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transactions(uint256)",
      "name": "transactions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "note",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userBalance(address,address)",
      "name": "userBalance",
      "description": "Get balance of the given tokens and the given user.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Address of the token whose balance this method will return.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "Address of the user whose balance this method returns.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "balance",
          "description": "Amount of token the user has in his account (or zero if the account does not exist).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(address,uint256,string)",
      "name": "withdraw",
      "description": "Withdraws the given amount of the given tokens from the user's account. Withdraws token from the user's account. Requires that the user has account for the given token and has at least the withdraw amount tokens stored in it. At the end, it emits Withdrawal event.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Address of the token to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of the tokens to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "note",
          "description": "Note for the bank transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}