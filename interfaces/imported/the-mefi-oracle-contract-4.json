{
  "schema": "../schema.json",
  "tags": [
    "oracles"
  ],
  "name": "Oracle",
  "description": "The Mefi Oracle contract. Node operators can deploy this contract to fulfill requests sent to them.",
  "eventDecorators": [
    {
      "signature": "CancelOracleRequest(bytes32)",
      "name": "CancelOracleRequest",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OracleRequest(bytes32,address,bytes32,uint256,address,bytes4,uint256,uint256,bytes)",
      "name": "OracleRequest",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "specId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "payment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "callbackAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "callbackFunctionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cancelExpiration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "dataVersion",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "event for signaling salvaged non-token assets.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens salvaged.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "salvaged token address.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "EXPIRY_TIME()",
      "name": "EXPIRY_TIME",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelOracleRequest(bytes32,uint256,bytes4,uint256)",
      "name": "cancelOracleRequest",
      "description": "Allows requesters to cancel requests sent to this oracle contract. Will transfer the MDT sent for the request back to the requester's address. Given params must hash to a commitment stored on the contract in order for the request to be valid Emits CancelOracleRequest event.",
      "parameterDecorators": [
        {
          "name": "_requestId",
          "description": "The request ID.",
          "recommendedTypes": []
        },
        {
          "name": "_payment",
          "description": "The amount of payment given (specified in wei).",
          "recommendedTypes": []
        },
        {
          "name": "_callbackFunc",
          "description": "The requester's specified callback address.",
          "recommendedTypes": []
        },
        {
          "name": "_expiration",
          "description": "The time of the expiration for the request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)",
      "name": "fulfillOracleRequest",
      "description": "Called by the Chainlink node to fulfill requests. Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
      "parameterDecorators": [
        {
          "name": "_requestId",
          "description": "The fulfillment request ID that must match the requester's.",
          "recommendedTypes": []
        },
        {
          "name": "_payment",
          "description": "The payment amount that will be released for the oracle (specified in wei).",
          "recommendedTypes": []
        },
        {
          "name": "_callbackAddress",
          "description": "The callback address to call for fulfillment.",
          "recommendedTypes": []
        },
        {
          "name": "_callbackFunctionId",
          "description": "The callback function ID to use for fulfillment.",
          "recommendedTypes": []
        },
        {
          "name": "_expiration",
          "description": "The expiration that the node should respond by before the requester can cancel.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The data to return to the consuming contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Status if the external call was successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAuthorizationStatus(address)",
      "name": "getAuthorizationStatus",
      "description": "Use this to check if a node is authorized for fulfilling requests.",
      "parameterDecorators": [
        {
          "name": "_node",
          "description": "The address of the Chainlink node.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The authorization status of the node.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMefiOraclePayment()",
      "name": "getMefiOraclePayment",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMefiToken()",
      "name": "getMefiToken",
      "description": "Returns the address of the MDT. This is the public implementation for mefiTokenAddress, which is an internal method of the MefiClient contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onTokenTransfer(address,uint256,bytes)",
      "name": "onTokenTransfer",
      "description": "Called when MDT is sent to the contract via `transferAndCall`. The data payload's first 2 words will be overwritten by the `_sender` and `_amount` values to ensure correctness. Calls oracleRequest.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "Address of the sender.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount of MDT sent (specified in wei).",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "Payload of the transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)",
      "name": "oracleRequest",
      "description": "Creates the Mefi request. Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Mefi node to detect.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "The sender of the request.",
          "recommendedTypes": []
        },
        {
          "name": "_payment",
          "description": "The amount of payment given (specified in wei).",
          "recommendedTypes": []
        },
        {
          "name": "_specId",
          "description": "The Job Specification ID.",
          "recommendedTypes": []
        },
        {
          "name": "_callbackAddress",
          "description": "The callback address for the response.",
          "recommendedTypes": []
        },
        {
          "name": "_callbackFunctionId",
          "description": "The callback function ID for the response.",
          "recommendedTypes": []
        },
        {
          "name": "_nonce",
          "description": "The nonce sent by the requester.",
          "recommendedTypes": []
        },
        {
          "name": "_dataVersion",
          "description": "The specified data version.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The CBOR payload of the request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setFulfillmentPermission(address,bool)",
      "name": "setFulfillmentPermission",
      "description": "Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.",
      "parameterDecorators": [
        {
          "name": "_node",
          "description": "The address of the Chainlink node.",
          "recommendedTypes": []
        },
        {
          "name": "_allowed",
          "description": "Bool value to determine if the node can fulfill requests.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMefiOraclePayment(uint256)",
      "name": "setMefiOraclePayment",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_payment",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(address,uint256)",
      "name": "withdraw",
      "description": "Allows the node operator to withdraw earned MDT to a given address. The owner of the contract can be another wallet and does not have to be a Mefi node.",
      "parameterDecorators": [
        {
          "name": "_recipient",
          "description": "The address to send the MDT to.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount to send (specified in wei).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawable()",
      "name": "withdrawable",
      "description": "Displays the amount of MDT that is available for the node operator to withdraw. We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of withdrawable MDT on the contract.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}