{"schema":"../schema.json","tags":["escrows"],"name":"Escrow","description":"","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when someone unbundles tokens from the bundle using the rakeback contract.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RegistrySet(address)","name":"RegistrySet","description":"Emitted when someone unbundles tokens from the bundle using the rakeback contract.","parameterDecorators":[{"name":"registryAddress","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Revocation(bytes32,address,address,uint256,address)","name":"Revocation","description":"Emitted when someone unbundles tokens from the bundle using the rakeback contract.","parameterDecorators":[{"name":"account","description":"- The token recipient.","recommendedTypes":[],"indexed":true},{"name":"amount","description":"- The amount sent to unbundle.","recommendedTypes":[],"indexed":true},{"name":"bundleAddress","description":"- The bundle from which the token was unbundled.","recommendedTypes":[],"indexed":true},{"name":"receivedAmount","description":"- The amount after fees (these may change in the rakeback and are therefore explicit).","recommendedTypes":[],"indexed":false},{"name":"tokenAddress","description":"- The address of the vanilla underlying.","recommendedTypes":[],"indexed":false}]},{"signature":"Transfer(address,bytes32,address,uint256,address,uint256)","name":"Transfer","description":"Emitted when someone unbundles tokens from the bundle using the rakeback contract.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"identifier","description":"","recommendedTypes":[],"indexed":true},{"name":"token","description":"","recommendedTypes":[],"indexed":true},{"name":"value","description":"","recommendedTypes":[],"indexed":false},{"name":"paymentId","description":"","recommendedTypes":[],"indexed":false},{"name":"minAttestations","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Withdrawal(bytes32,address,address,uint256,address)","name":"Withdrawal","description":"Emitted when someone unbundles tokens from the bundle using the rakeback contract.","parameterDecorators":[{"name":"account","description":"- The token recipient.","recommendedTypes":[],"indexed":true},{"name":"amount","description":"- The amount sent to unbundle.","recommendedTypes":[],"indexed":true},{"name":"bundleAddress","description":"- The bundle from which the token was unbundled.","recommendedTypes":[],"indexed":true},{"name":"receivedAmount","description":"- The amount after fees (these may change in the rakeback and are therefore explicit).","recommendedTypes":[],"indexed":false},{"name":"tokenAddress","description":"- The address of the vanilla underlying.","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"escrowedPayments(address)","name":"escrowedPayments","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"recipientIdentifier","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"sender","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"token","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"value","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"sentIndex","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"receivedIndex","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"timestamp","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"expirySeconds","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"minAttestations","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getReceivedPaymentIds(bytes32)","name":"getReceivedPaymentIds","description":"Gets array of all Escrowed Payments received by identifier.","parameterDecorators":[{"name":"identifier","description":"The hash of an identifier of the receiver of the escrowed payment.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getSentPaymentIds(address)","name":"getSentPaymentIds","description":"Gets array of all Escrowed Payment IDs sent by sender.","parameterDecorators":[{"name":"sender","description":"The address of the sender of the escrowed payments.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getVersionNumber()","name":"getVersionNumber","description":"Returns the storage, major, minor, and patch version of the contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address)","name":"initialize","description":"Used in place of the constructor to allow the contract to be upgradable via proxy.","parameterDecorators":[{"name":"registryAddress","description":"The address of the registry core smart contract.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialized()","name":"initialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"receivedPaymentIds(bytes32,uint256)","name":"receivedPaymentIds","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"registry()","name":"registry","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"revoke(address)","name":"revoke","description":"Revokes tokens for a sender who is redeeming a payment after it has expired. Throws if 'token' or 'value' is 0.Throws if msg.sender is not the sender of payment.Throws if redeem time hasn't been reached yet.","parameterDecorators":[{"name":"paymentId","description":"The ID for the EscrowedPayment struct that contains all relevant information.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"sentPaymentIds(address,uint256)","name":"sentPaymentIds","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"setRegistry(address)","name":"setRegistry","description":"Updates the address pointing to a Registry contract.","parameterDecorators":[{"name":"registryAddress","description":"The address of a registry contract for routing to other contracts.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transfer(bytes32,address,uint256,uint256,address,uint256)","name":"transfer","description":"Transfer tokens to a specific user. Supports both identity with privacy (an empty identifier and 0 minAttestations) and without (with identifier and minAttestations). Throws if 'token' or 'value' is 0.msg.sender needs to have already approved this contract to transferIf no identifier is given, then minAttestations must be 0.","parameterDecorators":[{"name":"identifier","description":"The hashed identifier of a user to transfer to.","recommendedTypes":[]},{"name":"token","description":"The token to be transferred.","recommendedTypes":[]},{"name":"value","description":"The amount to be transferred.","recommendedTypes":[]},{"name":"expirySeconds","description":"The number of seconds before the sender can revoke the payment.","recommendedTypes":[]},{"name":"paymentId","description":"The address of the temporary wallet associated with this payment. Users must prove ownership of the corresponding private key to withdraw from escrow.","recommendedTypes":[]},{"name":"minAttestations","description":"The min number of attestations required to withdraw the payment.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw(address,uint8,bytes32,bytes32)","name":"withdraw","description":"Withdraws tokens for a verified user. Throws if 'token' or 'value' is 0.Throws if msg.sender does not prove ownership of the withdraw key.","parameterDecorators":[{"name":"paymentId","description":"The ID for the EscrowedPayment struct that contains all relevant information.","recommendedTypes":[]},{"name":"v","description":"The recovery id of the incoming ECDSA signature.","recommendedTypes":[]},{"name":"r","description":"Output value r of the ECDSA signature.","recommendedTypes":[]},{"name":"s","description":"Output value s of the ECDSA signature.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false}]}