{"schema":"../schema.json","tags":[],"name":"PrizeDistributionBuffer","description":"TricleStaking V1 PrizeDistributionBuffer. The PrizeDistributionBuffer contract provides historical lookups of PrizeDistribution struct parameters (linked with a Draw ID) via a circular ring buffer. Historical PrizeDistribution parameters can be accessed on-chain using a drawId to calculate ring buffer storage slot. The PrizeDistribution parameters can be created by manager/owner and existing PrizeDistribution parameters can only be updated the owner. When adding a new PrizeDistribution basic sanity checks will be used to validate the incoming parameters.","eventDecorators":[{"signature":"Deployed(uint8)","name":"Deployed","description":"Emitted when the contract is deployed.","parameterDecorators":[{"name":"cardinality","description":"The maximum number of records in the buffer before they begin to expire.","recommendedTypes":[],"indexed":false}]},{"signature":"ManagerTransferred(address,address)","name":"ManagerTransferred","description":"","parameterDecorators":[{"name":"previousManager","description":"","recommendedTypes":[],"indexed":true},{"name":"newManager","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipOffered(address)","name":"OwnershipOffered","description":"","parameterDecorators":[{"name":"pendingOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"PrizeDistributionSet(uint32,tuple)","name":"PrizeDistributionSet","description":"","parameterDecorators":[{"name":"drawId","description":"","recommendedTypes":[],"indexed":true},{"name":"prizeDistribution","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"claimOwnership()","name":"claimOwnership","description":"Allows the `_pendingOwner` address to finalize the transfer. This function is only callable by the `_pendingOwner`.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getBufferCardinality()","name":"getBufferCardinality","description":"Read a ring buffer cardinality.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"Ring buffer cardinality.","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":true},{"signature":"getNewestPrizeDistribution()","name":"getNewestPrizeDistribution","description":"Read newest PrizeDistribution from prize distributions ring buffer. Uses nextDrawIndex to calculate the most recently added PrizeDistribution.","parameterDecorators":[],"returnDecorators":[{"name":"prizeDistribution","description":"prizeDistribution.","recommendedTypes":[],"solidityType":"tuple"},{"name":"drawId","description":"drawId.","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":true},{"signature":"getOldestPrizeDistribution()","name":"getOldestPrizeDistribution","description":"Read oldest PrizeDistribution from prize distributions ring buffer. Finds the oldest Draw by buffer.nextIndex and buffer.lastDrawId.","parameterDecorators":[],"returnDecorators":[{"name":"prizeDistribution","description":"prizeDistribution.","recommendedTypes":[],"solidityType":"tuple"},{"name":"drawId","description":"drawId.","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":true},{"signature":"getPrizeDistribution(uint32)","name":"getPrizeDistribution","description":"Gets the PrizeDistributionBuffer for a drawId.","parameterDecorators":[{"name":"drawId","description":"drawId.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"prizeDistribution.","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"getPrizeDistributionCount()","name":"getPrizeDistributionCount","description":"Gets the number of PrizeDistributions stored in the prize distributions ring buffer. If no Draws have been pushed, it will return 0.If the ring buffer is full, it will return the cardinality.Otherwise, it will return the NewestPrizeDistribution index + 1.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"Number of PrizeDistributions stored in the prize distributions ring buffer.","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":true},{"signature":"getPrizeDistributions(uint32[])","name":"getPrizeDistributions","description":"Gets PrizeDistribution list from array of drawIds.","parameterDecorators":[{"name":"drawIds","description":"drawIds to get PrizeDistribution for.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"prizeDistributionList.","recommendedTypes":[],"solidityType":"tuple[]"}],"emittableEvents":[],"readOnly":true},{"signature":"manager()","name":"manager","description":"Gets current `_manager`.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"Current `_manager` address.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingOwner()","name":"pendingOwner","description":"Gets current `_pendingOwner`.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"Current `_pendingOwner` address.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pushPrizeDistribution(uint32,tuple(uint8,uint8,uint32,uint32,uint32,uint32,uint104,uint32[16],uint256))","name":"pushPrizeDistribution","description":"Adds new PrizeDistribution record to ring buffer storage. Only callable by the owner or manager.","parameterDecorators":[{"name":"drawId","description":"Draw ID linked to PrizeDistribution parameters.","recommendedTypes":[]},{"name":"prizeDistribution","description":"PrizeDistribution parameters struct.","recommendedTypes":[],"parameters":[{"name":"bitRangeSize","description":"","type":"uint8"},{"name":"matchCardinality","description":"","type":"uint8"},{"name":"startTimestampOffset","description":"","type":"uint32"},{"name":"endTimestampOffset","description":"","type":"uint32"},{"name":"maxPicksPerUser","description":"","type":"uint32"},{"name":"expiryDuration","description":"","type":"uint32"},{"name":"numberOfPicks","description":"","type":"uint104"},{"name":"tiers","description":"","type":"uint32[16]"},{"name":"prize","description":"","type":"uint256"}]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Renounce ownership of the contract. Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setManager(address)","name":"setManager","description":"Set or change of manager. Throws if called by any account other than the owner.","parameterDecorators":[{"name":"_newManager","description":"New _manager address.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Boolean to indicate if the operation was successful or not.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setPrizeDistribution(uint32,tuple(uint8,uint8,uint32,uint32,uint32,uint32,uint104,uint32[16],uint256))","name":"setPrizeDistribution","description":"Sets existing PrizeDistribution with new PrizeDistribution parameters in ring buffer storage. Retroactively updates an existing PrizeDistribution and should be thought of as a \"safety\" fallback. If the manager is setting invalid PrizeDistribution parameters the Owner can update the invalid parameters with correct parameters.","parameterDecorators":[{"name":"_drawId","description":"","recommendedTypes":[]},{"name":"_prizeDistribution","description":"","recommendedTypes":[],"parameters":[{"name":"bitRangeSize","description":"","type":"uint8"},{"name":"matchCardinality","description":"","type":"uint8"},{"name":"startTimestampOffset","description":"","type":"uint32"},{"name":"endTimestampOffset","description":"","type":"uint32"},{"name":"maxPicksPerUser","description":"","type":"uint32"},{"name":"expiryDuration","description":"","type":"uint32"},{"name":"numberOfPicks","description":"","type":"uint104"},{"name":"tiers","description":"","type":"uint32[16]"},{"name":"prize","description":"","type":"uint256"}]}],"returnDecorators":[{"name":"_0","description":"drawId.","recommendedTypes":[],"solidityType":"uint32"}],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Allows current owner to set the `_pendingOwner` address.","parameterDecorators":[{"name":"_newOwner","description":"Address to transfer ownership to.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}