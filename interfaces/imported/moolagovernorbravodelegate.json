{
  "schema": "../schema.json",
  "tags": [],
  "name": "MoolaGovernorBravoDelegate",
  "description": "",
  "eventDecorators": [
    {
      "signature": "NewAdmin(address,address)",
      "name": "NewAdmin",
      "description": "Emitted when pendingAdmin is accepted, which means admin is updated. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "oldAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewImplementation(address,address)",
      "name": "NewImplementation",
      "description": "Emitted when implementation is changed. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "oldImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewPendingAdmin(address,address)",
      "name": "NewPendingAdmin",
      "description": "Emitted when pendingAdmin is changed. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "oldPendingAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newPendingAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalCanceled(uint256)",
      "name": "ProposalCanceled",
      "description": "An event emitted when a proposal has been canceled. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)",
      "name": "ProposalCreated",
      "description": "An event emitted when a new proposal is created. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proposer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "targets",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "values",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "signatures",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "calldatas",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "startBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "endBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "description",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalExecuted(uint256)",
      "name": "ProposalExecuted",
      "description": "An event emitted when a proposal has been executed in the Timelock. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalQueued(uint256,uint256)",
      "name": "ProposalQueued",
      "description": "An event emitted when a proposal has been queued in the Timelock. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "eta",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalThresholdSet(uint256,uint256)",
      "name": "ProposalThresholdSet",
      "description": "Emitted when proposal threshold is set. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "oldProposalThreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newProposalThreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VoteCast(address,uint256,uint8,uint256,string)",
      "name": "VoteCast",
      "description": "An event emitted when a vote has been cast on a proposal. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "voter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "support",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "votes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reason",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VotingDelaySet(uint256,uint256)",
      "name": "VotingDelaySet",
      "description": "An event emitted when the voting delay is set. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "oldVotingDelay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newVotingDelay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VotingPeriodSet(uint256,uint256)",
      "name": "VotingPeriodSet",
      "description": "An event emitted when the voting period is set. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "oldVotingPeriod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newVotingPeriod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WhitelistAccountExpirationSet(address,uint256)",
      "name": "WhitelistAccountExpirationSet",
      "description": "Emitted when whitelist account expiration is set. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "expiration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WhitelistGuardianSet(address,address)",
      "name": "WhitelistGuardianSet",
      "description": "Emitted when the whitelistGuardian is set. Event that is fired each time someone harvests the strat.",
      "parameterDecorators": [
        {
          "name": "oldGuardian",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newGuardian",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "BALLOT_TYPEHASH()",
      "name": "BALLOT_TYPEHASH",
      "description": "The EIP-712 typehash for the ballot struct used by the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DOMAIN_TYPEHASH()",
      "name": "DOMAIN_TYPEHASH",
      "description": "The EIP-712 typehash for the contract's domain.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_PROPOSAL_THRESHOLD()",
      "name": "MAX_PROPOSAL_THRESHOLD",
      "description": "The maximum setable proposal threshold.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_VOTING_DELAY()",
      "name": "MAX_VOTING_DELAY",
      "description": "The max setable voting delay.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_VOTING_PERIOD()",
      "name": "MAX_VOTING_PERIOD",
      "description": "The max setable voting period.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MIN_PROPOSAL_THRESHOLD()",
      "name": "MIN_PROPOSAL_THRESHOLD",
      "description": "The minimum setable proposal threshold.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MIN_VOTING_DELAY()",
      "name": "MIN_VOTING_DELAY",
      "description": "The min setable voting delay.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MIN_VOTING_PERIOD()",
      "name": "MIN_VOTING_PERIOD",
      "description": "The minimum setable voting period.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_acceptAdmin()",
      "name": "_acceptAdmin",
      "description": "Accepts transfer of admin rights. msg.sender must be pendingAdmin. Admin function for pending admin to accept role and update admin.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_initiate()",
      "name": "_initiate",
      "description": "Initiate the GovernorBravo contract. Admin only. Sets admin role for timelock.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setPendingAdmin(address)",
      "name": "_setPendingAdmin",
      "description": "Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer. Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.",
      "parameterDecorators": [
        {
          "name": "newPendingAdmin",
          "description": "New pending admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setProposalThreshold(uint256)",
      "name": "_setProposalThreshold",
      "description": "Admin function for setting the proposal threshold. newProposalThreshold must be greater than the hardcoded min.",
      "parameterDecorators": [
        {
          "name": "newProposalThreshold",
          "description": "new proposal threshold.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setVotingDelay(uint256)",
      "name": "_setVotingDelay",
      "description": "Admin function for setting the voting delay.",
      "parameterDecorators": [
        {
          "name": "newVotingDelay",
          "description": "new voting delay, in blocks.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setVotingPeriod(uint256)",
      "name": "_setVotingPeriod",
      "description": "Admin function for setting the voting period.",
      "parameterDecorators": [
        {
          "name": "newVotingPeriod",
          "description": "new voting period, in blocks.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setWhitelistAccountExpiration(address,uint256)",
      "name": "_setWhitelistAccountExpiration",
      "description": "Admin function for setting the whitelist expiration as a timestamp for an account. Whitelist status allows accounts to propose without meeting threshold.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Account address to set whitelist expiration for.",
          "recommendedTypes": []
        },
        {
          "name": "expiration",
          "description": "Expiration for account whitelist status as timestamp (if now < expiration, whitelisted).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "_setWhitelistGuardian(address)",
      "name": "_setWhitelistGuardian",
      "description": "Admin function for setting the whitelistGuardian. WhitelistGuardian can cancel proposals from whitelisted addresses.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Account to set whitelistGuardian to (0x0 to remove whitelistGuardian).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "admin()",
      "name": "admin",
      "description": "Administrator for this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancel(uint256)",
      "name": "cancel",
      "description": "Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The id of the proposal to cancel.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "castVote(uint256,uint8)",
      "name": "castVote",
      "description": "Cast a vote for a proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The id of the proposal to vote on.",
          "recommendedTypes": []
        },
        {
          "name": "support",
          "description": "The support value for the vote. 0=against, 1=for, 2=abstain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
      "name": "castVoteBySig",
      "description": "Cast a vote for a proposal by signature. External function that accepts EIP-712 signatures for voting on proposals.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "support",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "castVoteWithReason(uint256,uint8,string)",
      "name": "castVoteWithReason",
      "description": "Cast a vote for a proposal with a reason.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The id of the proposal to vote on.",
          "recommendedTypes": []
        },
        {
          "name": "support",
          "description": "The support value for the vote. 0=against, 1=for, 2=abstain.",
          "recommendedTypes": []
        },
        {
          "name": "reason",
          "description": "The reason given for the vote by the voter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "execute(uint256)",
      "name": "execute",
      "description": "Executes a queued proposal if eta has passed.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The id of the proposal to execute.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getActions(uint256)",
      "name": "getActions",
      "description": "Gets actions of a proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "the id of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "targets",
          "description": "of the proposal actions.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "values",
          "description": "of the proposal actions.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "signatures",
          "description": "of the proposal actions.",
          "recommendedTypes": [],
          "solidityType": "string[]"
        },
        {
          "name": "calldatas",
          "description": "of the proposal actions.",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReceipt(uint256,address)",
      "name": "getReceipt",
      "description": "Gets the receipt for a voter on a given proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "the id of proposal.",
          "recommendedTypes": []
        },
        {
          "name": "voter",
          "description": "The address of the voter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The voting receipt.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "hasVoted",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "support",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint8"
            },
            {
              "name": "votes",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint96"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "implementation()",
      "name": "implementation",
      "description": "Active brains of Governor.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialProposalId()",
      "name": "initialProposalId",
      "description": "Initial proposal id set at become.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,uint256,uint256,uint256)",
      "name": "initialize",
      "description": "Used to initialize the contract during delegator constructor.",
      "parameterDecorators": [
        {
          "name": "timelock_",
          "description": "The address of the Timelock.",
          "recommendedTypes": []
        },
        {
          "name": "moo_",
          "description": "The address of the MOO token.",
          "recommendedTypes": []
        },
        {
          "name": "votingPeriod_",
          "description": "The initial voting period.",
          "recommendedTypes": []
        },
        {
          "name": "votingDelay_",
          "description": "The initial voting delay.",
          "recommendedTypes": []
        },
        {
          "name": "proposalThreshold_",
          "description": "The initial proposal threshold.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isWhitelisted(address)",
      "name": "isWhitelisted",
      "description": "View function which returns if an account is whitelisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Account to check white list status of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "If the account is whitelisted.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestProposalIds(address)",
      "name": "latestProposalIds",
      "description": "The latest proposal for each proposer.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "moo()",
      "name": "moo",
      "description": "The address of the Moola governance token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "name()",
      "name": "name",
      "description": "The name of this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingAdmin()",
      "name": "pendingAdmin",
      "description": "Pending administrator for this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposalCount()",
      "name": "proposalCount",
      "description": "The total number of proposals.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposalMaxOperations()",
      "name": "proposalMaxOperations",
      "description": "The maximum number of actions that can be included in a proposal.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposalThreshold()",
      "name": "proposalThreshold",
      "description": "The number of votes required in order for a voter to become a proposer.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposals(uint256)",
      "name": "proposals",
      "description": "The official record of all proposals ever proposed.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "proposer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "eta",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "startBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "endBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "forVotes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "againstVotes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "abstainVotes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "canceled",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "executed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "propose(address[],uint256[],string[],bytes[],string)",
      "name": "propose",
      "description": "Function used to propose a new proposal. Sender must have delegates above the proposal threshold.",
      "parameterDecorators": [
        {
          "name": "targets",
          "description": "Target addresses for proposal calls.",
          "recommendedTypes": []
        },
        {
          "name": "values",
          "description": "Eth values for proposal calls.",
          "recommendedTypes": []
        },
        {
          "name": "signatures",
          "description": "Function signatures for proposal calls.",
          "recommendedTypes": []
        },
        {
          "name": "calldatas",
          "description": "Calldatas for proposal calls.",
          "recommendedTypes": []
        },
        {
          "name": "description",
          "description": "String description of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Proposal id of new proposal.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "queue(uint256)",
      "name": "queue",
      "description": "Queues a proposal of state succeeded.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The id of the proposal to queue.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "quorumVotes()",
      "name": "quorumVotes",
      "description": "The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "state(uint256)",
      "name": "state",
      "description": "Gets the state of a proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The id of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Proposal state.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "timelock()",
      "name": "timelock",
      "description": "The address of the Moola Protocol Timelock.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "votingDelay()",
      "name": "votingDelay",
      "description": "The delay before voting on a proposal may take place, once proposed, in blocks.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "votingPeriod()",
      "name": "votingPeriod",
      "description": "The duration of voting on a proposal, in blocks.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "whitelistAccountExpirations(address)",
      "name": "whitelistAccountExpirations",
      "description": "Stores the expiration of account whitelist status as a timestamp.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "whitelistGuardian()",
      "name": "whitelistGuardian",
      "description": "Address which manages whitelisted proposals and whitelist accounts.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}