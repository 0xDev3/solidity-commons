{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "merkle proofs",
    "vaults",
    "yearn finance"
  ],
  "name": "VipCappedGuestListWrapperUpgradeable",
  "description": "A basic guest list contract for testing.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProveInvitation(address,bytes32)",
      "name": "ProveInvitation",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "guestRoot",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetGuestRoot(bytes32)",
      "name": "SetGuestRoot",
      "description": "",
      "parameterDecorators": [
        {
          "name": "guestRoot",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetTotalDepositCap(uint256)",
      "name": "SetTotalDepositCap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "cap",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetUserDepositCap(uint256)",
      "name": "SetUserDepositCap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "cap",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "authorized(address,uint256,bytes32[])",
      "name": "authorized",
      "description": "Check if a guest with a bag of a certain size is allowed into the party. Note that `_amount` isn't checked to keep test setup simple, since from the wrapper tests' perspective this is a pass/fail call anyway.",
      "parameterDecorators": [
        {
          "name": "_guest",
          "description": "The guest's address to check.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_merkleProof",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "guestRoot()",
      "name": "guestRoot",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "guests(address)",
      "name": "guests",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Create the test guest list, setting the message sender as `owner`. Note that since this is just for testing, you're unable to change `owner`.",
      "parameterDecorators": [
        {
          "name": "wrapper_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proveInvitation(address,bytes32[])",
      "name": "proveInvitation",
      "description": "Permissionly prove an address is included in the current merkle root, thereby granting accessNote that the list is designed to ONLY EXPAND in future instancesThe admin does retain the ability to ban individual addresses.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "merkleProof",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "remainingTotalDepositAllowed()",
      "name": "remainingTotalDepositAllowed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "remainingUserDepositAllowed(address)",
      "name": "remainingUserDepositAllowed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGuestRoot(bytes32)",
      "name": "setGuestRoot",
      "description": "Set the merkle root to verify invitation proofs against.Note that accounts not included in the root will still be invited if their inviation was previously approved.Setting to 0 removes proof verification versus the root, opening access.",
      "parameterDecorators": [
        {
          "name": "guestRoot_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGuests(address[],bool[])",
      "name": "setGuests",
      "description": "Invite guests or kick them from the party.",
      "parameterDecorators": [
        {
          "name": "_guests",
          "description": "The guests to add or update.",
          "recommendedTypes": []
        },
        {
          "name": "_invited",
          "description": "A flag for each guest at the matching index, inviting or uninviting the guest.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTotalDepositCap(uint256)",
      "name": "setTotalDepositCap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "cap_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUserDepositCap(uint256)",
      "name": "setUserDepositCap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "cap_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalDepositCap()",
      "name": "totalDepositCap",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userDepositCap()",
      "name": "userDepositCap",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vaultBalance(address)",
      "name": "vaultBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "wrapper()",
      "name": "wrapper",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "wrapperBalance(address)",
      "name": "wrapperBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}