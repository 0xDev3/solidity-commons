{"schema":"../schema.json","tags":["locking"],"name":"LockedGold","description":"","eventDecorators":[{"signature":"AccountSlashed(address,uint256,address,uint256)","name":"AccountSlashed","description":"The {NylonTransferred} event is emitted once Nylon are sent.","parameterDecorators":[{"name":"slashed","description":"","recommendedTypes":[],"indexed":true},{"name":"penalty","description":"","recommendedTypes":[],"indexed":false},{"name":"reporter","description":"","recommendedTypes":[],"indexed":true},{"name":"reward","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"GoldLocked(address,uint256)","name":"GoldLocked","description":"The {NylonTransferred} event is emitted once Nylon are sent.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"value","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"GoldRelocked(address,uint256)","name":"GoldRelocked","description":"The {NylonTransferred} event is emitted once Nylon are sent.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"value","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"GoldUnlocked(address,uint256,uint256)","name":"GoldUnlocked","description":"The {NylonTransferred} event is emitted once Nylon are sent.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"value","description":"","recommendedTypes":[],"indexed":false},{"name":"available","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"GoldWithdrawn(address,uint256)","name":"GoldWithdrawn","description":"The {NylonTransferred} event is emitted once Nylon are sent.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"value","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"The {NylonTransferred} event is emitted once Nylon are sent.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RegistrySet(address)","name":"RegistrySet","description":"The {NylonTransferred} event is emitted once Nylon are sent.","parameterDecorators":[{"name":"registryAddress","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"SlasherWhitelistAdded(string)","name":"SlasherWhitelistAdded","description":"The {NylonTransferred} event is emitted once Nylon are sent.","parameterDecorators":[{"name":"slasherIdentifier","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"SlasherWhitelistRemoved(string)","name":"SlasherWhitelistRemoved","description":"The {NylonTransferred} event is emitted once Nylon are sent.","parameterDecorators":[{"name":"slasherIdentifier","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"UnlockingPeriodSet(uint256)","name":"UnlockingPeriodSet","description":"The {NylonTransferred} event is emitted once Nylon are sent.","parameterDecorators":[{"name":"period","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"addSlasher(string)","name":"addSlasher","description":"Adds `slasher` to whitelist of approved slashing addresses.","parameterDecorators":[{"name":"slasherIdentifier","description":"Identifier to whitelist.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"decrementNonvotingAccountBalance(address,uint256)","name":"decrementNonvotingAccountBalance","description":"Decrements the non-voting balance for an account. Can only be called by the registered \"Election\" smart contract.","parameterDecorators":[{"name":"account","description":"The account whose non-voting balance should be decremented.","recommendedTypes":[]},{"name":"value","description":"The amount by which to decrement.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getAccountNonvotingLockedGold(address)","name":"getAccountNonvotingLockedGold","description":"Returns the total amount of non-voting locked gold for an account.","parameterDecorators":[{"name":"account","description":"The account.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getAccountTotalLockedGold(address)","name":"getAccountTotalLockedGold","description":"Returns the total amount of locked gold for an account.","parameterDecorators":[{"name":"account","description":"The account.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getNonvotingLockedGold()","name":"getNonvotingLockedGold","description":"Returns the total amount of locked gold not being used to vote in elections.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getPendingWithdrawal(address,uint256)","name":"getPendingWithdrawal","description":"Returns the pending withdrawal at a given index for a given account.","parameterDecorators":[{"name":"account","description":"The address of the account.","recommendedTypes":[]},{"name":"index","description":"The index of the pending withdrawal.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getPendingWithdrawals(address)","name":"getPendingWithdrawals","description":"Returns the pending withdrawals from unlocked gold for an account.","parameterDecorators":[{"name":"account","description":"The address of the account.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getSlashingWhitelist()","name":"getSlashingWhitelist","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getTotalLockedGold()","name":"getTotalLockedGold","description":"Returns the total amount of locked gold in the system. Note that this does not include gold that has been unlocked but not yet withdrawn.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTotalPendingWithdrawals(address)","name":"getTotalPendingWithdrawals","description":"Returns the total amount to withdraw from unlocked gold for an account.","parameterDecorators":[{"name":"account","description":"The address of the account.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getVersionNumber()","name":"getVersionNumber","description":"Returns the storage, major, minor, and patch version of the contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"incrementNonvotingAccountBalance(address,uint256)","name":"incrementNonvotingAccountBalance","description":"Increments the non-voting balance for an account. Can only be called by the registered Election smart contract.","parameterDecorators":[{"name":"account","description":"The account whose non-voting balance should be incremented.","recommendedTypes":[]},{"name":"value","description":"The amount by which to increment.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialize(address,uint256)","name":"initialize","description":"Used in place of the constructor to allow the contract to be upgradable via proxy.","parameterDecorators":[{"name":"registryAddress","description":"The address of the registry core smart contract.","recommendedTypes":[]},{"name":"_unlockingPeriod","description":"The unlocking period in seconds.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialized()","name":"initialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isSlasher(address)","name":"isSlasher","description":"","parameterDecorators":[{"name":"slasher","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"lock()","name":"lock","description":"Locks gold to be used for voting.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"registry()","name":"registry","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"relock(uint256,uint256)","name":"relock","description":"Relocks gold that has been unlocked but not withdrawn.","parameterDecorators":[{"name":"index","description":"The index of the pending withdrawal to relock from.","recommendedTypes":[]},{"name":"value","description":"The value to relock from the specified pending withdrawal.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeSlasher(string,uint256)","name":"removeSlasher","description":"Removes `slasher` from whitelist of approved slashing addresses.","parameterDecorators":[{"name":"slasherIdentifier","description":"Identifier to remove from whitelist.","recommendedTypes":[]},{"name":"index","description":"Index of the provided identifier in slashingWhiteList array.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRegistry(address)","name":"setRegistry","description":"Updates the address pointing to a Registry contract.","parameterDecorators":[{"name":"registryAddress","description":"The address of a registry contract for routing to other contracts.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setUnlockingPeriod(uint256)","name":"setUnlockingPeriod","description":"Sets the duration in seconds users must wait before withdrawing gold after unlocking.","parameterDecorators":[{"name":"value","description":"The unlocking period in seconds.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"slash(address,uint256,address,uint256,address[],address[],uint256[])","name":"slash","description":"Slashes `account` by reducing its nonvoting locked gold by `penalty`. If there is not enough nonvoting locked gold to slash, calls into `Election.slashVotes` to slash the remaining gold. If `account` does not have `penalty` worth of locked gold, slashes `account`'s total locked gold. Also sends `reward` gold to the reporter, and penalty-reward to the Community Fund. Fails if `reward` is greater than `account`'s total locked gold.","parameterDecorators":[{"name":"account","description":"Address of account being slashed.","recommendedTypes":[]},{"name":"penalty","description":"Amount to slash account.","recommendedTypes":[]},{"name":"reporter","description":"Address of account reporting the slasher.","recommendedTypes":[]},{"name":"reward","description":"Reward to give reporter.","recommendedTypes":[]},{"name":"lessers","description":"The groups receiving fewer votes than i'th group, or 0 if the i'th group has the fewest votes of any validator group.","recommendedTypes":[]},{"name":"greaters","description":"The groups receiving more votes than the i'th group, or 0 if the i'th group has the most votes of any validator group.","recommendedTypes":[]},{"name":"indices","description":"The indices of the i'th group in `account`'s voting list.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"slashingWhitelist(uint256)","name":"slashingWhitelist","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"totalNonvoting()","name":"totalNonvoting","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unlock(uint256)","name":"unlock","description":"Unlocks gold that becomes withdrawable after the unlocking period.","parameterDecorators":[{"name":"value","description":"The amount of gold to unlock.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unlockingPeriod()","name":"unlockingPeriod","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(uint256)","name":"withdraw","description":"Withdraws gold that has been unlocked after the unlocking period has passed.","parameterDecorators":[{"name":"index","description":"The index of the pending withdrawal to withdraw.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}