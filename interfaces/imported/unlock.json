{
  "schema": "../schema.json",
  "tags": [
    "locking"
  ],
  "name": "Unlock",
  "description": "Must list the direct base contracts in the order from “most base-like” to “most derived”. https://solidity.readthedocs.io/en/latest/contracts.html#multiple-inheritance-and-linearization.",
  "eventDecorators": [
    {
      "signature": "ConfigUnlock(address,address,uint256,string,string)",
      "name": "ConfigUnlock",
      "description": "",
      "parameterDecorators": [
        {
          "name": "udt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "weth",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "estimatedGasForPurchase",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "globalTokenSymbol",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "globalTokenURI",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewLock(address,address)",
      "name": "NewLock",
      "description": "",
      "parameterDecorators": [
        {
          "name": "lockOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newLockAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ResetTrackedValue(uint256,uint256)",
      "name": "ResetTrackedValue",
      "description": "",
      "parameterDecorators": [
        {
          "name": "grossNetworkProduct",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalDiscountGranted",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetLockTemplate(address)",
      "name": "SetLockTemplate",
      "description": "",
      "parameterDecorators": [
        {
          "name": "publicLockAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "computeAvailableDiscountFor(address,uint256)",
      "name": "computeAvailableDiscountFor",
      "description": "This function returns the discount available for a user, when purchasing a a key from a lock. This does not modify the state. It returns both the discount and the number of tokens consumed to grant that discount. TODO: actually implement this.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "discount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "configUnlock(address,address,uint256,string,string)",
      "name": "configUnlock",
      "description": "Allows the owner to update configuration variables.",
      "parameterDecorators": [
        {
          "name": "_udt",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_weth",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_estimatedGasForPurchase",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_symbol",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_URI",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createLock(uint256,address,uint256,uint256,string,bytes12)",
      "name": "createLock",
      "description": "Create lock This deploys a lock for a creator. It also keeps track of the deployed lock.",
      "parameterDecorators": [
        {
          "name": "_expirationDuration",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_tokenAddress",
          "description": "set to the ERC20 token address, or 0 for ETH.",
          "recommendedTypes": []
        },
        {
          "name": "_keyPrice",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxNumberOfKeys",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lockName",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_salt",
          "description": "an identifier for the Lock, which is unique for the user. This may be implemented as a sequence ID or with RNG. It's used with `create2` to know the lock's address before the transaction is mined.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "estimatedGasForPurchase()",
      "name": "estimatedGasForPurchase",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGlobalBaseTokenURI()",
      "name": "getGlobalBaseTokenURI",
      "description": "Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGlobalTokenSymbol()",
      "name": "getGlobalTokenSymbol",
      "description": "Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "globalBaseTokenURI()",
      "name": "globalBaseTokenURI",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "globalTokenSymbol()",
      "name": "globalTokenSymbol",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grossNetworkProduct()",
      "name": "grossNetworkProduct",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_unlockOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "locks(address)",
      "name": "locks",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "deployed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "totalSales",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "yieldedDiscountTokens",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "publicLockAddress()",
      "name": "publicLockAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recordConsumedDiscount(uint256,uint256)",
      "name": "recordConsumedDiscount",
      "description": "This function will keep track of consumed discounts by a given user. It will also grant discount tokens to the creator who is granting the discount based on the amount of discount and compensation rate. This function is invoked by a previously deployed lock only.",
      "parameterDecorators": [
        {
          "name": "_discount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "recordKeyPurchase(uint256,address)",
      "name": "recordKeyPurchase",
      "description": "This function keeps track of the added GDP, as well as grants of discount tokens to the referrer, if applicable. The number of discount tokens granted is based on the value of the referal, the current growth rate and the lock's discount token distribution rate This function is invoked by a previously deployed lock only. TODO: actually implement.",
      "parameterDecorators": [
        {
          "name": "_value",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_referrer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resetTrackedValue(uint256,uint256)",
      "name": "resetTrackedValue",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_grossNetworkProduct",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_totalDiscountGranted",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setLockTemplate(address)",
      "name": "setLockTemplate",
      "description": "Upgrade the PublicLock template used for future calls to `createLock`. This will initialize the template and revokeOwnership.",
      "parameterDecorators": [
        {
          "name": "_publicLockAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOracle(address,address)",
      "name": "setOracle",
      "description": "allows the owner to set the oracle address to use for value conversions setting the _oracleAddress to address(0) removes support for the token. This will also call update to ensure at least one datapoint has been recorded.",
      "parameterDecorators": [
        {
          "name": "_tokenAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_oracleAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalDiscountGranted()",
      "name": "totalDiscountGranted",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "udt()",
      "name": "udt",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "uniswapOracles(address)",
      "name": "uniswapOracles",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unlockVersion()",
      "name": "unlockVersion",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "weth()",
      "name": "weth",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}