{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "locking"
  ],
  "name": "MasterChefV2",
  "description": "The (older) MasterChef contract gives out a constant number of SMAY tokens per block. It is the only address with minting rights for SMAY. The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token that is deposited into the MasterChef V1 (MCV1) contract. The allocation point for this pool on MCV1 is the total allocation point for all pools that receive double incentives.",
  "eventDecorators": [
    {
      "signature": "Deposit(address,uint256,uint256,address)",
      "name": "Deposit",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "DepositToLiquidDepositor(uint256,address)",
      "name": "DepositToLiquidDepositor",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EmergencyWithdraw(address,uint256,uint256,address)",
      "name": "EmergencyWithdraw",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Harvest(address,uint256,uint256)",
      "name": "Harvest",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LogInit()",
      "name": "LogInit",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": []
    },
    {
      "signature": "LogPoolAddition(uint256,uint256,address,address)",
      "name": "LogPoolAddition",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allocPoint",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lpToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "rewarder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LogSetPool(uint256,uint256,address,bool)",
      "name": "LogSetPool",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allocPoint",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rewarder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "overwrite",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LogUpdatePool(uint256,uint256,uint256,uint256)",
      "name": "LogUpdatePool",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "lastRewardBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lpSupply",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "accSmayPerShare",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256,uint256,address)",
      "name": "Withdraw",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WithdrawFromLiquidDepositor(uint256,address)",
      "name": "WithdrawFromLiquidDepositor",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ACC_SMAY_PRECISION()",
      "name": "ACC_SMAY_PRECISION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MASTERCHEF_SMAY_PER_BLOCK()",
      "name": "MASTERCHEF_SMAY_PER_BLOCK",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MASTER_CHEF()",
      "name": "MASTER_CHEF",
      "description": "Address of MCV1 contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MASTER_PID()",
      "name": "MASTER_PID",
      "description": "The index of MCV2 master pool in MCV1.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SMAY()",
      "name": "SMAY",
      "description": "Address of SMAY contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "add(uint256,address,address,address,uint256)",
      "name": "add",
      "description": "Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do.",
      "parameterDecorators": [
        {
          "name": "allocPoint",
          "description": "AP of the new pool.",
          "recommendedTypes": []
        },
        {
          "name": "_lpToken",
          "description": "Address of the LP ERC-20 token.",
          "recommendedTypes": []
        },
        {
          "name": "_rewarder",
          "description": "Address of the rewarder delegate.",
          "recommendedTypes": []
        },
        {
          "name": "_strategy",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_depositFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(uint256,uint256,address)",
      "name": "deposit",
      "description": "Deposit LP tokens to MCV2 for SMAY allocation.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "LP token amount to deposit.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The receiver of `amount` deposit benefit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdraw(uint256,address)",
      "name": "emergencyWithdraw",
      "description": "Withdraw without caring about rewards. EMERGENCY ONLY.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Receiver of the LP tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feeAddress()",
      "name": "feeAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feeAddresses(uint256)",
      "name": "feeAddresses",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "harvest(uint256,address)",
      "name": "harvest",
      "description": "Harvest proceeds for transaction sender to `to`.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Receiver of SMAY rewards.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "harvestFromMasterChef()",
      "name": "harvestFromMasterChef",
      "description": "Harvests SMAY from `MASTER_CHEF` MCV1 and pool `MASTER_PID` to this MCV2 contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "init(address)",
      "name": "init",
      "description": "Deposits a dummy token to `MASTER_CHEF` MCV1. This is required because MCV1 holds the minting rights for SMAY. Any balance of transaction sender in `dummyToken` is transferred. The allocation point for the pool on MCV1 is the total allocation point for all pools that receive double incentives.",
      "parameterDecorators": [
        {
          "name": "dummyToken",
          "description": "The address of the ERC-20 token to deposit into MCV1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address,address,address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_smay",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_feeAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_treasury",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "liquidDepositor()",
      "name": "liquidDepositor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lpToken(uint256)",
      "name": "lpToken",
      "description": "Address of the LP token for each MCV2 pool.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "massHarvestFromStrategies()",
      "name": "massHarvestFromStrategies",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "massUpdatePools(uint256[])",
      "name": "massUpdatePools",
      "description": "Update reward variables for all pools. Be careful of gas spending!.",
      "parameterDecorators": [
        {
          "name": "pids",
          "description": "Pool IDs of all to be updated. Make sure to update all active pools.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingSmay(uint256,address)",
      "name": "pendingSmay",
      "description": "View function to see pending SMAY on frontend.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "Address of user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "pending",
          "description": "SMAY reward for a given user.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolInfo(uint256)",
      "name": "poolInfo",
      "description": "Info of each MCV2 pool.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "accSmayPerShare",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastRewardBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "allocPoint",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "depositFee",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolLength()",
      "name": "poolLength",
      "description": "Returns the number of MCV2 pools.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "pools",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewarder(uint256)",
      "name": "rewarder",
      "description": "Address of each `IRewarder` contract in MCV2.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "set(uint256,uint256,address,address,uint256,bool)",
      "name": "set",
      "description": "Update the given pool's SMAY allocation point and `IRewarder` contract. Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "_allocPoint",
          "description": "New AP of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "_rewarder",
          "description": "Address of the rewarder delegate.",
          "recommendedTypes": []
        },
        {
          "name": "_strategy",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_depositFee",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "overwrite",
          "description": "True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeAddress(address)",
      "name": "setFeeAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_feeAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeAddresses(uint256,address)",
      "name": "setFeeAddresses",
      "description": "",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_feeAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMasterChef(address,uint256,uint256)",
      "name": "setMasterChef",
      "description": "",
      "parameterDecorators": [
        {
          "name": "masterChef",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "masterPid",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "masterChefSmayPerBlock",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTreasuryAddress(address)",
      "name": "setTreasuryAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_treasuryAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "smayPerBlock()",
      "name": "smayPerBlock",
      "description": "Calculates and returns the `amount` of SMAY per block.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "strategies(uint256)",
      "name": "strategies",
      "description": "Address of each `IStrategy`.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalAllocPoint()",
      "name": "totalAllocPoint",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "treasury()",
      "name": "treasury",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updatePool(uint256)",
      "name": "updatePool",
      "description": "Update reward variables of the given pool.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "pool",
          "description": "Returns the pool that was updated.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userInfo(uint256,address)",
      "name": "userInfo",
      "description": "Info of each user that stakes LP tokens.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardDebt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256,uint256,address)",
      "name": "withdraw",
      "description": "Withdraw LP tokens from MCV2.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "LP token amount to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Receiver of the LP tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAndHarvest(uint256,uint256,address)",
      "name": "withdrawAndHarvest",
      "description": "Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "LP token amount to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Receiver of the LP tokens and SMAY rewards.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}