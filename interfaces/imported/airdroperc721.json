{
  "schema": "../schema.json",
  "tags": [
    "airdrops"
  ],
  "name": "AirdropERC721",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AirdropPayment(address,tuple)",
      "name": "AirdropPayment",
      "description": "",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "content",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerUpdated(address,address)",
      "name": "OwnerUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "prevOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RecipientsAdded(tuple[])",
      "name": "RecipientsAdded",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_contents",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addAirdropRecipients(tuple(address,address,address,uint256)[])",
      "name": "addAirdropRecipients",
      "description": "Lets contract-owner set up an airdrop of ERC721 NFTs to a list of addresses.",
      "parameterDecorators": [
        {
          "name": "_contents",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenAddress",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tokenOwner",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "recipient",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tokenId",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "airdrop(uint256)",
      "name": "airdrop",
      "description": "Lets contract-owner send ERC721 NFTs to a list of addresses.",
      "parameterDecorators": [
        {
          "name": "paymentsToProcess",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "contractType()",
      "name": "contractType",
      "description": "Returns the type of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "contractVersion()",
      "name": "contractVersion",
      "description": "Returns the version of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllAirdropPayments()",
      "name": "getAllAirdropPayments",
      "description": "Returns all airdrop payments set up -- pending, processed or failed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "contents",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "tokenOwner",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "recipient",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "tokenId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllAirdropPaymentsFailed()",
      "name": "getAllAirdropPaymentsFailed",
      "description": "Returns all pending airdrop failed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "contents",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "tokenOwner",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "recipient",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "tokenId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllAirdropPaymentsPending()",
      "name": "getAllAirdropPaymentsPending",
      "description": "Returns all pending airdrop payments.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "contents",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "tokenOwner",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "recipient",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "tokenId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllAirdropPaymentsProcessed()",
      "name": "getAllAirdropPaymentsProcessed",
      "description": "Returns all pending airdrop processed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "contents",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "tokenOwner",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "recipient",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "tokenId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls the specified role. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\").",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMember(bytes32,uint256)",
      "name": "getRoleMember",
      "description": "Returns the role-member from a list of members for a role, at a given index. Returns `member` who has `role`, at `index` of role-members list. See struct {RoleMembers}, and mapping {roleMembers}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\").",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "Index in list of current members for the role.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "member",
          "description": "Address of account that has `role`.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMemberCount(bytes32)",
      "name": "getRoleMemberCount",
      "description": "Returns total number of accounts that have a role. Returns `count` of accounts that have `role`. See struct {RoleMembers}, and mapping {roleMembers}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\").",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "count",
          "description": "Total number of accounts that have `role`.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants a role to an account, if not previously granted. Caller must have admin role for the `role`. Emits {RoleGranted Event}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\").",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account to which the role is being granted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Checks whether an account has a particular role. Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\").",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account for which the role is being checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasRoleWithSwitch(bytes32,address)",
      "name": "hasRoleWithSwitch",
      "description": "Checks whether an account has a particular role; role restrictions can be swtiched on and off. Returns `true` if `account` has been granted `role`. Role restrictions can be swtiched on and off: - If address(0) has ROLE, then the ROLE restrictions don't apply. - If address(0) does not have ROLE, then the ROLE restrictions will apply.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\").",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account for which the role is being checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initiliazes the contract, like a constructor.",
      "parameterDecorators": [
        {
          "name": "_defaultAdmin",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "multicall(bytes[])",
      "name": "multicall",
      "description": "Receives and executes a batch of function calls on this contract.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the owner of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "payeeCount()",
      "name": "payeeCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "processedCount()",
      "name": "processedCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes role from the account. Caller must have the `role`, with caller being the same as `account`. Emits {RoleRevoked Event}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\").",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account from which the role is being revoked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes role from an account. Caller must have admin role for the `role`. Emits {RoleRevoked Event}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\").",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account from which the role is being revoked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwner(address)",
      "name": "setOwner",
      "description": "Lets an authorized wallet set a new owner for the contract.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "The address to set as the new owner of the contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}