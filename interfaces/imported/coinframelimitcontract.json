{
  "schema": "../schema.json",
  "tags": [],
  "name": "CoinframeLimit",
  "description": "CoinframeLimitContract. Limit contract that works in pair with backend, creates orders, fills the quote, but doesn't store statuses of the orders.",
  "eventDecorators": [
    {
      "signature": "OrderCancelled(uint64)",
      "name": "OrderCancelled",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "orderId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OrderClosed(uint64)",
      "name": "OrderClosed",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "orderId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OrderCreated(tuple,address,uint64)",
      "name": "OrderCreated",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "orderData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "senderAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "orderId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OrderEdited(uint64,string,string)",
      "name": "OrderEdited",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "orderId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "stopLossPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OrderFulfilled(uint64,uint256)",
      "name": "OrderFulfilled",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "orderId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "approveTokenFor0xSwap(address,address)",
      "name": "approveTokenFor0xSwap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "spender",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelOrder(uint64)",
      "name": "cancelOrder",
      "description": "Cancel an order, emits event. Return sold funds.",
      "parameterDecorators": [
        {
          "name": "orderId",
          "description": "Id of closed order.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "closeOrder(uint64)",
      "name": "closeOrder",
      "description": "Close an order, emits event.",
      "parameterDecorators": [
        {
          "name": "orderId",
          "description": "Id of closed order.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createOrder(tuple(bytes32,bytes32,bytes32,address,address,string,string,uint256,uint256,string,string,uint256,uint256,uint256,string))",
      "name": "createOrder",
      "description": "Create a limit order from a configuration object. Emit an eventEth must be sent with function call to be used later by backend wallet as gasAdditional ETH must be sent if user sells ETH, or ERC20 approval must be given if user sells ERC20.",
      "parameterDecorators": [
        {
          "name": "orderData",
          "description": "object that describes a limit order. Will not be stored in state.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "buyOrSell",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "sellCoin",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "buyCoin",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "sellCoinAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "buyCoinAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "price",
              "description": "",
              "type": "string"
            },
            {
              "name": "amount",
              "description": "",
              "type": "string"
            },
            {
              "name": "amountNumeric",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "total",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "totalReadable",
              "description": "",
              "type": "string"
            },
            {
              "name": "stopLossPrice",
              "description": "",
              "type": "string"
            },
            {
              "name": "attachedFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "attachedFeeGasPrice",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "attachedFeeGas",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenRate",
              "description": "",
              "type": "string"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "editOrder(uint64,string,string)",
      "name": "editOrder",
      "description": "Edit an order, emits event.",
      "parameterDecorators": [
        {
          "name": "orderId",
          "description": "Id of edited order.",
          "recommendedTypes": []
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "stopLossPrice",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillQuote(uint64,address,address,address,address,bytes)",
      "name": "fillQuote",
      "description": "Fill quote, emits event.",
      "parameterDecorators": [
        {
          "name": "orderId",
          "description": "Id of edited order.",
          "recommendedTypes": []
        },
        {
          "name": "sellToken",
          "description": "address of sold token or eth.",
          "recommendedTypes": []
        },
        {
          "name": "buyToken",
          "description": "address of bought token or eth.",
          "recommendedTypes": []
        },
        {
          "name": "spender",
          "description": "`allowanceTarget` from 0x API. If ERC20 token being sold it will be real address, and we should call approveTokenFor0xSwap beforehand.",
          "recommendedTypes": []
        },
        {
          "name": "swapTarget",
          "description": "`to` from 0x API. Funds will be sent there.",
          "recommendedTypes": []
        },
        {
          "name": "swapCallData",
          "description": "`data` from 0x API. Describes how the swap should be handled inside 0x router.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "returnFunds(uint64)",
      "name": "returnFunds",
      "description": "Return token or ETH value to original user.",
      "parameterDecorators": [
        {
          "name": "orderId",
          "description": "Id of edited order.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawToken(address,uint256)",
      "name": "withdrawToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}