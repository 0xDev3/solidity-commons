{"schema":"../schema.json","tags":[],"name":"NitroAdjudicator","description":"The NitroAdjudicator contract extends ForceMove and hence inherits all ForceMove methods, and also extends and implements the Adjudicator interface, allowing for a finalized outcome to be pushed to an asset holder.","eventDecorators":[{"signature":"ChallengeCleared(bytes32,uint48)","name":"ChallengeCleared","description":"Event for token purchase logging.","parameterDecorators":[{"name":"channelId","description":"","recommendedTypes":[],"indexed":true},{"name":"newTurnNumRecord","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ChallengeRegistered(bytes32,uint48,uint48,address,bool,tuple,tuple[],tuple[],uint8[])","name":"ChallengeRegistered","description":"Event for token purchase logging.","parameterDecorators":[{"name":"channelId","description":"","recommendedTypes":[],"indexed":true},{"name":"turnNumRecord","description":"","recommendedTypes":[],"indexed":false},{"name":"finalizesAt","description":"","recommendedTypes":[],"indexed":false},{"name":"challenger","description":"","recommendedTypes":[],"indexed":false},{"name":"isFinal","description":"","recommendedTypes":[],"indexed":false},{"name":"fixedPart","description":"","recommendedTypes":[],"indexed":false},{"name":"variableParts","description":"","recommendedTypes":[],"indexed":false},{"name":"sigs","description":"","recommendedTypes":[],"indexed":false},{"name":"whoSignedWhat","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Concluded(bytes32,uint48)","name":"Concluded","description":"Event for token purchase logging.","parameterDecorators":[{"name":"channelId","description":"","recommendedTypes":[],"indexed":true},{"name":"finalizesAt","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"challenge(tuple(uint256,address[],uint48,address,uint48),uint48,tuple(bytes,bytes)[],uint8,tuple(uint8,bytes32,bytes32)[],uint8[],tuple(uint8,bytes32,bytes32))","name":"challenge","description":"Registers a challenge against a state channel. A challenge will either prompt another participant into clearing the challenge (via one of the other methods), or cause the channel to finalize at a specific time. Registers a challenge against a state channel. A challenge will either prompt another participant into clearing the challenge (via one of the other methods), or cause the channel to finalize at a specific time.","parameterDecorators":[{"name":"fixedPart","description":"Data describing properties of the state channel that do not change with state updates.","recommendedTypes":[],"parameters":[{"name":"chainId","description":"","type":"uint256"},{"name":"participants","description":"","type":"address[]"},{"name":"channelNonce","description":"","type":"uint48"},{"name":"appDefinition","description":"","type":"address"},{"name":"challengeDuration","description":"","type":"uint48"}]},{"name":"largestTurnNum","description":"The largest turn number of the submitted states; will overwrite the stored value of `turnNumRecord`.","recommendedTypes":[]},{"name":"variableParts","description":"An ordered array of structs, each decribing the properties of the state channel that may change with each state update. Length is from 1 to the number of participants (inclusive).","recommendedTypes":[],"parameters":[{"name":"outcome","description":"","type":"bytes"},{"name":"appData","description":"","type":"bytes"}]},{"name":"isFinalCount","description":"Describes how many of the submitted states have the `isFinal` property set to `true`. It is implied that the rightmost `isFinalCount` states are final, and the rest are not final.","recommendedTypes":[]},{"name":"sigs","description":"An array of signatures that support the state with the `largestTurnNum`. There must be one for each participant, e.g.: [sig-from-p0, sig-from-p1, ...].","recommendedTypes":[],"parameters":[{"name":"v","description":"","type":"uint8"},{"name":"r","description":"","type":"bytes32"},{"name":"s","description":"","type":"bytes32"}]},{"name":"whoSignedWhat","description":"An array denoting which participant has signed which state: `participant[i]` signed the state with index `whoSignedWhat[i]`.","recommendedTypes":[]},{"name":"challengerSig","description":"The signature of a participant on the keccak256 of the abi.encode of (supportedStateHash, 'forceMove').","recommendedTypes":[],"parameters":[{"name":"v","description":"","type":"uint8"},{"name":"r","description":"","type":"bytes32"},{"name":"s","description":"","type":"bytes32"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"channelStorageHashes(bytes32)","name":"channelStorageHashes","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"checkpoint(tuple(uint256,address[],uint48,address,uint48),uint48,tuple(bytes,bytes)[],uint8,tuple(uint8,bytes32,bytes32)[],uint8[])","name":"checkpoint","description":"Overwrites the `turnNumRecord` stored against a channel by providing a state with higher turn number, supported by a signature from each participant. Overwrites the `turnNumRecord` stored against a channel by providing a state with higher turn number, supported by a signature from each participant.","parameterDecorators":[{"name":"fixedPart","description":"Data describing properties of the state channel that do not change with state updates.","recommendedTypes":[],"parameters":[{"name":"chainId","description":"","type":"uint256"},{"name":"participants","description":"","type":"address[]"},{"name":"channelNonce","description":"","type":"uint48"},{"name":"appDefinition","description":"","type":"address"},{"name":"challengeDuration","description":"","type":"uint48"}]},{"name":"largestTurnNum","description":"The largest turn number of the submitted states; will overwrite the stored value of `turnNumRecord`.","recommendedTypes":[]},{"name":"variableParts","description":"An ordered array of structs, each decribing the properties of the state channel that may change with each state update.","recommendedTypes":[],"parameters":[{"name":"outcome","description":"","type":"bytes"},{"name":"appData","description":"","type":"bytes"}]},{"name":"isFinalCount","description":"Describes how many of the submitted states have the `isFinal` property set to `true`. It is implied that the rightmost `isFinalCount` states are final, and the rest are not final.","recommendedTypes":[]},{"name":"sigs","description":"An array of signatures that support the state with the `largestTurnNum`.","recommendedTypes":[],"parameters":[{"name":"v","description":"","type":"uint8"},{"name":"r","description":"","type":"bytes32"},{"name":"s","description":"","type":"bytes32"}]},{"name":"whoSignedWhat","description":"An array denoting which participant has signed which state: `participant[i]` signed the state with index `whoSignedWhat[i]`.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"conclude(uint48,tuple(uint256,address[],uint48,address,uint48),bytes32,bytes32,uint8,uint8[],tuple(uint8,bytes32,bytes32)[])","name":"conclude","description":"Finalizes a channel by providing a finalization proof. External wrapper for _conclude. Finalizes a channel by providing a finalization proof. External wrapper for _conclude.","parameterDecorators":[{"name":"largestTurnNum","description":"The largest turn number of the submitted states; will overwrite the stored value of `turnNumRecord`.","recommendedTypes":[]},{"name":"fixedPart","description":"Data describing properties of the state channel that do not change with state updates.","recommendedTypes":[],"parameters":[{"name":"chainId","description":"","type":"uint256"},{"name":"participants","description":"","type":"address[]"},{"name":"channelNonce","description":"","type":"uint48"},{"name":"appDefinition","description":"","type":"address"},{"name":"challengeDuration","description":"","type":"uint48"}]},{"name":"appPartHash","description":"The keccak256 of the abi.encode of `(challengeDuration, appDefinition, appData)`. Applies to all states in the finalization proof.","recommendedTypes":[]},{"name":"outcomeHash","description":"The keccak256 of the abi.encode of the `outcome`. Applies to all states in the finalization proof.","recommendedTypes":[]},{"name":"numStates","description":"The number of states in the finalization proof.","recommendedTypes":[]},{"name":"whoSignedWhat","description":"An array denoting which participant has signed which state: `participant[i]` signed the state with index `whoSignedWhat[i]`.","recommendedTypes":[]},{"name":"sigs","description":"An array of signatures that support the state with the `largestTurnNum`.","recommendedTypes":[],"parameters":[{"name":"v","description":"","type":"uint8"},{"name":"r","description":"","type":"bytes32"},{"name":"s","description":"","type":"bytes32"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"concludePushOutcomeAndTransferAll(uint48,tuple(uint256,address[],uint48,address,uint48),bytes32,bytes,uint8,uint8[],tuple(uint8,bytes32,bytes32)[])","name":"concludePushOutcomeAndTransferAll","description":"Finalizes a channel by providing a finalization proof, allows a finalized channel's outcome to be decoded and transferAll to be triggered in external Asset Holder contracts. Finalizes a channel by providing a finalization proof, allows a finalized channel's outcome to be decoded and transferAll to be triggered in external Asset Holder contracts.","parameterDecorators":[{"name":"largestTurnNum","description":"The largest turn number of the submitted states; will overwrite the stored value of `turnNumRecord`.","recommendedTypes":[]},{"name":"fixedPart","description":"Data describing properties of the state channel that do not change with state updates.","recommendedTypes":[],"parameters":[{"name":"chainId","description":"","type":"uint256"},{"name":"participants","description":"","type":"address[]"},{"name":"channelNonce","description":"","type":"uint48"},{"name":"appDefinition","description":"","type":"address"},{"name":"challengeDuration","description":"","type":"uint48"}]},{"name":"appPartHash","description":"The keccak256 of the abi.encode of `(challengeDuration, appDefinition, appData)`. Applies to all states in the finalization proof.","recommendedTypes":[]},{"name":"outcomeBytes","description":"abi.encode of an array of Outcome.OutcomeItem structs.","recommendedTypes":[]},{"name":"numStates","description":"The number of states in the finalization proof.","recommendedTypes":[]},{"name":"whoSignedWhat","description":"An array denoting which participant has signed which state: `participant[i]` signed the state with index `whoSignedWhat[i]`.","recommendedTypes":[]},{"name":"sigs","description":"An array of signatures that support the state with the `largestTurnNum`.","recommendedTypes":[],"parameters":[{"name":"v","description":"","type":"uint8"},{"name":"r","description":"","type":"bytes32"},{"name":"s","description":"","type":"bytes32"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getChainID()","name":"getChainID","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getChannelStorage(bytes32)","name":"getChannelStorage","description":"Unpacks turnNumRecord, finalizesAt and fingerprint from the channelStorageHash of a particular channel. Unpacks turnNumRecord, finalizesAt and fingerprint from the channelStorageHash of a particular channel.","parameterDecorators":[{"name":"channelId","description":"Unique identifier for a state channel.","recommendedTypes":[]}],"returnDecorators":[{"name":"turnNumRecord","description":"A turnNum that (the adjudicator knows) is supported by a signature from each participant.","recommendedTypes":[],"solidityType":"uint48"},{"name":"finalizesAt","description":"The unix timestamp when `channelId` will finalize.","recommendedTypes":[],"solidityType":"uint48"},{"name":"fingerprint","description":"Unique identifier for the channel's current state, up to hash collisions.","recommendedTypes":[],"solidityType":"uint160"}],"emittableEvents":[],"readOnly":true},{"signature":"pushOutcome(bytes32,uint48,uint48,bytes32,address,bytes)","name":"pushOutcome","description":"Allows a finalized channel's outcome to be decoded and one or more AssetOutcomes registered in external Asset Holder contracts. Allows a finalized channel's outcome to be decoded and one or more AssetOutcomes registered in external Asset Holder contracts.","parameterDecorators":[{"name":"channelId","description":"Unique identifier for a state channel.","recommendedTypes":[]},{"name":"turnNumRecord","description":"A turnNum that (the adjudicator knows and stores) is supported by a signature from each participant.","recommendedTypes":[]},{"name":"finalizesAt","description":"The unix timestamp when this channel will finalize.","recommendedTypes":[]},{"name":"stateHash","description":"The keccak256 of the abi.encode of the State (struct) stored by the adjudicator.","recommendedTypes":[]},{"name":"challengerAddress","description":"The address of the participant whom registered the challenge, if any.","recommendedTypes":[]},{"name":"outcomeBytes","description":"The encoded Outcome of this state channel.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"pushOutcomeAndTransferAll(bytes32,uint48,uint48,bytes32,address,bytes)","name":"pushOutcomeAndTransferAll","description":"Allows a finalized channel's outcome to be decoded and transferAll to be triggered in external Asset Holder contracts. Allows a finalized channel's outcome to be decoded and one or more AssetOutcomes registered in external Asset Holder contracts.","parameterDecorators":[{"name":"channelId","description":"Unique identifier for a state channel.","recommendedTypes":[]},{"name":"turnNumRecord","description":"A turnNum that (the adjudicator knows and stores) is supported by a signature from each participant.","recommendedTypes":[]},{"name":"finalizesAt","description":"The unix timestamp when this channel will finalize.","recommendedTypes":[]},{"name":"stateHash","description":"The keccak256 of the abi.encode of the State (struct) stored by the adjudicator.","recommendedTypes":[]},{"name":"challengerAddress","description":"The address of the participant whom registered the challenge, if any.","recommendedTypes":[]},{"name":"outcomeBytes","description":"The encoded Outcome of this state channel.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"requireValidInput(uint256,uint256,uint256,uint256)","name":"requireValidInput","description":"Validates input for several external methods. Validates input for several external methods.","parameterDecorators":[{"name":"numParticipants","description":"Length of the participants array.","recommendedTypes":[]},{"name":"numStates","description":"Number of states submitted.","recommendedTypes":[]},{"name":"numSigs","description":"Number of signatures submitted.","recommendedTypes":[]},{"name":"numWhoSignedWhats","description":"whoSignedWhat.length.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"respond(address,bool[2],tuple(uint256,address[],uint48,address,uint48),tuple(bytes,bytes)[2],tuple(uint8,bytes32,bytes32))","name":"respond","description":"Repsonds to an ongoing challenge registered against a state channel. Repsonds to an ongoing challenge registered against a state channel.","parameterDecorators":[{"name":"challenger","description":"The address of the participant whom registered the challenge.","recommendedTypes":[]},{"name":"isFinalAB","description":"An pair of booleans describing if the challenge state and/or the response state have the `isFinal` property set to `true`.","recommendedTypes":[]},{"name":"fixedPart","description":"Data describing properties of the state channel that do not change with state updates.","recommendedTypes":[],"parameters":[{"name":"chainId","description":"","type":"uint256"},{"name":"participants","description":"","type":"address[]"},{"name":"channelNonce","description":"","type":"uint48"},{"name":"appDefinition","description":"","type":"address"},{"name":"challengeDuration","description":"","type":"uint48"}]},{"name":"variablePartAB","description":"An pair of structs, each decribing the properties of the state channel that may change with each state update (for the challenge state and for the response state).","recommendedTypes":[],"parameters":[{"name":"outcome","description":"","type":"bytes"},{"name":"appData","description":"","type":"bytes"}]},{"name":"sig","description":"The responder's signature on the `responseStateHash`.","recommendedTypes":[],"parameters":[{"name":"v","description":"","type":"uint8"},{"name":"r","description":"","type":"bytes32"},{"name":"s","description":"","type":"bytes32"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"validTransition(uint256,bool[2],tuple(bytes,bytes)[2],uint48,address)","name":"validTransition","description":"Check that the submitted pair of states form a valid transition (public wrapper for internal function _requireValidTransition). Check that the submitted pair of states form a valid transition (public wrapper for internal function _requireValidTransition).","parameterDecorators":[{"name":"nParticipants","description":"Number of participants in the channel. transition.","recommendedTypes":[]},{"name":"isFinalAB","description":"Pair of booleans denoting whether the first and second state (resp.) are final.","recommendedTypes":[]},{"name":"ab","description":"Variable parts of each of the pair of states.","recommendedTypes":[],"parameters":[{"name":"outcome","description":"","type":"bytes"},{"name":"appData","description":"","type":"bytes"}]},{"name":"turnNumB","description":"turnNum of the later state of the pair.","recommendedTypes":[]},{"name":"appDefinition","description":"Address of deployed contract containing application-specific validTransition function.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"true if the later state is a validTransition from its predecessor, reverts otherwise.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true}]}