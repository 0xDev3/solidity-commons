{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "VRFD20",
  "description": "Request testnet LINK and ETH here: https://faucets.chain.link/ Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/.",
  "eventDecorators": [
    {
      "signature": "DiceLanded(bytes32,uint256)",
      "name": "DiceLanded",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "result",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "DiceRolled(bytes32,address)",
      "name": "DiceRolled",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "roller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferRequested(address,address)",
      "name": "OwnershipTransferRequested",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "Allows an ownership transfer to be completed by the recipient.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fee()",
      "name": "fee",
      "description": "Get the current fee.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "house(address)",
      "name": "house",
      "description": "Get the house assigned to the player once the address has rolled.",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "house as a string.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "keyHash()",
      "name": "keyHash",
      "description": "Get the current key hash.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bytes32.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Get the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rawFulfillRandomness(bytes32,uint256)",
      "name": "rawFulfillRandomness",
      "description": "",
      "parameterDecorators": [
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "randomness",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rollDice(address)",
      "name": "rollDice",
      "description": "Requests randomness. Warning: if the VRF response is delayed, avoid calling requestRandomness repeatedly as that would give miners/VRF operators latitude about which VRF response arrives first.You must review your implementation details with extreme care.",
      "parameterDecorators": [
        {
          "name": "roller",
          "description": "address of the roller.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFee(uint256)",
      "name": "setFee",
      "description": "Set the oracle fee for requesting randomness.",
      "parameterDecorators": [
        {
          "name": "fee",
          "description": "uint256.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setKeyHash(bytes32)",
      "name": "setKeyHash",
      "description": "Set the key hash for the oracle.",
      "parameterDecorators": [
        {
          "name": "keyHash",
          "description": "bytes32.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows an owner to begin transferring ownership to a new address, pending.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawLINK(address,uint256)",
      "name": "withdrawLINK",
      "description": "Withdraw LINK from this contract. this is an example only, and in a real contract withdrawals should happen according to the established withdrawal pattern: https://docs.soliditylang.org/en/v0.4.24/common-patterns.html#withdrawal-from-contracts.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "the address to withdraw LINK to.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "the amount of LINK to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}