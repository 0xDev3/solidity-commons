{
  "schema": "../schema.json",
  "tags": [],
  "name": "HomeFiProxy",
  "description": "HomeFiProxy. This contract provided functionality to update the core HomeFi contracts.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addNewContract(bytes2,address)",
      "name": "addNewContract",
      "description": "adds a new contract type/implementation to HomeFi. can only be called by HomeFiProxy owner.",
      "parameterDecorators": [
        {
          "name": "_contractName",
          "description": "initial of contract to be added.",
          "recommendedTypes": []
        },
        {
          "name": "_contractAddress",
          "description": "address of contract implementation to be added.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "allContractNames(uint256)",
      "name": "allContractNames",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes2"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeProxyAdminOwner(address)",
      "name": "changeProxyAdminOwner",
      "description": "allows HomeFiProxy owner to change the owner of proxyAdmin contract. This can be useful when trying to deploy new version of HomeFiProxy. can only be called by HomeFiProxy owner.",
      "parameterDecorators": [
        {
          "name": "_newAdmin",
          "description": "address of new proxyAdmin owner / new version of HomeFiProxy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getLatestAddress(bytes2)",
      "name": "getLatestAddress",
      "description": "Gets latest contract address.",
      "parameterDecorators": [
        {
          "name": "_contractName",
          "description": "Contract name to fetch.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "current implementation address corresponding to _contractName.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "homeFiInitialized()",
      "name": "homeFiInitialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initiateHomeFi(address[])",
      "name": "initiateHomeFi",
      "description": "initialize all the homeFi contract in the correct sequential order and generate upgradable proxy for them. if more contract are added in homeFi, then their entry can be done here. can only be called by HomeFiProxy owner.",
      "parameterDecorators": [
        {
          "name": "_implementations",
          "description": "the implementation address of homeFi smart contract in correct sequence.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isActive(address)",
      "name": "isActive",
      "description": "To check if we use the particular contract.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "The contract address to check if it is active or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if _address is active else false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxyAdmin()",
      "name": "proxyAdmin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeMultipleImplementations(bytes2[],address[])",
      "name": "upgradeMultipleImplementations",
      "description": "upgrades a multiple contract implementations. Replaces old implementation with new. can only be called by HomeFiProxy owner.",
      "parameterDecorators": [
        {
          "name": "_contractNames",
          "description": "bytes2 array of contract initials that needs to be upgraded.",
          "recommendedTypes": []
        },
        {
          "name": "_contractAddresses",
          "description": "address array of contract implementation address that needs to be upgraded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}