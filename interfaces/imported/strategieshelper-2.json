{
  "schema": "../schema.json",
  "tags": [],
  "name": "StrategiesHelper",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "addressesGeneratorAddress()",
      "name": "addressesGeneratorAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addressesMergeHelperAddress()",
      "name": "addressesMergeHelperAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetStrategies(address)",
      "name": "assetStrategies",
      "description": "Fetch metadata for all strategies scoped to a vault.",
      "parameterDecorators": [
        {
          "name": "assetAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetStrategiesAddresses(address)",
      "name": "assetStrategiesAddresses",
      "description": "Fetch strategy addresses given a vault address.",
      "parameterDecorators": [
        {
          "name": "assetAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetStrategiesDelegatedBalance(address)",
      "name": "assetStrategiesDelegatedBalance",
      "description": "Fetch delegated balance for all of a vault's strategies.",
      "parameterDecorators": [
        {
          "name": "assetAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetStrategiesLength(address)",
      "name": "assetStrategiesLength",
      "description": "Fetch the number of strategies for a vault.",
      "parameterDecorators": [
        {
          "name": "assetAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetsStrategies(address[])",
      "name": "assetsStrategies",
      "description": "Fetch metadata for strategies given an array of vault addresses.",
      "parameterDecorators": [
        {
          "name": "_assetsAddresses",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetsStrategies()",
      "name": "assetsStrategies",
      "description": "Fetch metadata for all strategies.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetsStrategiesAddresses()",
      "name": "assetsStrategiesAddresses",
      "description": "Fetch all strategy addresses for all vaults.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetsStrategiesAddresses(address[])",
      "name": "assetsStrategiesAddresses",
      "description": "Fetch all strategy addresses given an array of vaults.",
      "parameterDecorators": [
        {
          "name": "_assetsAddresses",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetsStrategiesAddressesByFilter(string[][])",
      "name": "assetsStrategiesAddressesByFilter",
      "description": "Fetch strategy addresses by filter.",
      "parameterDecorators": [
        {
          "name": "filter",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetsStrategiesAddressesByFilter(address[],string[][])",
      "name": "assetsStrategiesAddressesByFilter",
      "description": "Fetch strategy addresses by filter.",
      "parameterDecorators": [
        {
          "name": "_strategiesAddresses",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "filter",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetsStrategiesByFilter(string[][])",
      "name": "assetsStrategiesByFilter",
      "description": "Fetch metadata for all strategies.",
      "parameterDecorators": [
        {
          "name": "_filter",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetsStrategiesByFilter(address[],string[][])",
      "name": "assetsStrategiesByFilter",
      "description": "Fetch metadata for strategies given an array of vault addresses and a filter.",
      "parameterDecorators": [
        {
          "name": "_assetsAddresses",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_filter",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetsStrategiesDelegatedBalance()",
      "name": "assetsStrategiesDelegatedBalance",
      "description": "Fetch total delegated balance for all strategies.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetsStrategiesLength()",
      "name": "assetsStrategiesLength",
      "description": "Fetch the total number of strategies for all vaults.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracleAddress()",
      "name": "oracleAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ownerAddress()",
      "name": "ownerAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "strategies(address[])",
      "name": "strategies",
      "description": "Fetch metadata for strategies given an array of strategy addresses.",
      "parameterDecorators": [
        {
          "name": "_strategiesAddresses",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "strategy(address)",
      "name": "strategy",
      "description": "Fetch metadata for a strategy given a strategy address.",
      "parameterDecorators": [
        {
          "name": "strategyAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "strategyPassesFilter(address,string[][])",
      "name": "strategyPassesFilter",
      "description": "Filter a strategy using a reverse polish notation (RPM) query language Each instruction is a tuple of either two or three strings. Argument 0 - Operand type ------------------------- KEY - Denotes a value should be fetched using a function sighash derived from argument 1 VALUE - A value to be added directly to the stack OPERATOR - The name of the instruction to execute Argument 1 - Key/Value or operator ---------------------------------- Data - If KEY or VALUE are specified in argument 0, argument 1 represents either the key to fetch data with or the value to be added to the stack Operator - If OPERATOR is specified in argument 0, argument 1 represents the operator to execute. Valid operators are: EQ, GT, GTE, LT, LTE, OR, AND, NE and LIKE Argument 2 - Value type ----------------------- For key/value operands argument 2 describes how to parse a value to be placed on the stack. Valid options are: STRING, HEX, DECIMAL Note: The stack size is 32 bytes. Any values beyond this will be truncated. Example Filter ============== Description: Find all strategies whose apiVersion is like 0.3.5 or 0.3.3 where strategist address is C3D6880fD95E06C816cB030fAc45b3ffe3651Cb0 filter = [ [\"KEY\", \"apiVersion\", \"STRING\"], [\"VALUE\", \"0.3.5\", \"STRING\"], [\"OPERATOR\", \"LIKE\"], [\"KEY\", \"apiVersion\", \"STRING\"], [\"VALUE\", \"0.3.3\", \"STRING\"], [\"OPERATOR\", \"LIKE\"], [\"OPERATOR\", \"OR\"], [\"KEY\", \"strategist\", \"HEX\"], [\"VALUE\", \"C3D6880fD95E06C816cB030fAc45b3ffe3651Cb0\", \"HEX\"], [\"OPERATOR\", \"EQ\"], [\"OPERATOR\", \"AND\"] ];.",
      "parameterDecorators": [
        {
          "name": "strategyAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "instructions",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateSlot(bytes32,bytes32)",
      "name": "updateSlot",
      "description": "Allow storage slots to be manually updated.",
      "parameterDecorators": [
        {
          "name": "slot",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}