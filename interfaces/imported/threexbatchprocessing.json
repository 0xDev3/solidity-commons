{
  "schema": "../schema.json",
  "tags": [],
  "name": "ThreeXBatchProcessing",
  "description": "Defines if the Batch will mint or redeem 3X.",
  "eventDecorators": [
    {
      "signature": "BatchMinted(bytes32,uint256,uint256)",
      "name": "BatchMinted",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "suppliedTokenAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "outputAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BatchRedeemed(bytes32,uint256,uint256)",
      "name": "BatchRedeemed",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "suppliedTokenAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "outputAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Claimed(address,uint8,uint256,uint256)",
      "name": "Claimed",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "batchType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "shares",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "claimedToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ComponentDependenciesUpdated(address[],tuple[])",
      "name": "ComponentDependenciesUpdated",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "components",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "componentDependencies",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Deposit(address,uint256)",
      "name": "Deposit",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DepositedUnclaimedSetTokenForRedeem(uint256,address)",
      "name": "DepositedUnclaimedSetTokenForRedeem",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "FeeUpdated(bytes32,uint256,address,address)",
      "name": "FeeUpdated",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "feeType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newRedemptionFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newFeeRecipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "toke",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FeesClaimed(bytes32,address,uint256,address)",
      "name": "FeesClaimed",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "feeType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProcessingThresholdUpdated(tuple,tuple)",
      "name": "ProcessingThresholdUpdated",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "prevThreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newTreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SlippageUpdated(tuple,tuple)",
      "name": "SlippageUpdated",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "prev",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "current",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakingUpdated(address,address)",
      "name": "StakingUpdated",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "beforeAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdrawal(address,uint256)",
      "name": "Withdrawal",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WithdrawnFromBatch(bytes32,uint256,address)",
      "name": "WithdrawnFromBatch",
      "description": "Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "KEEPER_INCENTIVE()",
      "name": "KEEPER_INCENTIVE",
      "description": "Role ID for KeeperIncentive.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptClientAccess(address)",
      "name": "acceptClientAccess",
      "description": "will accept access to the batchStorage contract as well as batches owned by this address*.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "basicIssuanceModule()",
      "name": "basicIssuanceModule",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "batchMint()",
      "name": "batchMint",
      "description": "Mint 3X token with deposited USDC. This function goes through all the steps necessary to mint an optimal amount of 3X. This function deposits USDC in the underlying Metapool and deposits these LP token to get yToken which in turn are used to mint 3XThis process leaves some leftovers which are partially used in the next mint batches.In order to get USDC we can implement a zap to move stables into the curve tri-poolhandleKeeperIncentive checks if the msg.sender is a permissioned keeper and pays them a reward for calling this function (see KeeperIncentive.sol).",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "batchRedeem()",
      "name": "batchRedeem",
      "description": "Redeems 3X for USDC. This function goes through all the steps necessary to get USDC. This function reedeems 3X for the underlying yToken and deposits these yToken in curve Metapools for USDCIn order to get other stablecoins from USDC we can use a zap to redeem USDC for stables in the curve tri-poolhandleKeeperIncentive checks if the msg.sender is a permissioned keeper and pays them a reward for calling this function (see KeeperIncentive.sol).",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "batchStorage()",
      "name": "batchStorage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claim(bytes32,address)",
      "name": "claim",
      "description": "Claims funds after the batch has been processed (get 3X from a mint batch and DAI from a redeem batch).",
      "parameterDecorators": [
        {
          "name": "batchId",
          "description": "Id of batch to claim from.",
          "recommendedTypes": []
        },
        {
          "name": "_claimFor",
          "description": "User that gets the shares attributed to (for use in zapper contract).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimAndStake(bytes32)",
      "name": "claimAndStake",
      "description": "Claims BTR after batch has been processed and stakes it in Staking.sol.",
      "parameterDecorators": [
        {
          "name": "_batchId",
          "description": "Id of batch to claim from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimFee(bytes32)",
      "name": "claimFee",
      "description": "Claims all accumulated redemption fees in DAI.",
      "parameterDecorators": [
        {
          "name": "feeType",
          "description": "A short string signaling if its a \"mint\"/\"redeem\" or any other type of fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimForAndStake(bytes32,address)",
      "name": "claimForAndStake",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_batchId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_claimFor",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "componentDependencies(address)",
      "name": "componentDependencies",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "lpToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "utilityPool",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "oracle",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "curveMetaPool",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "angleRouter",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "contractName()",
      "name": "contractName",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentMintBatchId()",
      "name": "currentMintBatchId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentRedeemBatchId()",
      "name": "currentRedeemBatchId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositForMint(uint256,address)",
      "name": "depositForMint",
      "description": "Deposits funds in the current mint batch.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of DAI to use for minting.",
          "recommendedTypes": []
        },
        {
          "name": "depositFor",
          "description": "User that gets the shares attributed to (for use in zapper contract).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositForRedeem(uint256)",
      "name": "depositForRedeem",
      "description": "deposits funds in the current redeem batch.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of 3X to be redeemed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feeTypes(uint256)",
      "name": "feeTypes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fees(bytes32)",
      "name": "fees",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "accumulated",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "bps",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccountBalance(bytes32,address)",
      "name": "getAccountBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccountBatchIds(address)",
      "name": "getAccountBatchIds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccountBatches(address)",
      "name": "getAccountBatches",
      "description": "Get ids for all batches that a user has interacted with.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "The address for whom we want to retrieve batches.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBatch(bytes32)",
      "name": "getBatch",
      "description": "",
      "parameterDecorators": [
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "id",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "batchType",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint8"
            },
            {
              "name": "batchId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "claimable",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "unclaimedShares",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "sourceTokenBalance",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "targetTokenBalance",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "sourceToken",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "targetToken",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "owner",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBatchType(bytes32)",
      "name": "getBatchType",
      "description": "",
      "parameterDecorators": [
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMinAmountFromRedeem(uint256,uint256)",
      "name": "getMinAmountFromRedeem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_valueOfComponents",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_slippage",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMinAmountToMint(uint256,uint256,uint256)",
      "name": "getMinAmountToMint",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_valueOfBatch",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_valueOfComponentsPerUnit",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_slippage",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantClientAccess(address)",
      "name": "grantClientAccess",
      "description": "will grant access to the batchStorage contract as well as batches owned by this address*.",
      "parameterDecorators": [
        {
          "name": "newClient",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lastMintedAt()",
      "name": "lastMintedAt",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastRedeemedAt()",
      "name": "lastRedeemedAt",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintBatchTokens()",
      "name": "mintBatchTokens",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "targetToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "sourceToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "moveUnclaimedIntoCurrentBatch(bytes32[],uint256[],bool)",
      "name": "moveUnclaimedIntoCurrentBatch",
      "description": "Moves funds from unclaimed batches into the current mint/redeem batch. Since our output token is not the same as our input token we would need to swap the output token via 2 hops into out input token. If we want to do so id prefer to create a second function to do so as it would also require a slippage parameter and the swapping logic.",
      "parameterDecorators": [
        {
          "name": "batchIds",
          "description": "the ids of each batch where targetToken should be moved from.",
          "recommendedTypes": []
        },
        {
          "name": "shares",
          "description": "how many shares should be claimed in each of the batches.",
          "recommendedTypes": []
        },
        {
          "name": "mint",
          "description": "should move token into the currentMintBatch vs currentRedeemBatch.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Pauses the contract. All function with the modifer `whenNotPaused` cant be called anymore. Namly deposits and mint/redeem.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "processingThreshold()",
      "name": "processingThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "batchCooldown",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "mintThreshold",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "redeemThreshold",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemBatchTokens()",
      "name": "redeemBatchTokens",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "targetToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "sourceToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setApprovals()",
      "name": "setApprovals",
      "description": "sets approval for contracts that require access to assets held by this contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBatchStorage(address)",
      "name": "setBatchStorage",
      "description": "sets batch storage contract. All function with the modifer `whenNotPaused` cant be called anymore. Namly deposits and mint/redeem.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setComponents(address[],tuple(address,address,address,address,address)[])",
      "name": "setComponents",
      "description": "This function allows the owner to change the composition of underlying token of the 3X.",
      "parameterDecorators": [
        {
          "name": "_components",
          "description": "An array of addresses for the yToken needed to mint 3X.",
          "recommendedTypes": []
        },
        {
          "name": "_componentDependencies",
          "description": "An array structs describing underlying yToken, curveMetapool (which is also the lpToken), swapPool and AngleRouter.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "lpToken",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "utilityPool",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "oracle",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "curveMetaPool",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "angleRouter",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFee(bytes32,uint256,address,address)",
      "name": "setFee",
      "description": "Changes the redemption fee rate and the fee recipient. Per default both of these values are not set. Therefore a fee has to be explicitly be set with this functionAdds the feeType to the list of feeTypes if it is not already there.",
      "parameterDecorators": [
        {
          "name": "feeType",
          "description": "A short string signaling if its a \"mint\"/\"redeem\" or any other type of fee.",
          "recommendedTypes": []
        },
        {
          "name": "bps",
          "description": "Redemption fee rate in basis points.",
          "recommendedTypes": []
        },
        {
          "name": "recipient",
          "description": "The recipient which receives these fees (Should be DAO treasury).",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "the token which the fee is taken in.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setProcessingThreshold(uint256,uint256,uint256)",
      "name": "setProcessingThreshold",
      "description": "Changes the the ProcessingThreshold. The cooldown is the same for redeem and mint batches.",
      "parameterDecorators": [
        {
          "name": "_cooldown",
          "description": "Cooldown in seconds.",
          "recommendedTypes": []
        },
        {
          "name": "_mintThreshold",
          "description": "Amount of MIM necessary to mint immediately.",
          "recommendedTypes": []
        },
        {
          "name": "_redeemThreshold",
          "description": "Amount of 3X necessary to mint immediately.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSlippage(uint256,uint256)",
      "name": "setSlippage",
      "description": "sets slippage for mint and redeem.",
      "parameterDecorators": [
        {
          "name": "_mintSlippage",
          "description": "amount in bps (e.g. 50 = 0.5%).",
          "recommendedTypes": []
        },
        {
          "name": "_redeemSlippage",
          "description": "amount in bps (e.g. 50 = 0.5%).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStaking(address)",
      "name": "setStaking",
      "description": "Updates the staking contract.",
      "parameterDecorators": [
        {
          "name": "_staking",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "slippage()",
      "name": "slippage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "mintBps",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "redeemBps",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "staking()",
      "name": "staking",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swapToken()",
      "name": "swapToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "Unpauses the contract. All function with the modifer `whenNotPaused` cant be called anymore. Namly deposits and mint/redeem.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "valueOfComponents(address[],uint256[])",
      "name": "valueOfComponents",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_tokenAddresses",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_quantities",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawFromBatch(bytes32,uint256,address)",
      "name": "withdrawFromBatch",
      "description": "This function allows a user to withdraw their funds from a batch before that batch has been processed.",
      "parameterDecorators": [
        {
          "name": "_batchId",
          "description": "From which batch should funds be withdrawn from.",
          "recommendedTypes": []
        },
        {
          "name": "_amountToWithdraw",
          "description": "Amount of 3X or DAI to be withdrawn from the queue (depending on mintBatch / redeemBatch).",
          "recommendedTypes": []
        },
        {
          "name": "_withdrawFor",
          "description": "User that gets the shares attributed to (for use in zapper contract).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawFromBatch(bytes32,uint256,address,address)",
      "name": "withdrawFromBatch",
      "description": "This function allows a user to withdraw their funds from a batch before that batch has been processed.",
      "parameterDecorators": [
        {
          "name": "_batchId",
          "description": "From which batch should funds be withdrawn from.",
          "recommendedTypes": []
        },
        {
          "name": "_amountToWithdraw",
          "description": "Amount of 3X or DAI to be withdrawn from the queue (depending on mintBatch / redeemBatch).",
          "recommendedTypes": []
        },
        {
          "name": "_withdrawFor",
          "description": "User that gets the shares attributed to (for use in zapper contract).",
          "recommendedTypes": []
        },
        {
          "name": "_recipient",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}