{
  "schema": "../schema.json",
  "tags": [
    "escrows"
  ],
  "name": "AuctionNative",
  "description": "Escrow Contract for Payments in Auction & BuyNow modes, in Native Cryptocurrencies. Full contract documentation in IAuctionNative.",
  "eventDecorators": [
    {
      "signature": "Bid(bytes32,address,address,uint256,uint256)",
      "name": "Bid",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "bidder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "bidAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "endsAt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BuyNow(bytes32,address,address)",
      "name": "BuyNow",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BuyerRefunded(bytes32,address)",
      "name": "BuyerRefunded",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "DefaultAuctionConfig(uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "DefaultAuctionConfig",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "minIncreasePercentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timeToExtend",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "extendableBy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prevMinIncreasePercentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prevTimeToExtend",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prevExtendableBy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DefaultFeesCollector(address,address)",
      "name": "DefaultFeesCollector",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "feesCollector",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "prevFeesCollector",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "DefaultOperator(address,address)",
      "name": "DefaultOperator",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "prevOperator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "EIP712(address,address)",
      "name": "EIP712",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "eip712address",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prevEip712address",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MaxFeeBPS(uint256,uint256)",
      "name": "MaxFeeBPS",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "maxFeeBPS",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prevMaxFeeBPS",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewSeller(address)",
      "name": "NewSeller",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OnlyUserCanWithdraw(address,bool,bool)",
      "name": "OnlyUserCanWithdraw",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "onlyUserCanWithdraw",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prevOnlyUserCanWithdraw",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paid(bytes32)",
      "name": "Paid",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PaymentWindow(uint256,uint256)",
      "name": "PaymentWindow",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "window",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prevWindow",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RemovedUniverseAuctionConfig(uint256)",
      "name": "RemovedUniverseAuctionConfig",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UniverseAuctionConfig(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "UniverseAuctionConfig",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "minIncreasePercentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timeToExtend",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "extendableBy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prevMinIncreasePercentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prevTimeToExtend",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prevExtendableBy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UniverseFeesCollector(uint256,address,address)",
      "name": "UniverseFeesCollector",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "feesCollector",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "prevFeesCollector",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UniverseOperator(uint256,address,address)",
      "name": "UniverseOperator",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "prevOperator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256)",
      "name": "Withdraw",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "EIP712Address()",
      "name": "EIP712Address",
      "description": "Returns the address of the of the contract containing the implementation of the EIP712 verifying functions.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the address of the EIP712 verifier contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_MAX_AUCTION_DURATION()",
      "name": "_MAX_AUCTION_DURATION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_MAX_EXTENDABLE_BY()",
      "name": "_MAX_EXTENDABLE_BY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_universeAuctionConfigExists(uint256)",
      "name": "_universeAuctionConfigExists",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptsRefunds(bytes32)",
      "name": "acceptsRefunds",
      "description": "Returns true if the payment accepts a refund to the buyer. The payment must be in ASSET_TRANSFERRING and beyond expirationTime.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique ID that identifies the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the payment accepts a refund to the buyer.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assertBidInputsOK(tuple(bytes32,uint256,uint256,uint256,uint256,uint256,address,address))",
      "name": "assertBidInputsOK",
      "description": "Reverts unless the requirements for a BidInput are fulfilled.",
      "parameterDecorators": [
        {
          "name": "bidInput",
          "description": "The struct containing all required bid data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "endsAt",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "bidAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "feeBPS",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "universeId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "bidder",
              "description": "",
              "type": "address"
            },
            {
              "name": "seller",
              "description": "",
              "type": "address"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "state",
          "description": "The current state of the auction.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assertBuyNowInputsOK(tuple(bytes32,uint256,uint256,uint256,uint256,address,address))",
      "name": "assertBuyNowInputsOK",
      "description": "Reverts unless the requirements for a BuyNowInput are fulfilled.",
      "parameterDecorators": [
        {
          "name": "buyNowInp",
          "description": "The BuyNowInput struct.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "feeBPS",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "universeId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "buyer",
              "description": "",
              "type": "address"
            },
            {
              "name": "seller",
              "description": "",
              "type": "address"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceOf(address)",
      "name": "balanceOf",
      "description": "Returns the local balance of the provided address that is stored in this contract, and hence, available for withdrawal.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "the address that is queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the local balance.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bid(tuple(bytes32,uint256,uint256,uint256,uint256,uint256,address,address),bytes,bytes)",
      "name": "bid",
      "description": "Processes an arriving bid, and either starts a new Auction process, or updates an existing one. Executed by the bidder, who relays the operator's signature. The bidder must provide, at least, the minimal required funds via msg.value, where the minimal amount takes into account any possibly available local funds, and the case where the same bidder raises his/her previous max bid, in which case only the difference between bids is required. If all requirements are fulfilled, it stores the data relevant for the next steps of the auction, and it locks the funds in this contract. If this is the first bid of an auction, it moves its state to AUCTIONING, whereas if it arrives on an on-going auction, it remains in AUCTIONING.",
      "parameterDecorators": [
        {
          "name": "bidInput",
          "description": "The struct containing all required bid data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "endsAt",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "bidAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "feeBPS",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "universeId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "bidder",
              "description": "",
              "type": "address"
            },
            {
              "name": "seller",
              "description": "",
              "type": "address"
            }
          ]
        },
        {
          "name": "operatorSignature",
          "description": "The signature of 'bidInput' by the operator.",
          "recommendedTypes": []
        },
        {
          "name": "sellerSignature",
          "description": "the signature of the seller agreeing to list the asset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buyNow(tuple(bytes32,uint256,uint256,uint256,uint256,address,address),bytes,bytes)",
      "name": "buyNow",
      "description": "Starts Payment process by the buyer. Executed by the buyer, who relays the MetaTX with the operator's signature. The buyer must provide the correct amount via msg.value. If all requirements are fulfilled, it stores the data relevant for the next steps of the payment, and it locks the funds in this contract. Follows standard Checks-Effects-Interactions pattern to protect against re-entrancy attacks. Moves payment to ASSET_TRANSFERRING state.",
      "parameterDecorators": [
        {
          "name": "buyNowInp",
          "description": "The struct containing all required payment data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "feeBPS",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "universeId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "buyer",
              "description": "",
              "type": "address"
            },
            {
              "name": "seller",
              "description": "",
              "type": "address"
            }
          ]
        },
        {
          "name": "operatorSignature",
          "description": "The signature of 'buyNowInp' by the operator.",
          "recommendedTypes": []
        },
        {
          "name": "sellerSignature",
          "description": "the signature of the seller agreeing to list the asset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "computeFeeAmount(uint256,uint256)",
      "name": "computeFeeAmount",
      "description": "Safe computation of fee amount for a provided amount, feeBPS pair. Must return a value that is guaranteed to be less or equal to the provided amount.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount.",
          "recommendedTypes": []
        },
        {
          "name": "feeBPS",
          "description": "The percentage fee expressed in Basis Points (bps). feeBPS examples: 2.5% = 250 bps, 10% = 1000 bps, 100% = 10000 bps.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The fee amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currencyLongDescriptor()",
      "name": "currencyLongDescriptor",
      "description": "Returns a descriptor about the currency that this contract accepts.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the string describing the currency.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "defaultAuctionConfig()",
      "name": "defaultAuctionConfig",
      "description": "Returns the default auction configuration settings struct.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the default auction configuration settings struct.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "defaultFeesCollector()",
      "name": "defaultFeesCollector",
      "description": "Returns the default feesCollector.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "defaultOperator()",
      "name": "defaultOperator",
      "description": "Returns the default operator.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "enoughFundsAvailable(address,uint256)",
      "name": "enoughFundsAvailable",
      "description": "Returns true if the 'amount' required for a payment is available to this contract. In more detail: returns true if the sum of the buyer's local balance in this contract, plus the external available balance, is larger or equal than 'amount'.",
      "parameterDecorators": [
        {
          "name": "buyer",
          "description": "The address for which funds are queried.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount that is queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns true if enough funds are available.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "existingAuction(bytes32)",
      "name": "existingAuction",
      "description": "Returns the stored auction data of an existing auction.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique id identifying the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the struct containing the auction configuration settings of the specified paymentId.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "externalBalance(address)",
      "name": "externalBalance",
      "description": "Returns the amount available to a buyer outside this contract.",
      "parameterDecorators": [
        {
          "name": "buyer",
          "description": "The address for which funds are queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the external funds available.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "finalize(tuple(bytes32,bool),bytes)",
      "name": "finalize",
      "description": "Relays the operator signature declaring that the asset transfer was successful or failed, and updates local balances of seller or buyer, respectively. Can be executed by anyone, but the operator signature must be included as input param. Seller or Buyer's local balances are updated, allowing explicit withdrawal. Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.",
      "parameterDecorators": [
        {
          "name": "transferResult",
          "description": "The asset transfer result struct signed by the operator.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "wasSuccessful",
              "description": "",
              "type": "bool"
            }
          ]
        },
        {
          "name": "operatorSignature",
          "description": "The operator signature of transferResult.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "finalizeAndWithdraw(tuple(bytes32,bool),bytes)",
      "name": "finalizeAndWithdraw",
      "description": "Relays the operator signature declaring that the asset transfer was successful or failed, updates balances of seller or buyer, respectively, and proceeds to withdraw all funds in this contract available to the rightful recipient of the paymentId: the seller if transferResult.wasSuccessful == true, the buyer otherwise. If recipient has set onlyUserCanWithdraw == true, then msg.sender must be the recipient; otherwise, anyone can execute this method, with funds arriving to the recipient too, but with a helping 3rd party covering gas costs and TX sending hassle. The operator signature must be included as input param. Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.",
      "parameterDecorators": [
        {
          "name": "transferResult",
          "description": "The asset transfer result struct signed by the operator.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "wasSuccessful",
              "description": "",
              "type": "bool"
            }
          ]
        },
        {
          "name": "operatorSignature",
          "description": "The operator signature of transferResult.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isRegisteredSeller(address)",
      "name": "isRegisteredSeller",
      "description": "Returns true if the address provided is a registered seller.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "the address that is queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns whether the address is registered as seller.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSellerRegistrationRequired()",
      "name": "isSellerRegistrationRequired",
      "description": "Returns whether sellers need to be registered to be able to accept payments.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns true if sellers need to be registered to be able to accept payments.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxFeeBPS()",
      "name": "maxFeeBPS",
      "description": "Returns the max fee (in BPS units) that can be accepted in any payment despite operator and buyer having signed a larger amount; a value of 10000 BPS would correspond to 100% (no limit at all).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the max fee (in BPS units).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxFundsAvailable(address)",
      "name": "maxFundsAvailable",
      "description": "Returns the maximum amount of funds available to a buyer. In more detail: returns the sum of the buyer's local balance in this contract, plus the available external balance.",
      "parameterDecorators": [
        {
          "name": "buyer",
          "description": "The address for which funds are queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the max funds available.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minNewBidAmount(bytes32)",
      "name": "minNewBidAmount",
      "description": "Returns the minimum bidAmount required for a new arriving bid, having minIncreasePercentage into account.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique ID that identifies the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the minimum bidAmount of a new arriving bid.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onlyUserCanWithdraw(address)",
      "name": "onlyUserCanWithdraw",
      "description": "Returns the value of onlyUserCanWithdraw for a given user.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "The address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paymentInfo(bytes32)",
      "name": "paymentInfo",
      "description": "Returns all data stored in a payment.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique ID that identifies the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the struct stored for the payment.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paymentState(bytes32)",
      "name": "paymentState",
      "description": "Returns the state of a payment. Overrides the method in the BuyNow contract to account for possibly on-going Auctions. It returns the explicit state stored unless: - it is in AUCTIONING state && - the current time is beyond the auction ending time, in wich case the auction is finished, and it returns ASSET_TRANSFERING. If payment is in ASSET_TRANSFERRING, it may be worth checking acceptsRefunds to check to it has gone beyond expirationTime.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique ID that identifies the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the state of the payment.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paymentWindow()",
      "name": "paymentWindow",
      "description": "Returns the amount of seconds that a payment can remain in ASSET_TRANSFERRING state without positive or negative confirmation by the operator.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the payment window in secs.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "refund(bytes32)",
      "name": "refund",
      "description": "Moves buyer's provided funds to buyer's balance. Anybody can call this function. Requires acceptsRefunds == true to proceed. After updating buyer's balance, he/she can later withdraw. Moves payment to REFUNDED state.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique ID that identifies the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "refundAndWithdraw(bytes32)",
      "name": "refundAndWithdraw",
      "description": "Executes refund and withdraw to the buyer in one transaction. If the buyer has set onlyUserCanWithdraw == true, then msg.sender must be the recipient; otherwise, anyone can execute this method, with funds arriving to the buyer too, but with a helping 3rd party covering gas costs and TX sending hassle. Requires acceptsRefunds == true to proceed. All of msg.sender's balance in the contract is withdrawn, not only the part that was locked in this particular paymentId Moves payment to REFUNDED state.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique ID that identifies the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registerAsSeller()",
      "name": "registerAsSeller",
      "description": "Registers msg.sender as seller so that, if the contract has set _isSellerRegistrationRequired = true, then payments will be accepted with msg.sender as seller.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "relayedWithdraw(address)",
      "name": "relayedWithdraw",
      "description": "Transfers funds avaliable in this contract's balanceOf[recipient] to recipient. The funds still go to straight the recipient, as if he/she has executed the withdrawal() method, but the msg.sender covers gas costs and the hassle of executing the transaction. Users can always opt out from this feature, using the setOnlyUserCanWithdraw method.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeUniverseAuctionConfig(uint256)",
      "name": "removeUniverseAuctionConfig",
      "description": "Removes the auction configuration settings specific to one universe, so that, from now on, this universe uses the default configuration.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeUniverseFeesCollector(uint256)",
      "name": "removeUniverseFeesCollector",
      "description": "The universe will then have fees collected by _defaultFeesCollector. Removes a specific universe feesCollector.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeUniverseOperator(uint256)",
      "name": "removeUniverseOperator",
      "description": "The universe will then be operated by _defaultOperator. Removes a specific universe operator.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDefaultAuctionConfig(uint256,uint256,uint256)",
      "name": "setDefaultAuctionConfig",
      "description": "Sets the default auction configuration settings.",
      "parameterDecorators": [
        {
          "name": "minIncreasePercentage",
          "description": "The minimum amount that a new bid needs to increase above the previous highest bid, expressed as a percentage in Basis Points (BPS). e.g.: minIncreasePercentage = 500 requires new bids to be 5% larger.",
          "recommendedTypes": []
        },
        {
          "name": "minIncreasePercentage",
          "description": "The minimum amount that a new bid needs to increase above the previous highest bid, expressed as a percentage in Basis Points (BPS). e.g.: minIncreasePercentage = 500 requires new bids to be 5% larger.",
          "recommendedTypes": []
        },
        {
          "name": "extendableBy",
          "description": "The maximum value that endsAt can be increased in an auction as a result of accumulated late-arriving bids.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDefaultFeesCollector(address)",
      "name": "setDefaultFeesCollector",
      "description": "Sets a new default feesCollector.",
      "parameterDecorators": [
        {
          "name": "feesCollector",
          "description": "The address of the new default feesCollector.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDefaultOperator(address)",
      "name": "setDefaultOperator",
      "description": "Sets a new default operator.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "The address of the new default operator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setEIP712(address)",
      "name": "setEIP712",
      "description": "Sets the address of the EIP712 verifier contract. This upgradable pattern is required in case that the EIP712 spec/code changes in the future.",
      "parameterDecorators": [
        {
          "name": "eip712address",
          "description": "The address of the new EIP712 contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setIsSellerRegistrationRequired(bool)",
      "name": "setIsSellerRegistrationRequired",
      "description": "Sets whether sellers are required to register in this contract before being able to accept payments.",
      "parameterDecorators": [
        {
          "name": "isRequired",
          "description": "(bool) if true, registration is required.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxFeeBPS(uint256)",
      "name": "setMaxFeeBPS",
      "description": "Sets the max fee (in BPS units) that can be accepted in any payment despite operator and buyer having signed a larger amount; a value of 10000 BPS would correspond to 100% (no limit at all).",
      "parameterDecorators": [
        {
          "name": "feeBPS",
          "description": "The new max fee (in BPS units).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOnlyUserCanWithdraw(bool)",
      "name": "setOnlyUserCanWithdraw",
      "description": "Sets the value of onlyUserCanWithdraw for the user with msg.sender address: - if true: only the user can execute withdrawals of his/her local balance - if false: any address can help and execute the withdrawals on behalf of the user (the funds still go straight to the user, but the helper address covers gas costs and the hassle of executing the transaction).",
      "parameterDecorators": [
        {
          "name": "onlyUserCan",
          "description": "true if only the user can execute withdrawals of his/her local balance.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPaymentWindow(uint256)",
      "name": "setPaymentWindow",
      "description": "Sets the amount of time available to the operator, after the payment starts, to confirm either the success or the failure of the asset transfer. After this time, the payment moves to FAILED, allowing buyer to withdraw.",
      "parameterDecorators": [
        {
          "name": "window",
          "description": "The amount of time available, in seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUniverseAuctionConfig(uint256,uint256,uint256,uint256)",
      "name": "setUniverseAuctionConfig",
      "description": "Sets the auction configuration settings specific to one universe.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        },
        {
          "name": "minIncreasePercentage",
          "description": "The minimum amount that a new bid needs to increase above the previous highest bid, expressed as a percentage in Basis Points (BPS). e.g.: minIncreasePercentage = 500 requires new bids to be 5% larger.",
          "recommendedTypes": []
        },
        {
          "name": "timeToExtend",
          "description": "the value such that, if a bid arrives during the time window [endsAt - timeToExtend, endsAt], then endsAt is increased by timeToExtend.",
          "recommendedTypes": []
        },
        {
          "name": "extendableBy",
          "description": "The maximum value that endsAt can be increased in an auction as a result of accumulated late-arriving bids.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUniverseFeesCollector(uint256,address)",
      "name": "setUniverseFeesCollector",
      "description": "Sets a new specific universe feesCollector.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        },
        {
          "name": "feesCollector",
          "description": "The address of the new universe feesCollector.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUniverseOperator(uint256,address)",
      "name": "setUniverseOperator",
      "description": "Sets a new specific universe operator.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        },
        {
          "name": "operator",
          "description": "The address of the new universe operator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "splitAuctionFundingSources(tuple(bytes32,uint256,uint256,uint256,uint256,uint256,address,address))",
      "name": "splitAuctionFundingSources",
      "description": "Splits the funds required to provide the bidAmount specified in a bid into two sources: - externalFunds: the funds required to be transferred from the external bidder balance - localFunds: the funds required from the bidder's already available balance in this contract. If new bidder coincides with previous max bidder, only the difference between the two bidAmounts is required.",
      "parameterDecorators": [
        {
          "name": "bidInput",
          "description": "The struct containing all required bid data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "endsAt",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "bidAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "feeBPS",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "universeId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "bidder",
              "description": "",
              "type": "address"
            },
            {
              "name": "seller",
              "description": "",
              "type": "address"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "externalFunds",
          "description": "The funds required to be transferred from the external bidder balance.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "localFunds",
          "description": "The amount of local funds that will be used.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "isSameBidder",
          "description": "A bool which is true if the bidder coincides with the previous max bidder of the auction.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "splitFundingSources(address,uint256)",
      "name": "splitFundingSources",
      "description": "Splits the funds required to provide 'amount' into two sources: - externalFunds: the funds required to be transferred from the external buyer balance - localFunds: the funds required from the buyer's already available balance in this contract.",
      "parameterDecorators": [
        {
          "name": "buyer",
          "description": "The address for which the amount is to be split.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount to be split.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "externalFunds",
          "description": "The funds required to be transferred from the external buyer balance.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "localFunds",
          "description": "The amount of local funds that will be used.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "universeAuctionConfig(uint256)",
      "name": "universeAuctionConfig",
      "description": "Returns the auction configuration settings of a specific universe.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the struct containing the auction configuration settings of the specified universe.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "universeExtendableBy(uint256)",
      "name": "universeExtendableBy",
      "description": "Returns the maximum value that endsAt can be increased in an auction as a result of accumulated late-arriving bids, for the specified universe. It returns the default value unless the universe has a specific auction config.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The maximum value that endsAt can be increased in an auction as a result of accumulated late-arriving bids for the specified universe.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "universeFeesCollector(uint256)",
      "name": "universeFeesCollector",
      "description": "Returns the feesCollector of a specific universe.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "universeMinIncreasePercentage(uint256)",
      "name": "universeMinIncreasePercentage",
      "description": "The minimum percentage that a new bid needs to increase above the previous highest bid, for the specified universe. It returns the default value unless the universe has a specific auction config.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "minIncreasePercentage The minimum percentage that a new bid needs to increase above the previous highest bid, expressed as a percentage in Basis Points (BPS). e.g.: minIncreasePercentage = 500 requires new bids to be 5% larger.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "universeOperator(uint256)",
      "name": "universeOperator",
      "description": "Returns the operator of a specific universe.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "universeTimeToExtend(uint256)",
      "name": "universeTimeToExtend",
      "description": "Returns the value such that, if a bid arrives during the time window [endsAt - timeToExtend, endsAt], then endsAt is increased by timeToExtend, for the specified universe. It returns the default value unless the universe has a specific auction config.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the value such that, if a bid arrives during the time window [endsAt - timeToExtend, endsAt], then endsAt is increased by timeToExtend.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw()",
      "name": "withdraw",
      "description": "Transfers funds avaliable in this contract's balanceOf[msg.sender] to msg.sender.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAmount(uint256)",
      "name": "withdrawAmount",
      "description": "Transfers only the specified amount from this contract's balanceOf[msg.sender] to msg.sender. Reverts if balanceOf[msg.sender] < amount.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The required amount to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}