{
  "schema": "../schema.json",
  "tags": [],
  "name": "RollupAdminFacet",
  "description": "",
  "eventDecorators": [
    {
      "signature": "NodeConfirmed(uint256,bytes32,uint256,bytes32,uint256)",
      "name": "NodeConfirmed",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "nodeNum",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "afterSendAcc",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterSendCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterLogAcc",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterLogCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeCreated(uint256,bytes32,bytes32,bytes32,uint256,uint256,bytes32,bytes32[3][2],uint256[4][2])",
      "name": "NodeCreated",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "nodeNum",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "parentNodeHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nodeHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "executionHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "inboxMaxCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterInboxBatchEndCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterInboxBatchAcc",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assertionBytes32Fields",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assertionIntFields",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeRejected(uint256)",
      "name": "NodeRejected",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "nodeNum",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NodesDestroyed(uint256,uint256)",
      "name": "NodesDestroyed",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "startNode",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "endNode",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnerFunctionCalled(uint256)",
      "name": "OwnerFunctionCalled",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RollupChallengeStarted(address,address,address,uint256)",
      "name": "RollupChallengeStarted",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "challengeContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "asserter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "challenger",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "challengedNode",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RollupCreated(bytes32)",
      "name": "RollupCreated",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "machineHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakerReassigned(address,uint256)",
      "name": "StakerReassigned",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newNode",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_stakerMap(address)",
      "name": "_stakerMap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "latestStakedNode",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountStaked",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "currentChallenge",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "isStaked",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "amountStaked(address)",
      "name": "amountStaked",
      "description": "Get the amount staked of the given staker.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "Staker address to lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount staked of the staker.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "arbGasSpeedLimitPerBlock()",
      "name": "arbGasSpeedLimitPerBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "baseStake()",
      "name": "baseStake",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challengeExecutionBisectionDegree()",
      "name": "challengeExecutionBisectionDegree",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challengeFactory()",
      "name": "challengeFactory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "confirmPeriodBlocks()",
      "name": "confirmPeriodBlocks",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentChallenge(address)",
      "name": "currentChallenge",
      "description": "Get the current challenge of the given staker.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "Staker address to lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Current challenge of the staker.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delayedBridge()",
      "name": "delayedBridge",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "extraChallengeTimeBlocks()",
      "name": "extraChallengeTimeBlocks",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "firstUnresolvedNode()",
      "name": "firstUnresolvedNode",
      "description": "If all nodes have been resolved, this will be latestNodeCreated + 1.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Index of the first unresolved node.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNode(uint256)",
      "name": "getNode",
      "description": "Get the address of the Node contract for the given node.",
      "parameterDecorators": [
        {
          "name": "nodeNum",
          "description": "Index of the node.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Address of the Node contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNodeHash(uint256)",
      "name": "getNodeHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Node hash as of this node number.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerAddress(uint256)",
      "name": "getStakerAddress",
      "description": "Get the address of the staker at the given index.",
      "parameterDecorators": [
        {
          "name": "stakerNum",
          "description": "Index of the staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Address of the staker.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isMaster()",
      "name": "isMaster",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isStaked(address)",
      "name": "isStaked",
      "description": "Check whether the given staker is staked.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "Staker address to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True or False for whether the staker was staked.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isZombie(address)",
      "name": "isZombie",
      "description": "",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastStakeBlock()",
      "name": "lastStakeBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Ethereum block that the most recent stake was created.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestConfirmed()",
      "name": "latestConfirmed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Index of the latest confirmed node.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestNodeCreated()",
      "name": "latestNodeCreated",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Index of the latest rollup node created.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestStakedNode(address)",
      "name": "latestStakedNode",
      "description": "Get the latest staked node of the given staker.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "Staker address to lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Latest node staked of the staker.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minimumAssertionPeriod()",
      "name": "minimumAssertionPeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nodeFactory()",
      "name": "nodeFactory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "outbox()",
      "name": "outbox",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Pause interaction with the rollup contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeOldOutbox(address)",
      "name": "removeOldOutbox",
      "description": "Disable an old outbox from interacting with the bridge.",
      "parameterDecorators": [
        {
          "name": "_outbox",
          "description": "Outbox contract to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resume()",
      "name": "resume",
      "description": "Resume interaction with the rollup contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rollupEventBridge()",
      "name": "rollupEventBridge",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sequencerBridge()",
      "name": "sequencerBridge",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sequencerInboxMaxDelayBlocks()",
      "name": "sequencerInboxMaxDelayBlocks",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sequencerInboxMaxDelaySeconds()",
      "name": "sequencerInboxMaxDelaySeconds",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setArbGasSpeedLimitPerBlock(uint256)",
      "name": "setArbGasSpeedLimitPerBlock",
      "description": "Set speed limit per block.",
      "parameterDecorators": [
        {
          "name": "newArbGasSpeedLimitPerBlock",
          "description": "maximum arbgas to be used per block.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBaseStake(uint256)",
      "name": "setBaseStake",
      "description": "Set base stake required for an assertion.",
      "parameterDecorators": [
        {
          "name": "newBaseStake",
          "description": "maximum arbgas to be used per block.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setChallengeExecutionBisectionDegree(uint256)",
      "name": "setChallengeExecutionBisectionDegree",
      "description": "Set execution bisection degree.",
      "parameterDecorators": [
        {
          "name": "newChallengeExecutionBisectionDegree",
          "description": "execution bisection degree.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setConfirmPeriodBlocks(uint256)",
      "name": "setConfirmPeriodBlocks",
      "description": "Set number of blocks until a node is considered confirmed.",
      "parameterDecorators": [
        {
          "name": "newConfirmPeriod",
          "description": "new number of blocks.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setExtraChallengeTimeBlocks(uint256)",
      "name": "setExtraChallengeTimeBlocks",
      "description": "Set number of extra blocks after a challenge.",
      "parameterDecorators": [
        {
          "name": "newExtraTimeBlocks",
          "description": "new number of blocks.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFacets(address,address)",
      "name": "setFacets",
      "description": "Set the addresses of rollup logic facets called.",
      "parameterDecorators": [
        {
          "name": "newAdminFacet",
          "description": "address of logic that owner of rollup calls.",
          "recommendedTypes": []
        },
        {
          "name": "newUserFacet",
          "description": "ddress of logic that user of rollup calls.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setInbox(address,bool)",
      "name": "setInbox",
      "description": "Enable or disable an inbox contract.",
      "parameterDecorators": [
        {
          "name": "_inbox",
          "description": "Inbox contract to add or remove.",
          "recommendedTypes": []
        },
        {
          "name": "_enabled",
          "description": "New status of inbox.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumAssertionPeriod(uint256)",
      "name": "setMinimumAssertionPeriod",
      "description": "Set minimum assertion period for the rollup.",
      "parameterDecorators": [
        {
          "name": "newPeriod",
          "description": "new minimum period for assertions.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOutbox(address)",
      "name": "setOutbox",
      "description": "Add a contract authorized to put messages into this rollup's inbox.",
      "parameterDecorators": [
        {
          "name": "_outbox",
          "description": "Outbox contract to add.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwner(address)",
      "name": "setOwner",
      "description": "Set a new owner address for the rollup.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "address of new rollup owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSequencer(address)",
      "name": "setSequencer",
      "description": "Updates a sequencer address at the sequencer inbox.",
      "parameterDecorators": [
        {
          "name": "newSequencer",
          "description": "new sequencer address to be used.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSequencerInboxMaxDelayBlocks(uint256)",
      "name": "setSequencerInboxMaxDelayBlocks",
      "description": "Set max delay in blocks for sequencer inbox.",
      "parameterDecorators": [
        {
          "name": "newSequencerInboxMaxDelayBlocks",
          "description": "max number of blocks.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSequencerInboxMaxDelaySeconds(uint256)",
      "name": "setSequencerInboxMaxDelaySeconds",
      "description": "Set max delay in seconds for sequencer inbox.",
      "parameterDecorators": [
        {
          "name": "newSequencerInboxMaxDelaySeconds",
          "description": "max number of seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStakeToken(address)",
      "name": "setStakeToken",
      "description": "Set the token used for stake, where address(0) == eth. Before changing the base stake token, you might need to change the implementation of the Rollup User facet!.",
      "parameterDecorators": [
        {
          "name": "newStakeToken",
          "description": "address of token used for staking.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setValidator(address[],bool[])",
      "name": "setValidator",
      "description": "Set the addresses of the validator whitelist. It is expected that both arrays are same length, and validator at position i corresponds to the value at position i.",
      "parameterDecorators": [
        {
          "name": "_validator",
          "description": "addresses to set in the whitelist.",
          "recommendedTypes": []
        },
        {
          "name": "_val",
          "description": "value to set in the whitelist for corresponding address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWhitelistEntries(address,address[],bool[])",
      "name": "setWhitelistEntries",
      "description": "Updates a whitelist's entries. user at position i will be assigned value i.",
      "parameterDecorators": [
        {
          "name": "whitelist",
          "description": "whitelist to be updated.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "users to be updated in the whitelist.",
          "recommendedTypes": []
        },
        {
          "name": "val",
          "description": "if user is or not allowed in the whitelist.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakeToken()",
      "name": "stakeToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakerCount()",
      "name": "stakerCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Number of active stakers currently staked.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateWhitelistConsumers(address,address,address[])",
      "name": "updateWhitelistConsumers",
      "description": "Updates a whitelist address for its consumers. setting the newWhitelist to address(0) disables it for consumers.",
      "parameterDecorators": [
        {
          "name": "whitelist",
          "description": "old whitelist to be deprecated.",
          "recommendedTypes": []
        },
        {
          "name": "newWhitelist",
          "description": "new whitelist to be used.",
          "recommendedTypes": []
        },
        {
          "name": "targets",
          "description": "whitelist consumers to be triggered.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeBeacon(address,address)",
      "name": "upgradeBeacon",
      "description": "Upgrades the implementation of a beacon controlled by the rollup.",
      "parameterDecorators": [
        {
          "name": "beacon",
          "description": "address of beacon to be upgraded.",
          "recommendedTypes": []
        },
        {
          "name": "newImplementation",
          "description": "new address of implementation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawableFunds(address)",
      "name": "withdrawableFunds",
      "description": "Get the amount of funds withdrawable by the given address.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "Address to check the funds of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of funds withdrawable by owner.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "zombieAddress(uint256)",
      "name": "zombieAddress",
      "description": "Get the original staker address of the zombie at the given index.",
      "parameterDecorators": [
        {
          "name": "zombieNum",
          "description": "Index of the zombie to lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Original staker address of the zombie.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "zombieCount()",
      "name": "zombieCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Current number of un-removed zombies.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "zombieLatestStakedNode(uint256)",
      "name": "zombieLatestStakedNode",
      "description": "Get Latest node that the given zombie at the given index is staked on.",
      "parameterDecorators": [
        {
          "name": "zombieNum",
          "description": "Index of the zombie to lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Latest node that the given zombie is staked on.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}