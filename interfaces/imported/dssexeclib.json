{"schema":"../schema.json","tags":[],"name":"DssExecLib","description":"","eventDecorators":[],"functionDecorators":[{"signature":"accumulateCollateralStabilityFees(address,bytes32)","name":"accumulateCollateralStabilityFees","description":"Update rate accumulation for the stability fees of a given collateral type.","parameterDecorators":[{"name":"_jug","description":"Address of the MCD_JUG core contract.","recommendedTypes":[]},{"name":"_ilk","description":"Collateral type.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"accumulateDSR(address)","name":"accumulateDSR","description":"Update rate accumulation for the Dai Savings Rate (DSR).","parameterDecorators":[{"name":"_pot","description":"Address of the MCD_POT core contract.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addCollateralBase(address,address,address,address,address,address,bytes32,address,address,address,address)","name":"addCollateralBase","description":"Performs basic functions and sanity checks to add a new collateral type to the MCD system.","parameterDecorators":[{"name":"_vat","description":"MCD_VAT.","recommendedTypes":[]},{"name":"_cat","description":"MCD_CAT.","recommendedTypes":[]},{"name":"_jug","description":"MCD_JUG.","recommendedTypes":[]},{"name":"_end","description":"MCD_END.","recommendedTypes":[]},{"name":"_spot","description":"MCD_SPOT.","recommendedTypes":[]},{"name":"_reg","description":"ILK_REGISTRY.","recommendedTypes":[]},{"name":"_ilk","description":"Collateral type key code [Ex. \"ETH-A\"].","recommendedTypes":[]},{"name":"_gem","description":"Address of token contract.","recommendedTypes":[]},{"name":"_join","description":"Address of join adapter.","recommendedTypes":[]},{"name":"_flip","description":"Address of flipper.","recommendedTypes":[]},{"name":"_pip","description":"Address of price feed.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addReaderToMedianWhitelist(address,address)","name":"addReaderToMedianWhitelist","description":"Adds an address to the Median's reader whitelist, allowing the address to read prices from the median.","parameterDecorators":[{"name":"_median","description":"Median core contract address.","recommendedTypes":[]},{"name":"_reader","description":"Address to add to whitelist.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addReaderToOSMWhitelist(address,address)","name":"addReaderToOSMWhitelist","description":"Adds an address to the Median's reader whitelist, allowing the address to read prices from the OSM.","parameterDecorators":[{"name":"_osm","description":"Oracle Security Module (OSM) core contract address.","recommendedTypes":[]},{"name":"_reader","description":"Address to add to whitelist.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addReadersToMedianWhitelist(address,address[])","name":"addReadersToMedianWhitelist","description":"Adds addresses to the Median's reader whitelist, allowing the addresses to read prices from the median.","parameterDecorators":[{"name":"_median","description":"Median core contract address.","recommendedTypes":[]},{"name":"_readers","description":"Array of addresses to add to whitelist.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addWritersToMedianWhitelist(address,address[])","name":"addWritersToMedianWhitelist","description":"Adds oracle feeds to the Median's writer whitelist, allowing the feeds to write prices.","parameterDecorators":[{"name":"_median","description":"Median core contract address.","recommendedTypes":[]},{"name":"_feeds","description":"Array of oracle feed addresses to add to whitelist.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"allowOSMFreeze(address,address,bytes32)","name":"allowOSMFreeze","description":"Add OSM address to OSM mom, allowing it to be frozen by governance.","parameterDecorators":[{"name":"_osmMom","description":"OSM Mom core contract address.","recommendedTypes":[]},{"name":"_osm","description":"Oracle Security Module (OSM) core contract address.","recommendedTypes":[]},{"name":"_ilk","description":"Collateral type using OSM.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"authorize(address,address)","name":"authorize","description":"Give an address authorization to perform auth actions on the contract.","parameterDecorators":[{"name":"_base","description":"The address of the contract where the authorization will be set.","recommendedTypes":[]},{"name":"_ward","description":"Address to be authorized.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deauthorize(address,address)","name":"deauthorize","description":"Revoke contract authorization from an address.","parameterDecorators":[{"name":"_base","description":"The address of the contract where the authorization will be revoked.","recommendedTypes":[]},{"name":"_ward","description":"Address to be deauthorized.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"decreaseGlobalDebtCeiling(address,uint256)","name":"decreaseGlobalDebtCeiling","description":"Decrease the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_vat","description":"The address of the Vat core accounting contract.","recommendedTypes":[]},{"name":"_amount","description":"The amount to reduce in DAI (ex. 10m DAI amount == 10000000).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"decreaseIlkDebtCeiling(address,bytes32,uint256,bool)","name":"decreaseIlkDebtCeiling","description":"Decrease a collateral debt ceiling. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_vat","description":"The address of the Vat core accounting contract.","recommendedTypes":[]},{"name":"_ilk","description":"The ilk to update (ex. bytes32(\"ETH-A\")).","recommendedTypes":[]},{"name":"_amount","description":"The amount to decrease in DAI (ex. 10m DAI amount == 10000000).","recommendedTypes":[]},{"name":"_global","description":"If true, decreases the global debt ceiling by _amount.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"increaseGlobalDebtCeiling(address,uint256)","name":"increaseGlobalDebtCeiling","description":"Increase the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_vat","description":"The address of the Vat core accounting contract.","recommendedTypes":[]},{"name":"_amount","description":"The amount to add in DAI (ex. 10m DAI amount == 10000000).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"increaseIlkDebtCeiling(address,bytes32,uint256,bool)","name":"increaseIlkDebtCeiling","description":"Increase a collateral debt ceiling. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_vat","description":"The address of the Vat core accounting contract.","recommendedTypes":[]},{"name":"_ilk","description":"The ilk to update (ex. bytes32(\"ETH-A\")).","recommendedTypes":[]},{"name":"_amount","description":"The amount to increase in DAI (ex. 10m DAI amount == 10000000).","recommendedTypes":[]},{"name":"_global","description":"If true, increases the global debt ceiling by _amount.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeReaderFromMedianWhitelist(address,address)","name":"removeReaderFromMedianWhitelist","description":"Removes an address to the Median's reader whitelist, disallowing the address to read prices from the median.","parameterDecorators":[{"name":"_median","description":"Median core contract address.","recommendedTypes":[]},{"name":"_reader","description":"Address to remove from whitelist.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeReaderFromOSMWhitelist(address,address)","name":"removeReaderFromOSMWhitelist","description":"Removes an address to the Median's reader whitelist, disallowing the address to read prices from the OSM.","parameterDecorators":[{"name":"_osm","description":"Oracle Security Module (OSM) core contract address.","recommendedTypes":[]},{"name":"_reader","description":"Address to remove from whitelist.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeReadersFromMedianWhitelist(address,address[])","name":"removeReadersFromMedianWhitelist","description":"Removes addresses from the Median's reader whitelist, disallowing the addresses to read prices from the median.","parameterDecorators":[{"name":"_median","description":"Median core contract address.","recommendedTypes":[]},{"name":"_readers","description":"Array of addresses to remove from whitelist.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeWritersFromMedianWhitelist(address,address[])","name":"removeWritersFromMedianWhitelist","description":"Removes oracle feeds to the Median's writer whitelist, disallowing the feeds to write prices.","parameterDecorators":[{"name":"_median","description":"Median core contract address.","recommendedTypes":[]},{"name":"_feeds","description":"Array of oracle feed addresses to remove from whitelist.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setChangelogAddress(address,bytes32,address)","name":"setChangelogAddress","description":"Set an address in the MCD on-chain changelog.","parameterDecorators":[{"name":"_log","description":"Address of the chainlog contract.","recommendedTypes":[]},{"name":"_key","description":"Access key for the address (e.g. \"MCD_VAT\").","recommendedTypes":[]},{"name":"_val","description":"The address associated with the _key.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setChangelogIPFS(address,string)","name":"setChangelogIPFS","description":"Set IPFS hash of IPFS changelog in MCD on-chain changelog.","parameterDecorators":[{"name":"_log","description":"Address of the chainlog contract.","recommendedTypes":[]},{"name":"_ipfsHash","description":"IPFS hash (e.g. \"QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\").","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setChangelogSHA256(address,string)","name":"setChangelogSHA256","description":"Set SHA256 hash in MCD on-chain changelog.","parameterDecorators":[{"name":"_log","description":"Address of the chainlog contract.","recommendedTypes":[]},{"name":"_SHA256Sum","description":"SHA256 hash (e.g. \"e42dc9d043a57705f3f097099e6b2de4230bca9a020c797508da079f9079e35b\").","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setChangelogVersion(address,string)","name":"setChangelogVersion","description":"Set version in the MCD on-chain changelog.","parameterDecorators":[{"name":"_log","description":"Address of the chainlog contract.","recommendedTypes":[]},{"name":"_version","description":"Changelog version (e.g. \"1.1.2\").","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setContract(address,bytes32,bytes32,address)","name":"setContract","description":"Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat).","parameterDecorators":[{"name":"_base","description":"The address of the contract where the new contract address will be filed.","recommendedTypes":[]},{"name":"_ilk","description":"Collateral type.","recommendedTypes":[]},{"name":"_what","description":"Name of contract to file.","recommendedTypes":[]},{"name":"_addr","description":"Address of contract to file.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setContract(address,bytes32,address)","name":"setContract","description":"Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat).","parameterDecorators":[{"name":"_base","description":"The address of the contract where the new contract address will be filed.","recommendedTypes":[]},{"name":"_what","description":"Name of contract to file.","recommendedTypes":[]},{"name":"_addr","description":"Address of contract to file.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDAIReferenceValue(address,uint256)","name":"setDAIReferenceValue","description":"Set the value of DAI in the reference asset (e.g. $1 per DAI). Value will be converted to the correct internal precision.Equation used for conversion is value * RAY / 1000.","parameterDecorators":[{"name":"_spot","description":"The address of the Spot core contract.","recommendedTypes":[]},{"name":"_value","description":"The value to set as integer (x1000) (ex. $1.025 == 1025).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDSR(address,uint256)","name":"setDSR","description":"Set the Dai Savings Rate. See: docs/rates.txt.","parameterDecorators":[{"name":"_pot","description":"The address of the Pot core contract.","recommendedTypes":[]},{"name":"_rate","description":"The accumulated rate (ex. 4% => 1000000001243680656318820312).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDebtAuctionBidDuration(address,uint256)","name":"setDebtAuctionBidDuration","description":"Set bid duration for debt auctions.","parameterDecorators":[{"name":"_flop","description":"The address of the Flopper core contract.","recommendedTypes":[]},{"name":"_duration","description":"Amount of time for bids.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDebtAuctionDAIAmount(address,uint256)","name":"setDebtAuctionDAIAmount","description":"Set the DAI amount for system debt to be covered by each debt auction. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_vow","description":"The address of the Vow core contract.","recommendedTypes":[]},{"name":"_amount","description":"The amount to set in DAI (ex. 10m DAI amount == 10000000).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDebtAuctionDelay(address,uint256)","name":"setDebtAuctionDelay","description":"Set the number of seconds that pass before system debt is auctioned for MKR tokens.","parameterDecorators":[{"name":"_vow","description":"The address of the Vow core contract.","recommendedTypes":[]},{"name":"_duration","description":"Duration in seconds.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDebtAuctionDuration(address,uint256)","name":"setDebtAuctionDuration","description":"Set total auction duration for debt auctions.","parameterDecorators":[{"name":"_flop","description":"The address of the Flopper core contract.","recommendedTypes":[]},{"name":"_duration","description":"Amount of time for auctions.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDebtAuctionMKRAmount(address,uint256)","name":"setDebtAuctionMKRAmount","description":"Set the starting MKR amount to be auctioned off to cover system debt in debt auctions. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_vow","description":"The address of the Vow core contract.","recommendedTypes":[]},{"name":"_amount","description":"The amount to set in MKR (ex. 250 MKR amount == 250).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDebtAuctionMKRIncreaseRate(address,uint256)","name":"setDebtAuctionMKRIncreaseRate","description":"Set the rate of increasing amount of MKR out for auction during debt auctions. Amount will be converted to the correct internal precision.MKR amount is increased by this rate every \"tick\" (if auction duration has passed and no one has bid on the MKR)Equation used for conversion is (pct + 100,000) * WAD / 100,000 (ex. changes 50% to 150% WAD needed for pad).","parameterDecorators":[{"name":"_flop","description":"The address of the Flopper core contract.","recommendedTypes":[]},{"name":"_pct_bps","description":"The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setEmergencyShutdownProcessingTime(address,uint256)","name":"setEmergencyShutdownProcessingTime","description":"Set the duration of time that has to pass during emergency shutdown before collateral can start being claimed by DAI holders.","parameterDecorators":[{"name":"_end","description":"The address of the End core contract.","recommendedTypes":[]},{"name":"_duration","description":"Time in seconds to set for ES processing time.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setGlobalDebtCeiling(address,uint256)","name":"setGlobalDebtCeiling","description":"Set the global debt ceiling. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_vat","description":"The address of the Vat core accounting contract.","recommendedTypes":[]},{"name":"_amount","description":"The amount to set in DAI (ex. 10m DAI amount == 10000000).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setGlobalStabilityFee(address,uint256)","name":"setGlobalStabilityFee","description":"Set the global stability fee (is not typically used, currently is 0). Many of the settings that change weekly rely on the rate accumulator described at https://docs.makerdao.com/smart-contract-modules/rates-module To check this yourself, use the following rate calculation (example 8%): $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )' A table of rates can also be found at: https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW.","parameterDecorators":[{"name":"_jug","description":"The address of the Jug core accounting contract.","recommendedTypes":[]},{"name":"_rate","description":"The accumulated rate (ex. 4% => 1000000001243680656318820312).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setIlkAuctionDuration(address,uint256)","name":"setIlkAuctionDuration","description":"Set auction duration for a collateral type.","parameterDecorators":[{"name":"_flip","description":"The address of the ilk's flip core accounting contract.","recommendedTypes":[]},{"name":"_duration","description":"Amount of time for auctions.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setIlkBidDuration(address,uint256)","name":"setIlkBidDuration","description":"Set bid duration for a collateral type.","parameterDecorators":[{"name":"_flip","description":"The address of the ilk's flip core accounting contract.","recommendedTypes":[]},{"name":"_duration","description":"Amount of time for bids.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setIlkDebtCeiling(address,bytes32,uint256)","name":"setIlkDebtCeiling","description":"Set a collateral debt ceiling. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_vat","description":"The address of the Vat core accounting contract.","recommendedTypes":[]},{"name":"_ilk","description":"The ilk to update (ex. bytes32(\"ETH-A\")).","recommendedTypes":[]},{"name":"_amount","description":"The amount to set in DAI (ex. 10m DAI amount == 10000000).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setIlkLiquidationPenalty(address,bytes32,uint256)","name":"setIlkLiquidationPenalty","description":"Set a collateral liquidation penalty. Amount will be converted to the correct internal precision.Equation used for conversion is (pct + 100,000) * WAD / 100,000 (ex. changes 13% to 113% WAD needed for chop).","parameterDecorators":[{"name":"_cat","description":"The address of the Cat core accounting contract (will need to revisit for LIQ-2.0).","recommendedTypes":[]},{"name":"_ilk","description":"The ilk to update (ex. bytes32(\"ETH-A\")).","recommendedTypes":[]},{"name":"_pct_bps","description":"The pct, in basis points, to set in integer form (x100). (ex. 10.25% = 10.25 * 100 = 1025).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setIlkLiquidationRatio(address,bytes32,uint256)","name":"setIlkLiquidationRatio","description":"Set a collateral liquidation ratio. Amount will be converted to the correct internal precision.Equation used for conversion is pct * RAY / 100,000.","parameterDecorators":[{"name":"_spot","description":"The address of the Spot core accounting contract.","recommendedTypes":[]},{"name":"_ilk","description":"The ilk to update (ex. bytes32(\"ETH-A\")).","recommendedTypes":[]},{"name":"_pct_bps","description":"The pct, in basis points, to set in integer form (x100). (ex. 150% = 150 * 100 = 15000).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setIlkMaxLiquidationAmount(address,bytes32,uint256)","name":"setIlkMaxLiquidationAmount","description":"Set max DAI amount for liquidation per vault for collateral. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_cat","description":"The address of the Cat core accounting contract (will need to revisit for LIQ-2.0).","recommendedTypes":[]},{"name":"_ilk","description":"The ilk to update (ex. bytes32(\"ETH-A\")).","recommendedTypes":[]},{"name":"_amount","description":"The amount to set in DAI (ex. 10m DAI amount == 10000000).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setIlkMinAuctionBidIncrease(address,uint256)","name":"setIlkMinAuctionBidIncrease","description":"Set minimum bid increase for collateral. Amount will be converted to the correct internal precision.Equation used for conversion is pct * WAD / 100,000.","parameterDecorators":[{"name":"_flip","description":"The address of the ilk's flip core accounting contract.","recommendedTypes":[]},{"name":"_pct_bps","description":"The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setIlkMinVaultAmount(address,bytes32,uint256)","name":"setIlkMinVaultAmount","description":"Set a collateral minimum vault amount. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_vat","description":"The address of the Vat core accounting contract.","recommendedTypes":[]},{"name":"_ilk","description":"The ilk to update (ex. bytes32(\"ETH-A\")).","recommendedTypes":[]},{"name":"_amount","description":"The amount to set in DAI (ex. 10m DAI amount == 10000000).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setIlkStabilityFee(address,bytes32,uint256,bool)","name":"setIlkStabilityFee","description":"Set the stability fee for a given ilk. Many of the settings that change weekly rely on the rate accumulator described at https://docs.makerdao.com/smart-contract-modules/rates-module To check this yourself, use the following rate calculation (example 8%): $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )' A table of rates can also be found at: https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW.","parameterDecorators":[{"name":"_jug","description":"The address of the Jug core accounting contract.","recommendedTypes":[]},{"name":"_ilk","description":"The ilk to update (ex. bytes32(\"ETH-A\") ).","recommendedTypes":[]},{"name":"_rate","description":"The accumulated rate (ex. 4% => 1000000001243680656318820312).","recommendedTypes":[]},{"name":"_doDrip","description":"`true` to accumulate stability fees for the collateral.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMaxTotalDAILiquidationAmount(address,uint256)","name":"setMaxTotalDAILiquidationAmount","description":"Set the maximum total DAI amount that can be out for liquidation in the system at any point. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_cat","description":"The address of the Cat core contract.","recommendedTypes":[]},{"name":"_amount","description":"The amount to set in DAI (ex. 250,000 DAI amount == 250000).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMedianWritersQuorum(address,uint256)","name":"setMedianWritersQuorum","description":"Sets the minimum number of valid messages from whitelisted oracle feeds needed to update median price.","parameterDecorators":[{"name":"_median","description":"Median core contract address.","recommendedTypes":[]},{"name":"_minQuorum","description":"Minimum number of valid messages from whitelisted oracle feeds needed to update median price (NOTE: MUST BE ODD NUMBER).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMinDebtAuctionBidIncrease(address,uint256)","name":"setMinDebtAuctionBidIncrease","description":"Set minimum bid increase for debt auctions. Amount will be converted to the correct internal precision.Equation used for conversion is pct * WAD / 100,000.","parameterDecorators":[{"name":"_flop","description":"The address of the Flopper core contract.","recommendedTypes":[]},{"name":"_pct_bps","description":"The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMinSurplusAuctionBidIncrease(address,uint256)","name":"setMinSurplusAuctionBidIncrease","description":"Set minimum bid increase for surplus auctions. Amount will be converted to the correct internal precision.Equation used for conversion is pct * WAD / 100,000.","parameterDecorators":[{"name":"_flap","description":"The address of the Flapper core contract.","recommendedTypes":[]},{"name":"_pct_bps","description":"The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSurplusAuctionAmount(address,uint256)","name":"setSurplusAuctionAmount","description":"Set the DAI amount for system surplus auctions. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_vow","description":"The address of the Vow core contract.","recommendedTypes":[]},{"name":"_amount","description":"The amount to set in DAI (ex. 10m DAI amount == 10000000).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSurplusAuctionBidDuration(address,uint256)","name":"setSurplusAuctionBidDuration","description":"Set bid duration for surplus auctions.","parameterDecorators":[{"name":"_flap","description":"The address of the Flapper core contract.","recommendedTypes":[]},{"name":"_duration","description":"Amount of time for bids.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSurplusAuctionDuration(address,uint256)","name":"setSurplusAuctionDuration","description":"Set total auction duration for surplus auctions.","parameterDecorators":[{"name":"_flap","description":"The address of the Flapper core contract.","recommendedTypes":[]},{"name":"_duration","description":"Amount of time for auctions.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSurplusBuffer(address,uint256)","name":"setSurplusBuffer","description":"Set the DAI amount for system surplus buffer, must be exceeded before surplus auctions start. Amount will be converted to the correct internal precision.","parameterDecorators":[{"name":"_vow","description":"The address of the Vow core contract.","recommendedTypes":[]},{"name":"_amount","description":"The amount to set in DAI (ex. 10m DAI amount == 10000000).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateCollateralAuctionContract(address,address,address,address,bytes32,address,address)","name":"updateCollateralAuctionContract","description":"Update collateral auction contracts.","parameterDecorators":[{"name":"_vat","description":"Vat core contract address.","recommendedTypes":[]},{"name":"_cat","description":"Cat core contract address.","recommendedTypes":[]},{"name":"_end","description":"End core contract address.","recommendedTypes":[]},{"name":"_flipperMom","description":"Flipper Mom core contract address.","recommendedTypes":[]},{"name":"_ilk","description":"The collateral's auction contract to update.","recommendedTypes":[]},{"name":"_newFlip","description":"New auction contract address.","recommendedTypes":[]},{"name":"_oldFlip","description":"Old auction contract address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateCollateralPrice(address,bytes32)","name":"updateCollateralPrice","description":"Update price of a given collateral type.","parameterDecorators":[{"name":"_spot","description":"Spotter contract address.","recommendedTypes":[]},{"name":"_ilk","description":"Collateral type.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateDebtAuctionContract(address,address,address,address,address)","name":"updateDebtAuctionContract","description":"Update debt auction contracts.","parameterDecorators":[{"name":"_vat","description":"Vat core contract address.","recommendedTypes":[]},{"name":"_vow","description":"Vow core contract address.","recommendedTypes":[]},{"name":"_mkrAuthority","description":"MKRAuthority core contract address.","recommendedTypes":[]},{"name":"_newFlop","description":"New debt auction contract address.","recommendedTypes":[]},{"name":"_oldFlop","description":"Old debt auction contract address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateSurplusAuctionContract(address,address,address,address)","name":"updateSurplusAuctionContract","description":"Update surplus auction contracts.","parameterDecorators":[{"name":"_vat","description":"Vat core contract address.","recommendedTypes":[]},{"name":"_vow","description":"Vow core contract address.","recommendedTypes":[]},{"name":"_newFlap","description":"New surplus auction contract address.","recommendedTypes":[]},{"name":"_oldFlap","description":"Old surplus auction contract address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}