{
  "schema": "../schema.json",
  "tags": [
    "voting"
  ],
  "name": "Proposal",
  "description": "Proposal. Allow users to vote on a proposal for yes or no. The user has to pay a fee to vote and can only vote one time on a proposal.",
  "eventDecorators": [
    {
      "signature": "VoteCasted(uint256,address,uint256)",
      "name": "VoteCasted",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "vote",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "VOTE_FEE()",
      "name": "VOTE_FEE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "clean()",
      "name": "clean",
      "description": "Clean the current vote state and creates a new proposal. This method is useful for developers to start a new proposal for testing purposes.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getVote(address)",
      "name": "getVote",
      "description": "Returns the vote of the user for the current proposal.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposalId()",
      "name": "proposalId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vote(uint256)",
      "name": "vote",
      "description": "Performs a vote for the current proposal.",
      "parameterDecorators": [
        {
          "name": "_vote",
          "description": "integer representation of the vote.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "votesForNo()",
      "name": "votesForNo",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "votesForYes()",
      "name": "votesForYes",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}