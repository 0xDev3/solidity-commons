{
  "schema": "../schema.json",
  "tags": [],
  "name": "StakingPoolDualReward",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Deposit(address,uint256)",
      "name": "Deposit",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DepositRewards(uint256,uint256)",
      "name": "DepositRewards",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "amount0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EmergencyRewardWithdraw(address,uint256,uint256)",
      "name": "EmergencyRewardWithdraw",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EmergencySweepWithdraw(address,address,uint256)",
      "name": "EmergencySweepWithdraw",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EmergencyWithdraw(address,uint256)",
      "name": "EmergencyWithdraw",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LogUpdatePool(uint256,uint256,uint256)",
      "name": "LogUpdatePool",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "endBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reward0PerBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reward1PerBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetBurnAddress(address,address)",
      "name": "SetBurnAddress",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newBurnAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetFeeAddress(address,address)",
      "name": "SetFeeAddress",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newFeeAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SkimStakeTokenFees(address,uint256)",
      "name": "SkimStakeTokenFees",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256)",
      "name": "Withdraw",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WithdrawEther(address,uint256)",
      "name": "WithdrawEther",
      "description": "Emitted when the contract is unpaused.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "REWARD_TOKEN0()",
      "name": "REWARD_TOKEN0",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "REWARD_TOKEN1()",
      "name": "REWARD_TOKEN1",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "STAKE_TOKEN()",
      "name": "STAKE_TOKEN",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "accRewardToken0PerShare()",
      "name": "accRewardToken0PerShare",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "accRewardToken1PerShare()",
      "name": "accRewardToken1PerShare",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burnAddress()",
      "name": "burnAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(uint256)",
      "name": "deposit",
      "description": "Deposit staking token into the contract to earn rewards. Since this contract needs to be supplied with rewards we are sending the balance of the contract if the pending rewards are higher.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "The amount of staking tokens to deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositBurnFee()",
      "name": "depositBurnFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositFee()",
      "name": "depositFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositRewards(uint256,uint256)",
      "name": "depositRewards",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_amount0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyRewardWithdraw(uint256,uint256)",
      "name": "emergencyRewardWithdraw",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_amount0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdraw()",
      "name": "emergencyWithdraw",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "endBlock()",
      "name": "endBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feeAddress()",
      "name": "feeAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMultiplier(uint256,uint256)",
      "name": "getMultiplier",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakeTokenFeeBalance()",
      "name": "getStakeTokenFeeBalance",
      "description": "Obtain the stake token fees (if any) earned by reflect token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_stakeToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_rewardToken0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_rewardToken1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_reward0PerBlock",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_reward1PerBlock",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_startBlock",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_endBlock",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_depositFee",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_feeAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_depositBurnFee",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_burnAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lastRewardBlock()",
      "name": "lastRewardBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingReward(address)",
      "name": "pendingReward",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reward0PerBlock()",
      "name": "reward0PerBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reward1PerBlock()",
      "name": "reward1PerBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardBalance()",
      "name": "rewardBalance",
      "description": "Obtain the reward balance of this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setBurnAddress(address)",
      "name": "setBurnAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_burnAddress",
          "description": "The new burn address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setEndBlock(uint256)",
      "name": "setEndBlock",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_endBlock",
          "description": "The block when rewards will end.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeAddress(address)",
      "name": "setFeeAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_feeAddress",
          "description": "The new fee address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRewardPerBlock(uint256,uint256)",
      "name": "setRewardPerBlock",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_reward0PerBlock",
          "description": "The amount of reward 0 tokens to be given per block.",
          "recommendedTypes": []
        },
        {
          "name": "_reward1PerBlock",
          "description": "The amount of reward 1 tokens to be given per block.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "skimStakeTokenFees()",
      "name": "skimStakeTokenFees",
      "description": "Remove excess stake tokens earned by reflect fees.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "startBlock()",
      "name": "startBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sweepToken(address)",
      "name": "sweepToken",
      "description": "A public function to sweep accidental BEP20 transfers to this contract. Tokens are sent to owner.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The address of the BEP20 token to sweep.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalStaked()",
      "name": "totalStaked",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePool()",
      "name": "updatePool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userInfo(address)",
      "name": "userInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "reward0Debt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "reward1Debt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Withdraw rewards and/or staked tokens. Pass a 0 amount to withdraw only rewards.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "The amount of staking tokens to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawEther()",
      "name": "withdrawEther",
      "description": "Remove ether earned by reflect fees.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}