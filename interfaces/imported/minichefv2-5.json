{"schema":"../schema.json","tags":["tokens","locking"],"name":"MiniChefV2","description":"The (older) MasterChef contract gives out a constant number of ZENC tokens per block. It is the only address with minting rights for ZENC. The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token that is deposited into the MasterChef V1 (MCV1) contract. The allocation point for this pool on MCV1 is the total allocation point for all pools that receive double incentives.","eventDecorators":[{"signature":"Deposit(address,uint256,uint256,address)","name":"Deposit","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"to","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"EmergencyWithdraw(address,uint256,uint256,address)","name":"EmergencyWithdraw","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"to","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Harvest(address,uint256,uint256)","name":"Harvest","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"LogPoolAddition(uint256,uint256,address,address)","name":"LogPoolAddition","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"allocPoint","description":"","recommendedTypes":[],"indexed":false},{"name":"lpToken","description":"","recommendedTypes":[],"indexed":true},{"name":"rewarder","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"LogSetPool(uint256,uint256,address,bool)","name":"LogSetPool","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"allocPoint","description":"","recommendedTypes":[],"indexed":false},{"name":"rewarder","description":"","recommendedTypes":[],"indexed":true},{"name":"overwrite","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"LogUpdatePool(uint256,uint64,uint256,uint256)","name":"LogUpdatePool","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"lastRewardTime","description":"","recommendedTypes":[],"indexed":false},{"name":"lpSupply","description":"","recommendedTypes":[],"indexed":false},{"name":"accZencPerShare","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"LogZencPerSecond(uint256)","name":"LogZencPerSecond","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"zencPerSecond","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Withdraw(address,uint256,uint256,address)","name":"Withdraw","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"to","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"ZENC()","name":"ZENC","description":"Address of ZENC contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"add(uint256,address,address)","name":"add","description":"Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do.","parameterDecorators":[{"name":"allocPoint","description":"AP of the new pool.","recommendedTypes":[]},{"name":"_lpToken","description":"Address of the LP ERC-20 token.","recommendedTypes":[]},{"name":"_rewarder","description":"Address of the rewarder delegate.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"batch(bytes[],bool)","name":"batch","description":"","parameterDecorators":[{"name":"calls","description":"","recommendedTypes":[]},{"name":"revertOnFail","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"successes","description":"","recommendedTypes":[],"solidityType":"bool[]"},{"name":"results","description":"","recommendedTypes":[],"solidityType":"bytes[]"}],"emittableEvents":[],"readOnly":false},{"signature":"claimOwnership()","name":"claimOwnership","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deposit(uint256,uint256,address)","name":"deposit","description":"Deposit LP tokens to MCV2 for ZENC allocation.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"amount","description":"LP token amount to deposit.","recommendedTypes":[]},{"name":"to","description":"The receiver of `amount` deposit benefit.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"emergencyWithdraw(uint256,address)","name":"emergencyWithdraw","description":"Withdraw without caring about rewards. EMERGENCY ONLY.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"to","description":"Receiver of the LP tokens.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"harvest(uint256,address)","name":"harvest","description":"Harvest proceeds for transaction sender to `to`.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"to","description":"Receiver of ZENC rewards.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"lpToken(uint256)","name":"lpToken","description":"Address of the LP token for each MCV2 pool.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"massUpdatePools(uint256[])","name":"massUpdatePools","description":"Update reward variables for all pools. Be careful of gas spending!.","parameterDecorators":[{"name":"pids","description":"Pool IDs of all to be updated. Make sure to update all active pools.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingOwner()","name":"pendingOwner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingZenc(uint256,address)","name":"pendingZenc","description":"View function to see pending ZENC on frontend.","parameterDecorators":[{"name":"_pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"_user","description":"Address of user.","recommendedTypes":[]}],"returnDecorators":[{"name":"pending","description":"ZENC reward for a given user.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)","name":"permitToken","description":"","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]},{"name":"from","description":"","recommendedTypes":[]},{"name":"to","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]},{"name":"deadline","description":"","recommendedTypes":[]},{"name":"v","description":"","recommendedTypes":[]},{"name":"r","description":"","recommendedTypes":[]},{"name":"s","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"poolInfo(uint256)","name":"poolInfo","description":"Info of each MCV2 pool.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"accZencPerShare","description":"","recommendedTypes":[],"solidityType":"uint128"},{"name":"lastRewardTime","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"allocPoint","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":true},{"signature":"poolLength()","name":"poolLength","description":"Returns the number of MCV2 pools.","parameterDecorators":[],"returnDecorators":[{"name":"pools","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rewarder(uint256)","name":"rewarder","description":"Address of each `IRewarder` contract in MCV2.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"set(uint256,uint256,address,bool)","name":"set","description":"Update the given pool's ZENC allocation point and `IRewarder` contract. Can only be called by the owner.","parameterDecorators":[{"name":"_pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"_allocPoint","description":"New AP of the pool.","recommendedTypes":[]},{"name":"_rewarder","description":"Address of the rewarder delegate.","recommendedTypes":[]},{"name":"overwrite","description":"True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setZencPerSecond(uint256)","name":"setZencPerSecond","description":"Sets the zenc per second to be distributed. Can only be called by the owner.","parameterDecorators":[{"name":"_zencPerSecond","description":"The amount of Zenc to be distributed per second.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"totalAllocPoint()","name":"totalAllocPoint","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address,bool,bool)","name":"transferOwnership","description":"","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]},{"name":"direct","description":"","recommendedTypes":[]},{"name":"renounce","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updatePool(uint256)","name":"updatePool","description":"Update reward variables of the given pool.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]}],"returnDecorators":[{"name":"pool","description":"Returns the pool that was updated.","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":false},{"signature":"userInfo(uint256,address)","name":"userInfo","description":"Info of each user that stakes LP tokens.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"rewardDebt","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(uint256,uint256,address)","name":"withdraw","description":"Withdraw LP tokens from MCV2.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"amount","description":"LP token amount to withdraw.","recommendedTypes":[]},{"name":"to","description":"Receiver of the LP tokens.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawAndHarvest(uint256,uint256,address)","name":"withdrawAndHarvest","description":"Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"amount","description":"LP token amount to withdraw.","recommendedTypes":[]},{"name":"to","description":"Receiver of the LP tokens and ZENC rewards.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"zencPerSecond()","name":"zencPerSecond","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}