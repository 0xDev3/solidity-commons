{
  "schema": "../schema.json",
  "tags": [],
  "name": "FeePool",
  "description": "",
  "eventDecorators": [
    {
      "signature": "FeePeriodClosed(uint256)",
      "name": "FeePeriodClosed",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "feePeriodId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FeesClaimed(address,uint256,uint256)",
      "name": "FeesClaimed",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "access",
          "description": "TRUE if the Watcher was given permissions, FALSE if permissions were removed.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "watcher",
          "description": "the address of the Watcher.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "IssuanceDebtRatioEntry(address,uint256,uint256,uint256)",
      "name": "IssuanceDebtRatioEntry",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "debtRatio",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "debtEntryIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "feePeriodStartingDebtIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerChanged(address,address)",
      "name": "OwnerChanged",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "oldOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerNominated(address)",
      "name": "OwnerNominated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProxyUpdated(address)",
      "name": "ProxyUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "proxyAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "FEE_ADDRESS()",
      "name": "FEE_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "FEE_PERIOD_LENGTH()",
      "name": "FEE_PERIOD_LENGTH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_ADDRESSES_FROM_RESOLVER()",
      "name": "MAX_ADDRESSES_FROM_RESOLVER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "appendAccountIssuanceRecord(address,uint256,uint256)",
      "name": "appendAccountIssuanceRecord",
      "description": "Logs an accounts issuance data per fee period. onlyIssuer to call me on synthetix.issue() & synthetix.burn() calls to store the locked SNX per fee period so we know to allocate the correct proportions of fees and rewards per period.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Message.Senders account address.",
          "recommendedTypes": []
        },
        {
          "name": "debtRatio",
          "description": "Debt percentage this account has locked after minting or burning their synth.",
          "recommendedTypes": []
        },
        {
          "name": "debtEntryIndex",
          "description": "The index in the global debt ledger. synthetixState.issuanceData(account).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "appendVestingEntry(address,uint256)",
      "name": "appendVestingEntry",
      "description": "Owner can escrow SNX. Owner to send the tokens to the RewardEscrow.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Address to escrow tokens for.",
          "recommendedTypes": []
        },
        {
          "name": "quantity",
          "description": "Amount of tokens to escrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimFees()",
      "name": "claimFees",
      "description": "Claim fees for last period when available or not already withdrawn.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimOnBehalf(address)",
      "name": "claimOnBehalf",
      "description": "Delegated claimFees(). Call from the deletegated address and the fees will be sent to the claimingForAddress. approveClaimOnBehalf() must be called first to approve the deletage address.",
      "parameterDecorators": [
        {
          "name": "claimingForAddress",
          "description": "The account you are claiming fees for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "closeCurrentFeePeriod()",
      "name": "closeCurrentFeePeriod",
      "description": "Close the current fee period and start a new one.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "effectiveDebtRatioForPeriod(address,uint256)",
      "name": "effectiveDebtRatioForPeriod",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "period",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feePeriodDuration()",
      "name": "feePeriodDuration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feesAvailable(address)",
      "name": "feesAvailable",
      "description": "The fees available to be withdrawn by a specific account, priced in sUSD. Returns two amounts, one for fees and one for SNX rewards.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feesByPeriod(address)",
      "name": "feesByPeriod",
      "description": "Calculates fees by period for an account, priced in sUSD.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address you want to query the fees for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[2][2]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLastFeeWithdrawal(address)",
      "name": "getLastFeeWithdrawal",
      "description": "Get the feePeriodID of the last claim this account made.",
      "parameterDecorators": [
        {
          "name": "_claimingAddress",
          "description": "account to check the last fee period ID claim for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPenaltyThresholdRatio()",
      "name": "getPenaltyThresholdRatio",
      "description": "Calculate the collateral ratio before user is blocked from claiming.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getResolverAddressesRequired()",
      "name": "getResolverAddressesRequired",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "addressesRequired",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32[24]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "importFeePeriod(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "importFeePeriod",
      "description": "Admin function to import the FeePeriod data from the previous contract.",
      "parameterDecorators": [
        {
          "name": "feePeriodIndex",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "feePeriodId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "startingDebtIndex",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "feesToDistribute",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "feesClaimed",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "rewardsToDistribute",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "rewardsClaimed",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "integrationProxy()",
      "name": "integrationProxy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isFeesClaimable(address)",
      "name": "isFeesClaimable",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "feesClaimable",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isResolverCached(address)",
      "name": "isResolverCached",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_resolver",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "issuanceRatio()",
      "name": "issuanceRatio",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "messageSender()",
      "name": "messageSender",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nominateNewOwner(address)",
      "name": "nominateNewOwner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nominatedOwner()",
      "name": "nominatedOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxy()",
      "name": "proxy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recentFeePeriods(uint256)",
      "name": "recentFeePeriods",
      "description": "",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "feePeriodId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "startingDebtIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "feesToDistribute",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "feesClaimed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardsToDistribute",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardsClaimed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recordFeePaid(uint256)",
      "name": "recordFeePaid",
      "description": "The Exchanger contract informs us when fees are paid.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "susd amount in fees being paid.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resolver()",
      "name": "resolver",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "resolverAddressesRequired(uint256)",
      "name": "resolverAddressesRequired",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setIntegrationProxy(address)",
      "name": "setIntegrationProxy",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_integrationProxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMessageSender(address)",
      "name": "setMessageSender",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setProxy(address)",
      "name": "setProxy",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_proxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setResolverAndSyncCache(address)",
      "name": "setResolverAndSyncCache",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_resolver",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRewardsToDistribute(uint256)",
      "name": "setRewardsToDistribute",
      "description": "The RewardsDistribution contract informs us how many SNX rewards are sent to RewardEscrow to be claimed.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setupExpiryTime()",
      "name": "setupExpiryTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "targetThreshold()",
      "name": "targetThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalFeesAvailable()",
      "name": "totalFeesAvailable",
      "description": "The total fees available in the system to be withdrawnn in sUSD.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalRewardsAvailable()",
      "name": "totalRewardsAvailable",
      "description": "The total SNX rewards available in the system to be withdrawn.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}