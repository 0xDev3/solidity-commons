{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "locking",
    "liquidity",
    "avalanche"
  ],
  "name": "LiquidityPoolManagerV2",
  "description": "Contract to distribute PNG tokens to whitelisted trading pairs. After deploying, whitelist the desired pairs and set the avaxPngPair. When initial administration is complete. Ownership should be transferred to the Timelock governance contract.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "activateFeeSplit(uint256,uint256)",
      "name": "activateFeeSplit",
      "description": "Activates the fee split mechanism. Divides rewards between AVAX and PNG pools regardless of liquidity. AVAX and PNG pools will receive a fixed proportion of the pool rewards. The AVAX and PNG splits should correspond to percentage of rewards received for each and must add up to 100. For the purposes of fee splitting, the AVAX/PNG pool is a PNG pool. This method can also be used to change the split ratio after fee splitting has been activated. Args: avaxSplit: Percent of rewards to distribute to AVAX pools pngSplit: Percent of rewards to distribute to PNG pools.",
      "parameterDecorators": [
        {
          "name": "avaxSplit_",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "pngSplit_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addWhitelistedPool(address,uint256)",
      "name": "addWhitelistedPool",
      "description": "Adds a new whitelisted liquidity pool pair. Generates a staking contract. Liquidity providers may stake this liquidity provider reward token and claim PNG rewards proportional to their stake. Pair must contain either AVAX or PNG. Associates a weight with the pair. Rewards are distributed to the pair proportionally based on its share of the total weight. Args: pair: pair to whitelist weight: how heavily to distribute rewards to this pool relative to other pools.",
      "parameterDecorators": [
        {
          "name": "pair",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "weight",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "avaxPngPair()",
      "name": "avaxPngPair",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "avaxSplit()",
      "name": "avaxSplit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calculateAndDistribute()",
      "name": "calculateAndDistribute",
      "description": "Calculate pool token distribution and distribute tokens. Methods are separate to use risk of approaching the gas limit. There must be vested tokens to distribute, so this method should be called after vestAllocation.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateReturns()",
      "name": "calculateReturns",
      "description": "Determine how the vested PNG allocation will be distributed to the liquidity pool staking contracts. Must be called before distributeTokens(). Tokens are distributed to pools based on relative liquidity proportional to total liquidity. Should be called after vestAllocation()/.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeWeight(address,uint256)",
      "name": "changeWeight",
      "description": "Adjust the weight of an existing pool Args: pair: pool to adjust weight of weight: new weight.",
      "parameterDecorators": [
        {
          "name": "pair",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "weight",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deactivateFeeSplit()",
      "name": "deactivateFeeSplit",
      "description": "Deactivates fee splitting.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "distributeTokens()",
      "name": "distributeTokens",
      "description": "After token distributions have been calculated, actually distribute the vested PNG allocation to the staking pools. Must be called after calculateReturns().",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "distributeTokensSinglePool(uint256)",
      "name": "distributeTokensSinglePool",
      "description": "Fallback for distributeTokens in case of gas overflow. Distributes PNG tokens to a single pool. distibuteTokens() must still be called once to reset the contract state before calling vestAllocation. Args: pairIndex: index of pair to distribute tokens to, AVAX pairs come first in the ordering.",
      "parameterDecorators": [
        {
          "name": "pairIndex",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "distribution(uint256)",
      "name": "distribution",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAvaxLiquidity(address)",
      "name": "getAvaxLiquidity",
      "description": "Calculates the amount of liquidity in the pair. For an AVAX pool, the liquidity in the pair is two times the amount of AVAX. Only works for AVAX pairs. Args: pair: AVAX pair to get liquidity in Returns: the amount of liquidity in the pool in units of AVAX.",
      "parameterDecorators": [
        {
          "name": "pair",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAvaxPngRatio()",
      "name": "getAvaxPngRatio",
      "description": "Calculates the price of swapping AVAX for 1 PNG Returns: the price of swapping AVAX for 1 PNG.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "conversionFactor",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPngLiquidity(address,uint256)",
      "name": "getPngLiquidity",
      "description": "Calculates the amount of liquidity in the pair. For a PNG pool, the liquidity in the pair is two times the amount of PNG multiplied by the price of AVAX per PNG. Only works for PNG pairs. Args: pair: PNG pair to get liquidity in conversionFactor: the price of AVAX to PNG Returns: the amount of liquidity in the pool in units of AVAX.",
      "parameterDecorators": [
        {
          "name": "pair",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "conversionFactor",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAvaxPair(address)",
      "name": "isAvaxPair",
      "description": "Check if the given pair is a whitelisted AVAX pair. The AVAX/PNG pair is considered an AVAX pair. Args: pair: pair to check Return: True if whitelisted and pair contains AVAX.",
      "parameterDecorators": [
        {
          "name": "pair",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPngPair(address)",
      "name": "isPngPair",
      "description": "Check if the given pair is a whitelisted PNG pair. The AVAX/PNG pair is not considered a PNG pair. Args: pair: pair to check Return: True if whitelisted and pair contains PNG but is not AVAX/PNG pair.",
      "parameterDecorators": [
        {
          "name": "pair",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isWhitelisted(address)",
      "name": "isWhitelisted",
      "description": "Check if the given pair is a whitelisted pair Args: pair: pair to check if whitelisted Return: True if whitelisted.",
      "parameterDecorators": [
        {
          "name": "pair",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numPools()",
      "name": "numPools",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "png()",
      "name": "png",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pngSplit()",
      "name": "pngSplit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeWhitelistedPool(address)",
      "name": "removeWhitelistedPool",
      "description": "Delists a whitelisted pool. Liquidity providers will not receiving future rewards. Already vested funds can still be claimed. Re-whitelisting a delisted pool will deploy a new staking contract. Args: pair: pair to remove from whitelist.",
      "parameterDecorators": [
        {
          "name": "pair",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAvaxPngPair(address)",
      "name": "setAvaxPngPair",
      "description": "Sets the AVAX/PNG pair. Pair's tokens must be AVAX and PNG. Args: pair: AVAX/PNG pair.",
      "parameterDecorators": [
        {
          "name": "avaxPngPair_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "splitPools()",
      "name": "splitPools",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakes(address)",
      "name": "stakes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "treasuryVester()",
      "name": "treasuryVester",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unallocatedPng()",
      "name": "unallocatedPng",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vestAllocation()",
      "name": "vestAllocation",
      "description": "Claim today's vested tokens for the manager to distribute. Moves tokens from the TreasuryVester to the LiquidityPoolManager. Can only be called if all previously allocated tokens have been distributed. Call distributeTokens() if that is not the case. If any additional PNG tokens have been transferred to this this contract, they will be marked as unallocated and prepared for distribution.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "wavax()",
      "name": "wavax",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "weights(address)",
      "name": "weights",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}