{
  "schema": "../schema.json",
  "tags": [
    "locking",
    "liquidity"
  ],
  "name": "TransactionManager",
  "description": "TransactionManager.",
  "eventDecorators": [
    {
      "signature": "AdminChanged(address,address)",
      "name": "AdminChanged",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "previousAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BeaconUpgraded(address)",
      "name": "BeaconUpgraded",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "beacon",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LiquidityAdded(address,address,uint256)",
      "name": "LiquidityAdded",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "router",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LiquidityRemoved(address,address,uint256,address)",
      "name": "LiquidityRemoved",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewFeePercent(uint256)",
      "name": "NewFeePercent",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "feePercent",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewSwapper(address)",
      "name": "NewSwapper",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "swapper",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipProposed(address)",
      "name": "OwnershipProposed",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "proposedOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RouterAdded(address)",
      "name": "RouterAdded",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "addedRouter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RouterRemoved(address)",
      "name": "RouterRemoved",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "removedRouter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TransactionCancelled(address,address,bytes32,tuple)",
      "name": "TransactionCancelled",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransactionFulfilled(address,address,bytes32,tuple,uint256,uint256,bytes)",
      "name": "TransactionFulfilled",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "router",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "transactionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "txData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "relayerFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assetAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "signature",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransactionPrepared(address,address,bytes32,tuple,bytes,bytes)",
      "name": "TransactionPrepared",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "router",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "transactionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "txData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "encodedBid",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "bidSignature",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Upgraded(address)",
      "name": "Upgraded",
      "description": "Emitted when asset tokens are supplied to sponsor the yield source.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MAX_TIMEOUT()",
      "name": "MAX_TIMEOUT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MIN_TIMEOUT()",
      "name": "MIN_TIMEOUT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PERCENTS_DIVIDER()",
      "name": "PERCENTS_DIVIDER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptProposedOwner()",
      "name": "acceptProposedOwner",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addLiquidity(uint256,address)",
      "name": "addLiquidity",
      "description": "This is used by any router to increase their available liquidity for a given asset.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of liquidity to add for the router.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "The address (or `address(0)` if native asset) of the asset you're adding liquidity for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addLiquidityFor(uint256,address,address)",
      "name": "addLiquidityFor",
      "description": "This is used by any one to increase the available liquidity for a given asset on behalf of a router.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of liquidity to add for the router.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "The address (or `address(0)` if native asset) of the asset you're adding liquidity for.",
          "recommendedTypes": []
        },
        {
          "name": "router",
          "description": "The router you are adding liquidity on behalf of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addRouter(address)",
      "name": "addRouter",
      "description": "Used to add routers that can transact crosschain.",
      "parameterDecorators": [
        {
          "name": "router",
          "description": "Router address to add.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approvedRouters(address)",
      "name": "approvedRouters",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancel(tuple(address,address,address,address,address,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256),bytes)",
      "name": "cancel",
      "description": "Any crosschain transaction can be cancelled after it has been created to prevent indefinite lock up of funds. After the transaction has expired, anyone can cancel it. Before the expiry, only the recipient of the funds on the given chain is able to cancel. On the sending chain, this means only the router is able to cancel before the expiry, while only the user can prematurely cancel on the receiving chain.",
      "parameterDecorators": [
        {
          "name": "txData",
          "description": "All of the data (invariant and variant) for a crosschain transaction. The variant data provided is checked against what was stored when the `prepare` function was called.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "user",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "router",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sendingAssetId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receivingAssetId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "stableAssetId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sendingChainFallback",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receivingAddress",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "transactionId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sendingChainId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receivingChainId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "assetAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "expiry",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "preparedBlockNumber",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "signature",
          "description": "The user's signature that allows a transaction to be cancelled on the receiving chain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "user",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "router",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "sendingAssetId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "receivingAssetId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "stableAssetId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "sendingChainFallback",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "receivingAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "transactionId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "sendingChainId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "receivingChainId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "assetAmount",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "expiry",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "preparedBlockNumber",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "chainId()",
      "name": "chainId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delay()",
      "name": "delay",
      "description": "Returns the delay period before a new owner can be accepted.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feePercent()",
      "name": "feePercent",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fulfill(tuple(address,address,address,address,address,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256),uint256,bytes)",
      "name": "fulfill",
      "description": "This function completes a crosschain transaction. When called on the receiving chain, the user reveals their signature on the invariant parts of the transaction data and is sent the appropriate amount. The router then uses this signature to unlock the corresponding funds on the receiving chain, which are then added back to their available liquidity. The user includes a relayer fee since it is not assumed they will have gas on the receiving chain. This function *must* be called before the transaction expiry has elapsed.",
      "parameterDecorators": [
        {
          "name": "txData",
          "description": "All of the data (invariant and variant) for a crosschain transaction. The variant data provided is checked against what was stored when the `prepare` function was called.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "user",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "router",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sendingAssetId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receivingAssetId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "stableAssetId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sendingChainFallback",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receivingAddress",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "transactionId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sendingChainId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receivingChainId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "assetAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "expiry",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "preparedBlockNumber",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "relayerFee",
          "description": "The fee that should go to the relayer when they are calling the function on the receiving chain for the user.",
          "recommendedTypes": []
        },
        {
          "name": "signature",
          "description": "The users signature on the invariant data + fee that can be used by the router to unlock the transaction on the sending chain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "user",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "router",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "sendingAssetId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "receivingAssetId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "stableAssetId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "sendingChainFallback",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "receivingAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "transactionId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "sendingChainId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "receivingChainId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "assetAmount",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "expiry",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "preparedBlockNumber",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAmountsIn(uint256,address,bool)",
      "name": "getAmountsIn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountOut",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "fromStable",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amounts",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmountsOut(uint256,address,bool)",
      "name": "getAmountsOut",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "fromStable",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amounts",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAssetAmountForStable(uint256,address)",
      "name": "getAssetAmountForStable",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getChainId()",
      "name": "getChainId",
      "description": "Gets the chainId for this contract. If not specified during init will use the block.chainId.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_chainId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFeePercent()",
      "name": "getFeePercent",
      "description": "Returns the fee Percent.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStableAmountForAsset(uint256,address)",
      "name": "getStableAmountForAsset",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStableAssetLiquidity(address)",
      "name": "getStableAssetLiquidity",
      "description": "",
      "parameterDecorators": [
        {
          "name": "router",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStableToken()",
      "name": "getStableToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenPrice(address)",
      "name": "getTokenPrice",
      "description": "Returns the token price from price oracle.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Sending token address (Price for 1 wei) * 10 ^ 36.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(uint256)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_chainId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prepare(tuple(address,address,address,address,address,address,uint256,uint256,bytes32),uint256,uint256,bytes,bytes)",
      "name": "prepare",
      "description": "This function creates a crosschain transaction. When called on the sending chain, the user is expected to lock up funds. When called on the receiving chain, the router deducts the transfer amount from the available liquidity. The majority of the information about a given transfer does not change between chains, with three notable exceptions: `amount`, `expiry`, and `preparedBlock`. The `amount` and `expiry` are decremented between sending and receiving chains to provide an incentive for the router to complete the transaction and time for the router to fulfill the transaction on the sending chain after the unlocking signature is revealed, respectively.",
      "parameterDecorators": [
        {
          "name": "invariantData",
          "description": "The data for a crosschain transaction that will not change between sending and receiving chains. The hash of this data is used as the key to store the inforamtion that does change between chains (amount, expiry,preparedBlock) for verification.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "user",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "router",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sendingAssetId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receivingAssetId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sendingChainFallback",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receivingAddress",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sendingChainId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "receivingChainId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "transactionId",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "amount",
          "description": "The amount of the transaction on this chain.",
          "recommendedTypes": []
        },
        {
          "name": "expiry",
          "description": "The block.timestamp when the transaction will no longer be fulfillable and is freely cancellable on this chain.",
          "recommendedTypes": []
        },
        {
          "name": "encodedBid",
          "description": "The encoded bid that was accepted by the user for this crosschain transfer. It is supplied as a param to the function but is only used in event emission.",
          "recommendedTypes": []
        },
        {
          "name": "bidSignature",
          "description": "The signature of the bidder on the encoded bid for this transaction. Only used within the function for event emission. The validity of the bid and bidSignature are enforced offchain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "user",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "router",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "sendingAssetId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "receivingAssetId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "stableAssetId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "sendingChainFallback",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "receivingAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "transactionId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "sendingChainId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "receivingChainId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "assetAmount",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "expiry",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "preparedBlockNumber",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposeNewOwner(address)",
      "name": "proposeNewOwner",
      "description": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process.",
      "parameterDecorators": [
        {
          "name": "newlyProposed",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposed()",
      "name": "proposed",
      "description": "Returns the address of the proposed owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposedTimestamp()",
      "name": "proposedTimestamp",
      "description": "Returns the address of the proposed owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeLiquidity(uint256,address,address)",
      "name": "removeLiquidity",
      "description": "This is used by any router to increase their available liquidity for a given asset.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of liquidity to add for the router.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "The address (or `address(0)` if native asset) of the asset you're adding liquidity for.",
          "recommendedTypes": []
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeLiquidityFor(uint256,address,address,address)",
      "name": "removeLiquidityFor",
      "description": "Remove liquidity For router.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of liquidity to add for the router.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "The address (or `address(0)` if native asset) of the asset you're adding liquidity for.",
          "recommendedTypes": []
        },
        {
          "name": "router",
          "description": "The router you are adding liquidity on behalf of.",
          "recommendedTypes": []
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeRouter(address)",
      "name": "removeRouter",
      "description": "Used to remove routers that can transact crosschain.",
      "parameterDecorators": [
        {
          "name": "router",
          "description": "Router address to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounced()",
      "name": "renounced",
      "description": "Indicates if the ownership has been renounced() by checking if current owner is address(0).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "routerBalances(address,address)",
      "name": "routerBalances",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setFeePercent(uint256)",
      "name": "setFeePercent",
      "description": "Owner can set normal fee percent.",
      "parameterDecorators": [
        {
          "name": "_percent",
          "description": "normal fee percentage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSwapper(address)",
      "name": "setSwapper",
      "description": "Owner can set swapper address.",
      "parameterDecorators": [
        {
          "name": "_swapper",
          "description": "Swapper address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapper()",
      "name": "swapper",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "upgradeTo(address)",
      "name": "upgradeTo",
      "description": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "upgradeToAndCall(address,bytes)",
      "name": "upgradeToAndCall",
      "description": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "variantTransactionData(bytes32)",
      "name": "variantTransactionData",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}