{
  "schema": "../schema.json",
  "tags": [
    "liquidity"
  ],
  "name": "AutoLiquidity",
  "description": "Position Management. Provide asset operation functions, allow authorized identities to perform asset operations, and achieve the purpose of increasing the net value of the fund.",
  "eventDecorators": [
    {
      "signature": "Collect(uint256,uint256,uint256)",
      "name": "Collect",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DecreaseLiquidity(uint256,uint128)",
      "name": "DecreaseLiquidity",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "IncreaseLiquidity(uint256,uint128)",
      "name": "IncreaseLiquidity",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Mint(uint256,uint128)",
      "name": "Mint",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Staker(uint256)",
      "name": "Staker",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Swap(uint256,uint256)",
      "name": "Swap",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountOut",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UnStaker(uint256)",
      "name": "UnStaker",
      "description": "Event emitted when token fees are withdrawn.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "assets()",
      "name": "assets",
      "description": "Total asset. This function calculates the net worth or AUM.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Total asset.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bind(address,address)",
      "name": "bind",
      "description": "Binding funds and subscription redemption token. Only bind once and cannot be modified.",
      "parameterDecorators": [
        {
          "name": "_fund",
          "description": "Fund address.",
          "recommendedTypes": []
        },
        {
          "name": "_ioToken",
          "description": "Subscription and redemption token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "checkPos(address,int24,int24)",
      "name": "checkPos",
      "description": "Check current position. Check the current UniV3 position by pool token ID.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "liquidity pool.",
          "recommendedTypes": []
        },
        {
          "name": "tickLower",
          "description": "Tick lower bound.",
          "recommendedTypes": []
        },
        {
          "name": "tickUpper",
          "description": "Tick upper bound.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "atWork",
          "description": "Position status.",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "has",
          "description": "Check if the position ID exist.",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "tokenId",
          "description": "Position ID.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkStakers(uint256)",
      "name": "checkStakers",
      "description": "check stakers contains tokenId. contains.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "contains.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimReward(address)",
      "name": "claimReward",
      "description": "Only the governance and strategist identities are allowed to execute claimReward function calls,.",
      "parameterDecorators": [
        {
          "name": "rewardToken",
          "description": "The token being distributed as a reward.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collect(uint256,uint128,uint128)",
      "name": "collect",
      "description": "Collect position asset. Use checkPos to check the position ID.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "Position ID.",
          "recommendedTypes": []
        },
        {
          "name": "amount0Max",
          "description": "Maximum amount of token 0 to be collected.",
          "recommendedTypes": []
        },
        {
          "name": "amount1Max",
          "description": "Maximum amount of token 1 to be collected.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount0",
          "description": "Actual amount of token 0 being collected.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amount1",
          "description": "Actual amount of token 1 being collected.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createIncentive(address,address,uint256,uint256,uint256)",
      "name": "createIncentive",
      "description": "Creates a new liquidity mining incentive program. Only the governance identities are allowed to execute createIncentive function calls,.",
      "parameterDecorators": [
        {
          "name": "rewardToken",
          "description": "The token being distributed as a reward.",
          "recommendedTypes": []
        },
        {
          "name": "pool",
          "description": "The Uniswap V3 pool.",
          "recommendedTypes": []
        },
        {
          "name": "startTime",
          "description": "The time when the incentive program begins.",
          "recommendedTypes": []
        },
        {
          "name": "endTime",
          "description": "The time when rewards stop accruing.",
          "recommendedTypes": []
        },
        {
          "name": "reward",
          "description": "The amount of reward tokens to be distributed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "decreaseLiquidity(uint256,uint128,uint256,uint256)",
      "name": "decreaseLiquidity",
      "description": "Decrease liquidity. Use checkPos to query the position ID.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "Position ID.",
          "recommendedTypes": []
        },
        {
          "name": "liquidity",
          "description": "Expected reduction amount of liquidity.",
          "recommendedTypes": []
        },
        {
          "name": "amount0Min",
          "description": "Minimum amount of token 0 to be reduced.",
          "recommendedTypes": []
        },
        {
          "name": "amount1Min",
          "description": "Minimum amount of token 1 to be reduced.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount0",
          "description": "Actual amount of token 0 being reduced.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amount1",
          "description": "Actual amount of token 1 being reduced.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "endIncentive(address,address,uint256,uint256)",
      "name": "endIncentive",
      "description": "Ends an incentive after the incentive end time has passed and all stakes have been withdrawn. Only the governance identities are allowed to execute createIncentive function calls,.",
      "parameterDecorators": [
        {
          "name": "rewardToken",
          "description": "The token being distributed as a reward.",
          "recommendedTypes": []
        },
        {
          "name": "pool",
          "description": "The Uniswap V3 pool.",
          "recommendedTypes": []
        },
        {
          "name": "startTime",
          "description": "The time when the incentive program begins.",
          "recommendedTypes": []
        },
        {
          "name": "endTime",
          "description": "The time when rewards stop accruing.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "estimateAmountIn(address,address,uint256)",
      "name": "estimateAmountIn",
      "description": "Estimate the amount of source tokens that need to be provided. Only allow the governance identity to set the underlying asset token address.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "Source token address.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Target token address.",
          "recommendedTypes": []
        },
        {
          "name": "amountOut",
          "description": "Expect to get the target token amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountIn",
          "description": "Source token amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "estimateAmountOut(address,address,uint256)",
      "name": "estimateAmountOut",
      "description": "Estimated to obtain the target token amount. Only allow the asset transaction path that has been set to be estimated.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "Source token address.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Target token address.",
          "recommendedTypes": []
        },
        {
          "name": "amountIn",
          "description": "Source token amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountOut",
          "description": "Target token amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exactInput(address,address,uint256,uint256)",
      "name": "exactInput",
      "description": "Swaps `amountIn` of one token for as much as possible of another token. Initiate a transaction with a known input amount and return the output amount.",
      "parameterDecorators": [
        {
          "name": "tokenIn",
          "description": "Token in address.",
          "recommendedTypes": []
        },
        {
          "name": "tokenOut",
          "description": "Token out address.",
          "recommendedTypes": []
        },
        {
          "name": "amountIn",
          "description": "Token in amount.",
          "recommendedTypes": []
        },
        {
          "name": "amountOutMinimum",
          "description": "Expected to get minimum token out amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountOut",
          "description": "Token out amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exactOutput(address,address,uint256,uint256)",
      "name": "exactOutput",
      "description": "Swaps as little as possible of one token for `amountOut` of another token. Initiate a transaction with a known output amount and return the input amount.",
      "parameterDecorators": [
        {
          "name": "tokenIn",
          "description": "Token in address.",
          "recommendedTypes": []
        },
        {
          "name": "tokenOut",
          "description": "Token out address.",
          "recommendedTypes": []
        },
        {
          "name": "amountOut",
          "description": "Token out amount.",
          "recommendedTypes": []
        },
        {
          "name": "amountInMaximum",
          "description": "Expect to input the maximum amount of tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountIn",
          "description": "Token in amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fund()",
      "name": "fund",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGovernance()",
      "name": "getGovernance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewards()",
      "name": "getRewards",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStrategist()",
      "name": "getStrategist",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUnderlyings()",
      "name": "getUnderlyings",
      "description": "in underlyings token address array. read in underlyings token address array.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "tokens",
          "description": "address array.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "history(bytes32)",
      "name": "history",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "idleAssets()",
      "name": "idleAssets",
      "description": "idle asset. This function calculates idle asset.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "idle asset.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "increaseLiquidity(uint256,uint256,uint256,uint256,uint256)",
      "name": "increaseLiquidity",
      "description": "Increase liquidity. Use checkPos to check the position ID.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "Position ID.",
          "recommendedTypes": []
        },
        {
          "name": "amount0Min",
          "description": "Minimum token 0 amount.",
          "recommendedTypes": []
        },
        {
          "name": "amount1",
          "description": "Desired Desired token 1 amount.",
          "recommendedTypes": []
        },
        {
          "name": "amount0Min",
          "description": "Minimum token 0 amount.",
          "recommendedTypes": []
        },
        {
          "name": "amount1Min",
          "description": "Minimum token 1 amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "liquidity",
          "description": "The amount of liquidity.",
          "recommendedTypes": [],
          "solidityType": "uint128"
        },
        {
          "name": "amount0",
          "description": "Actual token 0 amount being added.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amount1",
          "description": "Actual token 1 amount being added.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ioToken()",
      "name": "ioToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityAssets()",
      "name": "liquidityAssets",
      "description": "at work liquidity asset. This function calculates liquidity asset.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "liquidity asset.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mint(address,address,uint24,int24,int24,uint256,uint256)",
      "name": "mint",
      "description": "Create position. Repeated creation of the same position will cause an error, you need to change tickLower Or tickUpper.",
      "parameterDecorators": [
        {
          "name": "token0",
          "description": "Liquidity pool token 0 contract address.",
          "recommendedTypes": []
        },
        {
          "name": "token1",
          "description": "Liquidity pool token 1 contract address.",
          "recommendedTypes": []
        },
        {
          "name": "fee",
          "description": "Target liquidity pool rate.",
          "recommendedTypes": []
        },
        {
          "name": "tickLower",
          "description": "Expect to place the lower price boundary of the target liquidity pool.",
          "recommendedTypes": []
        },
        {
          "name": "tickUpper",
          "description": "Expect to place the upper price boundary of the target liquidity pool.",
          "recommendedTypes": []
        },
        {
          "name": "amount0Desired",
          "description": "Desired token 0 amount.",
          "recommendedTypes": []
        },
        {
          "name": "amount1Desired",
          "description": "Desired token 1 amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "multicall(bytes[])",
      "name": "multicall",
      "description": "Multiple functions of the contract can be executed at the same time. Only the governance and strategist identities are allowed to execute multiple function calls, and the execution of multiple functions can ensure the consistency of the execution results.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "Encode data of multiple execution functions.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "Execution result.",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onERC721Received(address,address,uint256,bytes)",
      "name": "onERC721Received",
      "description": "callback function when receiving NFT. only Univ3 NFT transfer in is allowed.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "default value.",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeUnderlyings(address[])",
      "name": "removeUnderlyings",
      "description": "Delete the underlying asset token address. Only allow the governance identity to delete the underlying asset token address.",
      "parameterDecorators": [
        {
          "name": "ts",
          "description": "The underlying asset token address array to be deleted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "safeApproveAll(address)",
      "name": "safeApproveAll",
      "description": "Authorize UniV3 contract to move fund asset. Only allow governance and strategist identities to execute authorized functions to reduce miner fee consumption.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Authorized target token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "safeApproveStaker(address)",
      "name": "safeApproveStaker",
      "description": "Authorize UniV3 contract to move fund asset. Only allow governance and strategist identities to execute authorized functions to reduce miner fee consumption.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Authorized target token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGovernance(address)",
      "name": "setGovernance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_governance",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRewards(address)",
      "name": "setRewards",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_rewards",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStrategist(address)",
      "name": "setStrategist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_strategist",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUnderlyings(address[])",
      "name": "setUnderlyings",
      "description": "Set the underlying asset token address. Only allow the governance identity to set the underlying asset token address.",
      "parameterDecorators": [
        {
          "name": "ts",
          "description": "The underlying asset token address array to be added.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settingSwapRoute(bytes)",
      "name": "settingSwapRoute",
      "description": "Set asset swap route. Only the governance identity is allowed to set the asset swap path, and the firstToken and lastToken contained in the path will be used as the underlying asset token address by default.",
      "parameterDecorators": [
        {
          "name": "path",
          "description": "Swap path byte code.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakeToken(address,address,uint256,uint256,uint256)",
      "name": "stakeToken",
      "description": "stakeToken staker tokenID. Only the governance and strategist identities are allowed to execute stakeToken function calls,.",
      "parameterDecorators": [
        {
          "name": "rewardToken",
          "description": "The token being distributed as a reward.",
          "recommendedTypes": []
        },
        {
          "name": "pool",
          "description": "The Uniswap V3 pool.",
          "recommendedTypes": []
        },
        {
          "name": "startTime",
          "description": "The time when the incentive program begins.",
          "recommendedTypes": []
        },
        {
          "name": "endTime",
          "description": "The time when rewards stop accruing.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "The ID of the token to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "staker()",
      "name": "staker",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakerAssets()",
      "name": "stakerAssets",
      "description": "staker liquidity asset. This function calculates liquidity asset.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "liquidity asset.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakerNFT(uint256)",
      "name": "stakerNFT",
      "description": "staker tokenID. Only the governance and strategist identities are allowed to execute stakerNFT function calls,.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "NFT id.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakersPos()",
      "name": "stakersPos",
      "description": "in stakers tokenId array. read in stakers NFT array.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "tokenIds",
          "description": "NFT array.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swapRoute(address,address)",
      "name": "swapRoute",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unStakeToken(address,address,uint256,uint256,uint256)",
      "name": "unStakeToken",
      "description": "unStakeToken staker tokenID. Only the governance and strategist identities are allowed to execute unStakeToken function calls,.",
      "parameterDecorators": [
        {
          "name": "rewardToken",
          "description": "The token being distributed as a reward.",
          "recommendedTypes": []
        },
        {
          "name": "pool",
          "description": "The Uniswap V3 pool.",
          "recommendedTypes": []
        },
        {
          "name": "startTime",
          "description": "The time when the incentive program begins.",
          "recommendedTypes": []
        },
        {
          "name": "endTime",
          "description": "The time when rewards stop accruing.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "The ID of the token to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(address,uint256,uint256)",
      "name": "withdraw",
      "description": "Withdraw asset. Only fund contract can withdraw asset.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Withdraw address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Withdraw amount.",
          "recommendedTypes": []
        },
        {
          "name": "scale",
          "description": "Withdraw percentage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawOfUnderlying(address,uint256)",
      "name": "withdrawOfUnderlying",
      "description": "Withdraw underlying asset. Only fund contract can withdraw underlying asset.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Withdraw address.",
          "recommendedTypes": []
        },
        {
          "name": "scale",
          "description": "Withdraw percentage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawToken(uint256,bytes)",
      "name": "withdrawToken",
      "description": "Only the governance and strategist identities are allowed to execute unStakeToken function calls,.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "The unique identifier of an Uniswap V3 LP token.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "An optional data array that will be passed along to the `to` address via the NFT safeTransferFrom.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "worksPos()",
      "name": "worksPos",
      "description": "in work tokenId array. read in works NFT array.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "tokenIds",
          "description": "NFT array.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}