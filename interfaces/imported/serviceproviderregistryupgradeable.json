{"schema":"../schema.json","tags":[],"name":"ServiceProviderRegistryUpgradeable","description":"","eventDecorators":[{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ServiceProviderRegistered(bytes32,address)","name":"ServiceProviderRegistered","description":"","parameterDecorators":[{"name":"which","description":"","recommendedTypes":[],"indexed":false},{"name":"who","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ServiceProviderUpdated(bytes32,bytes32)","name":"ServiceProviderUpdated","description":"","parameterDecorators":[{"name":"which","description":"","recommendedTypes":[],"indexed":false},{"name":"what","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"WhitelistChanged(uint256)","name":"WhitelistChanged","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"can(bytes32,uint8,address)","name":"can","description":"TODO: Standardise around can() returns to uint for gas savings TODO: Add hadRole for timestamped access control.","parameterDecorators":[{"name":"which","description":"service provider to check for RBAC.","recommendedTypes":[]},{"name":"what","description":"role or role group to check access for.","recommendedTypes":[]},{"name":"who","description":"is trying to request access.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"true if who can access what on which service provider.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"config(bytes32)","name":"config","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"exists","description":"","recommendedTypes":[],"solidityType":"uint128"},{"name":"maxTTL","description":"","recommendedTypes":[],"solidityType":"uint128"}],"emittableEvents":[],"readOnly":true},{"signature":"could(bytes32,uint8,address,uint256)","name":"could","description":"Time truthfullness statements on role membership.","parameterDecorators":[{"name":"which","description":"service provider the role existed for.","recommendedTypes":[]},{"name":"what","description":"role to check a user had access to.","recommendedTypes":[]},{"name":"who","description":"to check had the role.","recommendedTypes":[]},{"name":"when","description":"it is being asserted that they had the role.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"true if the user had the role at a specified time.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"datastores(bytes32)","name":"datastores","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"end()","name":"end","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"enroll(bytes32)","name":"enroll","description":"Enroll a service provider in the registry. Addresses subjected to whitelisting for defined period of time.","parameterDecorators":[{"name":"salt","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"provider","description":"The service provider's identifier.","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":false},{"signature":"exists(bytes32)","name":"exists","description":"Does a service provider exist?.","parameterDecorators":[{"name":"which","description":"service provider to check the existence of.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"true if the service provider exists, false otherwise.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"file(bytes32,bytes32,uint256)","name":"file","description":"","parameterDecorators":[{"name":"which","description":"","recommendedTypes":[]},{"name":"what","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"file(bytes32,uint256)","name":"file","description":"File integer parameters.","parameterDecorators":[{"name":"what","description":"parameter to file.","recommendedTypes":[]},{"name":"data","description":"to set the parameter to.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"file(bytes32,bytes32,string)","name":"file","description":"set a specific string on a service provider.","parameterDecorators":[{"name":"which","description":"service provider to set the string on.","recommendedTypes":[]},{"name":"what","description":"string to set.","recommendedTypes":[]},{"name":"data","description":"the string to set.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hadRole(bytes32,address,uint256)","name":"hadRole","description":"Allow back-in-time on-chain testing of granted role status.","parameterDecorators":[{"name":"role","description":"to check was granted.","recommendedTypes":[]},{"name":"account","description":"to check the status of.","recommendedTypes":[]},{"name":"when","description":"the granted status is being questioned.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"If the account actively had the role at when.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"maxTTL(bytes32)","name":"maxTTL","description":"","parameterDecorators":[{"name":"which","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint128"}],"emittableEvents":[],"readOnly":true},{"signature":"minTTL()","name":"minTTL","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"multicall(bytes[])","name":"multicall","description":"Receives and executes a batch of function calls on this contract.","parameterDecorators":[{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"results","description":"","recommendedTypes":[],"solidityType":"bytes[]"}],"emittableEvents":[],"readOnly":false},{"signature":"postUpgrade(uint256)","name":"postUpgrade","description":"","parameterDecorators":[{"name":"whitelistTTL","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"See {IERC165-supportsInterface}.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"upgrader()","name":"upgrader","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"watchkeeper(address,bytes32)","name":"watchkeeper","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"granted","description":"","recommendedTypes":[],"solidityType":"uint128"},{"name":"revoked","description":"","recommendedTypes":[],"solidityType":"uint128"}],"emittableEvents":[],"readOnly":true}]}