{"schema":"../schema.json","tags":[],"name":"LimitOrderProtocol","description":"1inch Limit Order Protocol v1.","eventDecorators":[{"signature":"NonceIncreased(address,uint256)","name":"NonceIncreased","description":"Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.","parameterDecorators":[{"name":"maker","description":"","recommendedTypes":[],"indexed":true},{"name":"newNonce","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OrderFilled(address,bytes32,uint256)","name":"OrderFilled","description":"Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.","parameterDecorators":[{"name":"maker","description":"","recommendedTypes":[],"indexed":true},{"name":"orderHash","description":"","recommendedTypes":[],"indexed":false},{"name":"remaining","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OrderFilledRFQ(bytes32,uint256)","name":"OrderFilledRFQ","description":"Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.","parameterDecorators":[{"name":"orderHash","description":"","recommendedTypes":[],"indexed":false},{"name":"makingAmount","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"DOMAIN_SEPARATOR()","name":"DOMAIN_SEPARATOR","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"LIMIT_ORDER_RFQ_TYPEHASH()","name":"LIMIT_ORDER_RFQ_TYPEHASH","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"LIMIT_ORDER_TYPEHASH()","name":"LIMIT_ORDER_TYPEHASH","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"advanceNonce(uint8)","name":"advanceNonce","description":"","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"and(address[],bytes[])","name":"and","description":"Calls every target with corresponding data.","parameterDecorators":[{"name":"targets","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if calls to all targets returned True. Otherwise, false.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"arbitraryStaticCall(address,bytes)","name":"arbitraryStaticCall","description":"Performs an arbitrary call to target with data.","parameterDecorators":[{"name":"target","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Result bytes transmuted to uint256.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"cancelOrder(tuple(uint256,address,address,bytes,bytes,bytes,bytes,bytes,bytes,bytes))","name":"cancelOrder","description":"Cancels order by setting remaining amount to zero.","parameterDecorators":[{"name":"order","description":"","recommendedTypes":[],"parameters":[{"name":"salt","description":"","type":"uint256"},{"name":"makerAsset","description":"","type":"address"},{"name":"takerAsset","description":"","type":"address"},{"name":"makerAssetData","description":"","type":"bytes"},{"name":"takerAssetData","description":"","type":"bytes"},{"name":"getMakerAmount","description":"","type":"bytes"},{"name":"getTakerAmount","description":"","type":"bytes"},{"name":"predicate","description":"","type":"bytes"},{"name":"permit","description":"","type":"bytes"},{"name":"interaction","description":"","type":"bytes"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"cancelOrderRFQ(uint256)","name":"cancelOrderRFQ","description":"Cancels order's quote.","parameterDecorators":[{"name":"orderInfo","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"checkPredicate(tuple(uint256,address,address,bytes,bytes,bytes,bytes,bytes,bytes,bytes))","name":"checkPredicate","description":"Checks order predicate.","parameterDecorators":[{"name":"order","description":"","recommendedTypes":[],"parameters":[{"name":"salt","description":"","type":"uint256"},{"name":"makerAsset","description":"","type":"address"},{"name":"takerAsset","description":"","type":"address"},{"name":"makerAssetData","description":"","type":"bytes"},{"name":"takerAssetData","description":"","type":"bytes"},{"name":"getMakerAmount","description":"","type":"bytes"},{"name":"getTakerAmount","description":"","type":"bytes"},{"name":"predicate","description":"","type":"bytes"},{"name":"permit","description":"","type":"bytes"},{"name":"interaction","description":"","type":"bytes"}]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"doublePrice(address,address,uint256,uint256)","name":"doublePrice","description":"Calculates price of token A relative to token B. Note that order is important.","parameterDecorators":[{"name":"oracle1","description":"","recommendedTypes":[]},{"name":"oracle2","description":"","recommendedTypes":[]},{"name":"spread","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Token A relative price times amount.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"eq(uint256,address,bytes)","name":"eq","description":"Calls target with specified data and tests if it's equal to the value.","parameterDecorators":[{"name":"value","description":"Value to test.","recommendedTypes":[]},{"name":"target","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if call to target returns the same value as `value`. Otherwise, false.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"fillOrder(tuple(uint256,address,address,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,uint256,uint256,uint256)","name":"fillOrder","description":"Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData.","parameterDecorators":[{"name":"order","description":"","recommendedTypes":[],"parameters":[{"name":"salt","description":"","type":"uint256"},{"name":"makerAsset","description":"","type":"address"},{"name":"takerAsset","description":"","type":"address"},{"name":"makerAssetData","description":"","type":"bytes"},{"name":"takerAssetData","description":"","type":"bytes"},{"name":"getMakerAmount","description":"","type":"bytes"},{"name":"getTakerAmount","description":"","type":"bytes"},{"name":"predicate","description":"","type":"bytes"},{"name":"permit","description":"","type":"bytes"},{"name":"interaction","description":"","type":"bytes"}]},{"name":"signature","description":"","recommendedTypes":[]},{"name":"makingAmount","description":"","recommendedTypes":[]},{"name":"takingAmount","description":"","recommendedTypes":[]},{"name":"thresholdAmount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"fillOrderRFQ(tuple(uint256,address,address,bytes,bytes),bytes,uint256,uint256)","name":"fillOrderRFQ","description":"Fills order's quote, fully or partially (whichever is possible).","parameterDecorators":[{"name":"order","description":"Order quote to fill.","recommendedTypes":[],"parameters":[{"name":"info","description":"","type":"uint256"},{"name":"makerAsset","description":"","type":"address"},{"name":"takerAsset","description":"","type":"address"},{"name":"makerAssetData","description":"","type":"bytes"},{"name":"takerAssetData","description":"","type":"bytes"}]},{"name":"signature","description":"Signature to confirm quote ownership.","recommendedTypes":[]},{"name":"makingAmount","description":"Making amount.","recommendedTypes":[]},{"name":"takingAmount","description":"Taking amount.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"func_20xtkDI(address,address,uint256,address)","name":"func_20xtkDI","description":"","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[]},{"name":"to","description":"","recommendedTypes":[]},{"name":"tokenId","description":"","recommendedTypes":[]},{"name":"token","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"func_40aVqeY(address,address,uint256,address)","name":"func_40aVqeY","description":"","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[]},{"name":"to","description":"","recommendedTypes":[]},{"name":"tokenId","description":"","recommendedTypes":[]},{"name":"token","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"func_50BkM4K(address,address,uint256,address)","name":"func_50BkM4K","description":"","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[]},{"name":"to","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]},{"name":"token","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"func_733NCGU(address,address,uint256,address,uint256,bytes)","name":"func_733NCGU","description":"","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[]},{"name":"to","description":"","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]},{"name":"token","description":"","recommendedTypes":[]},{"name":"tokenId","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getMakerAmount(uint256,uint256,uint256)","name":"getMakerAmount","description":"Calculates maker amount.","parameterDecorators":[{"name":"orderMakerAmount","description":"","recommendedTypes":[]},{"name":"orderTakerAmount","description":"","recommendedTypes":[]},{"name":"swapTakerAmount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Floored maker amount.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTakerAmount(uint256,uint256,uint256)","name":"getTakerAmount","description":"Calculates taker amount.","parameterDecorators":[{"name":"orderMakerAmount","description":"","recommendedTypes":[]},{"name":"orderTakerAmount","description":"","recommendedTypes":[]},{"name":"swapMakerAmount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Ceiled taker amount.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"gt(uint256,address,bytes)","name":"gt","description":"Calls target with specified data and tests if it's bigger than value.","parameterDecorators":[{"name":"value","description":"Value to test.","recommendedTypes":[]},{"name":"target","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if call to target returns value which is bigger than `value`. Otherwise, false.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"immutableOwner()","name":"immutableOwner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"increaseNonce()","name":"increaseNonce","description":"Advances nonce by one.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"invalidatorForOrderRFQ(address,uint256)","name":"invalidatorForOrderRFQ","description":"Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes.","parameterDecorators":[{"name":"maker","description":"","recommendedTypes":[]},{"name":"slot","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Each bit represents whenever corresponding quote was filled.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"lt(uint256,address,bytes)","name":"lt","description":"Calls target with specified data and tests if it's lower than value.","parameterDecorators":[{"name":"value","description":"Value to test.","recommendedTypes":[]},{"name":"target","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if call to target returns value which is lower than `value`. Otherwise, false.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"nonce(address)","name":"nonce","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"nonceEquals(address,uint256)","name":"nonceEquals","description":"","parameterDecorators":[{"name":"makerAddress","description":"","recommendedTypes":[]},{"name":"makerNonce","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"or(address[],bytes[])","name":"or","description":"Calls every target with corresponding data.","parameterDecorators":[{"name":"targets","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if call to any target returned True. Otherwise, false.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"remaining(bytes32)","name":"remaining","description":"Returns unfilled amount for order. Throws if order does not exist.","parameterDecorators":[{"name":"orderHash","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"remainingRaw(bytes32)","name":"remainingRaw","description":"Returns unfilled amount for order.","parameterDecorators":[{"name":"orderHash","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Unfilled amount of order plus one if order exists. Otherwise 0.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"remainingsRaw(bytes32[])","name":"remainingsRaw","description":"Same as `remainingRaw` but for multiple orders.","parameterDecorators":[{"name":"orderHashes","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"results","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"simulateCalls(address[],bytes[])","name":"simulateCalls","description":"","parameterDecorators":[{"name":"targets","description":"Array of functions. Each function is expected to take a corresponding `data` argument as parameter and return bool.","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"singlePrice(address,uint256,uint256)","name":"singlePrice","description":"Calculates price of token relative to ETH scaled by 1e18.","parameterDecorators":[{"name":"oracle","description":"","recommendedTypes":[]},{"name":"inverseAndSpread","description":"concatenated inverse flag and spread. Lowest 254 bits specify spread amount. Spread is scaled by 1e9, i.e. 101% = 1.01e9, 99% = 0.99e9. Highest bit is set when oracle price should be inverted, e.g. for DAI-ETH oracle, inverse=false means that we request DAI price in ETH and inverse=true means that we request ETH price in DAI.","recommendedTypes":[]},{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"Token price times amount.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"timestampBelow(uint256)","name":"timestampBelow","description":"Checks passed time against block timestamp.","parameterDecorators":[{"name":"time","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if current block timestamp is lower than `time`. Otherwise, false.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true}]}