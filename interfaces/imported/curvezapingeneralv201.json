{"schema":"../schema.json","tags":["curve finance"],"name":"Curve_ZapIn_General_V2_0_1","description":"","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Event for token purchase logging.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"zapIn(address,address,uint256)","name":"zapIn","description":"Event for token purchase logging.","parameterDecorators":[{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":false},{"name":"purchaser","description":"who paid for the tokens.","recommendedTypes":[],"indexed":false},{"name":"value","description":"weis paid for purchase.","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"ZapIn(address,address,address,uint256,uint256,address,address,bytes)","name":"ZapIn","description":"This function adds liquidity to a Curve pool with ETH or ERC20 tokens.","parameterDecorators":[{"name":"_fromTokenAddress","description":"The token used for entry (address(0) if ether).","recommendedTypes":[]},{"name":"_toTokenAddress","description":"The intermediate ERC20 token to swap to.","recommendedTypes":[]},{"name":"_swapAddress","description":"Curve swap address for the pool.","recommendedTypes":[]},{"name":"_incomingTokenQty","description":"The amount of fromToken to invest.","recommendedTypes":[]},{"name":"_minPoolTokens","description":"The minimum acceptable quantity of Curve LP to receive. Reverts otherwise.","recommendedTypes":[]},{"name":"_allowanceTarget","description":"Spender for the first swap.","recommendedTypes":[]},{"name":"_swapTarget","description":"Excecution target for the first swap.","recommendedTypes":[]},{"name":"_swapCallData","description":"DEX quote data.","recommendedTypes":[]}],"returnDecorators":[{"name":"crvTokensBought","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"_owner()","name":"_owner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"curveReg()","name":"curveReg","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"goodwill()","name":"goodwill","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint16"}],"emittableEvents":[],"readOnly":true},{"signature":"inCaseTokengetsStuck(address)","name":"inCaseTokengetsStuck","description":"","parameterDecorators":[{"name":"_TokenAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"set_new_goodwill(uint16)","name":"set_new_goodwill","description":"","parameterDecorators":[{"name":"_new_goodwill","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"set_new_zgoodwillAddress(address)","name":"set_new_zgoodwillAddress","description":"","parameterDecorators":[{"name":"_new_zgoodwillAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"stopped()","name":"stopped","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"toggleContractActive()","name":"toggleContractActive","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateAaveAddress(address)","name":"updateAaveAddress","description":"","parameterDecorators":[{"name":"_newAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateCurveRegistry(address)","name":"updateCurveRegistry","description":"","parameterDecorators":[{"name":"newCurveRegistry","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw()","name":"withdraw","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"zgoodwillAddress()","name":"zgoodwillAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}