{"schema":"../schema.json","tags":[],"name":"QLF","description":"","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Hash to mark updated provenance hash.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Qualification(address,bool,uint256,uint256)","name":"Qualification","description":"Hash to mark updated provenance hash.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"qualified","description":"","recommendedTypes":[],"indexed":false},{"name":"blockNumber","description":"","recommendedTypes":[],"indexed":false},{"name":"timestamp","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"get_start_time()","name":"get_start_time","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"ifQualified(address,bytes32[])","name":"ifQualified","description":"Check if the given address is qualified, implemented on demand. Requirements: - `account` account to be checked - `data` data to prove if a user is qualified. For instance, it can be a MerkelProof to prove if a user is in a whitelist Return: - `bool` whether the account is qualified for ITO - `string` if not qualified, it contains the error message(reason).","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"qualified","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"errorMsg","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"logQualified(address,bytes32[])","name":"logQualified","description":"Logs if the given address is qualified, implemented on demand.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"qualified","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"errorMsg","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"set_start_time(uint256)","name":"set_start_time","description":"","parameterDecorators":[{"name":"_start_time","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"start_time()","name":"start_time","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}