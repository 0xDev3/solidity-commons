{
  "schema": "../schema.json",
  "tags": [
    "dao",
    "voting"
  ],
  "name": "TorroDao",
  "description": "DAO for proposals, voting and execution. Contract for creation, voting and execution of proposals.",
  "eventDecorators": [
    {
      "signature": "AddAdmin(address)",
      "name": "AddAdmin",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica. Emitted when the pause is lifted by `account`.",
      "parameterDecorators": [
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Buy()",
      "name": "Buy",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica. Emitted when the pause is lifted by `account`.",
      "parameterDecorators": []
    },
    {
      "signature": "ExecutedProposal(uint256)",
      "name": "ExecutedProposal",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica. Emitted when the pause is lifted by `account`.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "HoldingsAddressesChanged()",
      "name": "HoldingsAddressesChanged",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica. Emitted when the pause is lifted by `account`.",
      "parameterDecorators": []
    },
    {
      "signature": "LiquidityAddressesChanged()",
      "name": "LiquidityAddressesChanged",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica. Emitted when the pause is lifted by `account`.",
      "parameterDecorators": []
    },
    {
      "signature": "NewProposal(uint256)",
      "name": "NewProposal",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica. Emitted when the pause is lifted by `account`.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica. Emitted when the pause is lifted by `account`.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RemoveAdmin(address)",
      "name": "RemoveAdmin",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica. Emitted when the pause is lifted by `account`.",
      "parameterDecorators": [
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RemoveProposal(uint256)",
      "name": "RemoveProposal",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica. Emitted when the pause is lifted by `account`.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Sell()",
      "name": "Sell",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica. Emitted when the pause is lifted by `account`.",
      "parameterDecorators": []
    },
    {
      "signature": "Vote(uint256)",
      "name": "Vote",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica. Emitted when the pause is lifted by `account`.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addHoldingsAddresses(address[])",
      "name": "addHoldingsAddresses",
      "description": "Saves new holdings addresses for DAO.",
      "parameterDecorators": [
        {
          "name": "tokens_",
          "description": "token addresses that DAO has holdings of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addLiquidityAddresses(address[])",
      "name": "addLiquidityAddresses",
      "description": "Saves new liquidity addresses for DAO.",
      "parameterDecorators": [
        {
          "name": "tokens_",
          "description": "token addresses that DAO has liquidities of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "admins()",
      "name": "admins",
      "description": "DAO admins.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "availableBalance()",
      "name": "availableBalance",
      "description": "DAO ethereum balance.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "availableWethBalance()",
      "name": "availableWethBalance",
      "description": "DAO WETH balance.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "buy()",
      "name": "buy",
      "description": "Buying tokens for cloned DAO.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "canExecute(uint256,address)",
      "name": "canExecute",
      "description": "Whether a holder is allowed to execute a proposal.",
      "parameterDecorators": [
        {
          "name": "id_",
          "description": "proposal id to check whether holder is allowed to execute.",
          "recommendedTypes": []
        },
        {
          "name": "sender_",
          "description": "address of the holder.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool true if execution is allowed.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "canRemove(uint256,address)",
      "name": "canRemove",
      "description": "Whether a holder is allowed to remove a proposal.",
      "parameterDecorators": [
        {
          "name": "id_",
          "description": "proposal id to check whether holder is allowed to remove.",
          "recommendedTypes": []
        },
        {
          "name": "sender_",
          "description": "address of the holder.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool true if removal is allowed.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "canVote(uint256,address)",
      "name": "canVote",
      "description": "Whether a holder is allowed to vote for a proposal.",
      "parameterDecorators": [
        {
          "name": "id_",
          "description": "proposal id to check whether holder is allowed to vote for.",
          "recommendedTypes": []
        },
        {
          "name": "sender_",
          "description": "address of the holder.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool true if voting is allowed.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelBuy(uint256)",
      "name": "cancelBuy",
      "description": "Cancels buy proposal.",
      "parameterDecorators": [
        {
          "name": "id_",
          "description": "buy proposal id to cancel.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "daoCreator()",
      "name": "daoCreator",
      "description": "Address of DAO creator.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "execute(uint256)",
      "name": "execute",
      "description": "Executes a proposal.",
      "parameterDecorators": [
        {
          "name": "id_",
          "description": "id of proposal to be executed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeMinPct()",
      "name": "executeMinPct",
      "description": "Minimum percentage of votes needed to execute a proposal.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "freeProposalDays()",
      "name": "freeProposalDays",
      "description": "Interval at which stakers can create free proposals.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposal(uint256)",
      "name": "getProposal",
      "description": "Gets proposal info for proposal id.",
      "parameterDecorators": [
        {
          "name": "id_",
          "description": "id of proposal to get info for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "proposalAddress",
          "description": "address for proposal execution.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "investTokenAddress",
          "description": "secondary address for proposal execution, used for investment proposals if ICO and token addresses differ.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "daoFunction",
          "description": "proposal type.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "amount",
          "description": "proposal amount eth/token to use during execution.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "creator",
          "description": "address of proposal creator.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "endLifetime",
          "description": "epoch time when proposal voting ends.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "votesFor",
          "description": "amount of votes for the proposal.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "votesAgainst",
          "description": "amount of votes against the proposal.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "votes",
          "description": "number of stakers that voted for the proposal.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "executed",
          "description": "whether proposal has been executed or not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposalIds()",
      "name": "getProposalIds",
      "description": "Proposal ids of DAO.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasAdmins()",
      "name": "hasAdmins",
      "description": "Whether DAO has admins.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "holdings()",
      "name": "holdings",
      "description": "Saved addresses of tokens that DAO is holding.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initializeCustom(address,address,address,address,uint256,uint256,uint256,bool,bool)",
      "name": "initializeCustom",
      "description": "Initializer for DAO clones.",
      "parameterDecorators": [
        {
          "name": "torroToken_",
          "description": "main torro token address.",
          "recommendedTypes": []
        },
        {
          "name": "governingToken_",
          "description": "torro token clone that's governing this dao.",
          "recommendedTypes": []
        },
        {
          "name": "factory_",
          "description": "torro factory address.",
          "recommendedTypes": []
        },
        {
          "name": "creator_",
          "description": "creator of cloned DAO.",
          "recommendedTypes": []
        },
        {
          "name": "maxCost_",
          "description": "maximum cost of all governing tokens for cloned DAO.",
          "recommendedTypes": []
        },
        {
          "name": "executeMinPct_",
          "description": "minimum percentage of votes needed for proposal execution.",
          "recommendedTypes": []
        },
        {
          "name": "votingMinHours_",
          "description": "minimum lifetime of proposal before it closes.",
          "recommendedTypes": []
        },
        {
          "name": "isPublic_",
          "description": "whether cloned DAO has public visibility.",
          "recommendedTypes": []
        },
        {
          "name": "hasAdmins_",
          "description": "whether cloned DAO has admins, otherwise all stakers are treated as admins.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isAdmin(address)",
      "name": "isAdmin",
      "description": "Whether a holder is an admin.",
      "parameterDecorators": [
        {
          "name": "sender_",
          "description": "address of holder.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool true if holder is an admin (in DAO without admins all holders are treated as such).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPublic()",
      "name": "isPublic",
      "description": "Whether DAO is public or private.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidities()",
      "name": "liquidities",
      "description": "Saved addresses of liquidity tokens that DAO is holding.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityBalance(address)",
      "name": "liquidityBalance",
      "description": "DAO balance for liquidity token.",
      "parameterDecorators": [
        {
          "name": "token_",
          "description": "token address to get liquidity balance for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uin256 token liquidity balance.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityHoldings()",
      "name": "liquidityHoldings",
      "description": "Gets tokens and liquidity token addresses of DAO's liquidity holdings.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityToken(address)",
      "name": "liquidityToken",
      "description": "Calculates address of liquidity token from ERC-20 token address.",
      "parameterDecorators": [
        {
          "name": "token_",
          "description": "token address to calculate liquidity address from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of liquidity token.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockPerEth()",
      "name": "lockPerEth",
      "description": "Amount of tokens that BUY proposal creator has to lock per each ETH spent in a proposal.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxCost()",
      "name": "maxCost",
      "description": "Maximum cost for all tokens of cloned DAO.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "migrate(address)",
      "name": "migrate",
      "description": "Migrates balances of current DAO to a new DAO.",
      "parameterDecorators": [
        {
          "name": "newDao_",
          "description": "address of the new DAO to migrate to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "minProposalVotes()",
      "name": "minProposalVotes",
      "description": "Minimum votes a proposal needs to pass.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nextFreeProposal(address)",
      "name": "nextFreeProposal",
      "description": "Next free proposal time for staker.",
      "parameterDecorators": [
        {
          "name": "sender_",
          "description": "address to check free proposal time for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256 unix time of next free proposal or 0 if not available.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "propose(address,address,uint8,uint256,uint256)",
      "name": "propose",
      "description": "Creates new proposal.",
      "parameterDecorators": [
        {
          "name": "proposalAddress_",
          "description": "main address of the proposal, in investment proposals this is the address funds are sent to.",
          "recommendedTypes": []
        },
        {
          "name": "investTokenAddress_",
          "description": "secondary address of the proposal, used in investment proposals to specify token address.",
          "recommendedTypes": []
        },
        {
          "name": "daoFunction_",
          "description": "type of the proposal.",
          "recommendedTypes": []
        },
        {
          "name": "amount_",
          "description": "amount of funds to use in the proposal.",
          "recommendedTypes": []
        },
        {
          "name": "hoursLifetime_",
          "description": "voting lifetime of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "quickExecuteMinPct()",
      "name": "quickExecuteMinPct",
      "description": "Minimum percentage of votes needed for quick execution of proposal.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sell(uint256)",
      "name": "sell",
      "description": "Sell tokens back to cloned DAO.",
      "parameterDecorators": [
        {
          "name": "amount_",
          "description": "amount of tokens to sell.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFactoryAddress(address)",
      "name": "setFactoryAddress",
      "description": "Sets factory address.",
      "parameterDecorators": [
        {
          "name": "factory_",
          "description": "address of TorroFactory.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNewToken(address,address)",
      "name": "setNewToken",
      "description": "Sets address of new token.",
      "parameterDecorators": [
        {
          "name": "token_",
          "description": "token address.",
          "recommendedTypes": []
        },
        {
          "name": "torroToken_",
          "description": "address of main Torro DAO token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRouter(address)",
      "name": "setRouter",
      "description": "Sets new address for router.",
      "parameterDecorators": [
        {
          "name": "router_",
          "description": "address for router.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setVoteWeightDivider(uint256)",
      "name": "setVoteWeightDivider",
      "description": "Sets vote weight divider.",
      "parameterDecorators": [
        {
          "name": "weight_",
          "description": "weight divider for a single vote.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "spendMaxPct()",
      "name": "spendMaxPct",
      "description": "Maximum spend limit on BUY, WITHDRAW and INVEST proposals.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenAddress()",
      "name": "tokenAddress",
      "description": "Address of the governing token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenBalance(address)",
      "name": "tokenBalance",
      "description": "DAO balance for specified token.",
      "parameterDecorators": [
        {
          "name": "token_",
          "description": "token address to get balance for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256 token balance.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpropose(uint256)",
      "name": "unpropose",
      "description": "Removes existing proposal.",
      "parameterDecorators": [
        {
          "name": "id_",
          "description": "id of proposal to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vote(uint256[],bool[])",
      "name": "vote",
      "description": "Voting for multiple proposals.",
      "parameterDecorators": [
        {
          "name": "ids_",
          "description": "ids of proposals to vote for.",
          "recommendedTypes": []
        },
        {
          "name": "votes_",
          "description": "for or against votes for proposals.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "voteWeight()",
      "name": "voteWeight",
      "description": "Amount of tokens needed for a single vote.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "votesOf(address)",
      "name": "votesOf",
      "description": "Amount of votes that holder has.",
      "parameterDecorators": [
        {
          "name": "sender_",
          "description": "address of the holder.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "number of votes.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "votingMinHours()",
      "name": "votingMinHours",
      "description": "Minimum lifetime of proposal before it closes.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}