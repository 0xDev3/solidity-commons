{
  "schema": "../schema.json",
  "tags": [],
  "name": "PancakePredictionV2",
  "description": "PancakePredictionV2.",
  "eventDecorators": [
    {
      "signature": "BetBear(address,uint256,uint256)",
      "name": "BetBear",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BetBull(address,uint256,uint256)",
      "name": "BetBull",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Claim(address,uint256,uint256)",
      "name": "Claim",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EndRound(uint256,uint256,int256)",
      "name": "EndRound",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "roundId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LockRound(uint256,uint256,int256)",
      "name": "LockRound",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "roundId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewAdminAddress(address)",
      "name": "NewAdminAddress",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the upgraded implementation.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewBufferAndIntervalSeconds(uint256,uint256)",
      "name": "NewBufferAndIntervalSeconds",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "bufferSeconds",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "intervalSeconds",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewMinBetAmount(uint256,uint256)",
      "name": "NewMinBetAmount",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "minBetAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewOperatorAddress(address)",
      "name": "NewOperatorAddress",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the upgraded implementation.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewOracle(address)",
      "name": "NewOracle",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the upgraded implementation.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewOracleUpdateAllowance(uint256)",
      "name": "NewOracleUpdateAllowance",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the upgraded implementation.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewTreasuryFee(uint256,uint256)",
      "name": "NewTreasuryFee",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "treasuryFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Pause(uint256)",
      "name": "Pause",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the upgraded implementation.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the upgraded implementation.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RewardsCalculated(uint256,uint256,uint256,uint256)",
      "name": "RewardsCalculated",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "rewardBaseCalAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rewardAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "treasuryAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StartRound(uint256)",
      "name": "StartRound",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the upgraded implementation.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TokenRecovery(address,uint256)",
      "name": "TokenRecovery",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TreasuryClaim(uint256)",
      "name": "TreasuryClaim",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the upgraded implementation.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpause(uint256)",
      "name": "Unpause",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the upgraded implementation.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the upgraded implementation.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MAX_TREASURY_FEE()",
      "name": "MAX_TREASURY_FEE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminAddress()",
      "name": "adminAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "betBear(uint256)",
      "name": "betBear",
      "description": "Bet bear position.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": ": epoch.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "betBull(uint256)",
      "name": "betBull",
      "description": "Bet bull position.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": ": epoch.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "bufferSeconds()",
      "name": "bufferSeconds",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claim(uint256[])",
      "name": "claim",
      "description": "Claim reward for an array of epochs.",
      "parameterDecorators": [
        {
          "name": "epochs",
          "description": ": array of epochs.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimTreasury()",
      "name": "claimTreasury",
      "description": "Claim all rewards in treasury. Callable by admin.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimable(uint256,address)",
      "name": "claimable",
      "description": "Get the claimable stats of specific epoch and user account.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": ": epoch.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": ": user address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentEpoch()",
      "name": "currentEpoch",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executeRound()",
      "name": "executeRound",
      "description": "Start the next round n, lock price for round n-1, end round n-2. Callable by operator.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "genesisLockOnce()",
      "name": "genesisLockOnce",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "genesisLockRound()",
      "name": "genesisLockRound",
      "description": "Lock genesis round. Callable by operator.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "genesisStartOnce()",
      "name": "genesisStartOnce",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "genesisStartRound()",
      "name": "genesisStartRound",
      "description": "Start genesis round. Callable by admin or operator.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getUserRounds(address,uint256,uint256)",
      "name": "getUserRounds",
      "description": "Returns round epochs and bet information for a user that has participated.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": ": user address.",
          "recommendedTypes": []
        },
        {
          "name": "cursor",
          "description": ": cursor.",
          "recommendedTypes": []
        },
        {
          "name": "size",
          "description": ": size.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserRoundsLength(address)",
      "name": "getUserRoundsLength",
      "description": "Returns round epochs length.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": ": user address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "intervalSeconds()",
      "name": "intervalSeconds",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ledger(uint256,address)",
      "name": "ledger",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "position",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "claimed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minBetAmount()",
      "name": "minBetAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "operatorAddress()",
      "name": "operatorAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracle()",
      "name": "oracle",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracleLatestRoundId()",
      "name": "oracleLatestRoundId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracleUpdateAllowance()",
      "name": "oracleUpdateAllowance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "called by the admin to pause, triggers stopped state. Callable by admin or operator.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recoverToken(address,uint256)",
      "name": "recoverToken",
      "description": "It allows the owner to recover tokens sent to the contract by mistake. Callable by owner.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": ": token address.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": ": token amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "refundable(uint256,address)",
      "name": "refundable",
      "description": "Get the refundable stats of specific epoch and user account.",
      "parameterDecorators": [
        {
          "name": "epoch",
          "description": ": epoch.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": ": user address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rounds(uint256)",
      "name": "rounds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "startTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lockTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "closeTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lockPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        },
        {
          "name": "closePrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        },
        {
          "name": "lockOracleId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "closeOracleId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "totalAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "bullAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "bearAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardBaseCalAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "oracleCalled",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAdmin(address)",
      "name": "setAdmin",
      "description": "Set admin address. Callable by owner.",
      "parameterDecorators": [
        {
          "name": "_adminAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBufferAndIntervalSeconds(uint256,uint256)",
      "name": "setBufferAndIntervalSeconds",
      "description": "Set buffer and interval (in seconds). Callable by admin.",
      "parameterDecorators": [
        {
          "name": "_bufferSeconds",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_intervalSeconds",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinBetAmount(uint256)",
      "name": "setMinBetAmount",
      "description": "Set minBetAmount. Callable by admin.",
      "parameterDecorators": [
        {
          "name": "_minBetAmount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOperator(address)",
      "name": "setOperator",
      "description": "Set operator address. Callable by admin.",
      "parameterDecorators": [
        {
          "name": "_operatorAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOracle(address)",
      "name": "setOracle",
      "description": "Set Oracle address. Callable by admin.",
      "parameterDecorators": [
        {
          "name": "_oracle",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOracleUpdateAllowance(uint256)",
      "name": "setOracleUpdateAllowance",
      "description": "Set oracle update allowance. Callable by admin.",
      "parameterDecorators": [
        {
          "name": "_oracleUpdateAllowance",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTreasuryFee(uint256)",
      "name": "setTreasuryFee",
      "description": "Set treasury fee. Callable by admin.",
      "parameterDecorators": [
        {
          "name": "_treasuryFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "treasuryAmount()",
      "name": "treasuryAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "treasuryFee()",
      "name": "treasuryFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "called by the admin to unpause, returns to normal state Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userRounds(address,uint256)",
      "name": "userRounds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}