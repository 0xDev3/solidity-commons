{
  "schema": "../schema.json",
  "tags": [
    "oracles"
  ],
  "name": "Oracle",
  "description": "Oracle Module. The Oracle module sets, retrieves, and stores USD prices (USD per asset) for underlying, collateral, and strike assets manages pricers that are used for different assets.",
  "eventDecorators": [
    {
      "signature": "DisputerUpdated(address)",
      "name": "DisputerUpdated",
      "description": "Emitted when supply rate for `target` is set to `rate`.",
      "parameterDecorators": [
        {
          "name": "newDisputer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ExpiryPriceDisputed(address,uint256,uint256,uint256,uint256)",
      "name": "ExpiryPriceDisputed",
      "description": "Emitted when supply rate for `target` is set to `rate`.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "expiryTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "disputedPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "disputeTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExpiryPriceUpdated(address,uint256,uint256,uint256)",
      "name": "ExpiryPriceUpdated",
      "description": "Emitted when supply rate for `target` is set to `rate`.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "expiryTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "onchainTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when supply rate for `target` is set to `rate`.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PricerDisputePeriodUpdated(address,uint256)",
      "name": "PricerDisputePeriodUpdated",
      "description": "Emitted when supply rate for `target` is set to `rate`.",
      "parameterDecorators": [
        {
          "name": "pricer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "disputePeriod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PricerLockingPeriodUpdated(address,uint256)",
      "name": "PricerLockingPeriodUpdated",
      "description": "Emitted when supply rate for `target` is set to `rate`.",
      "parameterDecorators": [
        {
          "name": "pricer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "lockingPeriod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PricerUpdated(address,address)",
      "name": "PricerUpdated",
      "description": "Emitted when supply rate for `target` is set to `rate`.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pricer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "StablePriceUpdated(address,uint256)",
      "name": "StablePriceUpdated",
      "description": "Emitted when supply rate for `target` is set to `rate`.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "disputeExpiryPrice(address,uint256,uint256)",
      "name": "disputeExpiryPrice",
      "description": "dispute an asset price during the dispute period. only the disputer can dispute a price during the dispute period, by setting a new one.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "asset address.",
          "recommendedTypes": []
        },
        {
          "name": "_expiryTimestamp",
          "description": "expiry timestamp.",
          "recommendedTypes": []
        },
        {
          "name": "_price",
          "description": "the correct price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "endMigration()",
      "name": "endMigration",
      "description": "end migration process. can only be called by owner, should be called before setting Oracle module into AddressBook.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getChainlinkRoundData(address,uint80)",
      "name": "getChainlinkRoundData",
      "description": "get historical asset price and timestamp. if asset is a stable asset, will return stored price and timestamp equal to now.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "asset address to get it's historical price.",
          "recommendedTypes": []
        },
        {
          "name": "_roundId",
          "description": "chainlink round id.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDisputer()",
      "name": "getDisputer",
      "description": "get the disputer address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "disputer address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getExpiryPrice(address,uint256)",
      "name": "getExpiryPrice",
      "description": "get the asset price at specific expiry timestamp.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "asset address.",
          "recommendedTypes": []
        },
        {
          "name": "_expiryTimestamp",
          "description": "expiry timestamp.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "price scaled by 1e8, denominated in USD.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_1",
          "description": "isFinalized True, if the price is finalized, False if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPrice(address)",
      "name": "getPrice",
      "description": "get a live asset price from the asset's pricer contract.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "asset address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "price scaled by 1e8, denominated in USD e.g. 17568900000 => 175.689 USD.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPricer(address)",
      "name": "getPricer",
      "description": "get the pricer for an asset.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "asset address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "pricer address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPricerDisputePeriod(address)",
      "name": "getPricerDisputePeriod",
      "description": "get a pricer's dispute period dispute period is the period of time after an expiry price has been pushed where a price can be disputed. during the dispute period, the disputer can dispute the submitted price and modify it.",
      "parameterDecorators": [
        {
          "name": "_pricer",
          "description": "pricer address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "dispute period.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPricerLockingPeriod(address)",
      "name": "getPricerLockingPeriod",
      "description": "get a pricer's locking period locking period is the period of time after the expiry timestamp where a price can not be pushed. during the locking period an expiry price can not be submitted to this contract.",
      "parameterDecorators": [
        {
          "name": "_pricer",
          "description": "pricer address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "locking period.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isDisputePeriodOver(address,uint256)",
      "name": "isDisputePeriodOver",
      "description": "check if the dispute period is over.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "asset address.",
          "recommendedTypes": []
        },
        {
          "name": "_expiryTimestamp",
          "description": "expiry timestamp.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if dispute period is over, False if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isLockingPeriodOver(address,uint256)",
      "name": "isLockingPeriodOver",
      "description": "check if the locking period is over for setting the asset price at a particular expiry timestamp.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "asset address.",
          "recommendedTypes": []
        },
        {
          "name": "_expiryTimestamp",
          "description": "expiry timestamp.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if locking period is over, False if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "migrateOracle(address,uint256[],uint256[])",
      "name": "migrateOracle",
      "description": "function to mgirate asset prices from old oracle to new deployed oracle. this can only be called by owner, should be used at the deployment time before setting Oracle module into AddressBook.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "asset address.",
          "recommendedTypes": []
        },
        {
          "name": "_expiries",
          "description": "array of expiries timestamps.",
          "recommendedTypes": []
        },
        {
          "name": "_prices",
          "description": "array of prices.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAssetPricer(address,address)",
      "name": "setAssetPricer",
      "description": "sets the pricer for an asset. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "asset address.",
          "recommendedTypes": []
        },
        {
          "name": "_pricer",
          "description": "pricer address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDisputePeriod(address,uint256)",
      "name": "setDisputePeriod",
      "description": "sets the dispute period for a pricer. can only be called by the owner for a composite pricer (ie CompoundPricer) that depends on or calls other pricers, ensure that the dispute period for the composite pricer is longer than the dispute period for the asset pricer that it calls to ensure safe usage as a dispute in the other pricer will cause the need for a dispute with the composite pricer's price.",
      "parameterDecorators": [
        {
          "name": "_pricer",
          "description": "pricer address.",
          "recommendedTypes": []
        },
        {
          "name": "_disputePeriod",
          "description": "dispute period.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDisputer(address)",
      "name": "setDisputer",
      "description": "set the disputer address. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_disputer",
          "description": "disputer address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setExpiryPrice(address,uint256,uint256)",
      "name": "setExpiryPrice",
      "description": "submits the expiry price to the oracle, can only be set from the pricer. asset price can only be set after the locking period is over and before the dispute period has started.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "asset address.",
          "recommendedTypes": []
        },
        {
          "name": "_expiryTimestamp",
          "description": "expiry timestamp.",
          "recommendedTypes": []
        },
        {
          "name": "_price",
          "description": "asset price at expiry.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setLockingPeriod(address,uint256)",
      "name": "setLockingPeriod",
      "description": "sets the locking period for a pricer. can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_pricer",
          "description": "pricer address.",
          "recommendedTypes": []
        },
        {
          "name": "_lockingPeriod",
          "description": "locking period.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStablePrice(address,uint256)",
      "name": "setStablePrice",
      "description": "set stable asset price. price should be scaled by 1e8.",
      "parameterDecorators": [
        {
          "name": "_asset",
          "description": "asset address.",
          "recommendedTypes": []
        },
        {
          "name": "_price",
          "description": "price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}