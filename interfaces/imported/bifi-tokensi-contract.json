{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "tokenSI",
  "description": "Bifi tokenSI Contract. Service incentive logic.",
  "eventDecorators": [
    {
      "signature": "CircuitBreaked(bool,uint256,uint256)",
      "name": "CircuitBreaked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "breaked",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "blockNumber",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "handlerID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "claimRewardAmountUser(address)",
      "name": "claimRewardAmountUser",
      "description": "Claim rewards for the user (external).",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The address of user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of user reward.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getBetaRate()",
      "name": "getBetaRate",
      "description": "Get the rate of beta (beta-score).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The rate of beta (beta-score).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBetaRateBaseTotalAmount()",
      "name": "getBetaRateBaseTotalAmount",
      "description": "Get the total amount of betaRate.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The total amount of betaRate.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBetaRateBaseUserAmount(address)",
      "name": "getBetaRateBaseUserAmount",
      "description": "Calculate the rewards given to the user by using the beta score (external). betaRateBaseAmount = (depositAmount * betaRate) + ((1 - betaRate) * borrowAmount).",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The address of user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The beta score of the user.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMarketRewardInfo()",
      "name": "getMarketRewardInfo",
      "description": "Get the reward parameters of the market.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserRewardInfo(address)",
      "name": "getUserRewardInfo",
      "description": "Get reward parameters for the user.",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ownershipTransfer(address)",
      "name": "ownershipTransfer",
      "description": "Transfer ownership.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "the address of the new owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCircuitBreakWithOwner(bool)",
      "name": "setCircuitBreakWithOwner",
      "description": "Set circuitBreak to freeze/unfreeze all handlers by owne.",
      "parameterDecorators": [
        {
          "name": "_emergency",
          "description": "The status of the circuit breaker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCircuitBreaker(bool)",
      "name": "setCircuitBreaker",
      "description": "Set circuitBreak to freeze/unfreeze all handlers by marketManager.",
      "parameterDecorators": [
        {
          "name": "_emergency",
          "description": "The status of the circuit breaker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateRewardLane(address)",
      "name": "updateRewardLane",
      "description": "Update the reward lane (the acculumated sum of the reward unit per block) of the market and user.",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The address of user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Whether or not this process has succeeded.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateRewardPerBlockLogic(uint256)",
      "name": "updateRewardPerBlockLogic",
      "description": "Update the amount of rewards per block.",
      "parameterDecorators": [
        {
          "name": "_rewardPerBlock",
          "description": "The amount of the reward amount per block.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}