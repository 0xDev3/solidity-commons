{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "GovernanceTokenManager",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipNominated(address,address)",
      "name": "OwnershipNominated",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Purchased(address,uint256,uint256)",
      "name": "Purchased",
      "description": "An event emitted when dVIX is burned and removed of stake.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "paid",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "received",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "Nominated Owner can accept the Ownership of the contract. Can only be called by the nominated owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "burnToken(address,uint256)",
      "name": "burnToken",
      "description": "call the burn function from token contract.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Account from where the token is to be burned.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of token to be burned Requirement:- `account` can't be 0 address Only admin of the contracts can call this function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buy(uint256)",
      "name": "buy",
      "description": "User buys some Arkius tokens by paying AVAX. Transaction reverts if the calculated amount is less than minimum expected amount.",
      "parameterDecorators": [
        {
          "name": "minReceived",
          "description": "Minimum number of tokens expected in return of paid AVAX.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateBuyAmount(uint256)",
      "name": "calculateBuyAmount",
      "description": "calculates the return amount for a given conversion (in the token) Give AVAX and receive Arkius Tokens.",
      "parameterDecorators": [
        {
          "name": "reserveTokenAmount",
          "description": "Amount of AVAX for which return has to be calculated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "purchase return amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "decimals()",
      "name": "decimals",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReserveBalance()",
      "name": "getReserveBalance",
      "description": "Function to return the current reserve balance in the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "giveInitialSupply(uint256)",
      "name": "giveInitialSupply",
      "description": "Gives initial Supply to the Token Contract. It can be called only once. Some AVAX is put in reserve, to decide the initial price.",
      "parameterDecorators": [
        {
          "name": "initialSupply",
          "description": "Amount of tokens to be minted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "govAddress()",
      "name": "govAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "membershipTokenAddress()",
      "name": "membershipTokenAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintToken(address,uint256)",
      "name": "mintToken",
      "description": "call the mint function from token contract.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Account where the token is to be minted.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of token to be minted Requirement:- `account` can't be 0 address Only admin of the contracts can call this function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nominateNewOwner(address)",
      "name": "nominateNewOwner",
      "description": "Nominate new Owner of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenAddress()",
      "name": "tokenAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateGovernanceAddress(address)",
      "name": "updateGovernanceAddress",
      "description": "Update Arkius Governance address.",
      "parameterDecorators": [
        {
          "name": "governanceAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateMembershipTokenAddress(address)",
      "name": "updateMembershipTokenAddress",
      "description": "Update ArkiusMembershipNFT Contract address.",
      "parameterDecorators": [
        {
          "name": "arkiusMembershipToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateTokenAddress(address)",
      "name": "updateTokenAddress",
      "description": "Update ArkiusGovernanceToken Contract address.",
      "parameterDecorators": [
        {
          "name": "TokenAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "version()",
      "name": "version",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}