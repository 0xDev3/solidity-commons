{
  "schema": "../schema.json",
  "tags": [
    "bridges",
    "optimism"
  ],
  "name": "BuddleBridgeOptimism",
  "description": "",
  "eventDecorators": [
    {
      "signature": "FundsBridged(uint256,address[],uint256[],uint256,bytes32)",
      "name": "FundsBridged",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "destChain",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amounts",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ticketId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Visualizer updated for this edition.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "CHAIN()",
      "name": "CHAIN",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "VERSION()",
      "name": "VERSION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addBuddleBridge(uint256,address)",
      "name": "addBuddleBridge",
      "description": "Add a buddle bridge contract for an alternate layer-2 chain.",
      "parameterDecorators": [
        {
          "name": "_chain",
          "description": "Chain ID for the target layer 2 blockchain.",
          "recommendedTypes": []
        },
        {
          "name": "_contract",
          "description": "Contract address of the deployed Buddle contract on layer 1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addTokenMap(address,address)",
      "name": "addTokenMap",
      "description": "Add a token mapping (from L2 to L1) to the contract for a specific ERC20 token.",
      "parameterDecorators": [
        {
          "name": "_l2TokenAddress",
          "description": "The token address on Layer-2.",
          "recommendedTypes": []
        },
        {
          "name": "_l1TokenAddress",
          "description": "The token address on Layer-1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveRoot(bytes32)",
      "name": "approveRoot",
      "description": "Approve a state root on the respective layer 2 destination side Buddle contract.",
      "parameterDecorators": [
        {
          "name": "_root",
          "description": "The state root to be approved.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buddle()",
      "name": "buddle",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "source",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "destination",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "buddleBridge(uint256)",
      "name": "buddleBridge",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimBounty(bytes32,uint256,address[],uint256[],uint256[],uint256,uint256,bytes32)",
      "name": "claimBounty",
      "description": "Claim the bounty for the current pool. A ticket must be emitted prior to this function.",
      "parameterDecorators": [
        {
          "name": "_ticket",
          "description": "The ticket generated by the source L2 contract.",
          "recommendedTypes": []
        },
        {
          "name": "_chain",
          "description": "The chain ID for the destination contract.",
          "recommendedTypes": []
        },
        {
          "name": "_tokens",
          "description": "List of tokens (L2 addresses) supported by Buddle Source.",
          "recommendedTypes": []
        },
        {
          "name": "_amounts",
          "description": "List of amounts corresponding to _tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_bounty",
          "description": "List of bounty amounts corresponding to _tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_firstIdForTicket",
          "description": "The first transfer id included in _ticket.",
          "recommendedTypes": []
        },
        {
          "name": "_lastIdForTicket",
          "description": "The last transfer id included in _ticket.",
          "recommendedTypes": []
        },
        {
          "name": "stateRoot",
          "description": "State root emitted with the corresponding _ticket.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(bytes32,address,address)",
      "name": "initialize",
      "description": "Initialize the contract with state variables.",
      "parameterDecorators": [
        {
          "name": "_version",
          "description": "Contract version.",
          "recommendedTypes": []
        },
        {
          "name": "_messenger",
          "description": "The address of the L1 Cross Domain Messenger Contract.",
          "recommendedTypes": []
        },
        {
          "name": "_stdBridge",
          "description": "The address of the L1 Standard Token Bridge.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "knownBridges(address)",
      "name": "knownBridges",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "messenger()",
      "name": "messenger",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDestination(address)",
      "name": "setDestination",
      "description": "Set the Buddle destination side contract for the respective L2 chain.",
      "parameterDecorators": [
        {
          "name": "_dest",
          "description": "The address of the deployed Destination Side contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSource(address)",
      "name": "setSource",
      "description": "Set the Buddle source side contract for the respective L2 chain.",
      "parameterDecorators": [
        {
          "name": "_src",
          "description": "The address of the deployed Source Side contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stdBridge()",
      "name": "stdBridge",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenMap(address)",
      "name": "tokenMap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferFunds(address[],uint256[],address,bytes32)",
      "name": "transferFunds",
      "description": "Transfer funds from layer 1 to layer 2 using the standard bridge of the respective chain.",
      "parameterDecorators": [
        {
          "name": "_tokens",
          "description": "The list of token addresses on layer 2.",
          "recommendedTypes": []
        },
        {
          "name": "_amounts",
          "description": "The list of corresponding amounts to be transferred.",
          "recommendedTypes": []
        },
        {
          "name": "bountySeeker",
          "description": "The address providing liquidity on layer 1 for bounty fee.",
          "recommendedTypes": []
        },
        {
          "name": "_ticket",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateBuddleBridge(uint256,address)",
      "name": "updateBuddleBridge",
      "description": "Update an existing buddle bridge contract for the alternate layer-2 chain.",
      "parameterDecorators": [
        {
          "name": "_chain",
          "description": "Chain ID for the target layer 2 blockchain.",
          "recommendedTypes": []
        },
        {
          "name": "_contract",
          "description": "Contract address of the deployed Buddle contract on layer 1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStandardBridge(address)",
      "name": "updateStandardBridge",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newBridgeAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateTokenMap(address,address)",
      "name": "updateTokenMap",
      "description": "Update an existing token mapping in the contract for a specific ERC20 token.",
      "parameterDecorators": [
        {
          "name": "_l2TokenAddress",
          "description": "The token address on Layer-2.",
          "recommendedTypes": []
        },
        {
          "name": "_l1TokenAddress",
          "description": "The token address on Layer-1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateXDomainMessenger(address)",
      "name": "updateXDomainMessenger",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newMessengerAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}