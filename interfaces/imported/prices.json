{
  "schema": "../schema.json",
  "tags": [],
  "name": "Prices",
  "description": "Manage and normalizes ETH price feeds.",
  "eventDecorators": [
    {
      "signature": "AddFeed(uint256,address)",
      "name": "AddFeed",
      "description": "Funds have been received. activate liquidity.",
      "parameterDecorators": [
        {
          "name": "currency",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "feed",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Funds have been received. activate liquidity.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addFeed(address,uint256)",
      "name": "addFeed",
      "description": "Add a price feed for the price of ETH. Current feeds can't be modified.",
      "parameterDecorators": [
        {
          "name": "_feed",
          "description": "The price feed being added.",
          "recommendedTypes": []
        },
        {
          "name": "_currency",
          "description": "The currency that the price feed is for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feedDecimalAdjuster(uint256)",
      "name": "feedDecimalAdjuster",
      "description": "The number to multiply each price feed by to get to the target decimals.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feedFor(uint256)",
      "name": "feedFor",
      "description": "The available price feeds that can be used to get the price of ETH.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getETHPriceFor(uint256)",
      "name": "getETHPriceFor",
      "description": "Gets the current price of ETH for the provided currency.",
      "parameterDecorators": [
        {
          "name": "_currency",
          "description": "The currency to get a price for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "price The price of ETH with 18 decimals.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "targetDecimals()",
      "name": "targetDecimals",
      "description": "The target number of decimals the price feed results have.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}