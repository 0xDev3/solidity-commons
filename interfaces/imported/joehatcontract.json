{"schema":"../schema.json","tags":[],"name":"JoeHatContract","description":"","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"SeedAvax(address,uint256)","name":"SeedAvax","description":"Emitted when an owner seed the contract with valueAvax Avax.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":false},{"name":"valueAVAX","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SwapAvaxForHat(uint256,uint256)","name":"SwapAvaxForHat","description":"Emitted swapping Avax for Hat.","parameterDecorators":[{"name":"avaxAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"hatAmount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SwapHatForAvax(uint256,uint256)","name":"SwapHatForAvax","description":"Emitted swapping Hat for Avax.","parameterDecorators":[{"name":"hatAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"avaxAmount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TeamWithdraw(uint256)","name":"TeamWithdraw","description":"Emitted when an owner withdraw the tokens of the team balance.","parameterDecorators":[{"name":"teamBalance","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"_a()","name":"_a","description":"a/b is between 0 and 1. During a sale, 1 - a/b is kept by the contract so that it can be retrieved by the team and to encourage people to HODL.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"_b()","name":"_b","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"balanceOf(address)","name":"balanceOf","description":"","parameterDecorators":[{"name":"account","description":"- Account that you want to look at.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"balanceOfAccount - the amount of tokens owned by `account`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"burn(uint256)","name":"burn","description":"Destroys `amount` tokens from `account`, reducing the total supply. Emits a {Transfer} event with `to` set to the zero address. Requirements: - `account` cannot be the zero address. - `account` must have at least `amount` tokens.","parameterDecorators":[{"name":"hatAmount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"calculateAvaxForExactHatWithFees(uint256)","name":"calculateAvaxForExactHatWithFees","description":"Function used to get Avax amount for a given amount of $HAT, approx a*b less Avax than for the same hat amount is that was without fees. used when selling HAT for Avax.","parameterDecorators":[{"name":"hatAmount","description":"- The amount of $HAT you'd like to swap, but only for information.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"avaxAmount - Amount of Avax to receive.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"calculateExactAvaxForHatWithFees(uint256)","name":"calculateExactAvaxForHatWithFees","description":"Function used to get $HAT amount for a given amount of Avax with fees, approx a*b more hat needed for the same avax amount if that was without fees. used when selling Hat for Avax.","parameterDecorators":[{"name":"avaxAmount","description":"- The amount of Avax you'd like to swap, but only for information.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"hatAmount - Amount of $HAT to receive.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"calculateExactHatForAvax(uint256)","name":"calculateExactHatForAvax","description":"Function used to get Avax amount for a given amount of $HAT. used to buy HAT with Avax.","parameterDecorators":[{"name":"hatAmount","description":"- The amount of $HAT you'd like to swap, but only for information.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"avaxAmount - Amount of Avax to receive.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"calculateHatForExactAvax(uint256)","name":"calculateHatForExactAvax","description":"Function used to get $HAT amount for a given amount of Avax. Used to buy HAT with Avax.","parameterDecorators":[{"name":"avaxAmount","description":"- The amount of Avax you'd like to swap, but only for information.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"hatAmount - Amount of $HAT to receive.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTeamBalance()","name":"getTeamBalance","description":"Function used to get the team amount, it's calculated by taking the Avax balance of the contract and removing the Avax needed to pay everyone if all HODLers would like to sell al their tokens.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"teamBalance - the tokens that are owned by the contract that are not needed.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"k()","name":"k","description":"k the constant of the uniswap curve.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"lastHatPriceInAvax()","name":"lastHatPriceInAvax","description":"used to calculate the price of the very last token, because with uniswap you'll never be able to buy the very last token, as it diverges to infinity, (1/0).","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"maxSupply()","name":"maxSupply","description":"Max Supply of $HAT, when initialising, it's equal to the circulating supply.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"redeemHat()","name":"redeemHat","description":"used to redeem a real hat, that will burn 1 $hat. `sender` needs at least 1 $HAT.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"redeemers(uint256)","name":"redeemers","description":"Keep a list of all the redeemers ordered by time. It will be used at some point...","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"reserveAvax()","name":"reserveAvax","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"reserveHat()","name":"reserveHat","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"reserveLowestAvax()","name":"reserveLowestAvax","description":"used to calculate the amount of avax the contract needs to store when initialising, it's equal to the reserveAvax (because there will never be more token).","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"seedAvax()","name":"seedAvax","description":"VERY IMPORTANT : this needs to be called to seed the contract. if all the tokens are owned by the contract, i.e. not any of the token were or will be given, then you don't need to seed the contract. But if some tokens were given or will be, this needs to be called with the exact value of the $HAT token that were given so that if everyone sells its token, the contract have enough avax for this. Emits a {SeedAvax} event.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":["SeedAvax(address,uint256)"],"readOnly":false},{"signature":"swapExactAvaxForHat()","name":"swapExactAvaxForHat","description":"Function used to buy $HAT with ExactAvax. `sender` sends X avax, the contract calculate how much $HAT he will receive. And it sends them to the caller.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"true if swap has occurred.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"swapExactHatForAvaxWithFees(uint256)","name":"swapExactHatForAvaxWithFees","description":"Function used to sell $HAT for Avax. `sender` send X $HAT, the contract calculate how much Avax he will receive. And it sends them to the caller.","parameterDecorators":[{"name":"hatAmount","description":"- the $HAT amount you want to swap for avax.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"true - if swap has occurred.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"totalSupply()","name":"totalSupply","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"Returns the amount of tokens in existence.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawTeamBalance()","name":"withdrawTeamBalance","description":"Function used to withdraw the team funds, this is equal to the amount of Avax kept by the contract that aren't needed if everyone sells their tokens. Emits a {TeamWithdraw} events.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":["TeamWithdraw(uint256)"],"readOnly":false}]}