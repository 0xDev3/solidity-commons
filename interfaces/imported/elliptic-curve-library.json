{"schema":"../schema.json","tags":["curve finance"],"name":"EllipticCurve","description":"Elliptic Curve Library. Library providing arithmetic operations over elliptic curves. This library does not check whether the inserted points belong to the curve `isOnCurve` function should be used by the library user to check the aforementioned statement.","eventDecorators":[],"functionDecorators":[{"signature":"U255_MAX_PLUS_1()","name":"U255_MAX_PLUS_1","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"deriveY(uint8,uint256,uint256,uint256,uint256)","name":"deriveY","description":"Derives the y coordinate from a compressed-format point x [[SEC-1]](https://www.secg.org/SEC1-Ver-1.0.pdf).","parameterDecorators":[{"name":"_prefix","description":"parity byte (0x02 even, 0x03 odd).","recommendedTypes":[]},{"name":"_x","description":"coordinate x.","recommendedTypes":[]},{"name":"_aa","description":"constant of curve.","recommendedTypes":[]},{"name":"_bb","description":"constant of curve.","recommendedTypes":[]},{"name":"_pp","description":"the modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"y coordinate y.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"ecAdd(uint256,uint256,uint256,uint256,uint256,uint256)","name":"ecAdd","description":"Add two points (x1, y1) and (x2, y2) in affine coordinates.","parameterDecorators":[{"name":"_x1","description":"coordinate x of P1.","recommendedTypes":[]},{"name":"_y1","description":"coordinate y of P1.","recommendedTypes":[]},{"name":"_x2","description":"coordinate x of P2.","recommendedTypes":[]},{"name":"_y2","description":"coordinate y of P2.","recommendedTypes":[]},{"name":"_aa","description":"constant of the curve.","recommendedTypes":[]},{"name":"_pp","description":"the modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"ecInv(uint256,uint256,uint256)","name":"ecInv","description":"Calculate inverse (x, -y) of point (x, y).","parameterDecorators":[{"name":"_x","description":"coordinate x of P1.","recommendedTypes":[]},{"name":"_y","description":"coordinate y of P1.","recommendedTypes":[]},{"name":"_pp","description":"the modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"ecMul(uint256,uint256,uint256,uint256,uint256)","name":"ecMul","description":"Multiply point (x1, y1, z1) times d in affine coordinates.","parameterDecorators":[{"name":"_k","description":"scalar to multiply.","recommendedTypes":[]},{"name":"_x","description":"coordinate x of P1.","recommendedTypes":[]},{"name":"_y","description":"coordinate y of P1.","recommendedTypes":[]},{"name":"_aa","description":"constant of the curve.","recommendedTypes":[]},{"name":"_pp","description":"the modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"ecSub(uint256,uint256,uint256,uint256,uint256,uint256)","name":"ecSub","description":"Substract two points (x1, y1) and (x2, y2) in affine coordinates.","parameterDecorators":[{"name":"_x1","description":"coordinate x of P1.","recommendedTypes":[]},{"name":"_y1","description":"coordinate y of P1.","recommendedTypes":[]},{"name":"_x2","description":"coordinate x of P2.","recommendedTypes":[]},{"name":"_y2","description":"coordinate y of P2.","recommendedTypes":[]},{"name":"_aa","description":"constant of the curve.","recommendedTypes":[]},{"name":"_pp","description":"the modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"expMod(uint256,uint256,uint256)","name":"expMod","description":"Modular exponentiation, b^e % _pp. Source: https://github.com/androlo/standard-contracts/blob/master/contracts/src/crypto/ECCMath.sol.","parameterDecorators":[{"name":"_base","description":"base.","recommendedTypes":[]},{"name":"_exp","description":"exponent.","recommendedTypes":[]},{"name":"_pp","description":"modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"r such that r = b**e (mod _pp).","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"invMod(uint256,uint256)","name":"invMod","description":"Modular euclidean inverse of a number (mod p).","parameterDecorators":[{"name":"_x","description":"The number.","recommendedTypes":[]},{"name":"_pp","description":"The modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"q such that x*q = 1 (mod _pp).","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"isOnCurve(uint256,uint256,uint256,uint256,uint256)","name":"isOnCurve","description":"Check whether point (x,y) is on curve defined by a, b, and _pp.","parameterDecorators":[{"name":"_x","description":"coordinate x of P1.","recommendedTypes":[]},{"name":"_y","description":"coordinate y of P1.","recommendedTypes":[]},{"name":"_aa","description":"constant of curve.","recommendedTypes":[]},{"name":"_bb","description":"constant of curve.","recommendedTypes":[]},{"name":"_pp","description":"the modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"true if x,y in the curve, false else.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"jacAdd(uint256,uint256,uint256,uint256,uint256,uint256,uint256)","name":"jacAdd","description":"Adds two points (x1, y1, z1) and (x2 y2, z2).","parameterDecorators":[{"name":"_x1","description":"coordinate x of P1.","recommendedTypes":[]},{"name":"_y1","description":"coordinate y of P1.","recommendedTypes":[]},{"name":"_z1","description":"coordinate z of P1.","recommendedTypes":[]},{"name":"_x2","description":"coordinate x of square.","recommendedTypes":[]},{"name":"_y2","description":"coordinate y of square.","recommendedTypes":[]},{"name":"_z2","description":"coordinate z of square.","recommendedTypes":[]},{"name":"_pp","description":"the modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"jacDouble(uint256,uint256,uint256,uint256,uint256)","name":"jacDouble","description":"Doubles a points (x, y, z).","parameterDecorators":[{"name":"_x","description":"coordinate x of P1.","recommendedTypes":[]},{"name":"_y","description":"coordinate y of P1.","recommendedTypes":[]},{"name":"_z","description":"coordinate z of P1.","recommendedTypes":[]},{"name":"_aa","description":"the a scalar in the curve equation.","recommendedTypes":[]},{"name":"_pp","description":"the modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"jacMul(uint256,uint256,uint256,uint256,uint256,uint256)","name":"jacMul","description":"Multiply point (x, y, z) times d.","parameterDecorators":[{"name":"_d","description":"scalar to multiply.","recommendedTypes":[]},{"name":"_x","description":"coordinate x of P1.","recommendedTypes":[]},{"name":"_y","description":"coordinate y of P1.","recommendedTypes":[]},{"name":"_z","description":"coordinate z of P1.","recommendedTypes":[]},{"name":"_aa","description":"constant of curve.","recommendedTypes":[]},{"name":"_pp","description":"the modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"toAffine(uint256,uint256,uint256,uint256)","name":"toAffine","description":"Converts a point (x, y, z) expressed in Jacobian coordinates to affine coordinates (x', y', 1).","parameterDecorators":[{"name":"_x","description":"coordinate x.","recommendedTypes":[]},{"name":"_y","description":"coordinate y.","recommendedTypes":[]},{"name":"_z","description":"coordinate z.","recommendedTypes":[]},{"name":"_pp","description":"the modulus.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}