{
  "schema": "../schema.json",
  "tags": [],
  "name": "ImpossibleRouterExtension",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "addLiquidity(address,address,uint256,uint256,uint256,uint256)",
      "name": "addLiquidity",
      "description": "Helper function for adding liquidity. Logic is unchanged from uniswap-V2-Router02.",
      "parameterDecorators": [
        {
          "name": "tokenA",
          "description": "The address of underlying tokenA to add.",
          "recommendedTypes": []
        },
        {
          "name": "tokenB",
          "description": "The address of underlying tokenB to add.",
          "recommendedTypes": []
        },
        {
          "name": "amountADesired",
          "description": "The desired amount of tokenA to add.",
          "recommendedTypes": []
        },
        {
          "name": "amountBDesired",
          "description": "The desired amount of tokenB to add.",
          "recommendedTypes": []
        },
        {
          "name": "amountAMin",
          "description": "The min amount of tokenA to add (amountAMin:amountBDesired sets bounds on ratio).",
          "recommendedTypes": []
        },
        {
          "name": "amountBMin",
          "description": "The min amount of tokenB to add (amountADesired:amountBMin sets bounds on ratio).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountA",
          "description": "Actual amount of tokenA added as liquidity to pair.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountB",
          "description": "Actual amount of tokenB added as liquidity to pair.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "factory()",
      "name": "factory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmountIn(uint256,address,address)",
      "name": "getAmountIn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountOut",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenOut",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmountOut(uint256,address,address)",
      "name": "getAmountOut",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenOut",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountOut",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmountsIn(uint256,address[])",
      "name": "getAmountsIn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountOut",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "path",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amounts",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmountsOut(uint256,address[])",
      "name": "getAmountsOut",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "path",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amounts",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "quote(uint256,uint256,uint256)",
      "name": "quote",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountA",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "reserveA",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "reserveB",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountB",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeLiquidity(address,address,address,uint256,uint256)",
      "name": "removeLiquidity",
      "description": "Helper function for removing liquidity. Logic is unchanged from uniswap-V2-Router02.",
      "parameterDecorators": [
        {
          "name": "tokenA",
          "description": "The address of underlying tokenA in LP token.",
          "recommendedTypes": []
        },
        {
          "name": "tokenB",
          "description": "The address of underlying tokenB in LP token.",
          "recommendedTypes": []
        },
        {
          "name": "pair",
          "description": "The address of the pair corresponding to tokenA and tokenB.",
          "recommendedTypes": []
        },
        {
          "name": "amountAMin",
          "description": "The min amount of underlying tokenA that has to be received.",
          "recommendedTypes": []
        },
        {
          "name": "amountBMin",
          "description": "The min amount of underlying tokenB that has to be received.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountA",
          "description": "Actual amount of underlying tokenA received.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountB",
          "description": "Actual amount of underlying tokenB received.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swap(uint256[],address[])",
      "name": "swap",
      "description": "Helper function for basic swap. Requires the initial amount to have been sent to the first pair contract.",
      "parameterDecorators": [
        {
          "name": "amounts",
          "description": "[] An array of trade amounts. Trades are made from arr idx 0 to arr end idx sequentially.",
          "recommendedTypes": []
        },
        {
          "name": "path",
          "description": "[] An array of token addresses. Trades are made from arr idx 0 to arr end idx sequentially.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapSupportingFeeOnTransferTokens(address[])",
      "name": "swapSupportingFeeOnTransferTokens",
      "description": "Helper function for swap supporting fee on transfer tokens. Requires the initial amount to have been sent to the first pair contract.",
      "parameterDecorators": [
        {
          "name": "path",
          "description": "[] An array of token addresses. Trades are made from arr idx 0 to arr end idx sequentially.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}