{
  "schema": "../schema.json",
  "tags": [
    "nft"
  ],
  "name": "NFTYMarket",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OrderCreated(bytes32,uint256,address,address,uint256,uint256)",
      "name": "OrderCreated",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "priceInWei",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "expiresAt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OrderSuccessful(bytes32,uint256,address,address,uint256,address)",
      "name": "OrderSuccessful",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OrderCancelled(bytes32,uint256,address,address)",
      "name": "OrderCancelled",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ChangedPublicationFee(uint256)",
      "name": "ChangedPublicationFee",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "publicationFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ChangedOwnerCutPerMillion(uint256)",
      "name": "ChangedOwnerCutPerMillion",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "ownerCutPerMillion",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ChangeLegacyNFTAddress(address)",
      "name": "ChangeLegacyNFTAddress",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "legacyNFTAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AuctionCreated(bytes32,uint256,address,uint256,uint256)",
      "name": "AuctionCreated",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "priceInWei",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "expiresAt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AuctionSuccessful(bytes32,uint256,address,uint256,address)",
      "name": "AuctionSuccessful",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "totalPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "winner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AuctionCancelled(bytes32,uint256,address)",
      "name": "AuctionCancelled",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Pause()",
      "name": "Pause",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": []
    },
    {
      "signature": "Unpause()",
      "name": "Unpause",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": []
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Migrated(string,string)",
      "name": "Migrated",
      "description": "Event emitted when pendingAdmin is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "contractName",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "migrationId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "setUniswapRouter02(address)",
      "name": "setUniswapRouter02",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_router02",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwnerCutPerMillion(uint256)",
      "name": "setOwnerCutPerMillion",
      "description": "Sets the share cut for the owner of the contract that's charged the buyer on a sale.",
      "parameterDecorators": [
        {
          "name": "_ownerCutPerMillion",
          "description": "- Share amount, from 0 to 999,999.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setLegacyNFTAddress(address)",
      "name": "setLegacyNFTAddress",
      "description": "Sets the legacy NFT address to be used.",
      "parameterDecorators": [
        {
          "name": "_legacyNFTAddress",
          "description": "- Address of the NFT address used for legacy methods that don't have nftAddress as parameter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "safeExecuteDirectOrder(address,uint256,bytes)",
      "name": "safeExecuteDirectOrder",
      "description": "Executes the sale for a published NFT and checks for the asset fingerprint.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "- Address of the NFT registry.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        },
        {
          "name": "fingerprint",
          "description": "- Verification info for the asset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ERC721_Interface()",
      "name": "ERC721_Interface",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address,address,address,address,address)",
      "name": "initialize",
      "description": "Initialize this contract. Acts as a constructor.",
      "parameterDecorators": [
        {
          "name": "_acceptedToken",
          "description": "- Address of the ERC20 accepted for this marketplace.",
          "recommendedTypes": []
        },
        {
          "name": "_legacyNFTAddress",
          "description": "- Address of the NFT address used for legacy methods that don't have nftAddress as parameter.",
          "recommendedTypes": []
        },
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_WETH",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_kittieFightToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_router02",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_burnAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "InterfaceId_ValidateFingerprint()",
      "name": "InterfaceId_ValidateFingerprint",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "called by the owner to unpause, returns to normal state.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "orderByAssetIdWithFee(uint256)",
      "name": "orderByAssetIdWithFee",
      "description": "[LEGACY] Gets an order using the legacy NFT address. It's equivalent to orderByAssetId[legacyNFTAddress][assetId] but returns same structure as the old Auction.",
      "parameterDecorators": [
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "orderId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "expiresAt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptedToken()",
      "name": "acceptedToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelOrder(uint256)",
      "name": "cancelOrder",
      "description": "[LEGACY] Cancel an already published order can only be canceled by seller or the contract owner.",
      "parameterDecorators": [
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelOrder(address,uint256)",
      "name": "cancelOrder",
      "description": "Cancel an already published order can only be canceled by seller or the contract owner.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "- Address of the NFT registry.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createOrder(address,uint256,uint256,uint256)",
      "name": "createOrder",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "priceInWei",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "expiresAt",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeDirectOrder(address,uint256)",
      "name": "executeDirectOrder",
      "description": "Executes the sale for a published NFT.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "- Address of the NFT registry.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setKTYburnAddress(address)",
      "name": "setKTYburnAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_burnAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize()",
      "name": "initialize",
      "description": "Initializer that marks the contract as initialized. It is important to run this if you had deployed a previous version of a Migratable contract. For more information see https://github.com/zeppelinos/zos-lib/issues/158.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "called by the owner to pause, triggers stopped state.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "orderWithFee(address,uint256)",
      "name": "orderWithFee",
      "description": "Get order by passing the NFT address and assetId This returns orderByAssetId[legacyNFTAddress][assetId] but includes the calculated orderFee.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "- Address of the published NFT.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "- Unique ID of the published asset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "safeExecuteOrder(address,uint256,uint256,bytes)",
      "name": "safeExecuteOrder",
      "description": "Executes the sale for a published NFT and checks for the asset fingerprint.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "- Address of the NFT registry.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        },
        {
          "name": "price",
          "description": "- Order price.",
          "recommendedTypes": []
        },
        {
          "name": "fingerprint",
          "description": "- Verification info for the asset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ownerCutPerMillion()",
      "name": "ownerCutPerMillion",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createOrder(uint256,uint256,uint256)",
      "name": "createOrder",
      "description": "",
      "parameterDecorators": [
        {
          "name": "assetId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "priceInWei",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "expiresAt",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createOrder_(address,uint256,uint256,uint256)",
      "name": "createOrder_",
      "description": "Creates a new order.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "- Non fungible registry address.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        },
        {
          "name": "priceInWei",
          "description": "- Price in Wei for the supported coin.",
          "recommendedTypes": []
        },
        {
          "name": "expiresAt",
          "description": "- Duration of the order (in hours).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeDirectOrder(uint256)",
      "name": "executeDirectOrder",
      "description": "[LEGACY] Executes the sale for a published NFT.",
      "parameterDecorators": [
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "publicationFeeInWei()",
      "name": "publicationFeeInWei",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executeOrder(address,uint256,uint256)",
      "name": "executeOrder",
      "description": "Executes the sale for a published NFT.",
      "parameterDecorators": [
        {
          "name": "nftAddress",
          "description": "- Address of the NFT registry.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        },
        {
          "name": "price",
          "description": "- Order price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "path(uint256)",
      "name": "path",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setPublicationFee(uint256)",
      "name": "setPublicationFee",
      "description": "Sets the publication fee that's charged to users to publish items.",
      "parameterDecorators": [
        {
          "name": "_publicationFee",
          "description": "- Fee amount in wei this contract charges to publish an item.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "KTYburnAddress()",
      "name": "KTYburnAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "router02()",
      "name": "router02",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isMigrated(string,string)",
      "name": "isMigrated",
      "description": "Returns true if the contract migration was applied.",
      "parameterDecorators": [
        {
          "name": "contractName",
          "description": "Name of the contract.",
          "recommendedTypes": []
        },
        {
          "name": "migrationId",
          "description": "Identifier of the migration.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address)",
      "name": "initialize",
      "description": "Initialize this contract. Acts as a constructor.",
      "parameterDecorators": [
        {
          "name": "_acceptedToken",
          "description": "- Address of the ERC20 accepted for this marketplace.",
          "recommendedTypes": []
        },
        {
          "name": "_legacyNFTAddress",
          "description": "- Address of the NFT address used for legacy methods that don't have nftAddress as parameter.",
          "recommendedTypes": []
        },
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createOrderLegacy(uint256,uint256,uint256)",
      "name": "createOrderLegacy",
      "description": "[LEGACY] Creates a new order.",
      "parameterDecorators": [
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        },
        {
          "name": "priceInWei",
          "description": "- Price in Wei for the supported coin.",
          "recommendedTypes": []
        },
        {
          "name": "expiresAt",
          "description": "- Duration of the order (in hours).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "legacyNFTAddress()",
      "name": "legacyNFTAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "auctionByAssetId(uint256)",
      "name": "auctionByAssetId",
      "description": "[LEGACY] Gets an order using the legacy NFT address. It's equivalent to orderByAssetId[legacyNFTAddress][assetId] but returns same structure as the old Auction.",
      "parameterDecorators": [
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "orderByAssetId(address,uint256)",
      "name": "orderByAssetId",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "expiresAt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executeOrder(uint256,uint256)",
      "name": "executeOrder",
      "description": "[LEGACY] Executes the sale for a published NFT.",
      "parameterDecorators": [
        {
          "name": "assetId",
          "description": "- ID of the published NFT.",
          "recommendedTypes": []
        },
        {
          "name": "price",
          "description": "- Order price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to transfer control of the contract to a newOwner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}