{
  "schema": "../schema.json",
  "tags": [
    "nft"
  ],
  "name": "DigitalaxGarmentCollection",
  "description": "Collection contract for Digitalax NFTs.",
  "eventDecorators": [
    {
      "signature": "BurnGarmentCollection(uint256)",
      "name": "BurnGarmentCollection",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "collectionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DigitalaxGarmentCollectionContractDeployed()",
      "name": "DigitalaxGarmentCollectionContractDeployed",
      "description": "Event emitted only on construction. To be used by indexers. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": []
    },
    {
      "signature": "MintGarmentCollection(uint256)",
      "name": "MintGarmentCollection",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "collectionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "accessControls()",
      "name": "accessControls",
      "description": "responsible for enforcing admin access.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceOfAddress(uint256,address)",
      "name": "balanceOfAddress",
      "description": "Method for getting the NFT amount for the given address and collection id.",
      "parameterDecorators": [
        {
          "name": "_collectionId",
          "description": "Id of the collection.",
          "recommendedTypes": []
        },
        {
          "name": "_address",
          "description": "Given address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burnCollection(uint256)",
      "name": "burnCollection",
      "description": "Method for burn the NFT collection by given collection id.",
      "parameterDecorators": [
        {
          "name": "_collectionId",
          "description": "Id of the collection.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "garmentNft()",
      "name": "garmentNft",
      "description": "Garment ERC721 NFT - the only NFT that can be offered in this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCollection(uint256)",
      "name": "getCollection",
      "description": "Method for getting the collection by given collection id.",
      "parameterDecorators": [
        {
          "name": "_collectionId",
          "description": "Id of the collection.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_garmentTokenIds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_tokenUri",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "_designer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSupply(uint256)",
      "name": "getSupply",
      "description": "Method for getting max supply of the collection.",
      "parameterDecorators": [
        {
          "name": "_collectionId",
          "description": "Id of the collection.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenIds(uint256)",
      "name": "getTokenIds",
      "description": "Method for getting NFT tokenIds of the collection.",
      "parameterDecorators": [
        {
          "name": "_collectionId",
          "description": "Id of the collection.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_garmentTokenIds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasOwnedOf(uint256,address)",
      "name": "hasOwnedOf",
      "description": "Method for checking if someone owns the collection.",
      "parameterDecorators": [
        {
          "name": "_collectionId",
          "description": "Id of the collection.",
          "recommendedTypes": []
        },
        {
          "name": "_address",
          "description": "Given address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "materials()",
      "name": "materials",
      "description": "the child ERC1155 strand tokens.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxGarmentsPerCollection()",
      "name": "maxGarmentsPerCollection",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintCollection(address,string,address,uint256,uint256[],uint256[])",
      "name": "mintCollection",
      "description": "Method for mint the NFT collection with the same metadata.",
      "parameterDecorators": [
        {
          "name": "_beneficiary",
          "description": "Recipient of the NFT collection.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenUri",
          "description": "URI for the metadata.",
          "recommendedTypes": []
        },
        {
          "name": "_designer",
          "description": "Garment designer address.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "NFTs amount of the collection.",
          "recommendedTypes": []
        },
        {
          "name": "_childTokenIds",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_childTokenAmounts",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateAccessControls(address)",
      "name": "updateAccessControls",
      "description": "Method for updating the access controls contract. Only admin.",
      "parameterDecorators": [
        {
          "name": "_accessControls",
          "description": "Address of the new access controls contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateMaxGarmentsPerCollection(uint256)",
      "name": "updateMaxGarmentsPerCollection",
      "description": "Method for updating max nfts garments a collection can hold. Only admin.",
      "parameterDecorators": [
        {
          "name": "_maxGarmentsPerCollection",
          "description": "uint256 the max children a token can hold.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}