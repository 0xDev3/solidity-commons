{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "lending"
  ],
  "name": "LendingPool",
  "description": "The LendingPool contract holds all of the tokens that lenders transfer into the protocol. It is the contract that lenders interact with to deposit and withdraw their tokens including interest.",
  "eventDecorators": [
    {
      "signature": "InterestValidatorUpdated(address,address,address)",
      "name": "InterestValidatorUpdated",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldInterestValidator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newInterestValidator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "InterestWithdrawn(address,uint256)",
      "name": "InterestWithdrawn",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "lender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PaymentLiquidated(address,uint256)",
      "name": "PaymentLiquidated",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "liquidator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenDeposited(address,uint256,uint256)",
      "name": "TokenDeposited",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tTokenAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenRepaid(address,uint256)",
      "name": "TokenRepaid",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "borrower",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenWithdrawn(address,uint256,uint256)",
      "name": "TokenWithdrawn",
      "description": "Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tTokenAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "EXCHANGE_RATE_DECIMALS()",
      "name": "EXCHANGE_RATE_DECIMALS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cToken()",
      "name": "cToken",
      "description": "Returns the cToken in the lending pool.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createLoan(uint256,address)",
      "name": "createLoan",
      "description": "Once the loan is created, it transfers the amount of tokens to the borrower. This function only can be invoked by the LoansInterface implementation.It withdraws the lending tokens from Compound before transferring tokens to the borrower.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "of tokens to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "address which will receive the tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(uint256)",
      "name": "deposit",
      "description": "It allows users to deposit tokens into the pool. the user must call ERC20.approve function previously.If the cToken is available (not 0x0), it deposits the lending token amount into Compound directly.",
      "parameterDecorators": [
        {
          "name": "lendingTokenAmount",
          "description": "of tokens to deposit in the pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchangeRate()",
      "name": "exchangeRate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDebtRatioFor(uint256)",
      "name": "getDebtRatioFor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "loanAmount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMarketState()",
      "name": "getMarketState",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "totalSupplied",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "totalRepaid",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "totalBorrowed",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize()",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address,address,address,address)",
      "name": "initialize",
      "description": "It initializes the contract state variables. It throws a require error if the contract is already initialized.",
      "parameterDecorators": [
        {
          "name": "tTokenAddress",
          "description": "tToken token address.",
          "recommendedTypes": []
        },
        {
          "name": "lendingTokenAddress",
          "description": "ERC20 token address.",
          "recommendedTypes": []
        },
        {
          "name": "loansAddress",
          "description": "Loans contract address.",
          "recommendedTypes": []
        },
        {
          "name": "settingsAddress",
          "description": "Settings contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "Gets if the contract is initialized.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lendingToken()",
      "name": "lendingToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidationPayment(uint256,address)",
      "name": "liquidationPayment",
      "description": "Once a loan is liquidated, it transfers tokens from the liquidator to the lending pool.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "of tokens to liquidate.",
          "recommendedTypes": []
        },
        {
          "name": "liquidator",
          "description": "address used to liquidate the loan.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "loans()",
      "name": "loans",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "repay(uint256,uint256,address)",
      "name": "repay",
      "description": "It allows a borrower repaying their loan. This function can be called ONLY by the Loans contract.It requires a ERC20.approve call before calling it.It throws a require error if borrower called ERC20.approve function before calling it.",
      "parameterDecorators": [
        {
          "name": "principalAmount",
          "description": "amount of tokens towards the principal.",
          "recommendedTypes": []
        },
        {
          "name": "interestAmount",
          "description": "amount of tokens towards the interest.",
          "recommendedTypes": []
        },
        {
          "name": "borrower",
          "description": "address that is repaying the loan.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settings()",
      "name": "settings",
      "description": "The gets the settings contract address from the SETTINGS_SLOT. This address should NOT change over the time. See details in the _setSettings(...) function.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tToken()",
      "name": "tToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "It allows any tToken holder to burn their tToken tokens and withdraw their tokens. If the cToken is available (not 0x0), it withdraws the lending tokens from Compound before transferring the tokens to the holder.",
      "parameterDecorators": [
        {
          "name": "lendingTokenAmount",
          "description": "of tokens to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAll()",
      "name": "withdrawAll",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}