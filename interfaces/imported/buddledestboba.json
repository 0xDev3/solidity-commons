{
  "schema": "../schema.json",
  "tags": [],
  "name": "BuddleDestBoba",
  "description": "",
  "eventDecorators": [
    {
      "signature": "LiquidityOwnerChanged(uint256,uint256,address,address)",
      "name": "LiquidityOwnerChanged",
      "description": "Emitted upon migration.",
      "parameterDecorators": [
        {
          "name": "sourceChain",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "transferID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted upon migration.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RootApproved(uint256,bytes32)",
      "name": "RootApproved",
      "description": "Emitted upon migration.",
      "parameterDecorators": [
        {
          "name": "sourceChain",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "stateRoot",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransferCompleted(tuple,uint256,uint256,address)",
      "name": "TransferCompleted",
      "description": "Emitted upon migration.",
      "parameterDecorators": [
        {
          "name": "transferData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "transferID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sourceChain",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidityProvider",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WithdrawalEvent(tuple,uint256,uint256,address)",
      "name": "WithdrawalEvent",
      "description": "Emitted upon migration.",
      "parameterDecorators": [
        {
          "name": "transferData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "transferID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sourceChain",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "claimer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "BASE_TOKEN_ADDRESS()",
      "name": "BASE_TOKEN_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "VERSION()",
      "name": "VERSION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "approveStateRoot(uint256,bytes32)",
      "name": "approveStateRoot",
      "description": "Approve a new root for an incoming transferonly the Buddle Bridge contract on Layer 1 can call this method.",
      "parameterDecorators": [
        {
          "name": "sourceChain",
          "description": "The chain id of the blockchain where the root originated.",
          "recommendedTypes": []
        },
        {
          "name": "stateRoot",
          "description": "The state root to be approved.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buddleBridge()",
      "name": "buddleBridge",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeOwner(tuple(address,address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,address)",
      "name": "changeOwner",
      "description": "A valid liquidity owner for a transferID may change the owner if desired.",
      "parameterDecorators": [
        {
          "name": "_data",
          "description": "The transfer data corresponding to the transfer id.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenAddress",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "destination",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "fee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "startTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "feeRampup",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "chain",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_transferID",
          "description": "The transfer ID corresponding to the transfer data.",
          "recommendedTypes": []
        },
        {
          "name": "sourceChain",
          "description": "The chain id of the blockchain where the transfer originated.",
          "recommendedTypes": []
        },
        {
          "name": "_owner",
          "description": "The new owner for the transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(tuple(address,address,uint256,uint256,uint256,uint256,uint256),uint256,uint256)",
      "name": "deposit",
      "description": "Deposit funds into the contract to transfer to the destination of the transfer. If no owner exists, anyone may call this function to complete a transfer and claim ownership of the LP fee.",
      "parameterDecorators": [
        {
          "name": "transferData",
          "description": "Transfer Data of the transfer emitted under TransferEvent.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenAddress",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "destination",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "fee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "startTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "feeRampup",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "chain",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "transferID",
          "description": "Transfer ID of the transfer emitted under TransferEvent.",
          "recommendedTypes": []
        },
        {
          "name": "sourceChain",
          "description": "The chain ID for the source blockchain of transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(bytes32,address)",
      "name": "initialize",
      "description": "Initialize the contract with state variables.",
      "parameterDecorators": [
        {
          "name": "_version",
          "description": "Contract version.",
          "recommendedTypes": []
        },
        {
          "name": "_buddleBridge",
          "description": "Buddle Bridge contract on Layer-1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "liquidityOwners(uint256,uint256)",
      "name": "liquidityOwners",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "messenger()",
      "name": "messenger",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setXDomainMessenger(address)",
      "name": "setXDomainMessenger",
      "description": "Change the layer-2 cross domain messenger.",
      "parameterDecorators": [
        {
          "name": "_messenger",
          "description": "Layer-2 Cross Domain messenger contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferFee(uint256,uint256)",
      "name": "transferFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateBuddleBridge(address)",
      "name": "updateBuddleBridge",
      "description": "Change the buddle bridge address.",
      "parameterDecorators": [
        {
          "name": "_newBridgeAddress",
          "description": "new bridge address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateXDomainMessenger(address)",
      "name": "updateXDomainMessenger",
      "description": "Change the layer-2 cross domain messenger.",
      "parameterDecorators": [
        {
          "name": "_newMessenger",
          "description": "Layer-2 Cross Domain messenger contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(tuple(address,address,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes32,bytes32[],bytes32)",
      "name": "withdraw",
      "description": "This function is called under two cases, (i) A LP calls this function after funds have been bridged (ii) If no LP exists, the destination of the transfer calls this to claim bridged funds.",
      "parameterDecorators": [
        {
          "name": "transferData",
          "description": "Transfer Data of the transfer emitted under TransferCreated event.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "tokenAddress",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "destination",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "fee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "startTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "feeRampup",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "chain",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "transferID",
          "description": "Transfer ID of the transfer emitted under TransferCreated event.",
          "recommendedTypes": []
        },
        {
          "name": "sourceChain",
          "description": "The chain ID for the source blockchain of transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_node",
          "description": "Hash of the transfer data emitted under TransferCreated event.",
          "recommendedTypes": []
        },
        {
          "name": "_proof",
          "description": "Path from node to root. Should be calculated offline.",
          "recommendedTypes": []
        },
        {
          "name": "_root",
          "description": "State root emitted under TicketCreated event.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}