{"schema":"../schema.json","tags":[],"name":"StakingPool","description":"","eventDecorators":[{"signature":"CapperAdded(address)","name":"CapperAdded","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"CapperRemoved(address)","name":"CapperRemoved","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"CoeffScoreUpdated(uint256)","name":"CoeffScoreUpdated","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"coeff","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"DefaultUserCapChanged(uint256)","name":"DefaultUserCapChanged","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"newCap","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"PoolAddressChanged(address)","name":"PoolAddressChanged","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"newPool","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RewardDistributionCreated(address,uint256,uint256)","name":"RewardDistributionCreated","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"totalShares","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RewardTokenRegistered(address)","name":"RewardTokenRegistered","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RewardWithdraw(address,address,uint256)","name":"RewardWithdraw","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"rewardToken","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Staked(address,uint256,uint256,bytes)","name":"Staked","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"totalStacked","description":"","recommendedTypes":[],"indexed":false},{"name":"data","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"StakingCapChanged(uint256)","name":"StakingCapChanged","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"newCap","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"StakingCapEnabledChange(bool)","name":"StakingCapEnabledChange","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"enabled","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unstaked(address,uint256,uint256,bytes)","name":"Unstaked","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"totalStacked","description":"","recommendedTypes":[],"indexed":false},{"name":"data","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"UserCapChanged(address,uint256)","name":"UserCapChanged","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"newCap","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"UserCapEnabledChange(bool)","name":"UserCapEnabledChange","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"enabled","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"VipUserChanged(address,bool)","name":"VipUserChanged","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"isVip","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"VipUserEnabledChange(bool)","name":"VipUserEnabledChange","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"enabled","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"setLockInDuration(uint256)","name":"setLockInDuration","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"defaultLockInDuration","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"addCapper(address)","name":"addCapper","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"claimRewardsFromVesting()","name":"claimRewardsFromVesting","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"coeffScore()","name":"coeffScore","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"defaultLockInDuration()","name":"defaultLockInDuration","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"defaultUserCap()","name":"defaultUserCap","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getModuleAddress(string)","name":"getModuleAddress","description":"","parameterDecorators":[{"name":"module","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getPersonalStakeActualAmounts(address)","name":"getPersonalStakeActualAmounts","description":"Returns the stake actualAmount for active personal stakes for an addressThese accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved.","parameterDecorators":[{"name":"_address","description":"address that created the stakes.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getPersonalStakeForAddresses(address)","name":"getPersonalStakeForAddresses","description":"Returns the addresses that each personal stake was created for by an addressThese accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved.","parameterDecorators":[{"name":"_address","description":"address that created the stakes.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getPersonalStakeTotalAmount(address)","name":"getPersonalStakeTotalAmount","description":"","parameterDecorators":[{"name":"_address","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getPersonalStakeUnlockedTimestamps(address)","name":"getPersonalStakeUnlockedTimestamps","description":"Returns the timestamps for when active personal stakes for an address will unlockThese accessors functions are needed until https://github.com/ethereum/web3.js/issues/1241 is solved.","parameterDecorators":[{"name":"_address","description":"address that created the stakes.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getPersonalStakes(address)","name":"getPersonalStakes","description":"Helper function to get specific properties of all of the personal stakes created by an address.","parameterDecorators":[{"name":"_address","description":"address The address to query.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256[]"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"iStakingCapEnabled()","name":"iStakingCapEnabled","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,address,uint256)","name":"initialize","description":"","parameterDecorators":[{"name":"_pool","description":"","recommendedTypes":[]},{"name":"_stakingToken","description":"","recommendedTypes":[]},{"name":"_defaultLockInDuration","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialize()","name":"initialize","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialize(address)","name":"initialize","description":"","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isCapper(address)","name":"isCapper","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isRegisteredRewardToken(address)","name":"isRegisteredRewardToken","description":"","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isUserCapEnabled()","name":"isUserCapEnabled","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isVipUser(address)","name":"isVipUser","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pool()","name":"pool","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"registerRewardToken(address)","name":"registerRewardToken","description":"","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceCapper()","name":"renounceCapper","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"rewardBalanceOf(address,address)","name":"rewardBalanceOf","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[]},{"name":"token","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rewardVesting()","name":"rewardVesting","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"setCoeffScore(uint256)","name":"setCoeffScore","description":"","parameterDecorators":[{"name":"coeff","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDefaultLockInDuration(uint256)","name":"setDefaultLockInDuration","description":"","parameterDecorators":[{"name":"_defaultLockInDuration","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDefaultUserCap(uint256)","name":"setDefaultUserCap","description":"","parameterDecorators":[{"name":"_newCap","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPool(address)","name":"setPool","description":"","parameterDecorators":[{"name":"_pool","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRewardVesting(address)","name":"setRewardVesting","description":"","parameterDecorators":[{"name":"_rewardVesting","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setStakingCap(uint256)","name":"setStakingCap","description":"","parameterDecorators":[{"name":"_newCap","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setStakingCapEnabled(bool)","name":"setStakingCapEnabled","description":"","parameterDecorators":[{"name":"_stakingCapEnabled","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setUserCap(address,uint256)","name":"setUserCap","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[]},{"name":"cap","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setUserCap(address[],uint256[])","name":"setUserCap","description":"","parameterDecorators":[{"name":"users","description":"","recommendedTypes":[]},{"name":"caps","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setUserCapEnabled(bool)","name":"setUserCapEnabled","description":"","parameterDecorators":[{"name":"_userCapEnabled","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setVipUser(address,bool)","name":"setVipUser","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[]},{"name":"isVip","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setVipUserEnabled(bool)","name":"setVipUserEnabled","description":"","parameterDecorators":[{"name":"_vipUserEnabled","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"stake(uint256,bytes)","name":"stake","description":"Stakes a certain amount of tokens, this MUST transfer the given amount from the userMUST trigger Staked event.","parameterDecorators":[{"name":"_amount","description":"uint256 the amount of tokens to stake.","recommendedTypes":[]},{"name":"_data","description":"bytes optional data to include in the Stake event.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"stakeFor(address,uint256,bytes)","name":"stakeFor","description":"Stakes a certain amount of tokens, this MUST transfer the given amount from the callerMUST trigger Staked event.","parameterDecorators":[{"name":"_user","description":"address the address the tokens are staked for.","recommendedTypes":[]},{"name":"_amount","description":"uint256 the amount of tokens to stake.","recommendedTypes":[]},{"name":"_data","description":"bytes optional data to include in the Stake event.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"stakeHolders(address)","name":"stakeHolders","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"totalStakedFor","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"personalStakeIndex","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"exists","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"stakingCap()","name":"stakingCap","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"stakingCapEnabled()","name":"stakingCapEnabled","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"supportedRewardTokens()","name":"supportedRewardTokens","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"supportsHistory()","name":"supportsHistory","description":"MUST return true if the optional history functions are implemented, otherwise false. Since we don't implement the optional interface, this always returns false.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"token()","name":"token","description":"Address of the token being used by the staking interface.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"totalScoresFor(address)","name":"totalScoresFor","description":"Returns the current total of tokens staked for an address.","parameterDecorators":[{"name":"_address","description":"address The address to query.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"totalStaked()","name":"totalStaked","description":"Returns the current total of tokens staked.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"totalStakedFor(address)","name":"totalStakedFor","description":"Returns the current total of tokens staked for an address.","parameterDecorators":[{"name":"_address","description":"address The address to query.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unstake(uint256,bytes)","name":"unstake","description":"Unstakes a certain amount of tokens, this SHOULD return the given amount of tokens to the user, if unstaking is currently not possible the function MUST revertMUST trigger Unstaked event. Unstaking tokens is an atomic operationвЂ”either all of the tokens in a stake, or none of the tokens.Users can only unstake a single stake at a time, it is must be their oldest active stake. Upon releasing that stake, the tokens will be transferred back to their account, and their personalStakeIndex will increment to the next active stake.","parameterDecorators":[{"name":"_amount","description":"uint256 the amount of tokens to unstake.","recommendedTypes":[]},{"name":"_data","description":"bytes optional data to include in the Unstake event.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unstakeAllUnlocked(bytes)","name":"unstakeAllUnlocked","description":"","parameterDecorators":[{"name":"_data","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"userCap(address)","name":"userCap","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"userCapEnabled()","name":"userCapEnabled","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"vipUserEnabled()","name":"vipUserEnabled","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"withdrawRewards()","name":"withdrawRewards","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":false},{"signature":"withdrawRewardsFor(address,address)","name":"withdrawRewardsFor","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[]},{"name":"rewardToken","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false}]}