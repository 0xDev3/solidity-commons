{
  "schema": "../schema.json",
  "tags": [
    "staking"
  ],
  "name": "RelayRegistrar",
  "description": "The RelayRegistrar Implementation. Keeps a list of registered relayers.Provides view functions to read the list of registered relayers and filters out invalid ones.Protects the list from spamming entries: only staked relayers are added.",
  "eventDecorators": [
    {
      "signature": "RelayServerRegistered(address,address,uint256,uint256,bytes32[3])",
      "name": "RelayServerRegistered",
      "description": "Emitted when a relay server registers or updates its details. Looking up these events allows a client to discover registered Relay Servers.",
      "parameterDecorators": [
        {
          "name": "relayManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "relayHub",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "baseRelayFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "pctRelayFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "relayUrl",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "getCreationBlock()",
      "name": "getCreationBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The block number in which the contract has been deployed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRelayInfo(address,address)",
      "name": "getRelayInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "relayHub",
          "description": "The address of the `RelayHub` contract for which this action is performed.",
          "recommendedTypes": []
        },
        {
          "name": "relayManager",
          "description": "An address of a Relay Manager.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "All the details of the given Relay Manager's registration. Throws if relay not found for `RelayHub`.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "lastSeenBlockNumber",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "lastSeenTimestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint40"
            },
            {
              "name": "firstSeenBlockNumber",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "firstSeenTimestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint40"
            },
            {
              "name": "baseRelayFee",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint80"
            },
            {
              "name": "pctRelayFee",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint16"
            },
            {
              "name": "urlParts",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32[3]"
            },
            {
              "name": "relayManager",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "readRelayInfos(address,uint256,uint256,uint256)",
      "name": "readRelayInfos",
      "description": "Read relay info of registered Relay Server from an on-chain storage.",
      "parameterDecorators": [
        {
          "name": "relayHub",
          "description": "The address of the `RelayHub` contract for which this action is performed.",
          "recommendedTypes": []
        },
        {
          "name": "oldestBlockNumber",
          "description": "The latest block number in which a Relay Server may be registered.",
          "recommendedTypes": []
        },
        {
          "name": "oldestBlockTimestamp",
          "description": "The latest block timestamp in which a Relay Server may be registered.",
          "recommendedTypes": []
        },
        {
          "name": "maxCount",
          "description": "The maximum amount of relays to be returned by this function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "info",
          "description": "The list of `RelayInfo`s of registered Relay Servers.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "lastSeenBlockNumber",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "lastSeenTimestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint40"
            },
            {
              "name": "firstSeenBlockNumber",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "firstSeenTimestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint40"
            },
            {
              "name": "baseRelayFee",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint80"
            },
            {
              "name": "pctRelayFee",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint16"
            },
            {
              "name": "urlParts",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32[3]"
            },
            {
              "name": "relayManager",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registerRelayServer(address,uint80,uint16,bytes32[3])",
      "name": "registerRelayServer",
      "description": "This function is called by Relay Servers in order to register or to update their registration.",
      "parameterDecorators": [
        {
          "name": "relayHub",
          "description": "The address of the `RelayHub` contract for which this action is performed.",
          "recommendedTypes": []
        },
        {
          "name": "baseRelayFee",
          "description": "The base fee the Relay Server charges for a single transaction in Ether, in wei.",
          "recommendedTypes": []
        },
        {
          "name": "pctRelayFee",
          "description": "The percent of the total charge to add as a Relay Server fee to the total charge.",
          "recommendedTypes": []
        },
        {
          "name": "url",
          "description": "The URL of the Relay Server that is listening to the clients' requests.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}