{
  "schema": "../schema.json",
  "tags": [
    "oracles"
  ],
  "name": "OracleRootTunnel",
  "description": "Adapter deployed on mainnet that validates and sends price requests from sidechain to the DVM on mainnet. This contract must be a registered financial contract in order to make DVM price requests.",
  "eventDecorators": [
    {
      "signature": "PriceRequestAdded(bytes32,uint256,bytes,bytes32)",
      "name": "PriceRequestAdded",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "time",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ancillaryData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "requestHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PushedPrice(bytes32,uint256,bytes,int256,bytes32)",
      "name": "PushedPrice",
      "description": "Emitted when the owner withdraw tokens.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "time",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ancillaryData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "requestHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "SEND_MESSAGE_EVENT_SIG()",
      "name": "SEND_MESSAGE_EVENT_SIG",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ancillaryBytesLimit()",
      "name": "ancillaryBytesLimit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkpointManager()",
      "name": "checkpointManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "finder()",
      "name": "finder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fxChildTunnel()",
      "name": "fxChildTunnel",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fxRoot()",
      "name": "fxRoot",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "processedExits(bytes32)",
      "name": "processedExits",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "publishPrice(bytes32,uint256,bytes)",
      "name": "publishPrice",
      "description": "This is the first method that should be called in order to publish a price request to the sidechain. Publishes the DVM resolved price for the price request, or reverts if not resolved yet. This contract must be registered with the DVM to query price requests.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "Identifier of price request to resolve.",
          "recommendedTypes": []
        },
        {
          "name": "time",
          "description": "Timestamp of price request to resolve.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "extra data of price request to resolve.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "receiveMessage(bytes)",
      "name": "receiveMessage",
      "description": "receive message from L2 to L1, validated by proof. This function verifies if the transaction actually happened on child chain.",
      "parameterDecorators": [
        {
          "name": "inputData",
          "description": "RLP encoded data of the reference tx containing following list of fields 0 - headerNumber - Checkpoint header block number containing the reference tx 1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root 2 - blockNumber - Block number containing the reference tx on child chain 3 - blockTime - Reference tx block time 4 - txRoot - Transactions root of block 5 - receiptRoot - Receipts root of block 6 - receipt - Receipt of the reference transaction 7 - receiptProof - Merkle proof of the reference receipt 8 - branchMask - 32 bits denoting the path of receipt in merkle tree 9 - receiptLogIndex - Log Index to read from the receipt.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFxChildTunnel(address)",
      "name": "setFxChildTunnel",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_fxChildTunnel",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}