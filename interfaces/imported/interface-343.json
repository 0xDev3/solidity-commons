{
  "schema": "../schema.json",
  "tags": [
    "locking"
  ],
  "name": "KittyCore",
  "description": "CryptoKitties: Collectible, breedable, and oh-so-adorable cats on the Ethereum blockchain.",
  "eventDecorators": [
    {
      "signature": "Pregnant(address,uint256,uint256,uint256)",
      "name": "Pregnant",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "matronId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sireId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cooldownEndBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Transfer(address,address,uint256)",
      "name": "Transfer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "access",
          "description": "TRUE if the Watcher was given permissions, FALSE if permissions were removed.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "watcher",
          "description": "the address of the Watcher.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Approval(address,address,uint256)",
      "name": "Approval",
      "description": "",
      "parameterDecorators": [
        {
          "name": "access",
          "description": "TRUE if the Watcher was given permissions, FALSE if permissions were removed.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "watcher",
          "description": "the address of the Watcher.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Birth(address,uint256,uint256,uint256,uint256)",
      "name": "Birth",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "kittyId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "matronId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sireId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "genes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ContractUpgrade(address)",
      "name": "ContractUpgrade",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165). Returns true for any standardized interfaces implemented by this contract. We implement ERC-165 (obviously!) and ERC-721.",
      "parameterDecorators": [
        {
          "name": "_interfaceID",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cfoAddress()",
      "name": "cfoAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenMetadata(uint256,string)",
      "name": "tokenMetadata",
      "description": "Returns a URI pointing to a metadata package for this token conforming to ERC-721 (https://github.com/ethereum/EIPs/issues/721).",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "The ID number of the Kitty whose metadata should be returned.",
          "recommendedTypes": []
        },
        {
          "name": "_preferredTransport",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "infoUrl",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "promoCreatedCount()",
      "name": "promoCreatedCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "name()",
      "name": "name",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "approve(address,uint256)",
      "name": "approve",
      "description": "Grant another address the right to transfer a specific Kitty via transferFrom(). This is the preferred flow for transfering NFTs to contracts. Required for ERC-721 compliance.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "The address to be granted transfer approval. Pass address(0) to clear all approvals.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenId",
          "description": "The ID of the Kitty that can be transferred if this call succeeds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ceoAddress()",
      "name": "ceoAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "GEN0_STARTING_PRICE()",
      "name": "GEN0_STARTING_PRICE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setSiringAuctionAddress(address)",
      "name": "setSiringAuctionAddress",
      "description": "Sets the reference to the siring auction.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "- Address of siring contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalSupply()",
      "name": "totalSupply",
      "description": "Returns the total number of Kitties currently in existence. Required for ERC-721 compliance.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pregnantKitties()",
      "name": "pregnantKitties",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPregnant(uint256)",
      "name": "isPregnant",
      "description": "Checks whether a kitty is currently pregnant.",
      "parameterDecorators": [
        {
          "name": "_kittyId",
          "description": "reference the id of the kitten, any user can inquire about it.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "GEN0_AUCTION_DURATION()",
      "name": "GEN0_AUCTION_DURATION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "siringAuction()",
      "name": "siringAuction",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferFrom(address,address,uint256)",
      "name": "transferFrom",
      "description": "Transfer a Kitty owned by another address, for which the calling address has previously been granted transfer approval by the owner. Required for ERC-721 compliance.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "The address that owns the Kitty to be transfered.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "The address that should take ownership of the Kitty. Can be any address, including the caller.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenId",
          "description": "The ID of the Kitty to be transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGeneScienceAddress(address)",
      "name": "setGeneScienceAddress",
      "description": "Update the address of the genetic contract, can only be called by the CEO.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "An address of a GeneScience contract instance to be used from this point forward.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCEO(address)",
      "name": "setCEO",
      "description": "Assigns a new address to act as the CEO. Only available to the current CEO.",
      "parameterDecorators": [
        {
          "name": "_newCEO",
          "description": "The address of the new CEO.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCOO(address)",
      "name": "setCOO",
      "description": "Assigns a new address to act as the COO. Only available to the current CEO.",
      "parameterDecorators": [
        {
          "name": "_newCOO",
          "description": "The address of the new COO.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createSaleAuction(uint256,uint256,uint256,uint256)",
      "name": "createSaleAuction",
      "description": "Put a kitty up for auction. Does some ownership trickery to create auctions in one tx.",
      "parameterDecorators": [
        {
          "name": "_kittyId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_startingPrice",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_endingPrice",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_duration",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "This is public rather than external so we can call super.unpause without using an expensive CALL. Override unpause so it requires all external contract addresses to be set before contract can be unpaused. Also, we can't have newContractAddress set either, because then the contract was upgraded.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sireAllowedToAddress(uint256)",
      "name": "sireAllowedToAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "canBreedWith(uint256,uint256)",
      "name": "canBreedWith",
      "description": "Checks to see if two cats can breed together, including checks for ownership and siring approvals. Does NOT check that both cats are ready for breeding (i.e. breedWith could still fail until the cooldowns are finished). TODO: Shouldn't this check pregnancy and cooldowns?!?.",
      "parameterDecorators": [
        {
          "name": "_matronId",
          "description": "The ID of the proposed matron.",
          "recommendedTypes": []
        },
        {
          "name": "_sireId",
          "description": "The ID of the proposed sire.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "kittyIndexToApproved(uint256)",
      "name": "kittyIndexToApproved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createSiringAuction(uint256,uint256,uint256,uint256)",
      "name": "createSiringAuction",
      "description": "Put a kitty up for auction to be sire. Performs checks to ensure the kitty can be sired, then delegates to reverse auction.",
      "parameterDecorators": [
        {
          "name": "_kittyId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_startingPrice",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_endingPrice",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_duration",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAutoBirthFee(uint256)",
      "name": "setAutoBirthFee",
      "description": "Updates the minimum payment required for calling giveBirthAuto(). Can only be called by the COO address. (This fee is used to offset the gas cost incurred by the autobirth daemon).",
      "parameterDecorators": [
        {
          "name": "val",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveSiring(address,uint256)",
      "name": "approveSiring",
      "description": "Grants approval to another user to sire with one of your Kitties.",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "The address that will be able to sire with your Kitty. Set to address(0) to clear all siring approvals for this Kitty.",
          "recommendedTypes": []
        },
        {
          "name": "_sireId",
          "description": "A Kitty that you own that _addr will now be able to sire with.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCFO(address)",
      "name": "setCFO",
      "description": "Assigns a new address to act as the CFO. Only available to the current CEO.",
      "parameterDecorators": [
        {
          "name": "_newCFO",
          "description": "The address of the new CFO.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createPromoKitty(uint256,address)",
      "name": "createPromoKitty",
      "description": "we can create promo kittens, up to a limit. Only callable by COO.",
      "parameterDecorators": [
        {
          "name": "_genes",
          "description": "the encoded genes of the kitten to be created, any value is accepted.",
          "recommendedTypes": []
        },
        {
          "name": "_owner",
          "description": "the future owner of the created kittens. Default to contract COO.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSecondsPerBlock(uint256)",
      "name": "setSecondsPerBlock",
      "description": "",
      "parameterDecorators": [
        {
          "name": "secs",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawBalance()",
      "name": "withdrawBalance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ownerOf(uint256)",
      "name": "ownerOf",
      "description": "Returns the address currently assigned ownership of a given Kitty. Required for ERC-721 compliance.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "GEN0_CREATION_LIMIT()",
      "name": "GEN0_CREATION_LIMIT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newContractAddress()",
      "name": "newContractAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setSaleAuctionAddress(address)",
      "name": "setSaleAuctionAddress",
      "description": "Sets the reference to the sale auction.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "- Address of sale contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "balanceOf(address)",
      "name": "balanceOf",
      "description": "Returns the number of Kitties owned by a specific address. Required for ERC-721 compliance.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "The owner address to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setNewAddress(address)",
      "name": "setNewAddress",
      "description": "Used to mark the smart contract as upgraded, in case there is a serious breaking bug. This method does nothing but keep track of the new contract and emit a message indicating that the new address is set. It's up to clients of this contract to update to the new contract address in that case. (This contract will be paused indefinitely if such an upgrade takes place.).",
      "parameterDecorators": [
        {
          "name": "_v2Address",
          "description": "new address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "secondsPerBlock()",
      "name": "secondsPerBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Called by any \"C-level\" role to pause the contract. Used only when a bug or exploit is detected and we need to limit damage.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokensOfOwner(address)",
      "name": "tokensOfOwner",
      "description": "Returns a list of all Kitty IDs assigned to an address. This method MUST NEVER be called by smart contract code. First, it's fairly expensive (it walks the entire Kitty array looking for cats belonging to owner), but it also returns a dynamic array, which is only supported for web3 calls, and not contract-to-contract calls.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "The owner whose Kitties we are interested in.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "ownerTokens",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "giveBirth(uint256)",
      "name": "giveBirth",
      "description": "Have a pregnant Kitty give birth!. Looks at a given Kitty and, if pregnant and if the gestation period has passed, combines the genes of the two parents to create a new kitten. The new Kitty is assigned to the current owner of the matron. Upon successful completion, both the matron and the new kitten will be ready to breed again. Note that anyone can call this function (if they are willing to pay the gas!), but the new kitten always goes to the mother's owner.",
      "parameterDecorators": [
        {
          "name": "_matronId",
          "description": "A Kitty ready to give birth.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAuctionBalances()",
      "name": "withdrawAuctionBalances",
      "description": "Transfers the balance of the sale auction contract to the KittyCore contract. We use two-step withdrawal to prevent two transfer calls in the auction bid function.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "symbol()",
      "name": "symbol",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cooldowns(uint256)",
      "name": "cooldowns",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "kittyIndexToOwner(uint256)",
      "name": "kittyIndexToOwner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transfer(address,uint256)",
      "name": "transfer",
      "description": "Transfers a Kitty to another address. If transferring to a smart contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or CryptoKitties specifically) or your Kitty may be lost forever. Seriously. Required for ERC-721 compliance.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "The address of the recipient, can be a user or contract.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenId",
          "description": "The ID of the Kitty to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cooAddress()",
      "name": "cooAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "autoBirthFee()",
      "name": "autoBirthFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "erc721Metadata()",
      "name": "erc721Metadata",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createGen0Auction(uint256)",
      "name": "createGen0Auction",
      "description": "Creates a new gen0 kitty with the given genes and creates an auction for it.",
      "parameterDecorators": [
        {
          "name": "_genes",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenURI(uint256)",
      "name": "tokenURI",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isReadyToBreed(uint256)",
      "name": "isReadyToBreed",
      "description": "Checks that a given kitten is able to breed (i.e. it is not pregnant or in the middle of a siring cooldown).",
      "parameterDecorators": [
        {
          "name": "_kittyId",
          "description": "reference the id of the kitten, any user can inquire about it.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PROMO_CREATION_LIMIT()",
      "name": "PROMO_CREATION_LIMIT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setMetadataAddress(address)",
      "name": "setMetadataAddress",
      "description": "Set the address of the sibling contract that tracks metadata. CEO only.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "saleAuction()",
      "name": "saleAuction",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getKitty(uint256)",
      "name": "getKitty",
      "description": "Returns all the relevant information about a specific kitty.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "The ID of the kitty of interest.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isGestating",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "isReady",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "cooldownIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "nextActionAt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "siringWithId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "birthTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "matronId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "sireId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "generation",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "genes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bidOnSiringAuction(uint256,uint256)",
      "name": "bidOnSiringAuction",
      "description": "Completes a siring auction by bidding. Immediately breeds the winning matron with the sire on auction.",
      "parameterDecorators": [
        {
          "name": "_sireId",
          "description": "- ID of the sire on auction.",
          "recommendedTypes": []
        },
        {
          "name": "_matronId",
          "description": "- ID of the matron owned by the bidder.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "gen0CreatedCount()",
      "name": "gen0CreatedCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "geneScience()",
      "name": "geneScience",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "breedWithAuto(uint256,uint256)",
      "name": "breedWithAuto",
      "description": "Breed a Kitty you own (as matron) with a sire that you own, or for which you have previously been given Siring approval. Will either make your cat pregnant, or will fail entirely. Requires a pre-payment of the fee given out to the first caller of giveBirth().",
      "parameterDecorators": [
        {
          "name": "_matronId",
          "description": "The ID of the Kitty acting as matron (will end up pregnant if successful).",
          "recommendedTypes": []
        },
        {
          "name": "_sireId",
          "description": "The ID of the Kitty acting as sire (will begin its siring cooldown if successful).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}