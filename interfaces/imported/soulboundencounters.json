{"schema":"../schema.json","tags":[],"name":"SoulboundEncounters","description":"","eventDecorators":[{"signature":"AdminChanged(address,address)","name":"AdminChanged","description":"","parameterDecorators":[{"name":"previousAdmin","description":"","recommendedTypes":[],"indexed":false},{"name":"newAdmin","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"BeaconUpgraded(address)","name":"BeaconUpgraded","description":"","parameterDecorators":[{"name":"beacon","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Initialized(uint8)","name":"Initialized","description":"","parameterDecorators":[{"name":"version","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Transfer(address,address,uint256)","name":"Transfer","description":"","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"tokenId","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Upgraded(address)","name":"Upgraded","description":"","parameterDecorators":[{"name":"implementation","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"balanceOf(address)","name":"balanceOf","description":"Count all ABTs assigned to an owner. ABTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.","parameterDecorators":[{"name":"owner","description":"An address for whom to query the balance.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The number of ABTs owned by `address owner`, possibly zero.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"give(address,string,bytes)","name":"give","description":"Creates and transfers the ownership of an ABT from the transaction's `msg.sender` to `address to`. Throws unless `bytes signature` represents an EIP-2089 Compact Signature of the EIP-712 structured data hash `Agreement(address active,address passive,string tokenURI)` expressing `address to`'s explicit agreement to be publicly associated with `msg.sender` and `string tokenURI`. A unique `uint256 tokenId` must be generated by type-casting the `bytes32` EIP-712 structured data hash to a `uint256`. If `bytes signature` is empty or `address to` is a contract, an EIP-1271-compatible call to `function isValidSignatureNow(...)` must be made to `address to`. A successful execution must result in the `event Transfer(msg.sender, to, tokenId)`. Once an ABT exists as an `uint256 tokenId` in the contract, `function give(...)` must throw.","parameterDecorators":[{"name":"to","description":"The receiver of the ABT.","recommendedTypes":[]},{"name":"uri","description":"A distinct Uniform Resource Identifier (URI) for a given ABT.","recommendedTypes":[]},{"name":"signature","description":"A EIP-2089-compatible Compact Signature of the EIP-712 structured data hash `Agreement(address active,address passive,string tokenURI)` signed by `address to`.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"A unique `uint256 tokenId` generated by type-casting the `bytes32` EIP-712 structured data hash to a `uint256`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"initialize(string,string,string)","name":"initialize","description":"","parameterDecorators":[{"name":"initialName","description":"","recommendedTypes":[]},{"name":"initialSymbol","description":"","recommendedTypes":[]},{"name":"initialVersion","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"name()","name":"name","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"ownerOf(uint256)","name":"ownerOf","description":"Find the address bound to an ERC4973 account-bound token. ABTs assigned to zero address are considered invalid, and queries about them do throw.","parameterDecorators":[{"name":"tokenId","description":"The identifier for an ABT.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The address of the owner bound to the ABT.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"proxiableUUID()","name":"proxiableUUID","description":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"","parameterDecorators":[{"name":"_interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"symbol()","name":"symbol","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"take(address,string,bytes)","name":"take","description":"Creates and transfers the ownership of an ABT from an `address from` to the transaction's `msg.sender`. Throws unless `bytes signature` represents an EIP-2089 Compact Signature of the EIP-712 structured data hash `Agreement(address active,address passive,string tokenURI)` expressing `address from`'s explicit agreement to be publicly associated with `msg.sender` and `string tokenURI`. A unique `uint256 tokenId` must be generated by type-casting the `bytes32` EIP-712 structured data hash to a `uint256`. If `bytes signature` is empty or `address from` is a contract, an EIP-1271-compatible call to `function isValidSignatureNow(...)` must be made to `address from`. A successful execution must result in the emission of an `event Transfer(from, msg.sender, tokenId)`. Once an ABT exists as an `uint256 tokenId` in the contract, `function take(...)` must throw.","parameterDecorators":[{"name":"from","description":"The origin of the ABT.","recommendedTypes":[]},{"name":"uri","description":"A distinct Uniform Resource Identifier (URI) for a given ABT.","recommendedTypes":[]},{"name":"signature","description":"A EIP-2089-compatible Compact Signature of the EIP-712 structured data hash `Agreement(address active,address passive,string tokenURI)` signed by `address from`.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"A unique `uint256 tokenId` generated by type-casting the `bytes32` EIP-712 structured data hash to a `uint256`.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"tokenURI(uint256)","name":"tokenURI","description":"","parameterDecorators":[{"name":"tokenId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unequip(uint256)","name":"unequip","description":"Removes the `uint256 tokenId` from an account. At any time, an ABT receiver must be able to disassociate themselves from an ABT publicly through calling this function. After successfully executing this function, given the parameters for calling `function give` or `function take` a token must be re-equipable. Must emit a `event Transfer` with the `address to` field pointing to the zero address.","parameterDecorators":[{"name":"tokenId","description":"The identifier for an ABT.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"upgradeTo(address)","name":"upgradeTo","description":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.","parameterDecorators":[{"name":"newImplementation","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["Upgraded(address)"],"readOnly":false},{"signature":"upgradeToAndCall(address,bytes)","name":"upgradeToAndCall","description":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.","parameterDecorators":[{"name":"newImplementation","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["Upgraded(address)"],"readOnly":false}]}