{
  "schema": "../schema.json",
  "tags": [],
  "name": "WETHGateway",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a new username is registered.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "borrowETH(uint256,uint256,uint16)",
      "name": "borrowETH",
      "description": "borrow WETH, unwraps to ETH and send both the ETH and DebtTokens to msg.sender, via `approveDelegation` and onBehalf argument in `LendingPool.borrow`.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "the amount of ETH to borrow.",
          "recommendedTypes": []
        },
        {
          "name": "interesRateMode",
          "description": "the interest rate mode.",
          "recommendedTypes": []
        },
        {
          "name": "referralCode",
          "description": "integrators are assigned a referral code and can potentially receive rewards.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositETH(address,uint16)",
      "name": "depositETH",
      "description": "deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (aTokens) is minted.",
      "parameterDecorators": [
        {
          "name": "onBehalfOf",
          "description": "address of the user who will receive the aTokens representing the deposit.",
          "recommendedTypes": []
        },
        {
          "name": "referralCode",
          "description": "integrators are assigned a referral code and can potentially receive rewards.*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyEtherTransfer(address,uint256)",
      "name": "emergencyEtherTransfer",
      "description": "transfer native Ether from the utility contract, for native Ether recovery in case of stuck Ether due selfdestructs or transfer ether to pre-computated contract address before deployment.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "recipient of the transfer.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "amount to send.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyTokenTransfer(address,address,uint256)",
      "name": "emergencyTokenTransfer",
      "description": "transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "token to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "recipient of the transfer.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "amount to send.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAWETHAddress()",
      "name": "getAWETHAddress",
      "description": "Get aWETH address used by WETHGateway.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLendingPoolAddress()",
      "name": "getLendingPoolAddress",
      "description": "Get LendingPool address used by WETHGateway.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWETHAddress()",
      "name": "getWETHAddress",
      "description": "Get WETH address used by WETHGateway.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "repayETH(uint256,uint256,address)",
      "name": "repayETH",
      "description": "repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "the amount to repay, or uint256(-1) if the user wants to repay everything.",
          "recommendedTypes": []
        },
        {
          "name": "rateMode",
          "description": "the rate mode to repay.",
          "recommendedTypes": []
        },
        {
          "name": "onBehalfOf",
          "description": "the address for which msg.sender is repaying.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawETH(uint256,address)",
      "name": "withdrawETH",
      "description": "withdraws the WETH _reserves of msg.sender.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of aWETH to withdraw and receive native ETH.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "address of the user who will receive native ETH.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}