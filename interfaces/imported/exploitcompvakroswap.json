{
  "schema": "../schema.json",
  "tags": [
    "swaps"
  ],
  "name": "ExploitCompVAkroSwap",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Swapped(address,uint256)",
      "name": "Swapped",
      "description": "",
      "parameterDecorators": [
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_vAkro",
          "description": "Vested Akro address if_succeeds {:msg \"you must specify vAkro\"} vAkro != address(0);.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "merkleRoots(uint256)",
      "name": "merkleRoots",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minAmountToClaim()",
      "name": "minAmountToClaim",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Called by the owner to pause, deny swap if_succeeds {:msg \"not paused\"} paused() == true; if_succeeds {:msg \"onlyOwner\"} old(msg.sender == owner());.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMerkleRoots(bytes32[])",
      "name": "setMerkleRoots",
      "description": "Sets the Merkle roots.",
      "parameterDecorators": [
        {
          "name": "_merkleRoots",
          "description": "Array of hashes if_succeeds {:msg \"merkle root not updated\"} merkleRoots.length == _merkleRoots.length; if_succeeds {:msg \"onlyOwner\"} old(msg.sender == owner());.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinClaimAmount(uint256)",
      "name": "setMinClaimAmount",
      "description": "Sets the minimum amount of which can be swapped. 0 by default.",
      "parameterDecorators": [
        {
          "name": "_minAmount",
          "description": "Minimum amount in wei (the least decimals) if_succeeds {:msg \"onlyOwner\"} old(msg.sender == owner());.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swap(uint256,uint256,bytes32[])",
      "name": "swap",
      "description": "Allows to swap vAkro.",
      "parameterDecorators": [
        {
          "name": "_merkleRootIndex",
          "description": "Index of a merkle root to be used for calculations.",
          "recommendedTypes": []
        },
        {
          "name": "_amountAllowedToClaim",
          "description": "Maximum vAkro allowed for a user to swap.",
          "recommendedTypes": []
        },
        {
          "name": "_merkleProofs",
          "description": "Array of consiquent merkle hashes if_succeeds {:msg \"wrong _merkleRootIndex\"} _merkleRootIndex >= 0 && _merkleRootIndex < merkleRoots.length; if_succeeds {:msg \"wrong _amountAllowedToClaim\"} _amountAllowedToClaim > 0; if_succeeds {:msg \"wrong _merkleProofs\"} _merkleProofs.length > 0; if_succeeds {:msg \"vAkro not received\"} old(IERC20(vAkro).balanceOf(address(this))) - (_amountAllowedToClaim - old(swapped[_msgSender()])) == IERC20(vAkro).balanceOf(address(this)); if_succeeds {:msg \"vAkro not received\"} old(IERC20(vAkro).balanceOf(_msgSender())) + (_amountAllowedToClaim - old(swapped[_msgSender()])) == IERC20(vAkro).balanceOf(_msgSender()); if_succeeds {:msg \"no data about receiving a swap is saved\"} old(swapped[_msgSender()]) + (_amountAllowedToClaim - old(swapped[_msgSender()])) == swapped[_msgSender()];.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapped(address)",
      "name": "swapped",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "Called by the owner to unpause, allow swap if_succeeds {:msg \"paused\"} paused() == false; if_succeeds {:msg \"onlyOwner\"} old(msg.sender == owner());.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vAkro()",
      "name": "vAkro",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "verifyMerkleProofs(address,uint256,uint256,bytes32[])",
      "name": "verifyMerkleProofs",
      "description": "Verifies merkle proofs of user to be elligible for swap.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "Address of a user.",
          "recommendedTypes": []
        },
        {
          "name": "_merkleRootIndex",
          "description": "Index of a merkle root to be used for calculations.",
          "recommendedTypes": []
        },
        {
          "name": "_amountAllowedToClaim",
          "description": "Maximum ADEL allowed for a user to swap.",
          "recommendedTypes": []
        },
        {
          "name": "_merkleProofs",
          "description": "Array of consiquent merkle hashes if_succeeds {:msg \"you must specify account\"} _account != address(0); if_succeeds {:msg \"wrong merkleRootIndex\"} _merkleRootIndex >= 0 && _merkleRootIndex < merkleRoots.length; if-succeeds {:msg \"wrong amountAllowedToClaim\"} _amountAllowedToClaim > 0;.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}