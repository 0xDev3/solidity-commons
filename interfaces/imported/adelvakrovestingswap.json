{
  "schema": "../schema.json",
  "tags": [
    "swaps",
    "vesting"
  ],
  "name": "AdelVAkroVestingSwap",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AdelSwapped(address,uint256,uint256)",
      "name": "AdelSwapped",
      "description": "",
      "parameterDecorators": [
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "adelAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "akroAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "adel()",
      "name": "adel",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adelRewardsSwapped(address)",
      "name": "adelRewardsSwapped",
      "description": "Returns the actual amount of ADEL vesting rewards swapped by a user.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "Address of a user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "akro()",
      "name": "akro",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_akro",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_adel",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_vakro",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isVestedSwapEnabled()",
      "name": "isVestedSwapEnabled",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "merkleRootsTotalRewardsVested(uint256)",
      "name": "merkleRootsTotalRewardsVested",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "merkleRootsWalletRewards(uint256)",
      "name": "merkleRootsWalletRewards",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minAmountToSwap()",
      "name": "minAmountToSwap",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMerkleVestedRewardsRoots(bytes32[])",
      "name": "setMerkleVestedRewardsRoots",
      "description": "Sets the Merkle roots for the rewards (vested).",
      "parameterDecorators": [
        {
          "name": "_merkleRootsTotalRewardsVested",
          "description": "Array of hashes for vested rewards.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMerkleWalletRewardsRoots(bytes32[])",
      "name": "setMerkleWalletRewardsRoots",
      "description": "Sets the Merkle roots for the rewards (on wallet).",
      "parameterDecorators": [
        {
          "name": "_merkleRootsWalletRewards",
          "description": "Array of hashes for on-wallet rewards.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinSwapAmount(uint256)",
      "name": "setMinSwapAmount",
      "description": "Sets the minimum amount of ADEL which can be swapped. 0 by default.",
      "parameterDecorators": [
        {
          "name": "_minAmount",
          "description": "Minimum amount in wei (the least decimals).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSwapRate(uint256,uint256)",
      "name": "setSwapRate",
      "description": "Sets the rate of ADEL to vAKRO swap: 1 ADEL = _swapRateNumerator/_swapRateDenominator vAKROBy default is set to 0, that means that swap is disabled.",
      "parameterDecorators": [
        {
          "name": "_swapRateNumerator",
          "description": "Numerator for Adel converting. Can be set to 0 - that stops the swap.",
          "recommendedTypes": []
        },
        {
          "name": "_swapRateDenominator",
          "description": "Denominator for Adel converting. Can't be set to 0.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapFromAdelVestedRewards(uint256,uint256,bytes32[],uint256,uint256,bytes32[])",
      "name": "swapFromAdelVestedRewards",
      "description": "Allows to swap ADEL token from not sent vested rewards.",
      "parameterDecorators": [
        {
          "name": "merkleWalletRootIndex",
          "description": "Index of a merkle root to be used for calculations (for rewards on wallet).",
          "recommendedTypes": []
        },
        {
          "name": "adelWalletAllowedToSwap",
          "description": "Maximum ADEL allowed for a user to swap (for rewards on wallet).",
          "recommendedTypes": []
        },
        {
          "name": "merkleWalletProofs",
          "description": "Array of consiquent merkle hashes (for rewards on wallet).",
          "recommendedTypes": []
        },
        {
          "name": "merkleTotalRootIndex",
          "description": "Index of a merkle root to be used for calculations.",
          "recommendedTypes": []
        },
        {
          "name": "adelTotalAllowedToSwap",
          "description": "Maximum ADEL avested rewards llowed for a user to swap.",
          "recommendedTypes": []
        },
        {
          "name": "merkleTotalProofs",
          "description": "Array of consiquent merkle hashes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapFromAdelWalletRewards(uint256,uint256,uint256,bytes32[])",
      "name": "swapFromAdelWalletRewards",
      "description": "Allows to swap ADEL token from vesting rewards from the wallet for vAKRO.",
      "parameterDecorators": [
        {
          "name": "_adelAmount",
          "description": "Amout of ADEL vested rewards the user approves for the swap.",
          "recommendedTypes": []
        },
        {
          "name": "merkleRootIndex",
          "description": "Index of a merkle root to be used for calculations.",
          "recommendedTypes": []
        },
        {
          "name": "adelAllowedToSwap",
          "description": "Maximum ADEL allowed for a user to swap.",
          "recommendedTypes": []
        },
        {
          "name": "merkleProofs",
          "description": "Array of consiquent merkle hashes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapRateDenominator()",
      "name": "swapRateDenominator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swapRateNumerator()",
      "name": "swapRateNumerator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swappedAdelRewards(address,uint256)",
      "name": "swappedAdelRewards",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toggleVestedSwap()",
      "name": "toggleVestedSwap",
      "description": "Toggles vested swap flag from active to inactive or vice versa.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vakro()",
      "name": "vakro",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "verifyVestedRewardsMerkleProofs(address,uint256,uint256,bytes32[])",
      "name": "verifyVestedRewardsMerkleProofs",
      "description": "Verifies vested rewards merkle proofs of user to be elligible for swap.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "Address of a user.",
          "recommendedTypes": []
        },
        {
          "name": "_merkleRootIndex",
          "description": "Index of a merkle root to be used for calculations.",
          "recommendedTypes": []
        },
        {
          "name": "_adelAllowedToSwap",
          "description": "Maximum ADEL allowed for a user to swap.",
          "recommendedTypes": []
        },
        {
          "name": "_merkleProofs",
          "description": "Array of consiquent merkle hashes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "verifyWalletRewardsMerkleProofs(address,uint256,uint256,bytes32[])",
      "name": "verifyWalletRewardsMerkleProofs",
      "description": "Verifies rewards merkle proofs of user to be elligible for swap.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "Address of a user.",
          "recommendedTypes": []
        },
        {
          "name": "_merkleRootIndex",
          "description": "Index of a merkle root to be used for calculations.",
          "recommendedTypes": []
        },
        {
          "name": "_adelAllowedToSwap",
          "description": "Maximum ADEL allowed for a user to swap.",
          "recommendedTypes": []
        },
        {
          "name": "_merkleProofs",
          "description": "Array of consiquent merkle hashes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawAdel(address)",
      "name": "withdrawAdel",
      "description": "Withdraws all ADEL collected on a Swap contract.",
      "parameterDecorators": [
        {
          "name": "_recepient",
          "description": "Recepient of ADEL.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}