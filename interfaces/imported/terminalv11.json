{
  "schema": "../schema.json",
  "tags": [],
  "name": "TerminalV1_1",
  "description": "A project can transfer its funds, along with the power to reconfigure and mint/burn their Tickets, from this contract to another allowed terminal contract at any time.",
  "eventDecorators": [
    {
      "signature": "AddToBalance(uint256,uint256,address)",
      "name": "AddToBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AllowMigration(address)",
      "name": "AllowMigration",
      "description": "",
      "parameterDecorators": [
        {
          "name": "allowed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Configure(uint256,uint256,address)",
      "name": "Configure",
      "description": "",
      "parameterDecorators": [
        {
          "name": "fundingCycleId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Deposit(uint256)",
      "name": "Deposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DistributeToPayoutMod(uint256,uint256,tuple,uint256,address)",
      "name": "DistributeToPayoutMod",
      "description": "",
      "parameterDecorators": [
        {
          "name": "fundingCycleId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "mod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "modCut",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DistributeToTicketMod(uint256,uint256,tuple,uint256,address)",
      "name": "DistributeToTicketMod",
      "description": "",
      "parameterDecorators": [
        {
          "name": "fundingCycleId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "mod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "modCut",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EnsureTargetLocalWei(uint256)",
      "name": "EnsureTargetLocalWei",
      "description": "",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Migrate(uint256,address,uint256,address)",
      "name": "Migrate",
      "description": "",
      "parameterDecorators": [
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Pay(uint256,uint256,address,uint256,uint256,uint256,string,address)",
      "name": "Pay",
      "description": "",
      "parameterDecorators": [
        {
          "name": "fundingCycleId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "beneficiaryTokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalTokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "note",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PrintReserveTickets(uint256,uint256,address,uint256,uint256,address)",
      "name": "PrintReserveTickets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "fundingCycleId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "beneficiaryTicketAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PrintTickets(uint256,address,uint256,string,address)",
      "name": "PrintTickets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "memo",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Redeem(address,address,uint256,uint256,uint256,address)",
      "name": "Redeem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "holder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "returnAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetFee(uint256)",
      "name": "SetFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetTargetLocalWei(uint256)",
      "name": "SetTargetLocalWei",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetYielder(address)",
      "name": "SetYielder",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newYielder",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Tap(uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,address)",
      "name": "Tap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "fundingCycleId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "currency",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "netTransferAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "beneficiaryTransferAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "govFeeAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addToBalance(uint256)",
      "name": "addToBalance",
      "description": "Receives and allocates funds belonging to the specified project.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to which the funds received belong.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "allowMigration(address)",
      "name": "allowMigration",
      "description": "Adds to the contract addresses that projects can migrate their Tickets to. Only governance can add a contract to the migration allow list.",
      "parameterDecorators": [
        {
          "name": "_contract",
          "description": "The contract to allow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "balanceOf(uint256)",
      "name": "balanceOf",
      "description": "The amount of ETH that each project is responsible for.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burnFromDeadAddress(uint256)",
      "name": "burnFromDeadAddress",
      "description": "A function that burns the supply of the dead address for a project. Callable by anyone.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project whose tokens are being burned.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimableOverflowOf(address,uint256,uint256)",
      "name": "claimableOverflowOf",
      "description": "The amount of tokens that can be claimed by the given address. The _account must have at least _count tickets for the specified project.If there is a funding cycle reconfiguration ballot open for the project, the project's current bonding curve is bypassed.No more than the overflow can be claimable.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "The address to get an amount for.",
          "recommendedTypes": []
        },
        {
          "name": "_projectId",
          "description": "The ID of the project to get a claimable amount for.",
          "recommendedTypes": []
        },
        {
          "name": "_count",
          "description": "The number of Tickets that would be redeemed to get the resulting amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_claimableOverflow",
          "description": "amount The amount of tokens that can be claimed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "configure(uint256,tuple(uint256,uint256,uint256,uint256,uint256,address),tuple(uint256,uint256,uint256,bool,bool,address),tuple(bool,uint16,uint48,address,address,uint56)[],tuple(bool,uint16,uint48,address)[])",
      "name": "configure",
      "description": "Configures the properties of the current funding cycle if the project hasn't distributed tickets yet, or sets the properties of the proposed funding cycle that will take effect once the current one expires if it is approved by the current funding cycle's ballot. Only a project's owner or a designated operator can configure its funding cycles._properties.target The amount that the project wants to receive in this funding stage. Sent as a wad._properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD._properties.duration The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time._properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle._properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage. If it's 200, each funding stage will have equal weight. If the number is 180, a contribution to the next funding stage will only give you 90% of tickets given to a contribution of the same amount during the current funding stage. If the number is 0, an non-recurring funding stage will get made._properties.ballot The new ballot that will be used to approve subsequent reconfigurations._metadata.reservedRate A number from 0-200 indicating the percentage of each contribution's tickets that will be reserved for the project owner._metadata.bondingCurveRate The rate from 0-200 at which a project's Tickets can be redeemed for surplus. The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk where x is _count, o is _currentOverflow, s is _totalSupply, and r is _bondingCurveRate._metadata.reconfigurationBondingCurveRate The bonding curve rate to apply when there is an active ballot.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project being reconfigured.",
          "recommendedTypes": []
        },
        {
          "name": "_properties",
          "description": "The funding cycle configuration.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "target",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "currency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "duration",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "cycleLimit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "discountRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "ballot",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_metadata",
          "description": "A struct specifying the TerminalV1 specific params _bondingCurveRate, and _reservedRate.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "reservedRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "bondingCurveRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reconfigurationBondingCurveRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "payIsPaused",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "ticketPrintingIsAllowed",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "treasuryExtension",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_payoutMods",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "preferUnstaked",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "percent",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "lockedUntil",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "beneficiary",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allocator",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "projectId",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_ticketMods",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "preferUnstaked",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "percent",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "lockedUntil",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "beneficiary",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ID of the funding cycle that was successfully configured.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "currentOverflowOf(uint256)",
      "name": "currentOverflowOf",
      "description": "Gets the current overflowed amount for a specified project.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to get overflow for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "overflow",
          "description": "The current overflow of funds for the project.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deploy(address,bytes32,string,tuple(uint256,uint256,uint256,uint256,uint256,address),tuple(uint256,uint256,uint256,bool,bool,address),tuple(bool,uint16,uint48,address,address,uint56)[],tuple(bool,uint16,uint48,address)[])",
      "name": "deploy",
      "description": "Deploys a project. This will mint an ERC-721 into the `_owner`'s account, configure a first funding cycle, and set up any mods. Each operation withing this transaction can be done in sequence separately.Anyone can deploy a project on an owner's behalf._properties.target The amount that the project wants to receive in this funding cycle. Sent as a wad._properties.currency The currency of the `target`. Send 0 for ETH or 1 for USD._properties.duration The duration of the funding stage for which the `target` amount is needed. Measured in days. Send 0 for a boundless cycle reconfigurable at any time._properties.cycleLimit The number of cycles that this configuration should last for before going back to the last permanent. This has no effect for a project's first funding cycle._properties.discountRate A number from 0-200 indicating how valuable a contribution to this funding stage is compared to the project's previous funding stage. If it's 200, each funding stage will have equal weight. If the number is 180, a contribution to the next funding stage will only give you 90% of tickets given to a contribution of the same amount during the current funding stage. If the number is 0, an non-recurring funding stage will get made._properties.ballot The new ballot that will be used to approve subsequent reconfigurations._metadata.reservedRate A number from 0-200 indicating the percentage of each contribution's tickets that will be reserved for the project owner._metadata.bondingCurveRate The rate from 0-200 at which a project's Tickets can be redeemed for surplus. The bonding curve formula is https://www.desmos.com/calculator/sp9ru6zbpk where x is _count, o is _currentOverflow, s is _totalSupply, and r is _bondingCurveRate._metadata.reconfigurationBondingCurveRate The bonding curve rate to apply when there is an active ballot.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "The address that will own the project.",
          "recommendedTypes": []
        },
        {
          "name": "_handle",
          "description": "The project's unique handle.",
          "recommendedTypes": []
        },
        {
          "name": "_uri",
          "description": "A link to information about the project and this funding cycle.",
          "recommendedTypes": []
        },
        {
          "name": "_properties",
          "description": "The funding cycle configuration.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "target",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "currency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "duration",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "cycleLimit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "discountRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "ballot",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_metadata",
          "description": "A struct specifying the TerminalV1 specific params _bondingCurveRate, and _reservedRate.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "reservedRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "bondingCurveRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reconfigurationBondingCurveRate",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "payIsPaused",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "ticketPrintingIsAllowed",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "treasuryExtension",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_payoutMods",
          "description": "Any payout mods to set.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "preferUnstaked",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "percent",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "lockedUntil",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "beneficiary",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allocator",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "projectId",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_ticketMods",
          "description": "Any ticket mods to set.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "preferUnstaked",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "percent",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "lockedUntil",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "beneficiary",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fee()",
      "name": "fee",
      "description": "The percent fee the Juicebox project takes from tapped amounts. Out of 200.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fundingCycles()",
      "name": "fundingCycles",
      "description": "The contract storing all funding cycle configurations.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "migrate(uint256,address)",
      "name": "migrate",
      "description": "Allows a project owner to migrate its funds and operations to a new contract. Only a project's owner or a designated operator can migrate it.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project being migrated.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "The contract that will gain the project's funds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "migrationIsAllowed(address)",
      "name": "migrationIsAllowed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "modStore()",
      "name": "modStore",
      "description": "The contract that stores mods for each project.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "operatorStore()",
      "name": "operatorStore",
      "description": "A contract storing operator assignments.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pay(uint256,address,string,bool)",
      "name": "pay",
      "description": "Contribute ETH to a project. Print's the project's tickets proportional to the amount of the contribution. The msg.value is the amount of the contribution in wei.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project being contribute to.",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "The address to print Tickets for.",
          "recommendedTypes": []
        },
        {
          "name": "_memo",
          "description": "A memo that will be included in the published event.",
          "recommendedTypes": []
        },
        {
          "name": "_preferUnstakedTickets",
          "description": "Whether ERC20's should be unstaked automatically if they have been issued.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ID of the funding cycle that the payment was made during.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "prices()",
      "name": "prices",
      "description": "The prices feeds.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "printReservedTickets(uint256)",
      "name": "printReservedTickets",
      "description": "Prints all reserved tickets for a project.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to which the reserved tickets belong.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "The amount of tickets that are being printed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "printTickets(uint256,uint256,address,string,bool)",
      "name": "printTickets",
      "description": "Allows a project to print tickets for a specified beneficiary. Only a project's owner or a designated operator can print tickets.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to print tickets for.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of tickets to print.",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "The address to send the printed tickets to.",
          "recommendedTypes": []
        },
        {
          "name": "_memo",
          "description": "A memo to leave with the printing.",
          "recommendedTypes": []
        },
        {
          "name": "_preferUnstakedTickets",
          "description": "If there is a preference to unstake the printed tickets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "projects()",
      "name": "projects",
      "description": "The Projects contract which mints ERC-721's that represent project ownership and transfers.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeem(address,uint256,uint256,uint256,address,bool)",
      "name": "redeem",
      "description": "Addresses can redeem their Tickets to claim the project's overflowed ETH. Only a ticket's holder or a designated operator can redeem it.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "The account to redeem tickets for.",
          "recommendedTypes": []
        },
        {
          "name": "_projectId",
          "description": "The ID of the project to which the Tickets being redeemed belong.",
          "recommendedTypes": []
        },
        {
          "name": "_count",
          "description": "The number of Tickets to redeem.",
          "recommendedTypes": []
        },
        {
          "name": "_minReturnedWei",
          "description": "The minimum amount of Wei expected in return.",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "The address to send the ETH to.",
          "recommendedTypes": []
        },
        {
          "name": "_preferUnstaked",
          "description": "If the preference is to redeem tickets that have been converted to ERC-20s.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "The amount of ETH that the tickets were redeemed for.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reservedTicketBalanceOf(uint256,uint256)",
      "name": "reservedTicketBalanceOf",
      "description": "Gets the amount of reserved tickets that a project has.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to get overflow for.",
          "recommendedTypes": []
        },
        {
          "name": "_reservedRate",
          "description": "The reserved rate to use to make the calculation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount overflow The current overflow of funds for the project.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setFee(uint256)",
      "name": "setFee",
      "description": "Allow the admin to change the fee. Only funding cycle reconfigurations after the new fee is set will use the new fee. All future funding cycles based on configurations made in the past will use the fee that was set at the time of the configuration.Only the owner can set a new fee.The max fee is 5%.",
      "parameterDecorators": [
        {
          "name": "_fee",
          "description": "The new fee percent. Out of 200.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tap(uint256,uint256,uint256,uint256)",
      "name": "tap",
      "description": "Tap into funds that have been contributed to a project's current funding cycle. Anyone can tap funds on a project's behalf.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to which the funding cycle being tapped belongs.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount being tapped, in the funding cycle's currency.",
          "recommendedTypes": []
        },
        {
          "name": "_currency",
          "description": "The expected currency being tapped.",
          "recommendedTypes": []
        },
        {
          "name": "_minReturnedWei",
          "description": "The minimum number of wei that the amount should be valued at.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ID of the funding cycle that was tapped.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "terminalDirectory()",
      "name": "terminalDirectory",
      "description": "The directory of terminals.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ticketBooth()",
      "name": "ticketBooth",
      "description": "The contract that manages Ticket printing and redeeming.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}