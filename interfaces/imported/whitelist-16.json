{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "locking"
  ],
  "name": "Whitelist",
  "description": "whitelist which manages KYC approvals, token lockup, and transfer restrictions for a DAT token.",
  "eventDecorators": [
    {
      "signature": "AddApprovedUserWallet(address,address,address)",
      "name": "AddApprovedUserWallet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AddLockup(address,uint256,uint256,address)",
      "name": "AddLockup",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_lockupExpirationDate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_numberOfTokensLocked",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ApproveNewUser(address,uint256,address)",
      "name": "ApproveNewUser",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_trader",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_jurisdictionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ConfigWhitelist(uint256,uint256,address)",
      "name": "ConfigWhitelist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_startDate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_lockupGranularity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Halt(uint256,uint256)",
      "name": "Halt",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_jurisdictionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_until",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "InvestorDelisted(address,uint256)",
      "name": "InvestorDelisted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_jurisdictionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "InvestorEnlisted(address,uint256)",
      "name": "InvestorEnlisted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_jurisdictionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MaxInvestorsByJurisdictionChanged(uint256,uint256)",
      "name": "MaxInvestorsByJurisdictionChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_jurisdictionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_limit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MaxInvestorsChanged(uint256)",
      "name": "MaxInvestorsChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_limit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OperatorAdded(address)",
      "name": "OperatorAdded",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OperatorRemoved(address)",
      "name": "OperatorRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Resume(uint256)",
      "name": "Resume",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_jurisdictionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RevokeUserWallet(address,address)",
      "name": "RevokeUserWallet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UnlockTokens(address,uint256,address)",
      "name": "UnlockTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_tokensUnlocked",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpdateJurisdictionFlow(uint256,uint256,uint256,address)",
      "name": "UpdateJurisdictionFlow",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_fromJurisdictionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_toJurisdictionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_lockupLength",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpdateJurisdictionForUserId(address,uint256,address)",
      "name": "UpdateJurisdictionForUserId",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_jurisdictionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WalletActivated(address,address)",
      "name": "WalletActivated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WalletDeactivated(address,address)",
      "name": "WalletDeactivated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "activateWallets(address[])",
      "name": "activateWallets",
      "description": "activate wallet enlist user when user is not enlisted. This function can be called even user does not have balance only owner can call this function.",
      "parameterDecorators": [
        {
          "name": "_wallets",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addApprovedUserWallets(address[],address[])",
      "name": "addApprovedUserWallets",
      "description": "Called by an operator to add wallets to known userIds.",
      "parameterDecorators": [
        {
          "name": "_userIds",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_newWallets",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addLockups(address[],uint256[],uint256[])",
      "name": "addLockups",
      "description": "Operators can manually add lockups for userIds. This may be used by the organization before transfering tokens from the initial supply.",
      "parameterDecorators": [
        {
          "name": "_userIds",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lockupExpirationDates",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_numberOfTokensLocked",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addOperator(address)",
      "name": "addOperator",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveNewUsers(address[],uint256[])",
      "name": "approveNewUsers",
      "description": "Called by an operator to add new traders. The trader will be assigned a userId equal to their wallet address.",
      "parameterDecorators": [
        {
          "name": "_traders",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_jurisdictionIds",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorizeTransfer(address,address,uint256,bool)",
      "name": "authorizeTransfer",
      "description": "Called by the callingContract before a transfer occurs. This call will revert when the transfer is not authorized. This is a mutable call to allow additional data to be recorded, such as when the user aquired their tokens.*.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_isSell",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorizedWalletToUserId(address)",
      "name": "authorizedWalletToUserId",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "callingContract()",
      "name": "callingContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "configWhitelist(uint256,uint256)",
      "name": "configWhitelist",
      "description": "Called by the owner to update the startDate or lockupGranularity.",
      "parameterDecorators": [
        {
          "name": "_startDate",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lockupGranularity",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "currentInvestors()",
      "name": "currentInvestors",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentInvestorsByJurisdiction(uint256)",
      "name": "currentInvestorsByJurisdiction",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deactivateWallet(address)",
      "name": "deactivateWallet",
      "description": "deactivate wallet delist user if user does not have any wallet left. This function can only be called when _wallet has zero balance.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deactivateWallets(address[])",
      "name": "deactivateWallets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_wallets",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "delistUsers(address[])",
      "name": "delistUsers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userIds",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "detectTransferRestriction(address,address,uint256)",
      "name": "detectTransferRestriction",
      "description": "Checks if there is a transfer restriction for the given addresses. Does not consider tokenLockup. Use `getLockedTokenCount` for that. this function is from the erc-1404 standard and currently in use by the DAT for the `pay` feature.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "status",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "enlistUsers(address[])",
      "name": "enlistUsers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_userIds",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "forceUnlockUpTo(address,uint256)",
      "name": "forceUnlockUpTo",
      "description": "Allows operators to remove lockup entries, bypassing the recorded expiration date. This should generally remain unused. It could be used in combination with `addLockups` to fix an incorrect lockup expiration date or quantity.",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxLockupIndex",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAuthorizedUserIdInfo(address)",
      "name": "getAuthorizedUserIdInfo",
      "description": "checks details for a given userId.",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "jurisdictionId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "totalTokensLocked",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "startIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "endIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getJurisdictionFlow(uint256,uint256)",
      "name": "getJurisdictionFlow",
      "description": "checks for transfer restrictions between jurisdictions.",
      "parameterDecorators": [
        {
          "name": "_fromJurisdictionId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_toJurisdictionId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "lockupLength",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLockedTokenCount(address)",
      "name": "getLockedTokenCount",
      "description": "Returns the number of unlocked tokens a given userId has available. this is a `view`-only way to determine how many tokens are still locked (info.totalTokensLocked is only accurate after processing lockups which changes state).",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "lockedTokens",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserIdLockup(address,uint256)",
      "name": "getUserIdLockup",
      "description": "gets a specific lockup entry for a userId. use `getAuthorizedUserIdInfo` to determine the range of applicable lockupIndex.",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lockupIndex",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "lockupExpirationDate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "numberOfTokensLocked",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "halt(uint256[],uint256[])",
      "name": "halt",
      "description": "halts jurisdictions of id `_jurisdictionIds` for `_duration` seconds. only owner can call this function.",
      "parameterDecorators": [
        {
          "name": "_jurisdictionIds",
          "description": "ids of the jurisdictions to halt.",
          "recommendedTypes": []
        },
        {
          "name": "_expirationTimestamps",
          "description": "due when halt ends*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Called once to complete configuration for this contract. Done with `initialize` instead of a constructor in order to support using this contract via an Upgradable Proxy.",
      "parameterDecorators": [
        {
          "name": "_callingContract",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "investorEnlisted(address)",
      "name": "investorEnlisted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOperator(address)",
      "name": "isOperator",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "jurisdictionHaltsUntil(uint256)",
      "name": "jurisdictionHaltsUntil",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockupGranularity()",
      "name": "lockupGranularity",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxInvestors()",
      "name": "maxInvestors",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxInvestorsByJurisdiction(uint256)",
      "name": "maxInvestorsByJurisdiction",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "messageForTransferRestriction(uint8)",
      "name": "messageForTransferRestriction",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_restrictionCode",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "processLockups(address,uint256)",
      "name": "processLockups",
      "description": "Anyone can process lockups for a userId. This is generally unused but may be required if a given userId has a lot of individual lockup entries which are expired.",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxCount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeOperator(address)",
      "name": "removeOperator",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOperator()",
      "name": "renounceOperator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resume(uint256[])",
      "name": "resume",
      "description": "resume halted jurisdiction. only owner can call this function.",
      "parameterDecorators": [
        {
          "name": "_jurisdictionIds",
          "description": "list of jurisdiction ids to resume*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeUserWallets(address[])",
      "name": "revokeUserWallets",
      "description": "Called by an operator to revoke approval for the given wallets. If this is called in error, you can restore access with `addApprovedUserWallets`.",
      "parameterDecorators": [
        {
          "name": "_wallets",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokedFrom(address)",
      "name": "revokedFrom",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setInvestorLimit(uint256)",
      "name": "setInvestorLimit",
      "description": "changes max investors limit of the contract to `_limit`. only owner can call this function.",
      "parameterDecorators": [
        {
          "name": "_limit",
          "description": "new investor limit for contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setInvestorLimitForJurisdiction(uint256[],uint256[])",
      "name": "setInvestorLimitForJurisdiction",
      "description": "changes max investors limit of the `_jurisdcitionId` to `_limit`. only owner can call this function.",
      "parameterDecorators": [
        {
          "name": "_jurisdictionIds",
          "description": "jurisdiction id to update.",
          "recommendedTypes": []
        },
        {
          "name": "_limits",
          "description": "new investor limit for jurisdiction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "startDate()",
      "name": "startDate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateJurisdictionFlows(uint256[],uint256[],uint256[])",
      "name": "updateJurisdictionFlows",
      "description": "Called by the owner to define or update jurisdiction flows. note that this can be called with a partial list, only including entries to be added or which have changed.",
      "parameterDecorators": [
        {
          "name": "_fromJurisdictionIds",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_toJurisdictionIds",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lockupLengths",
          "description": "defines transfer restrictions where: - 0 is not supported (the default) - 1 is supported with no token lockup required - >1 is supported and this value defines the lockup length in seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateJurisdictionsForUserIds(address[],uint256[])",
      "name": "updateJurisdictionsForUserIds",
      "description": "Called by an operator to change the jurisdiction for the given userIds.",
      "parameterDecorators": [
        {
          "name": "_userIds",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_jurisdictionIds",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userActiveWalletCount(address)",
      "name": "userActiveWalletCount",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "walletActivated(address)",
      "name": "walletActivated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}