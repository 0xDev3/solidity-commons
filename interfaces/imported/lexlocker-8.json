{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "locking",
    "dao"
  ],
  "name": "LexLocker",
  "description": "LexLocker. Token locker registry with embedded terms and resolution.",
  "eventDecorators": [
    {
      "signature": "AddMarketTerms(uint256,string)",
      "name": "AddMarketTerms",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "terms",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AmendMarketTerms(uint256,string)",
      "name": "AmendMarketTerms",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "terms",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AssignClientOracle(address,uint256)",
      "name": "AssignClientOracle",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "clientOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "registration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ClientProposeResolver(address,uint256,string)",
      "name": "ClientProposeResolver",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "proposedResolver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "registration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "details",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ConfirmLocker(uint256)",
      "name": "ConfirmLocker",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "editionId",
          "description": "ID of newly created edition.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DepositLocker(address,address,address,address,address,uint256[],uint256,uint256,uint256,string,bool)",
      "name": "DepositLocker",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "client",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "clientOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "provider",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "resolver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "registration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "termination",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "details",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "swiftResolver",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Lock(address,uint256,string)",
      "name": "Lock",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "registration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "details",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProviderProposeResolver(address,uint256,string)",
      "name": "ProviderProposeResolver",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "proposedResolver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "registration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "details",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RegisterLocker(address,address,address,address,address,uint256[],uint256,uint256,uint256,string,bool)",
      "name": "RegisterLocker",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "client",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "clientOracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "provider",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "resolver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "registration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "termination",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "details",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "swiftResolver",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Release(uint256,uint256,uint256)",
      "name": "Release",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "milestone",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "payment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "registration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RequestLockerResolution(address,address,address,address,uint256,uint256,string,bool)",
      "name": "RequestLockerResolution",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "client",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "counterparty",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "resolver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "registration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "details",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "swiftResolver",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Resolve(address,uint256,uint256,uint256,uint256,string)",
      "name": "Resolve",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "resolver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "clientAward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "providerAward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "registration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "resolutionFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "resolution",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TributeToManager(address,uint256,string)",
      "name": "TributeToManager",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "details",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdateLockerSettings(address,address,address,address,uint256,uint256,uint256,uint256,string)",
      "name": "UpdateLockerSettings",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "manager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "swiftResolverToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "userRewardToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wETH",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "MAX_DURATION",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "resolutionRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "swiftResolverTokenBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "userReward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lockerTerms",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdateSwiftResolverStatus(address,string,bool)",
      "name": "UpdateSwiftResolverStatus",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "swiftResolver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "details",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "registered",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdraw(uint256)",
      "name": "Withdraw",
      "description": "Emitted when a edition is created reserving the corresponding token IDs.",
      "parameterDecorators": [
        {
          "name": "editionId",
          "description": "ID of newly created edition.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MAX_DURATION()",
      "name": "MAX_DURATION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addMarketTerms(string)",
      "name": "addMarketTerms",
      "description": "Updates LXL with new market `terms`.",
      "parameterDecorators": [
        {
          "name": "terms",
          "description": "New `terms` to add to LXL market.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adrs(uint256)",
      "name": "adrs",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "proposedResolver",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "resolver",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "clientProposedResolver",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "providerProposedResolver",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "clientAward",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "providerAward",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "resolutionRate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "resolution",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "swiftResolver",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "amendMarketTerms(uint256,string)",
      "name": "amendMarketTerms",
      "description": "Updates LXL with amended market `terms`.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "Targeted location in `marketTerms` array.",
          "recommendedTypes": []
        },
        {
          "name": "terms",
          "description": "Amended `terms` to add to LXL market.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "assignClientOracle(address,uint256)",
      "name": "assignClientOracle",
      "description": "LXL `client` can assign account as `clientOracle` to help call `release()` and `withdraw()`.",
      "parameterDecorators": [
        {
          "name": "clientOracle",
          "description": "Account that can help call `release()` and `withdraw()` (default to `client` if unsure).",
          "recommendedTypes": []
        },
        {
          "name": "registration",
          "description": "Registered LXL number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "clientProposeResolver(address,uint256,string)",
      "name": "clientProposeResolver",
      "description": "Fallback to allow LXL party to suggest new `resolver` to counterparty. LXL `client` calls to update `resolver` selection - if matches `provider` suggestion or confirmed, `resolver` updates.",
      "parameterDecorators": [
        {
          "name": "proposedResolver",
          "description": "Proposed account to resolve LXL.",
          "recommendedTypes": []
        },
        {
          "name": "registration",
          "description": "Registered LXL number.",
          "recommendedTypes": []
        },
        {
          "name": "details",
          "description": "Context re: proposed `resolver`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "confirmLocker(uint256)",
      "name": "confirmLocker",
      "description": "LXL `client` can confirm after `registerLocker()` is called to deposit `sum` for `provider`. If LXL `token` is wETH, msg.value can be wrapped into wETH in single call.",
      "parameterDecorators": [
        {
          "name": "registration",
          "description": "Registered LXL number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositLocker(address,address,address,address,uint256[],uint256,string,bool)",
      "name": "depositLocker",
      "description": "LXL can be registered as deposit from `client` for benefit of `provider`. If LXL `token` is wETH, msg.value can be wrapped into wETH in single call.",
      "parameterDecorators": [
        {
          "name": "clientOracle",
          "description": "Account that can help call `release()` and `withdraw()` (default to `client` if unsure).",
          "recommendedTypes": []
        },
        {
          "name": "provider",
          "description": "Account to receive registered `amount`s.",
          "recommendedTypes": []
        },
        {
          "name": "resolver",
          "description": "Account that can call `resolve()` to award `sum` remainder between LXL parties.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "Token address for `amount` deposit.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Array of milestone `amount`s to be sent to `provider` on call of `release()`.",
          "recommendedTypes": []
        },
        {
          "name": "termination",
          "description": "Exact `termination` date in seconds since epoch.",
          "recommendedTypes": []
        },
        {
          "name": "details",
          "description": "Context re: LXL.",
          "recommendedTypes": []
        },
        {
          "name": "swiftResolver",
          "description": "If `true`, `sum` remainder can be resolved by holders of `swiftResolverToken`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositLockerSingleMilestone(address,address,address,address,uint256,uint256,string,bool)",
      "name": "depositLockerSingleMilestone",
      "description": "LXL can be registered as single deposit (lump sum) from `client` for benefit of `provider`. If LXL `token` is wETH, msg.value can be wrapped into wETH in single call.",
      "parameterDecorators": [
        {
          "name": "clientOracle",
          "description": "Account that can help call `release()` and `withdraw()` (default to `client` if unsure).",
          "recommendedTypes": []
        },
        {
          "name": "provider",
          "description": "Account to receive registered `amount`s.",
          "recommendedTypes": []
        },
        {
          "name": "resolver",
          "description": "Account that can call `resolve()` to award `sum` remainder between LXL parties.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "Token address for `amount` deposit.",
          "recommendedTypes": []
        },
        {
          "name": "sum",
          "description": "Lump `sum` to be sent to `provider` on call of `release()`.",
          "recommendedTypes": []
        },
        {
          "name": "termination",
          "description": "Exact `termination` date in seconds since epoch.",
          "recommendedTypes": []
        },
        {
          "name": "details",
          "description": "Context re: LXL.",
          "recommendedTypes": []
        },
        {
          "name": "swiftResolver",
          "description": "If `true`, `sum` remainder can be resolved by holders of `swiftResolverToken`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "latestLockerRegistration(address)",
      "name": "latestLockerRegistration",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "latest",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lock(uint256,string)",
      "name": "lock",
      "description": "LXL `client` or `provider` can lock to freeze release and withdrawal of `sum` remainder until `resolver` calls `resolve()`. `lock()` can be called repeatedly to allow LXL parties to continue to provide context until resolution.",
      "parameterDecorators": [
        {
          "name": "registration",
          "description": "Registered LXL number.",
          "recommendedTypes": []
        },
        {
          "name": "details",
          "description": "Context re: lock / dispute.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lockerCount()",
      "name": "lockerCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockerRegistrations(address)",
      "name": "lockerRegistrations",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "registered",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockerTerms()",
      "name": "lockerTerms",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockers(uint256)",
      "name": "lockers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "client",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "clientOracle",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "provider",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "confirmed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "locked",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "currentMilestone",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "milestones",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "released",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "sum",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "termination",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "details",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "manager()",
      "name": "manager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketTerms(uint256)",
      "name": "marketTerms",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "marketTermsCount()",
      "name": "marketTermsCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "providerAmounts(uint256)",
      "name": "providerAmounts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "registration",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "providerProposeResolver(address,uint256,string)",
      "name": "providerProposeResolver",
      "description": "Fallback to allow LXL party to suggest new `resolver` to counterparty. LXL `provider` calls to update `resolver` selection - if matches `client` suggestion or confirmed, `resolver` updates.",
      "parameterDecorators": [
        {
          "name": "proposedResolver",
          "description": "Proposed account to resolve LXL.",
          "recommendedTypes": []
        },
        {
          "name": "registration",
          "description": "Registered LXL number.",
          "recommendedTypes": []
        },
        {
          "name": "details",
          "description": "Context re: proposed `resolver`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registerLocker(address,address,address,address,address,uint256[],uint256,string,bool)",
      "name": "registerLocker",
      "description": "LXL can be registered as `provider` request for `client` deposit (by calling `confirmLocker()`).",
      "parameterDecorators": [
        {
          "name": "client",
          "description": "Account to provide `sum` deposit and call `release()` of registered `amount`s.",
          "recommendedTypes": []
        },
        {
          "name": "clientOracle",
          "description": "Account that can help call `release()` and `withdraw()` (default to `client` if unsure).",
          "recommendedTypes": []
        },
        {
          "name": "provider",
          "description": "Account to receive registered `amount`s.",
          "recommendedTypes": []
        },
        {
          "name": "resolver",
          "description": "Account that can call `resolve()` to award `sum` remainder between LXL parties.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "Token address for `amount` deposit.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Array of milestone `amount`s to be sent to `provider` on call of `release()`.",
          "recommendedTypes": []
        },
        {
          "name": "termination",
          "description": "Exact `termination` date in seconds since epoch.",
          "recommendedTypes": []
        },
        {
          "name": "details",
          "description": "Context re: LXL.",
          "recommendedTypes": []
        },
        {
          "name": "swiftResolver",
          "description": "If `true`, `sum` remainder can be resolved by holders of `swiftResolverToken`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "release(uint256)",
      "name": "release",
      "description": "LXL `client` or `clientOracle` can release milestone `amount` to `provider`.",
      "parameterDecorators": [
        {
          "name": "registration",
          "description": "Registered LXL number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestLockerResolution(address,address,address,uint256,string,bool)",
      "name": "requestLockerResolution",
      "description": "LXL depositor (`client`) can request direct resolution between selected `counterparty` over `sum`. E.g., staked wager to benefit charity as `counterparty`. If LXL `token` is wETH, msg.value can be wrapped into wETH in single call.",
      "parameterDecorators": [
        {
          "name": "counterparty",
          "description": "Other account (`provider`) that can receive award from `resolver`.",
          "recommendedTypes": []
        },
        {
          "name": "resolver",
          "description": "Account that can call `resolve()` to award `sum` between LXL parties.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "Token address for `sum`.",
          "recommendedTypes": []
        },
        {
          "name": "sum",
          "description": "Lump `sum` amount for resolution.",
          "recommendedTypes": []
        },
        {
          "name": "details",
          "description": "Context re: resolution request.",
          "recommendedTypes": []
        },
        {
          "name": "swiftResolver",
          "description": "If `true`, `sum` can be resolved by holders of `swiftResolverToken`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resolutionRate()",
      "name": "resolutionRate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "resolutions(uint256)",
      "name": "resolutions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "resolutionsCount()",
      "name": "resolutionsCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "resolve(uint256,uint256,uint256,string)",
      "name": "resolve",
      "description": "After LXL is locked, selected `resolver` awards `sum` remainder between `client` and `provider` minus fee.",
      "parameterDecorators": [
        {
          "name": "clientAward",
          "description": "Remainder awarded to `client`.",
          "recommendedTypes": []
        },
        {
          "name": "providerAward",
          "description": "Remainder awarded to `provider`.",
          "recommendedTypes": []
        },
        {
          "name": "registration",
          "description": "Registered LXL number.",
          "recommendedTypes": []
        },
        {
          "name": "resolution",
          "description": "Context re: resolution.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swiftResolverRegistrations(address)",
      "name": "swiftResolverRegistrations",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swiftResolverToken()",
      "name": "swiftResolverToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swiftResolverTokenBalance()",
      "name": "swiftResolverTokenBalance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tributeToManager(string)",
      "name": "tributeToManager",
      "description": "General ether payment function for `manager` of LXL contract.",
      "parameterDecorators": [
        {
          "name": "details",
          "description": "Describes context for ether transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateLockerSettings(address,address,address,address,uint256,uint256,uint256,uint256,string)",
      "name": "updateLockerSettings",
      "description": "Updates LXL management settings.",
      "parameterDecorators": [
        {
          "name": "_manager",
          "description": "Account that governs LXL contract settings.",
          "recommendedTypes": []
        },
        {
          "name": "_swiftResolverToken",
          "description": "Token to mark participants in swift resolution.",
          "recommendedTypes": []
        },
        {
          "name": "_userRewardToken",
          "description": "Token for LXL user rewards.",
          "recommendedTypes": []
        },
        {
          "name": "_wETH",
          "description": "Standard contract reference to wrap ether.",
          "recommendedTypes": []
        },
        {
          "name": "_MAX_DURATION",
          "description": "Time limit in seconds on token lockup - default 63113904 (2-year).",
          "recommendedTypes": []
        },
        {
          "name": "_resolutionRate",
          "description": "Rate to determine resolution fee for locker (e.g., 20 = 5% of remainder).",
          "recommendedTypes": []
        },
        {
          "name": "_swiftResolverTokenBalance",
          "description": "Token balance required to perform swift resolution.",
          "recommendedTypes": []
        },
        {
          "name": "_userReward",
          "description": "Reward amount granted to LXL users in `userRewardToken`.",
          "recommendedTypes": []
        },
        {
          "name": "_lockerTerms",
          "description": "General terms wrapping LXL.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateSwiftResolverStatus(string,bool)",
      "name": "updateSwiftResolverStatus",
      "description": "Swift resolvers call to update LXL service status. Swift resolvers must first confirm to participate and can continue with details / cancel LXL service.",
      "parameterDecorators": [
        {
          "name": "details",
          "description": "Context re: status update.",
          "recommendedTypes": []
        },
        {
          "name": "registered",
          "description": "If `true`, swift resolver can participate in LXL resolution.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userReward()",
      "name": "userReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "userRewardToken()",
      "name": "userRewardToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "wETH()",
      "name": "wETH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "LXL `client` or `clientOracle` can withdraw `sum` remainder after `termination`. `release()` can still be called by `client` or `clientOracle` after `termination` to preserve extension option.",
      "parameterDecorators": [
        {
          "name": "registration",
          "description": "Registered LXL number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}