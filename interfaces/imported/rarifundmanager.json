{
  "schema": "../schema.json",
  "tags": [],
  "name": "RariFundManager",
  "description": "RariFundManager. This contract is the primary contract powering the Rari Stable Pool. Anyone can deposit to the fund with deposit(string currencyCode, uint256 amount). Anyone can withdraw their funds (with interest) from the fund with withdraw(string currencyCode, uint256 amount).",
  "eventDecorators": [
    {
      "signature": "Deposit(string,address,address,uint256,uint256,uint256)",
      "name": "Deposit",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "currencyCode",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "payee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountUsd",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rftMinted",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundControllerSet(address)",
      "name": "FundControllerSet",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundDisabled()",
      "name": "FundDisabled",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": []
    },
    {
      "signature": "FundEnabled()",
      "name": "FundEnabled",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": []
    },
    {
      "signature": "FundManagerUpgraded(address)",
      "name": "FundManagerUpgraded",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundPriceConsumerSet(address)",
      "name": "FundPriceConsumerSet",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundProxySet(address)",
      "name": "FundProxySet",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundRebalancerSet(address)",
      "name": "FundRebalancerSet",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "newAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundTokenSet(address)",
      "name": "FundTokenSet",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "InterestFeeDeposit(address,uint256)",
      "name": "InterestFeeDeposit",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountUsd",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdrawal(string,address,address,uint256,uint256,uint256,uint256)",
      "name": "Withdrawal",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "currencyCode",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "payee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountUsd",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rftBurned",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "withdrawalFeeRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "authorizeFundManagerDataSource(address)",
      "name": "authorizeFundManagerDataSource",
      "description": "Upgrades RariFundManager. Authorizes the source for fund manager data (i.e., the old fund manager).",
      "parameterDecorators": [
        {
          "name": "authorizedFundManagerDataSource",
          "description": "Authorized source for data (i.e., the old fund manager).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "balanceOf(address)",
      "name": "balanceOf",
      "description": "Returns the total balance in USD (scaled by 1e18) of `account`. Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `getRawFundBalance`) potentially modifies the state.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The account whose balance we are calculating.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(string,uint256)",
      "name": "deposit",
      "description": "Deposits funds to the Rari Stable Pool in exchange for RFT. You may only deposit currencies accepted by the fund (see `isCurrencyAccepted(string currencyCode)`). Please note that you must approve RariFundManager to transfer at least `amount`.",
      "parameterDecorators": [
        {
          "name": "currencyCode",
          "description": "The currency code of the token to be deposited.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens to be deposited.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositFees()",
      "name": "depositFees",
      "description": "Deposits all accrued fees on interest back into the fund on behalf of the master beneficiary.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositTo(address,string,uint256)",
      "name": "depositTo",
      "description": "Deposits funds from `msg.sender` to the Rari Stable Pool in exchange for RFT minted to `to`. You may only deposit currencies accepted by the fund (see `isCurrencyAccepted(string currencyCode)`). Please note that you must approve RariFundManager to transfer at least `amount`.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address that will receieve the minted RFT.",
          "recommendedTypes": []
        },
        {
          "name": "currencyCode",
          "description": "The currency code of the token to be deposited.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens to be deposited.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "forwardLostFunds(address,address)",
      "name": "forwardLostFunds",
      "description": "Forwards tokens lost in the fund manager (in case of accidental transfer of funds to this contract).",
      "parameterDecorators": [
        {
          "name": "erc20Contract",
          "description": "The ERC20 contract address of the token to forward.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The destination address to which the funds will be forwarded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fundDisabled()",
      "name": "fundDisabled",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAcceptedCurrencies()",
      "name": "getAcceptedCurrencies",
      "description": "Returns an array of currency codes currently accepted for deposits.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFundBalance()",
      "name": "getFundBalance",
      "description": "Returns the fund's total investor balance (all RFT holders' funds but not unclaimed fees) of all currencies in USD (scaled by 1e18). Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `getRawFundBalance`) potentially modifies the state.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getInterestAccrued()",
      "name": "getInterestAccrued",
      "description": "Returns the total amount of interest accrued by past and current RFT holders (excluding the fees paid on interest) in USD (scaled by 1e18). Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `getRawFundBalance`) potentially modifies the state.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getInterestFeeRate()",
      "name": "getInterestFeeRate",
      "description": "Returns the fee rate on interest (proportion of raw interest accrued scaled by 1e18).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getInterestFeesGenerated()",
      "name": "getInterestFeesGenerated",
      "description": "Returns the amount of interest fees accrued by beneficiaries in USD (scaled by 1e18). Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `getRawFundBalance`) potentially modifies the state.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getInterestFeesUnclaimed()",
      "name": "getInterestFeesUnclaimed",
      "description": "Returns the total unclaimed amount of interest fees. Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `getRawFundBalance`) potentially modifies the state.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRawFundBalance()",
      "name": "getRawFundBalance",
      "description": "Returns the fund's raw total balance (all RFT holders' funds + all unclaimed fees) of all currencies in USD (scaled by 1e18). Returns `_rawFundBalanceCache` if set to save gas. Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `getRawFundBalance`) potentially modifies the state.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRawFundBalance(string)",
      "name": "getRawFundBalance",
      "description": "Returns the fund's raw total balance (all RFT holders' funds + all unclaimed fees) of the specified currency. Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `RariFundController.getPoolBalance`) potentially modifies the state.",
      "parameterDecorators": [
        {
          "name": "currencyCode",
          "description": "The currency code of the balance to be calculated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRawFundBalance(uint256[])",
      "name": "getRawFundBalance",
      "description": "Returns the fund's raw total balance (all RFT holders' funds + all unclaimed fees) of all currencies in USD (scaled by 1e18). Accepts prices in USD as a parameter to avoid calculating them every time. Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `getRawFundBalance`) potentially modifies the state.",
      "parameterDecorators": [
        {
          "name": "pricesInUsd",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRawInterestAccrued()",
      "name": "getRawInterestAccrued",
      "description": "Returns the raw total amount of interest accrued by the fund as a whole (including the fees paid on interest) in USD (scaled by 1e18). Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `getRawFundBalance`) potentially modifies the state.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getWithdrawalFeeRate()",
      "name": "getWithdrawalFeeRate",
      "description": "Returns the withdrawal fee rate (proportion of every withdrawal taken as a service fee scaled by 1e18).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize()",
      "name": "initialize",
      "description": "Initializer that sets supported ERC20 contract addresses and supported pools for each supported token.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initializes the contract setting the deployer as the initial owner.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isCurrencyAccepted(string)",
      "name": "isCurrencyAccepted",
      "description": "Returns a boolean indicating if deposits in `currencyCode` are currently accepted.",
      "parameterDecorators": [
        {
          "name": "currencyCode",
          "description": "The currency code to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rariFundController()",
      "name": "rariFundController",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rariFundPriceConsumer()",
      "name": "rariFundPriceConsumer",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rariFundToken()",
      "name": "rariFundToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAcceptedCurrencies(string[],bool[])",
      "name": "setAcceptedCurrencies",
      "description": "Marks `currencyCodes` as accepted or not accepted.",
      "parameterDecorators": [
        {
          "name": "currencyCodes",
          "description": "The currency codes to mark as accepted or not accepted.",
          "recommendedTypes": []
        },
        {
          "name": "accepted",
          "description": "An array of booleans indicating if each of `currencyCodes` is to be accepted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFundController(address)",
      "name": "setFundController",
      "description": "Sets or upgrades the RariFundController of the RariFundManager.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "The address of the new RariFundController contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFundDisabled(bool)",
      "name": "setFundDisabled",
      "description": "Disables/enables primary functionality of this RariFundManager so contract(s) can be upgraded.",
      "parameterDecorators": [
        {
          "name": "disabled",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFundManagerData(tuple(int256,int256,int256,uint256))",
      "name": "setFundManagerData",
      "description": "Upgrades RariFundManager. Sets data receieved from the old contract.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "The data from the old contract necessary to initialize the new contract.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "netDeposits",
              "description": "",
              "type": "int256"
            },
            {
              "name": "rawInterestAccruedAtLastFeeRateChange",
              "description": "",
              "type": "int256"
            },
            {
              "name": "interestFeesGeneratedAtLastFeeRateChange",
              "description": "",
              "type": "int256"
            },
            {
              "name": "interestFeesClaimed",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFundPriceConsumer(address)",
      "name": "setFundPriceConsumer",
      "description": "Sets or upgrades the RariFundPriceConsumer of the RariFundManager.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "The address of the new RariFundPriceConsumer contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFundProxy(address)",
      "name": "setFundProxy",
      "description": "Sets or upgrades the RariFundProxy of the RariFundManager.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "The address of the new RariFundProxy contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFundRebalancer(address)",
      "name": "setFundRebalancer",
      "description": "Sets or upgrades the rebalancer of the RariFundManager.",
      "parameterDecorators": [
        {
          "name": "newAddress",
          "description": "The Ethereum address of the new rebalancer server.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFundToken(address)",
      "name": "setFundToken",
      "description": "Sets or upgrades the RariFundToken of the RariFundManager.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "The address of the new RariFundToken contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setInterestFeeMasterBeneficiary(address)",
      "name": "setInterestFeeMasterBeneficiary",
      "description": "Sets the master beneficiary of interest fees.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The master beneficiary of fees on interest; i.e., the recipient of all fees on interest.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setInterestFeeRate(uint256)",
      "name": "setInterestFeeRate",
      "description": "Sets the fee rate on interest.",
      "parameterDecorators": [
        {
          "name": "rate",
          "description": "The proportion of interest accrued to be taken as a service fee (scaled by 1e18).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWithdrawalFeeMasterBeneficiary(address)",
      "name": "setWithdrawalFeeMasterBeneficiary",
      "description": "Sets the master beneficiary of withdrawal fees.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The master beneficiary of withdrawal fees; i.e., the recipient of all withdrawal fees.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWithdrawalFeeRate(uint256)",
      "name": "setWithdrawalFeeRate",
      "description": "Sets the withdrawal fee rate.",
      "parameterDecorators": [
        {
          "name": "rate",
          "description": "The proportion of every withdrawal taken as a service fee (scaled by 1e18).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeFundManager(address)",
      "name": "upgradeFundManager",
      "description": "Upgrades RariFundManager. Sends data to the new contract and sets the new RariFundToken minter.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "The address of the new RariFundManager contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(string,uint256)",
      "name": "withdraw",
      "description": "Withdraws funds from the Rari Stable Pool in exchange for RFT. You may only withdraw currencies held by the fund (see `getRawFundBalance(string currencyCode)`). Please note that you must approve RariFundManager to burn of the necessary amount of RFT.",
      "parameterDecorators": [
        {
          "name": "currencyCode",
          "description": "The currency code of the token to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens to be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawFrom(address,string[],uint256[])",
      "name": "withdrawFrom",
      "description": "Withdraws multiple currencies from the Rari Stable Pool to `msg.sender` (RariFundProxy) in exchange for RFT burned from `from`. You may only withdraw currencies held by the fund (see `getRawFundBalance(string currencyCode)`). Please note that you must approve RariFundManager to burn of the necessary amount of RFT.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The address from which RFT will be burned.",
          "recommendedTypes": []
        },
        {
          "name": "currencyCodes",
          "description": "The currency codes of the tokens to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "amounts",
          "description": "The amounts of the tokens to be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}