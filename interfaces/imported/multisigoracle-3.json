{
  "schema": "../schema.json",
  "tags": [
    "oracles"
  ],
  "name": "MultiSigOracle",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "Pools(uint256)",
      "name": "Pools",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addPool(address)",
      "name": "addPool",
      "description": "Add a new Liquidity Pool.",
      "parameterDecorators": [
        {
          "name": "_lpPool",
          "description": "Address of Liquidity Pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "bm()",
      "name": "bm",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "confirmRebasement()",
      "name": "confirmRebasement",
      "description": "Confirms and executes a pending rebasement proposal. Prohibits further proposals for 18 hours.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "denyRebasement()",
      "name": "denyRebasement",
      "description": "Denies a pending rebasement proposal and allows the creation of a new proposal.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initiateRebasement(uint256,bool)",
      "name": "initiateRebasement",
      "description": "Initiates a rebasement proposal that has to be confirmed by another owner of the contract to be executed. Can't be called while another proposal is pending.",
      "parameterDecorators": [
        {
          "name": "_supplyDelta",
          "description": "Change in totalSupply of the Benchmark token.",
          "recommendedTypes": []
        },
        {
          "name": "_increaseSupply",
          "description": "Whether to increase or decrease the totalSupply of the Benchmark token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pendingRebasement()",
      "name": "pendingRebasement",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "initiator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "supplyDelta",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "increaseSupply",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "executed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removePool(uint256)",
      "name": "removePool",
      "description": "Remove a Liquidity Pool.",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "Index of Liquidity Pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStandardRewards(uint256)",
      "name": "setStandardRewards",
      "description": "Change Standard staking rewards.",
      "parameterDecorators": [
        {
          "name": "_standardRewards",
          "description": "New amount of rewards.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "standard()",
      "name": "standard",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "standardRewards()",
      "name": "standardRewards",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawMark()",
      "name": "withdrawMark",
      "description": "Remove all MARK deposited on this contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}