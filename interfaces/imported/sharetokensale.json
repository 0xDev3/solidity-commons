{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "ShareTokenSale",
  "description": "",
  "eventDecorators": [
    {
      "signature": "EndTokenSale(uint256,uint256)",
      "name": "EndTokenSale",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "round",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "time",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerChanged(address)",
      "name": "OwnerChanged",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Purchase(address,uint256,uint256)",
      "name": "Purchase",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "round",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Release(address,uint256)",
      "name": "Release",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "end(uint256,uint256)",
      "name": "end",
      "description": "End current round Requirements Current round should be Seed or Private Implementations 1. Validate requirements 2. Update _canPurchase property 3. Burn all remain tokens of this round 4. Call to dbContract to end current round.",
      "parameterDecorators": [
        {
          "name": "round",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "time",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getShareholderBalance(address,uint256)",
      "name": "getShareholderBalance",
      "description": "Get shareholder's token balance by `round`.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "round",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getShareholderCanTransfer()",
      "name": "getShareholderCanTransfer",
      "description": "Get the state to check whether shareholders can transfer BNU or not.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isContractActive()",
      "name": "isContractActive",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "purchase(address,uint256,uint256)",
      "name": "purchase",
      "description": "Process to purchase token.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "account address to purchase.",
          "recommendedTypes": []
        },
        {
          "name": "tokenAmount",
          "description": "purchased amount.",
          "recommendedTypes": []
        },
        {
          "name": "round",
          "description": "round to purchase Requirements: 1. Can purchase 2. Time to purchase is available 3. Remain token amount is greater than or equals `amount` Implementations: 1. Validate the remain token amount 2. Update purchased token amount for `account` 3. Create purchased history for `account` 4. Reduce remain amount for this round 5. Process to raise BNF fund 6. Check to end current round if all tokens are sold 7. Emit event.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "release(uint256)",
      "name": "release",
      "description": "Release token for each stage of specific round.",
      "parameterDecorators": [
        {
          "name": "round",
          "description": "Round to release token Requirements: 1. Round should be Seed or Private 2. Processing round percent should be less than or equals 100% Implementations: 1. Get all shareholders to process 2. For each shareholder, calculate released token and pay 3. Create released history 4. Increase total release percent.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBNUStoreContract(address)",
      "name": "setBNUStoreContract",
      "description": "",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBnfTokenContract(address)",
      "name": "setBnfTokenContract",
      "description": "",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setContractStatus(bool)",
      "name": "setContractStatus",
      "description": "Update contract status to make sure this contract can be executed or not.",
      "parameterDecorators": [
        {
          "name": "status",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setContracts(address,address,address)",
      "name": "setContracts",
      "description": "Set contract addresses.",
      "parameterDecorators": [
        {
          "name": "dbAddress",
          "description": "new database contract address.",
          "recommendedTypes": []
        },
        {
          "name": "bnuStoreAddress",
          "description": "new BNU contract address.",
          "recommendedTypes": []
        },
        {
          "name": "bnfAddress",
          "description": "new BNF contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDbContract(address)",
      "name": "setDbContract",
      "description": "",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwner(address)",
      "name": "setOwner",
      "description": "Change contract's owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "If success return true; else return false Requirements: 1. Only current owner can execute 2. `newOwner` is not zero address 3. `newOwner` is not current owner Implementations: 1. Validate requirements 2. Set current owner is newOwner 3. Emit Events 4. Return result.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setShareholderCanTransfer(bool)",
      "name": "setShareholderCanTransfer",
      "description": "Set the state to check whether shareholders can transfer BNU or not.",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "shareholderTransfer(address,address,uint256,uint256)",
      "name": "shareholderTransfer",
      "description": "Transfer BNU between shareholders.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "shareholder sender.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "shareholder receiver.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "BNU token amount to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "round",
          "description": "Seed or Private round Requirements 1. Can transfer BNU now 1. `from` and `to` is not zero address 2. `amount` is greater than zero 3. `from` has enough `amount` token in `round` Implementations 1. Validate requirements 2. Update from and to BNU amount: Decrease from BNU token amount and increase to BNU token amount 3. Update from and to BNF amount: Decrease from BNF token amount and increase to BNF token amount 4. emit Events.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Holders can withdraw released token for each round in released time.",
      "parameterDecorators": [
        {
          "name": "round",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}