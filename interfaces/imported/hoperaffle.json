{
  "schema": "../schema.json",
  "tags": [],
  "name": "HopeRaffle",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RaffleAdded(uint256)",
      "name": "RaffleAdded",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RaffleDisabled(uint256,bool)",
      "name": "RaffleDisabled",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "isDisabled",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RaffleInitialized(uint256,uint256)",
      "name": "RaffleInitialized",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nftId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RaffleSettled(address,uint256)",
      "name": "RaffleSettled",
      "description": "",
      "parameterDecorators": [
        {
          "name": "winner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "ticketsPurchased",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TicketsPurchased(address,uint256)",
      "name": "TicketsPurchased",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addRaffle(uint256[],uint256,uint256)",
      "name": "addRaffle",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_nftIds",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_ticketsRequired",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_ticketPrice",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buyTickets(uint256,uint256,bool)",
      "name": "buyTickets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_useHopeNonTradable",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRaffleNftIds(uint256)",
      "name": "getRaffleNftIds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRaffleParticipants(uint256)",
      "name": "getRaffleParticipants",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRaffleUserTicketBalance(uint256,address)",
      "name": "getRaffleUserTicketBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hope()",
      "name": "hope",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hopeNonTradable()",
      "name": "hopeNonTradable",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
      "name": "onERC1155BatchReceived",
      "description": "Handle the receipt of multiple ERC1155 token types. An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated This function MAY throw to revert and reject the transfer Return of other amount than the magic value WILL result in the transaction being reverted Note: The token contract address is always the message sender.",
      "parameterDecorators": [
        {
          "name": "_operator",
          "description": "The address which called the `safeBatchTransferFrom` function.",
          "recommendedTypes": []
        },
        {
          "name": "_from",
          "description": "The address which previously owned the token.",
          "recommendedTypes": []
        },
        {
          "name": "_ids",
          "description": "An array containing ids of each token being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "_amounts",
          "description": "An array containing amounts of each token being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "Additional data with no specified format.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`.",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onERC1155Received(address,address,uint256,uint256,bytes)",
      "name": "onERC1155Received",
      "description": "Handle the receipt of a single ERC1155 token type. An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated This function MAY throw to revert and reject the transfer Return of other amount than the magic value MUST result in the transaction being reverted Note: The token contract address is always the message sender.",
      "parameterDecorators": [
        {
          "name": "_operator",
          "description": "The address which called the `safeTransferFrom` function.",
          "recommendedTypes": []
        },
        {
          "name": "_from",
          "description": "The address which previously owned the token.",
          "recommendedTypes": []
        },
        {
          "name": "_id",
          "description": "The id of the token being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of tokens being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "Additional data with no specified format.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`.",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "raffles(uint256)",
      "name": "raffles",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "currentNftIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "ticketsPurchased",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "ticketsRequired",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "ticketPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "isDisabled",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rafflesLength()",
      "name": "rafflesLength",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rmu()",
      "name": "rmu",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setRaffleDisabled(uint256,bool)",
      "name": "setRaffleDisabled",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_state",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settleRaffle(uint256)",
      "name": "settleRaffle",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types. This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface. This function MUST NOT consume more than 5,000 gas.",
      "parameterDecorators": [
        {
          "name": "interfaceID",
          "description": "The ERC-165 interface ID that is queried for support.s.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Whether ERC-165 or ERC1155TokenReceiver interfaces are supported.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}