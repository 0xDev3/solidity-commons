{
  "schema": "../schema.json",
  "tags": [],
  "name": "Attestations",
  "description": "Contract mapping identifiers to accounts.",
  "eventDecorators": [
    {
      "signature": "AttestationCompleted(bytes32,address,address)",
      "name": "AttestationCompleted",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "issuer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AttestationExpiryBlocksSet(uint256)",
      "name": "AttestationExpiryBlocksSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AttestationIssuerSelected(bytes32,address,address,address)",
      "name": "AttestationIssuerSelected",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "issuer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "attestationRequestFeeToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AttestationRequestFeeSet(address,uint256)",
      "name": "AttestationRequestFeeSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AttestationsRequested(bytes32,address,uint256,address)",
      "name": "AttestationsRequested",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "attestationsRequested",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "attestationRequestFeeToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AttestationsTransferred(bytes32,address,address)",
      "name": "AttestationsTransferred",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fromAccount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "toAccount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MaxAttestationsSet(uint256)",
      "name": "MaxAttestationsSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RegistrySet(address)",
      "name": "RegistrySet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SelectIssuersWaitBlocksSet(uint256)",
      "name": "SelectIssuersWaitBlocksSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransferApproval(address,bytes32,address,address,bool)",
      "name": "TransferApproval",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "approver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "indentifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "approved",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdrawal(address,address,uint256)",
      "name": "Withdrawal",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "approveTransfer(bytes32,uint256,address,address,bool)",
      "name": "approveTransfer",
      "description": "Update the approval status of allowing an attestation identifier mapping to be transfered from an address to another. The \"to\" or \"from\" addresses must both approve. If the other has already approved, then the transfer is executed.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "The identifier for this attestation.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the account in the accounts array.",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "The current attestation address to which the identifier is mapped.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The new address to map to identifier.",
          "recommendedTypes": []
        },
        {
          "name": "status",
          "description": "The approval status.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "attestationExpiryBlocks()",
      "name": "attestationExpiryBlocks",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "attestationRequestFees(address)",
      "name": "attestationRequestFees",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "batchGetAttestationStats(bytes32[])",
      "name": "batchGetAttestationStats",
      "description": "Batch lookup function to determine attestation stats for a list of identifiers.",
      "parameterDecorators": [
        {
          "name": "identifiersToLookup",
          "description": "Array of n identifiers.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64[]"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkProofOfPossession(address,bytes,bytes)",
      "name": "checkProofOfPossession",
      "description": "Checks a BLS proof of possession.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "The address signed by the BLS key to generate the proof of possession.",
          "recommendedTypes": []
        },
        {
          "name": "blsKey",
          "description": "The BLS public key that the validator is using for consensus, should pass proof of possession. 48 bytes.",
          "recommendedTypes": []
        },
        {
          "name": "blsPop",
          "description": "The BLS public key proof-of-possession, which consists of a signature on the account address. 96 bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "complete(bytes32,uint8,bytes32,bytes32)",
      "name": "complete",
      "description": "Submit the secret message sent by the issuer to complete the attestation request. Throws if there is no matching outstanding attestation request.Throws if the attestation window has passed.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "The hash of the identifier for this attestation.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery id of the incoming ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Output value r of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Output value s of the ECDSA signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "fractionMulExp",
      "description": "calculate a * b^x for fractions a, b to `decimals` precision.",
      "parameterDecorators": [
        {
          "name": "aNumerator",
          "description": "Numerator of first fraction.",
          "recommendedTypes": []
        },
        {
          "name": "aDenominator",
          "description": "Denominator of first fraction.",
          "recommendedTypes": []
        },
        {
          "name": "bNumerator",
          "description": "Numerator of exponentiated fraction.",
          "recommendedTypes": []
        },
        {
          "name": "bDenominator",
          "description": "Denominator of exponentiated fraction.",
          "recommendedTypes": []
        },
        {
          "name": "exponent",
          "description": "exponent to raise b to.",
          "recommendedTypes": []
        },
        {
          "name": "_decimals",
          "description": "precision.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAttestationIssuers(bytes32,address)",
      "name": "getAttestationIssuers",
      "description": "Returns selected attestation issuers for a identifier/account pair.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "Hash of the identifier.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAttestationRequestFee(address)",
      "name": "getAttestationRequestFee",
      "description": "Returns the fee set for a particular token.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Address of the attestationRequestFeeToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAttestationState(bytes32,address,address)",
      "name": "getAttestationState",
      "description": "Returns the state of a specific attestation.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "Hash of the identifier.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account.",
          "recommendedTypes": []
        },
        {
          "name": "issuer",
          "description": "Address of the issuer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAttestationStats(bytes32,address)",
      "name": "getAttestationStats",
      "description": "Returns attestation stats for a identifier/account pair.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "Hash of the identifier.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBlockNumberFromHeader(bytes)",
      "name": "getBlockNumberFromHeader",
      "description": "Parses block number out of header.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCompletableAttestations(bytes32,address)",
      "name": "getCompletableAttestations",
      "description": "Returns the state of all attestations that are completable.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "Hash of the identifier.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32[]"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochNumber()",
      "name": "getEpochNumber",
      "description": "Returns the epoch number at a block.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochNumberOfBlock(uint256)",
      "name": "getEpochNumberOfBlock",
      "description": "Returns the epoch number at a block.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number where epoch number is calculated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochSize()",
      "name": "getEpochSize",
      "description": "Returns the current epoch size in blocks.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMaxAttestations()",
      "name": "getMaxAttestations",
      "description": "Query 'maxAttestations'.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getParentSealBitmap(uint256)",
      "name": "getParentSealBitmap",
      "description": "Gets the parent seal bitmap from the header at the given block number.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number to retrieve. Must be within 4 epochs of the current number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUnselectedRequest(bytes32,address)",
      "name": "getUnselectedRequest",
      "description": "Returns the unselected attestation request for an identifier/account pair, if any.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "Hash of the identifier.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVerifiedSealBitmapFromHeader(bytes)",
      "name": "getVerifiedSealBitmapFromHeader",
      "description": "Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header. If the parent hash is not in the blockchain, verification fails.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVersionNumber()",
      "name": "getVersionNumber",
      "description": "Returns the storage, major, minor, and patch version of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hashHeader(bytes)",
      "name": "hashHeader",
      "description": "Computes hash of header.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,uint256,uint256,uint256,address[],uint256[])",
      "name": "initialize",
      "description": "Used in place of the constructor to allow the contract to be upgradable via proxy.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "The address of the registry core smart contract.",
          "recommendedTypes": []
        },
        {
          "name": "_attestationExpiryBlocks",
          "description": "The new limit on blocks allowed to come between requesting an attestation and completing it.",
          "recommendedTypes": []
        },
        {
          "name": "_selectIssuersWaitBlocks",
          "description": "The wait period in blocks to call selectIssuers on attestation requests.",
          "recommendedTypes": []
        },
        {
          "name": "_maxAttestations",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "attestationRequestFeeTokens",
          "description": "The address of tokens that fees should be payable in.",
          "recommendedTypes": []
        },
        {
          "name": "attestationRequestFeeValues",
          "description": "The corresponding fee values.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lookupAccountsForIdentifier(bytes32)",
      "name": "lookupAccountsForIdentifier",
      "description": "",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxAttestations()",
      "name": "maxAttestations",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minQuorumSize(uint256)",
      "name": "minQuorumSize",
      "description": "Returns the minimum number of required signers for a given block number. Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3)).",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minQuorumSizeInCurrentSet()",
      "name": "minQuorumSizeInCurrentSet",
      "description": "Computes byzantine quorum from current validator set size.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberValidatorsInCurrentSet()",
      "name": "numberValidatorsInCurrentSet",
      "description": "Gets the size of the current elected validator set.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberValidatorsInSet(uint256)",
      "name": "numberValidatorsInSet",
      "description": "Gets the size of the validator set that must sign the given block number.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number to retrieve the validator set from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingWithdrawals(address,address)",
      "name": "pendingWithdrawals",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registry()",
      "name": "registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "request(bytes32,uint256,address)",
      "name": "request",
      "description": "Commit to the attestation request of a hashed identifier. Note that if an attestation expires before it is completed, the fee is forfeited. This is to prevent folks from attacking validators by requesting attestations that they do not complete, and to increase the cost of validators attempting to manipulate the attestations protocol.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "The hash of the identifier to be attested.",
          "recommendedTypes": []
        },
        {
          "name": "attestationsRequested",
          "description": "The number of requested attestations for this request.",
          "recommendedTypes": []
        },
        {
          "name": "attestationRequestFeeToken",
          "description": "The address of the token with which the attestation fee will be paid.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requireNAttestationsRequested(bytes32,address,uint32)",
      "name": "requireNAttestationsRequested",
      "description": "Require that a given identifier/address pair has requested a specific number of attestations. It can be used when batching meta-transactions to validate attestation are requested as expected in untrusted scenarios.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "Hash of the identifier.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account.",
          "recommendedTypes": []
        },
        {
          "name": "expected",
          "description": "Number of expected attestations.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "revoke(bytes32,uint256)",
      "name": "revoke",
      "description": "Revokes an account for an identifier.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "The identifier for which to revoke.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the account in the accounts array.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "selectIssuers(bytes32)",
      "name": "selectIssuers",
      "description": "Selects the issuers for the most recent attestation request.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "The hash of the identifier to be attested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "selectIssuersWaitBlocks()",
      "name": "selectIssuersWaitBlocks",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAttestationExpiryBlocks(uint256)",
      "name": "setAttestationExpiryBlocks",
      "description": "Updates 'attestationExpiryBlocks'.",
      "parameterDecorators": [
        {
          "name": "_attestationExpiryBlocks",
          "description": "The new limit on blocks allowed to come between requesting an attestation and completing it.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAttestationRequestFee(address,uint256)",
      "name": "setAttestationRequestFee",
      "description": "Updates the fee for a particular token.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The address of the attestationRequestFeeToken.",
          "recommendedTypes": []
        },
        {
          "name": "fee",
          "description": "The fee in 'token' that is required for each attestation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxAttestations(uint256)",
      "name": "setMaxAttestations",
      "description": "Updates 'maxAttestations'.",
      "parameterDecorators": [
        {
          "name": "_maxAttestations",
          "description": "Maximum number of attestations that can be requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRegistry(address)",
      "name": "setRegistry",
      "description": "Updates the address pointing to a Registry contract.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "The address of a registry contract for routing to other contracts.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSelectIssuersWaitBlocks(uint256)",
      "name": "setSelectIssuersWaitBlocks",
      "description": "Updates 'selectIssuersWaitBlocks'.",
      "parameterDecorators": [
        {
          "name": "_selectIssuersWaitBlocks",
          "description": "The wait period in blocks to call selectIssuers on attestation requests.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferApprovals(address,bytes32)",
      "name": "transferApprovals",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "validateAttestationCode(bytes32,address,uint8,bytes32,bytes32)",
      "name": "validateAttestationCode",
      "description": "Validates the given attestation code. Throws if there is no matching outstanding attestation request.Throws if the attestation window has passed.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "The hash of the identifier to be attested.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "Address of the account.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery id of the incoming ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Output value r of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Output value s of the ECDSA signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validatorSignerAddressFromCurrentSet(uint256)",
      "name": "validatorSignerAddressFromCurrentSet",
      "description": "Gets a validator address from the current validator set.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "Index of requested validator in the validator set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validatorSignerAddressFromSet(uint256,uint256)",
      "name": "validatorSignerAddressFromSet",
      "description": "Gets a validator address from the validator set at the given block number.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "Index of requested validator in the validator set.",
          "recommendedTypes": []
        },
        {
          "name": "blockNumber",
          "description": "Block number to retrieve the validator set from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(address)",
      "name": "withdraw",
      "description": "Allows issuers to withdraw accumulated attestation rewards. Throws if msg.sender does not have any rewards to withdraw.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The address of the token that will be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}