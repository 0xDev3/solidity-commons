{"schema":"../schema.json","tags":[],"name":"Forwarder","description":"The Forwarder Implementation. This implementation of the `IForwarder` interface uses ERC-712 signatures and stored nonces for verification.","eventDecorators":[{"signature":"DomainRegistered(bytes32,bytes)","name":"DomainRegistered","description":"The governor sets token whitelist for an ERC1155 token.","parameterDecorators":[{"name":"domainSeparator","description":"","recommendedTypes":[],"indexed":true},{"name":"domainValue","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RequestTypeRegistered(bytes32,string)","name":"RequestTypeRegistered","description":"The governor sets token whitelist for an ERC1155 token.","parameterDecorators":[{"name":"typeHash","description":"","recommendedTypes":[],"indexed":true},{"name":"typeStr","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"EIP712_DOMAIN_TYPE()","name":"EIP712_DOMAIN_TYPE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"GENERIC_PARAMS()","name":"GENERIC_PARAMS","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"_getEncoded(tuple(address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes)","name":"_getEncoded","description":"Creates a byte array that is a valid ABI encoding of a request of a `RequestType` type. See `execute()`.","parameterDecorators":[{"name":"req","description":"","recommendedTypes":[],"parameters":[{"name":"from","description":"","type":"address"},{"name":"to","description":"","type":"address"},{"name":"value","description":"","type":"uint256"},{"name":"gas","description":"","type":"uint256"},{"name":"nonce","description":"","type":"uint256"},{"name":"data","description":"","type":"bytes"},{"name":"validUntilTime","description":"","type":"uint256"}]},{"name":"requestTypeHash","description":"","recommendedTypes":[]},{"name":"suffixData","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"domains(bytes32)","name":"domains","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"execute(tuple(address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)","name":"execute","description":"Executes a transaction specified by the `ForwardRequest`. The transaction is first verified and then executed. The success flag and returned bytes array of the `CALL` are returned as-is. This method would revert only in case of a verification error. All the target errors are reported using the returned success flag and returned bytes array.","parameterDecorators":[{"name":"domainSeparator","description":"The domain used when signing this request.","recommendedTypes":[],"parameters":[{"name":"from","description":"","type":"address"},{"name":"to","description":"","type":"address"},{"name":"value","description":"","type":"uint256"},{"name":"gas","description":"","type":"uint256"},{"name":"nonce","description":"","type":"uint256"},{"name":"data","description":"","type":"bytes"},{"name":"validUntilTime","description":"","type":"uint256"}]},{"name":"domainSeparator","description":"The domain used when signing this request.","recommendedTypes":[]},{"name":"requestTypeHash","description":"The request type used when signing this request.","recommendedTypes":[]},{"name":"suffixData","description":"The ABI-encoded extension data for the current `RequestType` used when signing this request.","recommendedTypes":[]},{"name":"suffixData","description":"The ABI-encoded extension data for the current `RequestType` used when signing this request.","recommendedTypes":[]}],"returnDecorators":[{"name":"success","description":"The success flag of the underlying `CALL` to the target address.","recommendedTypes":[],"solidityType":"bool"},{"name":"ret","description":"The byte array returned by the underlying `CALL` to the target address.","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":false},{"signature":"getNonce(address)","name":"getNonce","description":"","parameterDecorators":[{"name":"from","description":"The address of a sender.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The nonce for this address.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"registerDomainSeparator(string,string)","name":"registerDomainSeparator","description":"Register a new domain separator.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`. The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address. This method accepts the domain name and version to create and register the domain separator value.","parameterDecorators":[{"name":"name","description":"The domain's display name.","recommendedTypes":[]},{"name":"version","description":"The domain/protocol version.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"registerRequestType(string,string)","name":"registerRequestType","description":"Register a new Request typehash.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.","parameterDecorators":[{"name":"typeName","description":"The name of the request type.","recommendedTypes":[]},{"name":"typeSuffix","description":"Any extra data after the generic params. Must contain add at least one param. The generic ForwardRequest type is always registered by the constructor.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"typeHashes(bytes32)","name":"typeHashes","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"verify(tuple(address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)","name":"verify","description":"Verify the transaction is valid and can be executed. Implementations must validate the signature and the nonce of the request are correct. Does not revert and returns successfully if the input is valid. Reverts if any validation has failed. For instance, if either signature or nonce are incorrect. Reverts if `domainSeparator` or `requestTypeHash` are not registered as well.","parameterDecorators":[{"name":"req","description":"","recommendedTypes":[],"parameters":[{"name":"from","description":"","type":"address"},{"name":"to","description":"","type":"address"},{"name":"value","description":"","type":"uint256"},{"name":"gas","description":"","type":"uint256"},{"name":"nonce","description":"","type":"uint256"},{"name":"data","description":"","type":"bytes"},{"name":"validUntilTime","description":"","type":"uint256"}]},{"name":"domainSeparator","description":"","recommendedTypes":[]},{"name":"requestTypeHash","description":"","recommendedTypes":[]},{"name":"suffixData","description":"","recommendedTypes":[]},{"name":"sig","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":true}]}