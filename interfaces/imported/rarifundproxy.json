{
  "schema": "../schema.json",
  "tags": [],
  "name": "RariFundProxy",
  "description": "RariFundProxy. This contract faciliates deposits to RariFundManager from exchanges and withdrawals from RariFundManager for exchanges.",
  "eventDecorators": [
    {
      "signature": "FundManagerSet(address)",
      "name": "FundManagerSet",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GsnTrustedSignerSet(address)",
      "name": "GsnTrustedSignerSet",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "newAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PostWithdrawalExchange(string,address,address,uint256,uint256,uint256)",
      "name": "PostWithdrawalExchange",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "inputCurrencyCode",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "outputErc20Contract",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "payee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "withdrawalAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "withdrawalAmountAfterFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "makerAssetFilledAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PreDepositExchange(address,string,address,uint256,uint256)",
      "name": "PreDepositExchange",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "inputErc20Contract",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "outputCurrencyCode",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "payee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "takerAssetFilledAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "depositAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RelayHubChanged(address,address)",
      "name": "RelayHubChanged",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "oldRelayHub",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newRelayHub",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)",
      "name": "acceptRelayedCall",
      "description": "Ensures that only transactions with a trusted signature can be relayed through the GSN.",
      "parameterDecorators": [
        {
          "name": "relay",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "encodedFunction",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "transactionFee",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "gasPrice",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "gasLimit",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "approvalData",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(string,uint256)",
      "name": "deposit",
      "description": "Deposits funds to RariFund in exchange for RFT (with GSN support). You may only deposit currencies accepted by the fund (see `RariFundManager.isCurrencyAccepted(string currencyCode)`). Please note that you must approve RariFundProxy to transfer at least `amount`.",
      "parameterDecorators": [
        {
          "name": "currencyCode",
          "description": "The currency code of the token to be deposited.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of tokens to be deposited.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchangeAndDeposit(string,uint256,string)",
      "name": "exchangeAndDeposit",
      "description": "Exchanges and deposits funds to RariFund in exchange for RFT (no slippage and low fees via mStable, but only supports DAI, USDC, USDT, TUSD, and mUSD). Please note that you must approve RariFundProxy to transfer at least `inputAmount`.",
      "parameterDecorators": [
        {
          "name": "inputCurrencyCode",
          "description": "The currency code of the token to be exchanged.",
          "recommendedTypes": []
        },
        {
          "name": "inputAmount",
          "description": "The amount of tokens to be exchanged (including taker fees).",
          "recommendedTypes": []
        },
        {
          "name": "outputCurrencyCode",
          "description": "The currency code of the token to be deposited after exchange.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchangeAndDeposit(address,uint256,string,tuple(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],uint256)",
      "name": "exchangeAndDeposit",
      "description": "Exchanges and deposits funds to RariFund in exchange for RFT (via 0x). You can retrieve orders from the 0x swap API (https://0x.org/docs/api#get-swapv0quote). Please note that you must approve RariFundProxy to transfer at least `inputAmount` unless you are inputting ETH. You also must input at least enough ETH to cover the protocol fee (and enough to cover `orders` if you are inputting ETH). We should be able to make this function external and use calldata for all parameters, but Solidity does not support calldata structs (https://github.com/ethereum/solidity/issues/5479).",
      "parameterDecorators": [
        {
          "name": "inputErc20Contract",
          "description": "The ERC20 contract address of the token to be exchanged. Set to address(0) to input ETH.",
          "recommendedTypes": []
        },
        {
          "name": "inputAmount",
          "description": "The amount of tokens to be exchanged (including taker fees).",
          "recommendedTypes": []
        },
        {
          "name": "outputCurrencyCode",
          "description": "The currency code of the token to be deposited after exchange.",
          "recommendedTypes": []
        },
        {
          "name": "orders",
          "description": "The limit orders to be filled in ascending order of the price you pay.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "makerAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "takerAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "feeRecipientAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "senderAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "makerAssetAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "takerAssetAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "makerFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "takerFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "expirationTimeSeconds",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "salt",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "makerAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "takerAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "makerFeeAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "takerFeeAssetData",
              "description": "",
              "type": "bytes"
            }
          ]
        },
        {
          "name": "signatures",
          "description": "The signatures for the orders.",
          "recommendedTypes": []
        },
        {
          "name": "takerAssetFillAmount",
          "description": "The amount of the taker asset to sell (excluding taker fees).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "forwardLostFunds(address,address)",
      "name": "forwardLostFunds",
      "description": "Forwards tokens lost in the fund proxy (in case of accidental transfer of funds to this contract).",
      "parameterDecorators": [
        {
          "name": "erc20Contract",
          "description": "The ERC20 contract address of the token to forward.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The destination address to which the funds will be forwarded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getHubAddr()",
      "name": "getHubAddr",
      "description": "Returns the address of the {IRelayHub} contract for this recipient.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRawFundBalancesAndPrices()",
      "name": "getRawFundBalancesAndPrices",
      "description": "Returns the fund controller's contract balance of each currency, balance of each pool of each currency (checking `_poolsWithFunds` first to save gas), and price of each currency. Ideally, we can add the `view` modifier, but Compound's `getUnderlyingBalance` function (called by `getPoolBalance`) potentially modifies the state.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string[]"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8[][]"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[][]"
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize()",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initializes the contract setting the deployer as the initial owner.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "postRelayedCall(bytes,bool,uint256,bytes32)",
      "name": "postRelayedCall",
      "description": "See `IRelayRecipient.postRelayedCall`. * This function should not be overriden directly, use `_postRelayedCall` instead. * * Requirements: * - the caller must be the `RelayHub` contract.",
      "parameterDecorators": [
        {
          "name": "context",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "success",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "actualCharge",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "preRetVal",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "preRelayedCall(bytes)",
      "name": "preRelayedCall",
      "description": "See `IRelayRecipient.preRelayedCall`. * This function should not be overriden directly, use `_preRelayedCall` instead. * * Requirements: * - the caller must be the `RelayHub` contract.",
      "parameterDecorators": [
        {
          "name": "context",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rariFundManager()",
      "name": "rariFundManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "relayHubVersion()",
      "name": "relayHubVersion",
      "description": "Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDefaultRelayHub()",
      "name": "setDefaultRelayHub",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFundManager(address)",
      "name": "setFundManager",
      "description": "Sets or upgrades the RariFundManager of the RariFundProxy.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "The address of the new RariFundManager contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGsnTrustedSigner(address)",
      "name": "setGsnTrustedSigner",
      "description": "Sets or upgrades the trusted GSN signer of the RariFundProxy.",
      "parameterDecorators": [
        {
          "name": "newAddress",
          "description": "The Ethereum address of the new trusted GSN signer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAndExchange(string[],uint256[],address,tuple(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[][],bytes[][],uint256[],uint256[])",
      "name": "withdrawAndExchange",
      "description": "Withdraws funds from RariFund in exchange for RFT and exchanges to them to the desired currency (if no 0x orders are supplied, exchanges DAI, USDC, USDT, TUSD, and mUSD via mStable). You can retrieve orders from the 0x swap API (https://0x.org/docs/api#get-swapv0quote). Please note that you must approve RariFundManager to burn of the necessary amount of RFT. You also must input at least enough ETH to cover the protocol fees. We should be able to make this function external and use calldata for all parameters, but Solidity does not support calldata structs (https://github.com/ethereum/solidity/issues/5479).",
      "parameterDecorators": [
        {
          "name": "inputCurrencyCodes",
          "description": "The currency codes of the tokens to be withdrawn and exchanged.",
          "recommendedTypes": []
        },
        {
          "name": "inputAmounts",
          "description": "The amounts of tokens to be withdrawn and exchanged (including taker fees).",
          "recommendedTypes": []
        },
        {
          "name": "outputErc20Contract",
          "description": "The ERC20 contract address of the token to be outputted by the exchange. Set to address(0) to output ETH.",
          "recommendedTypes": []
        },
        {
          "name": "orders",
          "description": "The limit orders to be filled in ascending order of the price you pay.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "makerAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "takerAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "feeRecipientAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "senderAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "makerAssetAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "takerAssetAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "makerFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "takerFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "expirationTimeSeconds",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "salt",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "makerAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "takerAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "makerFeeAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "takerFeeAssetData",
              "description": "",
              "type": "bytes"
            }
          ]
        },
        {
          "name": "signatures",
          "description": "The signatures for the orders.",
          "recommendedTypes": []
        },
        {
          "name": "makerAssetFillAmounts",
          "description": "The amounts of the maker assets to buy.",
          "recommendedTypes": []
        },
        {
          "name": "protocolFees",
          "description": "The protocol fees to pay to 0x in ETH for each order.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}