{
  "schema": "../schema.json",
  "tags": [],
  "name": "DropMetadataRenderer",
  "description": "Drops metadata system.",
  "eventDecorators": [
    {
      "signature": "MetadataUpdated(address,string,string,string,uint256)",
      "name": "MetadataUpdated",
      "description": "Event to mark updated metadata information.",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "metadataBase",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "metadataExtension",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "contractURI",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "freezeAt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProvenanceHashUpdated(address,bytes32)",
      "name": "ProvenanceHashUpdated",
      "description": "Hash to mark updated provenance hash.",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "provenanceHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "contractURI()",
      "name": "contractURI",
      "description": "A contract URI for the given drop contract. reverts if a contract uri is not provided.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "contract uri for the contract metadata.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initializeWithData(bytes)",
      "name": "initializeWithData",
      "description": "Standard init for drop metadata from root drop contract.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "passed in for initialization.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "metadataBaseByContract(address)",
      "name": "metadataBaseByContract",
      "description": "NFT metadata by contract.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "base",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "extension",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "contractURI",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "freezeAt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "provenanceHashes(address)",
      "name": "provenanceHashes",
      "description": "Optional provenance hashes for NFT metadata by contract.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenURI(uint256)",
      "name": "tokenURI",
      "description": "A token URI for the given drops contract. reverts if a contract uri is not set.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "token URI for the given token ID and contract (set by msg.sender).",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateMetadataBase(address,string,string)",
      "name": "updateMetadataBase",
      "description": "Update metadata base URI and contract URI.",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "baseUri",
          "description": "new base URI.",
          "recommendedTypes": []
        },
        {
          "name": "newContractUri",
          "description": "new contract URI (can be an empty string).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateMetadataBaseWithDetails(address,string,string,string,uint256)",
      "name": "updateMetadataBaseWithDetails",
      "description": "Update metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing detailsUpdate metadata base URI, extension, contract URI and freezing details.",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "target contract to update metadata for.",
          "recommendedTypes": []
        },
        {
          "name": "metadataBase",
          "description": "new base URI to update metadata with.",
          "recommendedTypes": []
        },
        {
          "name": "metadataExtension",
          "description": "new extension to append to base metadata URI.",
          "recommendedTypes": []
        },
        {
          "name": "newContractURI",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "freezeAt",
          "description": "time to freeze the contract metadata at (set to 0 to disable).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateProvenanceHash(address,bytes32)",
      "name": "updateProvenanceHash",
      "description": "Update the provenance hash (optional) for a given nft.",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "target address to update.",
          "recommendedTypes": []
        },
        {
          "name": "provenanceHash",
          "description": "provenance hash to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}