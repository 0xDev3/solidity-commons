{
  "schema": "../schema.json",
  "tags": [],
  "name": "BlackScholesEstimate",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "blackScholesEstimate(uint256,uint256,uint256)",
      "name": "blackScholesEstimate",
      "description": "blackScholesEstimate calculates a rough price estimate for an ATM optioninput parameters should be transformed prior to being passed to the functionso as to remove decimal places otherwise results will be far less accurate.",
      "parameterDecorators": [
        {
          "name": "_vol",
          "description": "uint256 volatility of the underlying converted to remove decimals.",
          "recommendedTypes": []
        },
        {
          "name": "_underlying",
          "description": "uint256 price of the underlying asset.",
          "recommendedTypes": []
        },
        {
          "name": "_time",
          "description": "uint256 days to expiration in years multiplied to remove decimals.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "estimate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "retBasedBlackScholesEstimate(uint256[],uint256,uint256)",
      "name": "retBasedBlackScholesEstimate",
      "description": "fromReturnsBSestimate first calculates the stddev of an array of price returnsthen uses that as the volatility param for the blackScholesEstimate.",
      "parameterDecorators": [
        {
          "name": "_numbers",
          "description": "uint256[] array of price returns for volatility calculation.",
          "recommendedTypes": []
        },
        {
          "name": "_underlying",
          "description": "uint256 price of the underlying asset.",
          "recommendedTypes": []
        },
        {
          "name": "_time",
          "description": "uint256 days to expiration in years multiplied to remove decimals.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sqrt(uint256)",
      "name": "sqrt",
      "description": "sqrt calculates the square root of a given number xfor precision into decimals the number must firstbe multiplied by the precision factor desired.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "uint256 number for the calculation of square root.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stddev(uint256[])",
      "name": "stddev",
      "description": "stddev calculates the standard deviation for an array of integersprecision is the same as sqrt above meaning for higher precisionthe decimal place must be moved prior to passing the params.",
      "parameterDecorators": [
        {
          "name": "numbers",
          "description": "uint[] array of numbers to be used in calculation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "sd",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}