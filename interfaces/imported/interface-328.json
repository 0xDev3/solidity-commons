{
  "schema": "../schema.json",
  "tags": [
    "compound"
  ],
  "name": "CompoundMonitor",
  "description": "Contract implements logic of calling boost/repay in the automatic system.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "BOOST_GAS_COST()",
      "name": "BOOST_GAS_COST",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "BOOST_GAS_TOKEN()",
      "name": "BOOST_GAS_TOKEN",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "BOT_REGISTRY_ADDRESS()",
      "name": "BOT_REGISTRY_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DEFISAVER_LOGGER()",
      "name": "DEFISAVER_LOGGER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "GAS_TOKEN_INTERFACE_ADDRESS()",
      "name": "GAS_TOKEN_INTERFACE_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_GAS_PRICE()",
      "name": "MAX_GAS_PRICE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "REPAY_GAS_COST()",
      "name": "REPAY_GAS_COST",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "REPAY_GAS_TOKEN()",
      "name": "REPAY_GAS_TOKEN",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "admin()",
      "name": "admin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "boostFor(tuple(address,address,uint256,uint256,uint256,address,address,bytes,uint256),address[2],address)",
      "name": "boostFor",
      "description": "Bots call this method to boost for user when conditions are met. If the contract ownes gas token it will try and use it for gas price reduction.",
      "parameterDecorators": [
        {
          "name": "_exData",
          "description": "Exchange data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "srcAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "destAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "srcAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "destAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minPrice",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "wrapper",
              "description": "",
              "type": "address"
            },
            {
              "name": "exchangeAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "callData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "price0x",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "_cAddresses",
          "description": "cTokens addreses and exchange [cCollAddress, cBorrowAddress, exchangeAddress].",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "The actual address that owns the Compound position.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calcGasCost(uint256)",
      "name": "calcGasCost",
      "description": "Calculates gas cost (in Eth) of tx. Gas price is limited to MAX_GAS_PRICE to prevent attack of draining user CDP.",
      "parameterDecorators": [
        {
          "name": "_gasAmount",
          "description": "Amount of gas used for the tx.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "canCall(uint8,address)",
      "name": "canCall",
      "description": "Checks if Boost/Repay could be triggered for the CDP. Called by MCDMonitor to enforce the min/max check.",
      "parameterDecorators": [
        {
          "name": "_method",
          "description": "Type of action to be called.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "The actual address that owns the Compound position.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeBoostGasCost(uint256)",
      "name": "changeBoostGasCost",
      "description": "Allows owner to change gas cost for boost operation, but only up to 3 millions.",
      "parameterDecorators": [
        {
          "name": "_gasCost",
          "description": "New gas cost for boost method.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeCompoundFlashLoanTaker(address)",
      "name": "changeCompoundFlashLoanTaker",
      "description": "As the code is new, have a emergancy admin saver proxy change.",
      "parameterDecorators": [
        {
          "name": "_newCompoundFlashLoanTakerAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeRepayGasCost(uint256)",
      "name": "changeRepayGasCost",
      "description": "Allows owner to change gas cost for repay operation, but only up to 3 millions.",
      "parameterDecorators": [
        {
          "name": "_gasCost",
          "description": "New gas cost for repay method.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "comp()",
      "name": "comp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "compoundFlashLoanTakerAddress()",
      "name": "compoundFlashLoanTakerAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "compoundMonitorProxy()",
      "name": "compoundMonitorProxy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "gasToken()",
      "name": "gasToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSafetyRatio(address)",
      "name": "getSafetyRatio",
      "description": "Calcualted the ratio of debt / adjusted collateral.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "Address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "kill()",
      "name": "kill",
      "description": "Destroy the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "logger()",
      "name": "logger",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ratioGoodAfter(uint8,address)",
      "name": "ratioGoodAfter",
      "description": "After the Boost/Repay check if the ratio doesn't trigger another call.",
      "parameterDecorators": [
        {
          "name": "_method",
          "description": "Type of action to be called.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "The actual address that owns the Compound position.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "repayFor(tuple(address,address,uint256,uint256,uint256,address,address,bytes,uint256),address[2],address)",
      "name": "repayFor",
      "description": "Bots call this method to repay for user when conditions are met. If the contract ownes gas token it will try and use it for gas price reduction.",
      "parameterDecorators": [
        {
          "name": "_exData",
          "description": "Exchange data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "srcAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "destAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "srcAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "destAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minPrice",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "wrapper",
              "description": "",
              "type": "address"
            },
            {
              "name": "exchangeAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "callData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "price0x",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "_cAddresses",
          "description": "cTokens addreses and exchange [cCollAddress, cBorrowAddress, exchangeAddress].",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "The actual address that owns the Compound position.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAdminByAdmin(address)",
      "name": "setAdminByAdmin",
      "description": "Admin is able to set new admin.",
      "parameterDecorators": [
        {
          "name": "_admin",
          "description": "Address of multisig that becomes new admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAdminByOwner(address)",
      "name": "setAdminByOwner",
      "description": "Admin is set by owner first time, after that admin is super role and has permission to change owner.",
      "parameterDecorators": [
        {
          "name": "_admin",
          "description": "Address of multisig that becomes admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwnerByAdmin(address)",
      "name": "setOwnerByAdmin",
      "description": "Admin is able to change owner.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "Address of new owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "subscriptionsContract()",
      "name": "subscriptionsContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferERC20(address,address,uint256)",
      "name": "transferERC20",
      "description": "If any tokens gets stuck in the contract owner can withdraw it.",
      "parameterDecorators": [
        {
          "name": "_tokenAddress",
          "description": "Address of the ERC20 token.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "Address of the receiver.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount to be sent.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferEth(address,uint256)",
      "name": "transferEth",
      "description": "If any Eth gets stuck in the contract owner can withdraw it.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "Address of the receiver.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount to be sent.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawStuckFunds(address,uint256)",
      "name": "withdrawStuckFunds",
      "description": "withdraw stuck funds.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}