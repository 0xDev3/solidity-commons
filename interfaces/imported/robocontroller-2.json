{"schema":"../schema.json","tags":[],"name":"RoboController","description":"","eventDecorators":[{"signature":"RewardsDistributed(address,uint256,uint256)","name":"RewardsDistributed","description":"Emitted when a new PIE speed is calculated for a market. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"block","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RewardsEnabled(uint256)","name":"RewardsEnabled","description":"Emitted when a new PIE speed is calculated for a market. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"block","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"airdropContract()","name":"airdropContract","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"batchDistributeRewardsFromRoboToken(address,address[])","name":"batchDistributeRewardsFromRoboToken","description":"Allows the caller to batch distribute ROBO for a given list of accounts.","parameterDecorators":[{"name":"roboToken","description":"- The contract address of the RoboToken.","recommendedTypes":[]},{"name":"accounts","description":"- The list of accounts to distribute for.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"distributeRewards(address,address,uint256,uint256)","name":"distributeRewards","description":"Calculate ROBO accrued by holder of RoboToken and possibly transfer if above the threshold To calculate the rewards, we need use the values pre- state change and calculate (prevBalance / prevTotalSupply) to get the claimable proportion of ROBO for the account.","parameterDecorators":[{"name":"roboToken","description":"- The contract address of the RoboToken.","recommendedTypes":[]},{"name":"account","description":"- The account interacting with RoboToken.","recommendedTypes":[]},{"name":"prevBalance","description":"- The RoboToken balance of the account PRIOR to the storage update.","recommendedTypes":[]},{"name":"prevTotalSupply","description":"- The RoboToken totalSupply PRIOR to the storage update.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"distributeRewardsFromRoboToken(address)","name":"distributeRewardsFromRoboToken","description":"Any RoboToken holder can call this function to distribute their rewards.","parameterDecorators":[{"name":"roboToken","description":"- The contract address of the RoboToken the user holds NOTE: this function is permissionless, but we assume two things: - all original RoboToken holders prior to whenRewardsEnabled have been airdropped their tokens via a batch dstribution or storage init, thus their last reward index is set at roboHolderIndex[roboToken][user] - any new RoboToken holders after whenRewardsEnabled have their last reward index set by the Rayv3 contract call to this contract's function #distributeRewardsFromRoboToken onlyRAY (above).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"distributeYieldRewards(address[],address)","name":"distributeYieldRewards","description":"Allows an Opportunity author to distribute their ROBO rewards as a function of the yield earned by their contract (for each given RoboToken) divided by the total yield earned for that RoboToken (since the last time `calculateYieldEarnt` was called).","parameterDecorators":[{"name":"roboTokens","description":"- All list of all RoboTokens the Opportunity contract supports.","recommendedTypes":[]},{"name":"opportunityContract","description":"- The Opportunity contract owned by the author.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"enableRewards()","name":"enableRewards","description":"Enables rewards starting at the current block number NOTE: only governance account can call.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getAccruedROBO()","name":"getAccruedROBO","description":"Allows the caller to get the amount of ROBO tokens they have accrued.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"the number of tokens accrued.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getNotYetDistributedROBO(address)","name":"getNotYetDistributedROBO","description":"Allows the caller to get the amount of ROBO tokens not yet distributed to their account.","parameterDecorators":[{"name":"roboToken","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"the number of tokens to be distributed to the caller.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"governance()","name":"governance","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,address,address,address,uint256,uint256)","name":"initialize","description":"Contract initializer (following oz upgrade pattern).","parameterDecorators":[{"name":"_roboGovToken","description":"- The contract address for RoboGovToken.","recommendedTypes":[]},{"name":"_rayV3","description":"- The contract address for RayV3.","recommendedTypes":[]},{"name":"_roboStaking","description":"- The contract address for RoboStaking.","recommendedTypes":[]},{"name":"_governance","description":"- The account with admin access (NOTE: will be the DAO eventually, ie: to update reward variables).","recommendedTypes":[]},{"name":"_roboClaimThreshold","description":"","recommendedTypes":[]},{"name":"_roboRatePerBlock","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"rayV3()","name":"rayV3","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"rewardsEnabled()","name":"rewardsEnabled","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"rewardsEnabledAtBlock()","name":"rewardsEnabledAtBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"roboClaimThreshold()","name":"roboClaimThreshold","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"roboGovToken()","name":"roboGovToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"roboHolderIndex(address,address)","name":"roboHolderIndex","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"roboPercentageForLiquidity()","name":"roboPercentageForLiquidity","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"roboPercentageForYieldImprovements()","name":"roboPercentageForYieldImprovements","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"roboRatePerBlock()","name":"roboRatePerBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"roboStaking()","name":"roboStaking","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"setAirdropContract(address)","name":"setAirdropContract","description":"Set the airdrop contract (MerkleDistributor) address in order to be aware of participants to automatically receive rewards once enabled NOTE: only governance account can call (initial deployer) NOTE: can only be set once.","parameterDecorators":[{"name":"_airdropContract","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setGovernance(address)","name":"setGovernance","description":"Sets a new address as the governance address NOTE: only governance account can call.","parameterDecorators":[{"name":"newGovernance","description":"- The new governance address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRoboClaimThreshold(uint256)","name":"setRoboClaimThreshold","description":"Sets storage value for the robo claim threshold NOTE: only governance account can call.","parameterDecorators":[{"name":"_newThreshold","description":"- The new value for roboClaimThreshold.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRoboPercentages(uint8,uint8)","name":"setRoboPercentages","description":"Sets storage values for the percent of ROBO rewards allocated towards liquidity and yield improvement incentives NOTE: only governance account can call.","parameterDecorators":[{"name":"_pctLiquidity","description":"- The % of ROBO allocated for liquidity incentives.","recommendedTypes":[]},{"name":"_pctYieldImprov","description":"- The % of ROBO allocated for yield improvement incentives.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRoboRatePerBlock(uint256)","name":"setRoboRatePerBlock","description":"Sets storage values for the rate of robo rewards per block NOTE: only governance account can call.","parameterDecorators":[{"name":"_newRate","description":"- The new value for roboRatePerBlock.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawROBO()","name":"withdrawROBO","description":"Allows the caller to withdraw all their accrued ROBO tokens Requirements: - roboAccrued of the caller must be greater than 0.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}