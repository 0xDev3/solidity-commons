{
  "schema": "../schema.json",
  "tags": [],
  "name": "CreditCarbonRegistry",
  "description": "",
  "eventDecorators": [
    {
      "signature": "BatchCreated(string,uint256,string,string,uint256,address,address,address)",
      "name": "BatchCreated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "serialNumber",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "vintage",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "creditType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "units",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "broker",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "certifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BatchUpdated(string,uint256,string,string,uint256,address,address,address)",
      "name": "BatchUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "serialNumber",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "vintage",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "creditType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "units",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "broker",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "certifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProjectCreated(uint256,string,string,string,address)",
      "name": "ProjectCreated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "projectType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "certifications",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "certifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "CERTIFIER_ROLE()",
      "name": "CERTIFIER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "batches(string)",
      "name": "batches",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "serialNumber",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "vintage",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "creditType",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "units",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "broker",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "originalTx",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "created",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "carbonInventoryControl()",
      "name": "carbonInventoryControl",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createBatch(string,uint256,string,string,uint256,address,address,bytes32)",
      "name": "createBatch",
      "description": "function to register carbon credit batches linked to vintages. Each batch will mint credits on Inventory Control provided that the contract is NOT in register only mode.",
      "parameterDecorators": [
        {
          "name": "_serialNumber",
          "description": "serial number of Carbon credits delivered on the batch.",
          "recommendedTypes": []
        },
        {
          "name": "_projectId",
          "description": "Carbon credit project id.",
          "recommendedTypes": []
        },
        {
          "name": "_vintage",
          "description": "Carbon credit vintage.",
          "recommendedTypes": []
        },
        {
          "name": "_creditType",
          "description": "Types of carbon credits delivered on batch.",
          "recommendedTypes": []
        },
        {
          "name": "_units",
          "description": "Total units deliverd on batch.",
          "recommendedTypes": []
        },
        {
          "name": "_broker",
          "description": "wallets adress of carbon credit broker.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "Commercial token to delivery credits on market.",
          "recommendedTypes": []
        },
        {
          "name": "_originalTx",
          "description": "Optional link to another mint transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createProject(uint256,string,string,string)",
      "name": "createProject",
      "description": "function to register carbon credit projects.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "Carbon credit project id.",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "Carbon credit project name.",
          "recommendedTypes": []
        },
        {
          "name": "_type",
          "description": "Carbon credit project type.",
          "recommendedTypes": []
        },
        {
          "name": "_certifications",
          "description": "Carbon credit project certifications.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMember(bytes32,uint256)",
      "name": "getRoleMember",
      "description": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMemberCount(bytes32)",
      "name": "getRoleMemberCount",
      "description": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize()",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "projects(uint256)",
      "name": "projects",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "projectType",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "certifications",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registerOnlyMode()",
      "name": "registerOnlyMode",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "setRegistryOnlyMode(bool)",
      "name": "setRegistryOnlyMode",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_mode",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateBatch(string,uint256,string,string,uint256,address,address,bytes32,bool)",
      "name": "updateBatch",
      "description": "function to update a batch. If sender wants the update to mint tokens, should send _mintTokens: true.",
      "parameterDecorators": [
        {
          "name": "_serialNumber",
          "description": "serial number of Carbon credits delivered on the batch.",
          "recommendedTypes": []
        },
        {
          "name": "_projectId",
          "description": "Carbon credit project id.",
          "recommendedTypes": []
        },
        {
          "name": "_vintage",
          "description": "Carbon credit vintage.",
          "recommendedTypes": []
        },
        {
          "name": "_creditType",
          "description": "Types of carbon credits delivered on batch.",
          "recommendedTypes": []
        },
        {
          "name": "_units",
          "description": "Total units deliverd on batch.",
          "recommendedTypes": []
        },
        {
          "name": "_broker",
          "description": "wallets adress of carbon credit broker.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "Commercial token to delivery credits on market.",
          "recommendedTypes": []
        },
        {
          "name": "_originalTx",
          "description": "Optional link to another mint transaction.",
          "recommendedTypes": []
        },
        {
          "name": "_mintTokens",
          "description": "Wheter the update should mint credits.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateInventoryControl(address)",
      "name": "updateInventoryControl",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}