{"schema":"../schema.json","tags":[],"name":"Wonderland_Zap_V1","description":"","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"** EVENTS ** ///.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"zapIn(address,address,uint256,address)","name":"zapIn","description":"** EVENTS ** ///.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":false},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"tokensRec","description":"","recommendedTypes":[],"indexed":false},{"name":"affiliate","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"zapOut(address,address,uint256,address)","name":"zapOut","description":"** EVENTS ** ///.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":false},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"tokensRec","description":"","recommendedTypes":[],"indexed":false},{"name":"affiliate","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"MEMO()","name":"MEMO","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"TIME()","name":"TIME","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"TIME_STAKING()","name":"TIME_STAKING","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"ZapIn(address,uint256,address,uint256,address,bytes,address,uint256,bool)","name":"ZapIn","description":"This function deposits assets into Wonderland with ETH or ERC20 tokens.","parameterDecorators":[{"name":"fromToken","description":"The token used for entry (address(0) if ether).","recommendedTypes":[]},{"name":"amountIn","description":"The amount of fromToken to invest.","recommendedTypes":[]},{"name":"toToken","description":"","recommendedTypes":[]},{"name":"minToToken","description":"The minimum acceptable quantity MEMO or wMEMO or principal tokens to receive. Reverts otherwise.","recommendedTypes":[]},{"name":"swapTarget","description":"Excecution target for the swap or zap.","recommendedTypes":[]},{"name":"swapData","description":"DEX or Zap data.","recommendedTypes":[]},{"name":"affiliate","description":"Affiliate address.","recommendedTypes":[]},{"name":"maxBondPrice","description":"Max price for a bond denominated in toToken/principal. Ignored if not bonding.","recommendedTypes":[]},{"name":"bond","description":"if toToken is being used to purchase a bond.","recommendedTypes":[]}],"returnDecorators":[{"name":"MEMORec","description":"Quantity of MEMO or wMEMO received or the quantity MEMO vesting (if bond is true).","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"ZapOut(address,uint256,address,uint256,address,bytes,address)","name":"ZapOut","description":"This function withdraws assets from Wonderland, receiving tokens or ETH.","parameterDecorators":[{"name":"fromToken","description":"The token being withdrawn.","recommendedTypes":[]},{"name":"amountIn","description":"The quantity of fromToken to withdraw.","recommendedTypes":[]},{"name":"toToken","description":"Address of the token to receive (0 address if ETH).","recommendedTypes":[]},{"name":"minToTokens","description":"The minimum acceptable quantity of tokens to receive. Reverts otherwise.","recommendedTypes":[]},{"name":"swapTarget","description":"Excecution target for the swap or zap.","recommendedTypes":[]},{"name":"swapData","description":"DEX or Zap data.","recommendedTypes":[]},{"name":"affiliate","description":"Affiliate address.","recommendedTypes":[]}],"returnDecorators":[{"name":"tokensRec","description":"Quantity of aTokens received.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"affiliateBalance(address,address)","name":"affiliateBalance","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"affiliates(address)","name":"affiliates","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"affilliateWithdraw(address[])","name":"affilliateWithdraw","description":"Withdraws the affilliate share, retaining goodwill share.","parameterDecorators":[{"name":"tokens","description":"An array of the tokens to withdraw (0xeee address if ETH).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"approvedTargets(address)","name":"approvedTargets","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"bondPrice(address)","name":"bondPrice","description":"","parameterDecorators":[{"name":"principal","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"feeWhitelist(address)","name":"feeWhitelist","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"goodwill()","name":"goodwill","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"principalToDepository(address)","name":"principalToDepository","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"removeLiquidityReturn(address,uint256)","name":"removeLiquidityReturn","description":"","parameterDecorators":[{"name":"fromToken","description":"","recommendedTypes":[]},{"name":"fromAmount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"ohmAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setApprovedTargets(address[],bool[])","name":"setApprovedTargets","description":"Adds or removes an approved swapTarget swapTargets should be Zaps and must not be tokens!.","parameterDecorators":[{"name":"targets","description":"An array of addresses of approved swapTargets.","recommendedTypes":[]},{"name":"isApproved","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"set_affiliate(address,bool)","name":"set_affiliate","description":"Adds or removes an affiliate.","parameterDecorators":[{"name":"_affiliate","description":"The affiliate's address.","recommendedTypes":[]},{"name":"_status","description":"The affiliate's approval status.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"set_feeWhitelist(address,bool)","name":"set_feeWhitelist","description":"Set address to true to bypass fees when calling this contract.","parameterDecorators":[{"name":"zapAddress","description":"The Zap caller which is allowed to bypass fees (if > 0).","recommendedTypes":[]},{"name":"status","description":"The whitelisted status (true if whitelisted).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"set_new_affiliateSplit(uint256)","name":"set_new_affiliateSplit","description":"Sets the percentage to split the goodwill by to distribute to affiliates.","parameterDecorators":[{"name":"_new_affiliateSplit","description":"The new affiliate split between 0-1%.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"set_new_goodwill(uint256)","name":"set_new_goodwill","description":"Sets a goodwill amount.","parameterDecorators":[{"name":"_new_goodwill","description":"The new goodwill amount between 0-1%.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"stopped()","name":"stopped","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"toggleContractActive()","name":"toggleContractActive","description":"Toggles the contract's active state.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"totalAffiliateBalance(address)","name":"totalAffiliateBalance","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateStaking(address)","name":"updateStaking","description":"","parameterDecorators":[{"name":"_staking","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateZapperAdmin(address)","name":"updateZapperAdmin","description":"Update the Zapper administrative address.","parameterDecorators":[{"name":"_zapperAdmin","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"update_BondDepos(address[],address[])","name":"update_BondDepos","description":"","parameterDecorators":[{"name":"principals","description":"","recommendedTypes":[]},{"name":"depos","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"update_MEMO(address)","name":"update_MEMO","description":"","parameterDecorators":[{"name":"_MEMO","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"update_wMEMO(address)","name":"update_wMEMO","description":"","parameterDecorators":[{"name":"_wMEMO","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"wMEMO()","name":"wMEMO","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"withdrawTokens(address[])","name":"withdrawTokens","description":"Withdraws goodwill share, retaining affilliate share.","parameterDecorators":[{"name":"tokens","description":"An array of the tokens to withdraw (0xeee address if ETH).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}