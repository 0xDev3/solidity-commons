{
  "schema": "../schema.json",
  "tags": [
    "oracles",
    "staking"
  ],
  "name": "Berry",
  "description": "Berry Oracle System. Oracle contract where miners can submit the proof of work along with the value. The logic for this contract is in BerryLibrary.sol, BerryDispute.sol, BerryStake.sol, and BerryTransfer.sol.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "addTip(uint256,uint256)",
      "name": "addTip",
      "description": "Add tip to Request value from oracle.",
      "parameterDecorators": [
        {
          "name": "_requestId",
          "description": "being requested to be mined.",
          "recommendedTypes": []
        },
        {
          "name": "_tip",
          "description": "amount the requester is willing to pay to be get on queue. Miners mine the onDeckQueryHash, or the api with the highest payout pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approve(address,uint256)",
      "name": "approve",
      "description": "This function approves a _spender an _amount of tokens to use.",
      "parameterDecorators": [
        {
          "name": "_spender",
          "description": "address.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount the spender is being approved for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "beginDispute(uint256,uint256,uint256)",
      "name": "beginDispute",
      "description": "Helps initialize a dispute by assigning it a disputeId when a miner returns a false on the validate array(in Berry.ProofOfWork) it sends the invalidated value information to POS voting.",
      "parameterDecorators": [
        {
          "name": "_requestId",
          "description": "being disputed.",
          "recommendedTypes": []
        },
        {
          "name": "_timestamp",
          "description": "being disputed.",
          "recommendedTypes": []
        },
        {
          "name": "_minerIndex",
          "description": "the index of the miner that submitted the value being disputed. Since each official value requires 5 miners to submit a value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimOwnership()",
      "name": "claimOwnership",
      "description": "Allows the new owner to claim control of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "decimals()",
      "name": "decimals",
      "description": "Allows users to access the number of decimals.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositStake()",
      "name": "depositStake",
      "description": "This function allows miners to deposit their stake.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getNewCurrentVariables()",
      "name": "getNewCurrentVariables",
      "description": "Getter for the current variables that include the 5 requests Id's.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_challenge",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "_requestIds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[5]"
        },
        {
          "name": "_difficutly",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_tip",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNewVariablesOnDeck()",
      "name": "getNewVariablesOnDeck",
      "description": "Getter for the 5 requests Id's next in line to get mined.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "idsOnDeck",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[5]"
        },
        {
          "name": "tipsOnDeck",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[5]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTopRequestIDs()",
      "name": "getTopRequestIDs",
      "description": "Getter for the top tipped 5 requests Id's.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_requestIds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[5]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "name()",
      "name": "name",
      "description": "Allows users to access the token's name.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposeFork(address)",
      "name": "proposeFork",
      "description": "Allows for a fork to be proposed.",
      "parameterDecorators": [
        {
          "name": "_propNewBerryAddress",
          "description": "address for new proposed Berry.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposeOwnership(address)",
      "name": "proposeOwnership",
      "description": "Allows the current owner to propose transfer control of the contract to a newOwner and the ownership is pending until the new owner calls the claimOwnership function.",
      "parameterDecorators": [
        {
          "name": "_pendingOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestStakingWithdraw()",
      "name": "requestStakingWithdraw",
      "description": "This function allows stakers to request to withdraw their stake (no longer stake) once they lock for withdraw(stakes.currentStatus = 2) they are locked for 7 days before they can withdraw the stake.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "submitMiningSolution(string,uint256[5],uint256[5])",
      "name": "submitMiningSolution",
      "description": "This is called by the miner when they submit the PoW solution (proof of work and value).",
      "parameterDecorators": [
        {
          "name": "_nonce",
          "description": "uint submitted by miner.",
          "recommendedTypes": []
        },
        {
          "name": "_requestId",
          "description": "is the array of the 5 PSR's being mined.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "is an array of 5 values.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "symbol()",
      "name": "symbol",
      "description": "Allows users to access the token's symbol.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tallyVotes(uint256)",
      "name": "tallyVotes",
      "description": "tallies the votes.",
      "parameterDecorators": [
        {
          "name": "_disputeId",
          "description": "is the dispute id.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transfer(address,uint256)",
      "name": "transfer",
      "description": "Allows for a transfer of tokens to _to.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "The address to send tokens to.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of tokens to send.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferFrom(address,address,uint256)",
      "name": "transferFrom",
      "description": "Sends _amount tokens to _to from _from on the condition it is approved by _from.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "The address holding the tokens being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "The address of the recipient.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of tokens to be transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unlockDisputeFee(uint256)",
      "name": "unlockDisputeFee",
      "description": "Allows disputer to unlock the dispute fee.",
      "parameterDecorators": [
        {
          "name": "_disputeId",
          "description": "to unlock fee from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateBerry(uint256)",
      "name": "updateBerry",
      "description": "Updates the Berry address after a proposed fork has passed the vote and day has gone by without a dispute.",
      "parameterDecorators": [
        {
          "name": "_disputeId",
          "description": "the disputeId for the proposed fork.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vote(uint256,bool)",
      "name": "vote",
      "description": "Allows token holders to vote.",
      "parameterDecorators": [
        {
          "name": "_disputeId",
          "description": "is the dispute id.",
          "recommendedTypes": []
        },
        {
          "name": "_supportsDispute",
          "description": "is the vote (true=the dispute has basis false = vote against dispute).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawStake()",
      "name": "withdrawStake",
      "description": "This function allows users to withdraw their stake after a 7 day waiting period from request.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}