{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "TokenNetworkRegistry",
  "description": "TokenNetworkRegistry. The TokenNetwork Registry deploys new TokenNetwork contracts for the Raiden Network protocol.",
  "eventDecorators": [
    {
      "signature": "TokenNetworkCreated(address,address)",
      "name": "TokenNetworkCreated",
      "description": "event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "token_address",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token_network_address",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "chain_id()",
      "name": "chain_id",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "contractExists(address)",
      "name": "contractExists",
      "description": "Check if a contract exists.",
      "parameterDecorators": [
        {
          "name": "contract_address",
          "description": "The address to check whether a contract is deployed or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if a contract exists, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createERC20TokenNetwork(address,uint256,uint256)",
      "name": "createERC20TokenNetwork",
      "description": "Deploy a new TokenNetwork contract for the Token deployed at `_token_address`.",
      "parameterDecorators": [
        {
          "name": "_token_address",
          "description": "Ethereum address of an already deployed token, to be used in the new TokenNetwork contract.",
          "recommendedTypes": []
        },
        {
          "name": "_channel_participant_deposit_limit",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_token_network_deposit_limit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "token_network_address",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deprecation_executor()",
      "name": "deprecation_executor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "max_token_networks()",
      "name": "max_token_networks",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "secret_registry_address()",
      "name": "secret_registry_address",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "settlement_timeout_max()",
      "name": "settlement_timeout_max",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "settlement_timeout_min()",
      "name": "settlement_timeout_min",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "token_network_created()",
      "name": "token_network_created",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "token_to_token_networks(address)",
      "name": "token_to_token_networks",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}