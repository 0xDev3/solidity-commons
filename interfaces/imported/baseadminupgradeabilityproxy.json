{
  "schema": "../schema.json",
  "tags": [],
  "name": "BaseAdminUpgradeabilityProxy",
  "description": "BaseAdminUpgradeabilityProxy. This contract combines an upgradeability proxy with an authorization mechanism for administrative tasks. All external functions in this contract must be guarded by the `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity feature proposal that would enable this to be done automatically.",
  "eventDecorators": [
    {
      "signature": "AdminChanged(address,address)",
      "name": "AdminChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Upgraded(address)",
      "name": "Upgraded",
      "description": "",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "upgradeTo(address)",
      "name": "upgradeTo",
      "description": "Upgrade the backing implementation of the proxy. Only the admin can call this function.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "Address of the new implementation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeToAndCall(address,bytes)",
      "name": "upgradeToAndCall",
      "description": "Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "Address of the new implementation.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "implementation()",
      "name": "implementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeAdmin(address)",
      "name": "changeAdmin",
      "description": "Changes the admin of the proxy. Only the current admin can call this function.",
      "parameterDecorators": [
        {
          "name": "newAdmin",
          "description": "Address to transfer proxy administration to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "admin()",
      "name": "admin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}