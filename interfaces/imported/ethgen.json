{
  "schema": "../schema.json",
  "tags": [],
  "name": "ETHGen",
  "description": "",
  "eventDecorators": [
    {
      "signature": "GenerationalBonus(uint256,uint256,uint256)",
      "name": "GenerationalBonus",
      "description": "Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "memberID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "saleID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "level",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewMember(uint256)",
      "name": "NewMember",
      "description": "Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "memberID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ReferalBonus(uint256,uint256)",
      "name": "ReferalBonus",
      "description": "Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "memberID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "saleID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TeamGrowthBonus(uint256,uint256)",
      "name": "TeamGrowthBonus",
      "description": "Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "memberID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "saleID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addSpecialMember(address,address)",
      "name": "addSpecialMember",
      "description": "The addition of a special (always active) user in the system.",
      "parameterDecorators": [
        {
          "name": "_member",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_enroller",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAddress(uint256)",
      "name": "getAddress",
      "description": "Quick way to get the address from an ID in the system.",
      "parameterDecorators": [
        {
          "name": "_memberID",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEnrollerAddress(uint256)",
      "name": "getEnrollerAddress",
      "description": "Quick way to get the enroller address from a member ID in the system.",
      "parameterDecorators": [
        {
          "name": "_memberID",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEnrollerID(address)",
      "name": "getEnrollerID",
      "description": "Quick way to get the enroller ID from a member address in the system.",
      "parameterDecorators": [
        {
          "name": "_member",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getID(address)",
      "name": "getID",
      "description": "Quick way to get the ID from an address in the system.",
      "parameterDecorators": [
        {
          "name": "_member",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMemberByAddress(address)",
      "name": "getMemberByAddress",
      "description": "Quick way to get a member structure from a member address.",
      "parameterDecorators": [
        {
          "name": "_member",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMemberByID(uint256)",
      "name": "getMemberByID",
      "description": "Quick way to get a member structure from a member ID.",
      "parameterDecorators": [
        {
          "name": "_memberID",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMembersByOwner(address)",
      "name": "getMembersByOwner",
      "description": "Traverse the list to get the IDs of all members enrolled by this address.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProviderFee(address)",
      "name": "getProviderFee",
      "description": "Get the fee percentage for a specified provider... Note: 500 = 5.00% or 399 = 3.99%.",
      "parameterDecorators": [
        {
          "name": "_provider",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasMembers(address)",
      "name": "hasMembers",
      "description": "Determines whether the member has sold any memberships yet at all.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isActiveByAddress(address)",
      "name": "isActiveByAddress",
      "description": "Determines if the user is special (always active) or has remaining days left of their membership.",
      "parameterDecorators": [
        {
          "name": "_member",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isActiveByID(uint256)",
      "name": "isActiveByID",
      "description": "Determines if the user is special (always active) or has remaining days left of their membership.",
      "parameterDecorators": [
        {
          "name": "_memberID",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if `msg.sender` is the owner of the contract.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSmartAffiliate(address)",
      "name": "isSmartAffiliate",
      "description": "Determines whether the member still has at least 3 Active Affiliates.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSuperAffiliate(address)",
      "name": "isSuperAffiliate",
      "description": "Determines whether the member still has at least 3 Active Smart Affiliates.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isTeamGrowthQualified(address,uint256)",
      "name": "isTeamGrowthQualified",
      "description": "Make sure they have two sales and the _from ID member is not in the 1st line of their team.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "memberCount()",
      "name": "memberCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "members(uint256)",
      "name": "members",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "enroller",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "salesMade",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "masterLevel",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "membershipEnds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "membershipsSold(address)",
      "name": "membershipsSold",
      "description": "Determines how many members have ever purchased from a user (need to know if they have at least 2 or not in some cases) same as number of directs to this user.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newMemberJoin(address,uint256)",
      "name": "newMemberJoin",
      "description": "The addition of a new member for the specified time and price under the specified enroller.",
      "parameterDecorators": [
        {
          "name": "_enroller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_numPeriods",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the address of the owner.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "processProductPurchase(address,address,uint256,uint256)",
      "name": "processProductPurchase",
      "description": "Allows a Provider to send commissions to the network (the provider MUST be a Member as well) _providerAmountInGWEI + _distAmountInGWEI must match the amount sent by the purchaser A percentage of the provider amount goes to ETH Gen as sales commissions unless the entire amount is sent to commission tree Note: This will use the stored fee...or default to a standard 5.00% fee...providerToFee is set in setProviderFee by the contract owner If the sender is in the system, it determines the enroller and ignores the _enroller passed Otherwise, if the sender is not in the system, the sender is assumed to be a customer and an enroller should be specified who is responsible for the sale Note: This means the provider tracked who the customer was brought to their site by (in other words, the affiliate who IS a member of this system) Note: This is on the honor of the provider as the smart contract would not know this...they could pass a bad address and keep the customer as their own But, if there is no _enroller passed, then the amount is considered a house sale and distribution amount starts with the provider as the enroller.",
      "parameterDecorators": [
        {
          "name": "_provider",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_enroller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_providerAmountInWEI",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_distAmountInWEI",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "purchasePrice()",
      "name": "purchasePrice",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "purchaseTime()",
      "name": "purchaseTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renewMembership(uint256)",
      "name": "renewMembership",
      "description": "Add the specified time and distribute the price for the renewal.",
      "parameterDecorators": [
        {
          "name": "_numPeriods",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPrimary(address)",
      "name": "setPrimary",
      "description": "Allows the account that over runs will roll up into to be changed.",
      "parameterDecorators": [
        {
          "name": "_newPrime",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setProviderFee(address,uint256)",
      "name": "setProviderFee",
      "description": "Set the fee percentage for a specified provider... Calculation will be: Amount * Fee / 10000 ex. Amount of 100 WEI, Fee of 1000: 100*1000/10000 = 10 WEI (10.00% of 100) ex. Amount of 1000 WEI, Fee of 5: 1000*500/10000 = 50 WEI (5.00% of 1000) Note: Used in processProductPurchase.",
      "parameterDecorators": [
        {
          "name": "_provider",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_fee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPurchasePrice(uint256)",
      "name": "setPurchasePrice",
      "description": "Allows the Purchase Price to be changed from 0.05 ether to keep it priced similar to starting USD price for future membership purchases.",
      "parameterDecorators": [
        {
          "name": "_price",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPurchaseTime(uint256)",
      "name": "setPurchaseTime",
      "description": "Allows the Purchase Time to be changed from 35 days for future membership purchases.",
      "parameterDecorators": [
        {
          "name": "_time",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTransferPrice(uint256)",
      "name": "setTransferPrice",
      "description": "Allows the Transfer Price to be changed from 0.1 ether to keep it priced similar to starting USD price for transfers.",
      "parameterDecorators": [
        {
          "name": "_price",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferMemberPosition(address)",
      "name": "transferMemberPosition",
      "description": "Allows a User to change the address associated with their membership to a new address (theirs or someone they are selling it to).",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to transfer control of the contract to a newOwner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferPrice()",
      "name": "transferPrice",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}