{
  "schema": "../schema.json",
  "tags": [],
  "name": "Registry",
  "description": "Registry for financial contracts and approved financial contract creators. Maintains a whitelist of financial contract creators that are allowed to register new financial contracts and stores party members of a financial contract.",
  "eventDecorators": [
    {
      "signature": "AddedSharedMember(uint256,address,address)",
      "name": "AddedSharedMember",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "roleId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newMember",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "manager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewContractRegistered(address,address,address[])",
      "name": "NewContractRegistered",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "creator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "parties",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PartyAdded(address,address)",
      "name": "PartyAdded",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "party",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PartyRemoved(address,address)",
      "name": "PartyRemoved",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "party",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RemovedSharedMember(uint256,address,address)",
      "name": "RemovedSharedMember",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "roleId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldMember",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "manager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ResetExclusiveMember(uint256,address,address)",
      "name": "ResetExclusiveMember",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "roleId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newMember",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "manager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addMember(uint256,address)",
      "name": "addMember",
      "description": "Adds `newMember` to the shared role, `roleId`. Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.",
      "parameterDecorators": [
        {
          "name": "roleId",
          "description": "the SharedRole membership to modify.",
          "recommendedTypes": []
        },
        {
          "name": "newMember",
          "description": "the new SharedRole member.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addPartyToContract(address)",
      "name": "addPartyToContract",
      "description": "Adds a party member to the calling contract. msg.sender will be used to determine the contract that this party is added to.",
      "parameterDecorators": [
        {
          "name": "party",
          "description": "new party for the calling contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "contractMap(address)",
      "name": "contractMap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "valid",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllRegisteredContracts()",
      "name": "getAllRegisteredContracts",
      "description": "Returns all registered contracts.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "all registered contract addresses within the system.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMember(uint256)",
      "name": "getMember",
      "description": "Gets the current holder of the exclusive role, `roleId`. Reverts if `roleId` does not represent an initialized, exclusive role.",
      "parameterDecorators": [
        {
          "name": "roleId",
          "description": "the ExclusiveRole membership to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the address of the current ExclusiveRole member.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRegisteredContracts(address)",
      "name": "getRegisteredContracts",
      "description": "Returns a list of all contracts that are associated with a particular party.",
      "parameterDecorators": [
        {
          "name": "party",
          "description": "address of the party.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "an array of the contracts the party is registered to.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "holdsRole(uint256,address)",
      "name": "holdsRole",
      "description": "Whether `memberToCheck` is a member of roleId. Reverts if roleId does not correspond to an initialized role.",
      "parameterDecorators": [
        {
          "name": "roleId",
          "description": "the Role to check.",
          "recommendedTypes": []
        },
        {
          "name": "memberToCheck",
          "description": "the address to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if `memberToCheck` is a member of `roleId`.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isContractRegistered(address)",
      "name": "isContractRegistered",
      "description": "Returns whether the contract has been registered with the registry. If it is registered, it is an authorized participant in the UMA system.",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "address of the financial contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool indicates whether the contract is registered.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPartyMemberOfContract(address,address)",
      "name": "isPartyMemberOfContract",
      "description": "checks if an address is a party of a contract.",
      "parameterDecorators": [
        {
          "name": "party",
          "description": "party to check.",
          "recommendedTypes": []
        },
        {
          "name": "contractAddress",
          "description": "address to check against the party.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool indicating if the address is a party of the contract.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registerContract(address[],address)",
      "name": "registerContract",
      "description": "Registers a new financial contract. Only authorized contract creators can call this method.",
      "parameterDecorators": [
        {
          "name": "parties",
          "description": "array of addresses who become parties in the contract.",
          "recommendedTypes": []
        },
        {
          "name": "contractAddress",
          "description": "address of the contract against which the parties are registered.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registeredContracts(uint256)",
      "name": "registeredContracts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeMember(uint256,address)",
      "name": "removeMember",
      "description": "Removes `memberToRemove` from the shared role, `roleId`. Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.",
      "parameterDecorators": [
        {
          "name": "roleId",
          "description": "the SharedRole membership to modify.",
          "recommendedTypes": []
        },
        {
          "name": "memberToRemove",
          "description": "the current SharedRole member to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removePartyFromContract(address)",
      "name": "removePartyFromContract",
      "description": "Removes a party member from the calling contract. msg.sender will be used to determine the contract that this party is removed from.",
      "parameterDecorators": [
        {
          "name": "partyAddress",
          "description": "address to be removed from the calling contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceMembership(uint256)",
      "name": "renounceMembership",
      "description": "Removes caller from the role, `roleId`. Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.",
      "parameterDecorators": [
        {
          "name": "roleId",
          "description": "the SharedRole membership to modify.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resetMember(uint256,address)",
      "name": "resetMember",
      "description": "Changes the exclusive role holder of `roleId` to `newMember`. Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.",
      "parameterDecorators": [
        {
          "name": "roleId",
          "description": "the ExclusiveRole membership to modify.",
          "recommendedTypes": []
        },
        {
          "name": "newMember",
          "description": "the new ExclusiveRole member.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}