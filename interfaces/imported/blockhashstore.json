{
  "schema": "../schema.json",
  "tags": [
    "locking"
  ],
  "name": "BlockhashStore",
  "description": "BlockhashStore. This contract provides a way to access blockhashes older than the 256 block limit imposed by the BLOCKHASH opcode. You may assume that any blockhash stored by the contract is correct. Note that the contract depends on the format of serialized Ethereum blocks. If a future hardfork of Ethereum changes that format, the logic in this contract may become incorrect and an updated version would have to be deployed.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "getBlockhash(uint256)",
      "name": "getBlockhash",
      "description": "gets a blockhash from the store. If no hash is known, this function reverts.",
      "parameterDecorators": [
        {
          "name": "n",
          "description": "the number of the block whose blockhash should be returned.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "store(uint256)",
      "name": "store",
      "description": "stores blockhash of a given block, assuming it is available through BLOCKHASH.",
      "parameterDecorators": [
        {
          "name": "n",
          "description": "the number of the block whose blockhash should be stored.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "storeEarliest()",
      "name": "storeEarliest",
      "description": "stores blockhash of the earliest block still available through BLOCKHASH.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "storeVerifyHeader(uint256,bytes)",
      "name": "storeVerifyHeader",
      "description": "stores blockhash after verifying blockheader of child/subsequent block.",
      "parameterDecorators": [
        {
          "name": "n",
          "description": "the number of the block whose blockhash should be stored.",
          "recommendedTypes": []
        },
        {
          "name": "header",
          "description": "the rlp-encoded blockheader of block n+1. We verify its correctness by checking that it hashes to a stored blockhash, and then extract parentHash to get the n-th blockhash.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}