{
  "schema": "../schema.json",
  "tags": [],
  "name": "MockExecutor",
  "description": "MockExecutor. UNSAFE TO USE on mainnet because racing collisions and withdrawExcess by anone. Contract that masks any executor address behind one permitted address.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "exec(tuple(uint256,address,tuple,uint256,tuple[],uint256,uint256,uint256))",
      "name": "exec",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_taskReceipt",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "id",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "userProxy",
              "description": "",
              "type": "address"
            },
            {
              "name": "provider",
              "description": "",
              "type": "tuple"
            },
            {
              "name": "index",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tasks",
              "description": "",
              "type": "tuple[]"
            },
            {
              "name": "expiryDate",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "cycleId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "submissionsLeft",
              "description": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "gelatoCore()",
      "name": "gelatoCore",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGasLimit(tuple(uint256,address,tuple,uint256,tuple[],uint256,uint256,uint256),uint256)",
      "name": "getGasLimit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_taskReceipt",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "id",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "userProxy",
              "description": "",
              "type": "address"
            },
            {
              "name": "provider",
              "description": "",
              "type": "tuple"
            },
            {
              "name": "index",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tasks",
              "description": "",
              "type": "tuple[]"
            },
            {
              "name": "expiryDate",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "cycleId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "submissionsLeft",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "_gelatoMaxGas",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "multiCanExec(tuple(uint256,address,tuple,uint256,tuple[],uint256,uint256,uint256)[],uint256)",
      "name": "multiCanExec",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_taskReceipts",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "id",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "userProxy",
              "description": "",
              "type": "address"
            },
            {
              "name": "provider",
              "description": "",
              "type": "tuple"
            },
            {
              "name": "index",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tasks",
              "description": "",
              "type": "tuple[]"
            },
            {
              "name": "expiryDate",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "cycleId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "submissionsLeft",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "_gelatoGasPrice",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "blockNumber",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "responses",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "multiReassignProviders(address[],address)",
      "name": "multiReassignProviders",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_providers",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_newExecutor",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGelatoCore(address)",
      "name": "setGelatoCore",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_gelatoCore",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakeExecutor()",
      "name": "stakeExecutor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unstakeExecutor()",
      "name": "unstakeExecutor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawExcessExecutorStake(uint256)",
      "name": "withdrawExcessExecutorStake",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_withdrawAmount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}