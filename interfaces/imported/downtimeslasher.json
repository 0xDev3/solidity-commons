{"schema":"../schema.json","tags":[],"name":"DowntimeSlasher","description":"","eventDecorators":[{"signature":"BitmapSetForInterval(address,uint256,uint256,bytes32)","name":"BitmapSetForInterval","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":true},{"name":"startBlock","description":"","recommendedTypes":[],"indexed":true},{"name":"endBlock","description":"","recommendedTypes":[],"indexed":true},{"name":"bitmap","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"DowntimeSlashPerformed(address,uint256,uint256)","name":"DowntimeSlashPerformed","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"validator","description":"","recommendedTypes":[],"indexed":true},{"name":"startBlock","description":"","recommendedTypes":[],"indexed":true},{"name":"endBlock","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RegistrySet(address)","name":"RegistrySet","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"registryAddress","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"SlashableDowntimeSet(uint256)","name":"SlashableDowntimeSet","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"interval","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SlashingIncentivesSet(uint256,uint256)","name":"SlashingIncentivesSet","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"penalty","description":"","recommendedTypes":[],"indexed":false},{"name":"reward","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"bitmaps(address,uint256,uint256)","name":"bitmaps","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]},{"name":"param2","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"checkProofOfPossession(address,bytes,bytes)","name":"checkProofOfPossession","description":"Checks a BLS proof of possession.","parameterDecorators":[{"name":"sender","description":"The address signed by the BLS key to generate the proof of possession.","recommendedTypes":[]},{"name":"blsKey","description":"The BLS public key that the validator is using for consensus, should pass proof of possession. 48 bytes.","recommendedTypes":[]},{"name":"blsPop","description":"The BLS public key proof-of-possession, which consists of a signature on the account address. 96 bytes.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)","name":"fractionMulExp","description":"calculate a * b^x for fractions a, b to `decimals` precision.","parameterDecorators":[{"name":"aNumerator","description":"Numerator of first fraction.","recommendedTypes":[]},{"name":"aDenominator","description":"Denominator of first fraction.","recommendedTypes":[]},{"name":"bNumerator","description":"Numerator of exponentiated fraction.","recommendedTypes":[]},{"name":"bDenominator","description":"Denominator of exponentiated fraction.","recommendedTypes":[]},{"name":"exponent","description":"exponent to raise b to.","recommendedTypes":[]},{"name":"_decimals","description":"precision.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getBitmapForInterval(uint256,uint256)","name":"getBitmapForInterval","description":"Calculates and returns the signature bitmap for the specified interval. This bitmap will contain a one for any validator that signed at least one block in that interval, and zero otherwise. startBlock and endBlock must be in the same epoch.The getParentSealBitmap precompile requires that startBlock must be within 4 epochs of the current block.","parameterDecorators":[{"name":"startBlock","description":"First block of the interval.","recommendedTypes":[]},{"name":"endBlock","description":"Last block of the interval.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getBlockNumberFromHeader(bytes)","name":"getBlockNumberFromHeader","description":"Parses block number out of header.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochNumber()","name":"getEpochNumber","description":"Returns the epoch number at a block.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochNumberOfBlock(uint256)","name":"getEpochNumberOfBlock","description":"Returns the epoch number at a block.","parameterDecorators":[{"name":"blockNumber","description":"Block number where epoch number is calculated.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochSize()","name":"getEpochSize","description":"Returns the current epoch size in blocks.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getParentSealBitmap(uint256)","name":"getParentSealBitmap","description":"Gets the parent seal bitmap from the header at the given block number.","parameterDecorators":[{"name":"blockNumber","description":"Block number to retrieve. Must be within 4 epochs of the current number.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getVerifiedSealBitmapFromHeader(bytes)","name":"getVerifiedSealBitmapFromHeader","description":"Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header. If the parent hash is not in the blockchain, verification fails.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getVersionNumber()","name":"getVersionNumber","description":"Returns the storage, major, minor, and patch version of the contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"groupMembershipAtBlock(address,uint256,uint256)","name":"groupMembershipAtBlock","description":"Returns the group to be slashed.","parameterDecorators":[{"name":"validator","description":"Validator that was slashed.","recommendedTypes":[]},{"name":"blockNumber","description":"Block number associated with slashing.","recommendedTypes":[]},{"name":"groupMembershipHistoryIndex","description":"Index used for history lookup.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"hashHeader(bytes)","name":"hashHeader","description":"Computes hash of header.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,uint256,uint256,uint256)","name":"initialize","description":"Used in place of the constructor to allow the contract to be upgradable via proxy.","parameterDecorators":[{"name":"registryAddress","description":"The address of the registry core smart contract.","recommendedTypes":[]},{"name":"_penalty","description":"Penalty for the slashed validator.","recommendedTypes":[]},{"name":"_reward","description":"Reward that the observer gets.","recommendedTypes":[]},{"name":"_slashableDowntime","description":"Slashable downtime in blocks.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialized()","name":"initialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isBitmapSetForInterval(uint256,uint256)","name":"isBitmapSetForInterval","description":"Returns true if the bitmap has been set for the specified interval.","parameterDecorators":[{"name":"startBlock","description":"First block of the interval.","recommendedTypes":[]},{"name":"endBlock","description":"Last block of the interval.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"lastSlashedBlock(address)","name":"lastSlashedBlock","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"minQuorumSize(uint256)","name":"minQuorumSize","description":"Returns the minimum number of required signers for a given block number. Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3)).","parameterDecorators":[{"name":"blockNumber","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"minQuorumSizeInCurrentSet()","name":"minQuorumSizeInCurrentSet","description":"Computes byzantine quorum from current validator set size.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"numberValidatorsInCurrentSet()","name":"numberValidatorsInCurrentSet","description":"Gets the size of the current elected validator set.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"numberValidatorsInSet(uint256)","name":"numberValidatorsInSet","description":"Gets the size of the validator set that must sign the given block number.","parameterDecorators":[{"name":"blockNumber","description":"Block number to retrieve the validator set from.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"registry()","name":"registry","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setBitmapForInterval(uint256,uint256)","name":"setBitmapForInterval","description":"Calculates and sets the signature bitmap for the specified interval. startBlock and endBlock must be in the same epoch.","parameterDecorators":[{"name":"startBlock","description":"First block of the interval.","recommendedTypes":[]},{"name":"endBlock","description":"Last block of the interval.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":false},{"signature":"setRegistry(address)","name":"setRegistry","description":"Updates the address pointing to a Registry contract.","parameterDecorators":[{"name":"registryAddress","description":"The address of a registry contract for routing to other contracts.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSlashableDowntime(uint256)","name":"setSlashableDowntime","description":"Sets the slashable downtime.","parameterDecorators":[{"name":"interval","description":"Slashable downtime in blocks.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSlashingIncentives(uint256,uint256)","name":"setSlashingIncentives","description":"Sets slashing incentives.","parameterDecorators":[{"name":"penalty","description":"Penalty for the slashed signer.","recommendedTypes":[]},{"name":"reward","description":"Reward that the observer gets.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"slash(uint256[],uint256[],uint256[],uint256,address[],address[],uint256[],address[],address[],uint256[])","name":"slash","description":"Slashes a validator that did not sign any blocks for at least `slashableDowntime`. startBlocks[0] will be use as the startBlock of the slashableDowntime.","parameterDecorators":[{"name":"startBlocks","description":"A list of interval start blocks for which signature bitmaps have already been set.","recommendedTypes":[]},{"name":"endBlocks","description":"A list of interval end blocks for which signature bitmaps have already been set.","recommendedTypes":[]},{"name":"signerIndices","description":"The index of the provided validator for each epoch over which the provided intervals span.","recommendedTypes":[]},{"name":"groupMembershipHistoryIndex","description":"Group membership index from where the group should be found (For start block).","recommendedTypes":[]},{"name":"validatorElectionLessers","description":"Lesser pointers for validator slashing.","recommendedTypes":[]},{"name":"validatorElectionGreaters","description":"Greater pointers for validator slashing.","recommendedTypes":[]},{"name":"validatorElectionIndices","description":"Vote indices for validator slashing.","recommendedTypes":[]},{"name":"groupElectionLessers","description":"Lesser pointers for group slashing.","recommendedTypes":[]},{"name":"groupElectionGreaters","description":"Greater pointers for group slashing.","recommendedTypes":[]},{"name":"groupElectionIndices","description":"Vote indices for group slashing.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"slashableDowntime()","name":"slashableDowntime","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"slashingIncentives()","name":"slashingIncentives","description":"","parameterDecorators":[],"returnDecorators":[{"name":"penalty","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"reward","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"validatorSignerAddressFromCurrentSet(uint256)","name":"validatorSignerAddressFromCurrentSet","description":"Gets a validator address from the current validator set.","parameterDecorators":[{"name":"index","description":"Index of requested validator in the validator set.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"validatorSignerAddressFromSet(uint256,uint256)","name":"validatorSignerAddressFromSet","description":"Gets a validator address from the validator set at the given block number.","parameterDecorators":[{"name":"index","description":"Index of requested validator in the validator set.","recommendedTypes":[]},{"name":"blockNumber","description":"Block number to retrieve the validator set from.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"wasDownForInterval(uint256,uint256,uint256)","name":"wasDownForInterval","description":"Returns true if the validator did not sign any blocks in the specified interval. Both startBlock and endBlock should be part of the same epoch.","parameterDecorators":[{"name":"startBlock","description":"First block of the interval.","recommendedTypes":[]},{"name":"endBlock","description":"Last block of the interval.","recommendedTypes":[]},{"name":"signerIndex","description":"Index of the signer within the validator set.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"wasDownForIntervals(uint256[],uint256[],uint256[])","name":"wasDownForIntervals","description":"Returns true if a validator has been down for the specified overlapping or adjacent intervals.","parameterDecorators":[{"name":"startBlocks","description":"A list of interval start blocks for which signature bitmaps have already been set.","recommendedTypes":[]},{"name":"endBlocks","description":"A list of interval end blocks for which signature bitmaps have already been set.","recommendedTypes":[]},{"name":"signerIndices","description":"Indices of the signer within the validator set for every epoch change.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true}]}