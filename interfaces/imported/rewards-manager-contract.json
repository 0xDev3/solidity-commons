{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "staking"
  ],
  "name": "RewardsManager",
  "description": "Rewards Manager Contract.",
  "eventDecorators": [
    {
      "signature": "ContractSynced(bytes32,address)",
      "name": "ContractSynced",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nameHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ParameterUpdated(string)",
      "name": "ParameterUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RewardsAssigned(address,address,uint256,uint256)",
      "name": "RewardsAssigned",
      "description": "Emitted when rewards are assigned to an indexer.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allocationID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RewardsDenied(address,address,uint256)",
      "name": "RewardsDenied",
      "description": "Emitted when rewards are denied to an indexer.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allocationID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RewardsDenylistUpdated(bytes32,uint256)",
      "name": "RewardsDenylistUpdated",
      "description": "Emitted when a subgraph is denied for claiming rewards.",
      "parameterDecorators": [
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sinceBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetController(address)",
      "name": "SetController",
      "description": "",
      "parameterDecorators": [
        {
          "name": "controller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "accRewardsPerSignal()",
      "name": "accRewardsPerSignal",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "accRewardsPerSignalLastBlockUpdated()",
      "name": "accRewardsPerSignalLastBlockUpdated",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptProxy(address)",
      "name": "acceptProxy",
      "description": "Accept to be an implementation of proxy.",
      "parameterDecorators": [
        {
          "name": "_proxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "acceptProxyAndCall(address,bytes)",
      "name": "acceptProxyAndCall",
      "description": "Accept to be an implementation of proxy and then call a function from the new implementation as specified by `_data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract.",
      "parameterDecorators": [
        {
          "name": "_proxy",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "denylist(bytes32)",
      "name": "denylist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccRewardsForSubgraph(bytes32)",
      "name": "getAccRewardsForSubgraph",
      "description": "Gets the accumulated rewards for the subgraph.",
      "parameterDecorators": [
        {
          "name": "_subgraphDeploymentID",
          "description": "Subgraph deployment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Accumulated rewards for subgraph.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccRewardsPerAllocatedToken(bytes32)",
      "name": "getAccRewardsPerAllocatedToken",
      "description": "Gets the accumulated rewards per allocated token for the subgraph.",
      "parameterDecorators": [
        {
          "name": "_subgraphDeploymentID",
          "description": "Subgraph deployment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Accumulated rewards per allocated token for the subgraph.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_1",
          "description": "Accumulated rewards for subgraph.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccRewardsPerSignal()",
      "name": "getAccRewardsPerSignal",
      "description": "Gets the currently accumulated rewards per signal.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Currently accumulated rewards per signal.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNewRewardsPerSignal()",
      "name": "getNewRewardsPerSignal",
      "description": "Gets the issuance of rewards per signal since last updated. Compound interest formula: `a = p(1 + r/n)^nt` The formula is simplified with `n = 1` as we apply the interest once every time step. The `r` is passed with +1 included. So for 10% instead of 0.1 it is 1.1 The simplified formula is `a = p * r^t` Notation: t: time steps are in blocks since last updated p: total supply of GRT tokens a: inflated amount of total supply for the period `t` when interest `r` is applied x: newly accrued rewards token for the period `t`.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "newly accrued rewards per signal since last update.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewards(address)",
      "name": "getRewards",
      "description": "Calculate current rewards for a given allocation on demand.",
      "parameterDecorators": [
        {
          "name": "_allocationID",
          "description": "Allocation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Rewards amount for an allocation.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,uint256)",
      "name": "initialize",
      "description": "Initialize this contract.",
      "parameterDecorators": [
        {
          "name": "_controller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_issuanceRate",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isDenied(bytes32)",
      "name": "isDenied",
      "description": "Tells if subgraph is in deny list.",
      "parameterDecorators": [
        {
          "name": "_subgraphDeploymentID",
          "description": "Subgraph deployment ID to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Whether the subgraph is denied for claiming rewards or not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "issuanceRate()",
      "name": "issuanceRate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minimumSubgraphSignal()",
      "name": "minimumSubgraphSignal",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onSubgraphAllocationUpdate(bytes32)",
      "name": "onSubgraphAllocationUpdate",
      "description": "Triggers an update of rewards for a subgraph. Must be called before allocation on a subgraph changes. NOTE: Hook called from the Staking contract on allocate() and close().",
      "parameterDecorators": [
        {
          "name": "_subgraphDeploymentID",
          "description": "Subgraph deployment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Accumulated rewards per allocated token for a subgraph.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onSubgraphSignalUpdate(bytes32)",
      "name": "onSubgraphSignalUpdate",
      "description": "Triggers an update of rewards for a subgraph. Must be called before `signalled GRT` on a subgraph changes. Note: Hook called from the Curation contract on mint() and burn().",
      "parameterDecorators": [
        {
          "name": "_subgraphDeploymentID",
          "description": "Subgraph deployment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Accumulated rewards for subgraph.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setController(address)",
      "name": "setController",
      "description": "Set Controller. Only callable by current controller.",
      "parameterDecorators": [
        {
          "name": "_controller",
          "description": "Controller contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDenied(bytes32,bool)",
      "name": "setDenied",
      "description": "Denies to claim rewards for a subgraph. NOTE: Can only be called by the subgraph availability oracle.",
      "parameterDecorators": [
        {
          "name": "_subgraphDeploymentID",
          "description": "Subgraph deployment ID.",
          "recommendedTypes": []
        },
        {
          "name": "_deny",
          "description": "Whether to set the subgraph as denied for claiming rewards or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDeniedMany(bytes32[],bool[])",
      "name": "setDeniedMany",
      "description": "Denies to claim rewards for multiple subgraph. NOTE: Can only be called by the subgraph availability oracle.",
      "parameterDecorators": [
        {
          "name": "_subgraphDeploymentID",
          "description": "Array of subgraph deployment ID.",
          "recommendedTypes": []
        },
        {
          "name": "_deny",
          "description": "Array of denied status for claiming rewards for each subgraph.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setIssuanceRate(uint256)",
      "name": "setIssuanceRate",
      "description": "Sets the issuance rate. The issuance rate is defined as a percentage increase of the total supply per block. This means that it needs to be greater than 1.0, any number under 1.0 is not allowed and an issuance rate of 1.0 means no issuance. To accommodate a high precision the issuance rate is expressed in wei.",
      "parameterDecorators": [
        {
          "name": "_issuanceRate",
          "description": "Issuance rate expressed in wei.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumSubgraphSignal(uint256)",
      "name": "setMinimumSubgraphSignal",
      "description": "Sets the minimum signaled tokens on a subgraph to start accruing rewards.Can be set to zero which means that this feature is not being used.",
      "parameterDecorators": [
        {
          "name": "_minimumSubgraphSignal",
          "description": "Minimum signaled tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSubgraphAvailabilityOracle(address)",
      "name": "setSubgraphAvailabilityOracle",
      "description": "Sets the subgraph oracle allowed to denegate distribution of rewards to subgraphs.",
      "parameterDecorators": [
        {
          "name": "_subgraphAvailabilityOracle",
          "description": "Address of the subgraph availability oracle.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "subgraphAvailabilityOracle()",
      "name": "subgraphAvailabilityOracle",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "subgraphs(bytes32)",
      "name": "subgraphs",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "accRewardsForSubgraph",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "accRewardsForSubgraphSnapshot",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "accRewardsPerSignalSnapshot",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "accRewardsPerAllocatedToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "syncAllContracts()",
      "name": "syncAllContracts",
      "description": "Sync protocol contract addresses from the Controller registry. This function will cache all the contracts using the latest addresses Anyone can call the function whenever a Proxy contract change in the controller to ensure the protocol is using the latest version.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "takeRewards(address)",
      "name": "takeRewards",
      "description": "Pull rewards from the contract for a particular allocation. This function can only be called by the Staking contract. This function will mint the necessary tokens to reward based on the inflation calculation.",
      "parameterDecorators": [
        {
          "name": "_allocationID",
          "description": "Allocation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Assigned rewards amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateAccRewardsPerSignal()",
      "name": "updateAccRewardsPerSignal",
      "description": "Updates the accumulated rewards per signal and save checkpoint block number. Must be called before `issuanceRate` or `total signalled GRT` changes Called from the Curation contract on mint() and burn().",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Accumulated rewards per signal.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}