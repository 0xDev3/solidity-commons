{
  "schema": "../schema.json",
  "tags": [],
  "name": "DNSSECImpl",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AlgorithmUpdated(uint8,address)",
      "name": "AlgorithmUpdated",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DigestUpdated(uint8,address)",
      "name": "DigestUpdated",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Marker()",
      "name": "Marker",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": []
    },
    {
      "signature": "NSEC3DigestUpdated(uint8,address)",
      "name": "NSEC3DigestUpdated",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RRSetUpdated(bytes,bytes)",
      "name": "RRSetUpdated",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rrset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Test(uint256)",
      "name": "Test",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "t",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "algorithms(uint8)",
      "name": "algorithms",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "anchors()",
      "name": "anchors",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deleteRRSet(uint16,bytes,tuple(bytes,bytes),bytes)",
      "name": "deleteRRSet",
      "description": "Deletes an RR from the oracle.",
      "parameterDecorators": [
        {
          "name": "deleteType",
          "description": "The DNS record type to delete.",
          "recommendedTypes": []
        },
        {
          "name": "deleteName",
          "description": "which you want to delete.",
          "recommendedTypes": []
        },
        {
          "name": "nsec",
          "description": "The signed NSEC RRset. This is in the format described in section 5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature data, followed by a series of canonicalised RR records that the signature applies to.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rrset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sig",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "proof",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deleteRRSetNSEC3(uint16,bytes,tuple(bytes,bytes),tuple(bytes,bytes),bytes)",
      "name": "deleteRRSetNSEC3",
      "description": "Deletes an RR from the oracle using an NSEC3 proof. Deleting a record using NSEC3 requires using up to two NSEC3 records. There are two cases: 1. The name exists, but the record type doesn't. Eg, example.com has A records but no TXT records. 2. The name does not exist, but a parent name does. In the first case, we submit one NSEC3 proof in `closestEncloser` that matches the target name but does not have the bit for `deleteType` set in its type bitmap. In the second case, we submit two proofs: closestEncloser and nextClosest, that together prove that the name does not exist. NSEC3 records are in the format described in section 5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature data, followed by a series of canonicalised RR records that the signature applies to.",
      "parameterDecorators": [
        {
          "name": "deleteType",
          "description": "The DNS record type to delete.",
          "recommendedTypes": []
        },
        {
          "name": "deleteName",
          "description": "The name to delete.",
          "recommendedTypes": []
        },
        {
          "name": "closestEncloser",
          "description": "An NSEC3 proof matching the closest enclosing name - that is, the nearest ancestor of the target name that *does* exist.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rrset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sig",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "nextClosest",
          "description": "An NSEC3 proof covering the next closest name. This proves that the immediate subdomain of the closestEncloser does not exist.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rrset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sig",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "dnskey",
          "description": "An encoded DNSKEY record that has already been submitted to the oracle and can be used to verify the signatures closestEncloserSig and nextClosestSig.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "digests(uint8)",
      "name": "digests",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nsec3Digests(uint8)",
      "name": "nsec3Digests",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rrdata(uint16,bytes)",
      "name": "rrdata",
      "description": "Returns data about the RRs (if any) known to this oracle with the provided type and name.",
      "parameterDecorators": [
        {
          "name": "dnstype",
          "description": "The DNS record type to query.",
          "recommendedTypes": []
        },
        {
          "name": "name",
          "description": "The name to query, in DNS label-sequence format.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "inception The unix timestamp (wrapped) at which the signature for this RRSET was created.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "_1",
          "description": "expiration The unix timestamp (wrapped) at which the signature for this RRSET expires.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "_2",
          "description": "hash The hash of the RRset.",
          "recommendedTypes": [],
          "solidityType": "bytes20"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAlgorithm(uint8,address)",
      "name": "setAlgorithm",
      "description": "Sets the contract address for a signature verification algorithm. Callable only by the owner.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "The algorithm ID.",
          "recommendedTypes": []
        },
        {
          "name": "algo",
          "description": "The address of the algorithm contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDigest(uint8,address)",
      "name": "setDigest",
      "description": "Sets the contract address for a digest verification algorithm. Callable only by the owner.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "The digest ID.",
          "recommendedTypes": []
        },
        {
          "name": "digest",
          "description": "The address of the digest contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNSEC3Digest(uint8,address)",
      "name": "setNSEC3Digest",
      "description": "Sets the contract address for an NSEC3 digest algorithm. Callable only by the owner.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "The digest ID.",
          "recommendedTypes": []
        },
        {
          "name": "digest",
          "description": "The address of the digest contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwner(address)",
      "name": "setOwner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "submitRRSet(tuple(bytes,bytes),bytes)",
      "name": "submitRRSet",
      "description": "Submits a signed set of RRs to the oracle. RRSETs are only accepted if they are signed with a key that is already trusted, or if they are self-signed, and the signing key is identified by a DS record that is already trusted.",
      "parameterDecorators": [
        {
          "name": "input",
          "description": "The signed RR set. This is in the format described in section 5.3.2 of RFC4035: The RRDATA section from the RRSIG without the signature data, followed by a series of canonicalised RR records that the signature applies to.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rrset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sig",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "proof",
          "description": "The DNSKEY or DS to validate the signature against. Must Already have been submitted and proved previously.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "submitRRSets(tuple(bytes,bytes)[],bytes)",
      "name": "submitRRSets",
      "description": "Submits multiple RRSets.",
      "parameterDecorators": [
        {
          "name": "input",
          "description": "A list of RRSets and signatures forming a chain of trust from an existing known-good record.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rrset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sig",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_proof",
          "description": "The DNSKEY or DS to validate the first signature against.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The last RRSET submitted.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}