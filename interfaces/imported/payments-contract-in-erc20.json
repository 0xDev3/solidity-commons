{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "locking"
  ],
  "name": "PaymentsERC20",
  "description": "Payments Contract in ERC20.",
  "eventDecorators": [
    {
      "signature": "BuyerRefunded(bytes32,address)",
      "name": "BuyerRefunded",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "DefaultFeesCollector(address)",
      "name": "DefaultFeesCollector",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "feesCollector",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "DefaultOperator(address)",
      "name": "DefaultOperator",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "EIP712(address)",
      "name": "EIP712",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "eip712address",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewSeller(address)",
      "name": "NewSeller",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paid(bytes32)",
      "name": "Paid",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PayIn(bytes32,address,address)",
      "name": "PayIn",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PaymentWindow(uint256)",
      "name": "PaymentWindow",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "window",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UniverseFeesCollector(uint256,address)",
      "name": "UniverseFeesCollector",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "feesCollector",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UniverseOperator(uint256,address)",
      "name": "UniverseOperator",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256)",
      "name": "Withdraw",
      "description": "To be emitted when a translation is submitted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "EIP712Address()",
      "name": "EIP712Address",
      "description": "Returns the address of the of the contract containing the implementation of the EIP712 verifying functions.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the address of the EIP712 verifier contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptedCurrency()",
      "name": "acceptedCurrency",
      "description": "Returns a descriptor about the currency that this contract accepts.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the string describing the currency.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptsRefunds(bytes32)",
      "name": "acceptsRefunds",
      "description": "Returns true if the payment accepts a refund to the buyer. The payment must be in ASSET_TRANSFERRING and beyond expirationTime.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique ID that identifies the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the payment accepts a refund to the buyer.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowance(address)",
      "name": "allowance",
      "description": "Returns the allowance that the buyer has approved directly in the ERC20 contract in favour of this contract.",
      "parameterDecorators": [
        {
          "name": "buyer",
          "description": "the address of the buyer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the amount allowed by buyer.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceOf(address)",
      "name": "balanceOf",
      "description": "Returns the local ERC20 balance of the provided address that is stored in this contract, and hence, available for withdrawal.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "the address that is queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the local balance.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkPaymentInputs(tuple(bytes32,uint256,uint256,uint256,uint256,address,address))",
      "name": "checkPaymentInputs",
      "description": "Reverts unless the requirements for a PaymentInput that are common to both pay and relayedPay are fulfilled.",
      "parameterDecorators": [
        {
          "name": "payInput",
          "description": "The PaymentInput struct.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "feeBPS",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "universeId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "buyer",
              "description": "",
              "type": "address"
            },
            {
              "name": "seller",
              "description": "",
              "type": "address"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "computeFeeAmount(uint256,uint256)",
      "name": "computeFeeAmount",
      "description": "Safe computation of fee amount for a provided amount, feeBPS pair. Must return a value that is guaranteed to be less or equal to the provided amount.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount.",
          "recommendedTypes": []
        },
        {
          "name": "feeBPS",
          "description": "The percentage fee expressed in Basis Points (bps). feeBPS examples: 2.5% = 250 bps, 10% = 1000 bps, 100% = 10000 bps.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The fee amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "defaultFeesCollector()",
      "name": "defaultFeesCollector",
      "description": "Returns the default feesCollector.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "defaultOperator()",
      "name": "defaultOperator",
      "description": "Returns the default operator.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "enoughFundsAvailable(address,uint256)",
      "name": "enoughFundsAvailable",
      "description": "Returns true if the 'amount' required for a payment is available to this contract. In more detail: returns true if the sum of the buyer's local balance in this contract, plus funds available and approved in the ERC20 contract, are larger or equal than 'amount'.",
      "parameterDecorators": [
        {
          "name": "buyer",
          "description": "The address for which funds are queried.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount that is queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns true if enough funds are available.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "erc20()",
      "name": "erc20",
      "description": "Returns the address of the ERC20 contract from which tokens are accepted for payments.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the address of the ERC20 contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "erc20BalanceOf(address)",
      "name": "erc20BalanceOf",
      "description": "Returns the ERC20 balance of address in the ERC20 contract.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "the address that is queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the balance in the external ERC20 contract.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "finalize(tuple(bytes32,bool),bytes)",
      "name": "finalize",
      "description": "Relays the operator signature declaring that the asset transfer was successful or failed, and updates balances of seller or buyer, respectively. Can be executed by anyone, but the operator signature must be included as input param. Seller or Buyer's balances are updated, allowing explicit withdrawal. Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.",
      "parameterDecorators": [
        {
          "name": "transferResult",
          "description": "The asset transfer result struct signed by the operator.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "wasSuccessful",
              "description": "",
              "type": "bool"
            }
          ]
        },
        {
          "name": "operatorSignature",
          "description": "The operator signature of result.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "finalizeAndWithdraw(tuple(bytes32,bool),bytes)",
      "name": "finalizeAndWithdraw",
      "description": "Relays the operator signature declaring that the asset transfer was successful or failed, updates balances of seller or buyer, respectively, and proceeds to withdraw all funds in this contract available to msg.sender. Can be executed by anyone, but the operator signature must be included as input param. It is, however, expected to be executed by the seller, in case of a successful asset transfer, or the buyer, in case of a failed asset transfer. Moves payment to PAID or REFUNDED state on transfer success/failure, respectively.",
      "parameterDecorators": [
        {
          "name": "transferResult",
          "description": "The asset transfer result struct signed by the operator.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "wasSuccessful",
              "description": "",
              "type": "bool"
            }
          ]
        },
        {
          "name": "operatorSignature",
          "description": "The operator signature of result.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isRegisteredSeller(address)",
      "name": "isRegisteredSeller",
      "description": "Returns true if the address provided is a registered seller.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "the address that is queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns whether the address is registered as seller.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSellerRegistrationRequired()",
      "name": "isSellerRegistrationRequired",
      "description": "Returns whether sellers need to be registered to be able to accept payments.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Returns true if sellers need to be registered to be able to accept payments.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxFundsAvailable(address)",
      "name": "maxFundsAvailable",
      "description": "Returns the maximum amount of funds available to a buyer. In more detail: returns the sum of the buyer's local balance in this contract, plus the funds available and approved in the ERC20 contract.",
      "parameterDecorators": [
        {
          "name": "buyer",
          "description": "The address for which funds are queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the max funds available.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pay(tuple(bytes32,uint256,uint256,uint256,uint256,address,address),bytes)",
      "name": "pay",
      "description": "Starts Payment process directly by the buyer. Executed by the buyer, who relays the MetaTX with the operator's signature. The buyer must have approved the amount to this contract before. If all requirements are fulfilled, it stores the data relevant for the next steps of the payment, and it locks the ERC20 in this contract. Follows standard Checks-Effects-Interactions pattern to protect against re-entrancy attacks. Moves payment to ASSET_TRANSFERRING state.",
      "parameterDecorators": [
        {
          "name": "payInput",
          "description": "The struct containing all required payment data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "feeBPS",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "universeId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "buyer",
              "description": "",
              "type": "address"
            },
            {
              "name": "seller",
              "description": "",
              "type": "address"
            }
          ]
        },
        {
          "name": "operatorSignature",
          "description": "The signature of 'payInput' by the operator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paymentInfo(bytes32)",
      "name": "paymentInfo",
      "description": "Returns all data stored in a payment.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique ID that identifies the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the struct stored for the payment.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paymentState(bytes32)",
      "name": "paymentState",
      "description": "Returns the state of a payment. If payment is in ASSET_TRANSFERRING, it may be worth checking acceptsRefunds to check if it has gone beyond expirationTime.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique ID that identifies the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the state of the payment.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paymentWindow()",
      "name": "paymentWindow",
      "description": "Returns the amount of seconds that a payment can remain in ASSET_TRANSFERRING state without positive or negative confirmation by the operator.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the payment window in secs.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "refund(bytes32)",
      "name": "refund",
      "description": "Moves buyer's provided funds to buyer's balance. Anybody can call this function. Requires acceptsRefunds == true to proceed. After updating buyer's balance, he/she can later withdraw. Moves payment to REFUNDED state.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique ID that identifies the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "refundAndWithdraw(bytes32)",
      "name": "refundAndWithdraw",
      "description": "Executes refund and withdraw in one transaction. Anybody can call this function. Requires acceptsRefunds == true to proceed. All of msg.sender's balance in the contract is withdrawn, not only the part that was locked in this particular paymentId Moves payment to REFUNDED state.",
      "parameterDecorators": [
        {
          "name": "paymentId",
          "description": "The unique ID that identifies the payment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registerAsSeller()",
      "name": "registerAsSeller",
      "description": "Registers msg.sender as seller so that, if the contract has set _isSellerRegistrationRequired = true, then payments will be accepted with msg.sender as seller.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "relayedPay(tuple(bytes32,uint256,uint256,uint256,uint256,address,address),bytes)",
      "name": "relayedPay",
      "description": "Starts the Payment process via relay-by-operator. Executed by an operator, who relays the MetaTX with the buyer's signature. The buyer must have approved the amount to this contract before. If all requirements are fulfilled, it stores the data relevant for the next steps of the payment, and it locks the ERC20 in this contract. Follows standard Checks-Effects-Interactions pattern to protect against re-entrancy attacks. Moves payment to ASSET_TRANSFERRING state.",
      "parameterDecorators": [
        {
          "name": "payInput",
          "description": "The struct containing all required payment data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "paymentId",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "feeBPS",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "universeId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "buyer",
              "description": "",
              "type": "address"
            },
            {
              "name": "seller",
              "description": "",
              "type": "address"
            }
          ]
        },
        {
          "name": "buyerSignature",
          "description": "The signature of 'payInput' by the buyer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeUniverseFeesCollector(uint256)",
      "name": "removeUniverseFeesCollector",
      "description": "The universe will then have fees collected by _defaultFeesCollector. Removes a specific universe feesCollector.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeUniverseOperator(uint256)",
      "name": "removeUniverseOperator",
      "description": "The universe will then be operated by _defaultOperator. Removes a specific universe operator.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDefaultFeesCollector(address)",
      "name": "setDefaultFeesCollector",
      "description": "Sets a new default feesCollector.",
      "parameterDecorators": [
        {
          "name": "feesCollector",
          "description": "The address of the new default feesCollector.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDefaultOperator(address)",
      "name": "setDefaultOperator",
      "description": "Sets a new default operator.",
      "parameterDecorators": [
        {
          "name": "operator",
          "description": "The address of the new default operator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setEIP712(address)",
      "name": "setEIP712",
      "description": "Sets the address of the EIP712 verifier contract. This upgradable pattern is required in case that the EIP712 spec/code changes in the future.",
      "parameterDecorators": [
        {
          "name": "eip712address",
          "description": "The address of the new EIP712 contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setIsSellerRegistrationRequired(bool)",
      "name": "setIsSellerRegistrationRequired",
      "description": "Sets whether sellers are required to register in this contract before being able to accept payments.",
      "parameterDecorators": [
        {
          "name": "isRequired",
          "description": "(bool) if true, registration is required.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPaymentWindow(uint256)",
      "name": "setPaymentWindow",
      "description": "Sets the amount of time available to the operator, after the payment starts, to confirm either the success or the failure of the asset transfer. After this time, the payment moves to FAILED, allowing buyer to withdraw.",
      "parameterDecorators": [
        {
          "name": "window",
          "description": "The amount of time available, in seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUniverseFeesCollector(uint256,address)",
      "name": "setUniverseFeesCollector",
      "description": "Sets a new specific universe feesCollector.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        },
        {
          "name": "feesCollector",
          "description": "The address of the new universe feesCollector.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUniverseOperator(uint256,address)",
      "name": "setUniverseOperator",
      "description": "Sets a new specific universe operator.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        },
        {
          "name": "operator",
          "description": "The address of the new universe operator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "splitFundingSources(address,uint256)",
      "name": "splitFundingSources",
      "description": "Splits the funds required to pay 'amount' into two sources: - externalFunds: the amount of ERC20 required to be transferred from the external ERC20 contract - localFunds: the amount of ERC20 from the buyer's already available balance in this contract.",
      "parameterDecorators": [
        {
          "name": "buyer",
          "description": "The address for which the amount is to be split.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount to be split.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "externalFunds",
          "description": "The amount of ERC20 required from the external ERC20 contract.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "localFunds",
          "description": "The amount of ERC20 local funds required.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "universeFeesCollector(uint256)",
      "name": "universeFeesCollector",
      "description": "Returns the feesCollector of a specific universe.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "universeOperator(uint256)",
      "name": "universeOperator",
      "description": "Returns the operator of a specific universe.",
      "parameterDecorators": [
        {
          "name": "universeId",
          "description": "The id of the universe.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw()",
      "name": "withdraw",
      "description": "Transfers ERC20 avaliable in this contract's balanceOf[msg.sender] to msg.sender.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAmount(uint256)",
      "name": "withdrawAmount",
      "description": "Transfers only the specified ERC20 amount from this contract's balanceOf[msg.sender] to msg.sender. Reverts if balanceOf[msg.sender] < amount.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The required amount to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}