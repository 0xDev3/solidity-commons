{
  "schema": "../schema.json",
  "tags": [],
  "name": "ElixirMaster",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Deposit(address,uint256,uint256)",
      "name": "Deposit",
      "description": "===== Events ====. Token transfer event.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "is Number of token transfers.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EmergencyWithdraw(address,uint256,uint256)",
      "name": "EmergencyWithdraw",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "is Number of token transfers.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAllocPoint(uint256,uint256,uint256)",
      "name": "SetAllocPoint",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_oldAllocPoint",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_allocPoint",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetElixirPerBlock(uint256,uint256)",
      "name": "SetElixirPerBlock",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "oldElixirPerBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "elixirPerBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetMaxSupply(uint256,uint256)",
      "name": "SetMaxSupply",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "oldSupply",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newSupply",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256,uint256)",
      "name": "Withdraw",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "is Number of token transfers.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ELIXIR()",
      "name": "ELIXIR",
      "description": "===== Immutables ====.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ELIXIRPerBlock()",
      "name": "ELIXIRPerBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addPool(uint256,address,bool,address)",
      "name": "addPool",
      "description": "Add a new lp to the pool. Can only be called by the owner. Do not add the same token more than once. Rewards will be messed up if you do.",
      "parameterDecorators": [
        {
          "name": "_allocPoint",
          "description": "is the weight assigned to this pool, which will be used to calculate rewards for liquidity providers. This number will be added to totalAllocPoint which is used to calculate the relative weight of each pool.",
          "recommendedTypes": []
        },
        {
          "name": "_want",
          "description": "Address of the want token.",
          "recommendedTypes": []
        },
        {
          "name": "_withUpdate",
          "description": "Boolean that indicates whether to call massUpdatePools or not, which in turn will call updatePool for each pool. updatePool will update reward related variables as accELIXIRPerShare, lastRewardBlock for a given pool.",
          "recommendedTypes": []
        },
        {
          "name": "_strat",
          "description": "Strategy address that will ELIXIR compound want tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "availableAssets(address)",
      "name": "availableAssets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burnAddress()",
      "name": "burnAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(uint256,uint256)",
      "name": "deposit",
      "description": "Deposit a specific amount of Elixir tokens into the ElixirFarm. Want tokens moved from Vault -> Farm -> Strat (compounding).",
      "parameterDecorators": [
        {
          "name": "_poolId",
          "description": ": Pool index that contains the chosen compound strategy.",
          "recommendedTypes": []
        },
        {
          "name": "_wantAmt",
          "description": ": number of tokens to deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositAll(uint256)",
      "name": "depositAll",
      "description": "Deposit a the Elixir balance of user into Farm. Want tokens moved from Vault -> Farm -> Strat (compounding).",
      "parameterDecorators": [
        {
          "name": "_poolId",
          "description": ": Pool index that contains the chosen compound strategy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdraw(uint256)",
      "name": "emergencyWithdraw",
      "description": "Withdraw without caring about rewards. EMERGENCY ONLY.",
      "parameterDecorators": [
        {
          "name": "_poolId",
          "description": ": Pool index that contains the chosen compound strategy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getMultiplier(uint256,uint256)",
      "name": "getMultiplier",
      "description": "Return reward multiplier over the given _from to _to block.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "inCaseTokensGetStuck(address,uint256)",
      "name": "inCaseTokensGetStuck",
      "description": "inCaseTokensGetStuck. Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "token addres.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "token amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "massUpdatePools()",
      "name": "massUpdatePools",
      "description": "Update reward variables for all pools. Be careful of gas spending! TODO: Could this be the entry point for Chainlink Keeper?.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "maxSupply()",
      "name": "maxSupply",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ownerELIXIRReward()",
      "name": "ownerELIXIRReward",
      "description": "===== Fees ====.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingELIXIR(uint256,address)",
      "name": "pendingELIXIR",
      "description": "View function to see pending ELIXIR on frontend.",
      "parameterDecorators": [
        {
          "name": "_poolId",
          "description": ": Pool index.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": ": user address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolInfo(uint256)",
      "name": "poolInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "want",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "allocPoint",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastRewardBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "accELIXIRPerShare",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "strat",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolLength()",
      "name": "poolLength",
      "description": "Number of pools in the pool array.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setElixirPerBlock(uint256)",
      "name": "setElixirPerBlock",
      "description": "Update the Elixir per block reward. Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_ELIXIRPerBlock",
          "description": "new Elixir per block reward.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxSupply(uint256)",
      "name": "setMaxSupply",
      "description": "Update the max supply. Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_maxSupply",
          "description": "new max supply.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPoolAllocPoint(uint256,uint256,bool)",
      "name": "setPoolAllocPoint",
      "description": "Update the given pool's ELIXIR allocation point. Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_poolId",
          "description": ": Pool index.",
          "recommendedTypes": []
        },
        {
          "name": "_allocPoint",
          "description": "is the weight assigned to this pool.",
          "recommendedTypes": []
        },
        {
          "name": "_withUpdate",
          "description": "Indicates whether to call massUpdatePools or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakedWantTokens(uint256,address)",
      "name": "stakedWantTokens",
      "description": "View function to see staked Want tokens on frontend.",
      "parameterDecorators": [
        {
          "name": "_poolId",
          "description": ": Pool index.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": ": user address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "startBlock()",
      "name": "startBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalAllocPoint()",
      "name": "totalAllocPoint",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePool(uint256)",
      "name": "updatePool",
      "description": "Update reward variables of the given pool to be up-to-date.",
      "parameterDecorators": [
        {
          "name": "_poolId",
          "description": ": Pool index that contains the chosen compound strategy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userInfo(uint256,address)",
      "name": "userInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "shares",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardDebt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256,uint256)",
      "name": "withdraw",
      "description": "Withdraws funds from MasterChef. Want tokens moved from Strat -> Farm -> Vault.",
      "parameterDecorators": [
        {
          "name": "_poolId",
          "description": ": Pool index that contains the chosen compound strategy.",
          "recommendedTypes": []
        },
        {
          "name": "_wantAmt",
          "description": ": number of tokens to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAll(uint256)",
      "name": "withdrawAll",
      "description": "Withdraw all the tokens in balance.",
      "parameterDecorators": [
        {
          "name": "_poolId",
          "description": ": Pool index that contains the chosen compound strategy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}