{"schema":"../schema.json","tags":[],"name":"SBCDepositContract","description":"SBCDepositContract. Implementation of the ERC20 ETH2.0 deposit contract. For the original implementation, see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs.","eventDecorators":[{"signature":"DepositEvent(bytes,bytes,bytes,bytes,bytes)","name":"DepositEvent","description":"A processed deposit event. Emitted when someone's membership role is being updated.","parameterDecorators":[{"name":"pubkey","description":"","recommendedTypes":[],"indexed":false},{"name":"withdrawal_credentials","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"signature","description":"","recommendedTypes":[],"indexed":false},{"name":"index","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Paused(address)","name":"Paused","description":"Emitted when someone's membership role is being updated.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unpaused(address)","name":"Unpaused","description":"Emitted when someone's membership role is being updated.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"batchDeposit(bytes,bytes,bytes,bytes32[])","name":"batchDeposit","description":"","parameterDecorators":[{"name":"pubkeys","description":"","recommendedTypes":[]},{"name":"withdrawal_credentials","description":"","recommendedTypes":[]},{"name":"signatures","description":"","recommendedTypes":[]},{"name":"deposit_data_roots","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"claimTokens(address,address)","name":"claimTokens","description":"Allows to transfer any locked token from this contract. Only admin can call this method. Deposit-related tokens cannot be claimed.","parameterDecorators":[{"name":"_token","description":"address of the token, if it is not provided (0x00..00), native coins will be transferred.","recommendedTypes":[]},{"name":"_to","description":"address that will receive the locked tokens from this contract.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deposit(bytes,bytes,bytes,bytes32,uint256)","name":"deposit","description":"Submit a Phase 0 DepositData object.","parameterDecorators":[{"name":"pubkey","description":"A BLS12-381 public key.","recommendedTypes":[]},{"name":"withdrawal_credentials","description":"Commitment to a public key for withdrawals.","recommendedTypes":[]},{"name":"signature","description":"A BLS12-381 signature.","recommendedTypes":[]},{"name":"deposit_data_root","description":"The SHA-256 hash of the SSZ-encoded DepositData object. Used as a protection against malformed input.","recommendedTypes":[]},{"name":"stake_amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"get_deposit_count()","name":"get_deposit_count","description":"Query the current deposit count.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The deposit count encoded as a little endian 64-bit number.","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"get_deposit_root()","name":"get_deposit_root","description":"Query the current deposit root hash.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The deposit root hash.","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"onTokenTransfer(address,uint256,bytes)","name":"onTokenTransfer","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"stake_amount","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"pause()","name":"pause","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"paused()","name":"paused","description":"Returns true if the contract is paused, and false otherwise.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"stake_token()","name":"stake_token","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"unpause()","name":"unpause","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"validator_withdrawal_credentials(bytes)","name":"validator_withdrawal_credentials","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true}]}