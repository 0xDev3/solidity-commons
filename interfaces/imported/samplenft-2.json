{
  "schema": "../schema.json",
  "tags": [
    "nft"
  ],
  "name": "SampleNft",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Approval(address,address,uint256)",
      "name": "Approval",
      "description": "Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "approved",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ApprovalForAll(address,address,bool)",
      "name": "ApprovalForAll",
      "description": "Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "approved",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MinterAdded(address)",
      "name": "MinterAdded",
      "description": "Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MinterRemoved(address)",
      "name": "MinterRemoved",
      "description": "Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Transfer(address,address,uint256)",
      "name": "Transfer",
      "description": "Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WhitelistAdminAdded(address)",
      "name": "WhitelistAdminAdded",
      "description": "Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WhitelistAdminRemoved(address)",
      "name": "WhitelistAdminRemoved",
      "description": "Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WhitelistedAdded(address)",
      "name": "WhitelistedAdded",
      "description": "Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WhitelistedRemoved(address)",
      "name": "WhitelistedRemoved",
      "description": "Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MinterRemoval(address)",
      "name": "MinterRemoval",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addMinter(address)",
      "name": "addMinter",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addWhitelistAdmin(address)",
      "name": "addWhitelistAdmin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addWhitelisted(address)",
      "name": "addWhitelisted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approve(address,uint256)",
      "name": "approve",
      "description": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "address to be approved for the given token ID.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "uint256 ID of the token to be approved.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "balanceOf(address)",
      "name": "balanceOf",
      "description": "Gets the balance of the specified address.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "address to query the balance of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "baseTokenURI()",
      "name": "baseTokenURI",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllTokens(address)",
      "name": "getAllTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getApproved(uint256)",
      "name": "getApproved",
      "description": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "uint256 ID of the token to query the approval of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isApprovedForAll(address,address)",
      "name": "isApprovedForAll",
      "description": "Tells whether an operator is approved by a given owner.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "owner address which you want to query the approval of.",
          "recommendedTypes": []
        },
        {
          "name": "operator",
          "description": "operator address which you want to query the approval of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isMinter(address)",
      "name": "isMinter",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isWhitelistAdmin(address)",
      "name": "isWhitelistAdmin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isWhitelisted(address)",
      "name": "isWhitelisted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintBatch(address,uint256[])",
      "name": "mintBatch",
      "description": "Mints a token to an address in batch.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "address of the future owner of the token.",
          "recommendedTypes": []
        },
        {
          "name": "ids",
          "description": "ids of the token to be minted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintToken(address,uint256)",
      "name": "mintToken",
      "description": "Mints a token to an address.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "address of the future owner of the token.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "id of the minted NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintWithURI(address,uint256,string)",
      "name": "mintWithURI",
      "description": "Mints a token to an address with a tokenURI.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "address of the future owner of the token.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "id of the minted NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_uri",
          "description": "metadata link to be attached with nft.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "name()",
      "name": "name",
      "description": "Gets the token name.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ownerOf(uint256)",
      "name": "ownerOf",
      "description": "Gets the owner of the specified token ID.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "uint256 ID of the token to query the owner of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recover(bytes32,bytes)",
      "name": "recover",
      "description": "Recover signer address from a message by using their signature.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "bytes32 message, the hash is the signed message. What is recovered is the signer address.",
          "recommendedTypes": []
        },
        {
          "name": "sig",
          "description": "bytes signature, the signature is generated using web3.eth.sign().",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeWhitelisted(address)",
      "name": "removeWhitelisted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceMinter()",
      "name": "renounceMinter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceWhitelistAdmin()",
      "name": "renounceWhitelistAdmin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceWhitelisted()",
      "name": "renounceWhitelisted",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "safeTransfer(address,address,address,uint256)",
      "name": "safeTransfer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "safeTransferBatch(address,address,address,uint256[])",
      "name": "safeTransferBatch",
      "description": "transfer a token to an address in batch.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "address of the current owner of the token.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "address of the new owner of the token.",
          "recommendedTypes": []
        },
        {
          "name": "ids",
          "description": "list of ids to be transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setApprovalForAll(address,bool)",
      "name": "setApprovalForAll",
      "description": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "operator address to set the approval.",
          "recommendedTypes": []
        },
        {
          "name": "approved",
          "description": "representing the status of the approval to be set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBaseTokenURI(string)",
      "name": "setBaseTokenURI",
      "description": "",
      "parameterDecorators": [
        {
          "name": "uri",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenURI(uint256,string)",
      "name": "setTokenURI",
      "description": "public function to set the token URI for a given token Reverts if the token ID does not exist.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "uint256 ID of the token to set its URI.",
          "recommendedTypes": []
        },
        {
          "name": "uri",
          "description": "string URI to assign.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}. * Time complexity O(1), guaranteed to always use less than 30 000 gas.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "symbol()",
      "name": "symbol",
      "description": "Gets the token symbol.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenByIndex(uint256)",
      "name": "tokenByIndex",
      "description": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "uint256 representing the index to be accessed of the tokens list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenOfOwnerByIndex(address,uint256)",
      "name": "tokenOfOwnerByIndex",
      "description": "Gets the token ID at a given index of the tokens list of the requested owner.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "address owning the tokens list to be accessed.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "uint256 representing the index to be accessed of the requested tokens list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenURI(uint256)",
      "name": "tokenURI",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalSupply()",
      "name": "totalSupply",
      "description": "Gets the total amount of tokens stored by the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferNFT(address,address,address,uint256)",
      "name": "transferNFT",
      "description": "",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferWithSign(address,address,uint256,bytes32,bytes)",
      "name": "transferWithSign",
      "description": "",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "msgHash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "hashSig",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}