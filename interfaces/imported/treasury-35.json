{"schema":"../schema.json","tags":["borrowing","yield","dao","makerdao"],"name":"Treasury","description":"","eventDecorators":[{"signature":"GrantedAccess(address,bytes4)","name":"GrantedAccess","description":"To call when there is consensus on final result. Emitted when a user withdraws tokens.","parameterDecorators":[{"name":"access","description":"","recommendedTypes":[],"indexed":false},{"name":"signature","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"To call when there is consensus on final result. Emitted when a user withdraws tokens.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"UNIT()","name":"UNIT","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"batchOrchestrate(address,bytes4[])","name":"batchOrchestrate","description":"Adds orchestration for the provided function signatures.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[]},{"name":"signatures","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"chai()","name":"chai","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"dai()","name":"dai","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"daiJoin()","name":"daiJoin","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"debt()","name":"debt","description":"Returns the Treasury debt towards MakerDAO, in Dai. We have borrowed (rate * art) Borrowing limit (rate * art) <= (ink * spot).","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"live()","name":"live","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"orchestrate(address,bytes4)","name":"orchestrate","description":"Add orchestration.","parameterDecorators":[{"name":"user","description":"Address of user or contract having access to this contract.","recommendedTypes":[]},{"name":"signature","description":"bytes4 signature of the function we are giving orchestrated access to. It seems to me a bad idea to give access to humans, and would use this only for predictable smart contracts.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"orchestration(address,bytes4)","name":"orchestration","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pot()","name":"pot","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pullChai(address,uint256)","name":"pullChai","description":"Returns chai using chai savings as much as possible, and borrowing the rest. This function can only be called by other Yield contracts, not users directly.","parameterDecorators":[{"name":"to","description":"Wallet to send Chai to.","recommendedTypes":[]},{"name":"chaiAmount","description":"Chai quantity to send.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"pullDai(address,uint256)","name":"pullDai","description":"Returns dai using chai savings as much as possible, and borrowing the rest. This function can only be called by other Yield contracts, not users directly.","parameterDecorators":[{"name":"to","description":"Wallet to send Dai to.","recommendedTypes":[]},{"name":"daiAmount","description":"Dai quantity to send.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"pullWeth(address,uint256)","name":"pullWeth","description":"Moves Weth collateral from Treasury controlled Maker Eth vault to `to` address. This function can only be called by other Yield contracts, not users directly.","parameterDecorators":[{"name":"to","description":"Wallet to send Weth to.","recommendedTypes":[]},{"name":"wethAmount","description":"Weth quantity to send.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"pushChai(address,uint256)","name":"pushChai","description":"Takes Chai from user and pays as much system debt as possible, saving the rest as chai. User needs to have approved Treasury to take the Chai. This function can only be called by other Yield contracts, not users directly.","parameterDecorators":[{"name":"from","description":"Wallet to take Chai from.","recommendedTypes":[]},{"name":"chaiAmount","description":"Chai quantity to take.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"pushDai(address,uint256)","name":"pushDai","description":"Takes dai from user and pays as much system debt as possible, saving the rest as chai. User needs to have approved Treasury to take the Dai. This function can only be called by other Yield contracts, not users directly.","parameterDecorators":[{"name":"from","description":"Wallet to take Dai from.","recommendedTypes":[]},{"name":"daiAmount","description":"Dai quantity to take.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"pushWeth(address,uint256)","name":"pushWeth","description":"Takes Weth collateral from user into the Treasury Maker vault User needs to have approved Treasury to take the Weth. This function can only be called by other Yield contracts, not users directly.","parameterDecorators":[{"name":"from","description":"Wallet to take Weth from.","recommendedTypes":[]},{"name":"wethAmount","description":"Weth quantity to take.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"registerUnwind(address)","name":"registerUnwind","description":"Registers the one contract that will take assets from the Treasury if MakerDAO shuts down. This function can only be called by the contract owner, which should only be possible during deployment. This function allows Unwind to take all the Chai savings and operate with the Treasury MakerDAO vault.","parameterDecorators":[{"name":"unwind_","description":"The address of the Unwild.sol contract.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"savings()","name":"savings","description":"Returns the amount of chai in this contract, converted to Dai.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"shutdown()","name":"shutdown","description":"Disables pulling and pushing. Can only be called if MakerDAO shuts down.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unwind()","name":"unwind","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"vat()","name":"vat","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"weth()","name":"weth","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"wethJoin()","name":"wethJoin","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}