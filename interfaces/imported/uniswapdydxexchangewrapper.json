{"schema":"../schema.json","tags":["swaps","uniswap","dydx"],"name":"UniswapDydxExchangeWrapper","description":"","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"UNISWAP_FACTORY()","name":"UNISWAP_FACTORY","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"WETH()","name":"WETH","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"exchange(address,address,address,address,uint256,bytes)","name":"exchange","description":"Exchange some amount of takerToken for makerToken.","parameterDecorators":[{"name":"tradeOriginator","description":"","recommendedTypes":[]},{"name":"receiver","description":"Address to set allowance on once the trade has completed.","recommendedTypes":[]},{"name":"makerToken","description":"Address of makerToken, the token to receive.","recommendedTypes":[]},{"name":"takerToken","description":"Address of takerToken, the token to pay.","recommendedTypes":[]},{"name":"requestedFillAmount","description":"Amount of takerToken being paid.","recommendedTypes":[]},{"name":"orderData","description":"Arbitrary bytes data for any information to pass to the exchange.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"getExchangeCost(address,address,uint256,bytes)","name":"getExchangeCost","description":"Get amount of takerToken required to buy a certain amount of makerToken for a given trade. Should match the takerToken amount used in exchangeForAmount. If the order cannot provide exactly desiredMakerToken, then it must return the price to buy the minimum amount greater than desiredMakerToken.","parameterDecorators":[{"name":"makerToken","description":"Address of makerToken, the token to receive.","recommendedTypes":[]},{"name":"takerToken","description":"Address of takerToken, the token to pay.","recommendedTypes":[]},{"name":"desiredMakerToken","description":"Amount of makerToken requested.","recommendedTypes":[]},{"name":"orderData","description":"Arbitrary bytes data for any information to pass to the exchange.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getExchangeCostSell(address,address,uint256,bytes)","name":"getExchangeCostSell","description":"Get amount of makerToken to be received for a certain amount of takerTokens.","parameterDecorators":[{"name":"makerToken","description":"Address of makerToken, the token to receive.","recommendedTypes":[]},{"name":"takerToken","description":"Address of takerToken, the token to pay.","recommendedTypes":[]},{"name":"desiredTakerAmount","description":"Amount of takerToken required to be sold.","recommendedTypes":[]},{"name":"orderData","description":"Arbitrary bytes data for any information to pass to the exchange.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"suicideMe()","name":"suicideMe","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}