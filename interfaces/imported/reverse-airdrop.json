{"schema":"../schema.json","tags":["tokens","airdrops"],"name":"Airdrop","description":"Reverse Airdrop. Make airdrops of a given ERC20 token, available to a list of accounts. Instead of sending the tokens to every account, each account withdraws its awarded tokens.","eventDecorators":[{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"WHITELISTER_ROLE()","name":"WHITELISTER_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"addOnetoWhiteList(address,address,uint256,bool)","name":"addOnetoWhiteList","description":"Add/change the claimable ammount of tolkens for one account on the white list.","parameterDecorators":[{"name":"tokenAddress","description":"Token assigned to the white list.","recommendedTypes":[]},{"name":"accountAddress","description":"Account on the white list.","recommendedTypes":[]},{"name":"amount","description":"Amount of tokens, accountAddress will be able to claim.","recommendedTypes":[]},{"name":"overrideAmt","description":"If true, the new amount will replace the old amount. If false, the new amount will be added to the old amount.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addToWhiteList(address,address[],uint256[],bool)","name":"addToWhiteList","description":"Add/change a white list of accounts with the amount of tokens each account can claim.","parameterDecorators":[{"name":"tokenAddress","description":"Token to assign the white list.","recommendedTypes":[]},{"name":"addressList","description":"List of accounts to add to the white list.","recommendedTypes":[]},{"name":"amountList","description":"List of amounts each account will be able to claim. Assumes the index of amountList[i] corresponds to the same index of addressList[i].","recommendedTypes":[]},{"name":"overrideAmount","description":"If true, the old amount assigned to the account (if any) will be overridden with the new amount. If false, the new amount will be added to the previously assigned amount.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"claimMyTokens(address,address,uint256)","name":"claimMyTokens","description":"A user on the white list claims its tokens.","parameterDecorators":[{"name":"tokenOwner","description":"The account from which the tokens will be withdrawn.","recommendedTypes":[]},{"name":"tokenAddress","description":"Token assigned to the white list.","recommendedTypes":[]},{"name":"amount","description":"The ammount the user whishes to claim. It could be less than the total claimable amount.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getMyClaimableBalance(address)","name":"getMyClaimableBalance","description":"Returns the claimable amount of tokens. A user on the white list calls this function to check its balance.","parameterDecorators":[{"name":"tokenAddress","description":"Token assigned to the white list.","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"Returns the balance. Zero also means the user may have never been on the white list.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getWhiteListedClaimableBalance(address,address)","name":"getWhiteListedClaimableBalance","description":"Get the claimable balance for one specific account.","parameterDecorators":[{"name":"tokenAddress","description":"Token assigned to the white list.","recommendedTypes":[]},{"name":"accountAddress","description":"Account to query.","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"Returns the balance. Zero also means it may have never been on the white list.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"subtractFromWhiteList(address,address,uint256)","name":"subtractFromWhiteList","description":"Reduce the amount of claimable tokens of one account on the white list.","parameterDecorators":[{"name":"tokenAddress","description":"Token assigned to the white list.","recommendedTypes":[]},{"name":"accountAddress","description":"Account from which claimable tokens will be subtracted.","recommendedTypes":[]},{"name":"amount","description":"Amount of tokens to subtract. It cannot be higher than current balance.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"See {IERC165-supportsInterface}.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true}]}