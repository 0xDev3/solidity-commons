{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "swaps"
  ],
  "name": "SwapEthWrapper",
  "description": "SwapEthWrapper. A wrapper contract for Swap contracts that have WETH as one of the pooled tokens.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "LP_TOKEN()",
      "name": "LP_TOKEN",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "OWNER()",
      "name": "OWNER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SWAP()",
      "name": "SWAP",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WETH_ADDRESS()",
      "name": "WETH_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WETH_INDEX()",
      "name": "WETH_INDEX",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addLiquidity(uint256[],uint256,uint256)",
      "name": "addLiquidity",
      "description": "Add liquidity to the pool with the given amounts of tokens. The msg.value of this call should match the value in amounts array in position of WETH9.",
      "parameterDecorators": [
        {
          "name": "amounts",
          "description": "the amounts of each token to add, in their native precision.",
          "recommendedTypes": []
        },
        {
          "name": "minToMint",
          "description": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation.",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "latest timestamp to accept this transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of LP token user minted and received.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateRemoveLiquidity(uint256)",
      "name": "calculateRemoveLiquidity",
      "description": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "the amount of LP tokens that would be burned on withdrawal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "array of token balances that the user will receive.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calculateRemoveLiquidityOneToken(uint256,uint8)",
      "name": "calculateRemoveLiquidityOneToken",
      "description": "Calculate the amount of underlying token available to withdraw when withdrawing via only single token.",
      "parameterDecorators": [
        {
          "name": "tokenAmount",
          "description": "the amount of LP token to burn.",
          "recommendedTypes": []
        },
        {
          "name": "tokenIndex",
          "description": "index of which token will be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "availableTokenAmount",
          "description": "calculated amount of underlying token available to withdraw.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calculateTokenAmount(uint256[],bool)",
      "name": "calculateTokenAmount",
      "description": "A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \"min\" parameters on calls to fight front-running. This shouldn't be used outside frontends for user estimates.",
      "parameterDecorators": [
        {
          "name": "amounts",
          "description": "an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "recommendedTypes": []
        },
        {
          "name": "deposit",
          "description": "whether this is a deposit or a withdrawal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "token amount the user will receive.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pooledTokens(uint256)",
      "name": "pooledTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeLiquidity(uint256,uint256[],uint256)",
      "name": "removeLiquidity",
      "description": "Burn LP tokens to remove liquidity from the pool. Liquidity can always be removed, even when the pool is paused. Caller will receive ETH instead of WETH9.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "the amount of LP tokens to burn.",
          "recommendedTypes": []
        },
        {
          "name": "minAmounts",
          "description": "the minimum amounts of each token in the pool acceptable for this burn. Useful as a front-running mitigation.",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "latest timestamp to accept this transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amounts of tokens user received.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeLiquidityImbalance(uint256[],uint256,uint256)",
      "name": "removeLiquidityImbalance",
      "description": "Remove liquidity from the pool, weighted differently than the pool's current balances. Caller will receive ETH instead of WETH9.",
      "parameterDecorators": [
        {
          "name": "amounts",
          "description": "how much of each token to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "maxBurnAmount",
          "description": "the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "latest timestamp to accept this transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of LP tokens burned.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeLiquidityOneToken(uint256,uint8,uint256,uint256)",
      "name": "removeLiquidityOneToken",
      "description": "Remove liquidity from the pool all in one token. Caller will receive ETH instead of WETH9.",
      "parameterDecorators": [
        {
          "name": "tokenAmount",
          "description": "the amount of the token you want to receive.",
          "recommendedTypes": []
        },
        {
          "name": "tokenIndex",
          "description": "the index of the token you want to receive.",
          "recommendedTypes": []
        },
        {
          "name": "minAmount",
          "description": "the minimum amount to withdraw, otherwise revert.",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "latest timestamp to accept this transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of chosen token user received.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rescue()",
      "name": "rescue",
      "description": "Rescues any of the ETH, the pooled tokens, or the LPToken that may be stuck in this contract. Only the OWNER can call this function.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swap(uint8,uint8,uint256,uint256,uint256)",
      "name": "swap",
      "description": "Swap two tokens using the underlying pool. If tokenIndexFrom represents WETH9 in the pool, the caller must set msg.value equal to dx. If the user is swapping to WETH9 in the pool, the user will receive ETH instead.",
      "parameterDecorators": [
        {
          "name": "tokenIndexFrom",
          "description": "the token the user wants to swap from.",
          "recommendedTypes": []
        },
        {
          "name": "tokenIndexTo",
          "description": "the token the user wants to swap to.",
          "recommendedTypes": []
        },
        {
          "name": "dx",
          "description": "the amount of tokens the user wants to swap from.",
          "recommendedTypes": []
        },
        {
          "name": "minDy",
          "description": "the min amount the user would like to receive, or revert.",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "latest timestamp to accept this transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}