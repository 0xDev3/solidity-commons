{
  "schema": "../schema.json",
  "tags": [
    "locking"
  ],
  "name": "BlockRewardAuRa",
  "description": "",
  "eventDecorators": [
    {
      "signature": "BridgeTokenRewardAdded(uint256,uint256,address)",
      "name": "BridgeTokenRewardAdded",
      "description": "Emitted when an account withdraws funds from RelayHub.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cumulativeAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "bridge",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AddedReceiver(uint256,address,address)",
      "name": "AddedReceiver",
      "description": "Emitted when an account withdraws funds from RelayHub.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "bridge",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BridgeNativeRewardAdded(uint256,uint256,address)",
      "name": "BridgeNativeRewardAdded",
      "description": "Emitted when an account withdraws funds from RelayHub.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cumulativeAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "bridge",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MintedNative(address[],uint256[])",
      "name": "MintedNative",
      "description": "Emitted when an account withdraws funds from RelayHub.",
      "parameterDecorators": [
        {
          "name": "receivers",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rewards",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "migrateSnapshotsAndRewards(address)",
      "name": "migrateSnapshotsAndRewards",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_miningAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenMinterContract(address)",
      "name": "setTokenMinterContract",
      "description": "as a minting contract.",
      "parameterDecorators": [
        {
          "name": "_tokenMinterContract",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addBridgeTokenFeeReceivers(uint256)",
      "name": "addBridgeTokenFeeReceivers",
      "description": "(for backward compatibility with the previous bridge contract).",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "snapshotPoolValidatorStakeAmount(uint256,address)",
      "name": "snapshotPoolValidatorStakeAmount",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setErcToNativeBridgesAllowed(address[])",
      "name": "setErcToNativeBridgesAllowed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_bridgesAllowed",
          "description": "The array of bridge addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "currentPoolRewards(uint256,uint256[],uint256,uint256)",
      "name": "currentPoolRewards",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_rewardToDistribute",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_blocksCreatedShareNum",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_blocksCreatedShareDenom",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_stakingEpoch",
          "description": "The number of the current staking epoch.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addBridgeNativeRewardReceivers(uint256)",
      "name": "addBridgeNativeRewardReceivers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "The fee/reward amount distributed to participants.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "blockRewardContractId()",
      "name": "blockRewardContractId",
      "description": "ensure it works with the BlockReward contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintedForAccountInBlock(address,uint256)",
      "name": "mintedForAccountInBlock",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "epochPoolNativeReward(uint256,address)",
      "name": "epochPoolNativeReward",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isInitialized()",
      "name": "isInitialized",
      "description": "Returns a boolean flag indicating if the `initialize` function has been called.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentNativeRewardToDistribute(address,uint256,uint256,uint256,address[])",
      "name": "currentNativeRewardToDistribute",
      "description": "Used internally by the `_distributeNativeRewards` function.",
      "parameterDecorators": [
        {
          "name": "_stakingContract",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_stakingEpoch",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_totalRewardShareNum",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_totalRewardShareDenom",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_validators",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintedForAccount(address)",
      "name": "mintedForAccount",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ercToNativeBridgesAllowed()",
      "name": "ercToNativeBridgesAllowed",
      "description": "Returns the array of `erc-to-native` bridge addresses set by the `setErcToNativeBridgesAllowed` setter.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintedInBlock(uint256)",
      "name": "mintedInBlock",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentTokenRewardToDistribute(address,uint256,uint256,uint256,address[])",
      "name": "currentTokenRewardToDistribute",
      "description": "Usually equals to `rewardToDistribute`. Used internally by the `_distributeTokenRewards` function.",
      "parameterDecorators": [
        {
          "name": "_stakingContract",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_stakingEpoch",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_totalRewardShareNum",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_totalRewardShareDenom",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_validators",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address)",
      "name": "initialize",
      "description": "(for statistics migration purposes).",
      "parameterDecorators": [
        {
          "name": "_validatorSet",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_prevBlockReward",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "STAKE_TOKEN_INFLATION_RATE()",
      "name": "STAKE_TOKEN_INFLATION_RATE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "epochsToClaimRewardFrom(address,address)",
      "name": "epochsToClaimRewardFrom",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_poolStakingAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_staker",
          "description": "The staker's address (delegator or candidate/validator).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "epochsToClaimFrom",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validatorRewardPercent(address)",
      "name": "validatorRewardPercent",
      "description": "pool for which the getter must return the coefficient.",
      "parameterDecorators": [
        {
          "name": "_stakingAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addBridgeNativeFeeReceivers(uint256)",
      "name": "addBridgeNativeFeeReceivers",
      "description": "(for backward compatibility with the previous bridge contract).",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mintedTotally()",
      "name": "mintedTotally",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delegatorShare(uint256,uint256,uint256,uint256,uint256)",
      "name": "delegatorShare",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_stakingEpoch",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_delegatorStaked",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_validatorStaked",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_totalStaked",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_poolReward",
          "description": "The value of pool reward.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addBridgeTokenRewardReceivers(uint256)",
      "name": "addBridgeTokenRewardReceivers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "The fee/reward amount distributed to participants.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNativeToErcBridgesAllowed(address[])",
      "name": "setNativeToErcBridgesAllowed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_bridgesAllowed",
          "description": "The array of bridge addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenRewardUndistributed()",
      "name": "tokenRewardUndistributed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferReward(uint256,uint256,address)",
      "name": "transferReward",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "snapshotPoolTotalStakeAmount(uint256,address)",
      "name": "snapshotPoolTotalStakeAmount",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validatorShare(uint256,uint256,uint256,uint256)",
      "name": "validatorShare",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_stakingEpoch",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_validatorStaked",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_totalStaked",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_poolReward",
          "description": "The value of pool reward.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setErcToErcBridgesAllowed(address[])",
      "name": "setErcToErcBridgesAllowed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_bridgesAllowed",
          "description": "The array of bridge addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ercToErcBridgesAllowed()",
      "name": "ercToErcBridgesAllowed",
      "description": "Returns the array of `erc-to-erc` bridge addresses set by the `setErcToErcBridgesAllowed` setter.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onTokenTransfer(address,uint256,bytes)",
      "name": "onTokenTransfer",
      "description": "by the `ERC677BridgeTokenRewardable.transferAndCall` function.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "extraReceiversQueueSize()",
      "name": "extraReceiversQueueSize",
      "description": "Returns the current size of the address queue created by the `addExtraReceiver` function.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addExtraReceiver(uint256,address)",
      "name": "addExtraReceiver",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_receiver",
          "description": "The address for which the `_amount` of native coins must be minted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "bridgeNativeReward()",
      "name": "bridgeNativeReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nativeRewardUndistributed()",
      "name": "nativeRewardUndistributed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nativeToErcBridgesAllowed()",
      "name": "nativeToErcBridgesAllowed",
      "description": "the `setNativeToErcBridgesAllowed` setter.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintedTotallyByBridge(address)",
      "name": "mintedTotallyByBridge",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "epochPoolTokenReward(uint256,address)",
      "name": "epochPoolTokenReward",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getValidatorReward(uint256,address)",
      "name": "getValidatorReward",
      "description": "`uint256 nativeReward` - the reward amount in native coins.",
      "parameterDecorators": [
        {
          "name": "_stakingEpoch",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_poolStakingAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "tokenReward",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "nativeReward",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "clearBlocksCreated()",
      "name": "clearBlocksCreated",
      "description": "the `blocksCreated` mapping for the current staking epoch and a new validator set.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenMinterContract()",
      "name": "tokenMinterContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validatorMinRewardPercent(uint256)",
      "name": "validatorMinRewardPercent",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "epochsPoolGotRewardFor(address)",
      "name": "epochsPoolGotRewardFor",
      "description": "got a non-zero reward.",
      "parameterDecorators": [
        {
          "name": "_stakingAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validatorSetContract()",
      "name": "validatorSetContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDelegatorReward(uint256,uint256,address)",
      "name": "getDelegatorReward",
      "description": "`uint256 nativeReward` - the reward amount in native coins.",
      "parameterDecorators": [
        {
          "name": "_delegatorStake",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_stakingEpoch",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_poolStakingAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "tokenReward",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "nativeReward",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "blocksCreated(uint256,address)",
      "name": "blocksCreated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reward(address[],uint16[])",
      "name": "reward",
      "description": "native coins needed for the `erc-to-native` bridge.",
      "parameterDecorators": [
        {
          "name": "benefactors",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "kind",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "receiversNative",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "rewardsNative",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "bridgeTokenReward()",
      "name": "bridgeTokenReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}