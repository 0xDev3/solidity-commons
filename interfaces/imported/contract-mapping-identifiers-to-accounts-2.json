{"schema":"../schema.json","tags":[],"name":"FederatedAttestations","description":"Contract mapping identifiers to accounts.","eventDecorators":[{"signature":"AttestationRegistered(bytes32,address,address,address,uint64,uint64)","name":"AttestationRegistered","description":"Emitted when someone unbundles tokens from the bundle using the rakeback contract.","parameterDecorators":[{"name":"identifier","description":"","recommendedTypes":[],"indexed":true},{"name":"issuer","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"- The token recipient.","recommendedTypes":[],"indexed":true},{"name":"signer","description":"","recommendedTypes":[],"indexed":false},{"name":"issuedOn","description":"","recommendedTypes":[],"indexed":false},{"name":"publishedOn","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"AttestationRevoked(bytes32,address,address,address,uint64,uint64)","name":"AttestationRevoked","description":"Emitted when someone unbundles tokens from the bundle using the rakeback contract.","parameterDecorators":[{"name":"identifier","description":"","recommendedTypes":[],"indexed":true},{"name":"issuer","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"- The token recipient.","recommendedTypes":[],"indexed":true},{"name":"signer","description":"","recommendedTypes":[],"indexed":false},{"name":"issuedOn","description":"","recommendedTypes":[],"indexed":false},{"name":"publishedOn","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"EIP712DomainSeparatorSet(bytes32)","name":"EIP712DomainSeparatorSet","description":"Emitted when someone unbundles tokens from the bundle using the rakeback contract.","parameterDecorators":[{"name":"eip712DomainSeparator","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when someone unbundles tokens from the bundle using the rakeback contract.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"EIP712_OWNERSHIP_ATTESTATION_TYPEHASH()","name":"EIP712_OWNERSHIP_ATTESTATION_TYPEHASH","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"MAX_ATTESTATIONS_PER_IDENTIFIER()","name":"MAX_ATTESTATIONS_PER_IDENTIFIER","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"MAX_IDENTIFIERS_PER_ADDRESS()","name":"MAX_IDENTIFIERS_PER_ADDRESS","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"addressToIdentifiers(address,address,uint256)","name":"addressToIdentifiers","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]},{"name":"param2","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"batchRevokeAttestations(address,bytes32[],address[])","name":"batchRevokeAttestations","description":"Revokes attestations [identifiers <-> accounts] from issuer. Throws if the number of identifiers and accounts is not the sameThrows if sender is not the issuer or currently registered signer of issuerThrows if an attestation is not found for identifiers[i] <-> accounts[i].","parameterDecorators":[{"name":"issuer","description":"Address of the issuer of all attestations to be revoked.","recommendedTypes":[]},{"name":"identifiers","description":"Hash of the identifiers.","recommendedTypes":[]},{"name":"accounts","description":"Addresses of the accounts mapped to the identifiers at the same indices.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"eip712DomainSeparator()","name":"eip712DomainSeparator","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getUniqueAttestationHash(bytes32,address,address,address,uint64)","name":"getUniqueAttestationHash","description":"","parameterDecorators":[{"name":"identifier","description":"","recommendedTypes":[]},{"name":"issuer","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]},{"name":"signer","description":"","recommendedTypes":[]},{"name":"issuedOn","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getVersionNumber()","name":"getVersionNumber","description":"Returns the storage, major, minor, and patch version of the contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"identifierToAttestations(bytes32,address,uint256)","name":"identifierToAttestations","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]},{"name":"param2","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"account","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"signer","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"issuedOn","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"publishedOn","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize()","name":"initialize","description":"Used in place of the constructor to allow the contract to be upgradable via proxy.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialized()","name":"initialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"lookupAttestations(bytes32,address[])","name":"lookupAttestations","description":"Returns info about attestations for `identifier` produced by signers of `trustedIssuers`. Adds attestation info to the arrays in order of provided trustedIssuersExpectation that only one attestation exists per (identifier, issuer, account).","parameterDecorators":[{"name":"identifier","description":"Hash of the identifier.","recommendedTypes":[]},{"name":"trustedIssuers","description":"Array of n issuers whose attestations will be included.","recommendedTypes":[]}],"returnDecorators":[{"name":"countsPerIssuer","description":"","recommendedTypes":[],"solidityType":"uint256[]"},{"name":"accounts","description":"","recommendedTypes":[],"solidityType":"address[]"},{"name":"signers","description":"","recommendedTypes":[],"solidityType":"address[]"},{"name":"issuedOns","description":"","recommendedTypes":[],"solidityType":"uint64[]"},{"name":"publishedOns","description":"","recommendedTypes":[],"solidityType":"uint64[]"}],"emittableEvents":[],"readOnly":true},{"signature":"lookupIdentifiers(address,address[])","name":"lookupIdentifiers","description":"Returns identifiers mapped to `account` by signers of `trustedIssuers`. Adds identifier info to the arrays in order of provided trustedIssuersExpectation that only one attestation exists per (identifier, issuer, account).","parameterDecorators":[{"name":"account","description":"Address of the account.","recommendedTypes":[]},{"name":"trustedIssuers","description":"Array of n issuers whose identifier mappings will be used.","recommendedTypes":[]}],"returnDecorators":[{"name":"countsPerIssuer","description":"","recommendedTypes":[],"solidityType":"uint256[]"},{"name":"identifiers","description":"","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"registerAttestation(bytes32,address,address,address,uint64,uint8,bytes32,bytes32)","name":"registerAttestation","description":"Registers an attestation with a valid signature. Throws if an attestation with the same (identifier, issuer, account) already exists.","parameterDecorators":[{"name":"identifier","description":"Hash of the identifier to be attested.","recommendedTypes":[]},{"name":"issuer","description":"Address of the attestation issuer.","recommendedTypes":[]},{"name":"account","description":"Address of the account being mapped to the identifier.","recommendedTypes":[]},{"name":"signer","description":"Address of the signer of the attestation.","recommendedTypes":[]},{"name":"issuedOn","description":"Time at which the issuer issued the attestation in Unix time.","recommendedTypes":[]},{"name":"v","description":"The recovery id of the incoming ECDSA signature.","recommendedTypes":[]},{"name":"r","description":"Output value r of the ECDSA signature.","recommendedTypes":[]},{"name":"s","description":"Output value s of the ECDSA signature.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"registerAttestationAsIssuer(bytes32,address,uint64)","name":"registerAttestationAsIssuer","description":"Registers an attestation directly from the issuer. Attestation signer and issuer in storage is set to msg.senderThrows if an attestation with the same (identifier, issuer, account) already exists.","parameterDecorators":[{"name":"identifier","description":"Hash of the identifier to be attested.","recommendedTypes":[]},{"name":"account","description":"Address of the account being mapped to the identifier.","recommendedTypes":[]},{"name":"issuedOn","description":"Time at which the issuer issued the attestation in Unix time.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"registryContract()","name":"registryContract","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"revokeAttestation(bytes32,address,address)","name":"revokeAttestation","description":"Revokes an attestation. Throws if sender is not the issuer, signer, or account.","parameterDecorators":[{"name":"identifier","description":"Hash of the identifier to be revoked.","recommendedTypes":[]},{"name":"issuer","description":"Address of the attestation issuer.","recommendedTypes":[]},{"name":"account","description":"Address of the account mapped to the identifier.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"revokedAttestations(bytes32)","name":"revokedAttestations","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"validateAttestationSig(bytes32,address,address,address,uint64,uint8,bytes32,bytes32)","name":"validateAttestationSig","description":"Validates the given attestation and signature. Throws if attestation has been revokedThrows if signer is not an authorized AttestationSigner of the issuer.","parameterDecorators":[{"name":"identifier","description":"Hash of the identifier to be attested.","recommendedTypes":[]},{"name":"issuer","description":"Address of the attestation issuer.","recommendedTypes":[]},{"name":"account","description":"Address of the account being mapped to the identifier.","recommendedTypes":[]},{"name":"signer","description":"Address of the signer of the attestation.","recommendedTypes":[]},{"name":"issuedOn","description":"Time at which the issuer issued the attestation in Unix time.","recommendedTypes":[]},{"name":"v","description":"The recovery id of the incoming ECDSA signature.","recommendedTypes":[]},{"name":"r","description":"Output value r of the ECDSA signature.","recommendedTypes":[]},{"name":"s","description":"Output value s of the ECDSA signature.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":true}]}