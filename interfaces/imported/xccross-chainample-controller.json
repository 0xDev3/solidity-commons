{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "bridges"
  ],
  "name": "XCAmpleController",
  "description": "XC(Cross-Chain)Ample Controller. This component administers the XCAmple ERC20 token contract. It maintains a set of white-listed bridge gateway contracts which have the ability to `mint` and `burn` xcAmples. It also performs rebase on XCAmple, based on updated AMPL supply reported through the bridge gateway.",
  "eventDecorators": [
    {
      "signature": "GatewayBurn(address,address,uint256)",
      "name": "GatewayBurn",
      "description": "Event emited when a user withdraws his tokens from the bank.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the withdrawn tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "Address of the token which was withdrawn.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "user",
          "description": "Address of the user which withdrawn the tokens.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GatewayMint(address,address,uint256)",
      "name": "GatewayMint",
      "description": "Event emited when a user withdraws his tokens from the bank.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the withdrawn tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "Address of the token which was withdrawn.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "user",
          "description": "Address of the user which withdrawn the tokens.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GatewayRebaseReported(address,uint256,uint256,uint256)",
      "name": "GatewayRebaseReported",
      "description": "Event emited when a user withdraws his tokens from the bank.",
      "parameterDecorators": [
        {
          "name": "bridgeGateway",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "globalAMPLSupply",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestampSec",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GatewayWhitelistUpdated(address,bool)",
      "name": "GatewayWhitelistUpdated",
      "description": "Event emited when a user withdraws his tokens from the bank.",
      "parameterDecorators": [
        {
          "name": "bridgeGateway",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "active",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LogRebase(uint256,int256,uint256)",
      "name": "LogRebase",
      "description": "Event emited when a user withdraws his tokens from the bank.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the withdrawn tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "Address of the token which was withdrawn.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "user",
          "description": "Address of the user which withdrawn the tokens.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event emited when a user withdraws his tokens from the bank.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addBridgeGateway(address)",
      "name": "addBridgeGateway",
      "description": "Adds bridge gateway contract address to whitelist.",
      "parameterDecorators": [
        {
          "name": "bridgeGateway",
          "description": "The address of the bridge gateway contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "burn(address,uint256)",
      "name": "burn",
      "description": "Burn xcAmples from depositor. Bridge burns xcAmples on this satellite chain.",
      "parameterDecorators": [
        {
          "name": "depositor",
          "description": "The address of the depositor.",
          "recommendedTypes": []
        },
        {
          "name": "xcAmpleAmount",
          "description": "The amount of xcAmples to be burnt on this chain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "globalAmpleforthEpoch()",
      "name": "globalAmpleforthEpoch",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "globalAmpleforthEpochAndAMPLSupply()",
      "name": "globalAmpleforthEpochAndAMPLSupply",
      "description": "A multi-chain AMPL interface method. The Ampleforth monetary policy contract on the base-chain and XCAmpleController contracts on the satellite-chains implement this method. It atomically returns two values: what the current contract believes to be, the globalAmpleforthEpoch and globalAMPLSupply.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "globalAmpleforthEpoch The recorded global Ampleforth epoch.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_1",
          "description": "globalAMPLSupply The recorded global AMPL supply.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,uint256)",
      "name": "initialize",
      "description": "ZOS upgradable contract initialization method. It is called at the time of contract creation to invoke parent class initializers and initialize the contract's state variables.",
      "parameterDecorators": [
        {
          "name": "xcAmple_",
          "description": "reference to the cross-chain ample token erc-20 contract.",
          "recommendedTypes": []
        },
        {
          "name": "globalAmpleforthEpoch_",
          "description": "the epoch number from monetary policy on the base chain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lastRebaseTimestampSec()",
      "name": "lastRebaseTimestampSec",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mint(address,uint256)",
      "name": "mint",
      "description": "Mint xcAmples to a recipient. Bridge mints xcAmples on this satellite chain.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "The address of the recipient.",
          "recommendedTypes": []
        },
        {
          "name": "xcAmpleAmount",
          "description": "The amount of xcAmples to be mint on this chain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nextGlobalAMPLSupply()",
      "name": "nextGlobalAMPLSupply",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nextGlobalAmpleforthEpoch()",
      "name": "nextGlobalAmpleforthEpoch",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rebase()",
      "name": "rebase",
      "description": "Initiate a new rebase operation. Once the Bridge gateway reports new epoch and total supply Rebase can be triggered on this satellite chain. The supply delta is calculated as the difference between the new reported globalAMPLSupply and the recordedGlobalAMPLSupply on this chain. After rebase, it notifies down-stream platforms by executing post-rebase callbacks on the rebase relayer.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rebaseRelayer()",
      "name": "rebaseRelayer",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeBridgeGateway(address)",
      "name": "removeBridgeGateway",
      "description": "Removes bridge gateway contract address from whitelist.",
      "parameterDecorators": [
        {
          "name": "bridgeGateway",
          "description": "The address of the bridge gateway contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reportRebase(uint256,uint256)",
      "name": "reportRebase",
      "description": "Upcoming rebase information reported by a bridge gateway and updated in storage.",
      "parameterDecorators": [
        {
          "name": "nextGlobalAmpleforthEpoch_",
          "description": "The new epoch after rebase on the base chain.",
          "recommendedTypes": []
        },
        {
          "name": "nextGlobalAMPLSupply_",
          "description": "The new globalAMPLSupply after rebase on the base chain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRebaseRelayer(address)",
      "name": "setRebaseRelayer",
      "description": "Sets the reference to the rebaseRelayer.",
      "parameterDecorators": [
        {
          "name": "rebaseRelayer_",
          "description": "The address of the rebaseRelayer contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistedBridgeGateways(address)",
      "name": "whitelistedBridgeGateways",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "xcAmple()",
      "name": "xcAmple",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}