{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "BalanceScanner",
  "description": "An Ether or token balance scanner.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "call(address[],bytes[],uint256)",
      "name": "call",
      "description": "Call multiple contracts with the provided arbitrary data.",
      "parameterDecorators": [
        {
          "name": "contracts",
          "description": "The contracts to call.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "The data to call the contracts with.",
          "recommendedTypes": []
        },
        {
          "name": "gas",
          "description": "The amount of gas to call the contracts with.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "The raw result of the contract calls.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "success",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "data",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "call(address[],bytes[])",
      "name": "call",
      "description": "Call multiple contracts with the provided arbitrary data.",
      "parameterDecorators": [
        {
          "name": "contracts",
          "description": "The contracts to call.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "The data to call the contracts with.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "The raw result of the contract calls.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "success",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "data",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "etherBalances(address[])",
      "name": "etherBalances",
      "description": "Get the Ether balance for all addresses specified.",
      "parameterDecorators": [
        {
          "name": "addresses",
          "description": "The addresses to get the Ether balance for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "The Ether balance for all addresses in the same order as specified.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "success",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "data",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenBalances(address[],address)",
      "name": "tokenBalances",
      "description": "Get the ERC-20 token balance of `token` for all addresses specified. This does not check if the `token` address specified is actually an ERC-20 token.",
      "parameterDecorators": [
        {
          "name": "addresses",
          "description": "The addresses to get the token balance for.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "The address of the ERC-20 token contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "The token balance for all addresses in the same order as specified.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "success",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "data",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokensBalance(address,address[])",
      "name": "tokensBalance",
      "description": "Get the ERC-20 token balance from multiple contracts for a single owner.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "The address of the token owner.",
          "recommendedTypes": []
        },
        {
          "name": "contracts",
          "description": "The addresses of the ERC-20 token contracts.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "The token balances in the same order as the addresses specified.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "success",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "data",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}