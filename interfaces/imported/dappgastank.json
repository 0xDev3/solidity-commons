{
  "schema": "../schema.json",
  "tags": [],
  "name": "DappGasTank",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Deposit(address,uint256,uint256)",
      "name": "Deposit",
      "description": "Event when owner changes usdt rate.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fundingKey",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "DepositTokenAdded(address,address)",
      "name": "DepositTokenAdded",
      "description": "Event when owner changes usdt rate.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "actor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MasterAccountChanged(address,address)",
      "name": "MasterAccountChanged",
      "description": "Event when owner changes usdt rate.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "actor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MinimumDepositChanged(uint256,address)",
      "name": "MinimumDepositChanged",
      "description": "Event when owner changes usdt rate.",
      "parameterDecorators": [
        {
          "name": "minDeposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "actor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event when owner changes usdt rate.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TrustedForwarderChanged(address,address)",
      "name": "TrustedForwarderChanged",
      "description": "Event when owner changes usdt rate. Emitted when trusted forwarder is updated to another (`trustedForwarder`). Note that `trustedForwarder` may be zero. `actor` is msg.sender for this action.",
      "parameterDecorators": [
        {
          "name": "truestedForwarder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "actor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256,address)",
      "name": "Withdraw",
      "description": "Event when owner changes usdt rate.",
      "parameterDecorators": [
        {
          "name": "actor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_trustedForwarder()",
      "name": "_trustedForwarder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowedTokens(address)",
      "name": "allowedTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dappBalances(uint256)",
      "name": "dappBalances",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositFor(uint256)",
      "name": "depositFor",
      "description": "In the future this method may be upgraded to allow ERC20 token deposits Generic depositFor could be added that allows deposit of ERC20 tokens and swaps them for native currency.",
      "parameterDecorators": [
        {
          "name": "_fundingKey",
          "description": "Associate funds with this funding key. Supply a deposit for a specified funding key. (This will be a unique unix epoch time) Caution: The funding key must be an your identifier generated from biconomy dashboard Funds deposited will be forwarded to master account to fund the relayers emits an event for off-chain accounting.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositorBalances(address,uint256)",
      "name": "depositorBalances",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initializes the contract.",
      "parameterDecorators": [
        {
          "name": "trustedForwarder",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isTrustedForwarder(address)",
      "name": "isTrustedForwarder",
      "description": "",
      "parameterDecorators": [
        {
          "name": "forwarder",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "masterAccount()",
      "name": "masterAccount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minDeposit()",
      "name": "minDeposit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMasterAccount(address)",
      "name": "setMasterAccount",
      "description": "Admin function to set master account which collects gas tank deposits.",
      "parameterDecorators": [
        {
          "name": "_newAccount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinDeposit(uint256)",
      "name": "setMinDeposit",
      "description": "Admin function to set minimum deposit amount emits and event.",
      "parameterDecorators": [
        {
          "name": "_newMinDeposit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenAllowed(address,bool)",
      "name": "setTokenAllowed",
      "description": "Admin function to set token allowed for depositing in gas tank.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "allowed",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTrustedForwarder(address)",
      "name": "setTrustedForwarder",
      "description": "admin function to set trusted forwarder.",
      "parameterDecorators": [
        {
          "name": "_forwarder",
          "description": "new trusted forwarder address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenPriceFeed(address)",
      "name": "tokenPriceFeed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Admin function for sending/migrating any stuck funds.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}