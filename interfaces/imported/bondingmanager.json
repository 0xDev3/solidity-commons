{"schema":"../schema.json","tags":[],"name":"BondingManager","description":"BondingManager. Manages bonding, transcoder and rewards/fee accounting related operations of the Livepeer protocol.","eventDecorators":[{"signature":"TranscoderUpdate(address,uint256,uint256)","name":"TranscoderUpdate","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"transcoder","description":"","recommendedTypes":[],"indexed":true},{"name":"rewardCut","description":"","recommendedTypes":[],"indexed":false},{"name":"feeShare","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TranscoderActivated(address,uint256)","name":"TranscoderActivated","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"transcoder","description":"","recommendedTypes":[],"indexed":true},{"name":"activationRound","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TranscoderDeactivated(address,uint256)","name":"TranscoderDeactivated","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"transcoder","description":"","recommendedTypes":[],"indexed":true},{"name":"deactivationRound","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TranscoderSlashed(address,address,uint256,uint256)","name":"TranscoderSlashed","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"transcoder","description":"","recommendedTypes":[],"indexed":true},{"name":"finder","description":"","recommendedTypes":[],"indexed":false},{"name":"penalty","description":"","recommendedTypes":[],"indexed":false},{"name":"finderReward","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Reward(address,uint256)","name":"Reward","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"transcoder","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Bond(address,address,address,uint256,uint256)","name":"Bond","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"newDelegate","description":"","recommendedTypes":[],"indexed":true},{"name":"oldDelegate","description":"","recommendedTypes":[],"indexed":true},{"name":"delegator","description":"","recommendedTypes":[],"indexed":true},{"name":"additionalAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"bondedAmount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unbond(address,address,uint256,uint256,uint256)","name":"Unbond","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"delegate","description":"","recommendedTypes":[],"indexed":true},{"name":"delegator","description":"","recommendedTypes":[],"indexed":true},{"name":"unbondingLockId","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"withdrawRound","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Rebond(address,address,uint256,uint256)","name":"Rebond","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"delegate","description":"","recommendedTypes":[],"indexed":true},{"name":"delegator","description":"","recommendedTypes":[],"indexed":true},{"name":"unbondingLockId","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"WithdrawStake(address,uint256,uint256,uint256)","name":"WithdrawStake","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"delegator","description":"","recommendedTypes":[],"indexed":true},{"name":"unbondingLockId","description":"","recommendedTypes":[],"indexed":false},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"withdrawRound","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"WithdrawFees(address)","name":"WithdrawFees","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"delegator","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"EarningsClaimed(address,address,uint256,uint256,uint256,uint256)","name":"EarningsClaimed","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"delegate","description":"","recommendedTypes":[],"indexed":true},{"name":"delegator","description":"","recommendedTypes":[],"indexed":true},{"name":"rewards","description":"","recommendedTypes":[],"indexed":false},{"name":"fees","description":"","recommendedTypes":[],"indexed":false},{"name":"startRound","description":"","recommendedTypes":[],"indexed":false},{"name":"endRound","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SetController(address)","name":"SetController","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"controller","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ParameterUpdate(string)","name":"ParameterUpdate","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"param","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"activeTranscoderSetDEPRECATED(uint256)","name":"activeTranscoderSetDEPRECATED","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"totalStake","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"maxEarningsClaimsRounds()","name":"maxEarningsClaimsRounds","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rebondFromUnbondedWithHint(address,uint256,address,address)","name":"rebondFromUnbondedWithHint","description":"Rebond tokens for an unbonding lock to a delegate while a delegator is in the Unbonded status and updates the transcoder pool using an optional list hint if needed. If the delegate joins the transcoder pool, the caller can provide an optional hint for the delegate's insertion position in the pool via the `_newPosPrev` and `_newPosNext` params. A linear search will be executed starting at the hint to find the correct position. In the best case, the hint is the correct position so no search is executed. See SortedDoublyLL.sol for details on list hints.","parameterDecorators":[{"name":"_to","description":"Address of delegate.","recommendedTypes":[]},{"name":"_unbondingLockId","description":"ID of unbonding lock to rebond with.","recommendedTypes":[]},{"name":"_newPosPrev","description":"Address of previous transcoder in pool if the delegate joins the pool.","recommendedTypes":[]},{"name":"_newPosNext","description":"Address of next transcoder in pool if the delegate joins the pool.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isActiveTranscoder(address)","name":"isActiveTranscoder","description":"Return whether a transcoder is active for the current round.","parameterDecorators":[{"name":"_transcoder","description":"Transcoder address.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isValidUnbondingLock(address,uint256)","name":"isValidUnbondingLock","description":"Return whether an unbonding lock for a delegator is valid.","parameterDecorators":[{"name":"_delegator","description":"Address of delegator.","recommendedTypes":[]},{"name":"_unbondingLockId","description":"ID of unbonding lock.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"delegatorStatus(address)","name":"delegatorStatus","description":"Computes delegator status.","parameterDecorators":[{"name":"_delegator","description":"Address of delegator.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"reward()","name":"reward","description":"Mint token rewards for an active transcoder and its delegators.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"slashTranscoder(address,address,uint256,uint256)","name":"slashTranscoder","description":"Slash a transcoder. Only callable by the Verifier.","parameterDecorators":[{"name":"_transcoder","description":"Transcoder address.","recommendedTypes":[]},{"name":"_finder","description":"Finder that proved a transcoder violated a slashing condition. Null address if there is no finder.","recommendedTypes":[]},{"name":"_slashAmount","description":"Percentage of transcoder bond to be slashed.","recommendedTypes":[]},{"name":"_finderFee","description":"Percentage of penalty awarded to finder. Zero if there is no finder.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getNextTranscoderInPool(address)","name":"getNextTranscoderInPool","description":"Returns next transcoder in pool for a given transcoder.","parameterDecorators":[{"name":"_transcoder","description":"Address of a transcoder in the pool.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getTranscoderEarningsPoolForRound(address,uint256)","name":"getTranscoderEarningsPoolForRound","description":"Return transcoder's earnings pool for a given round.","parameterDecorators":[{"name":"_transcoder","description":"Address of transcoder.","recommendedTypes":[]},{"name":"_round","description":"Round number.","recommendedTypes":[]}],"returnDecorators":[{"name":"rewardPool","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"feePool","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"totalStake","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"claimableStake","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"transcoderRewardCut","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"transcoderFeeShare","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"transcoderRewardPool","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"transcoderFeePool","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"hasTranscoderRewardFeePool","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"cumulativeRewardFactor","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"cumulativeFeeFactor","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"claimEarnings(uint256)","name":"claimEarnings","description":"Claim token pools shares for a delegator from its lastClaimRound through the end round.","parameterDecorators":[{"name":"_endRound","description":"The last round for which to claim token pools shares for a delegator.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawStake(uint256)","name":"withdrawStake","description":"Withdraws tokens for an unbonding lock that has existed through an unbonding period.","parameterDecorators":[{"name":"_unbondingLockId","description":"ID of unbonding lock to withdraw with.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unbond(uint256)","name":"unbond","description":"Unbond an amount of the delegator's bonded stake.","parameterDecorators":[{"name":"_amount","description":"Amount of tokens to unbond.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getTranscoderPoolSize()","name":"getTranscoderPoolSize","description":"Returns size of transcoder pool.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transcoderWithHint(uint256,uint256,address,address)","name":"transcoderWithHint","description":"Sets commission rates as a transcoder and if the caller is not in the transcoder pool tries to add it using an optional list hint. Percentages are represented as numerators of fractions over MathUtils.PERC_DIVISOR. If the caller is going to be added to the pool, the caller can provide an optional hint for the insertion position in the pool via the `_newPosPrev` and `_newPosNext` params. A linear search will be executed starting at the hint to find the correct position - in the best case, the hint is the correct position so no search is executed. See SortedDoublyLL.sol for details on list hints.","parameterDecorators":[{"name":"_rewardCut","description":"% of reward paid to transcoder by a delegator.","recommendedTypes":[]},{"name":"_feeShare","description":"% of fees paid to delegators by a transcoder.","recommendedTypes":[]},{"name":"_newPosPrev","description":"Address of previous transcoder in pool if the caller joins the pool.","recommendedTypes":[]},{"name":"_newPosNext","description":"Address of next transcoder in pool if the caller joins the pool.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"rebondFromUnbonded(address,uint256)","name":"rebondFromUnbonded","description":"Rebond tokens for an unbonding lock to a delegate while a delegator is in the Unbonded status.","parameterDecorators":[{"name":"_to","description":"Address of delegate.","recommendedTypes":[]},{"name":"_unbondingLockId","description":"ID of unbonding lock to rebond with.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateTranscoderWithFees(address,uint256,uint256)","name":"updateTranscoderWithFees","description":"Update transcoder's fee pool. Only callable by the TicketBroker.","parameterDecorators":[{"name":"_transcoder","description":"Transcoder address.","recommendedTypes":[]},{"name":"_fees","description":"Fees to be added to the fee pool.","recommendedTypes":[]},{"name":"_round","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"numActiveTranscodersDEPRECATED()","name":"numActiveTranscodersDEPRECATED","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getDelegatorUnbondingLock(address,uint256)","name":"getDelegatorUnbondingLock","description":"Return delegator's unbonding lock info.","parameterDecorators":[{"name":"_delegator","description":"Address of delegator.","recommendedTypes":[]},{"name":"_unbondingLockId","description":"ID of unbonding lock.","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"withdrawRound","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"currentRoundTotalActiveStake()","name":"currentRoundTotalActiveStake","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transcoder(uint256,uint256)","name":"transcoder","description":"Sets commission rates as a transcoder and if the caller is not in the transcoder pool tries to add it. Percentages are represented as numerators of fractions over MathUtils.PERC_DIVISOR.","parameterDecorators":[{"name":"_rewardCut","description":"% of reward paid to transcoder by a delegator.","recommendedTypes":[]},{"name":"_feeShare","description":"% of fees paid to delegators by a transcoder.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"nextRoundTotalActiveStake()","name":"nextRoundTotalActiveStake","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdrawFees()","name":"withdrawFees","description":"Withdraws fees to the caller.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"targetContractId()","name":"targetContractId","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getTranscoderPoolMaxSize()","name":"getTranscoderPoolMaxSize","description":"Returns max size of transcoder pool.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTotalBonded()","name":"getTotalBonded","description":"Return total bonded tokens.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTranscoder(address)","name":"getTranscoder","description":"Return transcoder information.","parameterDecorators":[{"name":"_transcoder","description":"Address of transcoder.","recommendedTypes":[]}],"returnDecorators":[{"name":"lastRewardRound","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"rewardCut","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"feeShare","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"lastActiveStakeUpdateRound","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"activationRound","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"deactivationRound","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"activeCumulativeRewards","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"cumulativeRewards","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"cumulativeFees","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"lastFeeRound","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"setNumActiveTranscoders(uint256)","name":"setNumActiveTranscoders","description":"Set maximum number of active transcoders. Only callable by Controller owner.","parameterDecorators":[{"name":"_numActiveTranscoders","description":"Number of active transcoders.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isRegisteredTranscoder(address)","name":"isRegisteredTranscoder","description":"Return whether a transcoder is registered.","parameterDecorators":[{"name":"_transcoder","description":"Transcoder address.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"bondWithHint(uint256,address,address,address,address,address)","name":"bondWithHint","description":"Delegate stake towards a specific address and updates the transcoder pool using optional list hints if needed. If the caller is decreasing the stake of its old delegate in the transcoder pool, the caller can provide an optional hint for the insertion position of the old delegate via the `_oldDelegateNewPosPrev` and `_oldDelegateNewPosNext` params. If the caller is delegating to a delegate that is in the transcoder pool, the caller can provide an optional hint for the insertion position of the delegate via the `_currDelegateNewPosPrev` and `_currDelegateNewPosNext` params. In both cases, a linear search will be executed starting at the hint to find the correct position. In the best case, the hint is the correct position so no search is executed. See SortedDoublyLL.sol for details on list hints.","parameterDecorators":[{"name":"_amount","description":"The amount of tokens to stake.","recommendedTypes":[]},{"name":"_to","description":"The address of the transcoder to stake towards.","recommendedTypes":[]},{"name":"_oldDelegateNewPosPrev","description":"The address of the previous transcoder in the pool for the old delegate.","recommendedTypes":[]},{"name":"_oldDelegateNewPosNext","description":"The address of the next transcoder in the pool for the old delegate.","recommendedTypes":[]},{"name":"_currDelegateNewPosPrev","description":"The address of the previous transcoder in the pool for the current delegate.","recommendedTypes":[]},{"name":"_currDelegateNewPosNext","description":"The address of the next transcoder in the pool for the current delegate.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unbondingPeriod()","name":"unbondingPeriod","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":true},{"signature":"setCurrentRoundTotalActiveStake()","name":"setCurrentRoundTotalActiveStake","description":"Called during round initialization to set the total active stake for the round. Only callable by the RoundsManager.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setMaxEarningsClaimsRounds(uint256)","name":"setMaxEarningsClaimsRounds","description":"Set max number of rounds a caller can claim earnings for at once. Only callable by Controller owner.","parameterDecorators":[{"name":"_maxEarningsClaimsRounds","description":"Max number of rounds a caller can claim earnings for at once.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"rebondWithHint(uint256,address,address)","name":"rebondWithHint","description":"Rebond tokens for an unbonding lock to a delegator's current delegate while a delegator is in the Bonded or Pending status and updates the transcoder pool using an optional list hint if needed. If the delegate is in the transcoder pool, the caller can provide an optional hint for the delegate's insertion position in the pool via the `_newPosPrev` and `_newPosNext` params. A linear search will be executed starting at the hint to find the correct position. In the best case, the hint is the correct position so no search is executed. See SortedDoublyLL.sol details on list hints.","parameterDecorators":[{"name":"_unbondingLockId","description":"ID of unbonding lock to rebond with.","recommendedTypes":[]},{"name":"_newPosPrev","description":"Address of previous transcoder in pool if the delegate is in the pool.","recommendedTypes":[]},{"name":"_newPosNext","description":"Address of next transcoder in pool if the delegate is in the pool.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"rewardWithHint(address,address)","name":"rewardWithHint","description":"Mint token rewards for an active transcoder and its delegators and update the transcoder pool using an optional list hint if needed. If the caller is in the transcoder pool, the caller can provide an optional hint for its insertion position in the pool via the `_newPosPrev` and `_newPosNext` params. A linear search will be executed starting at the hint to find the correct position. In the best case, the hint is the correct position so no search is executed. See SortedDoublyLL.sol for details on list hints.","parameterDecorators":[{"name":"_newPosPrev","description":"Address of previous transcoder in pool if the caller is in the pool.","recommendedTypes":[]},{"name":"_newPosNext","description":"Address of next transcoder in pool if the caller is in the pool.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getFirstTranscoderInPool()","name":"getFirstTranscoderInPool","description":"Returns transcoder with most stake in pool.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"transcoderStatus(address)","name":"transcoderStatus","description":"Computes transcoder status.","parameterDecorators":[{"name":"_transcoder","description":"Address of transcoder.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"setController(address)","name":"setController","description":"Set controller. Only callable by current controller.","parameterDecorators":[{"name":"_controller","description":"Controller contract address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unbondWithHint(uint256,address,address)","name":"unbondWithHint","description":"Unbond an amount of the delegator's bonded stake and updates the transcoder pool using an optional list hint if needed. If the caller remains in the transcoder pool, the caller can provide an optional hint for its insertion position in the pool via the `_newPosPrev` and `_newPosNext` params. A linear search will be executed starting at the hint to find the correct position. In the best case, the hint is the correct position so no search is executed. See SortedDoublyLL.sol details on list hints.","parameterDecorators":[{"name":"_amount","description":"Amount of tokens to unbond.","recommendedTypes":[]},{"name":"_newPosPrev","description":"Address of previous transcoder in pool if the caller remains in the pool.","recommendedTypes":[]},{"name":"_newPosNext","description":"Address of next transcoder in pool if the caller remains in the pool.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"pendingStake(address,uint256)","name":"pendingStake","description":"Returns pending bonded stake for a delegator from its lastClaimRound through an end round.","parameterDecorators":[{"name":"_delegator","description":"Address of delegator.","recommendedTypes":[]},{"name":"_endRound","description":"The last round to compute pending stake from.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transcoderTotalStake(address)","name":"transcoderTotalStake","description":"Returns total bonded stake for a transcoder.","parameterDecorators":[{"name":"_transcoder","description":"Address of transcoder.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getDelegator(address)","name":"getDelegator","description":"Return delegator info.","parameterDecorators":[{"name":"_delegator","description":"Address of delegator.","recommendedTypes":[]}],"returnDecorators":[{"name":"bondedAmount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"fees","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"delegateAddress","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"delegatedAmount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"startRound","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"lastClaimRound","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"nextUnbondingLockId","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"bond(uint256,address)","name":"bond","description":"Delegate stake towards a specific address.","parameterDecorators":[{"name":"_amount","description":"The amount of tokens to stake.","recommendedTypes":[]},{"name":"_to","description":"The address of the transcoder to stake towards.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"claimSnapshotEarnings(uint256,uint256,bytes32[],bytes)","name":"claimSnapshotEarnings","description":"Claim earnings for a delegator based on the snapshot taken in LIP-52. https://github.com/livepeer/LIPs/blob/master/LIPs/LIP-52.md.","parameterDecorators":[{"name":"_pendingStake","description":"the amount of pending stake for the delegator (current stake + pending rewards).","recommendedTypes":[]},{"name":"_pendingFees","description":"the amount of pending fees for the delegator (current fees + pending fees).","recommendedTypes":[]},{"name":"_earningsProof","description":"array of keccak256 sibling hashes on the branch of the leaf for the delegator up to the root.","recommendedTypes":[]},{"name":"_data","description":"(optional) raw transaction data to be executed on behalf of msg.sender after claiming snapshot earnings.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"rebond(uint256)","name":"rebond","description":"Rebond tokens for an unbonding lock to a delegator's current delegate while a delegator is in the Bonded or Pending status.","parameterDecorators":[{"name":"_unbondingLockId","description":"ID of unbonding lock to rebond with.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setUnbondingPeriod(uint64)","name":"setUnbondingPeriod","description":"Set unbonding period. Only callable by Controller owner.","parameterDecorators":[{"name":"_unbondingPeriod","description":"Rounds between unbonding and possible withdrawal.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"pendingFees(address,uint256)","name":"pendingFees","description":"Returns pending fees for a delegator from its lastClaimRound through an end round.","parameterDecorators":[{"name":"_delegator","description":"Address of delegator.","recommendedTypes":[]},{"name":"_endRound","description":"The last round to compute pending fees from.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"controller()","name":"controller","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}