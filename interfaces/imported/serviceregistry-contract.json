{"schema":"../schema.json","tags":[],"name":"ServiceRegistry","description":"ServiceRegistry contract. This contract supports the service discovery process by allowing indexers to register their service url and any other relevant information.","eventDecorators":[{"signature":"ContractSynced(bytes32,address)","name":"ContractSynced","description":"Emitted when update is made on Home or unconfirmed update root is submitted on Replica.","parameterDecorators":[{"name":"nameHash","description":"","recommendedTypes":[],"indexed":true},{"name":"contractAddress","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ParameterUpdated(string)","name":"ParameterUpdated","description":"Emitted when update is made on Home or unconfirmed update root is submitted on Replica.","parameterDecorators":[{"name":"param","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ServiceRegistered(address,string,string)","name":"ServiceRegistered","description":"Emitted when update is made on Home or unconfirmed update root is submitted on Replica.","parameterDecorators":[{"name":"indexer","description":"","recommendedTypes":[],"indexed":true},{"name":"url","description":"","recommendedTypes":[],"indexed":false},{"name":"geohash","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ServiceUnregistered(address)","name":"ServiceUnregistered","description":"Emitted when update is made on Home or unconfirmed update root is submitted on Replica.","parameterDecorators":[{"name":"indexer","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"SetController(address)","name":"SetController","description":"Emitted when update is made on Home or unconfirmed update root is submitted on Replica.","parameterDecorators":[{"name":"controller","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"acceptProxy(address)","name":"acceptProxy","description":"Accept to be an implementation of proxy.","parameterDecorators":[{"name":"_proxy","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"acceptProxyAndCall(address,bytes)","name":"acceptProxyAndCall","description":"Accept to be an implementation of proxy and then call a function from the new implementation as specified by `_data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract.","parameterDecorators":[{"name":"_proxy","description":"","recommendedTypes":[]},{"name":"_data","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"controller()","name":"controller","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address)","name":"initialize","description":"Initialize this contract.","parameterDecorators":[{"name":"_controller","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isRegistered(address)","name":"isRegistered","description":"Return the registration status of an indexer service.","parameterDecorators":[{"name":"_indexer","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if the indexer service is registered.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"register(string,string)","name":"register","description":"Register an indexer service.","parameterDecorators":[{"name":"_url","description":"URL of the indexer service.","recommendedTypes":[]},{"name":"_geohash","description":"Geohash of the indexer service location.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"registerFor(address,string,string)","name":"registerFor","description":"Register an indexer service.","parameterDecorators":[{"name":"_indexer","description":"Address of the indexer.","recommendedTypes":[]},{"name":"_url","description":"URL of the indexer service.","recommendedTypes":[]},{"name":"_geohash","description":"Geohash of the indexer service location.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"services(address)","name":"services","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"url","description":"","recommendedTypes":[],"solidityType":"string"},{"name":"geohash","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"setController(address)","name":"setController","description":"Set Controller. Only callable by current controller.","parameterDecorators":[{"name":"_controller","description":"Controller contract address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"syncAllContracts()","name":"syncAllContracts","description":"Sync protocol contract addresses from the Controller registry. This function will cache all the contracts using the latest addresses Anyone can call the function whenever a Proxy contract change in the controller to ensure the protocol is using the latest version.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unregister()","name":"unregister","description":"Unregister an indexer service.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unregisterFor(address)","name":"unregisterFor","description":"Unregister an indexer service.","parameterDecorators":[{"name":"_indexer","description":"Address of the indexer.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}