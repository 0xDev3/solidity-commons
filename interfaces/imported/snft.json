{
  "schema": "../schema.json",
  "tags": [
    "nft"
  ],
  "name": "SNFT",
  "description": "",
  "eventDecorators": [
    {
      "signature": "BuyOfferAccepted(uint256,address,address,uint256,uint256,uint256)",
      "name": "BuyOfferAccepted",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "requested_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wei_offered",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "slot_number",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BuyOfferMade(uint256,address,uint256,uint256,uint256,uint256)",
      "name": "BuyOfferMade",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "requested_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wei_offered",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "expires_at",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "slot_number",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BuyOfferWithdrawn(uint256,address,uint256,uint256,uint256)",
      "name": "BuyOfferWithdrawn",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "requested_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "wei_offered",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "slot_number",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Minted(uint256,address,uint256,uint256,uint256)",
      "name": "Minted",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "minter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "preminted_at",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fixed_info_1",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fixed_info_2",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Transferred(uint256,address,address,uint256)",
      "name": "Transferred",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "accept_buy_offer(uint256,uint256,uint256,uint256)",
      "name": "accept_buy_offer",
      "description": "Used to accept a buy offer, receive the locked ETH, and transfer the requested amount of shares to the buyer. sha256_of_the_nft_data = sha256( nft_data ) offer_slot = The slot number in which the offer is located (starting at 0). requested_amount = Confirms the amount of shares about to be transferred. wei_offered = Confirms the amount of ETH (in wei unit) about to be received. May throw NFT_INVALID_OR_NOT_FINALIZED, SLOT_UNAVAILABLE, OFFER_INVALID, OFFER_EXPIRED, OFFER_PARAMETERS_MISMATCH, or FAILED_TO_TRANSFER_ETH. Emits the BuyOfferAccepted event.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "offer_slot",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "requested_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "wei_offered",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "get_balance_from(uint256,address)",
      "name": "get_balance_from",
      "description": "Used to retrieve the amount of shares of an NFT owned by a specific address. The returned value is in relation to the constant value defined by ONE_HUNDRED_PERCENT. sha256_of_the_nft_data = sha256( nft_data ) owner = The queried address. May throw NFT_INVALID_OR_NOT_FINALIZED.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "get_next_available_buy_offer_slot(uint256)",
      "name": "get_next_available_buy_offer_slot",
      "description": "Used to retrieve the next available slot to make a buy offer and the timestamp of when it will become available. sha256_of_the_nft_data = sha256( nft_data ) May throw NFT_INVALID_OR_NOT_FINALIZED.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "slot_number",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "available_at",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "get_nft_info(uint256)",
      "name": "get_nft_info",
      "description": "Used to get more information from an NFT. sha256_of_the_nft_data = sha256( nft_data ) May throw NFT_INVALID_OR_NOT_FINALIZED.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "minter",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "minted_at",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "preminted_at",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "fixed_info_1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "fixed_info_2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "updatable_info_1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "updatable_info_2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "make_buy_offer(uint256,uint256,uint256)",
      "name": "make_buy_offer",
      "description": "Used to propose a buy offer by locking ETH into this contract in exchange for shares of an NFT. When an owner of the shares invokes 'accept_buy_offer' they receive the locked ETH and the shares are transferred to the buyer. An offer can be canceled and the ETH returned by invoking 'withdraw_buy_offer'. Every NFT has the same fixed amount of slots (BUY_OFFER_SLOT_COUNT) to receive buy offers which expire after a period of time (BUY_OFFER_DEFAULT_EXPIRING_TIME or BUY_OFFER_SLOT_0_EXPIRING_TIME). When an offer has expired, the ETH will be returned after a call to 'withdraw_buy_offer' or when a new offer is placed at the same slot. The first slot expires faster (BUY_OFFER_SLOT_0_EXPIRING_TIME) and could be used for automated or prearranged offers. sha256_of_the_nft_data = sha256( nft_data ) requested_amount = The amount of shares requested. offer_slot = An available slot number (starting at 0). May throw NFT_INVALID_OR_NOT_FINALIZED or SLOT_UNAVAILABLE. Emits the BuyOfferMade event.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "requested_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "offer_slot",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mint(uint256,uint256,uint256)",
      "name": "mint",
      "description": "Used to mint an NFT which was already preminted. The minter's balance starts with the constant value defined by ONE_HUNDRED_PERCENT. sha256_of_the_nft_data = sha256( nft_data ) fixed_info_1 = User custom value, can not be changed after minted. fixed_info_2 = User custom value, can not be changed after minted. May throw PREMINT_MISMATCH, NFT_FINALIZED, or ACCESS_DENIED. Emits the Minted event.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "fixed_info_1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "fixed_info_2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pre_mint(uint256)",
      "name": "pre_mint",
      "description": "Used to premint an NFT, proving prior knowledge of the sha256 hash of the NFT data. sha256_of_the_minters_address_concatenated_with_the_sha256_of_the_nft_data = sha256( abi.encodePacked( bytes20(msg.sender), sha256_of_the_nft_data ) ).",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_minters_address_concatenated_with_the_sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transfer(uint256,uint256,address)",
      "name": "transfer",
      "description": "Used to transfer shares from an NFT. sha256_of_the_nft_data = sha256( nft_data ) amount = The amount of shares to transfer. to = The recipient. May throw NFT_INVALID_OR_NOT_FINALIZED, INSUFFICIENT_FUNDS, or ACCESS_DENIED. Emits the Transferred event.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "update_nft_info(uint256,uint256,uint256)",
      "name": "update_nft_info",
      "description": "Used to update two custom updatable attributes from an NFT. Can only be issued by an owner with more than 50% of the NFT's shares. sha256_of_the_nft_data = sha256( nft_data ) owner = The queried address. May throw NFT_INVALID_OR_NOT_FINALIZED or ACCESS_DENIED.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "updatable_info_1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "updatable_info_2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw_buy_offer(uint256,uint256)",
      "name": "withdraw_buy_offer",
      "description": "Used to withdraw a buy offer and return the locked ETH. sha256_of_the_nft_data = sha256( nft_data ) offer_slot = The slot number in which the offer is located (starting at 0). May throw NFT_INVALID_OR_NOT_FINALIZED, FAILED_TO_TRANSFER_ETH, SLOT_UNAVAILABLE, or ACCESS_DENIED. Emits the BuyOfferWithdrawn event.",
      "parameterDecorators": [
        {
          "name": "sha256_of_the_nft_data",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "offer_slot",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}