{
  "schema": "../schema.json",
  "tags": [
    "compound"
  ],
  "name": "CompoundRateKeeperV2",
  "description": "CompoundRateKeeperV2 contract.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PercentPerSecondUpdated(uint256)",
      "name": "PercentPerSecondUpdated",
      "description": "Emit on setPercentPerSecond().",
      "parameterDecorators": [
        {
          "name": "percentPerSecond",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "calculatePotentialCompoundRate(uint256,uint256,uint64,uint64)",
      "name": "calculatePotentialCompoundRate",
      "description": "Calculate not safe compound rate. Can be reverted on big values. Needed to reduce gas costs.",
      "parameterDecorators": [
        {
          "name": "_compoundRate",
          "description": "Current compound rate.",
          "recommendedTypes": []
        },
        {
          "name": "_percentPerSecond",
          "description": "Percents per seconds.",
          "recommendedTypes": []
        },
        {
          "name": "_timestamp",
          "description": "Particular timestamp.",
          "recommendedTypes": []
        },
        {
          "name": "_compoundRateLastUpdate",
          "description": "Last compound rate update.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "compoundRate()",
      "name": "compoundRate",
      "description": "Contain actual compound rate.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "compoundRateLastUpdate()",
      "name": "compoundRateLastUpdate",
      "description": "Contain last update of percentPerSecond value.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCompoundRate()",
      "name": "getCompoundRate",
      "description": "Calculate compound rate for this moment. Call this function always when you need actual compound rate.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPotentialCompoundRate(uint64)",
      "name": "getPotentialCompoundRate",
      "description": "Calculate compound rate at a particular time. Call this function always when you need compound rate at a particular time.",
      "parameterDecorators": [
        {
          "name": "_timestamp",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mul(uint256,uint256,uint256)",
      "name": "mul",
      "description": "Multiply function. See FullMath library for details.",
      "parameterDecorators": [
        {
          "name": "_a",
          "description": "Num 1.",
          "recommendedTypes": []
        },
        {
          "name": "_b",
          "description": "Num 2.",
          "recommendedTypes": []
        },
        {
          "name": "_denominator",
          "description": "(_a * _b / _denominator).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "percentPerSecond()",
      "name": "percentPerSecond",
      "description": "Compound interest per second. ((1 + <interest_for_the_period> / 100)^(1 / <period>)) * 10^27.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pow(uint256,uint256,uint256)",
      "name": "pow",
      "description": "Modulo exponentiation.",
      "parameterDecorators": [
        {
          "name": "_num",
          "description": "Number.",
          "recommendedTypes": []
        },
        {
          "name": "_exponent",
          "description": "Exponent.",
          "recommendedTypes": []
        },
        {
          "name": "_base",
          "description": "(_num * _base). Base - precision index, is assumed to be _getDecimals().",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPercentPerSecond(uint256)",
      "name": "setPercentPerSecond",
      "description": "Set percent per second, update compound rate and last compound rate update. Call this function only when percent per period will change.",
      "parameterDecorators": [
        {
          "name": "_newPercentPerSecond",
          "description": "New percent per period.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}