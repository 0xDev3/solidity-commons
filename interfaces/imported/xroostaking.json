{
  "schema": "../schema.json",
  "tags": [],
  "name": "xRooStaking",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Staked(address,uint256,uint256,uint256)",
      "name": "Staked",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_stake",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_liquidity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_weth",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unstaked(address,uint256,uint256)",
      "name": "Unstaked",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_stake",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_liquidity",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "NFTXLPStaking()",
      "name": "NFTXLPStaking",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "NFTXRewardDistributionToken()",
      "name": "NFTXRewardDistributionToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "NFTXVault()",
      "name": "NFTXVault",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "RTRewardToken()",
      "name": "RTRewardToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "RTStakedToken()",
      "name": "RTStakedToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SLPToken()",
      "name": "SLPToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WETH()",
      "name": "WETH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addLiquidityERC20(uint256,uint256,uint256)",
      "name": "addLiquidityERC20",
      "description": "Adds liquidity to the pool using the stakable ERC20 token and WETH.",
      "parameterDecorators": [
        {
          "name": "_minWethIn",
          "description": "the min amount of WETH that will get sent to the LP.",
          "recommendedTypes": []
        },
        {
          "name": "_wethIn",
          "description": "the amount of WETH that has been provided by the call.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "the amount of the ERC20 token to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addLiquidityERC20ETH(uint256,uint256)",
      "name": "addLiquidityERC20ETH",
      "description": "Adds liquidity to the pool using the stakable ERC20 token and ETH. the value passed in is converted to WETH and sent to the LP.",
      "parameterDecorators": [
        {
          "name": "_minWethIn",
          "description": "the min amount of WETH that will get sent to the LP.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "the amount of the ERC20 token to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addLiquidityERC721(uint256,uint256,uint256[])",
      "name": "addLiquidityERC721",
      "description": "Adds liquidity to the pool using the stakable ERC721 token and WETH.",
      "parameterDecorators": [
        {
          "name": "_minWethIn",
          "description": "the min amount of WETH that will get sent to the LP.",
          "recommendedTypes": []
        },
        {
          "name": "_wethIn",
          "description": "the amount of WETH that has been provided by the call.",
          "recommendedTypes": []
        },
        {
          "name": "_ids",
          "description": "the ids of the tokens to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addLiquidityERC721ETH(uint256,uint256[])",
      "name": "addLiquidityERC721ETH",
      "description": "Adds liquidity to the pool using the stakable ERC721 token and ETH. the value passed in is converted to WETH and sent to the LP.",
      "parameterDecorators": [
        {
          "name": "_minWethIn",
          "description": "the min amount of WETH that will get sent to the LP.",
          "recommendedTypes": []
        },
        {
          "name": "_ids",
          "description": "the ids of the tokens to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimRewards()",
      "name": "claimRewards",
      "description": "Claims all of the dividends currently owed to the caller. Will not claim RT rewards if the lock is set.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "dividendOf(address)",
      "name": "dividendOf",
      "description": "Gets the rewards owed to the user.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "RTRewardToken",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "NFTXRewardToken",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "emergencyExit()",
      "name": "emergencyExit",
      "description": "An emergency function that will allow users to pull out their liquidity in the NFTX reward distribution token. DOES NOT DISTRIBUTE REWARDS. This is to be used in the case where our connection with NFTX's contracts causes transaction failures. NOTE you cannot withdraw until the timelock has expired.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lockRTRewards()",
      "name": "lockRTRewards",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockTime()",
      "name": "lockTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockedUntil(address)",
      "name": "lockedUntil",
      "description": "Shows the time until the user's funds are unlocked (unix seconds).",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "the user whose lock time we are checking.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "periodicReward()",
      "name": "periodicReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeLiquidity(uint256,uint256)",
      "name": "removeLiquidity",
      "description": "Removes all liquidity from the LP and claims rewards.",
      "parameterDecorators": [
        {
          "name": "_amountTokenMin",
          "description": "the min amount of the ERC20 staking token to get back.",
          "recommendedTypes": []
        },
        {
          "name": "_amountWETHMin",
          "description": "the min amount of WETH to get back NOTE you cannot withdraw until the timelock has expired.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewardPeriod()",
      "name": "rewardPeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setLock(bool)",
      "name": "setLock",
      "description": "Locks/unlocks RT reward withdraw.",
      "parameterDecorators": [
        {
          "name": "_locked",
          "description": "the value of the lock (boolean).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setLockTime(uint256)",
      "name": "setLockTime",
      "description": "Sets the lock time where assets cannot be removed after staking.",
      "parameterDecorators": [
        {
          "name": "_lockTime",
          "description": "the amount of seconds the lock lasts after staking.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRTRewardToken(address)",
      "name": "setRTRewardToken",
      "description": "Updates the address for the reward token.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "the token in which rewards will be disbursed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sushiRouter()",
      "name": "sushiRouter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateExternalReferences(address,address,address,address,address)",
      "name": "updateExternalReferences",
      "description": "Updates all external references (NFTX/Sushiswap/WETH). only for the contract owner to use, particularly in the case of near-FUBAR.",
      "parameterDecorators": [
        {
          "name": "_NFTXVault",
          "description": "the vault token address.",
          "recommendedTypes": []
        },
        {
          "name": "_NFTXLPStaking",
          "description": "the NFTXLPStaking contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_NFTXRewardDistributionToken",
          "description": "the NFTX Reward distribution token.",
          "recommendedTypes": []
        },
        {
          "name": "_sushiRouter",
          "description": "the address of the Sushiswap router.",
          "recommendedTypes": []
        },
        {
          "name": "_SLPToken",
          "description": "the address of the liquidity pool WETH/vault token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "users(address)",
      "name": "users",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "stake",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "RTRewardModifier",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        },
        {
          "name": "NFTXRewardModifier",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        },
        {
          "name": "NFTXRewardWithdrawn",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}