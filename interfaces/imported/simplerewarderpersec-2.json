{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "staking",
    "locking"
  ],
  "name": "SimpleRewarderPerSec",
  "description": "This is a sample contract to be used in the MasterChefVolt contract for partners to reward stakers with their native token alongside VOLT. It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the VOLT-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.",
  "eventDecorators": [
    {
      "signature": "OnReward(address,uint256)",
      "name": "OnReward",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RewardRateUpdated(uint256,uint256)",
      "name": "RewardRateUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "oldRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MCJ()",
      "name": "MCJ",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balance()",
      "name": "balance",
      "description": "View function to see balance of reward token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimOwnership()",
      "name": "claimOwnership",
      "description": "Needs to be called by `pendingOwner` to claim ownership.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdraw()",
      "name": "emergencyWithdraw",
      "description": "In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isNative()",
      "name": "isNative",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lpToken()",
      "name": "lpToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onVoltReward(address,uint256)",
      "name": "onVoltReward",
      "description": "Function called by MasterChefVolt whenever staker claims VOLT harvest. Allows staker to also receive a 2nd reward token.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "Address of user.",
          "recommendedTypes": []
        },
        {
          "name": "_lpAmount",
          "description": "Number of LP tokens the user has.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingOwner()",
      "name": "pendingOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingTokens(address)",
      "name": "pendingTokens",
      "description": "View function to see pending tokens.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "Address of user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "pending",
          "description": "reward for a given user.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolInfo()",
      "name": "poolInfo",
      "description": "Info of the poolInfo.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "accTokenPerShare",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastRewardTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardToken()",
      "name": "rewardToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setRewardRate(uint256)",
      "name": "setRewardRate",
      "description": "Sets the distribution reward rate. This will also update the poolInfo.",
      "parameterDecorators": [
        {
          "name": "_tokenPerSec",
          "description": "The number of tokens to distribute per second.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenPerSec()",
      "name": "tokenPerSec",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address,bool,bool)",
      "name": "transferOwnership",
      "description": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "Address of the new owner.",
          "recommendedTypes": []
        },
        {
          "name": "direct",
          "description": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "recommendedTypes": []
        },
        {
          "name": "renounce",
          "description": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePool()",
      "name": "updatePool",
      "description": "Update reward variables of the given poolInfo.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "pool",
          "description": "Returns the pool that was updated.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "accTokenPerShare",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "lastRewardTimestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userInfo(address)",
      "name": "userInfo",
      "description": "Info of each user that stakes LP tokens.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardDebt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "unpaidRewards",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}