{
  "schema": "../schema.json",
  "tags": [],
  "name": "RollingDistributionIncentives",
  "description": "",
  "eventDecorators": [
    {
      "signature": "CampaignAdded(uint256)",
      "name": "CampaignAdded",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "campaignId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DelayReward(address,uint256,uint256,uint256)",
      "name": "DelayReward",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "campaignId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalDelayedReward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DelayedRewardPaid(address,uint256,uint256)",
      "name": "DelayedRewardPaid",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount withdrawn.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fdId",
          "description": "Fixed deposit Id.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "userAddr",
          "description": "User address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DisableContract()",
      "name": "DisableContract",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": []
    },
    {
      "signature": "ModifyParameters(bytes32,uint256)",
      "name": "ModifyParameters",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "parameter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ModifyParameters(bytes32,uint256,uint256)",
      "name": "ModifyParameters",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount withdrawn.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fdId",
          "description": "Fixed deposit Id.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "userAddr",
          "description": "User address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RewardPaid(address,uint256)",
      "name": "RewardPaid",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "reward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Staked(address,uint256)",
      "name": "Staked",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "Amount withdrawn.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdrawn(address,uint256)",
      "name": "Withdrawn",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "Amount withdrawn.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WithdrewExtraRewardTokens(address,uint256,uint256)",
      "name": "WithdrewExtraRewardTokens",
      "description": "Emitted when User withdraws his/her fixed deposit before maturity period.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount withdrawn.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fdId",
          "description": "Fixed deposit Id.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "Amount withdrawn.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_MAX_CAMPAIGNS()",
      "name": "DEFAULT_MAX_CAMPAIGNS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "HUNDRED()",
      "name": "HUNDRED",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MILLION()",
      "name": "MILLION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "THOUSAND()",
      "name": "THOUSAND",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WAD()",
      "name": "WAD",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addAuthorization(address)",
      "name": "addAuthorization",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorizedAccounts(address)",
      "name": "authorizedAccounts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceOf(address)",
      "name": "balanceOf",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "campaignCount()",
      "name": "campaignCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "campaignListLength()",
      "name": "campaignListLength",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "campaigns(uint256)",
      "name": "campaigns",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "reward",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "duration",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardRate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastUpdateTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardPerTokenStored",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardDelay",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "instantExitPercentage",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "canStake()",
      "name": "canStake",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelCampaign(uint256)",
      "name": "cancelCampaign",
      "description": "Cancel a campaign.",
      "parameterDecorators": [
        {
          "name": "campaignId",
          "description": "Id of the campaign.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "contractEnabled()",
      "name": "contractEnabled",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentCampaign()",
      "name": "currentCampaign",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delayedRewards(address,uint256)",
      "name": "delayedRewards",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "exitedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "latestExitTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "disableContract()",
      "name": "disableContract",
      "description": "Disable this contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "earned(address,uint256)",
      "name": "earned",
      "description": "Calculate earned tokens for a single account in a given campaign.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Account of the staker.",
          "recommendedTypes": []
        },
        {
          "name": "campaignId",
          "description": "Id of the campaign.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The balance earned up to now (or up to the end time of the campaign), minus rewards already claimed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exit()",
      "name": "exit",
      "description": "Atomically withdraw the user's full balance and get available rewards from current or last campaign.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "finish(uint256)",
      "name": "finish",
      "description": "",
      "parameterDecorators": [
        {
          "name": "campaignId",
          "description": "The id of a campaign.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The timestamp at which a campaign ends.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "firstCampaign()",
      "name": "firstCampaign",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLockedReward(address,uint256)",
      "name": "getLockedReward",
      "description": "Withdraw rewards after locking period.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Account that owns a reward balance.",
          "recommendedTypes": []
        },
        {
          "name": "campaignId",
          "description": "Id of the campaign.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getReward(uint256)",
      "name": "getReward",
      "description": "Withdraw available rewards (instant rewards will be transferred imediately, remainder is locked).",
      "parameterDecorators": [
        {
          "name": "campaignId",
          "description": "Id of the campaign.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "globalReward()",
      "name": "globalReward",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastCampaign()",
      "name": "lastCampaign",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastTimeRewardApplicable(uint256)",
      "name": "lastTimeRewardApplicable",
      "description": "Returns the last time distribution was active (now if currently active, startTime if in the future, finishTime if in the past).",
      "parameterDecorators": [
        {
          "name": "campaignId",
          "description": "Id of the campaign.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lpToken()",
      "name": "lpToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxCampaigns()",
      "name": "maxCampaigns",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "modifyParameters(bytes32,uint256,uint256)",
      "name": "modifyParameters",
      "description": "Modify campaign parameters.",
      "parameterDecorators": [
        {
          "name": "parameter",
          "description": "Parameter to be changed.",
          "recommendedTypes": []
        },
        {
          "name": "campaignId",
          "description": "Campaign for which to set the parameter.",
          "recommendedTypes": []
        },
        {
          "name": "val",
          "description": "New parameter value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "modifyParameters(bytes32,uint256)",
      "name": "modifyParameters",
      "description": "Modify campaign parameters.",
      "parameterDecorators": [
        {
          "name": "parameter",
          "description": "Parameter to be changed.",
          "recommendedTypes": []
        },
        {
          "name": "val",
          "description": "New parameter value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "newCampaign(uint256,uint256,uint256,uint256,uint256)",
      "name": "newCampaign",
      "description": "Creates a new campaign.",
      "parameterDecorators": [
        {
          "name": "reward",
          "description": "Reward for campaign (the contract needs enough balance for the campaign to be created).",
          "recommendedTypes": []
        },
        {
          "name": "startTime",
          "description": "Campaign start time.",
          "recommendedTypes": []
        },
        {
          "name": "duration",
          "description": "Campaign duration.",
          "recommendedTypes": []
        },
        {
          "name": "rewardDelay",
          "description": "Unlock period for locked tokens post campaign end.",
          "recommendedTypes": []
        },
        {
          "name": "instantExitPercentage",
          "description": "Percentage to be paid immediately on getRewards (1000 == 100%).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The id of the newly created campaign.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeAuthorization(address)",
      "name": "removeAuthorization",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewardPerToken(uint256)",
      "name": "rewardPerToken",
      "description": "Rewards per token staked, should be called every time the supply of LP tokens changes during a campaign.",
      "parameterDecorators": [
        {
          "name": "campaignId",
          "description": "Id of the campaign.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "returns Rewards per token staked (amount of tokens paid per token staked during the entire duration of the campaign or up to now if the campaign is active).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardToken()",
      "name": "rewardToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewards(address,uint256)",
      "name": "rewards",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "Account that holds rewards.",
          "recommendedTypes": []
        },
        {
          "name": "campaignId",
          "description": "The id of a campaign.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Rewards from the account.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stake(uint256,address)",
      "name": "stake",
      "description": "Used for staking in the contract on behalf of another address (previous ERC20 approval required).",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount to be staked.",
          "recommendedTypes": []
        },
        {
          "name": "owner",
          "description": "Account that will own both the rewards and the added LP tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stake(uint256)",
      "name": "stake",
      "description": "Used for staking on the contract (previous ERC20 approval required).",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount to be staked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalSupply()",
      "name": "totalSupply",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "userRewardPerTokenPaid(address,uint256)",
      "name": "userRewardPerTokenPaid",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "Account that holds rewards.",
          "recommendedTypes": []
        },
        {
          "name": "campaignId",
          "description": "The id of a campaign.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "userRewardPerTokenPaid from the account.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Used for withdrawing staked tokens.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount to be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawExtraRewardTokens()",
      "name": "withdrawExtraRewardTokens",
      "description": "Transfers tokens not locked for rewards to caller.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}