{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "gnosis"
  ],
  "name": "BatchExchange",
  "description": "BatchExchange - A decentralized exchange for any ERC20 token as a multi-token batch auction with uniform clearing prices. For more information visit: <https://github.com/gnosis/dex-contracts>.",
  "eventDecorators": [
    {
      "signature": "OrderPlacement(address,uint16,uint16,uint16,uint32,uint32,uint128,uint128)",
      "name": "OrderPlacement",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "validFrom",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "validUntil",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "priceNumerator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "priceDenominator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenListing(address,uint16)",
      "name": "TokenListing",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OrderCancellation(address,uint16)",
      "name": "OrderCancellation",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OrderDeletion(address,uint16)",
      "name": "OrderDeletion",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Trade(address,uint16,uint16,uint16,uint128,uint128)",
      "name": "Trade",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "orderId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "executedSellAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "executedBuyAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TradeReversion(address,uint16,uint16,uint16,uint128,uint128)",
      "name": "TradeReversion",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "orderId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "executedSellAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "executedBuyAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SolutionSubmission(address,uint256,uint256,uint128[],uint16[])",
      "name": "SolutionSubmission",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "submitter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "utility",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "disregardedUtility",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "prices",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenIdsForPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Deposit(address,address,uint256,uint32)",
      "name": "Deposit",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WithdrawRequest(address,address,uint256,uint32)",
      "name": "WithdrawRequest",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdraw(address,address,uint256)",
      "name": "Withdraw",
      "description": "Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "setMaxTouchedOrders(uint256)",
      "name": "setMaxTouchedOrders",
      "description": "Used to change MAX_TOUCHED_ORDERS value.",
      "parameterDecorators": [
        {
          "name": "ordersNum",
          "description": "New maximum touched orders in a batch.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "IMPROVEMENT_DENOMINATOR()",
      "name": "IMPROVEMENT_DENOMINATOR",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSecondsRemainingInBatch()",
      "name": "getSecondsRemainingInBatch",
      "description": "used to determine how much time is left in a batch return seconds remaining in current batch.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEncodedOrders()",
      "name": "getEncodedOrders",
      "description": "View returning all byte-encoded sell orders.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "elements",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "placeOrder(uint16,uint16,uint32,uint128,uint128)",
      "name": "placeOrder",
      "description": "A user facing function used to place limit sell orders in auction with expiry defined by batchId.",
      "parameterDecorators": [
        {
          "name": "buyToken",
          "description": "id of token to be bought.",
          "recommendedTypes": []
        },
        {
          "name": "sellToken",
          "description": "id of token to be sold.",
          "recommendedTypes": []
        },
        {
          "name": "validUntil",
          "description": "batchId representing order's expiry.",
          "recommendedTypes": []
        },
        {
          "name": "buyAmount",
          "description": "relative minimum amount of requested buy amount.",
          "recommendedTypes": []
        },
        {
          "name": "sellAmount",
          "description": "maximum amount of sell token to be exchanged.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "submitSolution(uint32,uint256,address[],uint16[],uint128[],uint128[],uint16[])",
      "name": "submitSolution",
      "description": "a solver facing function called for auction settlement.",
      "parameterDecorators": [
        {
          "name": "batchId",
          "description": "index of auction solution is referring to.",
          "recommendedTypes": []
        },
        {
          "name": "claimedObjectiveValue",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "owners",
          "description": "array of addresses corresponding to touched orders.",
          "recommendedTypes": []
        },
        {
          "name": "orderIds",
          "description": "array of order indices used in parallel with owners to identify touched order.",
          "recommendedTypes": []
        },
        {
          "name": "buyVolumes",
          "description": "executed buy amounts for each order identified by index of owner-orderId arrays.",
          "recommendedTypes": []
        },
        {
          "name": "prices",
          "description": "list of prices for touched tokens indexed by next parameter.",
          "recommendedTypes": []
        },
        {
          "name": "tokenIdsForPrice",
          "description": "price[i] is the price for the token with tokenID tokenIdsForPrice[i].",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenIdToAddressMap(uint16)",
      "name": "tokenIdToAddressMap",
      "description": "View returning address of listed token by ID.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "tokenId as stored, via BiMap, within the contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "requestWithdraw(address,uint256)",
      "name": "requestWithdraw",
      "description": "Signals and initiates user's intent to withdraw.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "address of token to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "number of token(s) to be withdrawn * Emits an {WithdrawRequest} event with relevent request information.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getUsersPaginated(address,uint16)",
      "name": "getUsersPaginated",
      "description": "View returning all byte-encoded users in paginated form.",
      "parameterDecorators": [
        {
          "name": "previousPageUser",
          "description": "address of last user received in last pages (address(0) for first page).",
          "recommendedTypes": []
        },
        {
          "name": "pageSize",
          "description": "uint determining the count of users to be returned per page.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "users",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(address,uint256)",
      "name": "deposit",
      "description": "credits user with deposit amount on next epoch (given by getCurrentBatchId).",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "address of token to be deposited.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "number of token(s) to be credited to user's account * Emits an {Deposit} event with relevent deposit information. * Requirements: - token transfer to contract is successfull.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelOrders(uint16[])",
      "name": "cancelOrders",
      "description": "a user facing function used to cancel orders. If the order is valid for the batch that is currently being solved, it sets order expiry to that batchId. Otherwise it removes it from storage. Can be called multiple times (e.g. to eventually free storage once order is expired).",
      "parameterDecorators": [
        {
          "name": "orderIds",
          "description": "referencing the indices of user's orders to be cancelled * Emits an {OrderCancellation} or {OrderDeletion} with sender's address and orderId.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFeeTaker(address)",
      "name": "setFeeTaker",
      "description": "Used to change a fee taker.",
      "parameterDecorators": [
        {
          "name": "newAddress",
          "description": "New fee taker address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "AMOUNT_MINIMUM()",
      "name": "AMOUNT_MINIMUM",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "placeValidFromOrders(uint16[],uint16[],uint32[],uint32[],uint128[],uint128[])",
      "name": "placeValidFromOrders",
      "description": "A user facing function used to place limit sell orders in auction with expiry defined by batchId Note that parameters are passed as arrays and the indices correspond to each order.",
      "parameterDecorators": [
        {
          "name": "buyTokens",
          "description": "ids of tokens to be bought.",
          "recommendedTypes": []
        },
        {
          "name": "sellTokens",
          "description": "ids of tokens to be sold.",
          "recommendedTypes": []
        },
        {
          "name": "validFroms",
          "description": "batchIds representing order's validity start time.",
          "recommendedTypes": []
        },
        {
          "name": "validUntils",
          "description": "batchIds representing order's expiry.",
          "recommendedTypes": []
        },
        {
          "name": "buyAmounts",
          "description": "relative minimum amount of requested buy amounts.",
          "recommendedTypes": []
        },
        {
          "name": "sellAmounts",
          "description": "maximum amounts of sell token to be exchanged.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "orderIds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "currentPrices(uint16)",
      "name": "currentPrices",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEncodedUserOrders(address)",
      "name": "getEncodedUserOrders",
      "description": "View returning all byte-encoded sell orders for specified user.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "address of user whose orders are being queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "elements",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "orders(address,uint256)",
      "name": "orders",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "buyToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        },
        {
          "name": "sellToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        },
        {
          "name": "validFrom",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "validUntil",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "priceNumerator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        },
        {
          "name": "priceDenominator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        },
        {
          "name": "usedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "UNLIMITED_ORDER_AMOUNT()",
      "name": "UNLIMITED_ORDER_AMOUNT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numTokens()",
      "name": "numTokens",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastCreditBatchId(address,address)",
      "name": "lastCreditBatchId",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEncodedUsersPaginated(address,uint16,uint16)",
      "name": "getEncodedUsersPaginated",
      "description": "View returning byte-encoded sell orders in paginated form.",
      "parameterDecorators": [
        {
          "name": "previousPageUser",
          "description": "address of last user received in the previous page (address(0) for first page).",
          "recommendedTypes": []
        },
        {
          "name": "previousPageUserOffset",
          "description": "the number of orders received for the last user on the previous page (0 for first page).",
          "recommendedTypes": []
        },
        {
          "name": "pageSize",
          "description": "uint determining the count of orders to be returned per page.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "elements",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasToken(address)",
      "name": "hasToken",
      "description": "View returning a bool attesting whether token was already added.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "address of the token to be checked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestSolution()",
      "name": "latestSolution",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "solutionSubmitter",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "objectiveValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPendingDeposit(address,address)",
      "name": "getPendingDeposit",
      "description": "getter function used to display pending deposit.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "address of user.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "address of ERC20 token return amount and batchId of deposit's transfer if any (else 0).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "replaceOrders(uint16[],uint16[],uint16[],uint32[],uint32[],uint128[],uint128[])",
      "name": "replaceOrders",
      "description": "A user facing wrapper to cancel and place new orders in the same transaction.",
      "parameterDecorators": [
        {
          "name": "cancellations",
          "description": "indices of orders to be cancelled.",
          "recommendedTypes": []
        },
        {
          "name": "buyTokens",
          "description": "ids of tokens to be bought in new orders.",
          "recommendedTypes": []
        },
        {
          "name": "sellTokens",
          "description": "ids of tokens to be sold in new orders.",
          "recommendedTypes": []
        },
        {
          "name": "validFroms",
          "description": "batchIds representing order's validity start time in new orders.",
          "recommendedTypes": []
        },
        {
          "name": "validUntils",
          "description": "batchIds represnnting order's expiry in new orders.",
          "recommendedTypes": []
        },
        {
          "name": "buyAmounts",
          "description": "relative minimum amount of requested buy amounts in new orders.",
          "recommendedTypes": []
        },
        {
          "name": "sellAmounts",
          "description": "maximum amounts of sell token to be exchanged in new orders.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getPendingWithdraw(address,address)",
      "name": "getPendingWithdraw",
      "description": "getter function used to display pending withdraw.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "address of user.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "address of ERC20 token return amount and batchId when withdraw was requested if any (else 0).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptingSolutions(uint32)",
      "name": "acceptingSolutions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "batchId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addToken(address)",
      "name": "addToken",
      "description": "Used to list a new token on the contract: Hence, making it available for exchange in an auction.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "ERC20 token to be listed. * Requirements: - `maxTokens` has not already been reached - `token` has not already been added.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getBalance(address,address)",
      "name": "getBalance",
      "description": "fetches and returns user's balance.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "address of user.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "address of ERC20 token return Current `token` balance of `user`'s account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "FEE_DENOMINATOR()",
      "name": "FEE_DENOMINATOR",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ENCODED_AUCTION_ELEMENT_WIDTH()",
      "name": "ENCODED_AUCTION_ELEMENT_WIDTH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "BATCH_TIME()",
      "name": "BATCH_TIME",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentBatchId()",
      "name": "getCurrentBatchId",
      "description": "getter function to determine current auction id. return current batchId.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEncodedUserOrdersPaginated(address,uint16,uint16)",
      "name": "getEncodedUserOrdersPaginated",
      "description": "View returning all byte-encoded sell orders for specified user.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "address of user whose orders are being queried.",
          "recommendedTypes": []
        },
        {
          "name": "offset",
          "description": "uint determining the starting orderIndex.",
          "recommendedTypes": []
        },
        {
          "name": "pageSize",
          "description": "uint determining the count of elements to be viewed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "elements",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenAddressToIdMap(address)",
      "name": "tokenAddressToIdMap",
      "description": "View returning ID of listed tokens.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "address of listed token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "requestFutureWithdraw(address,uint256,uint32)",
      "name": "requestFutureWithdraw",
      "description": "Signals and initiates user's intent to withdraw.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "address of token to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "number of token(s) to be withdrawn.",
          "recommendedTypes": []
        },
        {
          "name": "batchId",
          "description": "state index at which request is to be made. * Emits an {WithdrawRequest} event with relevent request information.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hasValidWithdrawRequest(address,address)",
      "name": "hasValidWithdrawRequest",
      "description": "Used to determine if user has a valid pending withdraw request of specific token.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "address of user.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "address of ERC20 token return true if `user` has valid withdraw request for `token`, otherwise false.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_TOKENS()",
      "name": "MAX_TOKENS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(address,address)",
      "name": "withdraw",
      "description": "Claims pending withdraw - can be called on behalf of others.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "address of user who withdraw is being claimed. * Emits an {Withdraw} event stating that `user` withdrew `amount` of `token` * Requirements: - withdraw was requested in previous epoch - token was received from exchange in current auction batch.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "address of token to be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "MAX_TOUCHED_ORDERS()",
      "name": "MAX_TOUCHED_ORDERS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentObjectiveValue()",
      "name": "getCurrentObjectiveValue",
      "description": "gets the objective value of currently winning solution.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}