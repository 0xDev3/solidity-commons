{
  "schema": "../schema.json",
  "tags": [],
  "name": "MonitoringService",
  "description": "",
  "eventDecorators": [
    {
      "signature": "NewBalanceProofReceived(address,uint256,uint256,uint256,address,address)",
      "name": "NewBalanceProofReceived",
      "description": "An event emitted when a vault is liquidated.",
      "parameterDecorators": [
        {
          "name": "token_network_address",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "channel_identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reward_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "ms_address",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "raiden_node_address",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RewardClaimed(address,uint256,bytes32)",
      "name": "RewardClaimed",
      "description": "An event emitted when a vault is liquidated.",
      "parameterDecorators": [
        {
          "name": "ms_address",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reward_identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "claimReward(uint256,address,address,address)",
      "name": "claimReward",
      "description": "Called after a monitored channel is settled in order for MS to claim the reward Can be called once per settled channel by everyone on behalf of MS.",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "token_network_address",
          "description": "Address of the Token Network in which the channel exists.",
          "recommendedTypes": []
        },
        {
          "name": "closing_participant",
          "description": "Address of the participant of the channel that called close.",
          "recommendedTypes": []
        },
        {
          "name": "non_closing_participant",
          "description": "The other participant of the channel.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "contractExists(address)",
      "name": "contractExists",
      "description": "Check if a contract exists.",
      "parameterDecorators": [
        {
          "name": "contract_address",
          "description": "The address to check whether a contract is deployed or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if a contract exists, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "firstBlockAllowedToMonitor(uint256,uint256,address,address,address)",
      "name": "firstBlockAllowedToMonitor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "closed_at_block",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "settle_timeout",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "participant1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "participant2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "monitoring_service_address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "monitor(address,address,bytes32,uint256,bytes32,bytes,bytes,uint256,address,bytes)",
      "name": "monitor",
      "description": "Called by a registered MS, when providing a new balance proof to a monitored channel. Can be called multiple times by different registered MSs as long as the BP provided is newer than the current newest registered BP.",
      "parameterDecorators": [
        {
          "name": "closing_participant",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "non_closing_participant",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "balance_hash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "Strictly monotonic value used to order BPs omitting PB specific params, since these will not be provided in the future.",
          "recommendedTypes": []
        },
        {
          "name": "additional_hash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "closing_signature",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "non_closing_signature",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "reward_amount",
          "description": "Amount of tokens to be rewarded.",
          "recommendedTypes": []
        },
        {
          "name": "token_network_address",
          "description": "Address of the Token Network in which the channel being monitored exists.",
          "recommendedTypes": []
        },
        {
          "name": "reward_proof_signature",
          "description": "The signature of the signed reward proof.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "service_registry()",
      "name": "service_registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "token()",
      "name": "token",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "token_network_registry()",
      "name": "token_network_registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "user_deposit()",
      "name": "user_deposit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}