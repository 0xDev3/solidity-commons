{"schema":"../schema.json","tags":["bridges","nft"],"name":"ImplMyNFTBridgeFunMigrateFromERC721","description":"ImplMyNFTBridgeFunMigrateFromRC721. The well-ordered memory structure of our bridge. Used for generating proper memory address at compilation.","eventDecorators":[{"signature":"MigrationArrivalRegisteredERC721Full(bytes32,bytes32,bytes32,bytes32,bytes32,address,address,address,address,bytes32)","name":"MigrationArrivalRegisteredERC721Full","description":"Token transfer event.","parameterDecorators":[{"name":"_originUniverse","description":"","recommendedTypes":[],"indexed":false},{"name":"_originWorld","description":"","recommendedTypes":[],"indexed":true},{"name":"_originTokenId","description":"","recommendedTypes":[],"indexed":true},{"name":"_originOwner","description":"","recommendedTypes":[],"indexed":false},{"name":"_originBridge","description":"","recommendedTypes":[],"indexed":false},{"name":"_destinationWorld","description":"","recommendedTypes":[],"indexed":false},{"name":"_destinationTokenId","description":"","recommendedTypes":[],"indexed":false},{"name":"_destinationOwner","description":"","recommendedTypes":[],"indexed":false},{"name":"_signee","description":"","recommendedTypes":[],"indexed":false},{"name":"_migrationRelayedHash","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"MigrationArrivalRegisteredERC721IOU(bytes32,bytes32,bytes32,bytes32,bytes32,address,address,address,address,bytes32)","name":"MigrationArrivalRegisteredERC721IOU","description":"Token transfer event.","parameterDecorators":[{"name":"_originUniverse","description":"","recommendedTypes":[],"indexed":false},{"name":"_originWorld","description":"","recommendedTypes":[],"indexed":true},{"name":"_originTokenId","description":"","recommendedTypes":[],"indexed":true},{"name":"_originOwner","description":"","recommendedTypes":[],"indexed":false},{"name":"_originBridge","description":"","recommendedTypes":[],"indexed":false},{"name":"_destinationWorld","description":"","recommendedTypes":[],"indexed":false},{"name":"_destinationTokenId","description":"","recommendedTypes":[],"indexed":false},{"name":"_destinationOwner","description":"","recommendedTypes":[],"indexed":false},{"name":"_signee","description":"","recommendedTypes":[],"indexed":false},{"name":"_migrationRelayedHash","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"cancelMigration(address,uint256,address,bytes32,bytes32,bytes32,bytes32,bytes32,address,bytes32)","name":"cancelMigration","description":"Send back a token to it's previous owner in case a relay do not wish to complete the migration. This function will throw if the migration is considered redeemable or not called by the relay.","parameterDecorators":[{"name":"_originWorld","description":"An array of 32 bytes representing the origin world of the origin token.","recommendedTypes":[]},{"name":"_originTokenId","description":"An array of 32 bytes representing the tokenId of the origin token.","recommendedTypes":[]},{"name":"_originOwner","description":"An array of 32 bytes representing the original owner of the migrated token .","recommendedTypes":[]},{"name":"_destinationUniverse","description":"An array of 32 bytes representing the destination universe. eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination..","recommendedTypes":[]},{"name":"_destinationBridge","description":"An array of 32 bytes representing the origin bridge. If the origin bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_destinationWorld","description":"An array of 32 bytes representing the destination world of the migrated token. If the destination bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_destinationTokenId","description":"An array of 32 bytes representing the tokenId world of the migrated token. If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.","recommendedTypes":[]},{"name":"_destinationOwner","description":"An array of 32 bytes representing the final owner of the migrated token . If the destination world is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_signee","description":"The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner.","recommendedTypes":[]},{"name":"_originHeight","description":"The height at which the origin token was put in escrow in this bridge.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isMigrationRedeemable(address,uint256,address,bytes32,bytes32,bytes32,bytes32,bytes32,address,bytes32)","name":"isMigrationRedeemable","description":"Query if a relay can migrate back a token in escrow with the bridge. Will return true if the migration is considered redeemable (ie : the relay validated the escrowhash).","parameterDecorators":[{"name":"_originWorld","description":"An array of 32 bytes representing the origin world of the origin token.","recommendedTypes":[]},{"name":"_originTokenId","description":"An array of 32 bytes representing the tokenId of the origin token.","recommendedTypes":[]},{"name":"_originOwner","description":"An array of 32 bytes representing the original owner of the migrated token .","recommendedTypes":[]},{"name":"_destinationUniverse","description":"An array of 32 bytes representing the destination universe. eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination..","recommendedTypes":[]},{"name":"_destinationBridge","description":"An array of 32 bytes representing the origin bridge. If the origin bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_destinationWorld","description":"An array of 32 bytes representing the destination world of the migrated token. If the destination bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_destinationTokenId","description":"An array of 32 bytes representing the tokenId world of the migrated token. If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.","recommendedTypes":[]},{"name":"_destinationOwner","description":"An array of 32 bytes representing the final owner of the migrated token . If the destination world is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_signee","description":"The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner.","recommendedTypes":[]},{"name":"_originHeight","description":"The height at which the origin token was put in escrow in this bridge.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isMigrationRedeemable(bytes32)","name":"isMigrationRedeemable","description":"Query if a relay can migrate back a token in escrow with the bridge. Will return true if the migration is considered redeemable (ie : the relay validated the escrowhash).","parameterDecorators":[{"name":"_migrationHash","description":"The migration hash of the token you wish to query.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"migrateFromFullERC721ToERC721(bytes32,bytes32,bytes32,bytes32,bytes32,address,uint256,address,address,bytes32,bytes)","name":"migrateFromFullERC721ToERC721","description":"Declare a migration of an ERC-721 token from a different bridge toward this bridge as a full migration. Throw if msg.sender is not a relay accredited by _destinationWorld Owner This is especially important as a rogue relay could theoritically release tokens put in escrow beforehand. This also mean that a token can be migrated back only by a relay accredited by the original token publisher. Contrary to IOU migrations, do not throw in case of mismatched token back and forth migration.","parameterDecorators":[{"name":"_originUniverse","description":"An array of 32 bytes representing the destination universe. eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.","recommendedTypes":[]},{"name":"_originBridge","description":"An array of 32 bytes representing the origin bridge. If the origin bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_originWorld","description":"An array of 32 bytes representing the origin world of the origin token. If the origin bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_originTokenId","description":"An array of 32 bytes representing the tokenId of the origin token. If the origin token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.","recommendedTypes":[]},{"name":"_originOwner","description":"An array of 32 bytes representing the original owner of the migrated token . If the origin world is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_destinationWorld","description":"An array of 32 bytes representing the destination world of the migrated token. If the destination bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_destinationTokenId","description":"An array of 32 bytes representing the tokenId world of the migrated token. If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.","recommendedTypes":[]},{"name":"_destinationOwner","description":"An array of 32 bytes representing the final owner of the migrated token . If the destination world is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_signee","description":"The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner. A relay unable to lie on _signee from the departure bridge to here is a trustless relay.","recommendedTypes":[]},{"name":"_height","description":"The height at which the origin token was put in escrow in the origin universe. Usually the block.timestamp, but different universes have different metrics.","recommendedTypes":[]},{"name":"_migrationHashSigned","description":"The _migrationHash of the origin chain, signed by _signee.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"migrateFromIOUERC721ToERC721(bytes32,bytes32,bytes32,bytes32,bytes32,address,uint256,address,address,bytes32,bytes)","name":"migrateFromIOUERC721ToERC721","description":"Declare a migration of an ERC-721 token from a different bridge toward this bridge as an IOU token. Throw if msg.sender is not a relay accredited by _destinationWorld Owner This is especially important as a rogue relay could theoritically release tokens put in escrow beforehand. This also mean that a token can be migrated back only by a relay accredited by the original token publisher. Throw if the destination token is already in escrow with this bridge as a migration origin token but that current _origin* parameters do not match the previous _destination* parameters : Only the IOU can claim the original token back.","parameterDecorators":[{"name":"_originUniverse","description":"An array of 32 bytes representing the destination universe. eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.","recommendedTypes":[]},{"name":"_originBridge","description":"An array of 32 bytes representing the origin bridge. If the origin bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_originWorld","description":"An array of 32 bytes representing the origin world of the origin token. If the origin bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_originTokenId","description":"An array of 32 bytes representing the tokenId of the origin token. If the origin token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.","recommendedTypes":[]},{"name":"_originOwner","description":"An array of 32 bytes representing the original owner of the migrated token . If the origin world is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_destinationWorld","description":"An array of 32 bytes representing the destination world of the migrated token. If the destination bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_destinationTokenId","description":"An array of 32 bytes representing the tokenId world of the migrated token. If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.","recommendedTypes":[]},{"name":"_destinationOwner","description":"An array of 32 bytes representing the final owner of the migrated token . If the destination world is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_signee","description":"The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner. A relay unable to lie on _signee from the departure bridge to here is a trustless relay.","recommendedTypes":[]},{"name":"_height","description":"The verification parameter allowing to check which fork was the escrow made on. Usually equals to blockhash(block.number - 1) ^ bytes32(uint(uint160(address(block.coinbase)).","recommendedTypes":[]},{"name":"_migrationHashSigned","description":"The _migrationHash of the origin chain, signed by _signee.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"registerEscrowHashSignature(address,uint256,address,bytes32,bytes32,bytes32,bytes32,bytes32,address,bytes32,bytes)","name":"registerEscrowHashSignature","description":"Allow a token deposited to the bridge to be sent to anyone by it's migrating relay. This function will regenerate the migrationHash to match it with the escrowHash signed.","parameterDecorators":[{"name":"_originWorld","description":"An array of 32 bytes representing the origin world of the origin token.","recommendedTypes":[]},{"name":"_originTokenId","description":"An array of 32 bytes representing the tokenId of the origin token.","recommendedTypes":[]},{"name":"_originOwner","description":"An array of 32 bytes representing the original owner of the migrated token .","recommendedTypes":[]},{"name":"_destinationUniverse","description":"An array of 32 bytes representing the destination universe. eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination..","recommendedTypes":[]},{"name":"_destinationBridge","description":"An array of 32 bytes representing the origin bridge. If the origin bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_destinationWorld","description":"An array of 32 bytes representing the destination world of the migrated token. If the destination bridge is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_destinationTokenId","description":"An array of 32 bytes representing the tokenId world of the migrated token. If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.","recommendedTypes":[]},{"name":"_destinationOwner","description":"An array of 32 bytes representing the final owner of the migrated token . If the destination world is on an EVM, it is most likely an address.","recommendedTypes":[]},{"name":"_signee","description":"The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner.","recommendedTypes":[]},{"name":"_originHeight","description":"The height at which the origin token was put in escrow in this bridge.","recommendedTypes":[]},{"name":"_escrowHashSigned","description":"The emitted _escrowHash signed by _signee.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"registerEscrowHashSignature(bytes32,bytes)","name":"registerEscrowHashSignature","description":"Allow a token deposited to the bridge to be sent to anyone by it's migrating relay. This function will assume that the owner that has initated the migration depositing the token in the bridge is the _signee of the escrowhash.","parameterDecorators":[{"name":"_migrationHash","description":"The hash of the migration you want to register as redeemable.","recommendedTypes":[]},{"name":"_escrowHashSigned","description":"The emitted _escrowHash signed by the previous token owner.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}