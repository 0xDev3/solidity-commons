{
  "schema": "../schema.json",
  "tags": [],
  "name": "NomadModule",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AvatarSet(address,address)",
      "name": "AvatarSet",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "previousAvatar",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAvatar",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ChangedGuard(address)",
      "name": "ChangedGuard",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "guard",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NomadModuleControllerUpdated(address,address,uint32,uint32)",
      "name": "NomadModuleControllerUpdated",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "previousController",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newController",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousDomain",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newDomain",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NomadModuleManagerUpdated(address,address)",
      "name": "NomadModuleManagerUpdated",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "previousManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NomadModuleSetup(address,address,address,address)",
      "name": "NomadModuleSetup",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "initiator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "avatar",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TargetSet(address,address)",
      "name": "TargetSet",
      "description": "Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "previousTarget",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newTarget",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "avatar()",
      "name": "avatar",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "Address of the remote controller which is authorized to initiate execTransactions on the module from a remote domain.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "controllerDomain()",
      "name": "controllerDomain",
      "description": "Domain of the controller which is authorized to send messages to the module. Domains are unique identifiers within Nomad for a domain (chain, L1, L2, sidechain, rollup, etc).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGuard()",
      "name": "getGuard",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_guard",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "guard()",
      "name": "guard",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "handle(uint32,uint32,bytes32,bytes)",
      "name": "handle",
      "description": "Handle incoming execTransactions sent from the Controller via Nomad the controller is authorized to send execTransactions across-chains from the controller's native domain to be executed on this module exec Transactions are sent via Nomad arbitrary message-passing channels Executes a transaction initiated by the remote controller.",
      "parameterDecorators": [
        {
          "name": "_origin",
          "description": "The domain from which the message was sent (must be the domain of the controller).",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_sender",
          "description": "The message sender (must be the controller).",
          "recommendedTypes": []
        },
        {
          "name": "_message",
          "description": "The message (abi-encoded params for executeTransaction).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isController(address,uint32)",
      "name": "isController",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_controller",
          "description": "Address of controller on the other side of the bridge.",
          "recommendedTypes": []
        },
        {
          "name": "_controllerDomain",
          "description": "Domain of controller on the other side of the bridge.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "TRUE if the provided (address,domain) tuple identifies the authorized remote controller.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "manager()",
      "name": "manager",
      "description": "Address of the Nomad xAppConnectionManager contract which registers valid Replica contracts and Watchers.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAvatar(address)",
      "name": "setAvatar",
      "description": "Can only be called by the current owner. Sets the avatar to a new avatar (`newAvatar`).",
      "parameterDecorators": [
        {
          "name": "_avatar",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setController(address,uint32)",
      "name": "setController",
      "description": "This can only be called by the owner. Set the controller.",
      "parameterDecorators": [
        {
          "name": "_controller",
          "description": "Address of controller on the other side of the bridge.",
          "recommendedTypes": []
        },
        {
          "name": "_controllerDomain",
          "description": "Domain of controller on the other side of the bridge.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGuard(address)",
      "name": "setGuard",
      "description": "Set a guard that checks transactions before execution.",
      "parameterDecorators": [
        {
          "name": "_guard",
          "description": "The address of the guard to be used or the 0 address to disable the guard.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setManager(address)",
      "name": "setManager",
      "description": "This can only be called by the owner. Set the Replica contract address.",
      "parameterDecorators": [
        {
          "name": "_manager",
          "description": "Address of the Nomad xAppConnectionManager contract, which registers valid Replica contracts and Watchers.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTarget(address)",
      "name": "setTarget",
      "description": "Can only be called by the current owner. Sets the target to a new target (`newTarget`).",
      "parameterDecorators": [
        {
          "name": "_target",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUp(bytes)",
      "name": "setUp",
      "description": "",
      "parameterDecorators": [
        {
          "name": "initParams",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "target()",
      "name": "target",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}