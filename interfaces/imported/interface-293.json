{
  "schema": "../schema.json",
  "tags": [
    "oracles"
  ],
  "name": "SkinnyOptimisticOracle",
  "description": "Optimistic Oracle with a different interface and fewer features that emphasizes gas cost reductions. Pre-DVM escalation contract that allows faster settlement.",
  "eventDecorators": [
    {
      "signature": "DisputePrice(address,bytes32,uint32,bytes,tuple)",
      "name": "DisputePrice",
      "description": "events for transfer. triggered when the system balance for a given token is updated.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ancillaryData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "request",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposePrice(address,bytes32,uint32,bytes,tuple)",
      "name": "ProposePrice",
      "description": "events for transfer. triggered when the system balance for a given token is updated.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ancillaryData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "request",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RequestPrice(address,bytes32,uint32,bytes,tuple)",
      "name": "RequestPrice",
      "description": "events for transfer. triggered when the system balance for a given token is updated.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ancillaryData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "request",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Settle(address,bytes32,uint32,bytes,tuple)",
      "name": "Settle",
      "description": "events for transfer. triggered when the system balance for a given token is updated.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ancillaryData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "request",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ancillaryBytesLimit()",
      "name": "ancillaryBytesLimit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "defaultLiveness()",
      "name": "defaultLiveness",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "disputePrice(address,bytes32,uint32,bytes,tuple(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
      "name": "disputePrice",
      "description": "Disputes a price request with an active proposal where caller is the disputer.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "request",
          "description": "price request parameters whose hash must match the request that the caller wants to dispute.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "proposer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "disputer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "currency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "settled",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "proposedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "resolvedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "expirationTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reward",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "finalFee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "bond",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "customLiveness",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disputePriceFor(bytes32,uint32,bytes,tuple(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)",
      "name": "disputePriceFor",
      "description": "Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "request",
          "description": "price request parameters whose hash must match the request that the caller wants to dispute.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "proposer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "disputer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "currency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "settled",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "proposedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "resolvedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "expirationTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reward",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "finalFee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "bond",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "customLiveness",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "disputer",
          "description": "address to set as the disputer.",
          "recommendedTypes": []
        },
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "finder()",
      "name": "finder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentTime()",
      "name": "getCurrentTime",
      "description": "Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint for the current Testable timestamp.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getState(address,bytes32,uint32,bytes,tuple(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
      "name": "getState",
      "description": "Computes the current state of a price request. See the State enum for more details.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "request",
          "description": "price request parameters.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "proposer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "disputer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "currency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "settled",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "proposedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "resolvedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "expirationTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reward",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "finalFee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "bond",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "customLiveness",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the State.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hasPrice(address,bytes32,uint32,bytes,tuple(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
      "name": "hasPrice",
      "description": "Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "request",
          "description": "price request parameters. The hash of these parameters must match with the request hash that is associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method will revert.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "proposer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "disputer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "currency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "settled",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "proposedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "resolvedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "expirationTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reward",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "finalFee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "bond",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "customLiveness",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "boolean indicating true if price exists and false if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposePrice(address,bytes32,uint32,bytes,tuple(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)",
      "name": "proposePrice",
      "description": "Proposes a price value where caller is the proposer.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "request",
          "description": "price request parameters whose hash must match the request that the caller wants to propose a price for.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "proposer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "disputer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "currency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "settled",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "proposedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "resolvedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "expirationTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reward",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "finalFee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "bond",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "customLiveness",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "proposedPrice",
          "description": "price being proposed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposePriceFor(address,bytes32,uint32,bytes,tuple(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)",
      "name": "proposePriceFor",
      "description": "Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "request",
          "description": "price request parameters whose hash must match the request that the caller wants to propose a price for.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "proposer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "disputer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "currency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "settled",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "proposedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "resolvedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "expirationTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reward",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "finalFee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "bond",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "customLiveness",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "proposer",
          "description": "address to set as the proposer.",
          "recommendedTypes": []
        },
        {
          "name": "proposedPrice",
          "description": "price being proposed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)",
      "name": "requestAndProposePriceFor",
      "description": "Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer will receive any rewards that come from this proposal. However, any bonds are pulled from the caller. The caller is the requester, but the proposer can be customized.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "currency",
          "description": "ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.",
          "recommendedTypes": []
        },
        {
          "name": "reward",
          "description": "reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0, which could make sense if the contract requests and proposes the value in the same call or provides its own reward system.",
          "recommendedTypes": []
        },
        {
          "name": "bond",
          "description": "custom proposal bond to set for request. If set to 0, defaults to the final fee.",
          "recommendedTypes": []
        },
        {
          "name": "customLiveness",
          "description": "custom proposal liveness to set for request.",
          "recommendedTypes": []
        },
        {
          "name": "proposer",
          "description": "address to set as the proposer.",
          "recommendedTypes": []
        },
        {
          "name": "proposedPrice",
          "description": "price being proposed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)",
      "name": "requestPrice",
      "description": "Requests a new price.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "price identifier being requested.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data representing additional args being passed with the price request.",
          "recommendedTypes": []
        },
        {
          "name": "currency",
          "description": "ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.",
          "recommendedTypes": []
        },
        {
          "name": "reward",
          "description": "reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0, which could make sense if the contract requests and proposes the value in the same call or provides its own reward system.",
          "recommendedTypes": []
        },
        {
          "name": "bond",
          "description": "custom proposal bond to set for request. If set to 0, defaults to the final fee.",
          "recommendedTypes": []
        },
        {
          "name": "customLiveness",
          "description": "custom proposal liveness to set for request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "default bond + final fee that the proposer and disputer will be required to pay.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requests(bytes32)",
      "name": "requests",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setCurrentTime(uint256)",
      "name": "setCurrentTime",
      "description": "Sets the current time. Will revert if not running in test mode.",
      "parameterDecorators": [
        {
          "name": "time",
          "description": "timestamp to set current Testable time to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settle(address,bytes32,uint32,bytes,tuple(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))",
      "name": "settle",
      "description": "Attempts to settle an outstanding price request. Will revert if it isn't settleable.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "request",
          "description": "price request parameters whose hash must match the request that the caller wants to settle.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "proposer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "disputer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "currency",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "settled",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "proposedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "resolvedPrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "expirationTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reward",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "finalFee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "bond",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "customLiveness",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "payout",
          "description": "the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes the returned bonds as well as additional rewards.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "resolvedPrice",
          "description": "the price that the request settled to.",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stampAncillaryData(bytes,address)",
      "name": "stampAncillaryData",
      "description": "Generates stamped ancillary data in the format that it would be used in the case of a price dispute.",
      "parameterDecorators": [
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the stamped ancillary bytes.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "timerAddress()",
      "name": "timerAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}