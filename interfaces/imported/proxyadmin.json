{
  "schema": "../schema.json",
  "tags": [],
  "name": "ProxyAdmin",
  "description": "ProxyAdmin. This contract is the admin of a proxy, and is in charge of upgrading it as well as transferring it to another admin.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when an update to `requestTokensRemoved` is made. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "changeProxyAdmin(address,address)",
      "name": "changeProxyAdmin",
      "description": "Changes the admin of a proxy.",
      "parameterDecorators": [
        {
          "name": "proxy",
          "description": "Proxy to change admin.",
          "recommendedTypes": []
        },
        {
          "name": "newAdmin",
          "description": "Address to transfer proxy administration to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getProxyAdmin(address)",
      "name": "getProxyAdmin",
      "description": "Returns the admin of a proxy. Only the admin can query it.",
      "parameterDecorators": [
        {
          "name": "proxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProxyImplementation(address)",
      "name": "getProxyImplementation",
      "description": "Returns the current implementation of a proxy. This is needed because only the proxy admin can query it.",
      "parameterDecorators": [
        {
          "name": "proxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore. Allows the current owner to relinquish control of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to transfer control of the contract to a newOwner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgrade(address,address)",
      "name": "upgrade",
      "description": "Upgrades a proxy to the newest implementation of a contract.",
      "parameterDecorators": [
        {
          "name": "proxy",
          "description": "Proxy to be upgraded.",
          "recommendedTypes": []
        },
        {
          "name": "implementation",
          "description": "the address of the Implementation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeAndCall(address,address,bytes)",
      "name": "upgradeAndCall",
      "description": "Upgrades a proxy to the newest implementation of a contract and forwards a function call to it. This is useful to initialize the proxied contract.",
      "parameterDecorators": [
        {
          "name": "proxy",
          "description": "Proxy to be upgraded.",
          "recommendedTypes": []
        },
        {
          "name": "implementation",
          "description": "Address of the Implementation.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}