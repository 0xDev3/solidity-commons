{"schema":"../schema.json","tags":["tokens","vesting"],"name":"LinearVesting","description":"Implementation of the {ILinearVesting} interface. The straightforward vesting contract that gradually releases a fixed supply of tokens to multiple vest parties over a 2 year window. The token expects the {begin} hook to be invoked the moment it is supplied with the necessary amount of tokens to vest, which should be equivalent to the time the {setComponents} function is invoked on the Vader token.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"An event emitted when a vault is liquidated. Emitted when a NFT stops staking; either through standard means or by expulsion.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Vested(address,uint256)","name":"Vested","description":"An event emitted when a vault is liquidated. Emitted when a NFT stops staking; either through standard means or by expulsion.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"VestingInitialized(uint256)","name":"VestingInitialized","description":"An event emitted when a vault is liquidated. Emitted when a NFT stops staking; either through standard means or by expulsion.","parameterDecorators":[{"name":"duration","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"begin()","name":"begin","description":"Allows the vesting period to be initiated. Emits a {VestingInitialized} event from which the start and end can be calculated via it's attached timestamp. Requirements: - the caller must be the owner (vader token).","parameterDecorators":[],"returnDecorators":[],"emittableEvents":["VestingInitialized(uint256)"],"readOnly":false},{"signature":"claim()","name":"claim","description":"Allows a user to claim their pending vesting amount. Emits a {Vested} event indicating the user who claimed their vested tokens as well as the amount that was vested. Requirements: - the vesting period has started - the caller must have a non-zero vested amount.","parameterDecorators":[],"returnDecorators":[{"name":"vestedAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":["Vested(address,uint256)"],"readOnly":false},{"signature":"end()","name":"end","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getClaim()","name":"getClaim","description":"Returns the amount a user can claim at a given point in time. Requirements: - the vesting period has started.","parameterDecorators":[],"returnDecorators":[{"name":"vestedAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"start()","name":"start","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"vader()","name":"vader","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"vest(address)","name":"vest","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint192"},{"name":"lastClaim","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":true}]}