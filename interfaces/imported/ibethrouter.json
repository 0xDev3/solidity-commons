{
  "schema": "../schema.json",
  "tags": [],
  "name": "IbETHRouter",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "events for transfer.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addLiquidityETH(uint256,uint256,uint256,address,uint256)",
      "name": "addLiquidityETH",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountAlphaDesired",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountAlphaMin",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountETHMin",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountAlpha",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountETH",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addLiquidityTwoSidesOptimal(uint256,uint256,uint256,address,uint256)",
      "name": "addLiquidityTwoSidesOptimal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountIbETHDesired",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountAlphaDesired",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountLPMin",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addLiquidityTwoSidesOptimalETH(uint256,uint256,address,uint256)",
      "name": "addLiquidityTwoSidesOptimalETH",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountAlphaDesired",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountLPMin",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "alpha()",
      "name": "alpha",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ibETH()",
      "name": "ibETH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ibETHForExactETH(uint256)",
      "name": "ibETHForExactETH",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountETH",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lpToken()",
      "name": "lpToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recover(address,address,uint256)",
      "name": "recover",
      "description": "Recover ERC20 tokens that were accidentally sent to this smart contract.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The token contract. Can be anything. This contract should not hold ERC20 tokens.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The address to send the tokens to.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The number of tokens to transfer to `to`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "recoverETH(address,uint256)",
      "name": "recoverETH",
      "description": "Recover ETH that were accidentally sent to this smart contract.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address to send the ETH to.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The number of ETH to transfer to `to`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeLiquidityAllAlpha(uint256,uint256,address,uint256)",
      "name": "removeLiquidityAllAlpha",
      "description": "",
      "parameterDecorators": [
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountAlphaMin",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountAlpha",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeLiquidityETH(uint256,uint256,uint256,address,uint256)",
      "name": "removeLiquidityETH",
      "description": "",
      "parameterDecorators": [
        {
          "name": "liquidity",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountAlphaMin",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountETHMin",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountAlpha",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountETH",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "router()",
      "name": "router",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swapAlphaForExactETH(uint256,uint256,address,uint256)",
      "name": "swapAlphaForExactETH",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountETHOut",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountAlphaInMax",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amounts",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapETHForExactAlpha(uint256,address,uint256)",
      "name": "swapETHForExactAlpha",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountAlphaOut",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amounts",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapExactAlphaForETH(uint256,uint256,address,uint256)",
      "name": "swapExactAlphaForETH",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountAlphaIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountETHOutMin",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amounts",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapExactETHForAlpha(uint256,address,uint256)",
      "name": "swapExactETHForAlpha",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amountAlphaOutMin",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amounts",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}