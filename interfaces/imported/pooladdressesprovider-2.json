{
  "schema": "../schema.json",
  "tags": [
    "aave"
  ],
  "name": "PoolAddressesProvider",
  "description": "PoolAddressesProvider. Acts as factory of proxies and admin of those, so with right to change its implementationsOwned by the Aave Governance*. Main registry of addresses part of or connected to the protocol, including permissioned roles.",
  "eventDecorators": [
    {
      "signature": "ACLAdminUpdated(address)",
      "name": "ACLAdminUpdated",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "fallbackOracle",
          "description": "The address of the fallback oracle.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ACLManagerUpdated(address)",
      "name": "ACLManagerUpdated",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "fallbackOracle",
          "description": "The address of the fallback oracle.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AddressSet(bytes32,address,bool)",
      "name": "AddressSet",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "hasProxy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BridgeAccessControlUpdated(address)",
      "name": "BridgeAccessControlUpdated",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "fallbackOracle",
          "description": "The address of the fallback oracle.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MarketIdSet(string)",
      "name": "MarketIdSet",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "fallbackOracle",
          "description": "The address of the fallback oracle.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PoolConfiguratorUpdated(address)",
      "name": "PoolConfiguratorUpdated",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "fallbackOracle",
          "description": "The address of the fallback oracle.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PoolDataProviderUpdated(address)",
      "name": "PoolDataProviderUpdated",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "fallbackOracle",
          "description": "The address of the fallback oracle.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PoolUpdated(address)",
      "name": "PoolUpdated",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "fallbackOracle",
          "description": "The address of the fallback oracle.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PriceOracleSentinelUpdated(address)",
      "name": "PriceOracleSentinelUpdated",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "fallbackOracle",
          "description": "The address of the fallback oracle.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PriceOracleUpdated(address)",
      "name": "PriceOracleUpdated",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "fallbackOracle",
          "description": "The address of the fallback oracle.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProxyCreated(bytes32,address)",
      "name": "ProxyCreated",
      "description": "Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "getACLAdmin()",
      "name": "getACLAdmin",
      "description": "Returns the address of the ACL admin.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The address of the ACL admin.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getACLManager()",
      "name": "getACLManager",
      "description": "Returns the address of the ACL manager proxy.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ACLManager proxy address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAddress(bytes32)",
      "name": "getAddress",
      "description": "Returns an address by id.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMarketId()",
      "name": "getMarketId",
      "description": "Returns the id of the Aave market to which this contract points to.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The market id*.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPool()",
      "name": "getPool",
      "description": "Returns the address of the Pool proxy.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The Pool proxy address*.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPoolConfigurator()",
      "name": "getPoolConfigurator",
      "description": "Returns the address of the PoolConfigurator proxy.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The PoolConfigurator proxy address*.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPoolDataProvider()",
      "name": "getPoolDataProvider",
      "description": "Returns the address of the DataProvider.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The DataProvider address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPriceOracle()",
      "name": "getPriceOracle",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPriceOracleSentinel()",
      "name": "getPriceOracleSentinel",
      "description": "Returns the address of the PriceOracleSentinel.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The PriceOracleSentinel address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setACLAdmin(address)",
      "name": "setACLAdmin",
      "description": "Updates the address of the ACL admin.",
      "parameterDecorators": [
        {
          "name": "aclAdmin",
          "description": "The address of the new ACL admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setACLManager(address)",
      "name": "setACLManager",
      "description": "Updates the address of the ACLManager.",
      "parameterDecorators": [
        {
          "name": "aclManager",
          "description": "The address of the new ACLManager*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAddress(bytes32,address)",
      "name": "setAddress",
      "description": "Sets an address for an id replacing the address saved in the addresses map. IMPORTANT Use this function carefully, as it will do a hard replacement.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "The id.",
          "recommendedTypes": []
        },
        {
          "name": "newAddress",
          "description": "The address to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAddressAsProxy(bytes32,address)",
      "name": "setAddressAsProxy",
      "description": "General function to update the implementation of a proxy registered with certain `id`. If there is no proxy registered, it will instantiate one and set as implementation the `impl`. IMPORTANT Use this function carefully, only for ids that don't have an explicit setter function, in order to avoid unexpected consequences.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "The id.",
          "recommendedTypes": []
        },
        {
          "name": "impl",
          "description": "The address of the new implementation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMarketId(string)",
      "name": "setMarketId",
      "description": "Allows to set the market which this PoolAddressesProvider represents.",
      "parameterDecorators": [
        {
          "name": "marketId",
          "description": "The market id.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPoolConfiguratorImpl(address)",
      "name": "setPoolConfiguratorImpl",
      "description": "Updates the implementation of the PoolConfigurator, or creates the proxy setting the new `configurator` implementation on the first time calling it.",
      "parameterDecorators": [
        {
          "name": "configurator",
          "description": "The new PoolConfigurator implementation*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPoolDataProvider(address)",
      "name": "setPoolDataProvider",
      "description": "Updates the address of the DataProvider.",
      "parameterDecorators": [
        {
          "name": "dataProvider",
          "description": "The address of the new DataProvider*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPoolImpl(address)",
      "name": "setPoolImpl",
      "description": "Updates the implementation of the Pool, or creates the proxy setting the new `pool` implementation on the first time calling it.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "The new Pool implementation*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPriceOracle(address)",
      "name": "setPriceOracle",
      "description": "",
      "parameterDecorators": [
        {
          "name": "priceOracle",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPriceOracleSentinel(address)",
      "name": "setPriceOracleSentinel",
      "description": "Updates the address of the PriceOracleSentinel.",
      "parameterDecorators": [
        {
          "name": "oracleSentinel",
          "description": "The address of the new PriceOracleSentinel*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}