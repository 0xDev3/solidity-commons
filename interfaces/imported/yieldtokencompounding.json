{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "yield",
    "compound"
  ],
  "name": "YieldTokenCompounding",
  "description": "Yield Token Compounding on top of element.finance.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "approveTranchePTOnBalancer(address)",
      "name": "approveTranchePTOnBalancer",
      "description": "Approve balancer vault to spend this contract's tranche tokens (PTs aka fixed yield tokens).",
      "parameterDecorators": [
        {
          "name": "_trancheAddress",
          "description": "The tranche address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "balVault()",
      "name": "balVault",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkTranchePTAllowanceOnBalancer(address)",
      "name": "checkTranchePTAllowanceOnBalancer",
      "description": "Check allowance of balancer vault for spending this contract's tranche tokens (PTs aka fixed yield tokens).",
      "parameterDecorators": [
        {
          "name": "_trancheAddress",
          "description": "The tranche address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "compound(uint8,address,bytes32,uint256,uint256,uint256)",
      "name": "compound",
      "description": "Do Yield Token Compounding i.e. convert base tokens to PTs, YTs and sell PTs for base tokens and reconvert for more YTs recursively. assume user has approved this contract for base tokens.",
      "parameterDecorators": [
        {
          "name": "_n",
          "description": "the number of compounding to do.",
          "recommendedTypes": []
        },
        {
          "name": "_trancheAddress",
          "description": "the element.fi tranche contract address for the token to compound.",
          "recommendedTypes": []
        },
        {
          "name": "_balancerPoolId",
          "description": "of the pool containing PTs and Base Tokens. AMM formula is constant power sum formula.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of base tokens supplied initially.",
          "recommendedTypes": []
        },
        {
          "name": "_expectedYtOutput",
          "description": "slippage protection.",
          "recommendedTypes": []
        },
        {
          "name": "_expectedBaseTokensSpent",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}