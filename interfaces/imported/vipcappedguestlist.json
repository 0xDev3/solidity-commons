{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "merkle proofs",
    "vaults",
    "yearn finance"
  ],
  "name": "VipCappedGuestList",
  "description": "A basic guest list contract for testing.",
  "eventDecorators": [
    {
      "signature": "ProveInvitation(address,bytes32)",
      "name": "ProveInvitation",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "guestRoot",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetGuestRoot(bytes32)",
      "name": "SetGuestRoot",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "guestRoot",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetUserDepositCap(uint256)",
      "name": "SetUserDepositCap",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "cap",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "authorized(address,uint256)",
      "name": "authorized",
      "description": "Check if a guest with a bag of a certain size is allowed into the party. Note that `_amount` isn't checked to keep test setup simple, since from the vault tests' perspective this is a pass/fail call anyway.",
      "parameterDecorators": [
        {
          "name": "_guest",
          "description": "The guest's address to check.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bouncer()",
      "name": "bouncer",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "guestRoot()",
      "name": "guestRoot",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "guests(address)",
      "name": "guests",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proveInvitation(address,bytes32[])",
      "name": "proveInvitation",
      "description": "Permissionly prove an address is included in the current merkle root, thereby granting accessNote that the list is designed to ONLY EXPAND in future instancesThe admin does retain the ability to ban individual addresses.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "merkleProof",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "remainingDepositAllowed(address)",
      "name": "remainingDepositAllowed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setGuestRoot(bytes32)",
      "name": "setGuestRoot",
      "description": "Set the merkle root to verify invitation proofs against.Note that accounts not included in the root will still be invited if their inviation was previously approved.",
      "parameterDecorators": [
        {
          "name": "guestRoot_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setGuests(address[],bool[])",
      "name": "setGuests",
      "description": "Invite guests or kick them from the party.",
      "parameterDecorators": [
        {
          "name": "_guests",
          "description": "The guests to add or update.",
          "recommendedTypes": []
        },
        {
          "name": "_invited",
          "description": "A flag for each guest at the matching index, inviting or uninviting the guest.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUserDepositCap(uint256)",
      "name": "setUserDepositCap",
      "description": "Set the merkle root to verify invitation proofs against.Note that accounts not included in the root will still be invited if their inviation was previously approved.",
      "parameterDecorators": [
        {
          "name": "cap_",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userDepositCap()",
      "name": "userDepositCap",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vault()",
      "name": "vault",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vaultBalance(address)",
      "name": "vaultBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}