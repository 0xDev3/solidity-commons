{
  "schema": "../schema.json",
  "tags": [
    "swaps",
    "liquidity",
    "aave",
    "uniswap"
  ],
  "name": "UniswapLiquiditySwapAdapter",
  "description": "UniswapLiquiditySwapAdapter. Uniswap V2 Adapter to swap liquidity.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Swapped(address,address,uint256,uint256)",
      "name": "Swapped",
      "description": "",
      "parameterDecorators": [
        {
          "name": "fromAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "toAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fromAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "receivedAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ADDRESSES_PROVIDER()",
      "name": "ADDRESSES_PROVIDER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "FLASHLOAN_PREMIUM_TOTAL()",
      "name": "FLASHLOAN_PREMIUM_TOTAL",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "LENDING_POOL()",
      "name": "LENDING_POOL",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_SLIPPAGE()",
      "name": "MAX_SLIPPAGE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_SLIPPAGE_PERCENT()",
      "name": "MAX_SLIPPAGE_PERCENT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ORACLE()",
      "name": "ORACLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "UNISWAP_ROUTER()",
      "name": "UNISWAP_ROUTER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "USD_ADDRESS()",
      "name": "USD_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WETH_ADDRESS()",
      "name": "WETH_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executeOperation(address[],uint256[],uint256[],address,bytes)",
      "name": "executeOperation",
      "description": "Swaps the received reserve amount from the flash loan into the asset specified in the params. The received funds from the swap are then deposited into the protocol on behalf of the user. The user should give this contract allowance to pull the ATokens in order to withdraw the underlying asset and repay the flash loan.",
      "parameterDecorators": [
        {
          "name": "assets",
          "description": "Address of asset to be swapped.",
          "recommendedTypes": []
        },
        {
          "name": "amounts",
          "description": "Amount of the asset to be swapped.",
          "recommendedTypes": []
        },
        {
          "name": "premiums",
          "description": "Fee of the flash loan.",
          "recommendedTypes": []
        },
        {
          "name": "initiator",
          "description": "Address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "params",
          "description": "Additional variadic field to include extra params. Expected parameters: address[] assetToSwapToList List of the addresses of the reserve to be swapped to and deposited uint256[] minAmountsToReceive List of min amounts to be received from the swap bool[] swapAllBalance Flag indicating if all the user balance should be swapped uint256[] permitAmount List of amounts for the permit signature uint256[] deadline List of deadlines for the permit signature uint8[] v List of v param for the permit signature bytes32[] r List of r param for the permit signature bytes32[] s List of s param for the permit signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAmountsIn(uint256,address,address)",
      "name": "getAmountsIn",
      "description": "Returns the minimum input asset amount required to buy the given output asset amount and the prices.",
      "parameterDecorators": [
        {
          "name": "amountOut",
          "description": "Amount of reserveOut.",
          "recommendedTypes": []
        },
        {
          "name": "reserveIn",
          "description": "Address of the asset to be swap from.",
          "recommendedTypes": []
        },
        {
          "name": "reserveOut",
          "description": "Address of the asset to be swap to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAmountsOut(uint256,address,address)",
      "name": "getAmountsOut",
      "description": "Given an input asset amount, returns the maximum output amount of the other asset and the prices.",
      "parameterDecorators": [
        {
          "name": "amountIn",
          "description": "Amount of reserveIn.",
          "recommendedTypes": []
        },
        {
          "name": "reserveIn",
          "description": "Address of the asset to be swap from.",
          "recommendedTypes": []
        },
        {
          "name": "reserveOut",
          "description": "Address of the asset to be swap to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rescueTokens(address)",
      "name": "rescueTokens",
      "description": "Emergency rescue for token stucked on this contract, as failsafe mechanism - Funds should never remain in this contract more time than during transactions - Only callable by the owner*.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapAndDeposit(address[],address[],uint256[],uint256[],tuple(uint256,uint256,uint8,bytes32,bytes32)[],bool[])",
      "name": "swapAndDeposit",
      "description": "Swaps an amount of an asset to another and deposits the new asset amount on behalf of the user without using a flash loan. This method can be used when the temporary transfer of the collateral asset to this contract does not affect the user position. The user should give this contract allowance to pull the ATokens in order to withdraw the underlying asset and perform the swap.",
      "parameterDecorators": [
        {
          "name": "assetToSwapFromList",
          "description": "List of addresses of the underlying asset to be swap from.",
          "recommendedTypes": []
        },
        {
          "name": "assetToSwapToList",
          "description": "List of addresses of the underlying asset to be swap to and deposited.",
          "recommendedTypes": []
        },
        {
          "name": "amountToSwapList",
          "description": "List of amounts to be swapped. If the amount exceeds the balance, the total balance is used for the swap.",
          "recommendedTypes": []
        },
        {
          "name": "minAmountsToReceive",
          "description": "List of min amounts to be received from the swap.",
          "recommendedTypes": []
        },
        {
          "name": "permitParams",
          "description": "List of struct containing the permit signatures uint256 permitAmount Amount for the permit signature uint256 deadline Deadline for the permit signature uint8 v param for the permit signature bytes32 r param for the permit signature bytes32 s param for the permit signature.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "name": "useEthPath",
          "description": "true if the swap needs to occur using ETH in the routing, false otherwise.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}