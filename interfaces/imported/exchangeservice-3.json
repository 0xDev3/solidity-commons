{"schema":"../schema.json","tags":[],"name":"ExchangeService","description":"","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted every time the contract gets upgraded.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"_getPriceOf(address)","name":"_getPriceOf","description":"Returns the price (6 decimals precision) of a given token, ultimately provided by the Witnet oracle sidechain to Celo Alfajores.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_lastPrice","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"aggregateTotals(address,uint256)","name":"aggregateTotals","description":"Aggregates the fixed, variable and total amount of Nylon a person would receive. Requirements: - the token address of either the cUSD or cEUR. - `amount`, factor 10**18 (ether). Returns: - `fixedAmount`, always half of the input amount - `variableAmount`, depends on the exchange rates - `totalAmount`, fixed + variable amounts.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"fixedAmount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"variableAmount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"totalAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"evaluatePrice(address)","name":"evaluatePrice","description":"Evaluates the price (6 decimals precision) of either the cUSD or cEUR. Additionally, the function will provide the actual nylon price. Returns: - `price` (exchange rate) of either USD/EUR or EUR/USD - `nylonPrice`, either Nylon/EUR or Nylon/USD.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"price","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"nylonPrice","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"exchange(address,uint256)","name":"exchange","description":"An x-amount of either cUSD or cEUR is sent to the exchange service. The exchange will then send from its own reserves a fixed amount (received token) and a variable amount (other token) to a basket service. In return the sender will receive a total (fixed + variable) amount Nylon from the basket service. Requirements: - the token address of either the cUSD or cEUR. - `amount`, factor 10**18 (ether). - price feed related to the token must exist on the exchange. - sufficient token balance of cUSD or cEUR by the exchange service. - sufficient token balance of the sender. {exchange} is callable by anyone.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"witnetPriceRouter()","name":"witnetPriceRouter","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}