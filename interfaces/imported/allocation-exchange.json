{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "AllocationExchange",
  "description": "Allocation Exchange. This contract holds tokens that anyone with a voucher signed by the authority can redeem. The contract validates if the voucher presented is valid and then sends tokens to the Staking contract by calling the collect() function passing the voucher allocationID. The contract enforces that only one voucher for an allocationID can be redeemed. Only governance can change the authority.",
  "eventDecorators": [
    {
      "signature": "AllocationRedeemed(address,uint256)",
      "name": "AllocationRedeemed",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "allocationID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AuthoritySet(address)",
      "name": "AuthoritySet",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "representing the address of the upgraded implementation.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewOwnership(address,address)",
      "name": "NewOwnership",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewPendingOwnership(address,address)",
      "name": "NewPendingOwnership",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TokensWithdrawn(address,uint256)",
      "name": "TokensWithdrawn",
      "description": "An event emitted when a vote has been cast on a proposal. This event will be emitted every time the implementation gets upgraded.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "Admin function for pending governor to accept role and update governor. This function must called by the pending governor.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "allocationsRedeemed(address)",
      "name": "allocationsRedeemed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "approveAll()",
      "name": "approveAll",
      "description": "Approve the staking contract to pull any amount of tokens from this contract. Increased gas efficiency instead of approving on each voucher redeem.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authority()",
      "name": "authority",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "governor()",
      "name": "governor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingGovernor()",
      "name": "pendingGovernor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeem(tuple(address,uint256,bytes))",
      "name": "redeem",
      "description": "Redeem a voucher signed by the authority. No voucher double spending is allowed. The voucher must be signed using an Ethereum signed message.",
      "parameterDecorators": [
        {
          "name": "_voucher",
          "description": "Voucher data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "allocationID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "signature",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemMany(tuple(address,uint256,bytes)[])",
      "name": "redeemMany",
      "description": "Redeem multiple vouchers. Each voucher must be signed using an Ethereum signed message.",
      "parameterDecorators": [
        {
          "name": "_vouchers",
          "description": "An array of vouchers.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "allocationID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "signature",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAuthority(address)",
      "name": "setAuthority",
      "description": "Set the authority allowed to sign vouchers. Only the governor can set the authority.",
      "parameterDecorators": [
        {
          "name": "_authority",
          "description": "Address of the signing authority.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Admin function to begin change of governor. The `_newGovernor` must call `acceptOwnership` to finalize the transfer.",
      "parameterDecorators": [
        {
          "name": "_newGovernor",
          "description": "Address of new `governor`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(address,uint256)",
      "name": "withdraw",
      "description": "Withdraw tokens held in the contract. Only the governor can withdraw.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "Destination to send the tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount of tokens to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}