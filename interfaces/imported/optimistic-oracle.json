{
  "schema": "../schema.json",
  "tags": [
    "oracles"
  ],
  "name": "OptimisticOracleV2",
  "description": "Optimistic Oracle. Pre-DVM escalation contract that allows faster settlement.",
  "eventDecorators": [
    {
      "signature": "DisputePrice(address,address,address,bytes32,uint256,bytes,int256)",
      "name": "DisputePrice",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "disputer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ancillaryData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proposedPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposePrice(address,address,bytes32,uint256,bytes,int256,uint256,address)",
      "name": "ProposePrice",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ancillaryData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proposedPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "expirationTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "currency",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RequestPrice(address,bytes32,uint256,bytes,address,uint256,uint256)",
      "name": "RequestPrice",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ancillaryData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "currency",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "finalFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Settle(address,address,address,bytes32,uint256,bytes,int256,uint256)",
      "name": "Settle",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "disputer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ancillaryData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "payout",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "OO_ANCILLARY_DATA_LIMIT()",
      "name": "OO_ANCILLARY_DATA_LIMIT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "TOO_EARLY_RESPONSE()",
      "name": "TOO_EARLY_RESPONSE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ancillaryBytesLimit()",
      "name": "ancillaryBytesLimit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "defaultLiveness()",
      "name": "defaultLiveness",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "disputePrice(address,bytes32,uint256,bytes)",
      "name": "disputePrice",
      "description": "Disputes a price value for an existing price request with an active proposal.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disputePriceFor(address,address,bytes32,uint256,bytes)",
      "name": "disputePriceFor",
      "description": "Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.",
      "parameterDecorators": [
        {
          "name": "disputer",
          "description": "address to set as the disputer.",
          "recommendedTypes": []
        },
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "finder()",
      "name": "finder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentTime()",
      "name": "getCurrentTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRequest(address,bytes32,uint256,bytes)",
      "name": "getRequest",
      "description": "Gets the current data structure containing all information about a price request.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the Request data structure.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getState(address,bytes32,uint256,bytes)",
      "name": "getState",
      "description": "Computes the current state of a price request. See the State enum for more details.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the State.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasPrice(address,bytes32,uint256,bytes)",
      "name": "hasPrice",
      "description": "Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "boolean indicating true if price exists and false if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposePrice(address,bytes32,uint256,bytes,int256)",
      "name": "proposePrice",
      "description": "Proposes a price value for an existing price request.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "proposedPrice",
          "description": "price being proposed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposePriceFor(address,address,bytes32,uint256,bytes,int256)",
      "name": "proposePriceFor",
      "description": "Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.",
      "parameterDecorators": [
        {
          "name": "proposer",
          "description": "address to set as the proposer.",
          "recommendedTypes": []
        },
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "proposedPrice",
          "description": "price being proposed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestPrice(bytes32,uint256,bytes,address,uint256)",
      "name": "requestPrice",
      "description": "Requests a new price.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "price identifier being requested.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data representing additional args being passed with the price request.",
          "recommendedTypes": []
        },
        {
          "name": "currency",
          "description": "ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.",
          "recommendedTypes": []
        },
        {
          "name": "reward",
          "description": "reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0, which could make sense if the contract requests and proposes the value in the same call or provides its own reward system.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "default bond (final fee) + final fee that the proposer and disputer will be required to pay. This can be changed with a subsequent call to setBond().",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requests(bytes32)",
      "name": "requests",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "proposer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "disputer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "currency",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "settled",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "requestSettings",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple"
        },
        {
          "name": "proposedPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        },
        {
          "name": "resolvedPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        },
        {
          "name": "expirationTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "reward",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "finalFee",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setBond(bytes32,uint256,bytes,uint256)",
      "name": "setBond",
      "description": "Set the proposal bond associated with a price request.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "bond",
          "description": "custom bond amount to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalBond",
          "description": "new bond + final fee that the proposer and disputer will be required to pay. This can be changed again with a subsequent call to setBond().",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCallbacks(bytes32,uint256,bytes,bool,bool,bool)",
      "name": "setCallbacks",
      "description": "Sets which callbacks should be enabled for the request.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "callbackOnPriceProposed",
          "description": "whether to enable the callback onPriceProposed.",
          "recommendedTypes": []
        },
        {
          "name": "callbackOnPriceDisputed",
          "description": "whether to enable the callback onPriceDisputed.",
          "recommendedTypes": []
        },
        {
          "name": "callbackOnPriceSettled",
          "description": "whether to enable the callback onPriceSettled.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCurrentTime(uint256)",
      "name": "setCurrentTime",
      "description": "Sets the current time. Will revert if not running in test mode.",
      "parameterDecorators": [
        {
          "name": "time",
          "description": "timestamp to set current Testable time to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCustomLiveness(bytes32,uint256,bytes,uint256)",
      "name": "setCustomLiveness",
      "description": "Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "customLiveness",
          "description": "new custom liveness.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setEventBased(bytes32,uint256,bytes)",
      "name": "setEventBased",
      "description": "Sets the request to be an \"event-based\" request. Calling this method has a few impacts on the request: 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated with the request. 2. The proposer cannot propose the \"too early\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who prematurely proposes a response loses their bond. 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to the requesting contract.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRefundOnDispute(bytes32,uint256,bytes)",
      "name": "setRefundOnDispute",
      "description": "Sets the request to refund the reward if the proposal is disputed. This can help to \"hedge\" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settle(address,bytes32,uint256,bytes)",
      "name": "settle",
      "description": "Attempts to settle an outstanding price request. Will revert if it isn't settleable.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "payout",
          "description": "the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes the returned bonds as well as additional rewards.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settleAndGetPrice(bytes32,uint256,bytes)",
      "name": "settleAndGetPrice",
      "description": "Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "price identifier to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "timestamp",
          "description": "timestamp to identify the existing request.",
          "recommendedTypes": []
        },
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "resolved price.",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stampAncillaryData(bytes,address)",
      "name": "stampAncillaryData",
      "description": "Generates stamped ancillary data in the format that it would be used in the case of a price dispute.",
      "parameterDecorators": [
        {
          "name": "ancillaryData",
          "description": "ancillary data of the price being requested.",
          "recommendedTypes": []
        },
        {
          "name": "requester",
          "description": "sender of the initial price request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the stamped ancillary bytes.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "timerAddress()",
      "name": "timerAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}