{
  "schema": "../schema.json",
  "tags": [],
  "name": "ETARegistry",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AdminAdded(address)",
      "name": "AdminAdded",
      "description": "",
      "parameterDecorators": [
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AdminRemoved(address)",
      "name": "AdminRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "BadgeIssued(address,uint8,uint8)",
      "name": "BadgeIssued",
      "description": "",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "networkId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "badgeLevel",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CustodianAdded(uint8,address)",
      "name": "CustodianAdded",
      "description": "",
      "parameterDecorators": [
        {
          "name": "networkId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "custodian",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CustodianRemoved(uint8,address)",
      "name": "CustodianRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "networkId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "custodian",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "EntryProcessed(address,uint8,bool)",
      "name": "EntryProcessed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "networkId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EntrySubmitted(address,uint8)",
      "name": "EntrySubmitted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "networkId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addAdministrator(address)",
      "name": "addAdministrator",
      "description": "Give an address the administrator role.",
      "parameterDecorators": [
        {
          "name": "_administrator",
          "description": "The address to be given the administrator role * Manage administrators onlyOwner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addBadge(address,uint8,uint8,bytes32,uint256,uint256)",
      "name": "addBadge",
      "description": "Add a badge level for a particular contract.",
      "parameterDecorators": [
        {
          "name": "_contract",
          "description": "An address of the contract that will be rewarded the badge.",
          "recommendedTypes": []
        },
        {
          "name": "_networkId",
          "description": "Integer representing which chain the contract was deployed on.",
          "recommendedTypes": []
        },
        {
          "name": "_level",
          "description": "The integer representing the badge level.",
          "recommendedTypes": []
        },
        {
          "name": "_reportSwarmHash",
          "description": "The swarm multihash to retrieve the report generated from the audit.",
          "recommendedTypes": []
        },
        {
          "name": "_issued",
          "description": "The datetime of the submitted badge level.",
          "recommendedTypes": []
        },
        {
          "name": "_expiry",
          "description": "The datetime of when the badge is expired and no longer valid * Add new badge For custodian only for level 1 or rightful delegate only for levels > 1 Expiry 0 on level 1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addCustodian(uint8,address)",
      "name": "addCustodian",
      "description": "Give an address the custodian role.",
      "parameterDecorators": [
        {
          "name": "_networkId",
          "description": "Integer representing which chain the contract was deployed on.",
          "recommendedTypes": []
        },
        {
          "name": "_custodianAddress",
          "description": "The address to be given the custodian role * Manage custodians - can be multiple custodians that process new entries onlyOwner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addDelegate(uint8,address,uint8,address)",
      "name": "addDelegate",
      "description": "Give an address the delegate role.",
      "parameterDecorators": [
        {
          "name": "_networkId",
          "description": "Integer representing which chain the contract was deployed on.",
          "recommendedTypes": []
        },
        {
          "name": "_contract",
          "description": "The address of the contract that the delegate will be responsible for.",
          "recommendedTypes": []
        },
        {
          "name": "_level",
          "description": "The integer representing the badge level.",
          "recommendedTypes": []
        },
        {
          "name": "_delegate",
          "description": "The address to be given the delegate role * Add Delegate (Only for badge level > 1).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addScanResults(uint256,address,uint8,bytes32,bytes32,uint256,bool)",
      "name": "addScanResults",
      "description": "Add the scan results for a given contract.",
      "parameterDecorators": [
        {
          "name": "_scanTime",
          "description": "The datetime of the submitted report.",
          "recommendedTypes": []
        },
        {
          "name": "_contract",
          "description": "An address of the contract that will be responsible rewarded the badge.",
          "recommendedTypes": []
        },
        {
          "name": "_networkId",
          "description": "Integer representing which chain the contract was deployed on.",
          "recommendedTypes": []
        },
        {
          "name": "_bytecodeHash",
          "description": "Given contracts runtime bytecode hash.",
          "recommendedTypes": []
        },
        {
          "name": "_reportSwarmHash",
          "description": "The swarm multihash to retrieve the report generated from the audit.",
          "recommendedTypes": []
        },
        {
          "name": "_issued",
          "description": "The datetime of the submitted scan results.",
          "recommendedTypes": []
        },
        {
          "name": "_success",
          "description": "A boolean flag representing the success of the scan meeting a level's security criteria * Add new scan result custodianOnly Mandatory update of Entry.processed to true Create new badge 1 of success remove from pending entries If success, add hash to validatedContracts.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "administrators(address)",
      "name": "administrators",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "badges(uint8,address,uint8)",
      "name": "badges",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "badgeLevel",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "badgeIssueTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "badgeExpiryTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "networkId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "delegateAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "reportSwarmHash",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "custodians(uint8,address)",
      "name": "custodians",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delegates(uint8,address,uint8)",
      "name": "delegates",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deleteAdministrator(address)",
      "name": "deleteAdministrator",
      "description": "Revoke the administrator role from an address.",
      "parameterDecorators": [
        {
          "name": "_administrator",
          "description": "The administrator who's role will be revoked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deleteCustodian(uint8,address)",
      "name": "deleteCustodian",
      "description": "Revoke custodian role from an existing address.",
      "parameterDecorators": [
        {
          "name": "_networkId",
          "description": "Integer representing which chain the contract was deployed on.",
          "recommendedTypes": []
        },
        {
          "name": "_custodianAddress",
          "description": "Custodian address to be removed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deleteDelegate(uint8,address,uint8)",
      "name": "deleteDelegate",
      "description": "Revoke the delegate role of an address for a given contract.",
      "parameterDecorators": [
        {
          "name": "_networkId",
          "description": "Integer representing which chain the contract was deployed on.",
          "recommendedTypes": []
        },
        {
          "name": "_contract",
          "description": "The address of the contract that the delegate was responsible for.",
          "recommendedTypes": []
        },
        {
          "name": "_level",
          "description": "The integer representing the badge level * onlyAdministrators Only possible if badge has not issued yet for this level (?).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "entries(uint8,address)",
      "name": "entries",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "issuer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "networkId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "swarmHash",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "solcVersion",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "optimized",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "optimizationRuns",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "licenceModel",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "processed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAnalyzedContract(bytes32,uint8)",
      "name": "getAnalyzedContract",
      "description": "Retrieve analyzed smart contract.",
      "parameterDecorators": [
        {
          "name": "_bytecodeHash",
          "description": "Hashed bytecode of the scanned contract.",
          "recommendedTypes": []
        },
        {
          "name": "_networkId",
          "description": "Integer representing which chain the contract was deployed on * Custodian only - return scan at address(0) if not scanned already.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "scanTime",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "contractAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "networkId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint8"
            },
            {
              "name": "custodianAddress",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "reportSwarmHash",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "success",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingEntries(bytes32)",
      "name": "pendingEntries",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeBadge(address,uint8,uint8)",
      "name": "revokeBadge",
      "description": "Revoke a badge level.",
      "parameterDecorators": [
        {
          "name": "_contract",
          "description": "An address of the contract that will have its badge level revoked.",
          "recommendedTypes": []
        },
        {
          "name": "_networkId",
          "description": "Integer representing which chain the contract was deployed on.",
          "recommendedTypes": []
        },
        {
          "name": "_level",
          "description": "The integer representing the badge level * Revoke badge // Safety measure - TBD onlyAdministrators.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "scanResults(uint8,address)",
      "name": "scanResults",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "scanTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "networkId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "custodianAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "reportSwarmHash",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submitEntry(address,uint8,bytes32,bytes32,bool,uint8,bytes32)",
      "name": "submitEntry",
      "description": "Submit a contract for review.",
      "parameterDecorators": [
        {
          "name": "_contract",
          "description": "The address of the contract that will be reviewed upon submission.",
          "recommendedTypes": []
        },
        {
          "name": "_networkId",
          "description": "Integer representing which chain the contract was deployed on.",
          "recommendedTypes": []
        },
        {
          "name": "_swarmHash",
          "description": "The swarm multihash to retrieve the contract source code.",
          "recommendedTypes": []
        },
        {
          "name": "_solcVersion",
          "description": "A keccack256 hash of the solidity compiler version i.e keccack256('0.6.0').",
          "recommendedTypes": []
        },
        {
          "name": "_optimized",
          "description": "Flag used if the optimizer was run during compilation.",
          "recommendedTypes": []
        },
        {
          "name": "_optimizationRuns",
          "description": "Number of runs used if above is set to true.",
          "recommendedTypes": []
        },
        {
          "name": "_licenceModel",
          "description": "A keccack256 hash of SPDX licence identifier (https://spdx.dev/) * Submit new entry and emit new EntrySubmitted event issuer = msg.sender see Entry struct for expected values add entry to pendingEntries.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateDelegate(uint8,address,uint8,address)",
      "name": "updateDelegate",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_networkId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_contract",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_level",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_newDelegate",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}