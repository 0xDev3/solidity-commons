{
  "schema": "../schema.json",
  "tags": [],
  "name": "Slot_Machine",
  "description": "Lucky Duckys - a betting platform. All function calls are currently implemented without side effects. Simple and fun contract created to give users the opportunity to win some Eth.",
  "eventDecorators": [
    {
      "signature": "BetPlaced(address,uint256,uint256)",
      "name": "BetPlaced",
      "description": "",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "Id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Deposit(address,uint256,uint256)",
      "name": "Deposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "Id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "DepositBreaker(bool,bool)",
      "name": "DepositBreaker",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Message(address,string,uint256,uint256,uint256,uint256)",
      "name": "Message",
      "description": "",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "message",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "guess",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "random_number",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "winnings",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MyGuess(address,uint256)",
      "name": "MyGuess",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewPlayer(address,uint256)",
      "name": "NewPlayer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UndoneBets(address,uint256,uint256)",
      "name": "UndoneBets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "Id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Winner(address,uint256)",
      "name": "Winner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256,uint256)",
      "name": "Withdraw",
      "description": "",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "Id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WithdrawalBreaker(bool,bool)",
      "name": "WithdrawalBreaker",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "deposit()",
      "name": "deposit",
      "description": "Use this to deposit some ETH to contract and increase your balance. depositsEnabled - whilst enableDeposits is true this function will remain active.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositsCircuitBreaker()",
      "name": "depositsCircuitBreaker",
      "description": "circuit breaker to disable the deposit function.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "destroy()",
      "name": "destroy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getBalance()",
      "name": "getBalance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRandomNumber(uint256)",
      "name": "getRandomNumber",
      "description": "Use this to dynamically undo placed bets. modifier onlyPlayer allows only active players to call this function.",
      "parameterDecorators": [
        {
          "name": "_userProvidedSeed",
          "description": "is the value amount to remove from placedBets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "placeBet(uint256)",
      "name": "placeBet",
      "description": "Use this to place bets. modifier onlyPlayer allows only active players to call this function.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "is the value amount to place a bet with.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "player(address)",
      "name": "player",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "playerId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "balance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "placedBets",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "winRatio",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "isPlayer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "playerCount()",
      "name": "playerCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "randomNumberGen()",
      "name": "randomNumberGen",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "undoBet(uint256)",
      "name": "undoBet",
      "description": "Use this to dynamically undo placed bets. modifier onlyPlayer allows only active players to call this function.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "is the value amount to remove from placedBets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAll(address)",
      "name": "withdrawAll",
      "description": "Use this to withdraw all funds from the contract.. Not sure we actually need the playerCount state variable or the struct variable playerId.modifier onlyPlayer allows only active players to call withdrawal methods.modifier withdrawalsEnabled - whilst enableWithdrawals is true this function will remain active.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "is the EOA or Contract funds are to be withdrawn to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawBalance(address,uint256)",
      "name": "withdrawBalance",
      "description": "Use this to withdraw balance from the contract that correspond to the value or less than the players balance. Not sure we actually need the playerCount state variable or the struct variable playerId.modifier onlyPlayer allows only active players to call withdrawal methods.modifier withdrawalsEnabled - whilst enableWithdrawals is true this function will remain active.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "is the EOA or Contract funds are to be withdrawn to.",
          "recommendedTypes": []
        },
        {
          "name": "_withdrawalAmount",
          "description": "is the value amount to be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawalCircuitBreaker()",
      "name": "withdrawalCircuitBreaker",
      "description": "circuit breaker to disable the withdraw function.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}