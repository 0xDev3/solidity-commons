{"schema":"../schema.json","tags":[],"name":"Counter","description":"","eventDecorators":[{"signature":"RelayHubChanged(address,address)","name":"RelayHubChanged","description":"Event for token purchase logging.","parameterDecorators":[{"name":"oldRelayHub","description":"","recommendedTypes":[],"indexed":true},{"name":"newRelayHub","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)","name":"acceptRelayedCall","description":"Called by {IRelayHub} to validate if this recipient accepts being charged for a relayed call. Note that the recipient will be charged regardless of the execution result of the relayed call (i.e. if it reverts or not). The relay request was originated by `from` and will be served by `relay`. `encodedFunction` is the relayed call calldata, so its first four bytes are the function selector. The relayed call will be forwarded `gasLimit` gas, and the transaction executed with a gas price of at least `gasPrice`. ``relay``'s fee is `transactionFee`, and the recipient will be charged at most `maxPossibleCharge` (in wei). `nonce` is the sender's (`from`) nonce for replay attack protection in {IRelayHub}, and `approvalData` is a optional parameter that can be used to hold a signature over all or some of the previous values. Returns a tuple, where the first value is used to indicate approval (0) or rejection (custom non-zero error code, values 1 to 10 are reserved) and the second one is data to be passed to the other {IRelayRecipient} functions. {acceptRelayedCall} is called with 50k gas: if it runs out during execution, the request will be considered rejected. A regular revert will also trigger a rejection.","parameterDecorators":[{"name":"relay","description":"","recommendedTypes":[]},{"name":"from","description":"","recommendedTypes":[]},{"name":"encodedFunction","description":"","recommendedTypes":[]},{"name":"transactionFee","description":"","recommendedTypes":[]},{"name":"gasPrice","description":"","recommendedTypes":[]},{"name":"gasLimit","description":"","recommendedTypes":[]},{"name":"nonce","description":"","recommendedTypes":[]},{"name":"approvalData","description":"","recommendedTypes":[]},{"name":"maxPossibleCharge","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"getHubAddr()","name":"getHubAddr","description":"Returns the address of the {IRelayHub} contract for this recipient.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"increase()","name":"increase","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"postRelayedCall(bytes,bool,uint256,bytes32)","name":"postRelayedCall","description":"See `IRelayRecipient.postRelayedCall`. This function should not be overriden directly, use `_postRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.","parameterDecorators":[{"name":"context","description":"","recommendedTypes":[]},{"name":"success","description":"","recommendedTypes":[]},{"name":"actualCharge","description":"","recommendedTypes":[]},{"name":"preRetVal","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"preRelayedCall(bytes)","name":"preRelayedCall","description":"See `IRelayRecipient.preRelayedCall`. This function should not be overriden directly, use `_preRelayedCall` instead. * Requirements: - the caller must be the `RelayHub` contract.","parameterDecorators":[{"name":"context","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":false},{"signature":"relayHubVersion()","name":"relayHubVersion","description":"Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"value()","name":"value","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}