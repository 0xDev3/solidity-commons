{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "curve finance"
  ],
  "name": "BondingCurveFactory",
  "description": "Bonding Curve Factory. This curve contract enables an IBCO (Initial Bonding Curve Offering) as a mechanism to launch a token into the open market without having to raise the funds in a traditional manner. This product is a beta. Use at your own risk.",
  "eventDecorators": [
    {
      "signature": "factorySetUp(address,address)",
      "name": "factorySetUp",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "curve",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "market",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "marketCreated(address,address,string)",
      "name": "marketCreated",
      "description": "event Withdrawal emit on every SafeWithdraw.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "activeCurve()",
      "name": "activeCurve",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "activeMarketTransition()",
      "name": "activeMarketTransition",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createMarket(uint256[3],string,string,address,uint256,uint256,uint256)",
      "name": "createMarket",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_curveParameters",
          "description": ": The curve \"settings\" that will be used in the curve instance in order to determine the prices of the token. For more information please see the curve contract docs.",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": ": The name of the token.",
          "recommendedTypes": []
        },
        {
          "name": "_symbol",
          "description": ": The symbol for the token.",
          "recommendedTypes": []
        },
        {
          "name": "_underlyingCollateral",
          "description": ": The addresss of the underlying collateral for the tokens. I.e the currency for the price of the token. Recomended to use a stable coin such as DAI to ensure a stable price for your token.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenThreshold",
          "description": ": The transition threshold for the token in tokens. As the value of the tokens is determanistic (with the bonding curve enforcing a price) the threshold for when the token can move to the free market can be expressed in tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_minimumTokenThreshold",
          "description": ": This minimum token threshold is a safty catch for it the threshold is not met before expiry, this min threshold can still force the market into uniswap. If you only want to move acress at your threshold, simply set this vaule to be the same as the threshold.",
          "recommendedTypes": []
        },
        {
          "name": "_thresholdTimeout",
          "description": ": Once this timeout is reached the curve will check against the min threshold for transition. When this timeout is reached, the curve will operate as normal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address: The address of the new token.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deployedMarkets(address,uint256)",
      "name": "deployedMarkets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDeployedMarkets(address)",
      "name": "getDeployedMarkets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": ": The address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address[]: The addresses of any markets the user has deployed through this factory.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFactorySetUp()",
      "name": "getFactorySetUp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "uniswapRouter()",
      "name": "uniswapRouter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}