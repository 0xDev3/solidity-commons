{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "TokenFactory",
  "description": "",
  "eventDecorators": [
    {
      "signature": "NewTokenDeployed(address,address,address)",
      "name": "NewTokenDeployed",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "issuer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proxy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OperatorsContractChanged(address,address)",
      "name": "OperatorsContractChanged",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OperatorsContractPending(address,address)",
      "name": "OperatorsContractPending",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operatorsAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpdatedBlockerOperators(address)",
      "name": "UpdatedBlockerOperators",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "blockerOperators",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpdatedImplementation(address)",
      "name": "UpdatedImplementation",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpdatedProxyAdmin(address)",
      "name": "UpdatedProxyAdmin",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "proxyAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpdatedTraderOperators(address)",
      "name": "UpdatedTraderOperators",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "traderOperators",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpdatedWhitelist(address)",
      "name": "UpdatedWhitelist",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "whitelist",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "blockerOperators()",
      "name": "blockerOperators",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "confirmOperatorsContract()",
      "name": "confirmOperatorsContract",
      "description": "The function should be called from new operators contract by admin to insure that operatorsPending address is the real contract address.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getOperatorsContract()",
      "name": "getOperatorsContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOperatorsPending()",
      "name": "getOperatorsPending",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "implementation()",
      "name": "implementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with confirmation through the operators contract.",
      "parameterDecorators": [
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address,address,address,address,address,address)",
      "name": "initialize",
      "description": "Initialization instead of constructor, called once. Sets BaseOperators contract through pasuable contract resulting in use of Operatorable contract within this contract.",
      "parameterDecorators": [
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_traderOperators",
          "description": "TraderOperators contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_blockerOperators",
          "description": "BlockerOperators contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "Whitelist contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_implementation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_proxyAdmin",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isAdmin(address)",
      "name": "isAdmin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAdminOrSystem(address)",
      "name": "isAdminOrSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isInitialized()",
      "name": "isInitialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isMultisig(address)",
      "name": "isMultisig",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_contract",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOperator(address)",
      "name": "isOperator",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOperatorOrSystem(address)",
      "name": "isOperatorOrSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRelay(address)",
      "name": "isRelay",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSystem(address)",
      "name": "isSystem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newToken(string,string,uint8,bytes4,string,address,address)",
      "name": "newToken",
      "description": "allows operator, system or relay to launch a new token with a new name, symbol, decimals, category, and issuer. Defaults to using whitelist stored in this contract. If _whitelist is address(0), else it will use _whitelist as the param to pass into the new token's constructor upon deployment.",
      "parameterDecorators": [
        {
          "name": "_name",
          "description": "string.",
          "recommendedTypes": []
        },
        {
          "name": "_symbol",
          "description": "string.",
          "recommendedTypes": []
        },
        {
          "name": "_decimals",
          "description": "uint8.",
          "recommendedTypes": []
        },
        {
          "name": "_category",
          "description": "bytes4.",
          "recommendedTypes": []
        },
        {
          "name": "_class",
          "description": "string.",
          "recommendedTypes": []
        },
        {
          "name": "_issuer",
          "description": "address.",
          "recommendedTypes": []
        },
        {
          "name": "_whitelist",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proxyAdmin()",
      "name": "proxyAdmin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setOperatorsContract(address)",
      "name": "setOperatorsContract",
      "description": "Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr) where addr is the address of current contract instance. This is done to prevent the case when the new contract address is broken and control of the contract can be lost in such case.",
      "parameterDecorators": [
        {
          "name": "_baseOperators",
          "description": "BaseOperators contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "traderOperators()",
      "name": "traderOperators",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateBlockerOperators(address)",
      "name": "updateBlockerOperators",
      "description": "updates the blockerOperators contract address to be used for future generated tokens.",
      "parameterDecorators": [
        {
          "name": "_blockerOperators",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateImplementation(address)",
      "name": "updateImplementation",
      "description": "update the implementation address used when deploying proxy contracts.",
      "parameterDecorators": [
        {
          "name": "_implementation",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateProxyAdmin(address)",
      "name": "updateProxyAdmin",
      "description": "update the proxy admin address used when deploying proxy contracts.",
      "parameterDecorators": [
        {
          "name": "_proxyAdmin",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateTraderOperators(address)",
      "name": "updateTraderOperators",
      "description": "updates the traderOperators contract address to be used for future generated tokens.",
      "parameterDecorators": [
        {
          "name": "_traderOperators",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateWhitelist(address)",
      "name": "updateWhitelist",
      "description": "updates the whitelist to be used for future generated tokens.",
      "parameterDecorators": [
        {
          "name": "_whitelist",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelist()",
      "name": "whitelist",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}