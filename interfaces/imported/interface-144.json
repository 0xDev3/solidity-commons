{
  "schema": "../schema.json",
  "tags": [],
  "name": "LegoGraph",
  "description": "A Lego-like brick construct declaration/storage implementation. We use graphs (or poly-trees) to store the state of brick connections.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "addBrick(uint256,uint256,uint256,uint256,uint256[])",
      "name": "addBrick",
      "description": "Add a new brick to the graph. We have to specify the graphID and the baseLegoID (which is the graph's tip where we want to attach the new brick)rotation is a parameter specified by the view implementation.",
      "parameterDecorators": [
        {
          "name": "graphID",
          "description": "the ID of the graph where we want to attach.",
          "recommendedTypes": []
        },
        {
          "name": "baseLegoID",
          "description": "the ID of the brick to which we want to attach.",
          "recommendedTypes": []
        },
        {
          "name": "legoID",
          "description": "the ID of the brick we want to attach.",
          "recommendedTypes": []
        },
        {
          "name": "rotation",
          "description": "integer that specifies the orientation of the lego once connected. this is not checked on chain.",
          "recommendedTypes": []
        },
        {
          "name": "edgesToUse",
          "description": "which edges (or connection points) to use for the connection. For example, if we want to attach a 2x3x1 brick to a 2x2x1 base, we have 6 connection points available: ----------- | 0 2 4 | (top view) | 1 3 5 | ----------- we could specify we want to use edges 0, 1, 2, and 3 and the new brick would sit on top of the base brick using the left-most 4 connection points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeController(address)",
      "name": "changeController",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_newController",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "create(uint256,uint256)",
      "name": "create",
      "description": "Create a new graph. We basically create a new node and set it as the root of this graph.",
      "parameterDecorators": [
        {
          "name": "legoID",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "rotation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "graphID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getEdges(uint256,uint256)",
      "name": "getEdges",
      "description": "",
      "parameterDecorators": [
        {
          "name": "graphID",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "legoID",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "edges",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "to",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "to_id",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "connectionsUsed",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256[]"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "graphs(uint256)",
      "name": "graphs",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "rootID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "legoContract()",
      "name": "legoContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nodes(bytes32)",
      "name": "nodes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "legoID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rotation",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}