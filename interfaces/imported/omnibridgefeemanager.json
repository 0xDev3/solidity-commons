{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "bridges"
  ],
  "name": "OmnibridgeFeeManager",
  "description": "OmnibridgeFeeManager. Implements the logic to distribute fees from the Omnibridge mediator contract operations. The fees are distributed in the form of ERC20/ERC677 tokens to the list of reward addresses.",
  "eventDecorators": [
    {
      "signature": "FeeUpdated(bytes32,address,uint256)",
      "name": "FeeUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "feeType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "FOREIGN_TO_HOME_FEE()",
      "name": "FOREIGN_TO_HOME_FEE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "HOME_TO_FOREIGN_FEE()",
      "name": "HOME_TO_FOREIGN_FEE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addRewardAddress(address)",
      "name": "addRewardAddress",
      "description": "Adds a new address to the list of accounts to receive rewards for the operations. Only the owner can call this method.",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "new reward address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateFee(bytes32,address,uint256)",
      "name": "calculateFee",
      "description": "Calculates the amount of fee to pay for the value of the particular fee type.",
      "parameterDecorators": [
        {
          "name": "_feeType",
          "description": "type of the updated fee, can be one of [HOME_TO_FOREIGN_FEE, FOREIGN_TO_HOME_FEE].",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "address of the token contract for which fee should apply, 0x00..00 describes the initial fee for newly created tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "bridged value, for which fee should be evaluated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of fee to be subtracted from the transferred value.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "distributeFee(address)",
      "name": "distributeFee",
      "description": "Distributes the fee proportionally between registered reward addresses.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the token contract for which fee should be distributed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getFee(bytes32,address)",
      "name": "getFee",
      "description": "Retrieves the value for the particular fee type.",
      "parameterDecorators": [
        {
          "name": "_feeType",
          "description": "type of the updated fee, can be one of [HOME_TO_FOREIGN_FEE, FOREIGN_TO_HOME_FEE].",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "address of the token contract for which fee should apply, 0x00..00 describes the initial fee for newly created tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "fee value associated with the requested fee type.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getModuleInterfacesVersion()",
      "name": "getModuleInterfacesVersion",
      "description": "Tells the module interface version that this contract supports.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "major",
          "description": "value of the version.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "minor",
          "description": "value of the version.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "patch",
          "description": "value of the version.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRewardAddress(address)",
      "name": "isRewardAddress",
      "description": "Tells if a given address is part of the reward address list.",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "address to check if it is part of the list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if the given address is in the list.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mediator()",
      "name": "mediator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeRewardAddress(address)",
      "name": "removeRewardAddress",
      "description": "Removes an address from the list of accounts to receive rewards for the operations. Only the owner can call this method. finds the element, swaps it with the last element, and then deletes it;.",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "to be removed. return boolean whether the element was found and deleted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewardAddressCount()",
      "name": "rewardAddressCount",
      "description": "Tells the number of registered reward receivers.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of addresses.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardAddressList()",
      "name": "rewardAddressList",
      "description": "Tells the list of registered reward receivers.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "list with all registered reward receivers.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setFee(bytes32,address,uint256)",
      "name": "setFee",
      "description": "Updates the value for the particular fee type. Only the owner can call this method.",
      "parameterDecorators": [
        {
          "name": "_feeType",
          "description": "type of the updated fee, can be one of [HOME_TO_FOREIGN_FEE, FOREIGN_TO_HOME_FEE].",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "address of the token contract for which fee should apply, 0x00..00 describes the initial fee for newly created tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_fee",
          "description": "new fee value, in percentage (1 ether == 10**18 == 100%).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Changes the owner of this contract.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "address of the new owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}