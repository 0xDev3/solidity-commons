{
  "schema": "../schema.json",
  "tags": [
    "oracles",
    "locking"
  ],
  "name": "FluxAggregator",
  "description": "The Prepaid Aggregator contract. Handles aggregating data pushed in from off-chain, and unlocks payment for oracles as they report. Oracles' submissions are gathered in rounds, with each round aggregating the submissions for each oracle into a single answer. The latest aggregated answer is exposed as well as historical answers and their updated at timestamp.",
  "eventDecorators": [
    {
      "signature": "AnswerUpdated(int256,uint256,uint256)",
      "name": "AnswerUpdated",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "current",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "roundId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updatedAt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AvailableFundsUpdated(uint256)",
      "name": "AvailableFundsUpdated",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewRound(uint256,address,uint256)",
      "name": "NewRound",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "roundId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "startedBy",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "startedAt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OracleAdminUpdateRequested(address,address,address)",
      "name": "OracleAdminUpdateRequested",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "oracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OracleAdminUpdated(address,address)",
      "name": "OracleAdminUpdated",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "oracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OraclePermissionsUpdated(address,bool)",
      "name": "OraclePermissionsUpdated",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "oracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "whitelisted",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferRequested(address,address)",
      "name": "OwnershipTransferRequested",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RequesterPermissionsSet(address,bool,uint32)",
      "name": "RequesterPermissionsSet",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "authorized",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "delay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoundDetailsUpdated(uint128,uint32,uint32,uint32,uint32)",
      "name": "RoundDetailsUpdated",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "paymentAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "minSubmissionCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "maxSubmissionCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "restartDelay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timeout",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubmissionReceived(int256,uint32,address)",
      "name": "SubmissionReceived",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "submission",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "round",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ValidatorUpdated(address,address)",
      "name": "ValidatorUpdated",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "previous",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "current",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "VoluntarySubmissionStatusUpdated(bool)",
      "name": "VoluntarySubmissionStatusUpdated",
      "description": "Emitted every time the contract gets upgraded.",
      "parameterDecorators": [
        {
          "name": "voluntarySubmissionStatus",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptAdmin(address)",
      "name": "acceptAdmin",
      "description": "accept the admin address transfer for an oracle.",
      "parameterDecorators": [
        {
          "name": "_oracle",
          "description": "is the address of the oracle whose admin is being transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "Allows an ownership transfer to be completed by the recipient.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addFunds(uint256)",
      "name": "addFunds",
      "description": "recommended call to add funds to aggregator for oracle payments(if enabled) if funds transferred directly instead, call the updateAvailableFunds method manually after transfer.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "the amount to transfer to aggregator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "allocatedFunds()",
      "name": "allocatedFunds",
      "description": "the amount of payment yet to be withdrawn by oracles.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "availableFunds()",
      "name": "availableFunds",
      "description": "the amount of future funding available to oracles the amount returned might be lower than the actual value.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bobaToken()",
      "name": "bobaToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeOracles(address[],address[],address[],uint32,uint32,uint32)",
      "name": "changeOracles",
      "description": "called by the owner to remove and add new oracles as well as update the round related parameters that pertain to total oracle count.",
      "parameterDecorators": [
        {
          "name": "_removed",
          "description": "is the list of addresses for the new Oracles being removed.",
          "recommendedTypes": []
        },
        {
          "name": "_added",
          "description": "is the list of addresses for the new Oracles being added.",
          "recommendedTypes": []
        },
        {
          "name": "_addedAdmins",
          "description": "is the admin addresses for the new respective _added list. Only this address is allowed to access the respective oracle's funds.",
          "recommendedTypes": []
        },
        {
          "name": "_minSubmissions",
          "description": "is the new minimum submission count for each round.",
          "recommendedTypes": []
        },
        {
          "name": "_maxSubmissions",
          "description": "is the new maximum submission count for each round.",
          "recommendedTypes": []
        },
        {
          "name": "_restartDelay",
          "description": "is the number of rounds an Oracle has to wait before they can initiate a round.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "decimals()",
      "name": "decimals",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "description()",
      "name": "description",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "flipVoluntarySubmissionsAllowed()",
      "name": "flipVoluntarySubmissionsAllowed",
      "description": "method to flip the voluntarySubmissions status.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAdmin(address)",
      "name": "getAdmin",
      "description": "get the admin address of an oracle.",
      "parameterDecorators": [
        {
          "name": "_oracle",
          "description": "is the address of the oracle whose admin is being queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAnswer(uint256)",
      "name": "getAnswer",
      "description": "get past rounds answers. #[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
      "parameterDecorators": [
        {
          "name": "_roundId",
          "description": "the round number to retrieve the answer for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOracles()",
      "name": "getOracles",
      "description": "returns an array of addresses containing the oracles on contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoundData(uint80)",
      "name": "getRoundData",
      "description": "get data about a round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that for in-progress rounds (i.e. rounds that haven't yet received maxSubmissions) answer and updatedAt may change between queries.",
      "parameterDecorators": [
        {
          "name": "_roundId",
          "description": "the round ID to retrieve the round data for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "roundId",
          "description": "is the round ID for which data was retrieved.",
          "recommendedTypes": [],
          "solidityType": "uint80"
        },
        {
          "name": "answer",
          "description": "is the answer for the given round.",
          "recommendedTypes": [],
          "solidityType": "int256"
        },
        {
          "name": "startedAt",
          "description": "is the timestamp when the round was started. This is 0 if the round hasn't been started yet.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "updatedAt",
          "description": "is the timestamp when the round last was updated (i.e. answer was last computed).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "answeredInRound",
          "description": "is the round ID of the round in which the answer was computed. answeredInRound may be smaller than roundId when the round timed out. answeredInRound is equal to roundId when the round didn't time out and was completed regularly.",
          "recommendedTypes": [],
          "solidityType": "uint80"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTimestamp(uint256)",
      "name": "getTimestamp",
      "description": "get timestamp when an answer was last updated. #[deprecated] Use getRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended getRoundData instead which includes better verification information.",
      "parameterDecorators": [
        {
          "name": "_roundId",
          "description": "the round number to retrieve the updated timestamp for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestAnswer()",
      "name": "latestAnswer",
      "description": "get the most recently reported answer. #[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestRound()",
      "name": "latestRound",
      "description": "get the ID of the last updated round. #[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestRoundData()",
      "name": "latestRoundData",
      "description": "get data about the latest round. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Consumers are encouraged to use this more fully featured method over the \"legacy\" latestRound/ latestAnswer/latestTimestamp functions. Consumers are encouraged to check that they're receiving fresh data by inspecting the updatedAt and answeredInRound return values. Note that for in-progress rounds (i.e. rounds that haven't yet received maxSubmissions) answer and updatedAt may change between queries.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "roundId",
          "description": "is the round ID for which data was retrieved.",
          "recommendedTypes": [],
          "solidityType": "uint80"
        },
        {
          "name": "answer",
          "description": "is the answer for the given round.",
          "recommendedTypes": [],
          "solidityType": "int256"
        },
        {
          "name": "startedAt",
          "description": "is the timestamp when the round was started. This is 0 if the round hasn't been started yet.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "updatedAt",
          "description": "is the timestamp when the round last was updated (i.e. answer was last computed).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "answeredInRound",
          "description": "is the round ID of the round in which the answer was computed. answeredInRound may be smaller than roundId when the round timed out. answeredInRound is equal to roundId when the round didn't time out and was completed regularly.",
          "recommendedTypes": [],
          "solidityType": "uint80"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestTimestamp()",
      "name": "latestTimestamp",
      "description": "get the most recent updated at timestamp. #[deprecated] Use latestRoundData instead. This does not error if no answer has been reached, it will simply return 0. Either wait to point to an already answered Aggregator or use the recommended latestRoundData instead which includes better verification information.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxSubmissionCount()",
      "name": "maxSubmissionCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxSubmissionValue()",
      "name": "maxSubmissionValue",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minSubmissionCount()",
      "name": "minSubmissionCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minSubmissionValue()",
      "name": "minSubmissionValue",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracleCount()",
      "name": "oracleCount",
      "description": "returns the number of oracles.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracleRoundState(address,uint32)",
      "name": "oracleRoundState",
      "description": "a method to provide all current info oracles need. Intended only only to be callable by oracles. Not for use by contracts to read state. the amount of availableFunds returned might be lower than the actual value.",
      "parameterDecorators": [
        {
          "name": "_oracle",
          "description": "the address to look up information for.",
          "recommendedTypes": []
        },
        {
          "name": "_queriedRoundId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_eligibleToSubmit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "_roundId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "_latestSubmission",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        },
        {
          "name": "_startedAt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "_timeout",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "_availableFunds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        },
        {
          "name": "_oracleCount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "_paymentAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paymentAmount()",
      "name": "paymentAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "requestNewRound()",
      "name": "requestNewRound",
      "description": "allows non-oracles to request a new round.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint80"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "restartDelay()",
      "name": "restartDelay",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setRequesterPermissions(address,bool,uint32)",
      "name": "setRequesterPermissions",
      "description": "allows the owner to specify new non-oracles to start new rounds.",
      "parameterDecorators": [
        {
          "name": "_requester",
          "description": "is the address to set permissions for.",
          "recommendedTypes": []
        },
        {
          "name": "_authorized",
          "description": "is a boolean specifying whether they can start new rounds or not.",
          "recommendedTypes": []
        },
        {
          "name": "_delay",
          "description": "is the number of rounds the requester must wait before starting another round.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setValidator(address)",
      "name": "setValidator",
      "description": "method to update the address which does external data validation.",
      "parameterDecorators": [
        {
          "name": "_newValidator",
          "description": "designates the address of the new validation contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "submit(uint256,int256)",
      "name": "submit",
      "description": "called by oracles when they have witnessed a need to update.",
      "parameterDecorators": [
        {
          "name": "_roundId",
          "description": "is the ID of the round this submission pertains to.",
          "recommendedTypes": []
        },
        {
          "name": "_submission",
          "description": "is the updated data that the oracle is submitting.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "timeout()",
      "name": "timeout",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferAdmin(address,address)",
      "name": "transferAdmin",
      "description": "transfer the admin address for an oracle.",
      "parameterDecorators": [
        {
          "name": "_oracle",
          "description": "is the address of the oracle whose admin is being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "_newAdmin",
          "description": "is the new admin address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows an owner to begin transferring ownership to a new address, pending.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateAvailableFunds()",
      "name": "updateAvailableFunds",
      "description": "recalculate the amount of BOBA available for payouts.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateFutureRounds(uint128,uint32,uint32,uint32,uint32)",
      "name": "updateFutureRounds",
      "description": "update the round and payment related parameters for subsequent rounds.",
      "parameterDecorators": [
        {
          "name": "_paymentAmount",
          "description": "is the payment amount for subsequent rounds.",
          "recommendedTypes": []
        },
        {
          "name": "_minSubmissions",
          "description": "is the new minimum submission count for each round.",
          "recommendedTypes": []
        },
        {
          "name": "_maxSubmissions",
          "description": "is the new maximum submission count for each round.",
          "recommendedTypes": []
        },
        {
          "name": "_restartDelay",
          "description": "is the number of rounds an Oracle has to wait before they can initiate a round.",
          "recommendedTypes": []
        },
        {
          "name": "_timeout",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "validator()",
      "name": "validator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "version()",
      "name": "version",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "voluntarySubmissionsAllowed()",
      "name": "voluntarySubmissionsAllowed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawFunds(address,uint256)",
      "name": "withdrawFunds",
      "description": "transfers the owner's BOBA to another address.",
      "parameterDecorators": [
        {
          "name": "_recipient",
          "description": "is the address to send the BOBA to.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "is the amount of BOBA to send.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawPayment(address,address,uint256)",
      "name": "withdrawPayment",
      "description": "transfers the oracle's BOBA to another address. Can only be called by the oracle's admin.",
      "parameterDecorators": [
        {
          "name": "_oracle",
          "description": "is the oracle whose BOBA is transferred.",
          "recommendedTypes": []
        },
        {
          "name": "_recipient",
          "description": "is the address to send the BOBA to.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "is the amount of BOBA to send.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawablePayment(address)",
      "name": "withdrawablePayment",
      "description": "query the available amount of BOBA for an oracle to withdraw.",
      "parameterDecorators": [
        {
          "name": "_oracle",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}