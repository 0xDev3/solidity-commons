{
  "schema": "../schema.json",
  "tags": [],
  "name": "DPiggy",
  "description": "DPiggy. The contract is proxied for dPiggyProxy. It is the implementation of the gateway contract for dPiggy. The contract manages all assets and general data for dPiggy system.",
  "eventDecorators": [
    {
      "signature": "RedeemUserAucEscrow(address,uint256)",
      "name": "RedeemUserAucEscrow",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetAssetDepositAllowed(address,bool,bool)",
      "name": "SetAssetDepositAllowed",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newDepositAllowed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldDepositAllowed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetAssetMinimumDeposit(address,uint256,uint256)",
      "name": "SetAssetMinimumDeposit",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newMinimumDeposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldMinimumDeposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetDailyFee(uint256,uint256)",
      "name": "SetDailyFee",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "newDailylFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldDailylFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetMinimumAucToFreeFee(uint256,uint256)",
      "name": "SetMinimumAucToFreeFee",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "newMinimumAuc",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldMinimumAuc",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetNewAsset(address,address)",
      "name": "SetNewAsset",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proxy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetProxyAdmin(address,address)",
      "name": "SetProxyAdmin",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetProxyImplementation(address,address)",
      "name": "SetProxyImplementation",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldImplementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetUserAucEscrow(address,uint256)",
      "name": "SetUserAucEscrow",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "admin()",
      "name": "admin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetImplementation()",
      "name": "assetImplementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assets(uint256)",
      "name": "assets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetsData(address)",
      "name": "assetsData",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "proxy",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "depositAllowed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "time",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "minimumDeposit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "auc()",
      "name": "auc",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "compound()",
      "name": "compound",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createAsset(address,uint256,bytes)",
      "name": "createAsset",
      "description": "Function to create a new dPiggy asset. Only can be called by the admin. The asset cannot already exist on dPiggy. A DPiggyAssetProxy is created using the `assetImplementation` address. dPiggy contract is the admin for this proxy.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The ERC20 token address on the chain or '0x0' for Ethereum.",
          "recommendedTypes": []
        },
        {
          "name": "minimumDeposit",
          "description": "The minimum amount of Dai that can be deposited for the asset.",
          "recommendedTypes": []
        },
        {
          "name": "creationData",
          "description": "ABI encoded with signature data that will be delegated on the new implementation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "dai()",
      "name": "dai",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dailyFee()",
      "name": "dailyFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(address[],uint256[])",
      "name": "deposit",
      "description": "Function to deposit Dai on dPiggy assets. Both array parameters must be the same size because the percentage is set through the same array index position.",
      "parameterDecorators": [
        {
          "name": "tokenAddresses",
          "description": "Array with ERC20 token addresses or '0x0' for Ethereum.",
          "recommendedTypes": []
        },
        {
          "name": "percentages",
          "description": "Array with respective assets percentage allocation (with dPiggy percentage precision).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "escrowStart(address)",
      "name": "escrowStart",
      "description": "Function to return the escrow start time.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "User's address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The Unix time for user escrow start. Zero means no escrow.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchange()",
      "name": "exchange",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executeCompoundRedeem(address[])",
      "name": "executeCompoundRedeem",
      "description": "Forwarding function to dPiggy asset to execute the Compound redeem.",
      "parameterDecorators": [
        {
          "name": "tokenAddresses",
          "description": "Array with ERC20 token addresses or '0x0' for Ethereum. The asset must already exist on dPiggy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executionFee(uint256)",
      "name": "executionFee",
      "description": "Function to calculate the Compound redeem fee. It calculates how many days the argument represents then it is calculated: (100% + `dailyFee`)^(number of days) - 100%.",
      "parameterDecorators": [
        {
          "name": "baseTime",
          "description": "Period of time in seconds. It is not a Unix time.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Fee for the amount of time informed with a dPiggy percentage precision.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "finish(address[])",
      "name": "finish",
      "description": "Forwarding function to dPiggy asset to finish the participation. All assets profit is redeemed as well as all the Dai deposited.",
      "parameterDecorators": [
        {
          "name": "tokenAddresses",
          "description": "Array with ERC20 token addresses or '0x0' for Ethereum. The asset must already exist on dPiggy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "finishAll()",
      "name": "finishAll",
      "description": "Forwarding function to dPiggy asset to finish the participation in all dPiggy assets. All assets profit is redeemed as well as all the Dai deposited. Whether the transaction sender has the Auc escrow it will be redeemed also.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "forceFinish(address[],address[])",
      "name": "forceFinish",
      "description": "Forwarding function to dPiggy asset to deliberately finish the user participation. All asset profit is redeemed as well as all the Dai deposited for the respective assets. Only can be called by the admin. Although being called by the admin, assets and Dai redeemed are done to the respective user address.",
      "parameterDecorators": [
        {
          "name": "users",
          "description": "Array with user addresses.",
          "recommendedTypes": []
        },
        {
          "name": "tokenAddresses",
          "description": "Array with ERC20 token addresses or '0x0' for Ethereum. The asset must already exist on dPiggy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "forceFinishAll(address[])",
      "name": "forceFinishAll",
      "description": "Forwarding function to dPiggy asset to deliberately finish the user participation in all dPiggy assets. All assets profit is redeemed as well as all the Dai deposited. Whether the user has the Auc escrow it will be redeemed also. Only can be called by the admin. Although being called by the admin, assets and Dai redeemed are done to the respective user address.",
      "parameterDecorators": [
        {
          "name": "users",
          "description": "Array with user addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "forceRedeem(address[],address[])",
      "name": "forceRedeem",
      "description": "Forwarding function to dPiggy asset to deliberately redeem the user asset profit. Only can be called by the admin. Although being called by the admin, the user asset profit is redeemed to the respective user address.",
      "parameterDecorators": [
        {
          "name": "users",
          "description": "Array with user addresses.",
          "recommendedTypes": []
        },
        {
          "name": "tokenAddresses",
          "description": "Array with ERC20 token addresses or '0x0' for Ethereum. The asset must already exist on dPiggy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getMinimumDeposit(address)",
      "name": "getMinimumDeposit",
      "description": "Function to get the minimum amount of Dai allowed to deposit on the asset.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The ERC20 token address on the chain or '0x0' for Ethereum.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The minimum amount of Dai allowed to deposit on the asset.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMinimumTimeForNextExecution(address)",
      "name": "getMinimumTimeForNextExecution",
      "description": "Forwarding function to dPiggy asset to get the minimum time for the next Compound redeem execution.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The ERC20 token address on the chain or '0x0' for Ethereum.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The minimum time in Unix for the next Compound redeem execution.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalInvested(address)",
      "name": "getTotalInvested",
      "description": "Forwarding function to dPiggy asset to get the total amount of Dai deposited.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The ERC20 token address on the chain or '0x0' for Ethereum.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The total amount of Dai deposited.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserAssetRedeemed(address,address)",
      "name": "getUserAssetRedeemed",
      "description": "Forwarding function to dPiggy asset to get the amount of asset redeemed for the user.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The ERC20 token address on the chain or '0x0' for Ethereum.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "User's address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of asset redeemed.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserEstimatedCurrentFee(address,address,uint256)",
      "name": "getUserEstimatedCurrentFee",
      "description": "Forwarding function to dPiggy asset to get the estimated current fee in Dai for the user. To estimate the amount of fee on the Compound redeem execution, it is calculated by the difference between the `time` and the last execution time. So it is not the total amount of fee, for an estimated total of the fee in Dai: `getUserAssetProfitAndFeeAmount(second return)` + `getUserEstimatedCurrentFee`.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The ERC20 token address on the chain or '0x0' for Ethereum.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "User's address.",
          "recommendedTypes": []
        },
        {
          "name": "time",
          "description": "The Unix time to calculate the fee. It should be the current Unix time.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The estimated fee in Dai.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserEstimatedCurrentProfitWithoutFee(address,address)",
      "name": "getUserEstimatedCurrentProfitWithoutFee",
      "description": "Forwarding function to dPiggy asset to get the estimated current gross profit in Dai for the user. So it is not the total gross profit, it is only for the user amount of Dai on the next Compound redeem execution. The estimative to the amount of Dai on the Compound redeem execution considering the Compound exchange rate now. For an estimated total of the gross profit: `getUserProfit` + `getUserEstimatedCurrentProfitWithoutFee`.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The ERC20 token address on the chain or '0x0' for Ethereum.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "User's address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The estimated gross profit in Dai.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserProfitsAndFeeAmount(address,address)",
      "name": "getUserProfitsAndFeeAmount",
      "description": "Forwarding function to dPiggy asset to get the user's Dai gross profit, asset net profit and the fee amount in Dai.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The ERC20 token address on the chain or '0x0' for Ethereum.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "User's address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserTotalInvested(address,address)",
      "name": "getUserTotalInvested",
      "description": "Forwarding function to dPiggy asset to get the amount of Dai deposited for the user.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The ERC20 token address on the chain or '0x0' for Ethereum.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "User's address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of Dai deposited.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "implementation()",
      "name": "implementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "init(uint256,uint256,uint256,uint256,address,address,address,address,address)",
      "name": "init",
      "description": "Function to initialize the contract. It should be called through the `data` argument when creating the proxy. It must be called only once. The `assert` is to guarantee that behavior.",
      "parameterDecorators": [
        {
          "name": "_percentagePrecision",
          "description": "The percentage precision. The value represents the 100%.",
          "recommendedTypes": []
        },
        {
          "name": "_dailyFee",
          "description": "The daily fee percentage (with percentage precision).",
          "recommendedTypes": []
        },
        {
          "name": "_maximumDailyFee",
          "description": "The maximum value that can be defined for the daily fee percentage.",
          "recommendedTypes": []
        },
        {
          "name": "_minimumAucToFreeFee",
          "description": "The minimum amount of Auc escrowed to have the fee exemption.",
          "recommendedTypes": []
        },
        {
          "name": "_dai",
          "description": "Address for the Dai token contract.",
          "recommendedTypes": []
        },
        {
          "name": "_compound",
          "description": "Address for the cDai (the Compound contract).",
          "recommendedTypes": []
        },
        {
          "name": "_uniswapFactory",
          "description": "Address for the Uniswap factory contract.",
          "recommendedTypes": []
        },
        {
          "name": "_auc",
          "description": "Address for the Auc token contract.",
          "recommendedTypes": []
        },
        {
          "name": "_assetImplementation",
          "description": "Address for the asset base implementation contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "maximumDailyFee()",
      "name": "maximumDailyFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "migrateAssetProxy(address,address,address[])",
      "name": "migrateAssetProxy",
      "description": "Function to set the new proxy for the dPiggy asset and migrates the previous data. Only can be called by the admin.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The ERC20 token address on the chain or '0x0' for Ethereum.",
          "recommendedTypes": []
        },
        {
          "name": "_assetImplementation",
          "description": "New implementation contract address.",
          "recommendedTypes": []
        },
        {
          "name": "users",
          "description": "The users to copy their stored data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "minimumAucToFreeFee()",
      "name": "minimumAucToFreeFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberOfAssets()",
      "name": "numberOfAssets",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "percentagePrecision()",
      "name": "percentagePrecision",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeem(address[])",
      "name": "redeem",
      "description": "Forwarding function to dPiggy asset to redeem the asset profit.",
      "parameterDecorators": [
        {
          "name": "tokenAddresses",
          "description": "Array with ERC20 token addresses or '0x0' for Ethereum. The asset must already exist on dPiggy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAssetImplementation(address,bytes)",
      "name": "setAssetImplementation",
      "description": "Function to set the implementation address for the dPiggy assets proxy. Only can be called by the admin.",
      "parameterDecorators": [
        {
          "name": "_assetImplementation",
          "description": "New implementation contract address.",
          "recommendedTypes": []
        },
        {
          "name": "updateData",
          "description": "(optional) ABI encoded with signature data that will be delegated on the new implementation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAssetsDepositAllowed(address[],bool[])",
      "name": "setAssetsDepositAllowed",
      "description": "Function to set the deposit permission for dPiggy asset. Only can be called by the admin. Both array parameters must be the same size because the value is set through the same array index position.",
      "parameterDecorators": [
        {
          "name": "tokenAddresses",
          "description": "Array with ERC20 token addresses or '0x0' for Ethereum. The asset must already exist on dPiggy.",
          "recommendedTypes": []
        },
        {
          "name": "allowed",
          "description": "Array with the deposit permission conditions.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAssetsMinimumDeposit(address[],uint256[])",
      "name": "setAssetsMinimumDeposit",
      "description": "Function to set the minimum amount of Dai allowed to deposit on dPiggy asset. Only can be called by the admin. Both array parameters must be the same size because the value is set through the same array index position.",
      "parameterDecorators": [
        {
          "name": "tokenAddresses",
          "description": "Array with ERC20 token addresses or '0x0' for Ethereum. The asset must already exist on dPiggy.",
          "recommendedTypes": []
        },
        {
          "name": "minimumDeposits",
          "description": "Array with the minimum amount of Dai allowed for deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDailyFee(uint256)",
      "name": "setDailyFee",
      "description": "Function to set the daily fee. Only can be called by the admin. The new value must be lower than the stored maximum daily fee.",
      "parameterDecorators": [
        {
          "name": "_dailyFee",
          "description": "New daily fee with dPiggy percentage precision.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setExchange()",
      "name": "setExchange",
      "description": "Function to set Dai Uniswap exchange using the uniswapFactory address. It is public because uses fixed and controlled parameters.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumAucToFreeFee(uint256)",
      "name": "setMinimumAucToFreeFee",
      "description": "Function to set the minimum amount of Auc escrowed to have the fee exemption. Only can be called by the admin.",
      "parameterDecorators": [
        {
          "name": "_minimumAucToFreeFee",
          "description": "New minimum amount of Auc.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumTimeBetweenExecutions(address,uint256)",
      "name": "setMinimumTimeBetweenExecutions",
      "description": "Forwarding function to dPiggy asset to set the minimum time between the Compound redeem executions for a dPiggy asset. Only can be called by the admin.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The ERC20 token address on the chain or '0x0' for Ethereum. The asset must already exist on dPiggy.",
          "recommendedTypes": []
        },
        {
          "name": "time",
          "description": "New minimum time in seconds between the Compound redeem executions.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenFallback(address,uint256,bytes)",
      "name": "tokenFallback",
      "description": "Function to receive the Auc escrowed. The sender must be the Auc token contract. It occurs after an EIP 223 transfer call. On this transfer, the destination address is the dPiggy contract. The user must send exactly the minimum amount of Auc to have the fee exemption and cannot already have Auc escrowed.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "The user address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of Auc.",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalEscrow()",
      "name": "totalEscrow",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "uniswapFactory()",
      "name": "uniswapFactory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "usersEscrow(address)",
      "name": "usersEscrow",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "time",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}