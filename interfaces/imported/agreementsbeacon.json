{
  "schema": "../schema.json",
  "tags": [],
  "name": "AgreementsBeacon",
  "description": "",
  "eventDecorators": [
    {
      "signature": "LogAgreementStatus(bytes32,bytes32,address,uint8,string,uint256,uint256,uint256)",
      "name": "LogAgreementStatus",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "eventNamespace",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "eventCategory",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "agreement",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "state",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "errorCode",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "requestIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "currentBlockHeight",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "currentEventIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LogBeaconStatusChange(bytes32,bytes32,address,address,address,uint256,bytes32,string,bool,uint256,uint256)",
      "name": "LogBeaconStatusChange",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "eventNamespace",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "eventCategory",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "creator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "relayer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenContractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "templateId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "templateConfig",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "activated",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "currentBlockHeight",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "currentEventIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LogRequestCreateAgreement(bytes32,bytes32,address,address,address,uint256,address,uint256,uint256,uint256)",
      "name": "LogRequestCreateAgreement",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "eventNamespace",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "eventCategory",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "creator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "relayer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenContractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "accepter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "requestIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "currentBlockHeight",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "currentEventIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "Whenever a new child contract is deployed, a `NewContract` event containing the new child contract address MUST be emitted.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "AGREEMENT_BEACON_PRICE()",
      "name": "AGREEMENT_BEACON_PRICE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MANAGER_ROLE()",
      "name": "MANAGER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "REPORTER_ROLE()",
      "name": "REPORTER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "drain(address)",
      "name": "drain",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_destination",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAgreementId(address,uint256,address)",
      "name": "getAgreementId",
      "description": "Retrieves the address of the creator of the agreement beacon.",
      "parameterDecorators": [
        {
          "name": "tokenContractAddress",
          "description": "The token contract owning the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "The ID of the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "accepter",
          "description": "The address of those accepting the terms of the token as established by the creator Requirements: - the beacon must be activated by the creator of the beacon.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "agreement",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAgreementStatus(address,uint256,address)",
      "name": "getAgreementStatus",
      "description": "Retrieves the {LegalState} of the agreement between the creator and accepter known to the] agreement beacon.",
      "parameterDecorators": [
        {
          "name": "tokenContractAddress",
          "description": "The token contract owning the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "The ID of the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "accepter",
          "description": "The address of those accepting the terms of the token as established by the creator Requirements: - the beacon must be activated by the creator of the beacon.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "state",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBeaconCreator(address,uint256)",
      "name": "getBeaconCreator",
      "description": "Retrieves the address of the creator of the agreement beacon.",
      "parameterDecorators": [
        {
          "name": "tokenContractAddress",
          "description": "The token contract owning the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "The ID of the token to be integrated via the beacon Requirements: - the beacon must be activated by the creator of the beacon.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "creator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBeaconURI(address,uint256)",
      "name": "getBeaconURI",
      "description": "Retrieves the legalURL for the agreement beacon.",
      "parameterDecorators": [
        {
          "name": "tokenContractAddress",
          "description": "The token contract owning the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "The ID of the token to be integrated via the beacon Requirements: - the beacon must be activated by the creator of the beacon.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMember(bytes32,uint256)",
      "name": "getRoleMember",
      "description": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMemberCount(bytes32)",
      "name": "getRoleMemberCount",
      "description": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Overload {grantRole} to track enumerable memberships.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "multicall(bytes[])",
      "name": "multicall",
      "description": "Receives and executes a batch of function calls on this contract.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Overload {renounceRole} to track enumerable memberships.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reportAgreementStatus(address,uint256,address,address,uint8,string)",
      "name": "reportAgreementStatus",
      "description": "Handles the logging of state changes to the agreements between the parties.",
      "parameterDecorators": [
        {
          "name": "tokenContractAddress",
          "description": "The token contract owning the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "The ID of the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "accepter",
          "description": "The address of those accepting the terms of the token as established by the creator.",
          "recommendedTypes": []
        },
        {
          "name": "agreement",
          "description": "The address (within the agreement zone) of the agreement between the creator and the accepter.",
          "recommendedTypes": []
        },
        {
          "name": "state",
          "description": "The {LegalState} of the agreement.",
          "recommendedTypes": []
        },
        {
          "name": "errorCode",
          "description": "Any error code exhibited by the beacon creating the agreement within the agreements zone (generally follows HTTP error codes) Emits a {LogAgreementStatus} event. Requirements: - only addresses which have the correct roles may call this function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestCreateAgreement(address,uint256,address[])",
      "name": "requestCreateAgreement",
      "description": "",
      "parameterDecorators": [
        {
          "name": "tokenContractAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "acceptors",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestCreateBeacon(address,uint256,bytes32,string)",
      "name": "requestCreateBeacon",
      "description": "Handles the request to create an agreement beacon which will connect a specific token to a set of specific digital agreements that have been agreed to by counterparties.",
      "parameterDecorators": [
        {
          "name": "tokenContractAddress",
          "description": "The token contract owning the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "The ID of the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "templateId",
          "description": "The ID of the template that will be used to formulate the agreements (convert the UUID to bytes32 string).",
          "recommendedTypes": []
        },
        {
          "name": "templateConfig",
          "description": "The URL location (preferrable encrypted IPFS hash or Hoard grant) to the JSON encoded parameters to be used with the template ID Emits a {LogBeaconStatusChange} event. Requirements: - minter of the token must not have previously requested beacon activation (note the AgreementsBeacon is purposefully ignorant of who initially owns a particular token) - the {AGREEMENT_BEACON_PRICE} must accompany any calls.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestUpdateBeacon(address,uint256,bytes32,string,bool)",
      "name": "requestUpdateBeacon",
      "description": "Handles the request to update an agreement beacon which will connect a specific token to a set of specific digital agreements that have been agreed to by counterparties.",
      "parameterDecorators": [
        {
          "name": "tokenContractAddress",
          "description": "The token contract owning the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "The ID of the token to be integrated via the beacon.",
          "recommendedTypes": []
        },
        {
          "name": "templateId",
          "description": "The ID of the template that will be used to formulate the agreements (convert the UUID to bytes32 string).",
          "recommendedTypes": []
        },
        {
          "name": "templateConfig",
          "description": "The URL location (preferrable encrypted IPFS hash or Hoard grant) to the JSON encoded parameters to be used with the template ID.",
          "recommendedTypes": []
        },
        {
          "name": "activated",
          "description": "Whether the beacon should be turned on or off Emits a {LogBeaconStatusChange} event. Requirements: - requester must have the same address as that which initially requested activation - the {AGREEMENT_BEACON_PRICE} must accompany any calls.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Overload {revokeRole} to track enumerable memberships.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}