{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "TokenFunctions",
  "description": "",
  "eventDecorators": [
    {
      "signature": "BurnCATokens(uint256,address,uint256)",
      "name": "BurnCATokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "access",
          "description": "TRUE if the Watcher was given permissions, FALSE if permissions were removed.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "watcher",
          "description": "the address of the Watcher.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "burnCAToken(uint256,uint256,address)",
      "name": "burnCAToken",
      "description": "Burns tokens used for fraudulent voting against a claim.",
      "parameterDecorators": [
        {
          "name": "claimid",
          "description": "Claim Id.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "number of tokens to be burned.",
          "recommendedTypes": []
        },
        {
          "name": "_of",
          "description": "Claim Assessor's address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "burnDepositCN(uint256)",
      "name": "burnDepositCN",
      "description": "to burn the deposited cover tokens.",
      "parameterDecorators": [
        {
          "name": "coverId",
          "description": "is id of cover whose tokens have to be burned.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeDependentContractAddress()",
      "name": "changeDependentContractAddress",
      "description": "Change Dependent Contract Address.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeMasterAddress(address)",
      "name": "changeMasterAddress",
      "description": "change master address.",
      "parameterDecorators": [
        {
          "name": "_masterAddress",
          "description": "is the new address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositCN(uint256)",
      "name": "depositCN",
      "description": "Set the flag to check if cover note is deposited against the cover id.",
      "parameterDecorators": [
        {
          "name": "coverId",
          "description": "Cover Id.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "extendCNEPOff(address,uint256,uint256)",
      "name": "extendCNEPOff",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_of",
          "description": "address of Member.",
          "recommendedTypes": []
        },
        {
          "name": "_coverId",
          "description": "Cover Id.",
          "recommendedTypes": []
        },
        {
          "name": "_lockTime",
          "description": "Pending Time + Cover Period 7*1 days.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getLockedCNAgainstCover(uint256)",
      "name": "getLockedCNAgainstCover",
      "description": "Returns amount of NXM Tokens locked as Cover Note against given coverId.",
      "parameterDecorators": [
        {
          "name": "_coverId",
          "description": "coverId of the cover.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserAllLockedCNTokens(address)",
      "name": "getUserAllLockedCNTokens",
      "description": "to get the all the cover locked tokens of a user.",
      "parameterDecorators": [
        {
          "name": "_of",
          "description": "is the user address in concern.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserLockedCNTokens(address,uint256)",
      "name": "getUserLockedCNTokens",
      "description": "Returns amount of NXM Tokens locked as Cover Note for given coverId.",
      "parameterDecorators": [
        {
          "name": "_of",
          "description": "address of the coverHolder.",
          "recommendedTypes": []
        },
        {
          "name": "_coverId",
          "description": "coverId of the cover.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isLockedForMemberVote(address)",
      "name": "isLockedForMemberVote",
      "description": "to check if a member is locked for member vote.",
      "parameterDecorators": [
        {
          "name": "_of",
          "description": "is the member address in concern.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockCN(uint256,uint256,uint256,address)",
      "name": "lockCN",
      "description": "to lock cover note tokens.",
      "parameterDecorators": [
        {
          "name": "coverNoteAmount",
          "description": "is number of tokens to be locked.",
          "recommendedTypes": []
        },
        {
          "name": "coverPeriod",
          "description": "is cover period in concern.",
          "recommendedTypes": []
        },
        {
          "name": "coverId",
          "description": "is the cover id of cover in concern.",
          "recommendedTypes": []
        },
        {
          "name": "_of",
          "description": "address whose tokens are to be locked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ms()",
      "name": "ms",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nxMasterAddress()",
      "name": "nxMasterAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pooledStaking()",
      "name": "pooledStaking",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pushStakerRewards(address,uint256)",
      "name": "pushStakerRewards",
      "description": "Rewards stakers on purchase of cover on smart contract.",
      "parameterDecorators": [
        {
          "name": "_contractAddress",
          "description": "smart contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_coverPriceNXM",
          "description": "cover price in NXM.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "qd()",
      "name": "qd",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tc()",
      "name": "tc",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "td()",
      "name": "td",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tk()",
      "name": "tk",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unlockCN(uint256)",
      "name": "unlockCN",
      "description": "Unlocks covernote locked against a given cover.",
      "parameterDecorators": [
        {
          "name": "coverId",
          "description": "id of cover.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}