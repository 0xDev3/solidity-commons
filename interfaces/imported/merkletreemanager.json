{"schema":"../schema.json","tags":["merkle proofs"],"name":"MerkleTreeManager","description":"MerkleTreeManager. Contains a Merkle tree instance and exposes read/write functions for the tree.","eventDecorators":[{"signature":"Initialized(uint8)","name":"Initialized","description":"Emitted when a router is disapproved for Portal.","parameterDecorators":[{"name":"version","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipProposed(address)","name":"OwnershipProposed","description":"Emitted when a router is disapproved for Portal.","parameterDecorators":[{"name":"proposedOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when a router is disapproved for Portal.","parameterDecorators":[{"name":"caller","description":"- The account that called the function.","recommendedTypes":[],"indexed":true},{"name":"router","description":"- The address of the disapproved router.","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"acceptProposedOwner()","name":"acceptProposedOwner","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"arborists(address)","name":"arborists","description":"The arborist contract that has permission to write to this tree.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"branch()","name":"branch","description":"Returns the current branch.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32[32]"}],"emittableEvents":[],"readOnly":true},{"signature":"count()","name":"count","description":"Returns the number of inserted leaves in the tree (current index).","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"delay()","name":"delay","description":"Returns the delay period before a new owner can be accepted.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address)","name":"initialize","description":"","parameterDecorators":[{"name":"_arborist","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"insert(bytes32)","name":"insert","description":"Inserts the given leaf into the tree.","parameterDecorators":[{"name":"leaf","description":"The leaf to be inserted into the tree.","recommendedTypes":[]}],"returnDecorators":[{"name":"_root","description":"Current root for convenience.","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_count","description":"Current node count (i.e. number of indices) AFTER the insertion of the new leaf, provided for convenience.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"insert(bytes32[])","name":"insert","description":"Inserts the given leaves into the tree.","parameterDecorators":[{"name":"leaves","description":"The leaves to be inserted into the tree.","recommendedTypes":[]}],"returnDecorators":[{"name":"_root","description":"Current root for convenience.","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_count","description":"Current node count (i.e. number of indices) AFTER the insertion of the new leaf, provided for convenience.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"proposeNewOwner(address)","name":"proposeNewOwner","description":"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process.","parameterDecorators":[{"name":"newlyProposed","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"proposed()","name":"proposed","description":"Returns the address of the proposed owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"proposedTimestamp()","name":"proposedTimestamp","description":"Returns the address of the proposed owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Renounces ownership of the contract after a delay.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounced()","name":"renounced","description":"Indicates if the ownership has been renounced() by checking if current owner is address(0).","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"root()","name":"root","description":"Calculates and returns the current root.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"setArborist(address)","name":"setArborist","description":"Method for the current arborist to assign write permissions to a new arborist.","parameterDecorators":[{"name":"newArborist","description":"The new address to set as the current arborist.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"tree()","name":"tree","description":"Core data structure with which this contract is tasked with keeping custody. Writable only by the designated arborist.","parameterDecorators":[],"returnDecorators":[{"name":"count","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}