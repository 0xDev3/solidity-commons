{"schema":"../schema.json","tags":[],"name":"MemberRoles","description":"","eventDecorators":[{"signature":"MemberRole(uint256,bytes32,string)","name":"MemberRole","description":"Emitted when a ERC721Controlled is created.","parameterDecorators":[{"name":"access","description":"TRUE if the Watcher was given permissions, FALSE if permissions were removed.","recommendedTypes":[],"indexed":true},{"name":"domain","description":"the remote domain of the Home contract for the Replica.","recommendedTypes":[],"indexed":false},{"name":"watcher","description":"the address of the Watcher.","recommendedTypes":[],"indexed":false}]},{"signature":"switchedMembership(address,address,uint256)","name":"switchedMembership","description":"Emitted when a ERC721Controlled is created.","parameterDecorators":[{"name":"access","description":"TRUE if the Watcher was given permissions, FALSE if permissions were removed.","recommendedTypes":[],"indexed":true},{"name":"domain","description":"the remote domain of the Home contract for the Replica.","recommendedTypes":[],"indexed":true},{"name":"watcher","description":"the address of the Watcher.","recommendedTypes":[],"indexed":false}]},{"signature":"ClaimPayoutAddressSet(address,address)","name":"ClaimPayoutAddressSet","description":"Emitted when a ERC721Controlled is created.","parameterDecorators":[{"name":"member","description":"","recommendedTypes":[],"indexed":true},{"name":"payoutAddress","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"authorized(uint256)","name":"authorized","description":"Return member address who holds the right to add/remove any member from specific role.","parameterDecorators":[{"name":"_memberRoleId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"numberOfMembers(uint256)","name":"numberOfMembers","description":"Gets all members' length.","parameterDecorators":[{"name":"_memberRoleId","description":"Member role id.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"changeDependentContractAddress()","name":"changeDependentContractAddress","description":"Iupgradable Interface to update dependent contract address.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"payJoiningFee(address)","name":"payJoiningFee","description":"Called by user to pay joining membership fee.","parameterDecorators":[{"name":"_userAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getClaimPayoutAddress(address)","name":"getClaimPayoutAddress","description":"","parameterDecorators":[{"name":"_member","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"memberRolesInitiate(address,address)","name":"memberRolesInitiate","description":"to initiate the member roles.","parameterDecorators":[{"name":"_firstAB","description":"is the address of the first AB member.","recommendedTypes":[]},{"name":"memberAuthority","description":"is the authority (role) of the member.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"tk()","name":"tk","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"isAuthorizedToGovern(address)","name":"isAuthorizedToGovern","description":"checks if an address is authorized to govern.","parameterDecorators":[{"name":"_toCheck","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"addRole(bytes32,string,address)","name":"addRole","description":"Adds new member role.","parameterDecorators":[{"name":"_roleName","description":"New role name.","recommendedTypes":[]},{"name":"_roleDescription","description":"New description hash.","recommendedTypes":[]},{"name":"_authorized","description":"Authorized member against every role id.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateRole(address,uint256,bool)","name":"updateRole","description":"Assign or Delete a member from specific role.","parameterDecorators":[{"name":"_memberAddress","description":"Address of Member.","recommendedTypes":[]},{"name":"_roleId","description":"RoleId to update.","recommendedTypes":[]},{"name":"_active","description":"active is set to be True if we want to assign this role to member, False otherwise!.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"maxABCount()","name":"maxABCount","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"setClaimPayoutAddress(address)","name":"setClaimPayoutAddress","description":"","parameterDecorators":[{"name":"_address","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"switchMembership(address)","name":"switchMembership","description":"Called by existed member if wish to switch membership to other address.","parameterDecorators":[{"name":"_add","description":"address of user to forward membership.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"checkRole(address,uint256)","name":"checkRole","description":"Returns true if the given role id is assigned to a member.","parameterDecorators":[{"name":"_memberAddress","description":"Address of member.","recommendedTypes":[]},{"name":"_roleId","description":"Checks member's authenticity with the roleId. i.e. Returns true if this roleId is assigned to member.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"members(uint256)","name":"members","description":"Gets the member addresses assigned by a specific role.","parameterDecorators":[{"name":"_memberRoleId","description":"Member role id.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"memberArray","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"addInitialABMembers(address[])","name":"addInitialABMembers","description":"is used to add initital advisory board members.","parameterDecorators":[{"name":"abArray","description":"is the list of initial advisory board members.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getMemberLengthForAllRoles()","name":"getMemberLengthForAllRoles","description":"Return total number of members assigned against each role id.","parameterDecorators":[],"returnDecorators":[{"name":"totalMembers","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"addMembersBeforeLaunch(address[],uint256[])","name":"addMembersBeforeLaunch","description":"to add members before launch.","parameterDecorators":[{"name":"userArray","description":"is list of addresses of members.","recommendedTypes":[]},{"name":"tokens","description":"is list of tokens minted for each array element.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"totalRoles()","name":"totalRoles","description":"Return number of member roles.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"launched()","name":"launched","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"membersLength(uint256)","name":"membersLength","description":"","parameterDecorators":[{"name":"_memberRoleId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"changeMaxABCount(uint256)","name":"changeMaxABCount","description":"to change max number of AB members allowed.","parameterDecorators":[{"name":"_val","description":"is the new value to be set.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"swapOwner(address)","name":"swapOwner","description":"to swap the owner address.","parameterDecorators":[{"name":"_newOwnerAddress","description":"is the new owner address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"roles(address)","name":"roles","description":"Get All role ids array that has been assigned to a member so far.","parameterDecorators":[{"name":"_memberAddress","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"ms()","name":"ms","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"changeAuthorized(uint256,address)","name":"changeAuthorized","description":"Change Member Address who holds the authority to Add/Delete any member from specific role.","parameterDecorators":[{"name":"_roleId","description":"roleId to update its Authorized Address.","recommendedTypes":[]},{"name":"_newAuthorized","description":"New authorized address against role id.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawMembership()","name":"withdrawMembership","description":"Called by existed member if wish to Withdraw membership.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"memberAtIndex(uint256,uint256)","name":"memberAtIndex","description":"","parameterDecorators":[{"name":"_memberRoleId","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"swapABMember(address,address)","name":"swapABMember","description":"to swap advisory board member.","parameterDecorators":[{"name":"_newABAddress","description":"is address of new AB member.","recommendedTypes":[]},{"name":"_removeAB","description":"is advisory board member to be removed.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"masterAddress()","name":"masterAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"changeMasterAddress(address)","name":"changeMasterAddress","description":"to change the master address.","parameterDecorators":[{"name":"_masterAddress","description":"is the new master address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"kycVerdict(address,bool)","name":"kycVerdict","description":"to perform kyc verdict.","parameterDecorators":[{"name":"_userAddress","description":"whose kyc is being performed.","recommendedTypes":[]},{"name":"verdict","description":"of kyc process.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"launchedOn()","name":"launchedOn","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"dAppToken()","name":"dAppToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"nxMasterAddress()","name":"nxMasterAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}