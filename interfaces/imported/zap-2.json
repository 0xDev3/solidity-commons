{"schema":"../schema.json","tags":["tokens","swaps"],"name":"Zap","description":"All though the underlying implementation is upgradeable, the Zap contract provides a safe wrapper that the implementation can never access approved funds. The Zap contract is an interface that allows other contracts to swap a token for another token without having to directly interact with verbose AMMs directly.It furthermore allows to zap to and from an LP pair within a single transaction.","eventDecorators":[{"signature":"ImplementationChanged(address,address)","name":"ImplementationChanged","description":"An event emitted when the voting period is set.","parameterDecorators":[{"name":"oldImplementation","description":"","recommendedTypes":[],"indexed":true},{"name":"newImplementation","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"An event emitted when the voting period is set.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"PendingOwnershipTransferred(address,address)","name":"PendingOwnershipTransferred","description":"An event emitted when the voting period is set.","parameterDecorators":[{"name":"previousPendingOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newPendingOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"from()","name":"from","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"implementation()","name":"implementation","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingOwner()","name":"pendingOwner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingToken()","name":"pendingToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pullAmountTo(address,uint256)","name":"pullAmountTo","description":"When the implementation calls pullAmountTo while in a swap, `amount` tokens of the `swap` amount will be sent from the swap`msg.sender` to the `to` address chosen by the implementation.This amount cannot exceed the amount set in the original swap transaction.Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens. Can only be called by the implementation.","parameterDecorators":[{"name":"to","description":"The address to send `amount` tokens of the swap to. This is presumably the first AMM pair in the route.","recommendedTypes":[]},{"name":"amount","description":"The amount of tokens to send to the `to` address, cannot exceed the remaining amount indicated by the swap `amount` parameter.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"pullTo(address)","name":"pullTo","description":"When the implementation calls pullTo while in a swap, the remaining tokens of the `swap` amount will be sent from the swap `msg.sender` to the `to` address chosen by the implementation.This amount cannot exceed the amount set in the original swap transaction.Traditionally these funds would just be transferred to the implementation which then forwards them to the pairs.However, by using pull hooks, one avoids a transfer which is important for transfer-tax tokens. Can only be called by the implementation.","parameterDecorators":[{"name":"to","description":"The address to send all remaining tokens of the swap to. This is presumably the first AMM pair in the route.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"remaining()","name":"remaining","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setImplementation(address)","name":"setImplementation","description":"Sets the underlying implementation that fulfills the swap orders. Can only be called by the contract owner.","parameterDecorators":[{"name":"_implementation","description":"The new implementation.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPendingOwner(address)","name":"setPendingOwner","description":"Sets the pendingOwner, ownership is only transferred when they call transferOwnership. Can only be called by the current owner.","parameterDecorators":[{"name":"newPendingOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"swapERC20(address,address,address,uint256,uint256)","name":"swapERC20","description":"Swap `amount` of `fromToken` to `toToken` and send them to the `recipient`.The `fromToken` and `toToken` arguments can be AMM pairs.Reverts if the `recipient` received less tokens than `minReceived`.Requires approval.","parameterDecorators":[{"name":"fromToken","description":"The token to take from `msg.sender` and exchange for `toToken`.","recommendedTypes":[]},{"name":"toToken","description":"The token that will be bought and sent to the `recipient`.","recommendedTypes":[]},{"name":"recipient","description":"The destination address to receive the `toToken`.","recommendedTypes":[]},{"name":"amount","description":"The amount that the zapper should take from the `msg.sender` and swap.","recommendedTypes":[]},{"name":"minReceived","description":"The minimum amount of `toToken` the `recipient` should receive. Otherwise the transaction reverts.","recommendedTypes":[]}],"returnDecorators":[{"name":"received","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"swapERC20Fast(address,address,uint256)","name":"swapERC20Fast","description":"Swap `amount` of `fromToken` to `toToken` and send them to the `msg.sender`.The `fromToken` and `toToken` arguments can be AMM pairs.Requires approval.","parameterDecorators":[{"name":"fromToken","description":"The token to take from `msg.sender` and exchange for `toToken`.","recommendedTypes":[]},{"name":"toToken","description":"The token that will be bought and sent to the `msg.sender`.","recommendedTypes":[]},{"name":"amount","description":"The amount that the zapper should take from the `msg.sender` and swap.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership()","name":"transferOwnership","description":"Transfers ownership of the contract to the pendingOwner. Can only be called by the pendingOwner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}