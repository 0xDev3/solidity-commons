{
  "schema": "../schema.json",
  "tags": [
    "oracles",
    "chainlink"
  ],
  "name": "ChainzConsumer",
  "description": "The Chainlink Oracle contract. Node operators can deploy this contract to fulfill requests sent to them.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "when the auction of a token gets started. Emitted when a NFT stops staking; either through standard means or by expulsion.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setUserPermissions(address,bool)",
      "name": "setUserPermissions",
      "description": "Sets the permissions for a given user. Use `true` to allow, `false` to disallow.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "The address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "_allowed",
          "description": "Bool value to determine if the user can interact.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWeatherByGeohash(string,string)",
      "name": "setWeatherByGeohash",
      "description": "Sets the weather at a given geohash.",
      "parameterDecorators": [
        {
          "name": "_geohash",
          "description": "String - the geohash.",
          "recommendedTypes": []
        },
        {
          "name": "_weather",
          "description": "String - the weather at given geohash.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateByGeohash(string,uint64)",
      "name": "updateByGeohash",
      "description": "Sets the timestamp of last update at a given geohash.",
      "parameterDecorators": [
        {
          "name": "_geohash",
          "description": "String - the geohash.",
          "recommendedTypes": []
        },
        {
          "name": "_timestamp",
          "description": "UNIX - the timestamp of the last update for given geohash.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}