{
  "schema": "../schema.json",
  "tags": [
    "celo network"
  ],
  "name": "XAppConnectionManager",
  "description": "XAppConnectionManager. Manages a registry of local Replica contracts for remote Home domains. Accepts Watcher signatures to un-enroll Replicas attached to fraudulent remote Homes.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ReplicaEnrolled(uint32,address)",
      "name": "ReplicaEnrolled",
      "description": "Emitted when a new Replica is enrolled / added.",
      "parameterDecorators": [
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "replica",
          "description": "the address of the Replica.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ReplicaUnenrolled(uint32,address)",
      "name": "ReplicaUnenrolled",
      "description": "Emitted when a new Replica is un-enrolled / removed.",
      "parameterDecorators": [
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "replica",
          "description": "the address of the Replica.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WatcherPermissionSet(uint32,address,bool)",
      "name": "WatcherPermissionSet",
      "description": "Emitted when Watcher permissions are changed.",
      "parameterDecorators": [
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "watcher",
          "description": "the address of the Watcher.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "access",
          "description": "TRUE if the Watcher was given permissions, FALSE if permissions were removed.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "domainToReplica(uint32)",
      "name": "domainToReplica",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "home()",
      "name": "home",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isReplica(address)",
      "name": "isReplica",
      "description": "Check whether _replica is enrolled.",
      "parameterDecorators": [
        {
          "name": "_replica",
          "description": "the replica to check for enrollment.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "TRUE iff _replica is enrolled.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "localDomain()",
      "name": "localDomain",
      "description": "Query local domain from Home.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "local domain.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ownerEnrollReplica(address,uint32)",
      "name": "ownerEnrollReplica",
      "description": "Allow Owner to enroll Replica contract.",
      "parameterDecorators": [
        {
          "name": "_replica",
          "description": "the address of the Replica.",
          "recommendedTypes": []
        },
        {
          "name": "_domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ownerUnenrollReplica(address)",
      "name": "ownerUnenrollReplica",
      "description": "Allow Owner to un-enroll Replica contract.",
      "parameterDecorators": [
        {
          "name": "_replica",
          "description": "the address of the Replica.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "replicaToDomain(address)",
      "name": "replicaToDomain",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setHome(address)",
      "name": "setHome",
      "description": "Set the address of the local Home contract.",
      "parameterDecorators": [
        {
          "name": "_home",
          "description": "the address of the local Home contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWatcherPermission(address,uint32,bool)",
      "name": "setWatcherPermission",
      "description": "Allow Owner to set Watcher permissions for a Replica.",
      "parameterDecorators": [
        {
          "name": "_watcher",
          "description": "the address of the Watcher.",
          "recommendedTypes": []
        },
        {
          "name": "_domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": []
        },
        {
          "name": "_access",
          "description": "TRUE to give the Watcher permissions, FALSE to remove permissions.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unenrollReplica(uint32,bytes32,bytes)",
      "name": "unenrollReplica",
      "description": "Un-Enroll a replica contract in the case that fraud was detected on the Home. in the future, if fraud occurs on the Home contract, the Watcher will submit their signature directly to the Home and it can be relayed to all remote chains to un-enroll the Replicas.",
      "parameterDecorators": [
        {
          "name": "_domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": []
        },
        {
          "name": "_updater",
          "description": "the address of the Updater for the Home contract (also stored on Replica).",
          "recommendedTypes": []
        },
        {
          "name": "_signature",
          "description": "signature of watcher on (domain, replica address, updater address).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "watcherPermission(address,uint32)",
      "name": "watcherPermission",
      "description": "Get access permissions for the watcher on the domain.",
      "parameterDecorators": [
        {
          "name": "_watcher",
          "description": "the address of the watcher.",
          "recommendedTypes": []
        },
        {
          "name": "_domain",
          "description": "the domain to check for watcher permissions.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "TRUE iff _watcher has permission to un-enroll replicas on _domain.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}