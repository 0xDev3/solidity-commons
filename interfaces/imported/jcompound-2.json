{
  "schema": "../schema.json",
  "tags": [
    "compound"
  ],
  "name": "JCompound",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TrancheATokenBurned(uint256,address,uint256,uint256)",
      "name": "TrancheATokenBurned",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "trancheNum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "burner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "The amount of withdrawn tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "taAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TrancheATokenMinted(uint256,address,uint256,uint256)",
      "name": "TrancheATokenMinted",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "trancheNum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "The amount of withdrawn tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "taAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TrancheAddedToProtocol(uint256,address,address)",
      "name": "TrancheAddedToProtocol",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "trancheNum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "trancheA",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "trancheB",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TrancheBTokenBurned(uint256,address,uint256,uint256)",
      "name": "TrancheBTokenBurned",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "trancheNum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "burner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "The amount of withdrawn tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tbAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TrancheBTokenMinted(uint256,address,uint256,uint256)",
      "name": "TrancheBTokenMinted",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "trancheNum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "The amount of withdrawn tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tbAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addTrancheToProtocol(address,string,string,string,string,uint256,uint8,uint8)",
      "name": "addTrancheToProtocol",
      "description": "add tranche in protocol.",
      "parameterDecorators": [
        {
          "name": "_erc20Contract",
          "description": "token contract address (0x0000000000000000000000000000000000000000 if eth).",
          "recommendedTypes": []
        },
        {
          "name": "_nameA",
          "description": "tranche A token name.",
          "recommendedTypes": []
        },
        {
          "name": "_symbolA",
          "description": "tranche A token symbol.",
          "recommendedTypes": []
        },
        {
          "name": "_nameB",
          "description": "tranche B token name.",
          "recommendedTypes": []
        },
        {
          "name": "_symbolB",
          "description": "tranche B token symbol.",
          "recommendedTypes": []
        },
        {
          "name": "_fixedRpb",
          "description": "tranche A percentage fixed compounded interest per year.",
          "recommendedTypes": []
        },
        {
          "name": "_cTokenDec",
          "description": "cToken decimals.",
          "recommendedTypes": []
        },
        {
          "name": "_underlyingDec",
          "description": "underlying token decimals.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buyTrancheAToken(uint256,uint256)",
      "name": "buyTrancheAToken",
      "description": "buy Tranche A Tokens.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount of stable coins sent by buyer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buyTrancheBToken(uint256,uint256)",
      "name": "buyTrancheBToken",
      "description": "buy Tranche B Tokens.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount of stable coins sent by buyer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cEthToken()",
      "name": "cEthToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cEtherContract()",
      "name": "cEtherContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cTokenContracts(address)",
      "name": "cTokenContracts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calcRPBFromPercentage(uint256)",
      "name": "calcRPBFromPercentage",
      "description": "get Tranche A exchange rate.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "tranche A token current price.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fLock()",
      "name": "fLock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feesCollectorAddress()",
      "name": "feesCollectorAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCEthExchangeRate()",
      "name": "getCEthExchangeRate",
      "description": "get cETH exchange rate from compound contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "exchRateMantissa",
          "description": "exchange rate cEth mantissa.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCTokenExchangeRate(address)",
      "name": "getCTokenExchangeRate",
      "description": "get cETH exchange rate from compound contract.",
      "parameterDecorators": [
        {
          "name": "_tokenContract",
          "description": "tranche number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "exchRateMantissa",
          "description": "exchange rate cToken mantissa.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCompoundPercentagePerTranche(uint256)",
      "name": "getCompoundPercentagePerTranche",
      "description": "get percentage from compound.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "cToken percentage per year.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCompoundPrice(uint256)",
      "name": "getCompoundPrice",
      "description": "get compound price for a single tranche.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "compPrice",
          "description": "compound current price.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEthBalance()",
      "name": "getEthBalance",
      "description": "get eth balance on this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMantissa(uint256)",
      "name": "getMantissa",
      "description": "get tranche mantissa.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "mantissa",
          "description": "tranche mantissa.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenBalance(address)",
      "name": "getTokenBalance",
      "description": "get every token balance in this contract.",
      "parameterDecorators": [
        {
          "name": "_tokenContract",
          "description": "token contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalValue(uint256)",
      "name": "getTotalValue",
      "description": "get Tranche total value.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "tranche total value.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTrAValue(uint256)",
      "name": "getTrAValue",
      "description": "get Tranche A value.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "tranche A value.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTrBValue(uint256)",
      "name": "getTrBValue",
      "description": "get Tranche B value.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "tranche B value.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTrancheAExchangeRate(uint256)",
      "name": "getTrancheAExchangeRate",
      "description": "get Tranche A exchange rate.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "tranche A token stored price.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTrancheARPB(uint256)",
      "name": "getTrancheARPB",
      "description": "get RPB for a given percentage (expressed in 1e18).",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "RPB for a fixed percentage.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTrancheBExchangeRate(uint256,uint256,bool)",
      "name": "getTrancheBExchangeRate",
      "description": "get Tranche B exchange rate.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        },
        {
          "name": "_newAmount",
          "description": "new amount entering tranche B.",
          "recommendedTypes": []
        },
        {
          "name": "_adding",
          "description": "true if adding, false if subtracting.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "tbPrice",
          "description": "tranche B token current price.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address)",
      "name": "initialize",
      "description": "contract initializer.",
      "parameterDecorators": [
        {
          "name": "_priceOracle",
          "description": "price oracle address.",
          "recommendedTypes": []
        },
        {
          "name": "_feesCollector",
          "description": "fees collector contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_tranchesDepl",
          "description": "tranches deployer contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isCTokenAllowed(address)",
      "name": "isCTokenAllowed",
      "description": "check if a cToken is allowed or not.",
      "parameterDecorators": [
        {
          "name": "_erc20Contract",
          "description": "token contract address (i.e. DAI contract, on Kovan: 0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true or false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastActivity(address)",
      "name": "lastActivity",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "priceOracleAddress()",
      "name": "priceOracleAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemCTokenAmount(uint256,uint256)",
      "name": "redeemCTokenAmount",
      "description": "redeem every cToken amount and send values to fees collector.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        },
        {
          "name": "_cTokenAmount",
          "description": "cToken amount to send to compound protocol.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemTimeout()",
      "name": "redeemTimeout",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemTrancheAToken(uint256,uint256)",
      "name": "redeemTrancheAToken",
      "description": "redeem Tranche A Tokens.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount of stable coins sent by buyer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemTrancheBToken(uint256,uint256)",
      "name": "redeemTrancheBToken",
      "description": "redeem Tranche B Tokens.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount of stable coins sent by buyer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBlocksPerYear(uint256)",
      "name": "setBlocksPerYear",
      "description": "set how many blocks will be produced per year on the blockchain.",
      "parameterDecorators": [
        {
          "name": "_newValue",
          "description": "new value (Compound blocksPerYear = 2102400).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCEtherContract(address)",
      "name": "setCEtherContract",
      "description": "set relationship between ethers and the corresponding Compound cETH contract.",
      "parameterDecorators": [
        {
          "name": "_cEtherContract",
          "description": "compound token contract address (cETH contract, on Kovan: 0x41b5844f4680a8c38fbb695b7f9cfd1f64474a72).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCTokenContract(address,address)",
      "name": "setCTokenContract",
      "description": "set relationship between a token and the corresponding Compound cToken contract.",
      "parameterDecorators": [
        {
          "name": "_erc20Contract",
          "description": "token contract address (i.e. DAI contract, on Kovan: 0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa).",
          "recommendedTypes": []
        },
        {
          "name": "_cErc20Contract",
          "description": "compound token contract address (i.e. cDAI contract, on Kovan: 0xf0d0eb522cfa50b716b3b1604c4f0fa6f04376ad).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDecimals(uint8,uint8)",
      "name": "setDecimals",
      "description": "check if a cToken is allowed or not.",
      "parameterDecorators": [
        {
          "name": "_cTokenDec",
          "description": "cToken decimals.",
          "recommendedTypes": []
        },
        {
          "name": "_underlyingDec",
          "description": "underlying token decimals.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRedemptionTimeout(uint32)",
      "name": "setRedemptionTimeout",
      "description": "set redemption timeout.",
      "parameterDecorators": [
        {
          "name": "_blockNum",
          "description": "timeout (in block numbers).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTrancheAExchangeRate(uint256)",
      "name": "setTrancheAExchangeRate",
      "description": "set Tranche A exchange rate.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "tranche A token stored price.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTrancheAFixedPercentage(uint256,uint256)",
      "name": "setTrancheAFixedPercentage",
      "description": "set tranche redemption percentage.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        },
        {
          "name": "_newTrAPercentage",
          "description": "new tranche A RPB.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTrancheRedemptionPercentage(uint256,uint16)",
      "name": "setTrancheRedemptionPercentage",
      "description": "set tranche redemption percentage.",
      "parameterDecorators": [
        {
          "name": "_trancheNum",
          "description": "tranche number.",
          "recommendedTypes": []
        },
        {
          "name": "_redeemPercent",
          "description": "user redemption percent.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalBlockPerYears()",
      "name": "totalBlockPerYears",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "trancheAddresses(uint256)",
      "name": "trancheAddresses",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "buyerCoinAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "dividendCoinAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "ATrancheAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "BTrancheAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "trancheCounter()",
      "name": "trancheCounter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "trancheParameters(uint256)",
      "name": "trancheParameters",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "trancheAFixedPercentage",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastABlockAction",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "storedTrancheAPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "trancheACurrentRPB",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "redemptionPercentage",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        },
        {
          "name": "cTokenDecimals",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "underlyingDecimals",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tranchesDeployerAddress()",
      "name": "tranchesDeployerAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferTokenToOwner(address,uint256)",
      "name": "transferTokenToOwner",
      "description": "transfer tokens in this contract to owner address.",
      "parameterDecorators": [
        {
          "name": "_tokenContract",
          "description": "token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "token amount to be transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawEthToOwner(uint256)",
      "name": "withdrawEthToOwner",
      "description": "transfer ethers in this contract to owner address.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "ethers amount to be transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}