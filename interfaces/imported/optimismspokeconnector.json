{
  "schema": "../schema.json",
  "tags": [
    "optimism"
  ],
  "name": "OptimismSpokeConnector",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AggregateRootReceived(bytes32)",
      "name": "AggregateRootReceived",
      "description": "",
      "parameterDecorators": [
        {
          "name": "root",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AggregateRootRemoved(bytes32)",
      "name": "AggregateRootRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "root",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Dispatch(bytes32,uint256,bytes32,bytes)",
      "name": "Dispatch",
      "description": "",
      "parameterDecorators": [
        {
          "name": "leaf",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "root",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "message",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MessageProcessed(bytes,address)",
      "name": "MessageProcessed",
      "description": "Emitted whenever a message is successfully received over an AMB.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "- The account that called the function.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "- The account that called the function.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MessageSent(bytes,address)",
      "name": "MessageSent",
      "description": "Emitted whenever a message is successfully sent over an AMB.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "- The account that called the function.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "caller",
          "description": "- The account that called the function.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MirrorConnectorUpdated(address,address)",
      "name": "MirrorConnectorUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "- The account that called the function.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "router",
          "description": "- The address of the disapproved router.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MirrorGasUpdated(uint256,uint256)",
      "name": "MirrorGasUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "- The account that called the function.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "router",
          "description": "- The address of the disapproved router.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewConnector(uint32,uint32,address,address,address)",
      "name": "NewConnector",
      "description": "",
      "parameterDecorators": [
        {
          "name": "domain",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "mirrorDomain",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amb",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rootManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "mirrorConnector",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipProposed(address)",
      "name": "OwnershipProposed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "proposedOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "- The account that called the function.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "router",
          "description": "- The address of the disapproved router.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Process(bytes32,bool,bytes)",
      "name": "Process",
      "description": "",
      "parameterDecorators": [
        {
          "name": "leaf",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "returnData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SenderAdded(address)",
      "name": "SenderAdded",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SenderRemoved(address)",
      "name": "SenderRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WatcherManagerChanged(address)",
      "name": "WatcherManagerChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "watcherManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "AMB()",
      "name": "AMB",
      "description": "Address of the AMB on this domain.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DOMAIN()",
      "name": "DOMAIN",
      "description": "The domain of this Messaging (i.e. Connector) contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MERKLE()",
      "name": "MERKLE",
      "description": "MerkleTreeManager contract instance. Will hold the active tree of message hashes, whose root will be sent crosschain to the hub for aggregation and redistribution.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MIRROR_DOMAIN()",
      "name": "MIRROR_DOMAIN",
      "description": "The domain of the corresponding messaging (i.e. Connector) contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PROCESS_GAS()",
      "name": "PROCESS_GAS",
      "description": "Minimum gas for processing a received message (reserved for handle).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "RESERVE_GAS()",
      "name": "RESERVE_GAS",
      "description": "Reserved gas (to ensure tx completes in case message processing runs out).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ROOT_MANAGER()",
      "name": "ROOT_MANAGER",
      "description": "RootManager contract address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptProposedOwner()",
      "name": "acceptProposedOwner",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addSender(address)",
      "name": "addSender",
      "description": "Adds a sender to the whitelist. Only whitelisted routers (senders) can call `dispatch`.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "delay()",
      "name": "delay",
      "description": "Returns the delay period before a new owner can be accepted.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delayBlocks()",
      "name": "delayBlocks",
      "description": "Number of blocks to delay the processing of a message to allow for watchers to verify the validity and pause if necessary.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dispatch(uint32,bytes32,bytes)",
      "name": "dispatch",
      "description": "This function adds transfers to the outbound transfer merkle tree. The root of this tree will eventually be dispatched to mainnet via `send`. On mainnet (the \"hub\"), it will be combined into a single aggregate root by RootManager (along with outbound roots from other chains). This aggregate root will be redistributed to all destination chains. NOTE: okay to leave dispatch operational when paused as pause is designed for crosschain interactions.",
      "parameterDecorators": [
        {
          "name": "_destinationDomain",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_recipientAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_messageBody",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "home()",
      "name": "home",
      "description": "Get the local inbox contract from the xAppConnectionManager. The local inbox contract is a SpokeConnector with AMBs, and a Home contract with nomad.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The local inbox contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isReplica(address)",
      "name": "isReplica",
      "description": "Determine whether _potentialReplica is an enrolled Replica from the xAppConnectionManager.",
      "parameterDecorators": [
        {
          "name": "_potentialReplica",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if _potentialReplica is an enrolled Replica.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "localDomain()",
      "name": "localDomain",
      "description": "This provides the implementation for what is defined in the ConnectorManager to avoid storing the domain redundantly.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "messages(bytes32)",
      "name": "messages",
      "description": "Mapping of message leaves to MessageStatus, keyed on leaf.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mirrorConnector()",
      "name": "mirrorConnector",
      "description": "Connector on L2 for L1 connectors, and vice versa.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mirrorGas()",
      "name": "mirrorGas",
      "description": "Gas costs forwarded to the `processMessage` call on the mirror domain.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nonces(uint32)",
      "name": "nonces",
      "description": "domain => next available nonce for the domain.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "outboundRoot()",
      "name": "outboundRoot",
      "description": "This returns the root of all messages with the origin domain as this domain (i.e. all outbound messages).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingAggregateRoots(bytes32)",
      "name": "pendingAggregateRoots",
      "description": "This will hold the commit block for incoming aggregateRoots from the hub chain. Once they are verified, (i.e. have surpassed the verification period in `delayBlocks`) they can be used for proving inclusion of crosschain messages.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "processMessage(bytes)",
      "name": "processMessage",
      "description": "Processes a message received by an AMB. This is called by AMBs to process messages originating from mirror connector.",
      "parameterDecorators": [
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposeNewOwner(address)",
      "name": "proposeNewOwner",
      "description": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process.",
      "parameterDecorators": [
        {
          "name": "newlyProposed",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposed()",
      "name": "proposed",
      "description": "Returns the address of the proposed owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposedTimestamp()",
      "name": "proposedTimestamp",
      "description": "Returns the address of the proposed owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proveAndProcess(tuple(bytes,bytes32[32],uint256)[],bytes32,bytes32[32],uint256)",
      "name": "proveAndProcess",
      "description": "Must be able to call the `handle` function on the BridgeRouter contract. This is called on the destination domain to handle incoming messages. Proving: Calculates the expected inbound root from an origin chain given a leaf (message hash), the index of the leaf, and the merkle proof of inclusion (path). Next, we check to ensure that this calculated inbound root is included in the current aggregateRoot, given its index in the aggregator tree and the proof of inclusion. Processing: After all messages have been proven, we dispatch each message to Connext (BridgeRouter) for execution. Currently, ALL messages in a given batch must path to the same shared inboundRoot, meaning they must all share an origin. See open TODO below for a potential solution to enable multi-origin batches.Intended to be called by the relayer at specific intervals during runtime.Will record a calculated root as having been proven if we've already proven that it was included in the aggregateRoot.",
      "parameterDecorators": [
        {
          "name": "_proofs",
          "description": "Batch of Proofs containing messages for proving/processing.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "message",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "path",
              "description": "",
              "type": "bytes32[32]"
            },
            {
              "name": "index",
              "description": "",
              "type": "uint256"
            }
          ]
        },
        {
          "name": "_aggregateRoot",
          "description": "The target aggregate root we want to prove inclusion for. This root must have already been delivered to this spoke connector contract and surpassed the validation period.",
          "recommendedTypes": []
        },
        {
          "name": "_aggregatePath",
          "description": "Merkle path of inclusion for the inbound root.",
          "recommendedTypes": []
        },
        {
          "name": "_aggregateIndex",
          "description": "Index of the inbound root in the aggregator's merkle tree in the hub.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "provenAggregateRoots(bytes32)",
      "name": "provenAggregateRoots",
      "description": "This tracks the roots of the aggregate tree containing outbound roots from all other supported domains. The current version is the one that is known to be past the delayBlocks time period.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "provenMessageRoots(bytes32)",
      "name": "provenMessageRoots",
      "description": "This tracks whether the root has been proven to exist within the given aggregate root.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removePendingAggregateRoot(bytes32)",
      "name": "removePendingAggregateRoot",
      "description": "Manually remove a pending aggregateRoot by owner if the contract is paused. This method is required for handling fraud cases in the current construction.",
      "parameterDecorators": [
        {
          "name": "_fraudulentRoot",
          "description": "Target fraudulent root that should be erased from the `pendingAggregateRoots` mapping.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeSender(address)",
      "name": "removeSender",
      "description": "Removes a sender from the whitelist. Only whitelisted routers (senders) can call `dispatch`.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Renounces ownership of the contract after a delay.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounced()",
      "name": "renounced",
      "description": "Indicates if the ownership has been renounced() by checking if current owner is address(0).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "send()",
      "name": "send",
      "description": "This returns the root of all messages with the origin domain as this domain (i.e. all outbound messages).",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDelayBlocks(uint256)",
      "name": "setDelayBlocks",
      "description": "Set the `delayBlocks`, the period in blocks over which an incoming message is verified.Set the delayBlocks, in case this needs to be configured later.",
      "parameterDecorators": [
        {
          "name": "_delayBlocks",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMirrorConnector(address)",
      "name": "setMirrorConnector",
      "description": "Sets the address of the l2Connector for this domain.",
      "parameterDecorators": [
        {
          "name": "_mirrorConnector",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMirrorGas(uint256)",
      "name": "setMirrorGas",
      "description": "Sets the address of the l2Connector for this domain.",
      "parameterDecorators": [
        {
          "name": "_mirrorGas",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWatcherManager(address)",
      "name": "setWatcherManager",
      "description": "Owner can enroll a watcher (abilities are defined by inheriting contracts).",
      "parameterDecorators": [
        {
          "name": "_watcherManager",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "verifySender(address)",
      "name": "verifySender",
      "description": "Checks the cross domain sender for a given address.",
      "parameterDecorators": [
        {
          "name": "_expected",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistedSenders(address)",
      "name": "whitelistedSenders",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}