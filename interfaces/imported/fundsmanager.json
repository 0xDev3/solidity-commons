{
  "schema": "../schema.json",
  "tags": [],
  "name": "fundsManager",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "aaveAddress()",
      "name": "aaveAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "admin()",
      "name": "admin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bot()",
      "name": "bot",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claim()",
      "name": "claim",
      "description": "claim all crv tokens from the liq gauge.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimAndWithdraw()",
      "name": "claimAndWithdraw",
      "description": "claim all rewarded swrv tokens from the swUSD liq gauge and withdraw.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "creamAddress()",
      "name": "creamAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAaveAddress(address)",
      "name": "setAaveAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_aaveAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAdmin(address)",
      "name": "setAdmin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_admin",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBot(address)",
      "name": "setBot",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_bot",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCreamAddress(address)",
      "name": "setCreamAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_creamAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stake()",
      "name": "stake",
      "description": "Stake all 3CRV tokens to the liq gauge. The 3CRV token needs to be transferred to the contract address.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "topUpAave_unstake(uint256,uint256)",
      "name": "topUpAave_unstake",
      "description": "Unstake from curve pool, convert to USDC, supply USDC to aave, and transfer to aave address.",
      "parameterDecorators": [
        {
          "name": "unstake_amount",
          "description": "amount to unstake.",
          "recommendedTypes": []
        },
        {
          "name": "min_usdc",
          "description": "minimum amount of usdc required to be received from unstake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "topUpCream_unstake(uint256,uint256)",
      "name": "topUpCream_unstake",
      "description": "Unstake swUSD from the swerve gauge, convert all unstaked swUSD to USDC, supply usdc to cream, and transfer to cream address.",
      "parameterDecorators": [
        {
          "name": "unstake_amount",
          "description": "amount of swUSD to unstake.",
          "recommendedTypes": []
        },
        {
          "name": "min_usdc",
          "description": "minimum usdc amount to receive after withdrawing from swerve.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unstake(uint256)",
      "name": "unstake",
      "description": "unStake swUSD tokens from the swUSD liq gauge.",
      "parameterDecorators": [
        {
          "name": "amt",
          "description": "- if zero, unstake all.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawERC20(uint256,address)",
      "name": "withdrawERC20",
      "description": "Allows the admin to withdraw any erc20 in the contract.",
      "parameterDecorators": [
        {
          "name": "amt",
          "description": "The amount of the erc20 to withdraw (zero for all).",
          "recommendedTypes": []
        },
        {
          "name": "address_erc20",
          "description": "The address of the erc20 to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}