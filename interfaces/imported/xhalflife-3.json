{"schema":"../schema.json","tags":[],"name":"XHalfLife","description":"","eventDecorators":[{"signature":"StreamCanceled(uint256,address,address,uint256,uint256)","name":"StreamCanceled","description":"","parameterDecorators":[{"name":"streamId","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true},{"name":"recipient","description":"","recommendedTypes":[],"indexed":true},{"name":"senderBalance","description":"","recommendedTypes":[],"indexed":false},{"name":"recipientBalance","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"StreamCreated(uint256,address,address,address,uint256,uint256,uint256,uint256,bool)","name":"StreamCreated","description":"","parameterDecorators":[{"name":"streamId","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true},{"name":"recipient","description":"","recommendedTypes":[],"indexed":true},{"name":"token","description":"","recommendedTypes":[],"indexed":false},{"name":"depositAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"startBlock","description":"","recommendedTypes":[],"indexed":false},{"name":"kBlock","description":"","recommendedTypes":[],"indexed":false},{"name":"unlockRatio","description":"","recommendedTypes":[],"indexed":false},{"name":"cancelable","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"StreamFunded(uint256,uint256)","name":"StreamFunded","description":"","parameterDecorators":[{"name":"streamId","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"WithdrawFromStream(uint256,address,uint256)","name":"WithdrawFromStream","description":"","parameterDecorators":[{"name":"access","description":"TRUE if the Watcher was given permissions, FALSE if permissions were removed.","recommendedTypes":[],"indexed":true},{"name":"domain","description":"the remote domain of the Home contract for the Replica.","recommendedTypes":[],"indexed":true},{"name":"watcher","description":"the address of the Watcher.","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"balanceOf(uint256)","name":"balanceOf","description":"Returns the available funds for the given stream id and address. Throws if the id does not point to a valid stream.","parameterDecorators":[{"name":"streamId","description":"The id of the stream for which to query the balance.","recommendedTypes":[]}],"returnDecorators":[{"name":"withdrawable","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"remaining","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"cancelStream(uint256)","name":"cancelStream","description":"Cancels the stream and transfers the tokens back. Throws if the id does not point to a valid stream. Throws if the caller is not the sender or the recipient of the stream. Throws if there is a token transfer failure.","parameterDecorators":[{"name":"streamId","description":"The id of the stream to cancel.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"createEtherStream(address,uint256,uint256,uint256,bool)","name":"createEtherStream","description":"Creates a new ether stream funded by `msg.sender` and paid towards `recipient`. Throws if paused. Throws if the recipient is the zero address, the contract itself or the caller. Throws if the depositAmount is 0. Throws if the start block is before `block.number`. Throws if the rate calculation has a math error. Throws if the next stream id calculation has a math error. Throws if the contract is not allowed to transfer enough tokens.","parameterDecorators":[{"name":"recipient","description":"The address towards which the money is streamed.","recommendedTypes":[]},{"name":"startBlock","description":"stream start block.","recommendedTypes":[]},{"name":"kBlock","description":"unlock every k blocks.","recommendedTypes":[]},{"name":"unlockRatio","description":"unlock ratio from remaining balance.","recommendedTypes":[]},{"name":"cancelable","description":"can be cancelled or not.","recommendedTypes":[]}],"returnDecorators":[{"name":"streamId","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"createStream(address,address,uint256,uint256,uint256,uint256,bool)","name":"createStream","description":"Creates a new stream funded by `msg.sender` and paid towards `recipient`. Throws if paused. Throws if the token is not a contract address Throws if the recipient is the zero address, the contract itself or the caller. Throws if the depositAmount is 0. Throws if the start block is before `block.number`. Throws if the rate calculation has a math error. Throws if the next stream id calculation has a math error. Throws if the contract is not allowed to transfer enough tokens.","parameterDecorators":[{"name":"token","description":"The ERC20 token address.","recommendedTypes":[]},{"name":"recipient","description":"The address towards which the money is streamed.","recommendedTypes":[]},{"name":"depositAmount","description":"The amount of money to be streamed.","recommendedTypes":[]},{"name":"startBlock","description":"stream start block.","recommendedTypes":[]},{"name":"kBlock","description":"unlock every k blocks.","recommendedTypes":[]},{"name":"unlockRatio","description":"unlock ratio from remaining balance, value must be between [1-1000], which means 0.1% to 1%.","recommendedTypes":[]},{"name":"cancelable","description":"can be cancelled or not.","recommendedTypes":[]}],"returnDecorators":[{"name":"streamId","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"effectiveValues(uint256)","name":"effectiveValues","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getStream(uint256)","name":"getStream","description":"Returns the stream with all its properties. Throws if the id does not point to a valid stream.","parameterDecorators":[{"name":"streamId","description":"The id of the stream to query.","recommendedTypes":[]}],"returnDecorators":[{"name":"sender","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"recipient","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"token","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"depositAmount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"startBlock","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"kBlock","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"remaining","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"withdrawable","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"unlockRatio","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"lastRewardBlock","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"cancelable","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getVersion()","name":"getVersion","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"hasStream(uint256)","name":"hasStream","description":"Check if given stream exists.","parameterDecorators":[{"name":"streamId","description":"The id of the stream to query.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"lazyFundStream(uint256,uint256)","name":"lazyFundStream","description":"Implemented for XDEX farming and vesting, the amount of fund should be splited to withdrawable and un-withdrawable according to lastRewardBlock. Throws if the caller is not the stream.sender.","parameterDecorators":[{"name":"streamId","description":"The id of the stream to query.","recommendedTypes":[]},{"name":"amount","description":"deposit amount by stream sender.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"nextStreamId()","name":"nextStreamId","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"singleFundStream(uint256,uint256)","name":"singleFundStream","description":"funds to an existing stream(for general purpose), the amount of fund should be simply added to un-withdrawable. Throws if the caller is not the stream.sender.","parameterDecorators":[{"name":"streamId","description":"The id of the stream to query.","recommendedTypes":[]},{"name":"amount","description":"deposit amount by stream sender.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"streams(uint256)","name":"streams","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"depositAmount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"remaining","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"withdrawable","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"startBlock","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"kBlock","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"unlockRatio","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"denom","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"lastRewardBlock","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"token","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"recipient","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"sender","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"cancelable","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"isEntity","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"withdrawFromStream(uint256,uint256)","name":"withdrawFromStream","description":"Withdraws from the contract to the recipient's account. Throws if the id does not point to a valid stream. Throws if the amount exceeds the withdrawable balance. Throws if the amount < the effective withdraw value. Throws if the caller is not the recipient.","parameterDecorators":[{"name":"streamId","description":"The id of the stream to withdraw tokens from.","recommendedTypes":[]},{"name":"amount","description":"The amount of tokens to withdraw.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false}]}