{
  "schema": "../schema.json",
  "tags": [],
  "name": "ReleaseRegistry",
  "description": "",
  "eventDecorators": [
    {
      "signature": "NewClone(address)",
      "name": "NewClone",
      "description": "Emitted when an upgrade path is removed.",
      "parameterDecorators": [
        {
          "name": "vault",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewRelease(uint256,address,string)",
      "name": "NewRelease",
      "description": "Emitted when an upgrade path is removed.",
      "parameterDecorators": [
        {
          "name": "releaseId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "template",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "apiVersion",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when an upgrade path is removed.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "latestRelease()",
      "name": "latestRelease",
      "description": "Returns the api version of the latest release. Throws if no releases are registered yet.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The api version of the latest release. NOTE: Throws if there has not been a release yet.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newRelease(address)",
      "name": "newRelease",
      "description": "Add a previously deployed Vault as the template contract for the latest release, to be used by further \"forwarder-style\" delegatecall proxy contracts that can be deployed from the registry throw other methods (to save gas). Throws if caller isn't `governance`. Throws if `vault`'s governance isn't `governance`. Throws if the api version is the same as the previous release. Emits a `NewVault` event.",
      "parameterDecorators": [
        {
          "name": "_vault",
          "description": "The vault that will be used as the template contract for the next release.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "newVault(address,address,address,string,string)",
      "name": "newVault",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_guardian",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_rewards",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_symbol",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "newVault(address,address,address,address,string,string,uint256)",
      "name": "newVault",
      "description": "Create a new vault for the given token using the latest release in the registry, as a simple \"forwarder-style\" delegatecall proxy to the latest release. Also adds the new vault to the list of \"endorsed\" vaults for that token. Throws if no releases are registered yet.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "The token that may be deposited into the new Vault.",
          "recommendedTypes": []
        },
        {
          "name": "_governance",
          "description": "vault governance.",
          "recommendedTypes": []
        },
        {
          "name": "_guardian",
          "description": "The address authorized for guardian interactions in the new Vault.",
          "recommendedTypes": []
        },
        {
          "name": "_rewards",
          "description": "The address to use for collecting rewards in the new Vault.",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "Specify a custom Vault name. Set to empty string for default choice.",
          "recommendedTypes": []
        },
        {
          "name": "_symbol",
          "description": "Specify a custom Vault symbol name. Set to empty string for default choice.",
          "recommendedTypes": []
        },
        {
          "name": "_releaseDelta",
          "description": "Specify the number of releases prior to the latest to use as a target. Default is latest.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The address of the newly-deployed vault.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "numReleases()",
      "name": "numReleases",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "releases(uint256)",
      "name": "releases",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}