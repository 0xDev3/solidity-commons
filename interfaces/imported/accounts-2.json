{
  "schema": "../schema.json",
  "tags": [],
  "name": "Accounts",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AccountCreated(address)",
      "name": "AccountCreated",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AccountDataEncryptionKeySet(address,bytes)",
      "name": "AccountDataEncryptionKeySet",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "dataEncryptionKey",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AccountMetadataURLSet(address,string)",
      "name": "AccountMetadataURLSet",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "metadataURL",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AccountNameSet(address,string)",
      "name": "AccountNameSet",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AccountWalletAddressSet(address,address)",
      "name": "AccountWalletAddressSet",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "walletAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AttestationSignerAuthorized(address,address)",
      "name": "AttestationSignerAuthorized",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AttestationSignerRemoved(address,address)",
      "name": "AttestationSignerRemoved",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldSigner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DefaultSignerRemoved(address,address,bytes32)",
      "name": "DefaultSignerRemoved",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldSigner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DefaultSignerSet(address,address,bytes32)",
      "name": "DefaultSignerSet",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "IndexedSignerRemoved(address,address,bytes32)",
      "name": "IndexedSignerRemoved",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldSigner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "IndexedSignerSet(address,address,bytes32)",
      "name": "IndexedSignerSet",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LegacySignerRemoved(address,address,bytes32)",
      "name": "LegacySignerRemoved",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldSigner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LegacySignerSet(address,address,bytes32)",
      "name": "LegacySignerSet",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RegistrySet(address)",
      "name": "RegistrySet",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SignerAuthorizationCompleted(address,address,bytes32)",
      "name": "SignerAuthorizationCompleted",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SignerAuthorizationStarted(address,address,bytes32)",
      "name": "SignerAuthorizationStarted",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SignerAuthorized(address,address,bytes32)",
      "name": "SignerAuthorized",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SignerRemoved(address,address,bytes32)",
      "name": "SignerRemoved",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldSigner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ValidatorSignerAuthorized(address,address)",
      "name": "ValidatorSignerAuthorized",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ValidatorSignerRemoved(address,address)",
      "name": "ValidatorSignerRemoved",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldSigner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VoteSignerAuthorized(address,address)",
      "name": "VoteSignerAuthorized",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "signer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VoteSignerRemoved(address,address)",
      "name": "VoteSignerRemoved",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldSigner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "EIP712_AUTHORIZE_SIGNER_TYPEHASH()",
      "name": "EIP712_AUTHORIZE_SIGNER_TYPEHASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "attestationSignerToAccount(address)",
      "name": "attestationSignerToAccount",
      "description": "Returns the account associated with `signer`. Fails if the `signer` is not an account or currently authorized attestation signer.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of the account or currently authorized attestation signer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "authorizeAttestationSigner(address,uint8,bytes32,bytes32)",
      "name": "authorizeAttestationSigner",
      "description": "Authorizes an address to sign attestations on behalf of the account. v, r, s constitute `signer`'s signature on `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of the signing key to authorize.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery id of the incoming ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Output value r of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Output value s of the ECDSA signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorizeSigner(address,bytes32)",
      "name": "authorizeSigner",
      "description": "Begin the process of authorizing an address to sign on behalf of the account.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of the signing key to authorize.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The role to authorize signing for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorizeSignerWithSignature(address,bytes32,uint8,bytes32,bytes32)",
      "name": "authorizeSignerWithSignature",
      "description": "Authorizes an address to act as a signer, for `role`, on behalf of the account. v, r, s constitute `signer`'s EIP712 signature over `role`, `msg.sender` and `signer`.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of the signing key to authorize.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The role to authorize signing for.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery id of the incoming ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Output value r of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Output value s of the ECDSA signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorizeValidatorSigner(address,uint8,bytes32,bytes32)",
      "name": "authorizeValidatorSigner",
      "description": "Authorizes an address to sign consensus messages on behalf of the account. v, r, s constitute `signer`'s signature on `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of the signing key to authorize.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery id of the incoming ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Output value r of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Output value s of the ECDSA signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorizeValidatorSignerWithKeys(address,uint8,bytes32,bytes32,bytes,bytes,bytes)",
      "name": "authorizeValidatorSignerWithKeys",
      "description": "Authorizes an address to sign consensus messages on behalf of the account. v, r, s constitute `signer`'s signature on `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of the signing key to authorize.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery id of the incoming ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Output value r of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Output value s of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "ecdsaPublicKey",
          "description": "The ECDSA public key corresponding to `signer`.",
          "recommendedTypes": []
        },
        {
          "name": "blsPublicKey",
          "description": "The BLS public key that the validator is using for consensus, should pass proof of possession. 96 bytes.",
          "recommendedTypes": []
        },
        {
          "name": "blsPop",
          "description": "The BLS public key proof-of-possession, which consists of a signature on the account address. 48 bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorizeValidatorSignerWithPublicKey(address,uint8,bytes32,bytes32,bytes)",
      "name": "authorizeValidatorSignerWithPublicKey",
      "description": "Authorizes an address to sign consensus messages on behalf of the account. v, r, s constitute `signer`'s signature on `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of the signing key to authorize.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery id of the incoming ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Output value r of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Output value s of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "ecdsaPublicKey",
          "description": "The ECDSA public key corresponding to `signer`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorizeVoteSigner(address,uint8,bytes32,bytes32)",
      "name": "authorizeVoteSigner",
      "description": "Authorizes an address to sign votes on behalf of the account. v, r, s constitute `signer`'s signature on `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of the signing key to authorize.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery id of the incoming ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Output value r of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Output value s of the ECDSA signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "authorizedBy(address)",
      "name": "authorizedBy",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "batchGetMetadataURL(address[])",
      "name": "batchGetMetadataURL",
      "description": "Getter for the metadata of multiple accounts.",
      "parameterDecorators": [
        {
          "name": "accountsToQuery",
          "description": "The addresses of the accounts to get the metadata for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "completeSignerAuthorization(address,bytes32)",
      "name": "completeSignerAuthorization",
      "description": "Finish the process of authorizing an address to sign on behalf of the account.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of account that authorized signing.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The role to finish authorizing for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createAccount()",
      "name": "createAccount",
      "description": "Creates an account.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "eip712DomainSeparator()",
      "name": "eip712DomainSeparator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAttestationSigner(address)",
      "name": "getAttestationSigner",
      "description": "Returns the attestation signer for the specified account.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDataEncryptionKey(address)",
      "name": "getDataEncryptionKey",
      "description": "Getter for the data encryption key and version.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account to get the key for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDefaultSigner(address,bytes32)",
      "name": "getDefaultSigner",
      "description": "Returns the default signer for the specified account and role. If no signer has been specified it will return the account itself.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The role of the signer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getIndexedSigner(address,bytes32)",
      "name": "getIndexedSigner",
      "description": "Returns the indexed signer for the specified account and role. If no signer has been specified it will return the account itself.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The role of the signer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLegacySigner(address,bytes32)",
      "name": "getLegacySigner",
      "description": "Returns the legacy signer for the specified account and role. If no signer has been specified it will return the account itself.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "The address of the account.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The role of the signer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMetadataURL(address)",
      "name": "getMetadataURL",
      "description": "Getter for the metadata of an account.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account to get the metadata for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getName(address)",
      "name": "getName",
      "description": "Getter for the name of an account.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account to get the name for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAuthorizationSigner(address,address,bytes32,uint8,bytes32,bytes32)",
      "name": "getRoleAuthorizationSigner",
      "description": "Returns the address that signed the provided role authorization.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The `account` property signed over in the EIP712 signature.",
          "recommendedTypes": []
        },
        {
          "name": "signer",
          "description": "The `signer` property signed over in the EIP712 signature.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The `role` property signed over in the EIP712 signature.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery id of the incoming ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Output value r of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Output value s of the ECDSA signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getValidatorSigner(address)",
      "name": "getValidatorSigner",
      "description": "Returns the validator signer for the specified account.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVersionNumber()",
      "name": "getVersionNumber",
      "description": "Returns the storage, major, minor, and patch version of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVoteSigner(address)",
      "name": "getVoteSigner",
      "description": "Returns the vote signer for the specified account.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWalletAddress(address)",
      "name": "getWalletAddress",
      "description": "Getter for the wallet address for an account.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account to get the wallet address for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasAuthorizedAttestationSigner(address)",
      "name": "hasAuthorizedAttestationSigner",
      "description": "Returns if account has specified a dedicated attestation signer.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasAuthorizedSigner(address,string)",
      "name": "hasAuthorizedSigner",
      "description": "Checks whether or not the account has a signer registered for the plaintext role. See `hasIndexedSigner` for more gas efficient call.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasAuthorizedValidatorSigner(address)",
      "name": "hasAuthorizedValidatorSigner",
      "description": "Returns if account has specified a dedicated validator signer.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasAuthorizedVoteSigner(address)",
      "name": "hasAuthorizedVoteSigner",
      "description": "Returns if account has specified a dedicated vote signer.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasDefaultSigner(address,bytes32)",
      "name": "hasDefaultSigner",
      "description": "Checks whether or not the account has an indexed signer registered for a role.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasIndexedSigner(address,bytes32)",
      "name": "hasIndexedSigner",
      "description": "Checks whether or not the account has an indexed signer registered for the role.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasLegacySigner(address,bytes32)",
      "name": "hasLegacySigner",
      "description": "Checks whether or not the account has an indexed signer registered for one of the legacy roles.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Used in place of the constructor to allow the contract to be upgradable via proxy.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "The address of the registry core smart contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAccount(address)",
      "name": "isAccount",
      "description": "Check if an account already exists.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAuthorizedSigner(address)",
      "name": "isAuthorizedSigner",
      "description": "Check if an address has been an authorized signer for an account.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The possibly authorized address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isDefaultSigner(address,address,bytes32)",
      "name": "isDefaultSigner",
      "description": "Whether or not the signer has been registered as the default signer for role.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of account that authorized signing.",
          "recommendedTypes": []
        },
        {
          "name": "signer",
          "description": "The address of the signer.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The role that has been authorized.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isIndexedSigner(address,address,bytes32)",
      "name": "isIndexedSigner",
      "description": "Whether or not the signer has been registered as an indexed signer for role.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of account that authorized signing.",
          "recommendedTypes": []
        },
        {
          "name": "signer",
          "description": "The address of the signer.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The role that has been authorized.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isLegacyRole(bytes32)",
      "name": "isLegacyRole",
      "description": "Checks whether the role is one of Vote, Validator or Attestation.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "The role to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isLegacySigner(address,address,bytes32)",
      "name": "isLegacySigner",
      "description": "Whether or not the signer has been registered as the legacy signer for role.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "The address of account that authorized signing.",
          "recommendedTypes": []
        },
        {
          "name": "signer",
          "description": "The address of the signer.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The role that has been authorized.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isSigner(address,address,bytes32)",
      "name": "isSigner",
      "description": "Whether or not the signer has been registered as a signer for role.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of account that authorized signing.",
          "recommendedTypes": []
        },
        {
          "name": "signer",
          "description": "The address of the signer.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The role that has been authorized.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registry()",
      "name": "registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeAttestationSigner()",
      "name": "removeAttestationSigner",
      "description": "Removes the currently authorized attestation signer for the account Note that the signers cannot be reauthorized after they have been removed.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeDefaultSigner(bytes32)",
      "name": "removeDefaultSigner",
      "description": "Removes the signer for a default role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "The role that has been authorized.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeIndexedSigner(bytes32)",
      "name": "removeIndexedSigner",
      "description": "Removes the currently authorized and indexed signer for a specific role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "The role of the signer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeSigner(address,bytes32)",
      "name": "removeSigner",
      "description": "Removes the currently authorized signer for a specific role and if the signer is indexed, remove that as well.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of the signer.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "The role that has been authorized.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeValidatorSigner()",
      "name": "removeValidatorSigner",
      "description": "Removes the currently authorized validator signer for the account Note that the signers cannot be reauthorized after they have been removed.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeVoteSigner()",
      "name": "removeVoteSigner",
      "description": "Removes the currently authorized vote signer for the account. Note that the signers cannot be reauthorized after they have been removed.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAccount(string,bytes,address,uint8,bytes32,bytes32)",
      "name": "setAccount",
      "description": "Convenience Setter for the dataEncryptionKey and wallet address for an account. v, r, s constitute `signer`'s signature on `msg.sender` (unless the wallet address is 0x0 or msg.sender).",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "A string to set as the name of the account.",
          "recommendedTypes": []
        },
        {
          "name": "dataEncryptionKey",
          "description": "secp256k1 public key for data encryption. Preferably compressed.",
          "recommendedTypes": []
        },
        {
          "name": "walletAddress",
          "description": "The wallet address to set for the account.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery id of the incoming ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Output value r of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Output value s of the ECDSA signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAccountDataEncryptionKey(bytes)",
      "name": "setAccountDataEncryptionKey",
      "description": "Setter for the data encryption key and version.",
      "parameterDecorators": [
        {
          "name": "dataEncryptionKey",
          "description": "secp256k1 public key for data encryption. Preferably compressed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setEip712DomainSeparator()",
      "name": "setEip712DomainSeparator",
      "description": "Sets the EIP712 domain separator for the Celo Accounts abstraction.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setIndexedSigner(address,bytes32)",
      "name": "setIndexedSigner",
      "description": "Set the indexed signer for a specific role.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "the address to set as default.",
          "recommendedTypes": []
        },
        {
          "name": "role",
          "description": "the role to register a default signer for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMetadataURL(string)",
      "name": "setMetadataURL",
      "description": "Setter for the metadata of an account.",
      "parameterDecorators": [
        {
          "name": "metadataURL",
          "description": "The URL to access the metadata.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setName(string)",
      "name": "setName",
      "description": "Setter for the name of an account.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "The name to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRegistry(address)",
      "name": "setRegistry",
      "description": "Updates the address pointing to a Registry contract.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "The address of a registry contract for routing to other contracts.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWalletAddress(address,uint8,bytes32,bytes32)",
      "name": "setWalletAddress",
      "description": "Setter for the wallet address for an account. Wallet address can be zero. This means that the owner of the wallet does not want to be paid directly without interaction, and instead wants users to contact them, using the data encryption key, and arrange a payment.v, r, s constitute `signer`'s signature on `msg.sender` (unless the wallet address is 0x0 or msg.sender).",
      "parameterDecorators": [
        {
          "name": "walletAddress",
          "description": "The wallet address to set for the account.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "The recovery id of the incoming ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "Output value r of the ECDSA signature.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "Output value s of the ECDSA signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "signerToAccount(address)",
      "name": "signerToAccount",
      "description": "Returns the account associated with `signer`. Fails if the `signer` is not an account or previously authorized signer.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of the account or previously authorized signer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "validatorSignerToAccount(address)",
      "name": "validatorSignerToAccount",
      "description": "Returns the account associated with `signer`. Fails if the `signer` is not an account or currently authorized validator.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of an account or currently authorized validator signer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "voteSignerToAccount(address)",
      "name": "voteSignerToAccount",
      "description": "Returns the account associated with `signer`. Fails if the `signer` is not an account or currently authorized vote signer.",
      "parameterDecorators": [
        {
          "name": "signer",
          "description": "The address of the account or currently authorized vote signer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}