{"schema":"../schema.json","tags":["tokens","locking"],"name":"Router","description":"Data Request routing smart contract. Routes requests for data from Consumers to authorised data providers. Data providers listen for requests and process data, sending it back to the Consumer's smart contract. An ERC-20 Token fee is charged by the provider, and paid for by the consumer The consumer is also responsible for reimbursing any Tx gas costs incurred by the data provider for submitting the data to their smart contract (within a reasonable limit) This contract uses {AccessControl} to lock permissioned functions using the different roles.","eventDecorators":[{"signature":"DataRequested(address,address,uint256,bytes32,bytes32,uint256,uint256)","name":"DataRequested","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"dataConsumer","description":"","recommendedTypes":[],"indexed":true},{"name":"dataProvider","description":"","recommendedTypes":[],"indexed":true},{"name":"fee","description":"","recommendedTypes":[],"indexed":false},{"name":"data","description":"","recommendedTypes":[],"indexed":false},{"name":"requestId","description":"","recommendedTypes":[],"indexed":true},{"name":"gasPrice","description":"","recommendedTypes":[],"indexed":false},{"name":"expires","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"GasRefundedToProvider(address,address,uint256)","name":"GasRefundedToProvider","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"dataConsumer","description":"","recommendedTypes":[],"indexed":true},{"name":"dataProvider","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"GasToppedUp(address,address,uint256)","name":"GasToppedUp","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"dataConsumer","description":"","recommendedTypes":[],"indexed":true},{"name":"dataProvider","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"GasWithdrawnByConsumer(address,address,uint256)","name":"GasWithdrawnByConsumer","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"dataConsumer","description":"","recommendedTypes":[],"indexed":true},{"name":"dataProvider","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"GrantProviderPermission(address,address)","name":"GrantProviderPermission","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"dataConsumer","description":"","recommendedTypes":[],"indexed":true},{"name":"dataProvider","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RequestCancelled(address,address,bytes32,uint256)","name":"RequestCancelled","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"dataConsumer","description":"","recommendedTypes":[],"indexed":true},{"name":"dataProvider","description":"","recommendedTypes":[],"indexed":true},{"name":"requestId","description":"","recommendedTypes":[],"indexed":true},{"name":"refund","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RequestFulfilled(address,address,bytes32,uint256,address)","name":"RequestFulfilled","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"dataConsumer","description":"","recommendedTypes":[],"indexed":true},{"name":"dataProvider","description":"","recommendedTypes":[],"indexed":true},{"name":"requestId","description":"","recommendedTypes":[],"indexed":true},{"name":"requestedData","description":"","recommendedTypes":[],"indexed":false},{"name":"gasPayer","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RevokeProviderPermission(address,address)","name":"RevokeProviderPermission","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"dataConsumer","description":"","recommendedTypes":[],"indexed":true},{"name":"dataProvider","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"SetGasTopUpLimit(address,uint256,uint256)","name":"SetGasTopUpLimit","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":true},{"name":"oldLimit","description":"","recommendedTypes":[],"indexed":false},{"name":"newLimit","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SetProviderMinFee(address,uint256)","name":"SetProviderMinFee","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"dataProvider","description":"","recommendedTypes":[],"indexed":true},{"name":"minFee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SetProviderPaysGas(address,bool)","name":"SetProviderPaysGas","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"dataProvider","description":"","recommendedTypes":[],"indexed":true},{"name":"providerPays","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokenSet(address)","name":"TokenSet","description":"Emitted when price oracle is changed.","parameterDecorators":[{"name":"tokenAddress","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"EXPECTED_GAS()","name":"EXPECTED_GAS","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"cancelRequest(bytes32)","name":"cancelRequest","description":"cancelRequest - called by data Consumer to cancel a request.","parameterDecorators":[{"name":"_requestId","description":"the request the consumer wishes to cancel.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"success if the execution was successful. Status is checked in the Consumer contract.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"consumerAuthorisedProviders(address,address)","name":"consumerAuthorisedProviders","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"dataRequests(bytes32)","name":"dataRequests","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"dataConsumer","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"dataProvider","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"expires","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"fee","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"gasPrice","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"callbackFunction","description":"","recommendedTypes":[],"solidityType":"bytes4"},{"name":"isSet","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"feesHeld(address,address)","name":"feesHeld","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"fulfillRequest(bytes32,uint256,bytes)","name":"fulfillRequest","description":"fulfillRequest - called by data provider to forward data to the Consumer.","parameterDecorators":[{"name":"_requestId","description":"the request the provider is sending data for.","recommendedTypes":[]},{"name":"_requestedData","description":"the data to send.","recommendedTypes":[]},{"name":"_signature","description":"data provider's signature of the _requestId, _requestedData and Consumer's address this will used to validate the data's origin in the Consumer's contract.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"success if the execution was successful.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"getDataRequestConsumer(bytes32)","name":"getDataRequestConsumer","description":"getDataRequestConsumer - get the dataConsumer for a request.","parameterDecorators":[{"name":"_requestId","description":"bytes32 request id.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"address data consumer contract address.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getDataRequestExpires(bytes32)","name":"getDataRequestExpires","description":"getDataRequestExpires - get the expire timestamp for a request.","parameterDecorators":[{"name":"_requestId","description":"bytes32 request id.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"uint256 expire timestamp.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getDataRequestGasPrice(bytes32)","name":"getDataRequestGasPrice","description":"getDataRequestGasPrice - get the max gas price consumer will pay for a request.","parameterDecorators":[{"name":"_requestId","description":"bytes32 request id.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"uint256 expire timestamp.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getDataRequestProvider(bytes32)","name":"getDataRequestProvider","description":"getDataRequestProvider - get the dataConsumer for a request.","parameterDecorators":[{"name":"_requestId","description":"bytes32 request id.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"address data provider address.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getGasDepositsForConsumer(address)","name":"getGasDepositsForConsumer","description":"getGasDepositsForConsumer - get total gas deposited in Router by a data consumer.","parameterDecorators":[{"name":"_dataConsumer","description":"address of data consumer.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"uint256.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getGasDepositsForConsumerProviders(address,address)","name":"getGasDepositsForConsumerProviders","description":"getGasDepositsForConsumerProviders - get total gas deposited in Router by a data consumer for a given data provider.","parameterDecorators":[{"name":"_dataConsumer","description":"address of data consumer.","recommendedTypes":[]},{"name":"_dataProvider","description":"address of data provider.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"uint256.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getGasTopUpLimit()","name":"getGasTopUpLimit","description":"getGasTopUpLimit - get the gas top up limit.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"uint256 amount in wei.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getProviderMinFee(address)","name":"getProviderMinFee","description":"getProviderMinFee - returns minimum fee provider will accept to fulfill data request.","parameterDecorators":[{"name":"_dataProvider","description":"address of data provider.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"uint256.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getProviderPaysGas(address)","name":"getProviderPaysGas","description":"getProviderPaysGas - returns whether or not the given provider pays gas for sending the fulfillRequest Tx.","parameterDecorators":[{"name":"_dataProvider","description":"address of data provider.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"bool.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTokenAddress()","name":"getTokenAddress","description":"getTokenAddress - get the contract address of the Token being used for paying fees.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"address of the token smart contract.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getTotalGasDeposits()","name":"getTotalGasDeposits","description":"getTotalGasDeposits - get total gas deposited in Router.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"uint256.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"grantProviderPermission(address)","name":"grantProviderPermission","description":"grantProviderPermission - called by Consumer to grant permission to a data provider to send data.","parameterDecorators":[{"name":"_dataProvider","description":"address of the data provider to grant access.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"success if the execution was successful. Status is checked in the Consumer contract.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"initialiseRequest(address,uint256,uint256,uint256,uint256,bytes32,bytes32,bytes4)","name":"initialiseRequest","description":"initialiseRequest - called by Consumer contract to initialise a data request.","parameterDecorators":[{"name":"_dataProvider","description":"address of the data provider. Must be authorised for this consumer.","recommendedTypes":[]},{"name":"_fee","description":"amount of Tokens to pay for data.","recommendedTypes":[]},{"name":"_requestNonce","description":"incremented nonce for Consumer to help prevent request replay.","recommendedTypes":[]},{"name":"_gasPrice","description":"gas price Consumer is willing to pay for data return. Converted to gwei (10 ** 9) in this method.","recommendedTypes":[]},{"name":"_expires","description":"unix epoch for fulfillment expiration, after which cancelRequest can be called for refund.","recommendedTypes":[]},{"name":"_requestId","description":"the generated ID for this request - used to double check request is coming from the Consumer.","recommendedTypes":[]},{"name":"_data","description":"type of data being requested. E.g. PRICE.BTC.USD.AVG requests average price for BTC/USD pair.","recommendedTypes":[]},{"name":"_callbackFunctionSignature","description":"signature of function to call in the Consumer's contract to send the data.","recommendedTypes":[]}],"returnDecorators":[{"name":"success","description":"if the execution was successful. Status is checked in the Consumer contract.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"providerIsAuthorised(address,address)","name":"providerIsAuthorised","description":"providerIsAuthorised - check if provider is authorised for consumer.","parameterDecorators":[{"name":"_dataConsumer","description":"address of the data provider.","recommendedTypes":[]},{"name":"_dataProvider","description":"address of the data provider.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"success if the execution was successful. Status is checked in the Consumer contract.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"requestExists(bytes32)","name":"requestExists","description":"requestExists - check a request ID exists.","parameterDecorators":[{"name":"_requestId","description":"bytes32 request id.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"bool.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"revokeProviderPermission(address)","name":"revokeProviderPermission","description":"revokeProviderPermission - called by Consumer to revoke permission for a data provider to send data.","parameterDecorators":[{"name":"_dataProvider","description":"address of the data provider to revoke access.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"success if the execution was successful. Status is checked in the Consumer contract.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"setGasTopUpLimit(uint256)","name":"setGasTopUpLimit","description":"setGasTopUpLimit set the max amount of ETH that can be sent in a topUpGas Tx.","parameterDecorators":[{"name":"_gasTopUpLimit","description":"amount in wei.","recommendedTypes":[]}],"returnDecorators":[{"name":"success","description":"success.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setProviderMinFee(uint256)","name":"setProviderMinFee","description":"setProviderMinFee - provider calls for setting its minimum fee.","parameterDecorators":[{"name":"_minFee","description":"uint256 - minimum fee provider will accept to fulfill request.","recommendedTypes":[]}],"returnDecorators":[{"name":"success","description":"success.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setProviderPaysGas(bool)","name":"setProviderPaysGas","description":"setProviderPaysGas - provider calls for setting who pays gas for sending the fulfillRequest Tx.","parameterDecorators":[{"name":"_providerPays","description":"bool - true if provider will pay gas.","recommendedTypes":[]}],"returnDecorators":[{"name":"success","description":"success.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"topUpGas(address)","name":"topUpGas","description":"topUpGas data consumer contract calls this function to top up gas Gas is the ETH held by this contract which is used to refund Tx costs to the data provider for fulfilling a request. To prevent silly amounts of ETH being sent, a sensible limit is imposed. Can only top up for authorised providers.","parameterDecorators":[{"name":"_dataProvider","description":"address of data provider.","recommendedTypes":[]}],"returnDecorators":[{"name":"success","description":"success.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"totalFees()","name":"totalFees","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withDrawGasTopUpForProvider(address)","name":"withDrawGasTopUpForProvider","description":"withDrawGasTopUpForProvider data consumer contract calls this function to withdraw any remaining ETH stored in the Router for gas refunds for a specified data provider. Consumer contract will then transfer through to the consumer contract's owner. NOTE - data provider authorisation is not checked, since a consumer needs to be able to withdraw for a data provide that has been revoked.","parameterDecorators":[{"name":"_dataProvider","description":"address of data provider.","recommendedTypes":[]}],"returnDecorators":[{"name":"amountWithdrawn","description":"amountWithdrawn.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false}]}