{"schema":"../schema.json","tags":[],"name":"RealtFaucetUpgradeable","description":"RealtFaucetUpgradeable. set wallet addresses for each role. This contract is used to send xdai to new users.","eventDecorators":[{"signature":"AmountAllowedUpdated(uint256)","name":"AmountAllowedUpdated","description":"","parameterDecorators":[{"name":"updatedAmount","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"FaucetWithdrawed(address,uint256)","name":"FaucetWithdrawed","description":"","parameterDecorators":[{"name":"ownerWallet","description":"","recommendedTypes":[],"indexed":true},{"name":"withdrawedAmount","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"TokenTransferedToUser(address,uint256)","name":"TokenTransferedToUser","description":"","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"transferedAmount","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"donateToFaucet()","name":"donateToFaucet","description":"anyone can donate funds to the faucet contract.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getAdminAddress()","name":"getAdminAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"admin address.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getAdminHash()","name":"getAdminHash","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"hash of admin role.","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getAmountAllowed()","name":"getAmountAllowed","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"the amount that faucet allows to transfer to user.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getModeratorAddress()","name":"getModeratorAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"moderator address.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getModeratorHash()","name":"getModeratorHash","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"hash of moderator role.","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(uint256,address,address)","name":"initialize","description":"","parameterDecorators":[{"name":"_amountAllowed","description":"","recommendedTypes":[]},{"name":"admin","description":"","recommendedTypes":[]},{"name":"moderator","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"setAmountAllowed(uint256)","name":"setAmountAllowed","description":"Only the moderator can call this function.","parameterDecorators":[{"name":"amountAllowed_","description":"is the amount to transfer to users.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"See {IERC165-supportsInterface}.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"transferToUser(address)","name":"transferToUser","description":"Only the moderator can call this function.","parameterDecorators":[{"name":"_user","description":"user address to get token from the faucet.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw(address,uint256)","name":"withdraw","description":"only Admin can call this function. use this function to withdraw when the faucet is not needed anymore.","parameterDecorators":[{"name":"_ownerWallet","description":"the wallet address to which @dev withdraw.","recommendedTypes":[]},{"name":"_amountWithdraw","description":"the amount to withdraw.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}