{"schema":"../schema.json","tags":["tokens","liquidity"],"name":"LiquidityProvider","description":"LiquidityProvider contract. This contract is able to mint SafeExToken for users. To get tokens the users have to send ether to the contract. Then, according to the {fees} the corresponding amount of SafeEx tokens is minted and sent to the user. The {buy} method can also be called to mint a specific amount of tokens.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"SafeEx()","name":"SafeEx","description":"Sets the SafeExToken contract address Requirements: - the caller must be the contract owner - `safe_` cannot be the 0x0 address.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"buy(uint256)","name":"buy","description":"Buys a specific `amount` of SAFE token, remaining eth is sent back to `msg.sender`. Requirements: - the contract cannot be locked - enough eth must be send.","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"fees()","name":"fees","description":"Returns the number of eth wei to pay for 1 SAFE token.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"isLocked()","name":"isLocked","description":"Returns `true` if the contract is locked. When the contract is locked, the user is not able to send eth or use the {buy} method.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"lock()","name":"lock","description":"Locks the contract Requirements: - the caller must be the contract owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. By doing this, the contract is locked and so becomes a zoombi Requirements: - the caller must be the contract owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setFees(uint256)","name":"setFees","description":"Set the fees See {fees} for more information Requirements: - the caller must be the contract owner - fees must be strictly positive.","parameterDecorators":[{"name":"fees_","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSafeEx(address)","name":"setSafeEx","description":"Sets the SafeExToken contract address Requirements: - the caller must be the contract owner - `safe_` cannot be the 0x0 address.","parameterDecorators":[{"name":"safe_","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unlock()","name":"unlock","description":"Un-locks the contract Requirements: - the caller must be the contract owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw()","name":"withdraw","description":"Sends the eth contained at the contract address to the caller Requirements: - the caller must be the contract owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}