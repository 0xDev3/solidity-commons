{
  "schema": "../schema.json",
  "tags": [],
  "name": "ExpiringMultiParty",
  "description": "Expiring Multi Party. Convenient wrapper for Liquidatable.",
  "eventDecorators": [
    {
      "signature": "ContractExpired(address)",
      "name": "ContractExpired",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Deposit(address,uint256)",
      "name": "Deposit",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "collateralAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "DisputeSettled(address,address,address,address,uint256,bool)",
      "name": "DisputeSettled",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "liquidator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "disputer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidationId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "disputeSucceeded",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EmergencyShutdown(address,uint256,uint256)",
      "name": "EmergencyShutdown",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "originalExpirationTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "shutdownTimestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EndedSponsorPosition(address)",
      "name": "EndedSponsorPosition",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "FinalFeesPaid(uint256)",
      "name": "FinalFeesPaid",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LiquidationCreated(address,address,uint256,uint256,uint256,uint256,uint256)",
      "name": "LiquidationCreated",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "liquidator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "liquidationId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokensOutstanding",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lockedCollateral",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidatedCollateral",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidationTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LiquidationDisputed(address,address,address,uint256,uint256)",
      "name": "LiquidationDisputed",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "liquidator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "disputer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "liquidationId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "disputeBondAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LiquidationWithdrawn(address,uint256,uint8,uint256)",
      "name": "LiquidationWithdrawn",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "withdrawalAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidationStatus",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "settlementPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewSponsor(address)",
      "name": "NewSponsor",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PositionCreated(address,uint256,uint256)",
      "name": "PositionCreated",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "collateralAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Redeem(address,uint256,uint256)",
      "name": "Redeem",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "collateralAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RegularFeesPaid(uint256,uint256)",
      "name": "RegularFeesPaid",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "regularFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "lateFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RequestTransferPosition(address)",
      "name": "RequestTransferPosition",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "oldSponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RequestTransferPositionCanceled(address)",
      "name": "RequestTransferPositionCanceled",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "oldSponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RequestTransferPositionExecuted(address,address)",
      "name": "RequestTransferPositionExecuted",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "oldSponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newSponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RequestWithdrawal(address,uint256)",
      "name": "RequestWithdrawal",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "collateralAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RequestWithdrawalCanceled(address,uint256)",
      "name": "RequestWithdrawalCanceled",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "collateralAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RequestWithdrawalExecuted(address,uint256)",
      "name": "RequestWithdrawalExecuted",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "collateralAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SettleExpiredPosition(address,uint256,uint256)",
      "name": "SettleExpiredPosition",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "collateralReturned",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokensBurned",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdrawal(address,uint256)",
      "name": "Withdrawal",
      "description": "Emitted when a Migration is executed. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "collateralAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "cancelTransferPosition()",
      "name": "cancelTransferPosition",
      "description": "Cancels a pending transfer position request.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelWithdrawal()",
      "name": "cancelWithdrawal",
      "description": "Cancels a pending withdrawal request.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collateralCurrency()",
      "name": "collateralCurrency",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collateralRequirement()",
      "name": "collateralRequirement",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "rawValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "contractState()",
      "name": "contractState",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "create(tuple(uint256),tuple(uint256))",
      "name": "create",
      "description": "Creates tokens by creating a new position or by augmenting an existing position. Pulls `collateralAmount` into the sponsor's position and mints `numTokens` of `tokenCurrency`. Reverts if minting these tokens would put the position's collateralization ratio below the global collateralization ratio. This contract must be approved to spend at least `collateralAmount` of `collateralCurrency`.",
      "parameterDecorators": [
        {
          "name": "collateralAmount",
          "description": "is the number of collateral tokens to collateralize the position with.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "numTokens",
          "description": "is the number of tokens to mint from the position.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createLiquidation(address,tuple(uint256),tuple(uint256),tuple(uint256),uint256)",
      "name": "createLiquidation",
      "description": "Liquidates the sponsor's position if the caller has enough synthetic tokens to retire the position's outstanding tokens. Liquidations above a minimum size also reset an ongoing \"slow withdrawal\"'s liveness. This method generates an ID that will uniquely identify liquidation for the sponsor. This contract must be approved to spend at least `tokensLiquidated` of `tokenCurrency` and at least `finalFeeBond` of `collateralCurrency`.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "address of the sponsor to liquidate.",
          "recommendedTypes": []
        },
        {
          "name": "minCollateralPerToken",
          "description": "abort the liquidation if the position's collateral per token is below this value.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "maxCollateralPerToken",
          "description": "abort the liquidation if the position's collateral per token exceeds this value.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "maxTokensToLiquidate",
          "description": "max number of tokens to liquidate.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "deadline",
          "description": "abort the liquidation if the transaction is mined after this timestamp.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "liquidationId",
          "description": "ID of the newly created liquidation.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "tokensLiquidated",
          "description": "amount of synthetic tokens removed and liquidated from the `sponsor`'s position.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "finalFeeBond",
          "description": "amount of collateral to be posted by liquidator and returned if not disputed successfully.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cumulativeFeeMultiplier()",
      "name": "cumulativeFeeMultiplier",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "rawValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(tuple(uint256))",
      "name": "deposit",
      "description": "Transfers `collateralAmount` of `collateralCurrency` into the caller's position. Increases the collateralization level of a position after creation. This contract must be approved to spend at least `collateralAmount` of `collateralCurrency`.",
      "parameterDecorators": [
        {
          "name": "collateralAmount",
          "description": "total amount of collateral tokens to be sent to the sponsor's position.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositTo(address,tuple(uint256))",
      "name": "depositTo",
      "description": "Transfers `collateralAmount` of `collateralCurrency` into the specified sponsor's position. Increases the collateralization level of a position after creation. This contract must be approved to spend at least `collateralAmount` of `collateralCurrency`.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "the sponsor to credit the deposit to.",
          "recommendedTypes": []
        },
        {
          "name": "collateralAmount",
          "description": "total amount of collateral tokens to be sent to the sponsor's position.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "dispute(uint256,address)",
      "name": "dispute",
      "description": "Disputes a liquidation, if the caller has enough collateral to post a dispute bond and pay a fixed final fee charged on each price request. Can only dispute a liquidation before the liquidation expires and if there are no other pending disputes. This contract must be approved to spend at least the dispute bond amount of `collateralCurrency`. This dispute bond amount is calculated from `disputeBondPct` times the collateral in the liquidation.",
      "parameterDecorators": [
        {
          "name": "liquidationId",
          "description": "of the disputed liquidation.",
          "recommendedTypes": []
        },
        {
          "name": "sponsor",
          "description": "the address of the sponsor whose liquidation is being disputed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "totalPaid",
          "description": "amount of collateral charged to disputer (i.e. final fee bond + dispute bond).",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disputeBondPct()",
      "name": "disputeBondPct",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "rawValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "disputerDisputeRewardPct()",
      "name": "disputerDisputeRewardPct",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "rawValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "emergencyShutdown()",
      "name": "emergencyShutdown",
      "description": "Premature contract settlement under emergency circumstances. Only the governor can call this function as they are permissioned within the `FinancialContractAdmin`. Upon emergency shutdown, the contract settlement time is set to the shutdown time. This enables withdrawal to occur via the standard `settleExpired` function. Contract state is set to `ExpiredPriceRequested` which prevents re-entry into this function or the `expire` function. No fees are paid when calling `emergencyShutdown` as the governor who would call the function would also receive the fees.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "excessTokenBeneficiary()",
      "name": "excessTokenBeneficiary",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "expirationTimestamp()",
      "name": "expirationTimestamp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "expire()",
      "name": "expire",
      "description": "Locks contract state in expired and requests oracle price. this function can only be called once the contract is expired and can't be re-called.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "expiryPrice()",
      "name": "expiryPrice",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "rawValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "finder()",
      "name": "finder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCollateral(address)",
      "name": "getCollateral",
      "description": "Accessor method for a sponsor's collateral. This is necessary because the struct returned by the positions() method shows rawCollateral, which isn't a user-readable value.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "address whose collateral amount is retrieved.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "collateralAmount",
          "description": "amount of collateral within a sponsors position.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentTime()",
      "name": "getCurrentTime",
      "description": "Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint for the current Testable timestamp.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLiquidations(address)",
      "name": "getLiquidations",
      "description": "Gets all liquidation information for a given sponsor address.",
      "parameterDecorators": [
        {
          "name": "sponsor",
          "description": "address of the position sponsor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "liquidationData",
          "description": "array of all liquidation information for the given sponsor address.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "sponsor",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "liquidator",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "state",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint8"
            },
            {
              "name": "liquidationTime",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "tokensOutstanding",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "tuple"
            },
            {
              "name": "lockedCollateral",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "tuple"
            },
            {
              "name": "liquidatedCollateral",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "tuple"
            },
            {
              "name": "rawUnitCollateral",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "tuple"
            },
            {
              "name": "disputer",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "settlementPrice",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "tuple"
            },
            {
              "name": "finalFee",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "tuple"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidationLiveness()",
      "name": "liquidationLiveness",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidations(address,uint256)",
      "name": "liquidations",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "sponsor",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "liquidator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "state",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "liquidationTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "tokensOutstanding",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "lockedCollateral",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "liquidatedCollateral",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "rawUnitCollateral",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "disputer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "settlementPrice",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "finalFee",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minSponsorTokens()",
      "name": "minSponsorTokens",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "rawValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "payRegularFees()",
      "name": "payRegularFees",
      "description": "Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract. These must be paid periodically for the life of the contract. If the contract has not paid its regular fee in a week or more then a late penalty is applied which is sent to the caller. If the amount of fees owed are greater than the pfc, then this will pay as much as possible from the available collateral. An event is only fired if the fees charged are greater than 0.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "totalPaid",
          "description": "Amount of collateral that the contract paid (sum of the amount paid to the Store and caller). This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pfc()",
      "name": "pfc",
      "description": "Gets the current profit from corruption for this contract in terms of the collateral currency. This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "pfc value for equal to the current profit from corruption denominated in collateral currency.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "positions(address)",
      "name": "positions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "tokensOutstanding",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "withdrawalRequestPassTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "withdrawalRequestAmount",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "rawCollateral",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        },
        {
          "name": "transferPositionRequestPassTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "priceIdentifier()",
      "name": "priceIdentifier",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rawLiquidationCollateral()",
      "name": "rawLiquidationCollateral",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "rawValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rawTotalPositionCollateral()",
      "name": "rawTotalPositionCollateral",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "rawValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeem(tuple(uint256))",
      "name": "redeem",
      "description": "Burns `numTokens` of `tokenCurrency` and sends back the proportional amount of `collateralCurrency`. Can only be called by a token sponsor. Might not redeem the full proportional amount of collateral in order to account for precision loss. This contract must be approved to spend at least `numTokens` of `tokenCurrency`.",
      "parameterDecorators": [
        {
          "name": "numTokens",
          "description": "is the number of tokens to be burnt for a commensurate amount of collateral.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "amountWithdrawn",
          "description": "The actual amount of collateral withdrawn.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "remargin()",
      "name": "remargin",
      "description": "Theoretically supposed to pay fees and move money between margin accounts to make sure they reflect the NAV of the contract. However, this functionality doesn't apply to this contract. This is supposed to be implemented by any contract that inherits `AdministrateeInterface` and callable only by the Governor contract. This method is therefore minimally implemented in this contract and does nothing.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestTransferPosition()",
      "name": "requestTransferPosition",
      "description": "Requests to transfer ownership of the caller's current position to a new sponsor address. Once the request liveness is passed, the sponsor can execute the transfer and specify the new sponsor. The liveness length is the same as the withdrawal liveness.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestWithdrawal(tuple(uint256))",
      "name": "requestWithdrawal",
      "description": "Starts a withdrawal request that, if passed, allows the sponsor to withdraw` from their position. The request will be pending for `withdrawalLiveness`, during which the position can be liquidated.",
      "parameterDecorators": [
        {
          "name": "collateralAmount",
          "description": "the amount of collateral requested to withdraw.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCurrentTime(uint256)",
      "name": "setCurrentTime",
      "description": "Sets the current time. Will revert if not running in test mode.",
      "parameterDecorators": [
        {
          "name": "time",
          "description": "timestamp to set current Testable time to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settleExpired()",
      "name": "settleExpired",
      "description": "After a contract has passed expiry all token holders can redeem their tokens for underlying at the prevailing price defined by the DVM from the `expire` function. This burns all tokens from the caller of `tokenCurrency` and sends back the proportional amount of `collateralCurrency`. Might not redeem the full proportional amount of collateral in order to account for precision loss. This contract must be approved to spend `tokenCurrency` at least up to the caller's full balance.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "amountWithdrawn",
          "description": "The actual amount of collateral withdrawn.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sponsorDisputeRewardPct()",
      "name": "sponsorDisputeRewardPct",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "rawValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "timerAddress()",
      "name": "timerAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenCurrency()",
      "name": "tokenCurrency",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalPositionCollateral()",
      "name": "totalPositionCollateral",
      "description": "Accessor method for the total collateral stored within the PricelessPositionManager.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "totalCollateral",
          "description": "amount of all collateral within the Expiring Multi Party Contract.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalTokensOutstanding()",
      "name": "totalTokensOutstanding",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "rawValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferPositionPassedRequest(address)",
      "name": "transferPositionPassedRequest",
      "description": "After a passed transfer position request (i.e., by a call to `requestTransferPosition` and waiting `withdrawalLiveness`), transfers ownership of the caller's current position to `newSponsorAddress`. Transferring positions can only occur if the recipient does not already have a position.",
      "parameterDecorators": [
        {
          "name": "newSponsorAddress",
          "description": "is the address to which the position will be transferred.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "trimExcess(address)",
      "name": "trimExcess",
      "description": "Drains any excess balance of the provided ERC20 token to a pre-selected beneficiary. This will drain down to the amount of tracked collateral and drain the full balance of any other token.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "address of the ERC20 token whose excess balance should be drained.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(tuple(uint256))",
      "name": "withdraw",
      "description": "Transfers `collateralAmount` of `collateralCurrency` from the sponsor's position to the sponsor. Reverts if the withdrawal puts this position's collateralization ratio below the global collateralization ratio. In that case, use `requestWithdrawal`. Might not withdraw the full requested amount to account for precision loss.",
      "parameterDecorators": [
        {
          "name": "collateralAmount",
          "description": "is the amount of collateral to withdraw.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "amountWithdrawn",
          "description": "The actual amount of collateral withdrawn.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawLiquidation(uint256,address)",
      "name": "withdrawLiquidation",
      "description": "After a dispute has settled or after a non-disputed liquidation has expired, the sponsor, liquidator, and/or disputer can call this method to receive payments. If the dispute SUCCEEDED: the sponsor, liquidator, and disputer are eligible for payment. If the dispute FAILED: only the liquidator can receive payment. Once all collateral is withdrawn, delete the liquidation data.",
      "parameterDecorators": [
        {
          "name": "liquidationId",
          "description": "uniquely identifies the sponsor's liquidation.",
          "recommendedTypes": []
        },
        {
          "name": "sponsor",
          "description": "address of the sponsor associated with the liquidation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountWithdrawn",
          "description": "the total amount of underlying returned from the liquidation.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawPassedRequest()",
      "name": "withdrawPassedRequest",
      "description": "After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and waiting `withdrawalLiveness`), withdraws `positionData.withdrawalRequestAmount` of collateral currency. Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "amountWithdrawn",
          "description": "The actual amount of collateral withdrawn.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "rawValue",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawalLiveness()",
      "name": "withdrawalLiveness",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}