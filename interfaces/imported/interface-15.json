{
  "schema": "../schema.json",
  "tags": [],
  "name": "NodeOperatorsRegistry",
  "description": "Node Operator registry implementation * See the comment of `INodeOperatorsRegistry`. * NOTE: the code below assumes moderate amount of node operators, e.g. up to 50.",
  "eventDecorators": [
    {
      "signature": "ScriptResult(address,bytes,bytes,bytes)",
      "name": "ScriptResult",
      "description": "",
      "parameterDecorators": [
        {
          "name": "executor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "script",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "input",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "returnData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RecoverToVault(address,address,uint256)",
      "name": "RecoverToVault",
      "description": "",
      "parameterDecorators": [
        {
          "name": "vault",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeOperatorAdded(uint256,string,address,uint64)",
      "name": "NodeOperatorAdded",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rewardAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "stakingLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeOperatorActiveSet(uint256,bool)",
      "name": "NodeOperatorActiveSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "active",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeOperatorNameSet(uint256,string)",
      "name": "NodeOperatorNameSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeOperatorRewardAddressSet(uint256,address)",
      "name": "NodeOperatorRewardAddressSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "rewardAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeOperatorStakingLimitSet(uint256,uint64)",
      "name": "NodeOperatorStakingLimitSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "stakingLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeOperatorTotalStoppedValidatorsReported(uint256,uint64)",
      "name": "NodeOperatorTotalStoppedValidatorsReported",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "totalStopped",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeOperatorTotalKeysTrimmed(uint256,uint64)",
      "name": "NodeOperatorTotalKeysTrimmed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "totalKeysTrimmed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SigningKeyAdded(uint256,bytes)",
      "name": "SigningKeyAdded",
      "description": "",
      "parameterDecorators": [
        {
          "name": "operatorId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pubkey",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SigningKeyRemoved(uint256,bytes)",
      "name": "SigningKeyRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "operatorId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pubkey",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "KeysOpIndexSet(uint256)",
      "name": "KeysOpIndexSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "keysOpIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "hasInitialized()",
      "name": "hasInitialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addSigningKeys(uint256,uint256,bytes,bytes)",
      "name": "addSigningKeys",
      "description": "Add `_quantity` validator signing keys of operator #`_id` to the set of usable keys. Concatenated keys are: `_pubkeys`. Can be done by the DAO in question by using the designated rewards address. Along with each key the DAO has to provide a signatures for the (pubkey, withdrawal_credentials, 32000000000) message. Given that information, the contract'll be able to call deposit_contract.deposit on-chain.",
      "parameterDecorators": [
        {
          "name": "_operator_id",
          "description": "Node Operator id.",
          "recommendedTypes": []
        },
        {
          "name": "_quantity",
          "description": "Number of signing keys provided.",
          "recommendedTypes": []
        },
        {
          "name": "_pubkeys",
          "description": "Several concatenated validator signing keys.",
          "recommendedTypes": []
        },
        {
          "name": "_signatures",
          "description": "Several concatenated signatures for (pubkey, withdrawal_credentials, 32000000000) messages.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getEVMScriptExecutor(bytes)",
      "name": "getEVMScriptExecutor",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_script",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRecoveryVault()",
      "name": "getRecoveryVault",
      "description": "Get the recovery vault for the app.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assignNextSigningKeys(uint256)",
      "name": "assignNextSigningKeys",
      "description": "Selects and returns at most `_numKeys` signing keys (as well as the corresponding signatures) from the set of active keys and marks the selected keys as used. May only be called by the Lido contract.",
      "parameterDecorators": [
        {
          "name": "_numKeys",
          "description": "The number of keys to select. The actual number of selected keys may be less due to the lack of active keys.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "pubkeys",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        },
        {
          "name": "signatures",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "SIGNATURE_LENGTH()",
      "name": "SIGNATURE_LENGTH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SET_NODE_OPERATOR_ADDRESS_ROLE()",
      "name": "SET_NODE_OPERATOR_ADDRESS_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeSigningKeysOperatorBH(uint256,uint256,uint256)",
      "name": "removeSigningKeysOperatorBH",
      "description": "Removes an #`_amount` of validator signing keys starting from #`_index` of operator #`_id` usable keys. Executed on behalf of Node Operator.",
      "parameterDecorators": [
        {
          "name": "_operator_id",
          "description": "Node Operator id.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "Index of the key, starting with 0.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Number of keys to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNodeOperatorName(uint256,string)",
      "name": "setNodeOperatorName",
      "description": "Change human-readable name of the node operator #`_id` to `_name`.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRewardsDistribution(uint256)",
      "name": "getRewardsDistribution",
      "description": "Returns the rewards distribution proportional to the effective stake for each node operator.",
      "parameterDecorators": [
        {
          "name": "_totalRewardShares",
          "description": "Total amount of reward shares to distribute.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "recipients",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "shares",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setNodeOperatorActive(uint256,bool)",
      "name": "setNodeOperatorActive",
      "description": "`_active ? 'Enable' : 'Disable'` the node operator #`_id`.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_active",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "SET_NODE_OPERATOR_NAME_ROLE()",
      "name": "SET_NODE_OPERATOR_NAME_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeSigningKey(uint256,uint256)",
      "name": "removeSigningKey",
      "description": "Removes a validator signing key #`_index` of operator #`_id` from the set of usable keys. Executed on behalf of DAO.",
      "parameterDecorators": [
        {
          "name": "_operator_id",
          "description": "Node Operator id.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "Index of the key, starting with 0.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeSigningKeys(uint256,uint256,uint256)",
      "name": "removeSigningKeys",
      "description": "Removes an #`_amount` of validator signing keys starting from #`_index` of operator #`_id` usable keys. Executed on behalf of DAO.",
      "parameterDecorators": [
        {
          "name": "_operator_id",
          "description": "Node Operator id.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "Index of the key, starting with 0.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Number of keys to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ADD_NODE_OPERATOR_ROLE()",
      "name": "ADD_NODE_OPERATOR_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowRecoverability(address)",
      "name": "allowRecoverability",
      "description": "By default deriving from AragonApp makes it recoverable.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Token address that would be recovered.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addSigningKeysOperatorBH(uint256,uint256,bytes,bytes)",
      "name": "addSigningKeysOperatorBH",
      "description": "Add `_quantity` validator signing keys of operator #`_id` to the set of usable keys. Concatenated keys are: `_pubkeys`. Can be done by node operator in question by using the designated rewards address. Along with each key the DAO has to provide a signatures for the (pubkey, withdrawal_credentials, 32000000000) message. Given that information, the contract'll be able to call deposit_contract.deposit on-chain.",
      "parameterDecorators": [
        {
          "name": "_operator_id",
          "description": "Node Operator id.",
          "recommendedTypes": []
        },
        {
          "name": "_quantity",
          "description": "Number of signing keys provided.",
          "recommendedTypes": []
        },
        {
          "name": "_pubkeys",
          "description": "Several concatenated validator signing keys.",
          "recommendedTypes": []
        },
        {
          "name": "_signatures",
          "description": "Several concatenated signatures for (pubkey, withdrawal_credentials, 32000000000) messages.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "appId()",
      "name": "appId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getActiveNodeOperatorsCount()",
      "name": "getActiveNodeOperatorsCount",
      "description": "Returns number of active node operators.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addNodeOperator(string,address)",
      "name": "addNodeOperator",
      "description": "Add node operator named `_name` with reward address `_rewardAddress` and staking limit = 0.",
      "parameterDecorators": [
        {
          "name": "_name",
          "description": "Human-readable name.",
          "recommendedTypes": []
        },
        {
          "name": "_rewardAddress",
          "description": "Ethereum 1 address which receives stETH rewards for this operator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getInitializationBlock()",
      "name": "getInitializationBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUnusedSigningKeyCount(uint256)",
      "name": "getUnusedSigningKeyCount",
      "description": "Returns number of usable signing keys of the node operator #`_operator_id`.",
      "parameterDecorators": [
        {
          "name": "_operator_id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setNodeOperatorRewardAddress(uint256,address)",
      "name": "setNodeOperatorRewardAddress",
      "description": "Change reward address of the node operator #`_id` to `_rewardAddress`.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_rewardAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getNodeOperator(uint256,bool)",
      "name": "getNodeOperator",
      "description": "Returns the n-th node operator.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "Node Operator id.",
          "recommendedTypes": []
        },
        {
          "name": "_fullInfo",
          "description": "If true, name will be returned as well.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "active",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "rewardAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "stakingLimit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "stoppedValidators",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "totalSigningKeys",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "usedSigningKeys",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferToVault(address)",
      "name": "transferToVault",
      "description": "Send funds to recovery Vault. This contract should never receive funds, but in case it does, this function allows one to recover them.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "Token balance to be sent to recovery vault.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "canPerform(address,bytes32,uint256[])",
      "name": "canPerform",
      "description": "Check whether an action can be performed by a sender for a particular role on this app.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "Sender of the call.",
          "recommendedTypes": []
        },
        {
          "name": "_role",
          "description": "Role on this app.",
          "recommendedTypes": []
        },
        {
          "name": "_params",
          "description": "Permission params for the role.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEVMScriptRegistry()",
      "name": "getEVMScriptRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PUBKEY_LENGTH()",
      "name": "PUBKEY_LENGTH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNodeOperatorsCount()",
      "name": "getNodeOperatorsCount",
      "description": "Returns total number of node operators.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setNodeOperatorStakingLimit(uint256,uint64)",
      "name": "setNodeOperatorStakingLimit",
      "description": "Set the maximum number of validators to stake for the node operator #`_id` to `_stakingLimit`.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_stakingLimit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getSigningKey(uint256,uint256)",
      "name": "getSigningKey",
      "description": "Returns n-th signing key of the node operator #`_operator_id`.",
      "parameterDecorators": [
        {
          "name": "_operator_id",
          "description": "Node Operator id.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "Index of the key, starting with 0.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "key",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        },
        {
          "name": "depositSignature",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        },
        {
          "name": "used",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reportStoppedValidators(uint256,uint64)",
      "name": "reportStoppedValidators",
      "description": "Report `_stoppedIncrement` more stopped validators of the node operator #`_id`.",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_stoppedIncrement",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_lido",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "REPORT_STOPPED_VALIDATORS_ROLE()",
      "name": "REPORT_STOPPED_VALIDATORS_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getKeysOpIndex()",
      "name": "getKeysOpIndex",
      "description": "Returns a monotonically increasing counter that gets incremented when any of the following happens: 1. a node operator's key(s) is added; 2. a node operator's key(s) is removed; 3. a node operator's approved keys limit is changed. 4. a node operator was activated/deactivated. Activation or deactivation of node operator might lead to usage of unvalidated keys in the assignNextSigningKeys method.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "kernel()",
      "name": "kernel",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SET_NODE_OPERATOR_ACTIVE_ROLE()",
      "name": "SET_NODE_OPERATOR_ACTIVE_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SET_NODE_OPERATOR_LIMIT_ROLE()",
      "name": "SET_NODE_OPERATOR_LIMIT_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalSigningKeyCount(uint256)",
      "name": "getTotalSigningKeyCount",
      "description": "Returns total number of signing keys of the node operator #`_operator_id`.",
      "parameterDecorators": [
        {
          "name": "_operator_id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPetrified()",
      "name": "isPetrified",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeSigningKeyOperatorBH(uint256,uint256)",
      "name": "removeSigningKeyOperatorBH",
      "description": "Removes a validator signing key #`_index` of operator #`_id` from the set of usable keys. Executed on behalf of Node Operator.",
      "parameterDecorators": [
        {
          "name": "_operator_id",
          "description": "Node Operator id.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "Index of the key, starting with 0.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "MANAGE_SIGNING_KEYS()",
      "name": "MANAGE_SIGNING_KEYS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "trimUnusedKeys()",
      "name": "trimUnusedKeys",
      "description": "Remove unused signing keys. Function is used by the Lido contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}