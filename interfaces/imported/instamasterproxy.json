{
  "schema": "../schema.json",
  "tags": [],
  "name": "InstaMasterProxy",
  "description": "This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "changeProxyAdmin(address,address)",
      "name": "changeProxyAdmin",
      "description": "Changes the admin of `proxy` to `newAdmin`. Requirements: - This contract must be the current admin of `proxy`.",
      "parameterDecorators": [
        {
          "name": "proxy",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getProxyAdmin(address)",
      "name": "getProxyAdmin",
      "description": "Returns the current admin of `proxy`. Requirements: - This contract must be the admin of `proxy`.",
      "parameterDecorators": [
        {
          "name": "proxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProxyImplementation(address)",
      "name": "getProxyImplementation",
      "description": "Returns the current implementation of `proxy`. Requirements: - This contract must be the admin of `proxy`.",
      "parameterDecorators": [
        {
          "name": "proxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "instaIndex()",
      "name": "instaIndex",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "upgrade(address,address)",
      "name": "upgrade",
      "description": "Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}. Requirements: - This contract must be the admin of `proxy`.",
      "parameterDecorators": [
        {
          "name": "proxy",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeAndCall(address,address,bytes)",
      "name": "upgradeAndCall",
      "description": "Upgrades `proxy` to `implementation` and calls a function on the new implementation. See {TransparentUpgradeableProxy-upgradeToAndCall}. Requirements: - This contract must be the admin of `proxy`.",
      "parameterDecorators": [
        {
          "name": "proxy",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}