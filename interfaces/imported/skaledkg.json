{"schema":"../schema.json","tags":[],"name":"SkaleDKG","description":"SkaleDKG. Contains functions to manage distributed key generation per Joint-Feldman protocol.","eventDecorators":[{"signature":"AllDataReceived(bytes32,uint256)","name":"AllDataReceived","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[],"indexed":true},{"name":"nodeIndex","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"BadGuy(uint256)","name":"BadGuy","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"nodeIndex","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"BroadcastAndKeyShare(bytes32,uint256,tuple[],tuple[])","name":"BroadcastAndKeyShare","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[],"indexed":true},{"name":"fromNode","description":"","recommendedTypes":[],"indexed":true},{"name":"verificationVector","description":"","recommendedTypes":[],"indexed":false},{"name":"secretKeyContribution","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ChannelClosed(bytes32)","name":"ChannelClosed","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ChannelOpened(bytes32)","name":"ChannelOpened","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ComplaintError(string)","name":"ComplaintError","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"error","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ComplaintSent(bytes32,uint256,uint256)","name":"ComplaintSent","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[],"indexed":true},{"name":"fromNodeIndex","description":"","recommendedTypes":[],"indexed":true},{"name":"toNodeIndex","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"FailedDKG(bytes32)","name":"FailedDKG","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"NewGuy(uint256)","name":"NewGuy","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"nodeIndex","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"SuccessfulDKG(bytes32)","name":"SuccessfulDKG","description":"An event emitted when a vote has been cast on a proposal. Triggers on new deposit call.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"COMPLAINT_TIMELIMIT()","name":"COMPLAINT_TIMELIMIT","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"alright(bytes32,uint256)","name":"alright","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"fromNodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"broadcast(bytes32,uint256,tuple(tuple,tuple)[],tuple(bytes32[2],bytes32)[])","name":"broadcast","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"nodeIndex","description":"","recommendedTypes":[]},{"name":"verificationVector","description":"","recommendedTypes":[],"parameters":[{"name":"x","description":"","type":"tuple"},{"name":"y","description":"","type":"tuple"}]},{"name":"secretKeyContribution","description":"","recommendedTypes":[],"parameters":[{"name":"publicKey","description":"","type":"bytes32[2]"},{"name":"share","description":"","type":"bytes32"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"channels(bytes32)","name":"channels","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"active","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"n","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"startedBlockTimestamp","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"startedBlock","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"complaint(bytes32,uint256,uint256)","name":"complaint","description":"Creates a complaint from a node (accuser) to a given node. The accusing node must broadcast additional parameters within 1800 blocks. Emits {ComplaintSent} or {ComplaintError} event. Requirements: - `msg.sender` must have an associated node.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"fromNodeIndex","description":"","recommendedTypes":[]},{"name":"toNodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["ComplaintSent(bytes32,uint256,uint256)","ComplaintError(string)"],"readOnly":false},{"signature":"complaintBadData(bytes32,uint256,uint256)","name":"complaintBadData","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"fromNodeIndex","description":"","recommendedTypes":[]},{"name":"toNodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"complaints(bytes32)","name":"complaints","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"nodeToComplaint","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"fromNodeToComplaint","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"startComplaintBlockTimestamp","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"isResponse","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"keyShare","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"sumOfVerVec","description":"","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"contractManager()","name":"contractManager","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"deleteChannel(bytes32)","name":"deleteChannel","description":"Allows SchainsInternal contract to delete a channel. Requirements: - Channel must exist.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"dkgProcess(bytes32)","name":"dkgProcess","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"numberOfBroadcasted","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"numberOfCompleted","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getAlrightStartedTime(bytes32)","name":"getAlrightStartedTime","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getChannelStartedBlock(bytes32)","name":"getChannelStartedBlock","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getChannelStartedTime(bytes32)","name":"getChannelStartedTime","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getComplaintData(bytes32)","name":"getComplaintData","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getComplaintStartedTime(bytes32)","name":"getComplaintStartedTime","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getNumberOfBroadcasted(bytes32)","name":"getNumberOfBroadcasted","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getNumberOfCompleted(bytes32)","name":"getNumberOfCompleted","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getT(uint256)","name":"getT","description":"","parameterDecorators":[{"name":"n","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTimeOfLastSuccesfulDKG(bytes32)","name":"getTimeOfLastSuccesfulDKG","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"hashedData(bytes32,uint256)","name":"hashedData","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address)","name":"initialize","description":"","parameterDecorators":[{"name":"contractsAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isAllDataReceived(bytes32,uint256)","name":"isAllDataReceived","description":"Checks whether all data has been received by node.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isAlrightPossible(bytes32,uint256)","name":"isAlrightPossible","description":"Checks whether sending Alright response is possible.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isBroadcastPossible(bytes32,uint256)","name":"isBroadcastPossible","description":"Checks whether broadcast is possible.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isChannelOpened(bytes32)","name":"isChannelOpened","description":"Checks whether channel is opened.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isComplaintPossible(bytes32,uint256,uint256)","name":"isComplaintPossible","description":"Checks whether complaint is possible.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"fromNodeIndex","description":"","recommendedTypes":[]},{"name":"toNodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isEveryoneBroadcasted(bytes32)","name":"isEveryoneBroadcasted","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isLastDKGSuccessful(bytes32)","name":"isLastDKGSuccessful","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isNodeBroadcasted(bytes32,uint256)","name":"isNodeBroadcasted","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isPreResponsePossible(bytes32,uint256)","name":"isPreResponsePossible","description":"Checks whether sending a pre-response is possible.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isResponsePossible(bytes32,uint256)","name":"isResponsePossible","description":"Checks whether sending a response is possible.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"nodeIndex","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"lastSuccesfulDKG(bytes32)","name":"lastSuccesfulDKG","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"openChannel(bytes32)","name":"openChannel","description":"Allows Schains and NodeRotation contracts to open a channel. Emits a {ChannelOpened} event. Requirements: - Channel is not already created.","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["ChannelOpened(bytes32)"],"readOnly":false},{"signature":"preResponse(bytes32,uint256,tuple(tuple,tuple)[],tuple(tuple,tuple)[],tuple(bytes32[2],bytes32)[])","name":"preResponse","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"fromNodeIndex","description":"","recommendedTypes":[]},{"name":"verificationVector","description":"","recommendedTypes":[],"parameters":[{"name":"x","description":"","type":"tuple"},{"name":"y","description":"","type":"tuple"}]},{"name":"verificationVectorMult","description":"","recommendedTypes":[],"parameters":[{"name":"x","description":"","type":"tuple"},{"name":"y","description":"","type":"tuple"}]},{"name":"secretKeyContribution","description":"","recommendedTypes":[],"parameters":[{"name":"publicKey","description":"","type":"bytes32[2]"},{"name":"share","description":"","type":"bytes32"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"response(bytes32,uint256,uint256,tuple(tuple,tuple))","name":"response","description":"","parameterDecorators":[{"name":"schainId","description":"","recommendedTypes":[]},{"name":"fromNodeIndex","description":"","recommendedTypes":[]},{"name":"secretNumber","description":"","recommendedTypes":[]},{"name":"multipliedShare","description":"","recommendedTypes":[],"parameters":[{"name":"x","description":"","type":"tuple"},{"name":"y","description":"","type":"tuple"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"startAlrightTimestamp(bytes32)","name":"startAlrightTimestamp","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}