{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "GeneralIndexModule",
  "description": "GeneralIndexModule.",
  "eventDecorators": [
    {
      "signature": "AnyoneTradeUpdated(address,bool)",
      "name": "AnyoneTradeUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_status",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AssetExchangeUpdated(address,address,string)",
      "name": "AssetExchangeUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_component",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newExchangeName",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AssetTargetsRaised(address,uint256)",
      "name": "AssetTargetsRaised",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "positionMultiplier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CoolOffPeriodUpdated(address,address,uint256)",
      "name": "CoolOffPeriodUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_component",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newCoolOffPeriod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExchangeDataUpdated(address,address,bytes)",
      "name": "ExchangeDataUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_component",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newExchangeData",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RaiseTargetPercentageUpdated(address,uint256)",
      "name": "RaiseTargetPercentageUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_raiseTargetPercentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RebalanceStarted(address,address[],uint256[],uint256)",
      "name": "RebalanceStarted",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TradeExecuted(address,address,address,address,address,uint256,uint256,uint256)",
      "name": "TradeExecuted",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_sellComponent",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_buyComponent",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_exchangeAdapter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_executor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_netAmountSold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_netAmountReceived",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_protocolFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TradeMaximumUpdated(address,address,uint256)",
      "name": "TradeMaximumUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_component",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newMaximum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TraderStatusUpdated(address,address,bool)",
      "name": "TraderStatusUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_trader",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_status",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "calculateTradeSizeAndDirection(address,address,uint256)",
      "name": "calculateTradeSizeAndDirection",
      "description": "Calculates the amount of a component is going to be traded and whether the component is being bought or sold. If currentUnit and targetUnit are the same, function will revert.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Instance of the CKToken to rebalance.",
          "recommendedTypes": []
        },
        {
          "name": "_component",
          "description": "IERC20 component to trade.",
          "recommendedTypes": []
        },
        {
          "name": "_totalSupply",
          "description": "Total supply of _ckToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isSendTokenFixed",
          "description": "Boolean indicating fixed asset is send token.",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "totalFixedQuantity",
          "description": "Amount of fixed token to send or receive.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executionInfo(address,address)",
      "name": "executionInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "targetUnit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "maxSize",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "coolOffPeriod",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastTradeTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "exchangeName",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "exchangeData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllowedTraders(address)",
      "name": "getAllowedTraders",
      "description": "Get the list of traders who are allowed to call trade(), tradeRemainingWeth(), and raiseAssetTarget().",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address[].",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getComponentTradeQuantityAndDirection(address,address)",
      "name": "getComponentTradeQuantityAndDirection",
      "description": "Calculates the amount of a component that is going to be traded and whether the component is being bought or sold. If currentUnit and targetUnit are the same, function will revert.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Instance of the CKToken to rebalance.",
          "recommendedTypes": []
        },
        {
          "name": "_component",
          "description": "IERC20 component to trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "isSendTokenFixed Boolean indicating fixed asset is send token.",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "_1",
          "description": "componentQuantity Amount of component being traded.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getIsAllowedTrader(address,address)",
      "name": "getIsAllowedTrader",
      "description": "Get if a given address is an allowed trader.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        },
        {
          "name": "_trader",
          "description": "Address of the trader.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool True if _trader is allowed to trade, else false.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRebalanceComponents(address)",
      "name": "getRebalanceComponents",
      "description": "Get the array of CKToken components involved in rebalance.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address[] Array of _ckToken components involved in rebalance.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "MANAGER ONLY: Called to initialize module to CKToken in order to allow GeneralIndexModule access for rebalances. Grabs the current units for each asset in the CK and CK's the targetUnit to that unit in order to prevent any trading until startRebalance() is explicitly called. Position multiplier is also logged in order to make sure any position multiplier changes don't unintentionally open the CK for rebalancing.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "permissionInfo(address)",
      "name": "permissionInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "anyoneTrade",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "raiseAssetTargets(address)",
      "name": "raiseAssetTargets",
      "description": "ACCESS LIMITED: For situation where all target units met and remaining WETH, uniformly raise targets by same percentage by applying to logged positionMultiplier in RebalanceInfo struct, in order to allow further trading. Can be called multiple times if necessary, targets are increased by amount specified by raiseAssetTargetsPercentage as ck by manager. In order to reduce tracking error raising the target by a smaller amount allows greater granularity in finding an equilibrium between the excess ETH and components that need to be bought. Raising the targets too much could result in vastly under allocating to WETH as more WETH than necessary is spent buying the components to meet their new target.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rebalanceInfo(address)",
      "name": "rebalanceInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "positionMultiplier",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "raiseTargetPercentage",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeModule()",
      "name": "removeModule",
      "description": "Called by a CKToken to notify that this module was removed from the CKToken. Clears the rebalanceInfo and permissionsInfo of the calling CKToken. // importANT: CKToken's execution settings, including trade maximums and exchange names, are NOT DELETED. Restoring a previously removed module requires that care is taken to initialize execution settings appropriately.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAnyoneTrade(address,bool)",
      "name": "setAnyoneTrade",
      "description": "MANAGER ONLY: Toggle whether anyone can trade, if true bypasses the traderAllowList. Can be called at anytime.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        },
        {
          "name": "_status",
          "description": "Boolean indicating if anyone can trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCoolOffPeriods(address,address[],uint256[])",
      "name": "setCoolOffPeriods",
      "description": "MANAGER ONLY: Set cool off periods for passed components of the CKToken. Can be called at any time.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        },
        {
          "name": "_components",
          "description": "Array of components.",
          "recommendedTypes": []
        },
        {
          "name": "_coolOffPeriods",
          "description": "Array of cool off periods to correct component.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setExchangeData(address,address[],bytes[])",
      "name": "setExchangeData",
      "description": "MANAGER ONLY: Set arbitrary byte data on a per asset basis that can be used to pass exchange specific settings (i.e. specifying fee tiers) or exchange specific features (enabling multi-hop trades). Can be called at any time.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        },
        {
          "name": "_components",
          "description": "Array of components.",
          "recommendedTypes": []
        },
        {
          "name": "_exchangeData",
          "description": "Array of exchange specific arbitrary bytes data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setExchanges(address,address[],string[])",
      "name": "setExchanges",
      "description": "MANAGER ONLY: Set exchange for passed components of the CKToken. Can be called at anytime.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        },
        {
          "name": "_components",
          "description": "Array of components.",
          "recommendedTypes": []
        },
        {
          "name": "_exchangeNames",
          "description": "Array of exchange names mapping to correct component.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRaiseTargetPercentage(address,uint256)",
      "name": "setRaiseTargetPercentage",
      "description": "MANAGER ONLY: Set amount by which all component's targets units would be raised. Can be called at any time.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        },
        {
          "name": "_raiseTargetPercentage",
          "description": "Amount to raise all component's unit targets by (in precise units).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTradeMaximums(address,address[],uint256[])",
      "name": "setTradeMaximums",
      "description": "MANAGER ONLY: Set trade maximums for passed components of the CKToken. Can be called at anytime. Note: Trade maximums must be set before rebalance can begin properly - they are zero by default and trades will not execute if a component's trade size is greater than the maximum.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        },
        {
          "name": "_components",
          "description": "Array of components.",
          "recommendedTypes": []
        },
        {
          "name": "_tradeMaximums",
          "description": "Array of trade maximums mapping to correct component.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTraderStatus(address,address[],bool[])",
      "name": "setTraderStatus",
      "description": "MANAGER ONLY: Toggles ability for passed addresses to call trade() or tradeRemainingWETH(). Can be called at any time.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        },
        {
          "name": "_traders",
          "description": "Array trader addresses to toggle status.",
          "recommendedTypes": []
        },
        {
          "name": "_statuses",
          "description": "Booleans indicating if matching trader can trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "startRebalance(address,address[],uint256[],uint256[],uint256)",
      "name": "startRebalance",
      "description": "MANAGER ONLY: Changes the target allocation of the CK, opening it up for trading by the CKs designated traders. The manager must pass in any new components and their target units (units defined by the amount of that component the manager wants in 10**18 units of a CKToken). Old component target units must be passed in, in the current order of the components array on the CKToken. If a component is being removed it's index in the _oldComponentsTargetUnits should be set to 0. Additionally, the positionMultiplier is passed in, in order to adjust the target units in the event fees are accrued or some other activity occurs that changes the positionMultiplier of the CK. This guarantees the same relative allocation between all the components.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken to be rebalanced.",
          "recommendedTypes": []
        },
        {
          "name": "_newComponents",
          "description": "Array of new components to add to allocation.",
          "recommendedTypes": []
        },
        {
          "name": "_newComponentsTargetUnits",
          "description": "Array of target units at end of rebalance for new components, maps to same index of _newComponents array.",
          "recommendedTypes": []
        },
        {
          "name": "_oldComponentsTargetUnits",
          "description": "Array of target units at end of rebalance for old component, maps to same index of _ckToken.getComponents() array, if component being removed set to 0.",
          "recommendedTypes": []
        },
        {
          "name": "_positionMultiplier",
          "description": "Position multiplier when target units were calculated, needed in order to adjust target units if fees accrued.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "trade(address,address,uint256)",
      "name": "trade",
      "description": "ACCESS LIMITED: Calling trade() pushes the current component units closer to the target units defined by the manager in startRebalance(). Only approved addresses can call, if anyoneTrade is false then contracts are allowed to call otherwise calling address must be EOA. Trade can be called at anytime but will revert if the passed component's target unit is met or cool off period hasn't passed. Trader can pass in a max/min amount of ETH spent/received in the trade based on if the component is being bought/sold in order to prevent sandwich attacks. The parameters defined by the manager are used to determine which exchange will be used and the size of the trade. Trade size will default to max trade size unless the max trade size would exceed the target, then an amount that would match the target unit is traded. Protocol fees, if enabled, are collected in the token received in a trade.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        },
        {
          "name": "_component",
          "description": "Address of CKToken component to trade.",
          "recommendedTypes": []
        },
        {
          "name": "_ethQuantityLimit",
          "description": "Max/min amount of ETH spent/received during trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tradeRemainingWETH(address,address,uint256)",
      "name": "tradeRemainingWETH",
      "description": "ACCESS LIMITED: Only callable when 1) there are no more components to be sold and, 2) entire remaining WETH amount (above WETH target) can be traded such that resulting inflows won't exceed component's maxTradeSize nor overshoot the target unit. To be used near the end of rebalances when a component's calculated trade size is greater in value than remaining WETH. Only approved addresses can call, if anyoneTrade is false then contracts are allowed to call otherwise calling address must be EOA. Trade can be called at anytime but will revert if the passed component's target unit is met or cool off period hasn't passed. Like with trade() a minimum component receive amount can be set.",
      "parameterDecorators": [
        {
          "name": "_ckToken",
          "description": "Address of the CKToken.",
          "recommendedTypes": []
        },
        {
          "name": "_component",
          "description": "Address of the CKToken component to trade.",
          "recommendedTypes": []
        },
        {
          "name": "_minComponentReceived",
          "description": "Min amount of component received during trade.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "weth()",
      "name": "weth",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}