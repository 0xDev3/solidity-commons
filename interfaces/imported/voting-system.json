{
  "schema": "../schema.json",
  "tags": [
    "dao",
    "voting"
  ],
  "name": "Voting",
  "description": "Voting system. Development in progress, stay free to modify this contract. You can use this contract for a DAO.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProposalRegistered(uint256)",
      "name": "ProposalRegistered",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Voted(address,uint256)",
      "name": "Voted",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "voter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VoterRegistered(address)",
      "name": "VoterRegistered",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "voterAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WorkflowStatusChange(uint8,uint8)",
      "name": "WorkflowStatusChange",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "previousStatus",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newStatus",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "checkVoterInfo(bool)",
      "name": "checkVoterInfo",
      "description": "Events ///. Enum for the different step in the voting process.",
      "parameterDecorators": [
        {
          "name": "present",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "getVoterInfo(tuple)",
      "name": "getVoterInfo",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "voter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addProposal(string)",
      "name": "addProposal",
      "description": "Voter add proposal.",
      "parameterDecorators": [
        {
          "name": "_desc",
          "description": "content of proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addVoter(address)",
      "name": "addVoter",
      "description": "Add a voter with his blockchain address.",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "of voter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "checkVoter(address)",
      "name": "checkVoter",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "endProposalsRegistering()",
      "name": "endProposalsRegistering",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "endVotingSession()",
      "name": "endVotingSession",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getOneProposal(uint256)",
      "name": "getOneProposal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "description",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "string"
            },
            {
              "name": "voteCount",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVoter(address)",
      "name": "getVoter",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "isRegistered",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "hasVoted",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "votedProposalId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWinner()",
      "name": "getWinner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "description",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "string"
            },
            {
              "name": "voteCount",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWinners()",
      "name": "getWinners",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "description",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "string"
            },
            {
              "name": "voteCount",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWorkflowStatus()",
      "name": "getWorkflowStatus",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposalsArray(uint256)",
      "name": "proposalsArray",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "description",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "voteCount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setVote(uint256)",
      "name": "setVote",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "startProposalsRegistering()",
      "name": "startProposalsRegistering",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "startVotingSession()",
      "name": "startVotingSession",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tallyVotes()",
      "name": "tallyVotes",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tallyVotesDraw()",
      "name": "tallyVotesDraw",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "workflowStatus()",
      "name": "workflowStatus",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}