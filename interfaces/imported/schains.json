{
  "schema": "../schema.json",
  "tags": [],
  "name": "Schains",
  "description": "Schains. Contains functions to manage Schains such as Schain creation, deletion, and rotation.",
  "eventDecorators": [
    {
      "signature": "NodeAdded(bytes32,uint256)",
      "name": "NodeAdded",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "schainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newNode",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeRotated(bytes32,uint256,uint256)",
      "name": "NodeRotated",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "schainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldNode",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newNode",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SchainCreated(string,address,uint256,uint256,uint256,uint256,uint16,bytes32,uint256,uint256)",
      "name": "SchainCreated",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "partOfNode",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lifetime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "numberOfNodes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "schainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "time",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "gasSpend",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SchainDeleted(address,string,bytes32)",
      "name": "SchainDeleted",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "schainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SchainNodes(string,bytes32,uint256[],uint256,uint256)",
      "name": "SchainNodes",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "schainId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "nodesInGroup",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "time",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "gasSpend",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SCHAIN_CREATOR_ROLE()",
      "name": "SCHAIN_CREATOR_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addSchain(address,uint256,bytes)",
      "name": "addSchain",
      "description": "Allows SkaleManager contract to create an Schain. Emits an {SchainCreated} event. Requirements: - Schain type is valid. - There is sufficient deposit to create type of schain.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "SchainCreated(string,address,uint256,uint256,uint256,uint256,uint16,bytes32,uint256,uint256)"
      ],
      "readOnly": false
    },
    {
      "signature": "addSchainByFoundation(uint256,uint8,uint16,string)",
      "name": "addSchainByFoundation",
      "description": "",
      "parameterDecorators": [
        {
          "name": "lifetime",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "typeOfSchain",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addSpace(uint256,uint8)",
      "name": "addSpace",
      "description": "addSpace - return occupied space to Node.",
      "parameterDecorators": [
        {
          "name": "nodeIndex",
          "description": "- index of Node at common array of Nodes.",
          "recommendedTypes": []
        },
        {
          "name": "partOfNode",
          "description": "- divisor of given type of Schain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "contractManager()",
      "name": "contractManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deleteSchain(address,string)",
      "name": "deleteSchain",
      "description": "Allows SkaleManager to remove an schain from the network. Upon removal, the space availability of each node is updated. Emits an {SchainDeleted} event. Requirements: - Executed by schain owner.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "name",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "SchainDeleted(address,string,bytes32)"
      ],
      "readOnly": false
    },
    {
      "signature": "deleteSchainByRoot(string)",
      "name": "deleteSchainByRoot",
      "description": "Allows SkaleManager to delete any Schain. Upon removal, the space availability of each node is updated. Emits an {SchainDeleted} event. Requirements: - Schain exists.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "SchainDeleted(address,string,bytes32)"
      ],
      "readOnly": false
    },
    {
      "signature": "getNodesDataFromTypeOfSchain(uint256)",
      "name": "getNodesDataFromTypeOfSchain",
      "description": "Returns the number of Nodes and resource divisor that is needed for a given Schain type.",
      "parameterDecorators": [
        {
          "name": "typeOfSchain",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "numberOfNodes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "partOfNode",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMember(bytes32,uint256)",
      "name": "getRoleMember",
      "description": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMemberCount(bytes32)",
      "name": "getRoleMemberCount",
      "description": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSchainPrice(uint256,uint256)",
      "name": "getSchainPrice",
      "description": "Returns the current price in SKL tokens for given Schain type and lifetime.",
      "parameterDecorators": [
        {
          "name": "typeOfSchain",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "lifetime",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newContractsAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "restartSchainCreation(string)",
      "name": "restartSchainCreation",
      "description": "Allows SkaleManager contract to restart schain creation by forming a new schain group. Executed when DKG procedure fails and becomes stuck. Emits a {NodeAdded} event. Requirements: - Previous DKG procedure must have failed. - DKG failure got stuck because there were no free nodes to rotate in. - A free node must be released in the network.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "NodeAdded(bytes32,uint256)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "verifySchainSignature(uint256,uint256,bytes32,uint256,uint256,uint256,string)",
      "name": "verifySchainSignature",
      "description": "Checks whether schain group signature is valid.",
      "parameterDecorators": [
        {
          "name": "signatureA",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "signatureB",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "counter",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "hashA",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "hashB",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "schainName",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}