{
  "schema": "../schema.json",
  "tags": [],
  "name": "Affinity",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "burn(address,uint256)",
      "name": "burn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "enter(address,uint256,address)",
      "name": "enter",
      "description": "This is for liquidity providers who want to buy into the pool via the deployed ERC20 token. {account} is the address of the person who wants to provide liquidity {amountIn} is the amount of an ERC20 token the provider wants to put into the pool {tokenIn} is the ERC20 token the provider wants to put into the pool A requirement here is that {tokenIn} actually exists within the pool the contract is mounted to. The provider also has to make sure to first APPROVE the proxy contract to spend the amountIn.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amountIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenIn",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getTotalUnderlyingValueInEth()",
      "name": "getTotalUnderlyingValueInEth",
      "description": "Calculates the total value of the underlying balancer pool owned by the proxy contract. Returns the amount in ETH.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalUnderlyingValueInUsd()",
      "name": "getTotalUnderlyingValueInUsd",
      "description": "Calculates the total value of the underlying balancer pool owned by the proxy contract. Returns the amount in USD.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "handOverContract(address)",
      "name": "handOverContract",
      "description": "This function hands over ownership of the token, as well as the bpt tokens to the specified address. It also sets the balanced variable to whichever the old contract was. This prevents it from being recalled when the contract was upgraded. This function is particularly useful when it comes to upgrading the contract. This can be called once the new contract is deployed and everything will be migrated automatically. USE WITH CAUTION.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mint(address,uint256)",
      "name": "mint",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "name()",
      "name": "name",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rebalance(address[],uint256,uint256,address)",
      "name": "rebalance",
      "description": "Rebalances the amount of the mounted ERC20 token with the amount of BPT tokens. This can only be done once, preferably when the proxy owns the bpt tokens. The ratio of your token to the bpt tokens will at first be 1:1, but as your liquidity increases, the amount of bpt tokens might outweigh the erc20 token. Therefore when calculating the amount to mint or burn, the ratio is taken into consideration. See formula above. This function can also pin drop an amount of the tokens to addresses you specify. {accounts} is an array of all accounts to which you want to distribute the tokens. All accounts receive equal amounts of tokens. {multiplier} & {divisor} form part of the ratio of tokens you want to give to {accounts} If multiplier == divisor, all your newly created tokens will go to those accounts. If multiplier == 0, none of the newly created tokens will go to those accounts. {responsibleForLiqPools} is the address which will receive the amount that doesn't go to the accounts. You can use these tokens to create swap pools on DEX's.",
      "parameterDecorators": [
        {
          "name": "accounts",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "multiplier",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "divisor",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "responsibleForLiqPools",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeem(address,uint256,address)",
      "name": "redeem",
      "description": "This is for liquidity providers who would like to withdraw their funds from the pool. {account} is the address that wants to withdraw their liquidity. {amount} is the amount of ERC20 tokens the provider wants to give back. {tokenOut} is the token in which the provider wants to get paid out. A constraint here, like with enter, is that {tokenOut} needs to exist within the pool the contract mounted to. No APPROVAL is needed here.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenOut",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reinvest(address,uint256,uint256)",
      "name": "reinvest",
      "description": "Reinvests the bal rewards claimed for the week. You can send the ratio to an admin account, and reinvest the rest into the pool. Reinvesting does not mint more ERC20 tokens, which promotes an increase in price. {balTokenAddress} this is the address for the BAL token, since rewards come in BAL {multiplier} this forms the top part of the ratio - explanation below {divisor} this forms the bottom part of the ratio - explanation below Since you are unable to store decimals, in order to get half of something you have to multiply it by a number and divide it by half of that amount i.e. if the multiplier is 5 and the divisor is 10, you have 5/10, so if you multiply the amount by that, you will get [amount * 5/10] = halfOfAmount.",
      "parameterDecorators": [
        {
          "name": "balTokenAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "multiplier",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "divisor",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sendBPT(address,uint256)",
      "name": "sendBPT",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAdminAccount(address)",
      "name": "setAdminAccount",
      "description": "Make sure you set this account to the account that you want the ratio of bal rewards to be sent to as admin fee.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMostWeightedTokenAddress(address)",
      "name": "setMostWeightedTokenAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPoolToUse(address)",
      "name": "setPoolToUse",
      "description": "",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}