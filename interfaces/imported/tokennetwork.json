{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "TokenNetwork",
  "description": "TokenNetwork. Stores and manages all the Raiden Network channels that use the token specified in this TokenNetwork contract.",
  "eventDecorators": [
    {
      "signature": "ChannelClosed(uint256,address,uint256,bytes32)",
      "name": "ChannelClosed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "closing_participant",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "balance_hash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ChannelNewDeposit(uint256,address,uint256)",
      "name": "ChannelNewDeposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "participant",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "total_deposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ChannelOpened(uint256,address,address,uint256)",
      "name": "ChannelOpened",
      "description": "",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "participant1",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "participant2",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "settle_timeout",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ChannelSettled(uint256,uint256,bytes32,uint256,bytes32)",
      "name": "ChannelSettled",
      "description": "",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "participant1_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "participant1_locksroot",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "participant2_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "participant2_locksroot",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ChannelUnlocked(uint256,address,address,bytes32,uint256,uint256)",
      "name": "ChannelUnlocked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "locksroot",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "unlocked_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "returned_tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ChannelWithdraw(uint256,address,uint256)",
      "name": "ChannelWithdraw",
      "description": "",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "participant",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "total_withdraw",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DeprecationSwitch(bool)",
      "name": "DeprecationSwitch",
      "description": "",
      "parameterDecorators": [
        {
          "name": "new_value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NonClosingBalanceProofUpdated(uint256,address,uint256,bytes32)",
      "name": "NonClosingBalanceProofUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "closing_participant",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "balance_hash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MAX_SAFE_UINT256()",
      "name": "MAX_SAFE_UINT256",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "chain_id()",
      "name": "chain_id",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "channel_counter()",
      "name": "channel_counter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "channel_participant_deposit_limit()",
      "name": "channel_participant_deposit_limit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "channels(uint256)",
      "name": "channels",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "settle_block_number",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "state",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "closeChannel(uint256,address,address,bytes32,uint256,bytes32,bytes,bytes)",
      "name": "closeChannel",
      "description": "Close the channel defined by the two participant addresses. Anybody can call this function on behalf of a participant (called the closing participant), providing a balance proof signed by both parties. Callable only once.",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "Identifier for the channel on which this operation takes place.",
          "recommendedTypes": []
        },
        {
          "name": "non_closing_participant",
          "description": "Channel partner of the `closing_participant`, who provided the balance proof.",
          "recommendedTypes": []
        },
        {
          "name": "closing_participant",
          "description": "Channel participant who closes the channel.",
          "recommendedTypes": []
        },
        {
          "name": "balance_hash",
          "description": "Hash of (transferred_amount, locked_amount, locksroot).",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "Strictly monotonic value used to order transfers.",
          "recommendedTypes": []
        },
        {
          "name": "additional_hash",
          "description": "Computed from the message. Used for message authentication.",
          "recommendedTypes": []
        },
        {
          "name": "non_closing_signature",
          "description": "Non-closing participant's signature of the balance proof data.",
          "recommendedTypes": []
        },
        {
          "name": "closing_signature",
          "description": "Closing participant's signature of the balance proof data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "contractExists(address)",
      "name": "contractExists",
      "description": "Check if a contract exists.",
      "parameterDecorators": [
        {
          "name": "contract_address",
          "description": "The address to check whether a contract is deployed or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if a contract exists, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deprecate()",
      "name": "deprecate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deprecation_executor()",
      "name": "deprecation_executor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getChannelIdentifier(address,address)",
      "name": "getChannelIdentifier",
      "description": "Returns the unique identifier for the channel given by the contract.",
      "parameterDecorators": [
        {
          "name": "participant",
          "description": "Address of a channel participant.",
          "recommendedTypes": []
        },
        {
          "name": "partner",
          "description": "Address of the other channel participant.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Unique identifier for the channel. It can be 0 if channel does not exist.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getChannelInfo(uint256,address,address)",
      "name": "getChannelInfo",
      "description": "The contract cannot really distinguish Settled and Removed states, especially when wrong participants are given as input. The contract does not remember the participants of the channel. Returns the channel specific data.",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "Identifier for the channel on which this operation takes place.",
          "recommendedTypes": []
        },
        {
          "name": "participant1",
          "description": "Address of a channel participant.",
          "recommendedTypes": []
        },
        {
          "name": "participant2",
          "description": "Address of the other channel participant.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getChannelParticipantInfo(uint256,address,address)",
      "name": "getChannelParticipantInfo",
      "description": "Returns the channel specific data.",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "Identifier for the channel on which this operation takes place.",
          "recommendedTypes": []
        },
        {
          "name": "participant",
          "description": "Address of the channel participant whose data will be returned.",
          "recommendedTypes": []
        },
        {
          "name": "partner",
          "description": "Address of the channel partner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param5",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "param6",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getParticipantsHash(address,address)",
      "name": "getParticipantsHash",
      "description": "Get the hash of the participant addresses, ordered lexicographically.",
      "parameterDecorators": [
        {
          "name": "participant",
          "description": "Address of a channel participant.",
          "recommendedTypes": []
        },
        {
          "name": "partner",
          "description": "Address of the other channel participant.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUnlockIdentifier(uint256,address,address)",
      "name": "getUnlockIdentifier",
      "description": "Get the hash of the channel identifier and the participant addresses (whose ordering matters). The hash might be useful for the receiver to look up the appropriate UnlockData to claim.",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "Identifier for the channel which the UnlockData is about.",
          "recommendedTypes": []
        },
        {
          "name": "sender",
          "description": "Sender of the pending transfers that the UnlockData represents.",
          "recommendedTypes": []
        },
        {
          "name": "receiver",
          "description": "Receiver of the pending transfers that the UnlockData represents.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "openChannel(address,address,uint256)",
      "name": "openChannel",
      "description": "Opens a new channel between `participant1` and `participant2`. Can be called by anyone.",
      "parameterDecorators": [
        {
          "name": "participant1",
          "description": "Ethereum address of a channel participant.",
          "recommendedTypes": []
        },
        {
          "name": "participant2",
          "description": "Ethereum address of the other channel participant.",
          "recommendedTypes": []
        },
        {
          "name": "settle_timeout",
          "description": "Number of blocks that need to be mined between a call to closeChannel and settleChannel.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "participants_hash_to_channel_identifier(bytes32)",
      "name": "participants_hash_to_channel_identifier",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "safety_deprecation_switch()",
      "name": "safety_deprecation_switch",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "secret_registry()",
      "name": "secret_registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setTotalDeposit(uint256,address,uint256,address)",
      "name": "setTotalDeposit",
      "description": "Sets the channel participant total deposit value. Can be called by anyone.",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "Identifier for the channel on which this operation takes place.",
          "recommendedTypes": []
        },
        {
          "name": "participant",
          "description": "Channel participant whose deposit is being set.",
          "recommendedTypes": []
        },
        {
          "name": "total_deposit",
          "description": "The total amount of tokens that the participant will have as a deposit.",
          "recommendedTypes": []
        },
        {
          "name": "partner",
          "description": "Channel partner address, needed to compute the total channel deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTotalWithdraw(uint256,address,uint256,uint256,bytes,bytes)",
      "name": "setTotalWithdraw",
      "description": "Allows `participant` to withdraw tokens from the channel that he has with `partner`, without closing it. Can be called by anyone. Can only be called once per each signed withdraw message.",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "Identifier for the channel on which this operation takes place.",
          "recommendedTypes": []
        },
        {
          "name": "participant",
          "description": "Channel participant, who will receive the withdrawn amount.",
          "recommendedTypes": []
        },
        {
          "name": "total_withdraw",
          "description": "Total amount of tokens that are marked as withdrawn from the channel during the channel lifecycle.",
          "recommendedTypes": []
        },
        {
          "name": "expiration_block",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "participant_signature",
          "description": "Participant's signature on the withdraw data.",
          "recommendedTypes": []
        },
        {
          "name": "partner_signature",
          "description": "Partner's signature on the withdraw data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settleChannel(uint256,address,uint256,uint256,bytes32,address,uint256,uint256,bytes32)",
      "name": "settleChannel",
      "description": "Settles the balance between the two parties. Note that arguments order counts: `participant1_transferred_amount + participant1_locked_amount` <= `participant2_transferred_amount + participant2_locked_amount`.",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "Identifier for the channel on which this operation takes place.",
          "recommendedTypes": []
        },
        {
          "name": "participant1",
          "description": "Channel participant.",
          "recommendedTypes": []
        },
        {
          "name": "participant1_transferred_amount",
          "description": "The latest known amount of tokens transferred from `participant1` to `participant2`.",
          "recommendedTypes": []
        },
        {
          "name": "participant1_locked_amount",
          "description": "Amount of tokens owed by `participant1` to `participant2`, contained in locked transfers that will be retrieved by calling `unlock` after the channel is settled.",
          "recommendedTypes": []
        },
        {
          "name": "participant1_locksroot",
          "description": "The latest known hash of the pending hash-time locks of `participant1`, used to validate the unlocked proofs. If no balance_hash has been submitted, locksroot is ignored.",
          "recommendedTypes": []
        },
        {
          "name": "participant2",
          "description": "Other channel participant.",
          "recommendedTypes": []
        },
        {
          "name": "participant2_transferred_amount",
          "description": "The latest known amount of tokens transferred from `participant2` to `participant1`.",
          "recommendedTypes": []
        },
        {
          "name": "participant2_locked_amount",
          "description": "Amount of tokens owed by `participant2` to `participant1`, contained in locked transfers that will be retrieved by calling `unlock` after the channel is settled.",
          "recommendedTypes": []
        },
        {
          "name": "participant2_locksroot",
          "description": "The latest known hash of the pending hash-time locks of `participant2`, used to validate the unlocked proofs. If no balance_hash has been submitted, locksroot is ignored.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "settlement_timeout_max()",
      "name": "settlement_timeout_max",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "settlement_timeout_min()",
      "name": "settlement_timeout_min",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "signature_prefix()",
      "name": "signature_prefix",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "token()",
      "name": "token",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "token_network_deposit_limit()",
      "name": "token_network_deposit_limit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unlock(uint256,address,address,bytes)",
      "name": "unlock",
      "description": "Unlocks all pending off-chain transfers from `sender` to `receiver` and sends the locked tokens corresponding to locks with secrets registered on-chain to the `receiver`. Locked tokens corresponding to locks where the secret was not revealed on-chain will return to the `sender`. Anyone can call unlock.",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "Identifier for the channel on which this operation takes place.",
          "recommendedTypes": []
        },
        {
          "name": "receiver",
          "description": "Address who will receive the claimable unlocked tokens.",
          "recommendedTypes": []
        },
        {
          "name": "sender",
          "description": "Address who sent the pending transfers and will receive the unclaimable unlocked tokens.",
          "recommendedTypes": []
        },
        {
          "name": "locks",
          "description": "All pending locks concatenated in order of creation that `sender` sent to `receiver`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateNonClosingBalanceProof(uint256,address,address,bytes32,uint256,bytes32,bytes,bytes)",
      "name": "updateNonClosingBalanceProof",
      "description": "Called on a closed channel, the function allows the non-closing participant to provide the last balance proof, which modifies the closing participant's state. Can be called multiple times by anyone.",
      "parameterDecorators": [
        {
          "name": "channel_identifier",
          "description": "Identifier for the channel on which this operation takes place.",
          "recommendedTypes": []
        },
        {
          "name": "closing_participant",
          "description": "Channel participant who closed the channel.",
          "recommendedTypes": []
        },
        {
          "name": "non_closing_participant",
          "description": "Channel participant who needs to update the balance proof.",
          "recommendedTypes": []
        },
        {
          "name": "balance_hash",
          "description": "Hash of (transferred_amount, locked_amount, locksroot).",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "Strictly monotonic value used to order transfers.",
          "recommendedTypes": []
        },
        {
          "name": "additional_hash",
          "description": "Computed from the message. Used for message authentication.",
          "recommendedTypes": []
        },
        {
          "name": "closing_signature",
          "description": "Closing participant's signature of the balance proof data.",
          "recommendedTypes": []
        },
        {
          "name": "non_closing_signature",
          "description": "Non-closing participant signature of the balance proof data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}