{
  "schema": "../schema.json",
  "tags": [],
  "name": "BancorChanger",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Change(address,address,address,uint256,uint256)",
      "name": "Change",
      "description": "A DApp has been deauthorized by a user for a worker.",
      "parameterDecorators": [
        {
          "name": "_fromToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_toToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_trader",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_return",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "getReserveBalance(address)",
      "name": "getReserveBalance",
      "description": "returns the reserve's virtual balance if one is defined, otherwise returns the actual balance.",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "reserve token contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "balance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getReturn(address,address,uint256)",
      "name": "getReturn",
      "description": "returns the expected return for changing a specific amount of _fromToken to _toToken.",
      "parameterDecorators": [
        {
          "name": "_fromToken",
          "description": "token to change from.",
          "recommendedTypes": []
        },
        {
          "name": "_toToken",
          "description": "token to change to.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to change, in fromToken.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changerType()",
      "name": "changerType",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateReserve(address,uint8,bool,uint256)",
      "name": "updateReserve",
      "description": "updates one of the token reserves can only be called by the token owner.",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "address of the reserve token.",
          "recommendedTypes": []
        },
        {
          "name": "_ratio",
          "description": "constant reserve ratio, 1-100.",
          "recommendedTypes": []
        },
        {
          "name": "_enableVirtualBalance",
          "description": "true to enable virtual balance for the reserve, false to disable it.",
          "recommendedTypes": []
        },
        {
          "name": "_virtualBalance",
          "description": "new reserve's virtual balance.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "issueTokens(address,uint256)",
      "name": "issueTokens",
      "description": "allows the token owner to execute the token's issue function.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "account to receive the new amount.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to increase the supply by.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "formula()",
      "name": "formula",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeableToken(uint16)",
      "name": "changeableToken",
      "description": "given a changeable token index, returns the changeable token contract address.",
      "parameterDecorators": [
        {
          "name": "_tokenIndex",
          "description": "changeable token index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "version()",
      "name": "version",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeableTokenCount()",
      "name": "changeableTokenCount",
      "description": "returns the number of changeable tokens supported by the contract note that the number of changeable tokens is the number of reserve token, plus 1 (that represents the smart token).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "change(address,address,uint256,uint256)",
      "name": "change",
      "description": "changes a specific amount of _fromToken to _toToken.",
      "parameterDecorators": [
        {
          "name": "_fromToken",
          "description": "token to change from.",
          "recommendedTypes": []
        },
        {
          "name": "_toToken",
          "description": "token to change to.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to change, in fromToken.",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "if the change results in an amount smaller than the minimum return, it is cancelled.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sell(address,uint256,uint256)",
      "name": "sell",
      "description": "sells the token by withdrawing from one of its reserve tokens.",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "reserve token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_sellAmount",
          "description": "amount to sell (in the smart token).",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "if the change results in an amount smaller the minimum return, it is cancelled.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getSaleReturn(address,uint256)",
      "name": "getSaleReturn",
      "description": "returns the expected return for selling the token for one of its reserve tokens.",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "reserve token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_sellAmount",
          "description": "amount to sell (in the smart token).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reserveTokenCount()",
      "name": "reserveTokenCount",
      "description": "returns the number of reserve tokens defined.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getPurchaseReturn(address,uint256)",
      "name": "getPurchaseReturn",
      "description": "returns the expected return for buying the token for a reserve token.",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "reserve token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_depositAmount",
          "description": "amount to deposit (in the reserve token).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buy(address,uint256,uint256)",
      "name": "buy",
      "description": "buys the token by depositing one of its reserve tokens.",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "reserve token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_depositAmount",
          "description": "amount to deposit (in the reserve token).",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "if the change results in an amount smaller than the minimum return, it is cancelled.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenChanger(address)",
      "name": "setTokenChanger",
      "description": "sets the smart token's changer address to a different one instead of the current contract address can only be called by the token owner the changer can be set to null to transfer ownership from the changer to the original smart token's owner.",
      "parameterDecorators": [
        {
          "name": "_changer",
          "description": "new changer contract address (can also be set to 0x0 to remove the current changer).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addReserve(address,uint8,bool)",
      "name": "addReserve",
      "description": "defines a new reserve for the token can only be called by the token owner while the changer is inactive.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the reserve token.",
          "recommendedTypes": []
        },
        {
          "name": "_ratio",
          "description": "constant reserve ratio, 1-100.",
          "recommendedTypes": []
        },
        {
          "name": "_enableVirtualBalance",
          "description": "true to enable virtual balance for the reserve, false to disable it.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reserveTokens(uint256)",
      "name": "reserveTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "destroyTokens(address,uint256)",
      "name": "destroyTokens",
      "description": "allows the token owner to execute the token's destroy function.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "account to remove the new amount from.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to decrease the supply by.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reserves(address)",
      "name": "reserves",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "virtualBalance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "ratio",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "isVirtualBalanceEnabled",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "isPurchaseEnabled",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "isSet",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(address,address,uint256)",
      "name": "withdraw",
      "description": "withdraws tokens from the reserve and sends them to an account can only be called by the token owner.",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "reserve token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "account to receive the new amount.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to withdraw (in the reserve token).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disableReservePurchases(address,bool)",
      "name": "disableReservePurchases",
      "description": "disables purchasing with the given reserve token in case the reserve token got compromised can only be called by the token owner note that selling is still enabled regardless of this flag and it cannot be disabled by the token owner.",
      "parameterDecorators": [
        {
          "name": "_reserveToken",
          "description": "reserve token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_disable",
          "description": "true to disable the token, false to re-enable it.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "token()",
      "name": "token",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}