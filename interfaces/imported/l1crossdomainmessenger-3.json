{
  "schema": "../schema.json",
  "tags": [],
  "name": "L1CrossDomainMessenger",
  "description": "L1CrossDomainMessenger. The L1 Cross Domain Messenger contract sends messages from L1 to L2, and relays messages from L2 onto L1. In the event that a message sent from L1 to L2 is rejected for exceeding the L2 epoch gas limit, it can be resubmitted via this contract's replay function.",
  "eventDecorators": [
    {
      "signature": "FailedRelayedMessage(bytes32)",
      "name": "FailedRelayedMessage",
      "description": "",
      "parameterDecorators": [
        {
          "name": "msgHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RelayedMessage(bytes32)",
      "name": "RelayedMessage",
      "description": "",
      "parameterDecorators": [
        {
          "name": "msgHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SentMessage(address,address,bytes,uint256,uint256)",
      "name": "SentMessage",
      "description": "",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "message",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "messageNonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "gasLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_libAddressManager",
          "description": "Address of the Address Manager.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "libAddressManager()",
      "name": "libAddressManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Pause relaying.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "relayMessage(address,address,bytes,uint256,tuple(bytes32,tuple,tuple,bytes,bytes))",
      "name": "relayMessage",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_target",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_sender",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_message",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_messageNonce",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_proof",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "stateRoot",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "stateRootBatchHeader",
              "description": "",
              "type": "tuple"
            },
            {
              "name": "stateRootProof",
              "description": "",
              "type": "tuple"
            },
            {
              "name": "stateTrieWitness",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "storageTrieWitness",
              "description": "",
              "type": "bytes"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resolve(string)",
      "name": "resolve",
      "description": "Resolves the address associated with a given name.",
      "parameterDecorators": [
        {
          "name": "_name",
          "description": "Name to resolve an address for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Address associated with the given name.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sendMessage(address,bytes,uint32)",
      "name": "sendMessage",
      "description": "Sends a cross domain message to the target messenger.",
      "parameterDecorators": [
        {
          "name": "_target",
          "description": "Target contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_message",
          "description": "Message to send to the target.",
          "recommendedTypes": []
        },
        {
          "name": "_gasLimit",
          "description": "Gas limit for the provided message.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "successfulMessages(bytes32)",
      "name": "successfulMessages",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "xDomainMessageSender()",
      "name": "xDomainMessageSender",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}