{"schema":"../schema.json","tags":["nft"],"name":"WarpNFTClaimControl","description":"","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"WNFTE()","name":"WNFTE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"WNFTL()","name":"WNFTL","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"WNFTR()","name":"WNFTR","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"WNFTS()","name":"WNFTS","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"canClaim(address)","name":"canClaim","description":"view function to check if an account has claimed their NFTs.","parameterDecorators":[{"name":"_account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"claimNFTs()","name":"claimNFTs","description":"claimNFTs is a public function that allows a end user to claim ALL of the NFT's they are owed by the warp platform. this function uses the address whitelists to distribute the appropriate NFT's to warp usersthis function sets a tokens type when minting a new token. A tokens type can be used by other warp contracts to determine what type of token a user holds Type 1: Epic NFT Type 2: Legendary NFT Type 3: Rare NFT Type 4: Social NFT*.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"epicClaimed(address)","name":"epicClaimed","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"epicList(uint256)","name":"epicList","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"epicWhiteList(address)","name":"epicWhiteList","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"epicWhiteLister(address[])","name":"epicWhiteLister","description":"epicWhiteLister takes in an array of addresses and whitelists them to receive the epic NFT. this function is protected by the onlyOwner modifier and can only be called by the owner of this contract*.","parameterDecorators":[{"name":"_addresses","description":"is an array of addresses to be whitelisted.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"hasEpic(address)","name":"hasEpic","description":"view function to check if an account holds a certain NFT.","parameterDecorators":[{"name":"_account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"hasLegendary(address)","name":"hasLegendary","description":"","parameterDecorators":[{"name":"_account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"hasRare(address)","name":"hasRare","description":"","parameterDecorators":[{"name":"_account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"hasSocial(address)","name":"hasSocial","description":"","parameterDecorators":[{"name":"_account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"legendaryClaimed(address)","name":"legendaryClaimed","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"legendaryList(uint256)","name":"legendaryList","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"legendaryWhiteList(address)","name":"legendaryWhiteList","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"legendaryWhiteLister(address[])","name":"legendaryWhiteLister","description":"legendaryWhiteLister takes in an array of addresses and whitelists them to receive the legendary NFT. this function is protected by the onlyOwner modifier and can only be called by the owner of this contract*.","parameterDecorators":[{"name":"_addresses","description":"is an array of addresses to be whitelisted.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"rareClaimed(address)","name":"rareClaimed","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"rareList(uint256)","name":"rareList","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"rareWhiteList(address)","name":"rareWhiteList","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"rareWhiteLister(address[])","name":"rareWhiteLister","description":"rareWhiteLister takes in an array of addresses and whitelists them to receive the rare NFT. this function is protected by the onlyOwner modifier and can only be called by the owner of this contract*.","parameterDecorators":[{"name":"_addresses","description":"is an array of addresses to be whitelisted.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"socialClaimed(address)","name":"socialClaimed","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"socialList(uint256)","name":"socialList","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"socialWhiteList(address)","name":"socialWhiteList","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"socialWhiteLister(address[])","name":"socialWhiteLister","description":"socialWhiteLister takes in an array of addresses and whitelists them to receive the social NFT. this function is protected by the onlyOwner modifier and can only be called by the owner of this contract*.","parameterDecorators":[{"name":"_addresses","description":"is an array of addresses to be whitelisted.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateEpicURI(string)","name":"updateEpicURI","description":"updateEpicURI allows the owner of this contract to update the stored URI.","parameterDecorators":[{"name":"_newURI","description":"is the new URI for the tokens*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateLegendaryURI(string)","name":"updateLegendaryURI","description":"notice updateLegendaryURI allows the owner of this contract to update the stored URI param _newURI is the new URI for the tokens*.","parameterDecorators":[{"name":"_newURI","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateRareURI(string)","name":"updateRareURI","description":"updateRareURI allows the owner of this contract to update the stored URI.","parameterDecorators":[{"name":"_newURI","description":"is the new URI for the tokens*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateSocialURI(string)","name":"updateSocialURI","description":"updateSocialURI allows the owner of this contract to update the stored URI.","parameterDecorators":[{"name":"_newURI","description":"is the new URI for the tokens*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"upgradeClaimControl(address)","name":"upgradeClaimControl","description":"upgradeClaimControl allows the owner of this contract to transfer ownership of all of the NFT contracts to a new claim control contract in the case of a future upgrade.","parameterDecorators":[{"name":"_newCCadd","description":"is the address of the new Claim control contract*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}