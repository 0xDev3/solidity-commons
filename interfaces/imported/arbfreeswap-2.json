{
  "schema": "../schema.json",
  "tags": [
    "swaps"
  ],
  "name": "ArbFreeSwap",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "getBestPrice()",
      "name": "getBestPrice",
      "description": "Return the higher price among the two (assuming buying), protecting LPs but still offering best price to consumers.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLatestPrice()",
      "name": "getLatestPrice",
      "description": "Returns the latest off-chain price, but how do I get the bid/ask spread across all orderbook exchanges?.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenPrice()",
      "name": "getTokenPrice",
      "description": "calculate price based on pair reserves https://ethereum.stackexchange.com/a/94173/ LINK/WETH pair address hardcoded LINK: 0x514910771AF9Ca656af840dff83E8264EcF986CA WETH: 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 Factory address on all networks 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "message()",
      "name": "message",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateMessage(string)",
      "name": "updateMessage",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newMessage",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}