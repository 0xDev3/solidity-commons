{"schema":"../schema.json","tags":[],"name":"GIVBacksRelayer","description":"","eventDecorators":[{"signature":"AddedBatch(address,uint256,bytes32)","name":"AddedBatch","description":"Emitted when the owner withdraw tokens.","parameterDecorators":[{"name":"batcher","description":"","recommendedTypes":[],"indexed":true},{"name":"nonce","description":"","recommendedTypes":[],"indexed":false},{"name":"batch","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Executed(address,bytes32)","name":"Executed","description":"Emitted when the owner withdraw tokens.","parameterDecorators":[{"name":"executor","description":"","recommendedTypes":[],"indexed":true},{"name":"batch","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"Emitted when the owner withdraw tokens.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"Emitted when the owner withdraw tokens.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"Emitted when the owner withdraw tokens.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"BATCHER_ROLE()","name":"BATCHER_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"addBatch(bytes32)","name":"addBatch","description":"This function will add a batch hash to the Relayer and set it as pending. Pending batches can later be executed by calling `executeBatch`. NOTE: This does not take into account possible collisions, a valid nonce MUST be passed during batch creation. Emits the `AddedBatch` event.","parameterDecorators":[{"name":"batch","description":"- A batch that can be executed.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addBatches(bytes32[])","name":"addBatches","description":"This function will add each batch from the list to the Relayer.","parameterDecorators":[{"name":"batches","description":"- A list of batches that can be executed.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"executeBatch(uint256,address[],uint256[])","name":"executeBatch","description":"This function will try and execute a batch. The batch is formed from a nonce and parameters that are expected to be passed to `TokenDistro.sendGIVbacks`. The function will revert if the batch is not pending to be executed.","parameterDecorators":[{"name":"_nonce","description":"- Nonce to prevent batch collisions.","recommendedTypes":[]},{"name":"recipients","description":"- Parameter passed.","recommendedTypes":[]},{"name":"amounts","description":"- Parameter passed.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Overload {grantRole} to track enumerable memberships.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"hashBatch(uint256,address[],uint256[])","name":"hashBatch","description":"This function will produce a hash of parameters for the `TokenDistro.sendGIVbacks` call. The hash uniquely identifies a batch that a `BATCHER_ROLE` can pass to `createBatches` to prepare for execution. NOTE: a valid nonce must be passed to prevent batch collisions.","parameterDecorators":[{"name":"_nonce","description":"- Nonce to prevent batch collisions.","recommendedTypes":[]},{"name":"recipients","description":"- Parameter passed.","recommendedTypes":[]},{"name":"amounts","description":"- Parameter passed.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The batch hash.","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,address)","name":"initialize","description":"Initialize the relayer. The deployer address is set as the `DEFAULT_ADMIN_ROLE`. It can add new batchers if it's required.","parameterDecorators":[{"name":"_tokenDistroContract","description":"- The address of the TokenDistro.","recommendedTypes":[]},{"name":"batcher","description":"- Initial batcher address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isPending(bytes32)","name":"isPending","description":"This function will return the pending status of a batch.","parameterDecorators":[{"name":"batch","description":"- The hash of the batch to check.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True, if the batch is pending.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"nonce()","name":"nonce","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Overload {renounceRole} to track enumerable memberships.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Overload {revokeRole} to track enumerable memberships.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"See {IERC165-supportsInterface}.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"tokenDistroContract()","name":"tokenDistroContract","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}