{
  "schema": "../schema.json",
  "tags": [
    "swaps"
  ],
  "name": "HashmaskSwapper",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "BASE()",
      "name": "BASE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "FEE_AMOUNT()",
      "name": "FEE_AMOUNT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MODIFIED_NAME_CHANGE_PRICE()",
      "name": "MODIFIED_NAME_CHANGE_PRICE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "NAME_CHANGE_PRICE()",
      "name": "NAME_CHANGE_PRICE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PAID_AMOUNT()",
      "name": "PAID_AMOUNT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "XMON_DEPLOYER()",
      "name": "XMON_DEPLOYER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllOpenSwaps()",
      "name": "getAllOpenSwaps",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hashmask()",
      "name": "hashmask",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nct()",
      "name": "nct",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeSwap(uint256)",
      "name": "removeSwap",
      "description": "Remove a proposed swap and get back the deposited NFT.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNameSale(uint256,address,uint256)",
      "name": "setNameSale",
      "description": "Propose a name sell. Allows anyone with the tokens can accept the swap desiredName is set to \"\" (empty string) which will allow any tokenId to take the swap.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNameSwap(uint256,string)",
      "name": "setNameSwap",
      "description": "Propose a swap between two names (current and desired) and deposit NFT into contract token is set to be the zero address price is set to 0.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "desiredName",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapRecords(uint256)",
      "name": "swapRecords",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "name1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "name2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "escrowedNCTAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "takeSell(uint256,uint256,string)",
      "name": "takeSell",
      "description": "Take up an existing swap that's a sell. Only swaps the taker's name to the swap creator's name.",
      "parameterDecorators": [
        {
          "name": "swapId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "takerId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "placeholder1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "takeSwap(uint256,uint256,string)",
      "name": "takeSwap",
      "description": "Take up an existing swap. Swaps the names and then returns the NFTs - Note: It is up to the caller to find a placeholder name that has not been used. - Front-ends can make this more convenient by selecting random strings.",
      "parameterDecorators": [
        {
          "name": "swapId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "takerId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "placeholder1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}