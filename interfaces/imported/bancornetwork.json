{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "BancorNetwork",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Conversion(address,address,address,uint256,uint256,address)",
      "name": "Conversion",
      "description": "Unfarm gets emitted when an account unstakes LP tokens. triggered when a conversion between two tokens occurs.",
      "parameterDecorators": [
        {
          "name": "_smartToken",
          "description": "anchor governed by the converter.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_fromToken",
          "description": "source ERC20 token.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_toToken",
          "description": "target ERC20 token.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_fromAmount",
          "description": "amount converted, in the source token.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_toAmount",
          "description": "amount returned, minus conversion fee.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_trader",
          "description": "wallet that initiated the trade.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerUpdate(address,address)",
      "name": "OwnerUpdate",
      "description": "Unfarm gets emitted when an account unstakes LP tokens.",
      "parameterDecorators": [
        {
          "name": "_prevOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "used by a new owner to accept an ownership transfer.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimAndConvert(address[],uint256,uint256)",
      "name": "claimAndConvert",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimAndConvert2(address[],uint256,uint256,address,uint256)",
      "name": "claimAndConvert2",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateAccount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimAndConvertFor(address[],uint256,uint256,address)",
      "name": "claimAndConvertFor",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimAndConvertFor2(address[],uint256,uint256,address,address,uint256)",
      "name": "claimAndConvertFor2",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateAccount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "completeXConversion(address[],address,uint256,uint256,address)",
      "name": "completeXConversion",
      "description": "allows a user to convert a token that was sent from another blockchain into any other token on the BancorNetwork ideally this transaction is created before the previous conversion is even complete, so so the input amount isn't known at that point - the amount is actually take from the BancorX contract directly by specifying the conversion id.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "conversion path.",
          "recommendedTypes": []
        },
        {
          "name": "_bancorX",
          "description": "address of the BancorX contract for the source token.",
          "recommendedTypes": []
        },
        {
          "name": "_conversionId",
          "description": "pre-determined unique (if non zero) id which refers to this conversion.",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero.",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "wallet to receive the conversion result.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of tokens received from the conversion.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "conversionPath(address,address)",
      "name": "conversionPath",
      "description": "returns the conversion path between two tokens in the network note that this method is quite expensive in terms of gas and should generally be called off-chain.",
      "parameterDecorators": [
        {
          "name": "_sourceToken",
          "description": "source token address.",
          "recommendedTypes": []
        },
        {
          "name": "_targetToken",
          "description": "target token address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "conversion path between the two tokens.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "convert(address[],uint256,uint256)",
      "name": "convert",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "convert2(address[],uint256,uint256,address,uint256)",
      "name": "convert2",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateAccount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "convertByPath(address[],uint256,uint256,address,address,uint256)",
      "name": "convertByPath",
      "description": "converts the token to any other token in the bancor network by following a predefined conversion path and transfers the result tokens to a target account affiliate account/fee can also be passed in to receive a conversion fee (on top of the liquidity provider fees) note that the network should already have been given allowance of the source token (if not ETH).",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "conversion path, see conversion path format above.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to convert from, in the source token.",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "if the conversion results in an amount smaller than the minimum return - it is cancelled, must be greater than zero.",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "account that will receive the conversion result or 0x0 to send the result to the sender account.",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateAccount",
          "description": "wallet address to receive the affiliate fee or 0x0 to disable affiliate fee.",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateFee",
          "description": "affiliate fee in PPM or 0 to disable affiliate fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of tokens received from the conversion.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "convertFor(address[],uint256,uint256,address)",
      "name": "convertFor",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "convertFor2(address[],uint256,uint256,address,address,uint256)",
      "name": "convertFor2",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateAccount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "etherTokens(address)",
      "name": "etherTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReturnByPath(address[],uint256)",
      "name": "getReturnByPath",
      "description": "deprecated, backward compatibility.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxAffiliateFee()",
      "name": "maxAffiliateFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newOwner()",
      "name": "newOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onlyOwnerCanUpdateRegistry()",
      "name": "onlyOwnerCanUpdateRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prevRegistry()",
      "name": "prevRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rateByPath(address[],uint256)",
      "name": "rateByPath",
      "description": "returns the expected target amount of converting a given amount on a given path note that there is no support for circular paths.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "conversion path (see conversion path format above).",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount of _path[0] tokens received from the sender.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "expected target amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registerEtherToken(address,bool)",
      "name": "registerEtherToken",
      "description": "allows the owner to register/unregister ether tokens.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "ether token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_register",
          "description": "true to register, false to unregister.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registry()",
      "name": "registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "restoreRegistry()",
      "name": "restoreRegistry",
      "description": "restores the previous contract-registry.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "restrictRegistryUpdate(bool)",
      "name": "restrictRegistryUpdate",
      "description": "restricts the permission to update the contract-registry.",
      "parameterDecorators": [
        {
          "name": "_onlyOwnerCanUpdateRegistry",
          "description": "indicates whether or not permission is restricted to owner only.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxAffiliateFee(uint256)",
      "name": "setMaxAffiliateFee",
      "description": "allows the owner to update the maximum affiliate-fee.",
      "parameterDecorators": [
        {
          "name": "_maxAffiliateFee",
          "description": "maximum affiliate-fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "allows transferring the contract ownership the new owner still needs to accept the transfer can only be called by the contract owner.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "new contract owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateRegistry()",
      "name": "updateRegistry",
      "description": "updates to the new contract-registry.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawTokens(address,address,uint256)",
      "name": "withdrawTokens",
      "description": "withdraws tokens held by the contract and sends them to an account can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "ERC20 token contract address.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "account to receive the new amount.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "xConvert(address[],uint256,uint256,bytes32,bytes32,uint256)",
      "name": "xConvert",
      "description": "converts any other token to BNT in the bancor network by following a predefined conversion path and transfers the result to an account on a different blockchain note that the network should already have been given allowance of the source token (if not ETH).",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "conversion path, see conversion path format above.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to convert from, in the source token.",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "if the conversion results in an amount smaller than the minimum return - it is cancelled, must be greater than zero.",
          "recommendedTypes": []
        },
        {
          "name": "_targetBlockchain",
          "description": "blockchain BNT will be issued on.",
          "recommendedTypes": []
        },
        {
          "name": "_targetAccount",
          "description": "address/account on the target blockchain to send the BNT to.",
          "recommendedTypes": []
        },
        {
          "name": "_conversionId",
          "description": "pre-determined unique (if non zero) id which refers to this transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the amount of BNT received from this conversion.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "xConvert2(address[],uint256,uint256,bytes32,bytes32,uint256,address,uint256)",
      "name": "xConvert2",
      "description": "converts any other token to BNT in the bancor network by following a predefined conversion path and transfers the result to an account on a different blockchain note that the network should already have been given allowance of the source token (if not ETH).",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "conversion path, see conversion path format above.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "amount to convert from, in the source token.",
          "recommendedTypes": []
        },
        {
          "name": "_minReturn",
          "description": "if the conversion results in an amount smaller than the minimum return - it is cancelled, must be greater than zero.",
          "recommendedTypes": []
        },
        {
          "name": "_targetBlockchain",
          "description": "blockchain BNT will be issued on.",
          "recommendedTypes": []
        },
        {
          "name": "_targetAccount",
          "description": "address/account on the target blockchain to send the BNT to.",
          "recommendedTypes": []
        },
        {
          "name": "_conversionId",
          "description": "pre-determined unique (if non zero) id which refers to this transaction.",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateAccount",
          "description": "affiliate account.",
          "recommendedTypes": []
        },
        {
          "name": "_affiliateFee",
          "description": "affiliate fee in PPM.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the amount of BNT received from this conversion.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}