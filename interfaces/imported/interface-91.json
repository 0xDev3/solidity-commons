{"schema":"../schema.json","tags":["gnosis"],"name":"RestrictedSafeProxyFactory","description":"Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.","eventDecorators":[{"signature":"NewSingleton(address)","name":"NewSingleton","description":"Emitted when a edition is created reserving the corresponding token IDs.","parameterDecorators":[{"name":"editionId","description":"ID of newly created edition.","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when a edition is created reserving the corresponding token IDs.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ProxyCreation(address,address)","name":"ProxyCreation","description":"Emitted when a edition is created reserving the corresponding token IDs.","parameterDecorators":[{"name":"proxy","description":"","recommendedTypes":[],"indexed":false},{"name":"singleton","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"calculateCreateProxyWithNonceAddress(bytes,uint256)","name":"calculateCreateProxyWithNonceAddress","description":"Allows to get the address for a new proxy contact created via `createProxyWithNonce` This method is only meant for address calculation purpose when you use an initializer that would revert, therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.","parameterDecorators":[{"name":"initializer","description":"Payload for message call sent to new proxy contract.","recommendedTypes":[]},{"name":"saltNonce","description":"Nonce that will be used to generate the salt to calculate the address of the new proxy contract.","recommendedTypes":[]}],"returnDecorators":[{"name":"proxy","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":false},{"signature":"createProxy(bytes)","name":"createProxy","description":"Allows to create new proxy contact and execute a message call to the new proxy within one transaction.","parameterDecorators":[{"name":"data","description":"Payload for message call sent to new proxy contract.","recommendedTypes":[]}],"returnDecorators":[{"name":"proxy","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":false},{"signature":"createProxyWithNonce(bytes,uint256)","name":"createProxyWithNonce","description":"Allows to create new proxy contact and execute a message call to the new proxy within one transaction.","parameterDecorators":[{"name":"initializer","description":"Payload for message call sent to new proxy contract.","recommendedTypes":[]},{"name":"saltNonce","description":"Nonce that will be used to generate the salt to calculate the address of the new proxy contract.","recommendedTypes":[]}],"returnDecorators":[{"name":"proxy","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":false},{"signature":"isWalletApproved(address)","name":"isWalletApproved","description":"","parameterDecorators":[{"name":"proxy","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes4"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"proxyCreationCode()","name":"proxyCreationCode","description":"Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"proxyRuntimeCode()","name":"proxyRuntimeCode","description":"Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateSingleton(address)","name":"updateSingleton","description":"","parameterDecorators":[{"name":"_singleton","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}