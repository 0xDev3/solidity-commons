{"schema":"../schema.json","tags":["tokens"],"name":"ShareTokenSalePurchase","description":"Share token sale factory. Process purchasing token in seed and private round.","eventDecorators":[{"signature":"EndTokenSale(uint256,uint256)","name":"EndTokenSale","description":"event emitted when a user has unstaked a token. Emitted when the implementation of a variable debt token is upgraded.","parameterDecorators":[{"name":"round","description":"","recommendedTypes":[],"indexed":false},{"name":"time","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnerChanged(address)","name":"OwnerChanged","description":"event emitted when a user has unstaked a token. Emitted when the implementation of a variable debt token is upgraded.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Purchase(address,uint256,uint256)","name":"Purchase","description":"event emitted when a user has unstaked a token. Emitted when the implementation of a variable debt token is upgraded.","parameterDecorators":[{"name":"asset","description":"The address of the underlying asset of the reserve.","recommendedTypes":[],"indexed":false},{"name":"implementation","description":"The new aToken implementation*.","recommendedTypes":[],"indexed":false},{"name":"proxy","description":"The variable debt token proxy address.","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"getBalance(address,uint256)","name":"getBalance","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]},{"name":"round","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getHolders()","name":"getHolders","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"isContractActive()","name":"isContractActive","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"purchase(address,uint256,uint256)","name":"purchase","description":"Process to purchase token.","parameterDecorators":[{"name":"account","description":"account address to purchase.","recommendedTypes":[]},{"name":"tokenAmount","description":"purchased amount.","recommendedTypes":[]},{"name":"round","description":"round to purchase Requirements: 1. Can purchase 2. Time to purchase is available 3. Remain token amount is greater than or equals `amount` Implementations: 1. Validate the remain token amount 2. Update purchased token amount for `account` 3. Create purchased history for `account` 4. Reduce remain amount for this round 5. Process to raise BNF fund 6. Check to end current round if all tokens are sold 7. Emit event.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setBnfTokenContract(address)","name":"setBnfTokenContract","description":"","parameterDecorators":[{"name":"contractAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setContractStatus(bool)","name":"setContractStatus","description":"Update contract status to make sure this contract can be executed or not.","parameterDecorators":[{"name":"status","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setContracts(address,address)","name":"setContracts","description":"Set contract addresses.","parameterDecorators":[{"name":"dbAddress","description":"new database contract address.","recommendedTypes":[]},{"name":"bnfAddress","description":"new BNF contract address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDbContract(address)","name":"setDbContract","description":"","parameterDecorators":[{"name":"contractAddress","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setOwner(address)","name":"setOwner","description":"Change contract's owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"If success return true; else return false Requirements: 1. Only current owner can execute 2. `newOwner` is not zero address 3. `newOwner` is not current owner Implementations: 1. Validate requirements 2. Set current owner is newOwner 3. Emit Events 4. Return result.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false}]}