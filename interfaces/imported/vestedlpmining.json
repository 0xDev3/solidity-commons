{
  "schema": "../schema.json",
  "tags": [
    "vesting"
  ],
  "name": "VestedLPMining",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AddLpToken(address,uint256,uint256)",
      "name": "AddLpToken",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "lpToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allocPoint",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CheckpointBalanceChanged(address,uint256,uint256)",
      "name": "CheckpointBalanceChanged",
      "description": "The event is emitted when a delegate account' vote balance changes. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "delegate",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CheckpointTotalLpVotes(uint256)",
      "name": "CheckpointTotalLpVotes",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "lpVotes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CheckpointUserLpVotes(address,uint256,uint256)",
      "name": "CheckpointUserLpVotes",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "lpVotes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CheckpointUserVotes(address,uint256,uint256)",
      "name": "CheckpointUserVotes",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pendedVotes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lpVotesShare",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DelegateChanged(address,address,address)",
      "name": "DelegateChanged",
      "description": "An event that's emitted when an account changes its delegate. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "delegator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fromDelegate",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "toDelegate",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Deposit(address,uint256,uint256,uint256)",
      "name": "Deposit",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "boostAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EmergencyWithdraw(address,uint256,uint256,uint256)",
      "name": "EmergencyWithdraw",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "boostAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MigrateLpToken(address,address,uint256)",
      "name": "MigrateLpToken",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "oldLpToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newLpToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetCvpPerBlock(uint256)",
      "name": "SetCvpPerBlock",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "cvpPerBlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetCvpPoolByMetaPool(address,address)",
      "name": "SetCvpPoolByMetaPool",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "metaPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "cvpPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetCvpVestingPeriodInBlocks(uint256)",
      "name": "SetCvpVestingPeriodInBlocks",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "cvpVestingPeriodInBlocks",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetLpToken(address,uint256,uint256)",
      "name": "SetLpToken",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "lpToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allocPoint",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetMigrator(address)",
      "name": "SetMigrator",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "migrator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256,uint256,uint256)",
      "name": "Withdraw",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "boostAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "add(uint256,address,uint8,bool,uint256,uint256,uint256,uint256)",
      "name": "add",
      "description": "Add a new pool (only the owner may call).",
      "parameterDecorators": [
        {
          "name": "_allocPoint",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lpToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_poolType",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_votesEnabled",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lpBoostRate",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_cvpBoostRate",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lpBoostMinRatio",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lpBoostMaxRatio",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "book(address)",
      "name": "book",
      "description": "Votes computation data for each account.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "numCheckpoints",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "lastCheckpointBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "delegatee",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkpointVotes(address)",
      "name": "checkpointVotes",
      "description": "Write votes of the given user at the current block.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cvp()",
      "name": "cvp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cvpBalanceToBoost(uint256,address,bool)",
      "name": "cvpBalanceToBoost",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_lpAmount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lpToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_min",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cvpPerBlock()",
      "name": "cvpPerBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cvpPoolByMetaPool(address)",
      "name": "cvpPoolByMetaPool",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cvpVestingPeriodInBlocks()",
      "name": "cvpVestingPeriodInBlocks",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cvpVestingPool()",
      "name": "cvpVestingPool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delegate(address)",
      "name": "delegate",
      "description": "Delegate votes from `msg.sender` to `delegatee`.",
      "parameterDecorators": [
        {
          "name": "delegatee_",
          "description": "The address to delegate votes to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "delegatee()",
      "name": "delegatee",
      "description": "Get the \"delegatee\" account for the message sender.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(uint256,uint256,uint256)",
      "name": "deposit",
      "description": "Deposit the given amount of LP tokens to the given pool.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_boostAmount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdraw(uint256)",
      "name": "emergencyWithdraw",
      "description": "Withdraw LP tokens without caring about pending CVP tokens. EMERGENCY ONLY.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "findCheckpoints(address,uint256)",
      "name": "findCheckpoints",
      "description": "Returns IDs of checkpoints which store the given account' votes computation data. Intended for off-chain use (by UI).",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "blockNumber",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "userCheckpointId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "sharedCheckpointId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCheckpoint(address,uint32)",
      "name": "getCheckpoint",
      "description": "Get CVP amount and the share of CVPs in LP pools for the given account and the checkpoint.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "checkpointId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "fromBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "cvpAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        },
        {
          "name": "pooledCvpShare",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentVotes(address)",
      "name": "getCurrentVotes",
      "description": "Get the current votes balance for `account`.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address to get votes balance.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The number of current votes for `account`.",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPriorVotes(address,uint256,uint32,uint32)",
      "name": "getPriorVotes",
      "description": "Gas-optimized version of the `getPriorVotes` function - it accepts IDs of checkpoints to look for votes data as of the given block in (if the checkpoints miss the data, it get searched through all checkpoints recorded). Call (off-chain) the `findCheckpoints` function to get needed IDs.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account to get votes for.",
          "recommendedTypes": []
        },
        {
          "name": "blockNumber",
          "description": "The block number to get votes at.",
          "recommendedTypes": []
        },
        {
          "name": "userCheckpointId",
          "description": "ID of the checkpoint to look for the shared data first.",
          "recommendedTypes": []
        },
        {
          "name": "sharedCheckpointId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The number of votes the account had as of the given block.",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPriorVotes(address,uint256)",
      "name": "getPriorVotes",
      "description": "Determine the prior number of votes for the given account as of the given block. To prevent misinformation, the call reverts if the block requested is not finalized.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account to get votes for.",
          "recommendedTypes": []
        },
        {
          "name": "blockNumber",
          "description": "The block number to get votes at.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The number of votes the account had as of the given block.",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,uint256,uint256,uint256)",
      "name": "initialize",
      "description": "Initializes the storage of the contract. \"constructor\" to be called on a new proxy deploymentSets the contract `owner` account to the deploying account.",
      "parameterDecorators": [
        {
          "name": "_cvp",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_reservoir",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_cvpPerBlock",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_startBlock",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_cvpVestingPeriodInBlocks",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isLpTokenAdded(address)",
      "name": "isLpTokenAdded",
      "description": "Return `true` if the LP Token is added to created pools.",
      "parameterDecorators": [
        {
          "name": "_lpToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastSwapBlock(address)",
      "name": "lastSwapBlock",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lpBoostMaxRatioByToken(address)",
      "name": "lpBoostMaxRatioByToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lpBoostRatioByToken(address)",
      "name": "lpBoostRatioByToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "massUpdatePools()",
      "name": "massUpdatePools",
      "description": "Update reward computation params for all pools. Be careful of gas spending.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "migrate(uint256)",
      "name": "migrate",
      "description": "Migrate LP token to another LP contract. Anyone may call, so we have to trust the migrator contract.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "migrator()",
      "name": "migrator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingCvp(uint256,address)",
      "name": "pendingCvp",
      "description": "Return the amount of pending CVPs entitled to the given user of the pool.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolBoostByLp(uint256)",
      "name": "poolBoostByLp",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "lpBoostRate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "cvpBoostRate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastUpdateBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "accCvpPerLpBoost",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "accCvpPerCvpBoost",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolLength()",
      "name": "poolLength",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolPidByAddress(address)",
      "name": "poolPidByAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pools(uint256)",
      "name": "pools",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "lpToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "votesEnabled",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "poolType",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "allocPoint",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "lastUpdateBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "accCvpPerLpt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reservoir()",
      "name": "reservoir",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "set(uint256,uint256,uint8,bool,uint256,uint256,uint256,uint256)",
      "name": "set",
      "description": "Update parameters of the given pool (only the owner may call).",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_allocPoint",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_poolType",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_votesEnabled",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lpBoostRate",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_cvpBoostRate",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lpBoostMinRatio",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_lpBoostMaxRatio",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCvpPerBlock(uint256)",
      "name": "setCvpPerBlock",
      "description": "Set CVP reward per block (only the owner may call). Consider updating pool before calling this function.",
      "parameterDecorators": [
        {
          "name": "_cvpPerBlock",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCvpPoolByMetaPool(address,address)",
      "name": "setCvpPoolByMetaPool",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_metaPool",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_cvpPool",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCvpVestingPeriodInBlocks(uint256)",
      "name": "setCvpVestingPeriodInBlocks",
      "description": "Set CVP vesting period in blocks (only the owner may call).",
      "parameterDecorators": [
        {
          "name": "_cvpVestingPeriodInBlocks",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMigrator(address)",
      "name": "setMigrator",
      "description": "Set the migrator contract (only the owner may call).",
      "parameterDecorators": [
        {
          "name": "_migrator",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "startBlock()",
      "name": "startBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalAllocPoint()",
      "name": "totalAllocPoint",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePool(uint256)",
      "name": "updatePool",
      "description": "Update CVP tokens allocation for the given pool.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "users(uint256,address)",
      "name": "users",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "lastUpdateBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "vestingBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "pendedCvp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        },
        {
          "name": "cvpAdjust",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        },
        {
          "name": "lptAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "usersPoolBoost(uint256,address)",
      "name": "usersPoolBoost",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "balance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastUpdateBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vestableCvp(uint256,address)",
      "name": "vestableCvp",
      "description": "Return the amount of CVP tokens which may be vested to a user of a pool in the current block.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256,uint256,uint256)",
      "name": "withdraw",
      "description": "Withdraw the given amount of LP tokens from the given pool.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_boostAmount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}