{
  "schema": "../schema.json",
  "tags": [],
  "name": "Manager",
  "description": "",
  "eventDecorators": [
    {
      "signature": "ChainRewardUpdate(uint256,uint256,uint256)",
      "name": "ChainRewardUpdate",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The address of the underlying asset of the reserve.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "implementation",
          "description": "The new subToken implementation*.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proxy",
          "description": "The variable debt token proxy address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "HandlerRewardUpdate(uint256,uint256,uint256)",
      "name": "HandlerRewardUpdate",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The address of the underlying asset of the reserve.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "implementation",
          "description": "The new subToken implementation*.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proxy",
          "description": "The variable debt token proxy address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "applyInterestHandlers(address,uint256,bool)",
      "name": "applyInterestHandlers",
      "description": "Update interest of a user for a handler (internal).",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The user address.",
          "recommendedTypes": []
        },
        {
          "name": "callerID",
          "description": "The handler ID.",
          "recommendedTypes": []
        },
        {
          "name": "allFlag",
          "description": "Flag for the full calculation mode (calculting for all handlers).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param5",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimHandlerReward(uint256,address)",
      "name": "claimHandlerReward",
      "description": "",
      "parameterDecorators": [
        {
          "name": "handlerID",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "userAddr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergency()",
      "name": "emergency",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCircuitBreaker()",
      "name": "getCircuitBreaker",
      "description": "Get the circuitBreak status.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The circuitBreak status.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGlobalRewardInfo()",
      "name": "getGlobalRewardInfo",
      "description": "Get the reward parameters.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMaxLiquidationReward(address,uint256,uint256,uint256,uint256)",
      "name": "getMaxLiquidationReward",
      "description": "Get the maximum liquidation reward by checking sufficient reward amount for the liquidator.",
      "parameterDecorators": [
        {
          "name": "delinquentBorrower",
          "description": "The address of the liquidation target.",
          "recommendedTypes": []
        },
        {
          "name": "liquidateHandlerID",
          "description": "The hander ID of the liquidating asset.",
          "recommendedTypes": []
        },
        {
          "name": "liquidateAmount",
          "description": "The amount to liquidate.",
          "recommendedTypes": []
        },
        {
          "name": "rewardHandlerID",
          "description": "The handler ID of the reward token for the liquidator.",
          "recommendedTypes": []
        },
        {
          "name": "rewardRatio",
          "description": "delinquentBorrowAsset / delinquentDepositAsset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The maximum reward token amount for the liquidator.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOwner()",
      "name": "getOwner",
      "description": "Get owner's address of the manager contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The address of owner.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRewardErc20()",
      "name": "getRewardErc20",
      "description": "Get the address of reward token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The address of reward token.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenHandlerBorrowLimit(uint256)",
      "name": "getTokenHandlerBorrowLimit",
      "description": "Get the borrow limit of the handler (external).",
      "parameterDecorators": [
        {
          "name": "handlerID",
          "description": "The handler ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The borrow limit.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenHandlerID(uint256)",
      "name": "getTokenHandlerID",
      "description": "Get the handler ID at the index in the handler list.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "The index of the handler list (array).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The handler ID.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenHandlerInfo(uint256)",
      "name": "getTokenHandlerInfo",
      "description": "Get information for a handler.",
      "parameterDecorators": [
        {
          "name": "handlerID",
          "description": "Handler ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenHandlerMarginCallLimit(uint256)",
      "name": "getTokenHandlerMarginCallLimit",
      "description": "Get the margin call limit of the handler (external).",
      "parameterDecorators": [
        {
          "name": "handlerID",
          "description": "The handler ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The margin call limit.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenHandlerPrice(uint256)",
      "name": "getTokenHandlerPrice",
      "description": "Get the token price of the handler.",
      "parameterDecorators": [
        {
          "name": "handlerID",
          "description": "The handler ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The token price of the handler.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenHandlerSupport(uint256)",
      "name": "getTokenHandlerSupport",
      "description": "Get the handler status of whether the handler is supported or not.",
      "parameterDecorators": [
        {
          "name": "handlerID",
          "description": "The handler ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Whether the handler is supported or not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenHandlersLength()",
      "name": "getTokenHandlersLength",
      "description": "Get the length of the handler list.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the length of the handler list.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserCollateralizableAmount(address,uint256)",
      "name": "getUserCollateralizableAmount",
      "description": "Get the maximum allowed amount to borrow of the user from the given handler.",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "callerID",
          "description": "The target handler to borrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "extraCollateralAmount The maximum allowed amount to borrow from the handler.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserExtraLiquidityAmount(address,uint256)",
      "name": "getUserExtraLiquidityAmount",
      "description": "Get the amount of token that the user can borrow more.",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The address of user.",
          "recommendedTypes": []
        },
        {
          "name": "handlerID",
          "description": "The handler ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of token that user can borrow more.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserIntraHandlerAssetWithInterest(address,uint256)",
      "name": "getUserIntraHandlerAssetWithInterest",
      "description": "Get the deposit and borrow amount of the user with interest added.",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The address of user.",
          "recommendedTypes": []
        },
        {
          "name": "handlerID",
          "description": "The handler ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserLimitIntraAsset(address)",
      "name": "getUserLimitIntraAsset",
      "description": "Get the borrow and margin call limits of the user for all handlers.",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "userTotalBorrowLimitAsset the sum of borrow limit for all handlers.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_1",
          "description": "userTotalMarginCallLimitAsset the sume of margin call limit for handlers.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserTotalIntraCreditAsset(address)",
      "name": "getUserTotalIntraCreditAsset",
      "description": "Get the depositTotalCredit and borrowTotalCredit.",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "depositTotalCredit The amount that users can borrow (i.e. deposit * borrowLimit).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_1",
          "description": "borrowTotalCredit The sum of borrow amount for all handlers.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "handlerRegister(uint256,address)",
      "name": "handlerRegister",
      "description": "Register a handler.",
      "parameterDecorators": [
        {
          "name": "handlerID",
          "description": "Handler ID and address.",
          "recommendedTypes": []
        },
        {
          "name": "tokenHandlerAddr",
          "description": "The handler address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "interestUpdateReward()",
      "name": "interestUpdateReward",
      "description": "Reward the user (msg.sender) with the reward token after calculating interest.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "observer()",
      "name": "observer",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ownerRewardTransfer(uint256)",
      "name": "ownerRewardTransfer",
      "description": "Transfer reward tokens to owner (for administration).",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "The amount of the reward token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ownershipTransfer(address)",
      "name": "ownershipTransfer",
      "description": "Transfer ownership.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "the address of the new owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "partialLiquidationUser(address,uint256,address,uint256,uint256)",
      "name": "partialLiquidationUser",
      "description": "Partial liquidation for a user.",
      "parameterDecorators": [
        {
          "name": "delinquentBorrower",
          "description": "The address of the liquidation target.",
          "recommendedTypes": []
        },
        {
          "name": "liquidateAmount",
          "description": "The amount to liquidate.",
          "recommendedTypes": []
        },
        {
          "name": "liquidator",
          "description": "The address of the liquidator (liquidation operator).",
          "recommendedTypes": []
        },
        {
          "name": "liquidateHandlerID",
          "description": "The hander ID of the liquidating asset.",
          "recommendedTypes": []
        },
        {
          "name": "rewardHandlerID",
          "description": "The handler ID of the reward token for the liquidator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "partialLiquidationUserReward(address,uint256,address,uint256)",
      "name": "partialLiquidationUserReward",
      "description": "Reward the liquidator.",
      "parameterDecorators": [
        {
          "name": "delinquentBorrower",
          "description": "The address of the liquidation target.",
          "recommendedTypes": []
        },
        {
          "name": "rewardAmount",
          "description": "The amount of reward token.",
          "recommendedTypes": []
        },
        {
          "name": "liquidator",
          "description": "The address of the liquidator (liquidation operator).",
          "recommendedTypes": []
        },
        {
          "name": "handlerID",
          "description": "The handler ID of the reward token for the liquidator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The amount of reward token.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewardClaimAll(address)",
      "name": "rewardClaimAll",
      "description": "Claim all rewards for the user.",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The user address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewardUpdateOfInAction(address,uint256)",
      "name": "rewardUpdateOfInAction",
      "description": "Update the (SI) rewards for a user.",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "callerID",
          "description": "The handler ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBreakerTable(address,bool)",
      "name": "setBreakerTable",
      "description": "Authorize admin user for circuitBreaker.",
      "parameterDecorators": [
        {
          "name": "_target",
          "description": "The address of the circuitBreaker admin user.",
          "recommendedTypes": []
        },
        {
          "name": "_status",
          "description": "The boolean status of circuitBreaker (on/off).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCircuitBreaker(bool)",
      "name": "setCircuitBreaker",
      "description": "Set circuitBreak to freeze/unfreeze all handlers.",
      "parameterDecorators": [
        {
          "name": "_emergency",
          "description": "The boolean status of circuitBreaker (on/off).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setHandlerSupport(uint256,bool)",
      "name": "setHandlerSupport",
      "description": "Set the support stauts for the handler.",
      "parameterDecorators": [
        {
          "name": "handlerID",
          "description": "the handler ID.",
          "recommendedTypes": []
        },
        {
          "name": "support",
          "description": "the support status (boolean).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setLiquidationManager(address)",
      "name": "setLiquidationManager",
      "description": "Set a liquidation manager contract.",
      "parameterDecorators": [
        {
          "name": "liquidationManagetAddr",
          "description": "The address of liquidiation manager.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setObserverAddr(address)",
      "name": "setObserverAddr",
      "description": "",
      "parameterDecorators": [
        {
          "name": "observerAddr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOperator(address,bool)",
      "name": "setOperator",
      "description": "",
      "parameterDecorators": [
        {
          "name": "adminAddr",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "flag",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOracleProxy(address)",
      "name": "setOracleProxy",
      "description": "Set the address of oracleProxy contract.",
      "parameterDecorators": [
        {
          "name": "oracleProxyAddr",
          "description": "The address of oracleProxy contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRewardErc20(address)",
      "name": "setRewardErc20",
      "description": "Set the address of BiFi reward token contract.",
      "parameterDecorators": [
        {
          "name": "erc20Addr",
          "description": "The address of BiFi reward token contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenHandlersLength(uint256)",
      "name": "setTokenHandlersLength",
      "description": "Set the length of the handler list.",
      "parameterDecorators": [
        {
          "name": "_tokenHandlerLength",
          "description": "The length of the handler list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true (TODO: validate results).",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenHandlerLength()",
      "name": "tokenHandlerLength",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateRewardParams(address)",
      "name": "updateRewardParams",
      "description": "(Update operation) update the rewards parameters.",
      "parameterDecorators": [
        {
          "name": "userAddr",
          "description": "The address of operator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Whether or not the operation succeed.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}