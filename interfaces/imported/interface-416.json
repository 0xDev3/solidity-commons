{
  "schema": "../schema.json",
  "tags": [
    "compound"
  ],
  "name": "CompoundMonitorProxy",
  "description": "Contract with the actuall DSProxy permission calls the automation operations.",
  "eventDecorators": [
    {
      "signature": "MonitorChangeCanceled()",
      "name": "MonitorChangeCanceled",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": []
    },
    {
      "signature": "MonitorChangeFinished(address)",
      "name": "MonitorChangeFinished",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "monitor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MonitorChangeInitiated(address,address)",
      "name": "MonitorChangeInitiated",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "oldMonitor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newMonitor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MonitorChangeReverted(address)",
      "name": "MonitorChangeReverted",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "monitor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "CHANGE_PERIOD()",
      "name": "CHANGE_PERIOD",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addAllowed(address)",
      "name": "addAllowed",
      "description": "Allowed users are able to add new allowed user.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "Address of user that will be allowed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "admin()",
      "name": "admin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowed(address)",
      "name": "allowed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "callExecute(address,address,bytes)",
      "name": "callExecute",
      "description": "Only monitor contract is able to call execute on users proxy.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "Address of cdp owner (users DSProxy address).",
          "recommendedTypes": []
        },
        {
          "name": "_compoundSaverProxy",
          "description": "Address of CompoundSaverProxy.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "Data to send to CompoundSaverProxy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelMonitorChange()",
      "name": "cancelMonitorChange",
      "description": "At any point allowed users are able to cancel monitor change.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeMonitor(address)",
      "name": "changeMonitor",
      "description": "Allowed users are able to start procedure for changing monitor. after CHANGE_PERIOD needs to call confirmNewMonitor to actually make a change.",
      "parameterDecorators": [
        {
          "name": "_newMonitor",
          "description": "address of new monitor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeRequestedTimestamp()",
      "name": "changeRequestedTimestamp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "confirmNewMonitor()",
      "name": "confirmNewMonitor",
      "description": "Anyone is able to confirm new monitor after CHANGE_PERIOD if process is started.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lastMonitor()",
      "name": "lastMonitor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "monitor()",
      "name": "monitor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newMonitor()",
      "name": "newMonitor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeAllowed(address)",
      "name": "removeAllowed",
      "description": "Allowed users are able to remove allowed user. owner is always allowed even if someone tries to remove it from allowed mapping.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "Address of allowed user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revertMonitor()",
      "name": "revertMonitor",
      "description": "Its possible to revert monitor to last used monitor.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAdminByAdmin(address)",
      "name": "setAdminByAdmin",
      "description": "Admin is able to set new admin.",
      "parameterDecorators": [
        {
          "name": "_admin",
          "description": "Address of multisig that becomes new admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAdminByOwner(address)",
      "name": "setAdminByOwner",
      "description": "Admin is set by owner first time, after that admin is super role and has permission to change owner.",
      "parameterDecorators": [
        {
          "name": "_admin",
          "description": "Address of multisig that becomes admin.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setChangePeriod(uint256)",
      "name": "setChangePeriod",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_periodInDays",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMonitor(address)",
      "name": "setMonitor",
      "description": "Allowed users are able to set Monitor contract without any waiting period first time.",
      "parameterDecorators": [
        {
          "name": "_monitor",
          "description": "Address of Monitor contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOwnerByAdmin(address)",
      "name": "setOwnerByAdmin",
      "description": "Admin is able to change owner.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "Address of new owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawEth()",
      "name": "withdrawEth",
      "description": "In case something is left in contract, owner is able to withdraw it.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawToken(address)",
      "name": "withdrawToken",
      "description": "In case something is left in contract, owner is able to withdraw it.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of token to withdraw balance.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}