{
  "schema": "../schema.json",
  "tags": [
    "oracles",
    "locking"
  ],
  "name": "BetHorde",
  "description": "BetHorde: decentralised bets.",
  "eventDecorators": [
    {
      "signature": "BetPlaced(address,uint32)",
      "name": "BetPlaced",
      "description": "Emitted every time an order is broadcasted. Event for creation of bets.",
      "parameterDecorators": [
        {
          "name": "house",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "bet_id",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BetResolved(address,bool,uint88,address,uint96)",
      "name": "BetResolved",
      "description": "Emitted every time an order is broadcasted. Event for bet resolution (not emitted if 'ForceBet' was used).",
      "parameterDecorators": [
        {
          "name": "house",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "player_win",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "odds",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "pot",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "BuyContract(uint256)",
      "name": "BuyContract",
      "description": "Contract can be bought by anyone if owner lowers price.",
      "parameterDecorators": [
        {
          "name": "new_price",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ChangeOwner(address)",
      "name": "ChangeOwner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "new_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "CreatePlayer()",
      "name": "CreatePlayer",
      "description": "Create a new player for msg.sender (required before placing bets).",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "DecideBet(uint256,bytes32[8])",
      "name": "DecideBet",
      "description": "Decide outcome of a bet by providing a signature for bet randomness.",
      "parameterDecorators": [
        {
          "name": "bet_id",
          "description": "Identifier of bet to be decided.",
          "recommendedTypes": []
        },
        {
          "name": "signed_randomness",
          "description": "RSA signature (see top of file) for bet.randomness.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "Dismantle()",
      "name": "Dismantle",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ForceBet(uint256)",
      "name": "ForceBet",
      "description": "If house has not decided bet within 24 hours, force player win. Address calling this function receives house take (into house balance).",
      "parameterDecorators": [
        {
          "name": "bet_id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "FundHouse()",
      "name": "FundHouse",
      "description": "Add funds to house.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "HouseWithdraw(uint256)",
      "name": "HouseWithdraw",
      "description": "Withdraw funds from house. House must be paused.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount to withdraw (WEI).*.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "OpenOrAdjustHouse(bytes32[8],uint256,uint256,uint256)",
      "name": "OpenOrAdjustHouse",
      "description": "Open a new house for players to bet against or adjust house parameters. Note on adjusting parameters: house must be paused and this will update last_update_timestamp.",
      "parameterDecorators": [
        {
          "name": "modulus",
          "description": "bytes32[8] representing modulus of a 2048 bit RSA key.",
          "recommendedTypes": []
        },
        {
          "name": "max_loss",
          "description": "Maximum WEI that house will tolerate losing on a single bet. Applies to pot value, so small bets with high odds or large bets with smaller odds can both exceed this value.",
          "recommendedTypes": []
        },
        {
          "name": "min_bet",
          "description": "Minimum bet price that house is willing to accept. Setting this too low can result in gas prices exceeding earnings.",
          "recommendedTypes": []
        },
        {
          "name": "take",
          "description": "House take. Can be from 0 to 1000 and goes up in 0.01% increments. Applied only for player wins (except if 'ForceBet' is called).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "OwnerWithdraw()",
      "name": "OwnerWithdraw",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "PlaceBet(address,uint256,uint256,bytes32,uint256,uint256)",
      "name": "PlaceBet",
      "description": "Place bet. Adds msg.value to player account before deducting bet.",
      "parameterDecorators": [
        {
          "name": "house",
          "description": "House to bet against.",
          "recommendedTypes": []
        },
        {
          "name": "odds",
          "description": "Bet odds: 1 / odds chance of winning odds * amount_gwei. Winnings are subject to house and contract takes. 2 <= odds <= 1 million.",
          "recommendedTypes": []
        },
        {
          "name": "amount_gwei",
          "description": "GWEI to bet.",
          "recommendedTypes": []
        },
        {
          "name": "randomness",
          "description": "Random 32 byte value.",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "A value larger than current nonce, but not by more than 10.",
          "recommendedTypes": []
        },
        {
          "name": "bet_placed_timestamp",
          "description": "When player created the bet (protects against house changing parameters after bet is sent).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "PlayerWithdraw(uint256)",
      "name": "PlayerWithdraw",
      "description": "Withdraw funds from player account.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "How much to withdraw (WEI).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "SetPrice(uint256)",
      "name": "SetPrice",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sale_price",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "TogglePauseHouse()",
      "name": "TogglePauseHouse",
      "description": "Pause/unpause house. Pause takes 250 blocks to start and cannot be changed before that. Unpause takes effect immediately.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ViewHouse(address)",
      "name": "ViewHouse",
      "description": "House struct holds state for a house.",
      "parameterDecorators": [
        {
          "name": "house",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "balance",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "bet_balance",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "max_loss",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "min_bet",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "take",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "modulus",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32[8]"
            },
            {
              "name": "pause_block",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "first_bet",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "last_bet",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "active_bets",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "completed_bets",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "house_address_index",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint128"
            },
            {
              "name": "last_update_timestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "last_low_balance_timestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bets(uint256)",
      "name": "bets",
      "description": "A bet struct is created for each bet, so it is optimised for data size Bets are stored as a doubly linked list per house, so previous_house_bet and next_house_bet are pointers within global bets mapping. Resolved bets are deleted and removed from relevant house list.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "house",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "price_gwei",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint56"
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint40"
        },
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "previous_house_bet",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "next_house_bet",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "odds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "randomness",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "house_addresses(uint256)",
      "name": "house_addresses",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "players(address)",
      "name": "players",
      "description": "Player struct holds state for player.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "balance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "active_bets",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "creation_block",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "winnings",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "state()",
      "name": "state",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "bet_counter",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "winnings_micro",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "reserved_eth",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "sale_price",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "last_bet_time",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "num_houses",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}