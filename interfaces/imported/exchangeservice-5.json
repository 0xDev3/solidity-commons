{
  "schema": "../schema.json",
  "tags": [],
  "name": "ExchangeService",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "_getPriceOf(address)",
      "name": "_getPriceOf",
      "description": "Returns the price (6 decimals precision) of a given token, ultimately provided by the Witnet oracle sidechain to Celo Alfajores.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_lastPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addPriceFeed(bytes4,address)",
      "name": "addPriceFeed",
      "description": "The function allows to add a price feed to the exchange service. Requirements: - the erc2362 id of the price feed, see {https://docs.witnet.io/smart-contracts/witnet-data-feeds/addresses/celo}. - the token address.",
      "parameterDecorators": [
        {
          "name": "_erc2362id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchange(address,uint256)",
      "name": "exchange",
      "description": "Tokens are sent to the basket service, where they are held. The value of a given token is dependent on all the tokens supported by the exchange and the value returned by its current price in Celo (e.G. the cUSD, assuming 1 cUSD = USD). In return the sender will receive a fixed amount Nylon from the basket service. Requirements: - given token must exist on the exchange service. - price feed related to the token must exist on the exchange. - sufficient token balance of the sender must be present. {exchange} is callable by anyone.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "witnetPriceRouter()",
      "name": "witnetPriceRouter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}