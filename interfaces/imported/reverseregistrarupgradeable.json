{
  "schema": "../schema.json",
  "tags": [],
  "name": "ReverseRegistrarUpgradeable",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AdminChanged(address,address)",
      "name": "AdminChanged",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "previousAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BeaconUpgraded(address)",
      "name": "BeaconUpgraded",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "beacon",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ControllerChanged(address,bool)",
      "name": "ControllerChanged",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "controller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "enabled",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ReverseClaimed(address,bytes32)",
      "name": "ReverseClaimed",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "node",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Upgraded(address)",
      "name": "Upgraded",
      "description": "Triggered when an amount of an ERC20 has been transferred from this contract to an address.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "changeProxyAdmin(address)",
      "name": "changeProxyAdmin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claim(address)",
      "name": "claim",
      "description": "Transfers ownership of the reverse ENS record associated with the calling account.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "The address to set as the owner of the reverse record in ENS.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ENS node hash of the reverse record.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimForAddr(address,address)",
      "name": "claimForAddr",
      "description": "Transfers ownership of the reverse ENS record associated with the calling account.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "The reverse record to set.",
          "recommendedTypes": []
        },
        {
          "name": "owner",
          "description": "The address to set as the owner of the reverse record in ENS.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ENS node hash of the reverse record.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimWithResolver(address,address)",
      "name": "claimWithResolver",
      "description": "Transfers ownership of the reverse ENS record associated with the calling account.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "The address to set as the owner of the reverse record in ENS.",
          "recommendedTypes": []
        },
        {
          "name": "resolver",
          "description": "The address of the resolver to set; 0 to leave unchanged.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ENS node hash of the reverse record.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimWithResolverForAddr(address,address,address)",
      "name": "claimWithResolverForAddr",
      "description": "Transfers ownership of the reverse ENS record specified with the address provided.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "The reverse record to set.",
          "recommendedTypes": []
        },
        {
          "name": "owner",
          "description": "The address to set as the owner of the reverse record in ENS.",
          "recommendedTypes": []
        },
        {
          "name": "resolver",
          "description": "The address of the resolver to set; 0 to leave unchanged.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ENS node hash of the reverse record.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "controllers(address)",
      "name": "controllers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "defaultResolver()",
      "name": "defaultResolver",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ens()",
      "name": "ens",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProxyAdmin()",
      "name": "getProxyAdmin",
      "description": "Returns the active proxy admin.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address)",
      "name": "initialize",
      "description": "Initialiser.",
      "parameterDecorators": [
        {
          "name": "ensAddr",
          "description": "The address of the ENS registry.",
          "recommendedTypes": []
        },
        {
          "name": "resolverAddr",
          "description": "The address of the default reverse resolver.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "node(address)",
      "name": "node",
      "description": "Returns the node hash for a given account's reverse records.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "The address to hash.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ENS node hash.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setController(address,bool)",
      "name": "setController",
      "description": "",
      "parameterDecorators": [
        {
          "name": "controller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "enabled",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setName(string)",
      "name": "setName",
      "description": "Sets the `name()` record for the reverse ENS record associated with the calling account. First updates the resolver to the default reverse resolver if necessary.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "The name to set for this address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ENS node hash of the reverse record.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNameForAddr(address,address,string)",
      "name": "setNameForAddr",
      "description": "Sets the `name()` record for the reverse ENS record associated with the account provided. First updates the resolver to the default reverse resolver if necessary. Only callable by controllers and authorised users.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "The reverse record to set.",
          "recommendedTypes": []
        },
        {
          "name": "owner",
          "description": "The owner of the reverse node.",
          "recommendedTypes": []
        },
        {
          "name": "name",
          "description": "The name to set for this address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The ENS node hash of the reverse record.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeTo(address)",
      "name": "upgradeTo",
      "description": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "upgradeToAndCall(address,bytes)",
      "name": "upgradeToAndCall",
      "description": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    }
  ]
}