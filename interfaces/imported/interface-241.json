{
  "schema": "../schema.json",
  "tags": [
    "gnosis"
  ],
  "name": "GnosisSafe",
  "description": "Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.",
  "eventDecorators": [
    {
      "signature": "AddedOwner(address)",
      "name": "AddedOwner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ApproveHash(bytes32,address)",
      "name": "ApproveHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "approvedHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ChangedMasterCopy(address)",
      "name": "ChangedMasterCopy",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ChangedThreshold(uint256)",
      "name": "ChangedThreshold",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DisabledModule(address)",
      "name": "DisabledModule",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EnabledModule(address)",
      "name": "EnabledModule",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExecutionFailure(bytes32,uint256)",
      "name": "ExecutionFailure",
      "description": "",
      "parameterDecorators": [
        {
          "name": "txHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "payment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExecutionFromModuleFailure(address)",
      "name": "ExecutionFromModuleFailure",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ExecutionFromModuleSuccess(address)",
      "name": "ExecutionFromModuleSuccess",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ExecutionSuccess(bytes32,uint256)",
      "name": "ExecutionSuccess",
      "description": "",
      "parameterDecorators": [
        {
          "name": "txHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "payment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RemovedOwner(address)",
      "name": "RemovedOwner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SignMsg(bytes32)",
      "name": "SignMsg",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newERC20Address",
          "description": "is an address of the newly created ERC20 token MinimalProxy.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "NAME()",
      "name": "NAME",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "VERSION()",
      "name": "VERSION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addOwnerWithThreshold(address,uint256)",
      "name": "addOwnerWithThreshold",
      "description": "Adds the owner `owner` to the Safe and updates the threshold to `_threshold`. Allows to add a new owner to the Safe and update the threshold at the same time. This can only be done via a Safe transaction.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "New owner address.",
          "recommendedTypes": []
        },
        {
          "name": "_threshold",
          "description": "New threshold.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveHash(bytes32)",
      "name": "approveHash",
      "description": "Marks a hash as approved. This can be used to validate a hash that is used by a signature.",
      "parameterDecorators": [
        {
          "name": "hashToApprove",
          "description": "The hash that should be marked as approved for signatures that are verified by this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approvedHashes(address,bytes32)",
      "name": "approvedHashes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeMasterCopy(address)",
      "name": "changeMasterCopy",
      "description": "Allows to upgrade the contract. This can only be done via a Safe transaction.",
      "parameterDecorators": [
        {
          "name": "_masterCopy",
          "description": "New contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeThreshold(uint256)",
      "name": "changeThreshold",
      "description": "Changes the threshold of the Safe to `_threshold`. Allows to update the number of required confirmations by Safe owners. This can only be done via a Safe transaction.",
      "parameterDecorators": [
        {
          "name": "_threshold",
          "description": "New threshold.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "checkSignatures(bytes32,bytes,bytes)",
      "name": "checkSignatures",
      "description": "Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.",
      "parameterDecorators": [
        {
          "name": "dataHash",
          "description": "Hash of the data (could be either a message hash or transaction hash).",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "That should be signed (this is passed to an external validator contract).",
          "recommendedTypes": []
        },
        {
          "name": "signatures",
          "description": "Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "disableModule(address,address)",
      "name": "disableModule",
      "description": "Disables the module `module` for the Safe. Allows to remove a module from the whitelist. This can only be done via a Safe transaction.",
      "parameterDecorators": [
        {
          "name": "prevModule",
          "description": "Module that pointed to the module to be removed in the linked list.",
          "recommendedTypes": []
        },
        {
          "name": "module",
          "description": "Module to be removed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "domainSeparator()",
      "name": "domainSeparator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "enableModule(address)",
      "name": "enableModule",
      "description": "Enables the module `module` for the Safe. Allows to add a module to the whitelist. This can only be done via a Safe transaction.",
      "parameterDecorators": [
        {
          "name": "module",
          "description": "Module to be whitelisted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)",
      "name": "encodeTransactionData",
      "description": "Returns the bytes that are hashed to be signed by owners.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Destination address.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Ether value.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data payload.",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "Operation type.",
          "recommendedTypes": []
        },
        {
          "name": "safeTxGas",
          "description": "Gas that should be used for the safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "baseGas",
          "description": "Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund).",
          "recommendedTypes": []
        },
        {
          "name": "gasPrice",
          "description": "Maximum gas price that should be used for this transaction.",
          "recommendedTypes": []
        },
        {
          "name": "gasToken",
          "description": "Token address (or 0 if ETH) that is used for the payment.",
          "recommendedTypes": []
        },
        {
          "name": "refundReceiver",
          "description": "Address of receiver of gas payment (or 0 if tx.origin).",
          "recommendedTypes": []
        },
        {
          "name": "_nonce",
          "description": "Transaction nonce.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Transaction hash bytes.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)",
      "name": "execTransaction",
      "description": "Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction. Note: The fees are always transfered, even if the user transaction fails.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Destination address of Safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Ether value of Safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data payload of Safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "Operation type of Safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "safeTxGas",
          "description": "Gas that should be used for the Safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "baseGas",
          "description": "Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund).",
          "recommendedTypes": []
        },
        {
          "name": "gasPrice",
          "description": "Gas price that should be used for the payment calculation.",
          "recommendedTypes": []
        },
        {
          "name": "gasToken",
          "description": "Token address (or 0 if ETH) that is used for the payment.",
          "recommendedTypes": []
        },
        {
          "name": "refundReceiver",
          "description": "Address of receiver of gas payment (or 0 if tx.origin).",
          "recommendedTypes": []
        },
        {
          "name": "signatures",
          "description": "Packed signature data ({bytes32 r}{bytes32 s}{uint8 v}).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "execTransactionFromModule(address,uint256,bytes,uint8)",
      "name": "execTransactionFromModule",
      "description": "Allows a Module to execute a Safe transaction without any further confirmations.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Destination address of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Ether value of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data payload of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "Operation type of module transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)",
      "name": "execTransactionFromModuleReturnData",
      "description": "Allows a Module to execute a Safe transaction without any further confirmations and return data.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Destination address of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Ether value of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data payload of module transaction.",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "Operation type of module transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "returnData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getChainId()",
      "name": "getChainId",
      "description": "Returns the chain id used by this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMessageHash(bytes)",
      "name": "getMessageHash",
      "description": "Returns hash of a message that can be signed by owners.",
      "parameterDecorators": [
        {
          "name": "message",
          "description": "Message that should be hashed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Message hash.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getModules()",
      "name": "getModules",
      "description": "Returns array of first 10 modules.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Array of modules.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getModulesPaginated(address,uint256)",
      "name": "getModulesPaginated",
      "description": "Returns array of modules.",
      "parameterDecorators": [
        {
          "name": "start",
          "description": "Start of the page.",
          "recommendedTypes": []
        },
        {
          "name": "pageSize",
          "description": "Maximum number of modules that should be returned.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "array",
          "description": "Array of modules.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "next",
          "description": "Start of the next page.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOwners()",
      "name": "getOwners",
      "description": "Returns array of owners.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Array of Safe owners.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStorageAt(uint256,uint256)",
      "name": "getStorageAt",
      "description": "Reads `length` bytes of storage in the currents contract.",
      "parameterDecorators": [
        {
          "name": "offset",
          "description": "- the offset in the current contract's storage in words to start reading from.",
          "recommendedTypes": []
        },
        {
          "name": "length",
          "description": "- the number of words (32 bytes) of data to read.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the bytes that were read.",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getThreshold()",
      "name": "getThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)",
      "name": "getTransactionHash",
      "description": "Returns hash to be signed by owners.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Destination address.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Ether value.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data payload.",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "Operation type.",
          "recommendedTypes": []
        },
        {
          "name": "safeTxGas",
          "description": "Fas that should be used for the safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "baseGas",
          "description": "Gas costs for data used to trigger the safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "gasPrice",
          "description": "Maximum gas price that should be used for this transaction.",
          "recommendedTypes": []
        },
        {
          "name": "gasToken",
          "description": "Token address (or 0 if ETH) that is used for the payment.",
          "recommendedTypes": []
        },
        {
          "name": "refundReceiver",
          "description": "Address of receiver of gas payment (or 0 if tx.origin).",
          "recommendedTypes": []
        },
        {
          "name": "_nonce",
          "description": "Transaction nonce.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Transaction hash.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isModuleEnabled(address)",
      "name": "isModuleEnabled",
      "description": "Returns if an module is enabled.",
      "parameterDecorators": [
        {
          "name": "module",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if the module is enabled.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner(address)",
      "name": "isOwner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isValidSignature(bytes,bytes)",
      "name": "isValidSignature",
      "description": "Implementation of ISignatureValidator (see `interfaces/ISignatureValidator.sol`). Should return whether the signature provided is valid for the provided data. The save does not implement the interface since `checkSignatures` is not a view method. The method will not perform any state changes (see parameters of `checkSignatures`).",
      "parameterDecorators": [
        {
          "name": "_data",
          "description": "Arbitrary length data signed on the behalf of address(this).",
          "recommendedTypes": []
        },
        {
          "name": "_signature",
          "description": "Signature byte array associated with _data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "a bool upon valid or invalid signature with corresponding _data.",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nonce()",
      "name": "nonce",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeOwner(address,address,uint256)",
      "name": "removeOwner",
      "description": "Removes the owner `owner` from the Safe and updates the threshold to `_threshold`. Allows to remove an owner from the Safe and update the threshold at the same time. This can only be done via a Safe transaction.",
      "parameterDecorators": [
        {
          "name": "prevOwner",
          "description": "Owner that pointed to the owner to be removed in the linked list.",
          "recommendedTypes": []
        },
        {
          "name": "owner",
          "description": "Owner address to be removed.",
          "recommendedTypes": []
        },
        {
          "name": "_threshold",
          "description": "New threshold.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requiredTxGas(address,uint256,bytes,uint8)",
      "name": "requiredTxGas",
      "description": "Deprecated in favor of common/StorageAccessible.sol and will be removed in next version. Allows to estimate a Safe transaction. This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data. Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Destination address of Safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Ether value of Safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data payload of Safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "operation",
          "description": "Operation type of Safe transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Estimate without refunds and overhead fees (base transaction and payload data gas costs).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFallbackHandler(address)",
      "name": "setFallbackHandler",
      "description": "Allows to add a contract to handle fallback calls. Only fallback calls without value and with data will be forwarded. This can only be done via a Safe transaction.",
      "parameterDecorators": [
        {
          "name": "handler",
          "description": "contract to handle fallbacks calls.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setup(address[],uint256,address,bytes,address,address,uint256,address)",
      "name": "setup",
      "description": "Setup function sets initial storage of contract.",
      "parameterDecorators": [
        {
          "name": "_owners",
          "description": "List of Safe owners.",
          "recommendedTypes": []
        },
        {
          "name": "_threshold",
          "description": "Number of required confirmations for a Safe transaction.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Contract address for optional delegate call.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Data payload for optional delegate call.",
          "recommendedTypes": []
        },
        {
          "name": "fallbackHandler",
          "description": "Handler for fallback calls to this contract.",
          "recommendedTypes": []
        },
        {
          "name": "paymentToken",
          "description": "Token that should be used for the payment (0 is ETH).",
          "recommendedTypes": []
        },
        {
          "name": "payment",
          "description": "Value that should be paid.",
          "recommendedTypes": []
        },
        {
          "name": "paymentReceiver",
          "description": "Adddress that should receive the payment (or 0 if tx.origin).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "signMessage(bytes)",
      "name": "signMessage",
      "description": "Marks a message (`_data`) as signed. Marks a message as signed, so that it can be used with EIP-1271.",
      "parameterDecorators": [
        {
          "name": "_data",
          "description": "Arbitrary length data that should be marked as signed on the behalf of address(this).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "signedMessages(bytes32)",
      "name": "signedMessages",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "simulateDelegatecall(address,bytes)",
      "name": "simulateDelegatecall",
      "description": "Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.",
      "parameterDecorators": [
        {
          "name": "targetContract",
          "description": "Address of the contract containing the code to execute.",
          "recommendedTypes": []
        },
        {
          "name": "calldataPayload",
          "description": "Calldata that should be sent to the target contract (encoded method name and arguments).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "simulateDelegatecallInternal(address,bytes)",
      "name": "simulateDelegatecallInternal",
      "description": "Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Returns encoded result as revert message concatenated with the success flag of the inner call as a last byte.",
      "parameterDecorators": [
        {
          "name": "targetContract",
          "description": "Address of the contract containing the code to execute.",
          "recommendedTypes": []
        },
        {
          "name": "calldataPayload",
          "description": "Calldata that should be sent to the target contract (encoded method name and arguments).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapOwner(address,address,address)",
      "name": "swapOwner",
      "description": "Replaces the owner `oldOwner` in the Safe with `newOwner`. Allows to swap/replace an owner from the Safe with another address. This can only be done via a Safe transaction.",
      "parameterDecorators": [
        {
          "name": "prevOwner",
          "description": "Owner that pointed to the owner to be replaced in the linked list.",
          "recommendedTypes": []
        },
        {
          "name": "oldOwner",
          "description": "Owner address to be replaced.",
          "recommendedTypes": []
        },
        {
          "name": "newOwner",
          "description": "New owner address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}