{"schema":"../schema.json","tags":["staking","vaults"],"name":"ERC20VaultHandler","description":"ERC-20 TCAP Vault. Contract in charge of handling the TCAP Vault and stake using a Collateral ERC20.","eventDecorators":[{"signature":"CollateralAdded(address,uint256,uint256)","name":"CollateralAdded","description":"An event emitted when collateral is added to a vault. Emitted when a Position is opened.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[],"indexed":true},{"name":"_id","description":"","recommendedTypes":[],"indexed":true},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"CollateralRemoved(address,uint256,uint256)","name":"CollateralRemoved","description":"An event emitted when collateral is removed from a vault. Emitted when a Position is opened.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[],"indexed":true},{"name":"_id","description":"","recommendedTypes":[],"indexed":true},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewBurnFee(address,uint256)","name":"NewBurnFee","description":"An event emitted when the burn fee is updated. Emitted when a Position is opened.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[],"indexed":true},{"name":"_burnFee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewLiquidationPenalty(address,uint256)","name":"NewLiquidationPenalty","description":"An event emitted when the liquidation penalty is updated. Emitted when a Position is opened.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[],"indexed":true},{"name":"_liquidationPenalty","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewRatio(address,uint256)","name":"NewRatio","description":"An event emitted when the ratio is updated. Emitted when a Position is opened.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[],"indexed":true},{"name":"_ratio","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewTreasury(address,address)","name":"NewTreasury","description":"An event emitted when the treasury contract is updated. Emitted when a Position is opened.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[],"indexed":true},{"name":"_tresury","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when a Position is opened.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Paused(address)","name":"Paused","description":"Emitted when a Position is opened.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Recovered(address,uint256)","name":"Recovered","description":"An event emitted when a erc20 token is recovered. Emitted when a Position is opened.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[],"indexed":false},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"Emitted when a Position is opened.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"Emitted when a Position is opened.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"Emitted when a Position is opened.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"TokensBurned(address,uint256,uint256)","name":"TokensBurned","description":"An event emitted when tokens are burned. Emitted when a Position is opened.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[],"indexed":true},{"name":"_id","description":"","recommendedTypes":[],"indexed":true},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TokensMinted(address,uint256,uint256)","name":"TokensMinted","description":"An event emitted when tokens are minted. Emitted when a Position is opened.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[],"indexed":true},{"name":"_id","description":"","recommendedTypes":[],"indexed":true},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unpaused(address)","name":"Unpaused","description":"Emitted when a Position is opened.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"VaultCreated(address,uint256)","name":"VaultCreated","description":"An event emitted when a vault is created. Emitted when a Position is opened.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[],"indexed":true},{"name":"_id","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"VaultLiquidated(uint256,address,uint256,uint256)","name":"VaultLiquidated","description":"An event emitted when a vault is liquidated. Emitted when a Position is opened.","parameterDecorators":[{"name":"_vaultId","description":"","recommendedTypes":[],"indexed":true},{"name":"_liquidator","description":"","recommendedTypes":[],"indexed":true},{"name":"_liquidationCollateral","description":"","recommendedTypes":[],"indexed":false},{"name":"_reward","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"ETHPriceOracle()","name":"ETHPriceOracle","description":"ETH/USD Oracle Address.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"MAX_DECIMAL_PLACES()","name":"MAX_DECIMAL_PLACES","description":"Maximum decimal places that are supported by the collateral.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"MAX_FEE()","name":"MAX_FEE","description":"Maximum value that the burn fee can be set to.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"MIN_RATIO()","name":"MIN_RATIO","description":"Minimum value that the ratio can be set to.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"TCAPPrice()","name":"TCAPPrice","description":"Returns the price of the TCAP token. TCAP token is 18 decimalsoracle totalMarketPrice must be in wei formatP = T / d P = TCAP Token Price T = Total Crypto Market Cap d = Divisor.","parameterDecorators":[],"returnDecorators":[{"name":"price","description":"of the TCAP Token.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"TCAPToken()","name":"TCAPToken","description":"TCAP Token Address.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"addCollateral(uint256)","name":"addCollateral","description":"Allows users to add collateral to their vaults. _amount should be higher than 0ERC20 token must be approved first.","parameterDecorators":[{"name":"_amount","description":"of collateral to be added.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"burn(uint256)","name":"burn","description":"Pays the debt of TCAP tokens resulting them on burn, this releases collateral up to minimun vault ratio. _amount should be higher than 0A fee of exactly burnFee must be sent as value on ETHThe fee goes to the treasury contractif reward handler is set exit rewards.","parameterDecorators":[{"name":"_amount","description":"of tokens to burn.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"burnFee()","name":"burnFee","description":"Fee percentage of the total amount to burn charged on ETH when burning TCAP Tokens.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"collateralContract()","name":"collateralContract","description":"Collateral Token Address.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"collateralDecimalsAdjustmentFactor()","name":"collateralDecimalsAdjustmentFactor","description":"value used to divide collateral to adjust the decimal places.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"collateralPriceOracle()","name":"collateralPriceOracle","description":"Collateral/USD Oracle Address.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"counter()","name":"counter","description":"Vault Id counter.","parameterDecorators":[],"returnDecorators":[{"name":"_value","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"createVault()","name":"createVault","description":"Allows an user to create an unique Vault. Only one vault per address can be created.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"divisor()","name":"divisor","description":"Value used as divisor with the total market cap, just like the S&P 500 or any major financial index would to define the final tcap token price.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getFee(uint256)","name":"getFee","description":"Returns the required fee of ETH to burn the TCAP tokens. The returned value is returned in weif = (((P * A * b)/ 100))/ EP f = Burn Fee Value in wei P = TCAP Token Price A = TCAP Amount to Burn b = Burn Fee % EP = ETH Price.","parameterDecorators":[{"name":"_amount","description":"to burn.","recommendedTypes":[]}],"returnDecorators":[{"name":"fee","description":"fee.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getOraclePrice(address)","name":"getOraclePrice","description":"Returns the price of the chainlink oracle multiplied by the digits to get 18 decimals format. The price returned here is in USD is equivalent to 1 `ether` unit times 10 ** 18 eg. For ETH This will return the price of USD of 1 ETH * 10 ** 18 and **not** 1 wei * 10 ** 18 eg. For DAI This will return the price of USD of 1 DAI * 10 ** 18 and **not** (1 / 10 ** 18) * 10 ** 18.","parameterDecorators":[{"name":"_oracle","description":"to be the price called.","recommendedTypes":[]}],"returnDecorators":[{"name":"price","description":"price.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getVault(uint256)","name":"getVault","description":"Returns the Vault information of specified identifier.","parameterDecorators":[{"name":"_id","description":"of vault.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getVaultRatio(uint256)","name":"getVaultRatio","description":"Returns the Collateral Ratio of the Vault. vr = (cp * (C * 100 * cdaf)) / D * P vr = Vault Ratio C = Vault Collateral cdaf = Collateral Decimals Adjustment Factor cp = Collateral Price D = Vault Debt P = TCAP Token Price.","parameterDecorators":[{"name":"_vaultId","description":"id of vault.","recommendedTypes":[]}],"returnDecorators":[{"name":"currentRatio","description":"currentRatio.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"liquidateVault(uint256,uint256)","name":"liquidateVault","description":"Allow users to burn TCAP tokens to liquidate vaults with vault collateral ratio under the minium ratio, the liquidator receives the staked collateral of the liquidated vault at a premium. Resulting ratio must be above or equal minimun ratioA fee of exactly burnFee must be sent as value on ETHThe fee goes to the treasury contract.","parameterDecorators":[{"name":"_vaultId","description":"to liquidate.","recommendedTypes":[]},{"name":"_maxTCAP","description":"max amount of TCAP the liquidator is willing to pay to liquidate vault.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"liquidationPenalty()","name":"liquidationPenalty","description":"Penalty charged to vault owner when a vault is liquidated, this value goes to the liquidator.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"liquidationReward(uint256)","name":"liquidationReward","description":"Returns the Reward Collateral amount for liquidating a vault. the returned value is returned as collateral currencyR = (LT * (p + 100)) / 100RC = R / (cp * cdaf) R = Liquidation Reward RC = Liquidation Reward Collateral LT = Required Liquidation TCAP p = liquidation penalty cp = Collateral Price cdaf = Collateral Decimals adjustment factor.","parameterDecorators":[{"name":"_vaultId","description":"of the vault to liquidate.","recommendedTypes":[]}],"returnDecorators":[{"name":"rewardCollateral","description":"for liquidating Vault.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"mint(uint256)","name":"mint","description":"Uses collateral to generate debt on TCAP Tokens which are minted and assigend to caller. _amount should be higher than 0requires to have a vault ratio above the minimum ratioif reward handler is set stake to earn rewards.","parameterDecorators":[{"name":"_amount","description":"of tokens to mint.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"oracleDigits()","name":"oracleDigits","description":"value used to multiply chainlink oracle for handling decimals.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pause()","name":"pause","description":"Allows the owner to Pause the Contract.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"paused()","name":"paused","description":"Returns true if the contract is paused, and false otherwise.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"ratio()","name":"ratio","description":"Minimum ratio required to prevent liquidation of vault.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"recoverERC20(address,uint256)","name":"recoverERC20","description":"Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders. Only owner can call it.","parameterDecorators":[{"name":"_tokenAddress","description":"address.","recommendedTypes":[]},{"name":"_tokenAmount","description":"uint.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeCollateral(uint256)","name":"removeCollateral","description":"Allows users to remove collateral currently not being used to generate TCAP tokens from their vaults. reverts if the resulting ratio is less than the minimun ratio_amount should be higher than 0transfers the collateral back to the user.","parameterDecorators":[{"name":"_amount","description":"of collateral to remove.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"requiredCollateral(uint256)","name":"requiredCollateral","description":"Returns the minimal required collateral to mint TCAP token. TCAP token is 18 decimalsC = ((P * A * r) / 100) / (cp * cdaf) C = Required Collateral P = TCAP Token Price A = Amount to Mint cp = Collateral Price r = Minimum Ratio for Liquidation cdaf = Collateral decimals adjust factor.","parameterDecorators":[{"name":"_amount","description":"uint amount to mint.","recommendedTypes":[]}],"returnDecorators":[{"name":"collateral","description":"of the TCAP Token.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"requiredLiquidationTCAP(uint256)","name":"requiredLiquidationTCAP","description":"Returns the minimal required TCAP to liquidate a Vault. LT = ((((D * r) / 100) - cTcap) * 100) / (r - (p + 100)) cTcap = ((C * cdaf * cp) / P) LT = Required TCAP D = Vault Debt C = Required Collateral P = TCAP Token Price cdaf = Collateral Decimals adjustment Factor cp = Collateral Price r = Min Vault Ratio p = Liquidation Penalty.","parameterDecorators":[{"name":"_vaultId","description":"of the vault to liquidate.","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"required of the TCAP Token.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"rewardHandler()","name":"rewardHandler","description":"Address of the contract that gives rewards to minters of TCAP, rewards are only given if address is set in constructor.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"setBurnFee(uint256)","name":"setBurnFee","description":"Sets the burn fee percentage an user pays when burning tcap tokens. Only owner can call it.","parameterDecorators":[{"name":"_burnFee","description":"uint.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setLiquidationPenalty(uint256)","name":"setLiquidationPenalty","description":"Sets the liquidation penalty % charged on liquidation. Only owner can call itrecommended value is between 1-15% and can't be above 100%.","parameterDecorators":[{"name":"_liquidationPenalty","description":"uint.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRatio(uint256)","name":"setRatio","description":"Sets the collateral ratio needed to mint tokens. Only owner can call it.","parameterDecorators":[{"name":"_ratio","description":"uint.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setTreasury(address)","name":"setTreasury","description":"Sets the treasury contract address where fees are transfered to. Only owner can call it.","parameterDecorators":[{"name":"_treasury","description":"address.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"ERC165 Standard for support of interfaces.","parameterDecorators":[{"name":"_interfaceId","description":"bytes of interface.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"bool.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"tcapOracle()","name":"tcapOracle","description":"Total Market Cap/USD Oracle Address.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"treasury()","name":"treasury","description":"Address of the treasury contract (usually the timelock) where the funds generated by the protocol are sent.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"unpause()","name":"unpause","description":"Allows the owner to Unpause the Contract.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"userToVault(address)","name":"userToVault","description":"Owner address to Vault Id.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"vaults(uint256)","name":"vaults","description":"Id To Vault.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"Id","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"Collateral","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"Debt","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"Owner","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}