{"schema":"../schema.json","tags":[],"name":"AmmRewards","description":"","eventDecorators":[{"signature":"Deposit(address,uint256,uint256,address)","name":"Deposit","description":"Event for token purchase logging. Emitted when setting contract parameters.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"to","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"EmergencyWithdraw(address,uint256,uint256,address)","name":"EmergencyWithdraw","description":"Event for token purchase logging. Emitted when setting contract parameters.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"to","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Harvest(address,uint256,uint256)","name":"Harvest","description":"Event for token purchase logging. Emitted when setting contract parameters.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"LogPoolAddition(uint256,uint256,address,address)","name":"LogPoolAddition","description":"Event for token purchase logging. Emitted when setting contract parameters.","parameterDecorators":[{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"allocPoint","description":"","recommendedTypes":[],"indexed":false},{"name":"lpToken","description":"","recommendedTypes":[],"indexed":true},{"name":"rewarder","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"LogRewardTokenPerSecond(uint256)","name":"LogRewardTokenPerSecond","description":"Event for token purchase logging. Emitted when setting contract parameters.","parameterDecorators":[{"name":"rewardTokenPerSecond","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"LogSetPool(uint256,uint256,address,bool)","name":"LogSetPool","description":"Event for token purchase logging. Emitted when setting contract parameters.","parameterDecorators":[{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"allocPoint","description":"","recommendedTypes":[],"indexed":false},{"name":"rewarder","description":"","recommendedTypes":[],"indexed":true},{"name":"overwrite","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"LogUpdatePool(uint256,uint256,uint256,uint256)","name":"LogUpdatePool","description":"Event for token purchase logging. Emitted when setting contract parameters.","parameterDecorators":[{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"lastRewardTime","description":"","recommendedTypes":[],"indexed":false},{"name":"lpSupply","description":"","recommendedTypes":[],"indexed":false},{"name":"accRewardTokenPerShare","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Event for token purchase logging. Emitted when setting contract parameters.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Withdraw(address,uint256,uint256,address)","name":"Withdraw","description":"Event for token purchase logging. Emitted when setting contract parameters.","parameterDecorators":[{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"pid","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"to","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"REWARD_TOKEN()","name":"REWARD_TOKEN","description":"Address of REWARD_TOKEN contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"add(uint256,address,address)","name":"add","description":"Add a new LP to the pool. Can only be called by the owner.","parameterDecorators":[{"name":"allocPoint","description":"AP of the new pool.","recommendedTypes":[]},{"name":"_lpToken","description":"Address of the LP ERC-20 token.","recommendedTypes":[]},{"name":"_rewarder","description":"Address of the rewarder delegate.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deposit(uint256,uint256,address)","name":"deposit","description":"Deposit LP tokens to MCV2 for REWARD_TOKEN allocation.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"amount","description":"LP token amount to deposit.","recommendedTypes":[]},{"name":"to","description":"The receiver of `amount` deposit benefit.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"emergencyWithdraw(uint256,address)","name":"emergencyWithdraw","description":"Withdraw without caring about rewards. EMERGENCY ONLY.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"to","description":"Receiver of the LP tokens.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"harvest(uint256,address)","name":"harvest","description":"Harvest proceeds for transaction sender to `to`.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"to","description":"Receiver of REWARD_TOKEN rewards.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"lpToken(uint256)","name":"lpToken","description":"Address of the LP token for each MCV2 pool.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"massUpdatePools(uint256[])","name":"massUpdatePools","description":"Update reward variables for all pools. Be careful of gas spending!.","parameterDecorators":[{"name":"pids","description":"Pool IDs of all to be updated. Make sure to update all active pools.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingRewardToken(uint256,address)","name":"pendingRewardToken","description":"View function to see pending REWARD_TOKEN on frontend.","parameterDecorators":[{"name":"_pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"_user","description":"Address of user.","recommendedTypes":[]}],"returnDecorators":[{"name":"pending","description":"REWARD_TOKEN reward for a given user.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"poolInfo(uint256)","name":"poolInfo","description":"Info of each MCV2 pool.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"accRewardTokenPerShare","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"lastRewardTime","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"allocPoint","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"poolLength()","name":"poolLength","description":"Returns the number of MCV2 pools.","parameterDecorators":[],"returnDecorators":[{"name":"pools","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"rewardTokenPerSecond()","name":"rewardTokenPerSecond","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rewarder(uint256)","name":"rewarder","description":"Address of each `IRewarder` contract in MCV2.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"rewardsManager()","name":"rewardsManager","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"set(uint256,uint256,address,bool)","name":"set","description":"Update the given pool's REWARD_TOKEN allocation point and `IRewarder` contract. Can only be called by the owner.","parameterDecorators":[{"name":"_pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"_allocPoint","description":"New AP of the pool.","recommendedTypes":[]},{"name":"_rewarder","description":"Address of the rewarder delegate.","recommendedTypes":[]},{"name":"overwrite","description":"True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRewardTokenPerSecond(uint256)","name":"setRewardTokenPerSecond","description":"Sets the rewardToken per second to be distributed. Can only be called by the owner.","parameterDecorators":[{"name":"rewardTokenPerSecond_","description":"The amount of RewardToken to be distributed per second.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRewardsManager(address)","name":"setRewardsManager","description":"","parameterDecorators":[{"name":"_rewardsManager","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"totalAllocPoint()","name":"totalAllocPoint","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updatePool(uint256)","name":"updatePool","description":"Update reward variables of the given pool.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]}],"returnDecorators":[{"name":"pool","description":"Returns the pool that was updated.","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":false},{"signature":"userInfo(uint256,address)","name":"userInfo","description":"Info of each user that stakes LP tokens.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"rewardDebt","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(uint256,uint256,address)","name":"withdraw","description":"Withdraw LP tokens from MCV2.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"amount","description":"LP token amount to withdraw.","recommendedTypes":[]},{"name":"to","description":"Receiver of the LP tokens.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawAndHarvest(uint256,uint256,address)","name":"withdrawAndHarvest","description":"Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.","parameterDecorators":[{"name":"pid","description":"The index of the pool. See `poolInfo`.","recommendedTypes":[]},{"name":"amount","description":"LP token amount to withdraw.","recommendedTypes":[]},{"name":"to","description":"Receiver of the LP tokens and REWARD_TOKEN rewards.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}