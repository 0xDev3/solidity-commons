{
  "schema": "../schema.json",
  "tags": [
    "swaps"
  ],
  "name": "SwapExamples",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "DAI()",
      "name": "DAI",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "USDC()",
      "name": "USDC",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WETH9()",
      "name": "WETH9",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolFee()",
      "name": "poolFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint24"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swapExactInputMultihop(uint256)",
      "name": "swapExactInputMultihop",
      "description": "swapInputMultiplePools swaps a fixed amount of DAI for a maximum possible amount of WETH9 through an intermediary pool. For this example, we will swap DAI to USDC, then USDC to WETH9 to achieve our desired output. The calling address must approve this contract to spend at least `amountIn` worth of its DAI for this function to succeed.",
      "parameterDecorators": [
        {
          "name": "amountIn",
          "description": "The amount of DAI to be swapped.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountOut",
          "description": "The amount of WETH9 received after the swap.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapExactOutputMultihop(uint256,uint256)",
      "name": "swapExactOutputMultihop",
      "description": "swapExactOutputMultihop swaps a minimum possible amount of DAI for a fixed amount of WETH through an intermediary pool. For this example, we want to swap DAI for WETH9 through a USDC pool but we specify the desired amountOut of WETH9. Notice how the path encoding is slightly different in for exact output swaps. The calling address must approve this contract to spend its DAI for this function to succeed. As the amount of input DAI is variable, the calling address will need to approve for a slightly higher amount, anticipating some variance.",
      "parameterDecorators": [
        {
          "name": "amountOut",
          "description": "The desired amount of WETH9.",
          "recommendedTypes": []
        },
        {
          "name": "amountInMaximum",
          "description": "The maximum amount of DAI willing to be swapped for the specified amountOut of WETH9.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountIn",
          "description": "The amountIn of DAI actually spent to receive the desired amountOut.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapRouter()",
      "name": "swapRouter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}