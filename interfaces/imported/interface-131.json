{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "locking"
  ],
  "name": "HashedTimelock",
  "description": "Hashed Timelock Contracts (HTLCs) on Ethereum ETH. * This contract provides a way to create and keep HTLCs for ETH. * See HashedTimelockERC20.sol for a contract that provides the same functions for ERC20 tokens. * Protocol: * 1) newContract(receiver, hashlock, timelock) - a sender calls this to create a new HTLC and gets back a 32 byte contract id 2) withdraw(contractId, preimage) - once the receiver knows the preimage of the hashlock hash they can claim the ETH with this function 3) refund() - after timelock has expired and if the receiver did not withdraw funds the sender / creator of the HTLC can get their ETH back with this function.",
  "eventDecorators": [
    {
      "signature": "LogHTLCNew(bytes32,address,address,uint256,bytes32,uint256)",
      "name": "LogHTLCNew",
      "description": "Unfarm gets emitted when an account unstakes LP tokens.",
      "parameterDecorators": [
        {
          "name": "contractId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "hashlock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timelock",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LogHTLCRefund(bytes32)",
      "name": "LogHTLCRefund",
      "description": "Unfarm gets emitted when an account unstakes LP tokens.",
      "parameterDecorators": [
        {
          "name": "contractId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LogHTLCWithdraw(bytes32)",
      "name": "LogHTLCWithdraw",
      "description": "Unfarm gets emitted when an account unstakes LP tokens.",
      "parameterDecorators": [
        {
          "name": "contractId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "getContract(bytes32)",
      "name": "getContract",
      "description": "Get contract details.",
      "parameterDecorators": [
        {
          "name": "_contractId",
          "description": "HTLC contract id.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "hashlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "timelock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "withdrawn",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "refunded",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "preimage",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newContract(address,bytes32,uint256)",
      "name": "newContract",
      "description": "Sender sets up a new hash time lock contract depositing the ETH and providing the reciever lock terms.",
      "parameterDecorators": [
        {
          "name": "_receiver",
          "description": "Receiver of the ETH.",
          "recommendedTypes": []
        },
        {
          "name": "_hashlock",
          "description": "A sha-2 sha256 hash hashlock.",
          "recommendedTypes": []
        },
        {
          "name": "_timelock",
          "description": "UNIX epoch seconds time that the lock expires at. Refunds can be made after this time.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "contractId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "refund(bytes32)",
      "name": "refund",
      "description": "Called by the sender if there was no withdraw AND the time lock has expired. This will refund the contract amount.",
      "parameterDecorators": [
        {
          "name": "_contractId",
          "description": "Id of HTLC to refund from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(bytes32,bytes32)",
      "name": "withdraw",
      "description": "Called by the receiver once they know the preimage of the hashlock. This will transfer the locked funds to their address.",
      "parameterDecorators": [
        {
          "name": "_contractId",
          "description": "Id of the HTLC.",
          "recommendedTypes": []
        },
        {
          "name": "_preimage",
          "description": "sha256(_preimage) should equal the contract hashlock.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}