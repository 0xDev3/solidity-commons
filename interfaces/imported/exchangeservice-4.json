{
  "schema": "../schema.json",
  "tags": [],
  "name": "ExchangeService",
  "description": "",
  "eventDecorators": [
    {
      "signature": "FundsReceived(address,address,uint256)",
      "name": "FundsReceived",
      "description": "Emitted every time the contract gets upgraded. The {FundsReceived} event is emitted once tokens are sent to this contract.",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_getPriceOf(address)",
      "name": "_getPriceOf",
      "description": "Returns the price (6 decimals precision) of a given token, ultimately provided by the Witnet oracle sidechain to Celo Alfajores.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_lastPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addPriceFeed(bytes4,address)",
      "name": "addPriceFeed",
      "description": "The function allows to add a price feed to the exchange service. Requirements: - the erc2362 id of the price feed, see {https://docs.witnet.io/smart-contracts/witnet-data-feeds/addresses/celo}. - the token address.",
      "parameterDecorators": [
        {
          "name": "_erc2362id",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "aggregateTotals(address,uint256)",
      "name": "aggregateTotals",
      "description": "Aggregates the fixed, variable and total amount of Nylon a person would receive. Requirements: - the token address of either the cUSD or cEUR. - `amount`, factor 10**18 (ether). Returns: - `fixedAmount`, always half of the input amount - `variableAmount`, depends on the exchange rates - `totalAmount`, fixed + variable amounts.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "fixedAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "variableAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "totalAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "evaluatePrice(address)",
      "name": "evaluatePrice",
      "description": "Evaluates the price (6 decimals precision) of either the cUSD or cEUR. Returns: - `price` (exchange rate) of either USD/EUR or EUR/USD.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchange(address,uint256)",
      "name": "exchange",
      "description": "An x-amount of either cUSD or cEUR is sent to the exchange service. The exchange will then send from its own reserves a fixed amount (received token) and a variable amount (other token) to a basket service. In return the sender will receive a total (fixed + variable) amount Nylon from the basket service. Requirements: - the token address of either the cUSD or cEUR. - `amount`, factor 10**18 (ether). - price feed related to the token must exist on the exchange. - sufficient token balance of cUSD or cEUR by the exchange service. - sufficient token balance of the sender. {exchange} is callable by anyone.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "witnetPriceRouter()",
      "name": "witnetPriceRouter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}