{"schema":"../schema.json","tags":[],"name":"Agreement","description":"","eventDecorators":[{"signature":"Signed(address,uint256)","name":"Signed","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"signer","description":"","recommendedTypes":[],"indexed":true},{"name":"settingId","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SettingChanged(uint256)","name":"SettingChanged","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"settingId","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"AppFeesCashierSynced(address)","name":"AppFeesCashierSynced","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"newAppFeesCashier","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"DisputableAppActivated(address)","name":"DisputableAppActivated","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"disputable","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"DisputableAppDeactivated(address)","name":"DisputableAppDeactivated","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"disputable","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"CollateralRequirementChanged(address,uint256)","name":"CollateralRequirementChanged","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"disputable","description":"","recommendedTypes":[],"indexed":true},{"name":"collateralRequirementId","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ScriptResult(address,bytes,bytes,bytes)","name":"ScriptResult","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"executor","description":"","recommendedTypes":[],"indexed":true},{"name":"script","description":"","recommendedTypes":[],"indexed":false},{"name":"input","description":"","recommendedTypes":[],"indexed":false},{"name":"returnData","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RecoverToVault(address,address,uint256)","name":"RecoverToVault","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"vault","description":"","recommendedTypes":[],"indexed":true},{"name":"token","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ActionSubmitted(uint256,address)","name":"ActionSubmitted","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"actionId","description":"","recommendedTypes":[],"indexed":true},{"name":"disputable","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ActionClosed(uint256)","name":"ActionClosed","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"actionId","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ActionChallenged(uint256,uint256)","name":"ActionChallenged","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"actionId","description":"","recommendedTypes":[],"indexed":true},{"name":"challengeId","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ActionSettled(uint256,uint256)","name":"ActionSettled","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"actionId","description":"","recommendedTypes":[],"indexed":true},{"name":"challengeId","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ActionDisputed(uint256,uint256)","name":"ActionDisputed","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"actionId","description":"","recommendedTypes":[],"indexed":true},{"name":"challengeId","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ActionAccepted(uint256,uint256)","name":"ActionAccepted","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"actionId","description":"","recommendedTypes":[],"indexed":true},{"name":"challengeId","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ActionVoided(uint256,uint256)","name":"ActionVoided","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"actionId","description":"","recommendedTypes":[],"indexed":true},{"name":"challengeId","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ActionRejected(uint256,uint256)","name":"ActionRejected","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"actionId","description":"","recommendedTypes":[],"indexed":true},{"name":"challengeId","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Ruled(address,uint256,uint256)","name":"Ruled","description":"Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"arbitrator","description":"","recommendedTypes":[],"indexed":true},{"name":"disputeId","description":"","recommendedTypes":[],"indexed":true},{"name":"ruling","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"Query if a contract implements a certain interface.","parameterDecorators":[{"name":"_interfaceId","description":"The interface identifier being queried, as specified in ERC-165.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"canPerformChallenge(uint256,address)","name":"canPerformChallenge","description":"Tell whether an address can challenge an action.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action.","recommendedTypes":[]},{"name":"_challenger","description":"Address of the challenger.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"changeCollateralRequirement(address,address,uint64,uint256,uint256)","name":"changeCollateralRequirement","description":"Change `_disputable`'s collateral requirements. Initialization check is implicitly provided by the `auth()` modifier.","parameterDecorators":[{"name":"_disputable","description":"Address of the Disputable app.","recommendedTypes":[]},{"name":"_collateralToken","description":"Address of the ERC20 token to be used for collateral.","recommendedTypes":[]},{"name":"_challengeDuration","description":"Challenge duration, during which the submitter can raise a dispute.","recommendedTypes":[]},{"name":"_actionAmount","description":"Amount of collateral tokens that will be locked every time an action is submitted.","recommendedTypes":[]},{"name":"_challengeAmount","description":"Amount of collateral tokens that will be locked every time an action is challenged.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"hasInitialized()","name":"hasInitialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getSigner(address)","name":"getSigner","description":"Tell the information related to a signer.","parameterDecorators":[{"name":"_signer","description":"Address of signer.","recommendedTypes":[]}],"returnDecorators":[{"name":"lastSettingIdSigned","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"mustSign","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getChallenge(uint256)","name":"getChallenge","description":"Tell the information related to an action challenge.","parameterDecorators":[{"name":"_challengeId","description":"Identification number of the challenge.","recommendedTypes":[]}],"returnDecorators":[{"name":"actionId","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"challenger","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"endDate","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"context","description":"","recommendedTypes":[],"solidityType":"bytes"},{"name":"settlementOffer","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"state","description":"","recommendedTypes":[],"solidityType":"uint8"},{"name":"submitterFinishedEvidence","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"challengerFinishedEvidence","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"disputeId","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"ruling","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getCollateralRequirement(address,uint256)","name":"getCollateralRequirement","description":"Tell the information related to a collateral requirement of a Disputable app.","parameterDecorators":[{"name":"_disputable","description":"Address of the Disputable app.","recommendedTypes":[]},{"name":"_collateralRequirementId","description":"Identification number of the collateral requirement.","recommendedTypes":[]}],"returnDecorators":[{"name":"collateralToken","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"challengeDuration","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"actionAmount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"challengeAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"stakingFactory()","name":"stakingFactory","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getEVMScriptExecutor(bytes)","name":"getEVMScriptExecutor","description":"","parameterDecorators":[{"name":"_script","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"canPerform(address,address,bytes32,uint256[])","name":"canPerform","description":"Tells whether an address has already signed the Agreement. ACL oracle interface conformance.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]},{"name":"param2","description":"","recommendedTypes":[]},{"name":"_how","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"MANAGE_DISPUTABLE_ROLE()","name":"MANAGE_DISPUTABLE_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,bool,string,bytes,address)","name":"initialize","description":"Initialize Agreement for \"`_title`\" and content \"`_content`\", with arbitrator `_arbitrator` and staking factory `_factory`.","parameterDecorators":[{"name":"_arbitrator","description":"Address of the IArbitrator that will be used to resolve disputes.","recommendedTypes":[]},{"name":"_setAppFeesCashier","description":"Whether to integrate with the IArbitrator's fee cashier.","recommendedTypes":[]},{"name":"_title","description":"String indicating a short description.","recommendedTypes":[]},{"name":"_content","description":"Link to a human-readable text that describes the initial rules for the Agreement.","recommendedTypes":[]},{"name":"_stakingFactory","description":"Staking factory for finding each collateral token's staking pool.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"disputeAction(uint256,bool)","name":"disputeAction","description":"Dispute challenged action #`_actionId`, raising it to the arbitrator. Only the action submitter can create a dispute for an action with an open challenge. Can only be called once (if at all) per opened challenge. Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action to be disputed.","recommendedTypes":[]},{"name":"_submitterFinishedEvidence","description":"Whether the submitter was finished submitting evidence with their action context.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"sign(uint256)","name":"sign","description":"Sign the agreement up-to setting #`_settingId`. Callable by any account; only accounts that have signed the latest version of the agreement can submit new disputable actions. Initialization check is implicitly provided by `_settingId < nextSettingId`, as valid settings can only be created after initialization.","parameterDecorators":[{"name":"_settingId","description":"Last setting ID the user is agreeing with.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"canUnlock(address,uint256)","name":"canUnlock","description":"ILockManager conformance. The Staking contract checks this on each request to unlock an amount managed by this Agreement. It always returns false to disable owners from unlocking their funds arbitrarily, as we want to control the release of the locked amount when actions are closed or settled.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getRecoveryVault()","name":"getRecoveryVault","description":"Get the recovery vault for the app.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"challengeAction(uint256,uint256,bool,bytes)","name":"challengeAction","description":"Challenge action #`_actionId`. This is only callable by those who hold the CHALLENGE_ROLE on the related Disputable app. Can be called multiple times per action, until a challenge is successful (settled or ruled for challenger). Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action to be challenged.","recommendedTypes":[]},{"name":"_settlementOffer","description":"Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator.","recommendedTypes":[]},{"name":"_finishedEvidence","description":"Whether the challenger is finished submitting evidence with the challenge context.","recommendedTypes":[]},{"name":"_context","description":"Link to a human-readable context for the challenge.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"activate(address,address,uint64,uint256,uint256)","name":"activate","description":"Activate Disputable app `_disputableAddress`. Initialization check is implicitly provided by the `auth()` modifier.","parameterDecorators":[{"name":"_disputableAddress","description":"Address of the Disputable app.","recommendedTypes":[]},{"name":"_collateralToken","description":"Address of the ERC20 token to be used for collateral.","recommendedTypes":[]},{"name":"_challengeDuration","description":"Challenge duration, during which the submitter can raise a dispute.","recommendedTypes":[]},{"name":"_actionAmount","description":"Amount of collateral tokens that will be locked every time an action is submitted.","recommendedTypes":[]},{"name":"_challengeAmount","description":"Amount of collateral tokens that will be locked every time an action is challenged.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"closeAction(uint256)","name":"closeAction","description":"Close action #`_actionId`. This function closes actions that: - Are not currently challenged nor disputed, or - Were previously disputed but ruled in favour of the submitter or voided Disputable apps may call this method directly at the end of an action, but is also accessible in a permission-less manner in case the app does not close its own actions automatically (e.g. disputable votes that don't pass). Can be called multiple times; it does nothing if the action is already closed. Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action to be closed.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"canRuleDispute(uint256)","name":"canRuleDispute","description":"Tell whether an action's dispute can be ruled.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"settleAction(uint256)","name":"settleAction","description":"Settle challenged action #`_actionId`, accepting the settlement offer. This can be accessed by both the submitter (at any time) or any account (after the settlement period has passed). Can only be called once (if at all) per opened challenge. Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action to be settled.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"deactivate(address)","name":"deactivate","description":"Deactivate Disputable app `_disputable`. Initialization check is implicitly provided by the `auth()` modifier.","parameterDecorators":[{"name":"_disputableAddress","description":"Address of the Disputable app to be deactivated.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getSetting(uint256)","name":"getSetting","description":"Tell the information related to an agreement setting.","parameterDecorators":[{"name":"_settingId","description":"Identification number of the agreement setting.","recommendedTypes":[]}],"returnDecorators":[{"name":"arbitrator","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"aragonAppFeesCashier","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"title","description":"","recommendedTypes":[],"solidityType":"string"},{"name":"content","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"resolve(uint256)","name":"resolve","description":"Resolve the action associated to dispute #`_disputeId` with ruling `_ruling`. Can only be called once per challenge by anyone once the arbitrator ruling has been finalized. Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.","parameterDecorators":[{"name":"_disputeId","description":"Identification number of the dispute on the arbitrator.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"changeSetting(address,bool,string,bytes)","name":"changeSetting","description":"Update Agreement to title \"`_title`\" and content \"`_content`\", with arbitrator `_arbitrator`. Initialization check is implicitly provided by the `auth()` modifier.","parameterDecorators":[{"name":"_arbitrator","description":"Address of the IArbitrator that will be used to resolve disputes.","recommendedTypes":[]},{"name":"_setAppFeesCashier","description":"Whether to integrate with the IArbitrator's fee cashier.","recommendedTypes":[]},{"name":"_title","description":"String indicating a short description.","recommendedTypes":[]},{"name":"_content","description":"Link to a human-readable text that describes the new rules for the Agreement.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"canChallenge(uint256)","name":"canChallenge","description":"Tell whether an action can be challenged.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"canClose(uint256)","name":"canClose","description":"Tell whether an action can be manually closed. An action can be closed if it is allowed to: - Proceed in the context of this Agreement (see `_canProceed()`), and - Be closed in the context of the originating Disputable app.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"allowRecoverability(address)","name":"allowRecoverability","description":"Disable built-in AragonApp token recovery escape hatch. This app is intended to hold users' funds and we do not want to allow them to be transferred to the default vault.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"closeEvidencePeriod(uint256)","name":"closeEvidencePeriod","description":"Close evidence submission period for dispute #`_disputeId`. Callable by any account. Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.","parameterDecorators":[{"name":"_disputeId","description":"Identification number of the dispute on the arbitrator.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"appId()","name":"appId","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getInitializationBlock()","name":"getInitializationBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"CHALLENGE_ROLE()","name":"CHALLENGE_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"transferToVault(address)","name":"transferToVault","description":"Send funds to recovery Vault. This contract should never receive funds, but in case it does, this function allows one to recover them.","parameterDecorators":[{"name":"_token","description":"Token balance to be sent to recovery vault.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"canPerform(address,bytes32,uint256[])","name":"canPerform","description":"Check whether an action can be performed by a sender for a particular role on this app.","parameterDecorators":[{"name":"_sender","description":"Sender of the call.","recommendedTypes":[]},{"name":"_role","description":"Role on this app.","recommendedTypes":[]},{"name":"_params","description":"Permission params for the role.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getEVMScriptRegistry()","name":"getEVMScriptRegistry","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"canDispute(uint256)","name":"canDispute","description":"Tell whether an action can be disputed.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getCurrentSettingId()","name":"getCurrentSettingId","description":"Tell the identification number of the current agreement setting.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getAction(uint256)","name":"getAction","description":"Tell the information related to an action.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action.","recommendedTypes":[]}],"returnDecorators":[{"name":"disputable","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"disputableActionId","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"collateralRequirementId","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"settingId","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"submitter","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"closed","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"context","description":"","recommendedTypes":[],"solidityType":"bytes"},{"name":"lastChallengeId","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"lastChallengeActive","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getDisputableInfo(address)","name":"getDisputableInfo","description":"Tell the information related to a Disputable app.","parameterDecorators":[{"name":"_disputable","description":"Address of the Disputable app.","recommendedTypes":[]}],"returnDecorators":[{"name":"activated","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"currentCollateralRequirementId","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"submitEvidence(uint256,bytes,bool)","name":"submitEvidence","description":"Submit evidence for dispute #`_disputeId`. Only callable by the action submitter or challenger. Can be called as many times as desired until the dispute is over. Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.","parameterDecorators":[{"name":"_disputeId","description":"Identification number of the dispute on the arbitrator.","recommendedTypes":[]},{"name":"_evidence","description":"Evidence data to be submitted.","recommendedTypes":[]},{"name":"_finished","description":"Whether the evidence submitter is now finished submitting evidence.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"syncAppFeesCashier()","name":"syncAppFeesCashier","description":"Sync app fees cashier address. The app fees cashier address is being cached in the contract to save gas. This can be called permission-lessly to allow any account to re-sync the cashier when changed by the arbitrator. Initialization check is implicitly provided by `_getSetting()`, as valid settings can only be created after initialization.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"CHANGE_AGREEMENT_ROLE()","name":"CHANGE_AGREEMENT_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"canClaimSettlement(uint256)","name":"canClaimSettlement","description":"Tell whether an action can be settled by claiming its challenge settlement.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"kernel()","name":"kernel","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"isPetrified()","name":"isPetrified","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"canSettle(uint256)","name":"canSettle","description":"Tell whether an action can be settled.","parameterDecorators":[{"name":"_actionId","description":"Identification number of the action.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"newAction(uint256,bytes,address)","name":"newAction","description":"Register action #`_disputableActionId` from disputable `msg.sender` for submitter `_submitter` with context `_context`. This function should be called from the Disputable app each time a new disputable action is created. Each disputable action ID must only be registered once; this is how the Agreement gets notified about each disputable action. Initialization check is implicitly provided by `_ensureActiveDisputable()` as Disputable apps can only be activated via `activate()` which already requires initialization. IMPORTANT: Note the responsibility of the Disputable app in terms of providing the correct `_submitter` parameter. Users are required to trust that all Disputable apps activated with this Agreement have implemented this correctly, as otherwise funds could be maliciously locked from the incorrect account on new actions.","parameterDecorators":[{"name":"_disputableActionId","description":"Identification number of the action on the Disputable app.","recommendedTypes":[]},{"name":"_context","description":"Link to a human-readable context for the given action.","recommendedTypes":[]},{"name":"_submitter","description":"Address that submitted the action.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"getChallengeArbitratorFees(uint256)","name":"getChallengeArbitratorFees","description":"Tell the arbitration fees paid for an action challenge Split from `getChallenge()` due to “stack too deep issues”.","parameterDecorators":[{"name":"_challengeId","description":"Identification number of the challenge.","recommendedTypes":[]}],"returnDecorators":[{"name":"submitterArbitratorFeesToken","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"submitterArbitratorFeesAmount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"challengerArbitratorFeesToken","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"challengerArbitratorFeesAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}