{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "nft",
    "curve finance"
  ],
  "name": "MacroverseUniversalRegistry",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Cancel(bytes32,address)",
      "name": "Cancel",
      "description": "",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Commit(bytes32,address)",
      "name": "Commit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CommitmentMinWaitChange(uint256)",
      "name": "CommitmentMinWaitChange",
      "description": "",
      "parameterDecorators": [
        {
          "name": "new_commitment_min_wait_in_seconds",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DepositScaleChange(uint256)",
      "name": "DepositScaleChange",
      "description": "",
      "parameterDecorators": [
        {
          "name": "new_min_system_deposit_in_atomic_units",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Homesteading(uint256,bool)",
      "name": "Homesteading",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LandMerge(uint256,uint256)",
      "name": "LandMerge",
      "description": "",
      "parameterDecorators": [
        {
          "name": "child",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "parent",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LandSplit(uint256,uint256)",
      "name": "LandSplit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "parent",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "child",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Release(uint256,address)",
      "name": "Release",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "former_owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Reveal(bytes32,uint256,address)",
      "name": "Reveal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "COMMITMENT_MAX_WAIT_FACTOR()",
      "name": "COMMITMENT_MAX_WAIT_FACTOR",
      "description": "How long should a commitment be allowed to sit un-revealed before it becomes invalid and can only be canceled? This protects against unrevealed commitments being used as griefing traps. This is a multiple of the min wait.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "backend()",
      "name": "backend",
      "description": "This is the backend contract that actually has the machinery to track token ownership.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancel(bytes32)",
      "name": "cancel",
      "description": "Cancel a commitment that has not yet been revealed. Returns the associated deposit. ID the commitment by the committing hash passed to commit(), *not* the internal key. Must be sent from the same address that created the commitment, or the commitment cannot be addressed.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "childrenClaimable(uint256,address)",
      "name": "childrenClaimable",
      "description": "Returns true if direct children of the given token can be claimed by the given claimant. Children of land tokens can never be claimed (the plot must be subdivided). Children of system/planet/moon tokens can only be claimed if the claimer owns them or the owner allows homesteading.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "claimant",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "combineLand(uint256,uint256,uint256,uint256,uint256)",
      "name": "combineLand",
      "description": "Combine 4 land tokens with the same parent trixel into one token for the parent trixel. Tokens must all be owned by the message sender. Allows withdrawing some of the deposit of the original child tokens, as long as sufficient deposit is left to back the new parent land claim.",
      "parameterDecorators": [
        {
          "name": "child1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "child2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "child3",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "child4",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "withdraw_deposit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "commit(bytes32,uint256)",
      "name": "commit",
      "description": "Make a new commitment by debiting msg.sender's account for the given deposit. Returns the numerical ID of the commitment, which must be passed to reveal() together with the actual bit-packed keypath of the thing being claimed in order to finalize the claim.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "commitmentMinWait()",
      "name": "commitmentMinWait",
      "description": "How long should a commitment be required to sit before it can be revealed, in Ethereum time? This is also the maximum delay that we can let a bad actor keep good transactions off the chain, in our front-running security model.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "commitments(bytes32)",
      "name": "commitments",
      "description": "This is all the commitments that are currently outstanding. The mapping key is keccak256(hash, owner address). When they are revealed or canceled, they are deleted from the map.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "creationTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositTokenContract()",
      "name": "depositTokenContract",
      "description": "This is the token in which ownership deposits have to be paid.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "existenceChecker()",
      "name": "existenceChecker",
      "description": "This is the contract we check virtual real estate existence against;.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exists(uint256)",
      "name": "exists",
      "description": "Return true if the given token exists and the corresponding world object is claimed, and false otherwise. Does not account for owners of parents.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "expectedDepositBalance()",
      "name": "expectedDepositBalance",
      "description": "This tracks how much of the deposit token the contract is supposed to have. If it ends up with extra (because someone incorrectly used transfer() instead of approve()), the owner can remove it.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDeposit(uint256)",
      "name": "getDeposit",
      "description": "Get the deposit tied up in a token, in MRV atomic units. Returns 0 for nonexistent or invalid tokens. Deposits associated with claims need to be gotten by looking at the claim mapping directly.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getHomesteading(uint256)",
      "name": "getHomesteading",
      "description": "Get whether homesteading is allowed under a token. Returns false for nonexistent or invalid tokens.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMinDepositToCreate(uint256)",
      "name": "getMinDepositToCreate",
      "description": "Get the min deposit that will be required to create a claim on a token. Tokens can only exist with deposits smaller than this if they were created before the minimum deposit was raised, or if they are the result of merging other tokens whose deposits were too small.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lowestExistingParent(uint256)",
      "name": "lowestExistingParent",
      "description": "Get the lowest-in-the-hierarchy token that exists (is owned). Returns a 0-value sentinel if no parent token exists.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minSystemDepositInAtomicUnits()",
      "name": "minSystemDepositInAtomicUnits",
      "description": "This is the minimum ownership deposit in atomic token units.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reclaimContract(address)",
      "name": "reclaimContract",
      "description": "Reclaim ownership of Ownable contracts.",
      "parameterDecorators": [
        {
          "name": "contractAddr",
          "description": "The address of the Ownable to be reclaimed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reclaimEther()",
      "name": "reclaimEther",
      "description": "Transfer all Ether held by the contract to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reclaimToken(address)",
      "name": "reclaimToken",
      "description": "Allow the owner to collect any non-MRV tokens, or any excess MRV, that ends up in this contract.",
      "parameterDecorators": [
        {
          "name": "otherToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "release(uint256)",
      "name": "release",
      "description": "Destroy a token that you own, allowing it to be claimed by someone else. Retruns the associated deposit to you.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reveal(uint256,uint256)",
      "name": "reveal",
      "description": "Finish a commitment by revealing the token we want to claim and the nonce to make the commitment hash. Creates the token. Fails and reverts if the preimage is incorrect, the commitment is expired, the commitment is too new, the commitment is missing, the deposit is insufficient for whatever is being claimed, the Macroverse generators cannot be accessed to prove the existence of the thing being claimed or its parents, or the thing or a child or parent is already claimed by a conflicting commitment. Otherwise issues the token for the bit-packed keypath given in preimage. Doesn't need the commitment hash: it is computed from the provided preimage. Commitment lookup also depends on the originating address, so the function must be called by the original committer.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCommitmentMinWait(uint256)",
      "name": "setCommitmentMinWait",
      "description": "Set the minimum wait time in seconds for waiting for commitments to mature and become revealable. The maximum time commitments have before they expire is also adjusted, as it is a multiple of this value.",
      "parameterDecorators": [
        {
          "name": "new_commitment_min_wait_in_seconds",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setHomesteading(uint256,bool)",
      "name": "setHomesteading",
      "description": "Set whether homesteading is allowed under a token. The token must be owned by you, and must not be land.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumSystemDeposit(uint256)",
      "name": "setMinimumSystemDeposit",
      "description": "Allow the contract owner to set the minimum deposit amount for granting new system ownership claims.",
      "parameterDecorators": [
        {
          "name": "new_minimum_deposit_in_atomic_units",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenMetadataDomain(string)",
      "name": "setTokenMetadataDomain",
      "description": "Allow owner to change the ERC721 metadata URI domain used by the owned MacroverseRealEstate contract.",
      "parameterDecorators": [
        {
          "name": "domain",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "subdivideLand(uint256,uint256)",
      "name": "subdivideLand",
      "description": "Split a trixel of land into 4 sub-trixel tokens. The new tokens will be owned by the same owner. The old token will be destroyed. Additional deposit may be required so that all subdivided tokens have at least the minimum deposit. The deposit from the original token will be re-used if possible. If the deposit available is not divisible by 4, the extra will be assigned to the first child token.",
      "parameterDecorators": [
        {
          "name": "parent",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "additional_deposit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}