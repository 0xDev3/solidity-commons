{
  "schema": "../schema.json",
  "tags": [],
  "name": "Agreement",
  "description": "Base Agreement contract. Contract will be deployed only once as logic(implementation), proxy will be deployed by FraFactory for each agreement as storage.",
  "eventDecorators": [
    {
      "signature": "AdditionalCollateralLocked(uint256)",
      "name": "AdditionalCollateralLocked",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AgreementApproved()",
      "name": "AgreementApproved",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": []
    },
    {
      "signature": "AgreementClosed(uint256,address)",
      "name": "AgreementClosed",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "_closedType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AgreementInitiated(address,uint256,uint256,uint256,uint256)",
      "name": "AgreementInitiated",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "accruedReward",
          "description": "User's accrued reward.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "The amount of withdrawn tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "balance",
          "description": "Current user balance.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lastDepositDuration",
          "description": "Duration of the last deposit in seconds.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sender",
          "description": "User address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AgreementMatched(address,uint256,uint256,uint256,uint256,uint256)",
      "name": "AgreementMatched",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "_lender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_expireDate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_cdpId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_collateralAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_debtValue",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_drawnDai",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AgreementUpdated(int256,int256,uint256,uint256,uint256)",
      "name": "AgreementUpdated",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "accruedReward",
          "description": "User's accrued reward.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "The amount of withdrawn tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "balance",
          "description": "Current user balance.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lastDepositDuration",
          "description": "Duration of the last deposit in seconds.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sender",
          "description": "User address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AssetsCollateralPop(address,uint256,bytes32)",
      "name": "AssetsCollateralPop",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "_holder",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_collateralType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AssetsCollateralPush(address,uint256,bytes32)",
      "name": "AssetsCollateralPush",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "_holder",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_collateralType",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AssetsDaiPop(address,uint256)",
      "name": "AssetsDaiPop",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "_holder",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AssetsDaiPush(address,uint256)",
      "name": "AssetsDaiPush",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "_holder",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CdpOwnershipTransferred(address,uint256)",
      "name": "CdpOwnershipTransferred",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "_borrower",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_cdpId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RiskyToggled(bool)",
      "name": "RiskyToggled",
      "description": "Emitted when a user withdraws tokens.",
      "parameterDecorators": [
        {
          "name": "_isRisky",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "HALF()",
      "name": "HALF",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "HUNDRED()",
      "name": "HUNDRED",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ONE()",
      "name": "ONE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "RELEASE()",
      "name": "RELEASE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "approveAgreement()",
      "name": "approveAgreement",
      "description": "Approve the agreement. Only for contract owner (FraFactory).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "assets(address)",
      "name": "assets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "collateral",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "dai",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "blockAgreement()",
      "name": "blockAgreement",
      "description": "Block active agreement, change status to the correspondant one, refund.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "borrower()",
      "name": "borrower",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "borrowerFraDebt()",
      "name": "borrowerFraDebt",
      "description": "Borrower debt according to FRA.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelAgreement()",
      "name": "cancelAgreement",
      "description": "Cancel agreement by borrower before it is matched, change status to the correspondant one, refund.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cdpDebtValue()",
      "name": "cdpDebtValue",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cdpId()",
      "name": "cdpId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkTimeToCancel(uint256,uint256)",
      "name": "checkTimeToCancel",
      "description": "check whether pending or open agreement should be canceled automatically by cron.",
      "parameterDecorators": [
        {
          "name": "_approveLimit",
          "description": "approve limit secods.",
          "recommendedTypes": []
        },
        {
          "name": "_matchLimit",
          "description": "match limit secods.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimOwnership()",
      "name": "claimOwnership",
      "description": "Approve pending owner by new owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "closedType()",
      "name": "closedType",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collateralAmount()",
      "name": "collateralAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collateralType()",
      "name": "collateralType",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "configAddr()",
      "name": "configAddr",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delta()",
      "name": "delta",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "drawnTotal()",
      "name": "drawnTotal",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "duration()",
      "name": "duration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "erc20TokenContract(bytes32)",
      "name": "erc20TokenContract",
      "description": "transfer exact amount of erc20 tokens, approved beforehand.",
      "parameterDecorators": [
        {
          "name": "ilk",
          "description": "collateral type.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "expireDate()",
      "name": "expireDate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feeAccum()",
      "name": "feeAccum",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feePaidTotal()",
      "name": "feePaidTotal",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fromRay(int256)",
      "name": "fromRay",
      "description": "Convert int value from Ray format.",
      "parameterDecorators": [
        {
          "name": "_val",
          "description": "int value should be converted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fromRay(uint256)",
      "name": "fromRay",
      "description": "Convert uint value from Ray format.",
      "parameterDecorators": [
        {
          "name": "_val",
          "description": "uint value should be converted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAssets(address)",
      "name": "getAssets",
      "description": "Get user assets available for withdrawal.",
      "parameterDecorators": [
        {
          "name": "_holder",
          "description": "address of lender or borrower.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCR()",
      "name": "getCR",
      "description": "get collateralization ratio, if cdp is already opened - get cdp CR, if no - calculate according to agreement initial parameters.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCRBuffer()",
      "name": "getCRBuffer",
      "description": "get collateralization ratio buffer (difference between current CR and minimal one).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCdpCR(bytes32,uint256)",
      "name": "getCdpCR",
      "description": "Calculate current cdp collateralization ratio.",
      "parameterDecorators": [
        {
          "name": "ilk",
          "description": "collateral type in bytes32 format.",
          "recommendedTypes": []
        },
        {
          "name": "cdpId",
          "description": "cdp ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCdpInfo(bytes32,uint256)",
      "name": "getCdpInfo",
      "description": "Get current cdp main info: collateral amount, dai (debt) amount.",
      "parameterDecorators": [
        {
          "name": "ilk",
          "description": "collateral type in bytes32 format.",
          "recommendedTypes": []
        },
        {
          "name": "cdpId",
          "description": "cdp ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "ink",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "art",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCollateralEquivalent(bytes32,uint256)",
      "name": "getCollateralEquivalent",
      "description": "Get the equivalent of exact dai amount in terms of collateral type.Add one more collateral token unit in case if calculated value doesn't cover dai amount.",
      "parameterDecorators": [
        {
          "name": "ilk",
          "description": "collateral type in bytes32 format.",
          "recommendedTypes": []
        },
        {
          "name": "daiAmount",
          "description": "dai tokens amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDaiAddress()",
      "name": "getDaiAddress",
      "description": "get address of Dai token contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDaiAvailable(bytes32,uint256)",
      "name": "getDaiAvailable",
      "description": "Calculate available dai to be drawn in Cdp.",
      "parameterDecorators": [
        {
          "name": "ilk",
          "description": "collateral type in bytes32 format.",
          "recommendedTypes": []
        },
        {
          "name": "cdpId",
          "description": "cdp ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDsr()",
      "name": "getDsr",
      "description": "get dai savings rate.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getIlkDuty(bytes32)",
      "name": "getIlkDuty",
      "description": "get collateral cost.",
      "parameterDecorators": [
        {
          "name": "_ilkIndex",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getInfo()",
      "name": "getInfo",
      "description": "Get agreement main info.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_addr",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "_status",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_closedType",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_duration",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_borrower",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "_lender",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "_collateralType",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "_collateralAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_debtValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_interestRate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_isRisky",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLiquidationRatio(bytes32)",
      "name": "getLiquidationRatio",
      "description": "Get collateral liquidation ratio. Percent of overcollateralization. If collateral / debt < liauidation ratio - cdp should be autoliquidated.",
      "parameterDecorators": [
        {
          "name": "ilk",
          "description": "collateral type in bytes32 format.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLockedDai()",
      "name": "getLockedDai",
      "description": "get amount of dai tokens currently locked in dsr(pot) contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "pie",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "pieS",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMCR(bytes32)",
      "name": "getMCR",
      "description": "Get minimal collateralization ratio for collateral type.",
      "parameterDecorators": [
        {
          "name": "ilk",
          "description": "collateral type in bytes32 format.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPrice(bytes32)",
      "name": "getPrice",
      "description": "Get collateral token price to USD.",
      "parameterDecorators": [
        {
          "name": "ilk",
          "description": "collateral type in bytes32 format.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSafePrice(bytes32)",
      "name": "getSafePrice",
      "description": "Get collateral token safe price to USD. Equals current origin price devided by liquidation ratio.",
      "parameterDecorators": [
        {
          "name": "ilk",
          "description": "collateral type in bytes32 format.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initAgreement(address,uint256,uint256,uint256,uint256,bytes32,bool,address)",
      "name": "initAgreement",
      "description": "Initialize new agreement.",
      "parameterDecorators": [
        {
          "name": "_borrower",
          "description": "borrower address.",
          "recommendedTypes": []
        },
        {
          "name": "_collateralAmount",
          "description": "value of borrower's collateral amount put into the contract as collateral or approved to transferFrom.",
          "recommendedTypes": []
        },
        {
          "name": "_debtValue",
          "description": "value of debt.",
          "recommendedTypes": []
        },
        {
          "name": "_duration",
          "description": "number of seconds which agreement should be terminated after.",
          "recommendedTypes": []
        },
        {
          "name": "_interestRate",
          "description": "percent of interest rate, should be passed like RAY.",
          "recommendedTypes": []
        },
        {
          "name": "_collateralType",
          "description": "type of collateral, should be passed as bytes32.",
          "recommendedTypes": []
        },
        {
          "name": "_isETH",
          "description": "true if ether and false if erc-20 token.",
          "recommendedTypes": []
        },
        {
          "name": "_configAddr",
          "description": "config contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize()",
      "name": "initialize",
      "description": "Set caller as contract owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "injectedTotal()",
      "name": "injectedTotal",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "interestRate()",
      "name": "interestRate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isBeforeStatus(uint8)",
      "name": "isBeforeStatus",
      "description": "Check if agreement has status before requested one.",
      "parameterDecorators": [
        {
          "name": "_status",
          "description": "check before status.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isCdpSafe(bytes32,uint256)",
      "name": "isCdpSafe",
      "description": "Check is cdp is unsafe already.",
      "parameterDecorators": [
        {
          "name": "ilk",
          "description": "collateral type in bytes32 format.",
          "recommendedTypes": []
        },
        {
          "name": "cdpId",
          "description": "cdp ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isClosedWithType(uint8)",
      "name": "isClosedWithType",
      "description": "Check if agreement is closed with appropriate type.",
      "parameterDecorators": [
        {
          "name": "_type",
          "description": "type should be checked with.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isETH()",
      "name": "isETH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner(address)",
      "name": "isOwner",
      "description": "Check if address is owner.",
      "parameterDecorators": [
        {
          "name": "_addr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRisky()",
      "name": "isRisky",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isStatus(uint8)",
      "name": "isStatus",
      "description": "Check if agreement has appropriate status.",
      "parameterDecorators": [
        {
          "name": "_status",
          "description": "status should be checked with.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastCheckTime()",
      "name": "lastCheckTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lender()",
      "name": "lender",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockAdditionalCollateral(uint256)",
      "name": "lockAdditionalCollateral",
      "description": "Lock additional ether as collateral to agreement cdp contract.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "collateral amount for additional lock.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "matchAgreement()",
      "name": "matchAgreement",
      "description": "Match lender to the agreement.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingOwner()",
      "name": "pendingOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxy()",
      "name": "proxy",
      "description": "Get registered proxy for current caller (msg.sender address).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxyAddress()",
      "name": "proxyAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxyRegistryAddrMD()",
      "name": "proxyRegistryAddrMD",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rejectAgreement()",
      "name": "rejectAgreement",
      "description": "Reject agreement by admin or cron job before it is matched, change status to the correspondant one, refund.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rpow(uint256,uint256,uint256)",
      "name": "rpow",
      "description": "Calculate x pow n by base.",
      "parameterDecorators": [
        {
          "name": "x",
          "description": "value should be powered.",
          "recommendedTypes": []
        },
        {
          "name": "n",
          "description": "power degree.",
          "recommendedTypes": []
        },
        {
          "name": "base",
          "description": "base value.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "z",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "status()",
      "name": "status",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "statusSnapshots(uint256)",
      "name": "statusSnapshots",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toRay(uint256)",
      "name": "toRay",
      "description": "Convert uint value to Ray format.",
      "parameterDecorators": [
        {
          "name": "_val",
          "description": "uint value should be converted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toRay(int256)",
      "name": "toRay",
      "description": "Convert int value to Ray format.",
      "parameterDecorators": [
        {
          "name": "_val",
          "description": "int value should be converted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfer ownership.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "address, the ownership should be transferred to, becomes pending until claim.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateAgreement()",
      "name": "updateAgreement",
      "description": "Update Agreement state. Calls needed function according to the expireDate (terminates or liquidated or updates the agreement).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_success",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawCollateral(uint256)",
      "name": "withdrawCollateral",
      "description": "Withdraw collateral to user's (msg.sender) external wallet from internal wallet.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "collateral amount for withdrawal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawDai(uint256)",
      "name": "withdrawDai",
      "description": "Withdraw dai to user's external wallet.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "dai amount for withdrawal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawRemainingEth(address)",
      "name": "withdrawRemainingEth",
      "description": "Withdraw accidentally locked ether in the contract, can be called only after agreement is closed and all assets are refunded Check the current balance is more than users ether assets, and withdraw the remaining ether.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "address should be withdrawn to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}