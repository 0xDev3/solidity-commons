{
  "schema": "../schema.json",
  "tags": [],
  "name": "LightGeneralizedTCR",
  "description": "LightGeneralizedTCR This contract is a curated registry for any types of items. Just like a TCR contract it features the request-challenge protocol and appeal fees crowdfunding. The difference between LightGeneralizedTCR and GeneralizedTCR is that instead of storing item data in storage and event logs, LightCurate only stores the URI of item in the logs. This makes it considerably cheaper to use and allows more flexibility with the item columns.",
  "eventDecorators": [
    {
      "signature": "ConnectedTCRSet(address)",
      "name": "ConnectedTCRSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_connectedTCR",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Contribution(bytes32,uint256,uint256,address,uint256,uint8)",
      "name": "Contribution",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_requestID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_roundID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_contributor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_contribution",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_side",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Dispute(address,uint256,uint256,uint256)",
      "name": "Dispute",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Evidence(address,uint256,address,string)",
      "name": "Evidence",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ItemStatusChange(bytes32,bool)",
      "name": "ItemStatusChange",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_updatedDirectly",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MetaEvidence(uint256,string)",
      "name": "MetaEvidence",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_metaEvidenceID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_evidence",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewItem(bytes32,string,bool)",
      "name": "NewItem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_addedDirectly",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RequestSubmitted(bytes32,uint256)",
      "name": "RequestSubmitted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_evidenceGroupID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RewardWithdrawn(address,bytes32,uint256,uint256,uint256)",
      "name": "RewardWithdrawn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_itemID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_request",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_round",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_reward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Ruling(address,uint256,uint256)",
      "name": "Ruling",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_arbitrator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_disputeID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_ruling",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MULTIPLIER_DIVISOR()",
      "name": "MULTIPLIER_DIVISOR",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "RULING_OPTIONS()",
      "name": "RULING_OPTIONS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addItem(string)",
      "name": "addItem",
      "description": "Submit a request to register an item. Accepts enough ETH to cover the deposit, reimburses the rest.",
      "parameterDecorators": [
        {
          "name": "_item",
          "description": "The URI to the item data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addItemDirectly(string)",
      "name": "addItemDirectly",
      "description": "Directly add an item to the list bypassing request-challenge. Can only be used by the relay contract.",
      "parameterDecorators": [
        {
          "name": "_item",
          "description": "The URI to the item data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "arbitrator()",
      "name": "arbitrator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "arbitratorDisputeIDToItemID(address,uint256)",
      "name": "arbitratorDisputeIDToItemID",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "arbitratorExtraData()",
      "name": "arbitratorExtraData",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challengePeriodDuration()",
      "name": "challengePeriodDuration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challengeRequest(bytes32,string)",
      "name": "challengeRequest",
      "description": "Challenges the request of the item. Accepts enough ETH to cover the deposit, reimburses the rest.",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "The ID of the item which request to challenge.",
          "recommendedTypes": []
        },
        {
          "name": "_evidence",
          "description": "A link to an evidence using its URI. Ignored if not provided.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeArbitrator(address,bytes)",
      "name": "changeArbitrator",
      "description": "Change the arbitrator to be used for disputes that may be raised. The arbitrator is trusted to support appeal periods and not reenter.",
      "parameterDecorators": [
        {
          "name": "_arbitrator",
          "description": "The new trusted arbitrator to be used in disputes.",
          "recommendedTypes": []
        },
        {
          "name": "_arbitratorExtraData",
          "description": "The extra data used by the new arbitrator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeChallengePeriodDuration(uint256)",
      "name": "changeChallengePeriodDuration",
      "description": "Change the duration of the challenge period.",
      "parameterDecorators": [
        {
          "name": "_challengePeriodDuration",
          "description": "The new duration of the challenge period.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeConnectedTCR(address)",
      "name": "changeConnectedTCR",
      "description": "Change the address of connectedTCR, the Generalized TCR instance that stores addresses of TCRs related to this one.",
      "parameterDecorators": [
        {
          "name": "_connectedTCR",
          "description": "The address of the connectedTCR contract to use.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeGovernor(address)",
      "name": "changeGovernor",
      "description": "Change the governor of the curated registry.",
      "parameterDecorators": [
        {
          "name": "_governor",
          "description": "The address of the new governor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeLoserStakeMultiplier(uint256)",
      "name": "changeLoserStakeMultiplier",
      "description": "Change the proportion of arbitration fees that must be paid as fee stake by the party that lost the previous round.",
      "parameterDecorators": [
        {
          "name": "_loserStakeMultiplier",
          "description": "Multiplier of arbitration fees that must be paid as fee stake. In basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeMetaEvidence(string,string)",
      "name": "changeMetaEvidence",
      "description": "Update the meta evidence used for disputes.",
      "parameterDecorators": [
        {
          "name": "_registrationMetaEvidence",
          "description": "The meta evidence to be used for future registration request disputes.",
          "recommendedTypes": []
        },
        {
          "name": "_clearingMetaEvidence",
          "description": "The meta evidence to be used for future clearing request disputes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeRelayerContract(address)",
      "name": "changeRelayerContract",
      "description": "Change the address of the relay contract.",
      "parameterDecorators": [
        {
          "name": "_relayerContract",
          "description": "The new address of the relay contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeRemovalBaseDeposit(uint256)",
      "name": "changeRemovalBaseDeposit",
      "description": "Change the base amount required as a deposit to remove an item.",
      "parameterDecorators": [
        {
          "name": "_removalBaseDeposit",
          "description": "The new base amount of wei required to remove an item.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeRemovalChallengeBaseDeposit(uint256)",
      "name": "changeRemovalChallengeBaseDeposit",
      "description": "Change the base amount required as a deposit to challenge a removal request.",
      "parameterDecorators": [
        {
          "name": "_removalChallengeBaseDeposit",
          "description": "The new base amount of wei required to challenge a removal request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeSharedStakeMultiplier(uint256)",
      "name": "changeSharedStakeMultiplier",
      "description": "Change the proportion of arbitration fees that must be paid as fee stake by parties when there is no winner or loser.",
      "parameterDecorators": [
        {
          "name": "_sharedStakeMultiplier",
          "description": "Multiplier of arbitration fees that must be paid as fee stake. In basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeSubmissionBaseDeposit(uint256)",
      "name": "changeSubmissionBaseDeposit",
      "description": "Change the base amount required as a deposit to submit an item.",
      "parameterDecorators": [
        {
          "name": "_submissionBaseDeposit",
          "description": "The new base amount of wei required to submit an item.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeSubmissionChallengeBaseDeposit(uint256)",
      "name": "changeSubmissionChallengeBaseDeposit",
      "description": "Change the base amount required as a deposit to challenge a submission.",
      "parameterDecorators": [
        {
          "name": "_submissionChallengeBaseDeposit",
          "description": "The new base amount of wei required to challenge a submission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeWinnerStakeMultiplier(uint256)",
      "name": "changeWinnerStakeMultiplier",
      "description": "Change the proportion of arbitration fees that must be paid as fee stake by the winner of the previous round.",
      "parameterDecorators": [
        {
          "name": "_winnerStakeMultiplier",
          "description": "Multiplier of arbitration fees that must be paid as fee stake. In basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeRequest(bytes32)",
      "name": "executeRequest",
      "description": "Executes an unchallenged request if the challenge period has passed.",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "The ID of the item to execute.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fundAppeal(bytes32,uint8)",
      "name": "fundAppeal",
      "description": "Takes up to the total amount required to fund a side of an appeal. Reimburses the rest. Creates an appeal if both sides are fully funded.",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "The ID of the item which request to fund.",
          "recommendedTypes": []
        },
        {
          "name": "_side",
          "description": "The recipient of the contribution.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getContributions(bytes32,uint256,uint256,address)",
      "name": "getContributions",
      "description": "Gets the contributions made by a party for a given round of a request.",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "The ID of the item.",
          "recommendedTypes": []
        },
        {
          "name": "_request",
          "description": "The request to query.",
          "recommendedTypes": []
        },
        {
          "name": "_round",
          "description": "The round to query.",
          "recommendedTypes": []
        },
        {
          "name": "_contributor",
          "description": "The address of the contributor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "contributions",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[3]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getItemInfo(bytes32)",
      "name": "getItemInfo",
      "description": "Returns item's information. Includes length of requests array.",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "The ID of the queried item.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "status",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "numberOfRequests",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRequestInfo(bytes32,uint256)",
      "name": "getRequestInfo",
      "description": "Gets information on a request made for the item.",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "The ID of the queried item.",
          "recommendedTypes": []
        },
        {
          "name": "_request",
          "description": "The request to be queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "disputed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "disputeID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "submissionTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "resolved",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "parties",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[3]"
        },
        {
          "name": "numberOfRounds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "ruling",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "requestArbitrator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "requestArbitratorExtraData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        },
        {
          "name": "metaEvidenceID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoundInfo(bytes32,uint256,uint256)",
      "name": "getRoundInfo",
      "description": "Gets the information of a round of a request.",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "The ID of the queried item.",
          "recommendedTypes": []
        },
        {
          "name": "_request",
          "description": "The request to be queried.",
          "recommendedTypes": []
        },
        {
          "name": "_round",
          "description": "The round to be queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "appealed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "amountPaid",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[3]"
        },
        {
          "name": "hasPaid",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool[3]"
        },
        {
          "name": "feeRewards",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "governor()",
      "name": "governor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,bytes,address,string,string,address,uint256[4],uint256,uint256[3],address)",
      "name": "initialize",
      "description": "Initialize the arbitrable curated registry.",
      "parameterDecorators": [
        {
          "name": "_arbitrator",
          "description": "Arbitrator to resolve potential disputes. The arbitrator is trusted to support appeal periods and not reenter.",
          "recommendedTypes": []
        },
        {
          "name": "_arbitratorExtraData",
          "description": "Extra data for the trusted arbitrator contract.",
          "recommendedTypes": []
        },
        {
          "name": "_connectedTCR",
          "description": "The address of the TCR that stores related TCR addresses. This parameter can be left empty.",
          "recommendedTypes": []
        },
        {
          "name": "_registrationMetaEvidence",
          "description": "The URI of the meta evidence object for registration requests.",
          "recommendedTypes": []
        },
        {
          "name": "_clearingMetaEvidence",
          "description": "The URI of the meta evidence object for clearing requests.",
          "recommendedTypes": []
        },
        {
          "name": "_governor",
          "description": "The trusted governor of this contract.",
          "recommendedTypes": []
        },
        {
          "name": "_baseDeposits",
          "description": "The base deposits for requests/challenges as follows: - The base deposit to submit an item. - The base deposit to remove an item. - The base deposit to challenge a submission. - The base deposit to challenge a removal request.",
          "recommendedTypes": []
        },
        {
          "name": "_challengePeriodDuration",
          "description": "The time in seconds parties have to challenge a request.",
          "recommendedTypes": []
        },
        {
          "name": "_stakeMultipliers",
          "description": "Multipliers of the arbitration cost in basis points (see MULTIPLIER_DIVISOR) as follows: - The multiplier applied to each party's fee stake for a round when there is no winner/loser in the previous round (e.g. when the arbitrator refused to arbitrate). - The multiplier applied to the winner's fee stake for the subsequent round. - The multiplier applied to the loser's fee stake for the subsequent round.",
          "recommendedTypes": []
        },
        {
          "name": "_relayerContract",
          "description": "The address of the relay contract to add/remove items directly.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "items(bytes32)",
      "name": "items",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "status",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "loserStakeMultiplier()",
      "name": "loserStakeMultiplier",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "metaEvidenceUpdates()",
      "name": "metaEvidenceUpdates",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "relayerContract()",
      "name": "relayerContract",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removalBaseDeposit()",
      "name": "removalBaseDeposit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removalChallengeBaseDeposit()",
      "name": "removalChallengeBaseDeposit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeItem(bytes32,string)",
      "name": "removeItem",
      "description": "Submit a request to remove an item from the list. Accepts enough ETH to cover the deposit, reimburses the rest.",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "The ID of the item to remove.",
          "recommendedTypes": []
        },
        {
          "name": "_evidence",
          "description": "A link to an evidence using its URI. Ignored if not provided.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeItemDirectly(bytes32)",
      "name": "removeItemDirectly",
      "description": "Directly remove an item from the list bypassing request-challenge. Can only be used by the relay contract.",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "The ID of the item to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rule(uint256,uint256)",
      "name": "rule",
      "description": "Give a ruling for a dispute. Can only be called by the arbitrator. TRUSTED. Accounts for the situation where the winner loses a case due to paying less appeal fees than expected.",
      "parameterDecorators": [
        {
          "name": "_disputeID",
          "description": "ID of the dispute in the arbitrator contract.",
          "recommendedTypes": []
        },
        {
          "name": "_ruling",
          "description": "Ruling given by the arbitrator. Note that 0 is reserved for \"Refused to arbitrate\".",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sharedStakeMultiplier()",
      "name": "sharedStakeMultiplier",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submissionBaseDeposit()",
      "name": "submissionBaseDeposit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submissionChallengeBaseDeposit()",
      "name": "submissionChallengeBaseDeposit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submitEvidence(bytes32,string)",
      "name": "submitEvidence",
      "description": "Submit a reference to evidence. EVENT.",
      "parameterDecorators": [
        {
          "name": "_itemID",
          "description": "The ID of the item which the evidence is related to.",
          "recommendedTypes": []
        },
        {
          "name": "_evidence",
          "description": "A link to an evidence using its URI.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "winnerStakeMultiplier()",
      "name": "winnerStakeMultiplier",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawFeesAndRewards(address,bytes32,uint256,uint256)",
      "name": "withdrawFeesAndRewards",
      "description": "Reimburses contributions if no disputes were raised. If a dispute was raised, sends the fee stake rewards and reimbursements proportionally to the contributions made to the winner of a dispute.",
      "parameterDecorators": [
        {
          "name": "_beneficiary",
          "description": "The address that made contributions to a request.",
          "recommendedTypes": []
        },
        {
          "name": "_itemID",
          "description": "The ID of the item submission to withdraw from.",
          "recommendedTypes": []
        },
        {
          "name": "_request",
          "description": "The request from which to withdraw from.",
          "recommendedTypes": []
        },
        {
          "name": "_round",
          "description": "The round from which to withdraw from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}