{"schema":"../schema.json","tags":[],"name":"Validators","description":"A contract for registering and electing Validator Groups and Validators.","eventDecorators":[{"signature":"CommissionUpdateDelaySet(uint256)","name":"CommissionUpdateDelaySet","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"delay","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"GroupLockedGoldRequirementsSet(uint256,uint256)","name":"GroupLockedGoldRequirementsSet","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":false},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":false}]},{"signature":"MaxGroupSizeSet(uint256)","name":"MaxGroupSizeSet","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"size","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"MembershipHistoryLengthSet(uint256)","name":"MembershipHistoryLengthSet","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"length","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":true},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":true}]},{"signature":"RegistrySet(address)","name":"RegistrySet","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"registryAddress","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ValidatorAffiliated(address,address)","name":"ValidatorAffiliated","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":true},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":true}]},{"signature":"ValidatorBlsPublicKeyUpdated(address,bytes)","name":"ValidatorBlsPublicKeyUpdated","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":true},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":false}]},{"signature":"ValidatorDeaffiliated(address,address)","name":"ValidatorDeaffiliated","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":true},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":true}]},{"signature":"ValidatorDeregistered(address)","name":"ValidatorDeregistered","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"validator","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ValidatorEcdsaPublicKeyUpdated(address,bytes)","name":"ValidatorEcdsaPublicKeyUpdated","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":true},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":false}]},{"signature":"ValidatorEpochPaymentDistributed(address,uint256,address,uint256)","name":"ValidatorEpochPaymentDistributed","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"validator","description":"","recommendedTypes":[],"indexed":true},{"name":"validatorPayment","description":"","recommendedTypes":[],"indexed":false},{"name":"group","description":"","recommendedTypes":[],"indexed":true},{"name":"groupPayment","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ValidatorGroupCommissionUpdateQueued(address,uint256,uint256)","name":"ValidatorGroupCommissionUpdateQueued","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"group","description":"","recommendedTypes":[],"indexed":true},{"name":"commission","description":"","recommendedTypes":[],"indexed":false},{"name":"activationBlock","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ValidatorGroupCommissionUpdated(address,uint256)","name":"ValidatorGroupCommissionUpdated","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":true},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":false}]},{"signature":"ValidatorGroupDeregistered(address)","name":"ValidatorGroupDeregistered","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"group","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ValidatorGroupMemberAdded(address,address)","name":"ValidatorGroupMemberAdded","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":true},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":true}]},{"signature":"ValidatorGroupMemberRemoved(address,address)","name":"ValidatorGroupMemberRemoved","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":true},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":true}]},{"signature":"ValidatorGroupMemberReordered(address,address)","name":"ValidatorGroupMemberReordered","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":true},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":true}]},{"signature":"ValidatorGroupRegistered(address,uint256)","name":"ValidatorGroupRegistered","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":true},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":false}]},{"signature":"ValidatorLockedGoldRequirementsSet(uint256,uint256)","name":"ValidatorLockedGoldRequirementsSet","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":false},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":false}]},{"signature":"ValidatorRegistered(address)","name":"ValidatorRegistered","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"validator","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ValidatorScoreParametersSet(uint256,uint256)","name":"ValidatorScoreParametersSet","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"amount","description":"Unstake amount.","recommendedTypes":[],"indexed":false},{"name":"holder","description":"Address of the holder.","recommendedTypes":[],"indexed":false}]},{"signature":"ValidatorScoreUpdated(address,uint256,uint256)","name":"ValidatorScoreUpdated","description":"Notifies when found an error decoding request result.","parameterDecorators":[{"name":"validator","description":"","recommendedTypes":[],"indexed":true},{"name":"score","description":"","recommendedTypes":[],"indexed":false},{"name":"epochScore","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"addFirstMember(address,address,address)","name":"addFirstMember","description":"Adds the first member to a group's list of members and marks it eligible for election. Fails if `validator` has not set their affiliation to this account.Fails if the group has > 0 members.","parameterDecorators":[{"name":"validator","description":"The validator to add to the group.","recommendedTypes":[]},{"name":"lesser","description":"The address of the group that has received fewer votes than this group.","recommendedTypes":[]},{"name":"greater","description":"The address of the group that has received more votes than this group.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"addMember(address)","name":"addMember","description":"Adds a member to the end of a validator group's list of members. Fails if `validator` has not set their affiliation to this account.Fails if the group has zero members.","parameterDecorators":[{"name":"validator","description":"The validator to add to the group.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"affiliate(address)","name":"affiliate","description":"Affiliates a validator with a group, allowing it to be added as a member. De-affiliates with the previously affiliated group if present.","parameterDecorators":[{"name":"group","description":"The validator group with which to affiliate.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"calculateEpochScore(uint256)","name":"calculateEpochScore","description":"Calculates the validator score for an epoch from the uptime value for the epoch. epoch_score = uptime ** exponent.","parameterDecorators":[{"name":"uptime","description":"The Fixidity representation of the validator's uptime, between 0 and 1.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"calculateGroupEpochScore(uint256[])","name":"calculateGroupEpochScore","description":"Calculates the aggregate score of a group for an epoch from individual uptimes. group_score = average(uptimes ** exponent).","parameterDecorators":[{"name":"uptimes","description":"Array of Fixidity representations of the validators' uptimes, between 0 and 1.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"checkProofOfPossession(address,bytes,bytes)","name":"checkProofOfPossession","description":"Checks a BLS proof of possession.","parameterDecorators":[{"name":"sender","description":"The address signed by the BLS key to generate the proof of possession.","recommendedTypes":[]},{"name":"blsKey","description":"The BLS public key that the validator is using for consensus, should pass proof of possession. 48 bytes.","recommendedTypes":[]},{"name":"blsPop","description":"The BLS public key proof-of-possession, which consists of a signature on the account address. 96 bytes.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"commissionUpdateDelay()","name":"commissionUpdateDelay","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"deaffiliate()","name":"deaffiliate","description":"De-affiliates a validator, removing it from the group for which it is a member. Fails if the account is not a validator with non-zero affiliation.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"deregisterValidator(uint256)","name":"deregisterValidator","description":"De-registers a validator. Fails if the account is not a validator.Fails if the validator has been a member of a group too recently.","parameterDecorators":[{"name":"index","description":"The index of this validator in the list of all registered validators.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"deregisterValidatorGroup(uint256)","name":"deregisterValidatorGroup","description":"De-registers a validator group. Fails if the account is not a validator group with no members.Fails if the group has had members too recently.","parameterDecorators":[{"name":"index","description":"The index of this validator group in the list of all validator groups.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"distributeEpochPaymentsFromSigner(address,uint256)","name":"distributeEpochPaymentsFromSigner","description":"Distributes epoch payments to the account associated with `signer` and its group.","parameterDecorators":[{"name":"signer","description":"The validator signer of the account to distribute the epoch payment to.","recommendedTypes":[]},{"name":"maxPayment","description":"The maximum payment to the validator. Actual payment is based on score and group commission.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"downtimeGracePeriod()","name":"downtimeGracePeriod","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"forceDeaffiliateIfValidator(address)","name":"forceDeaffiliateIfValidator","description":"Removes a validator from the group for which it is a member.","parameterDecorators":[{"name":"validatorAccount","description":"The validator to deaffiliate from their affiliated validator group.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)","name":"fractionMulExp","description":"calculate a * b^x for fractions a, b to `decimals` precision.","parameterDecorators":[{"name":"aNumerator","description":"Numerator of first fraction.","recommendedTypes":[]},{"name":"aDenominator","description":"Denominator of first fraction.","recommendedTypes":[]},{"name":"bNumerator","description":"Numerator of exponentiated fraction.","recommendedTypes":[]},{"name":"bDenominator","description":"Denominator of exponentiated fraction.","recommendedTypes":[]},{"name":"exponent","description":"exponent to raise b to.","recommendedTypes":[]},{"name":"_decimals","description":"precision.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getAccountLockedGoldRequirement(address)","name":"getAccountLockedGoldRequirement","description":"Returns the current locked gold balance requirement for the supplied account.","parameterDecorators":[{"name":"account","description":"The account that may have to meet locked gold balance requirements.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getBlockNumberFromHeader(bytes)","name":"getBlockNumberFromHeader","description":"Parses block number out of header.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getCommissionUpdateDelay()","name":"getCommissionUpdateDelay","description":"Returns the block delay for a ValidatorGroup's commission udpdate.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochNumber()","name":"getEpochNumber","description":"Returns the epoch number at a block.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochNumberOfBlock(uint256)","name":"getEpochNumberOfBlock","description":"Returns the epoch number at a block.","parameterDecorators":[{"name":"blockNumber","description":"Block number where epoch number is calculated.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochSize()","name":"getEpochSize","description":"Returns the current epoch size in blocks.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getGroupLockedGoldRequirements()","name":"getGroupLockedGoldRequirements","description":"Returns the Locked Gold requirements for validator groups.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getGroupNumMembers(address)","name":"getGroupNumMembers","description":"Returns the number of members in a validator group.","parameterDecorators":[{"name":"account","description":"The address of the validator group.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getGroupsNumMembers(address[])","name":"getGroupsNumMembers","description":"Returns the number of members in the provided validator groups.","parameterDecorators":[{"name":"accounts","description":"The addresses of the validator groups.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getMaxGroupSize()","name":"getMaxGroupSize","description":"Returns the maximum number of members a group can add.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getMembershipHistory(address)","name":"getMembershipHistory","description":"Returns the group membership history of a validator.","parameterDecorators":[{"name":"account","description":"The validator whose membership history to return.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"address[]"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getMembershipInLastEpoch(address)","name":"getMembershipInLastEpoch","description":"Returns the group that `account` was a member of at the end of the last epoch.","parameterDecorators":[{"name":"account","description":"The account whose group membership should be returned.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getMembershipInLastEpochFromSigner(address)","name":"getMembershipInLastEpochFromSigner","description":"Returns the group that `account` was a member of at the end of the last epoch.","parameterDecorators":[{"name":"signer","description":"The signer of the account whose group membership should be returned.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getNumRegisteredValidators()","name":"getNumRegisteredValidators","description":"Returns the number of registered validators.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getParentSealBitmap(uint256)","name":"getParentSealBitmap","description":"Gets the parent seal bitmap from the header at the given block number.","parameterDecorators":[{"name":"blockNumber","description":"Block number to retrieve. Must be within 4 epochs of the current number.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRegisteredValidatorGroups()","name":"getRegisteredValidatorGroups","description":"Returns the list of registered validator group accounts.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getRegisteredValidatorSigners()","name":"getRegisteredValidatorSigners","description":"Returns the list of signers for the registered validator accounts.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getRegisteredValidators()","name":"getRegisteredValidators","description":"Returns the list of registered validator accounts.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getTopGroupValidators(address,uint256)","name":"getTopGroupValidators","description":"Returns the top n group members for a particular group.","parameterDecorators":[{"name":"account","description":"The address of the validator group.","recommendedTypes":[]},{"name":"n","description":"The number of members to return.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getValidator(address)","name":"getValidator","description":"Returns validator information.","parameterDecorators":[{"name":"account","description":"The account that registered the validator.","recommendedTypes":[]}],"returnDecorators":[{"name":"ecdsaPublicKey","description":"","recommendedTypes":[],"solidityType":"bytes"},{"name":"blsPublicKey","description":"","recommendedTypes":[],"solidityType":"bytes"},{"name":"affiliation","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"score","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"signer","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getValidatorBlsPublicKeyFromSigner(address)","name":"getValidatorBlsPublicKeyFromSigner","description":"Returns the validator BLS key.","parameterDecorators":[{"name":"signer","description":"The account that registered the validator or its authorized signing address.","recommendedTypes":[]}],"returnDecorators":[{"name":"blsPublicKey","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"getValidatorGroup(address)","name":"getValidatorGroup","description":"Returns validator group information.","parameterDecorators":[{"name":"account","description":"The account that registered the validator group.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param4","description":"","recommendedTypes":[],"solidityType":"uint256[]"},{"name":"param5","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param6","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getValidatorGroupSlashingMultiplier(address)","name":"getValidatorGroupSlashingMultiplier","description":"Getter for a group's slashing multiplier.","parameterDecorators":[{"name":"account","description":"The group to fetch slashing multiplier for.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getValidatorLockedGoldRequirements()","name":"getValidatorLockedGoldRequirements","description":"Returns the Locked Gold requirements for validators.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getValidatorScoreParameters()","name":"getValidatorScoreParameters","description":"Returns the parameters that govern how a validator's score is calculated.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getVerifiedSealBitmapFromHeader(bytes)","name":"getVerifiedSealBitmapFromHeader","description":"Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header. If the parent hash is not in the blockchain, verification fails.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getVersionNumber()","name":"getVersionNumber","description":"Returns the storage, major, minor, and patch version of the contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"groupLockedGoldRequirements()","name":"groupLockedGoldRequirements","description":"","parameterDecorators":[],"returnDecorators":[{"name":"value","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"duration","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"groupMembershipInEpoch(address,uint256,uint256)","name":"groupMembershipInEpoch","description":"Returns the group that `account` was a member of during `epochNumber`.","parameterDecorators":[{"name":"account","description":"The account whose group membership should be returned.","recommendedTypes":[]},{"name":"epochNumber","description":"The epoch number we are querying this account's membership at.","recommendedTypes":[]},{"name":"index","description":"The index into the validator's history struct for their history at `epochNumber`.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"halveSlashingMultiplier(address)","name":"halveSlashingMultiplier","description":"Halves the group's slashing multiplier.","parameterDecorators":[{"name":"account","description":"The group being slashed.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"hashHeader(bytes)","name":"hashHeader","description":"Computes hash of header.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)","name":"initialize","description":"Used in place of the constructor to allow the contract to be upgradable via proxy. Should be called only once.","parameterDecorators":[{"name":"registryAddress","description":"The address of the registry core smart contract.","recommendedTypes":[]},{"name":"groupRequirementValue","description":"The Locked Gold requirement amount for groups.","recommendedTypes":[]},{"name":"groupRequirementDuration","description":"The Locked Gold requirement duration for groups.","recommendedTypes":[]},{"name":"validatorRequirementValue","description":"The Locked Gold requirement amount for validators.","recommendedTypes":[]},{"name":"validatorRequirementDuration","description":"The Locked Gold requirement duration for validators.","recommendedTypes":[]},{"name":"validatorScoreExponent","description":"The exponent used in calculating validator scores.","recommendedTypes":[]},{"name":"validatorScoreAdjustmentSpeed","description":"The speed at which validator scores are adjusted.","recommendedTypes":[]},{"name":"_membershipHistoryLength","description":"The max number of entries for validator membership history.","recommendedTypes":[]},{"name":"_slashingMultiplierResetPeriod","description":"","recommendedTypes":[]},{"name":"_maxGroupSize","description":"The maximum group size.","recommendedTypes":[]},{"name":"_commissionUpdateDelay","description":"The number of blocks to delay a ValidatorGroup's commission update.","recommendedTypes":[]},{"name":"_downtimeGracePeriod","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialized()","name":"initialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isValidator(address)","name":"isValidator","description":"Returns whether a particular account has a registered validator.","parameterDecorators":[{"name":"account","description":"The account.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isValidatorGroup(address)","name":"isValidatorGroup","description":"Returns whether a particular account has a registered validator group.","parameterDecorators":[{"name":"account","description":"The account.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"maxGroupSize()","name":"maxGroupSize","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"meetsAccountLockedGoldRequirements(address)","name":"meetsAccountLockedGoldRequirements","description":"Returns whether or not an account meets its Locked Gold requirements.","parameterDecorators":[{"name":"account","description":"The address of the account.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"membershipHistoryLength()","name":"membershipHistoryLength","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"minQuorumSize(uint256)","name":"minQuorumSize","description":"Returns the minimum number of required signers for a given block number. Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3)).","parameterDecorators":[{"name":"blockNumber","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"minQuorumSizeInCurrentSet()","name":"minQuorumSizeInCurrentSet","description":"Computes byzantine quorum from current validator set size.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"numberValidatorsInCurrentSet()","name":"numberValidatorsInCurrentSet","description":"Gets the size of the current elected validator set.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"numberValidatorsInSet(uint256)","name":"numberValidatorsInSet","description":"Gets the size of the validator set that must sign the given block number.","parameterDecorators":[{"name":"blockNumber","description":"Block number to retrieve the validator set from.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"registerValidator(bytes,bytes,bytes)","name":"registerValidator","description":"Registers a validator unaffiliated with any validator group. Fails if the account is already a validator or validator group.Fails if the account does not have sufficient Locked Gold.","parameterDecorators":[{"name":"ecdsaPublicKey","description":"The ECDSA public key that the validator is using for consensus, should match the validator signer. 64 bytes.","recommendedTypes":[]},{"name":"blsPublicKey","description":"The BLS public key that the validator is using for consensus, should pass proof of possession. 96 bytes.","recommendedTypes":[]},{"name":"blsPop","description":"The BLS public key proof-of-possession, which consists of a signature on the account address. 48 bytes.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"registerValidatorGroup(uint256)","name":"registerValidatorGroup","description":"Registers a validator group with no member validators. Fails if the account is already a validator or validator group.Fails if the account does not have sufficient weight.","parameterDecorators":[{"name":"commission","description":"Fixidity representation of the commission this group receives on epoch payments made to its members.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"registry()","name":"registry","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"removeMember(address)","name":"removeMember","description":"Removes a member from a validator group. Fails if `validator` is not a member of the account's group.","parameterDecorators":[{"name":"validator","description":"The validator to remove from the group.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"reorderMember(address,address,address)","name":"reorderMember","description":"Reorders a member within a validator group. Fails if `validator` is not a member of the account's validator group.","parameterDecorators":[{"name":"validator","description":"The validator to reorder.","recommendedTypes":[]},{"name":"lesserMember","description":"The member who will be behind `validator`, or 0 if `validator` will be the last member.","recommendedTypes":[]},{"name":"greaterMember","description":"The member who will be ahead of `validator`, or 0 if `validator` will be the first member.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"resetSlashingMultiplier()","name":"resetSlashingMultiplier","description":"Resets a group's slashing multiplier if it has been >= the reset period since the last time the group was slashed.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setCommissionUpdateDelay(uint256)","name":"setCommissionUpdateDelay","description":"Updates the block delay for a ValidatorGroup's commission udpdate.","parameterDecorators":[{"name":"delay","description":"Number of blocks to delay the update.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDowntimeGracePeriod(uint256)","name":"setDowntimeGracePeriod","description":"Sets the downtimeGracePeriod property if called by owner.","parameterDecorators":[{"name":"value","description":"New downtime grace period for calculating epoch scores.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setGroupLockedGoldRequirements(uint256,uint256)","name":"setGroupLockedGoldRequirements","description":"Updates the Locked Gold requirements for Validator Groups.","parameterDecorators":[{"name":"value","description":"The per-member amount of Locked Gold required.","recommendedTypes":[]},{"name":"duration","description":"The time (in seconds) that these requirements persist for.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setMaxGroupSize(uint256)","name":"setMaxGroupSize","description":"Updates the maximum number of members a group can have.","parameterDecorators":[{"name":"size","description":"The maximum group size.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setMembershipHistoryLength(uint256)","name":"setMembershipHistoryLength","description":"Updates the number of validator group membership entries to store.","parameterDecorators":[{"name":"length","description":"The number of validator group membership entries to store.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setNextCommissionUpdate(uint256)","name":"setNextCommissionUpdate","description":"Queues an update to a validator group's commission. If there was a previously scheduled update, that is overwritten.","parameterDecorators":[{"name":"commission","description":"Fixidity representation of the commission this group receives on epoch payments made to its members. Must be in the range [0, 1.0].","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRegistry(address)","name":"setRegistry","description":"Updates the address pointing to a Registry contract.","parameterDecorators":[{"name":"registryAddress","description":"The address of a registry contract for routing to other contracts.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSlashingMultiplierResetPeriod(uint256)","name":"setSlashingMultiplierResetPeriod","description":"Sets the slashingMultiplierRestPeriod property if called by owner.","parameterDecorators":[{"name":"value","description":"New reset period for slashing multiplier.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setValidatorLockedGoldRequirements(uint256,uint256)","name":"setValidatorLockedGoldRequirements","description":"Updates the Locked Gold requirements for Validators.","parameterDecorators":[{"name":"value","description":"The amount of Locked Gold required.","recommendedTypes":[]},{"name":"duration","description":"The time (in seconds) that these requirements persist for.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setValidatorScoreParameters(uint256,uint256)","name":"setValidatorScoreParameters","description":"Updates the validator score parameters.","parameterDecorators":[{"name":"exponent","description":"The exponent used in calculating the score.","recommendedTypes":[]},{"name":"adjustmentSpeed","description":"The speed at which the score is adjusted.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"slashingMultiplierResetPeriod()","name":"slashingMultiplierResetPeriod","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateBlsPublicKey(bytes,bytes)","name":"updateBlsPublicKey","description":"Updates a validator's BLS key.","parameterDecorators":[{"name":"blsPublicKey","description":"The BLS public key that the validator is using for consensus, should pass proof of possession. 48 bytes.","recommendedTypes":[]},{"name":"blsPop","description":"The BLS public key proof-of-possession, which consists of a signature on the account address. 48 bytes.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"updateCommission()","name":"updateCommission","description":"Updates a validator group's commission based on the previously queued update.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateEcdsaPublicKey(address,address,bytes)","name":"updateEcdsaPublicKey","description":"Updates a validator's ECDSA key.","parameterDecorators":[{"name":"account","description":"The address under which the validator is registered.","recommendedTypes":[]},{"name":"signer","description":"The address which the validator is using to sign consensus messages.","recommendedTypes":[]},{"name":"ecdsaPublicKey","description":"The ECDSA public key corresponding to `signer`.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"updatePublicKeys(address,address,bytes,bytes,bytes)","name":"updatePublicKeys","description":"Updates a validator's ECDSA and BLS keys.","parameterDecorators":[{"name":"account","description":"The address under which the validator is registered.","recommendedTypes":[]},{"name":"signer","description":"The address which the validator is using to sign consensus messages.","recommendedTypes":[]},{"name":"ecdsaPublicKey","description":"The ECDSA public key corresponding to `signer`.","recommendedTypes":[]},{"name":"blsPublicKey","description":"The BLS public key that the validator is using for consensus, should pass proof of possession. 96 bytes.","recommendedTypes":[]},{"name":"blsPop","description":"The BLS public key proof-of-possession, which consists of a signature on the account address. 48 bytes.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"updateValidatorScoreFromSigner(address,uint256)","name":"updateValidatorScoreFromSigner","description":"Updates a validator's score based on its uptime for the epoch.","parameterDecorators":[{"name":"signer","description":"The validator signer of the validator account whose score needs updating.","recommendedTypes":[]},{"name":"uptime","description":"The Fixidity representation of the validator's uptime, between 0 and 1.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"validatorLockedGoldRequirements()","name":"validatorLockedGoldRequirements","description":"","parameterDecorators":[],"returnDecorators":[{"name":"value","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"duration","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"validatorSignerAddressFromCurrentSet(uint256)","name":"validatorSignerAddressFromCurrentSet","description":"Gets a validator address from the current validator set.","parameterDecorators":[{"name":"index","description":"Index of requested validator in the validator set.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"validatorSignerAddressFromSet(uint256,uint256)","name":"validatorSignerAddressFromSet","description":"Gets a validator address from the validator set at the given block number.","parameterDecorators":[{"name":"index","description":"Index of requested validator in the validator set.","recommendedTypes":[]},{"name":"blockNumber","description":"Block number to retrieve the validator set from.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}