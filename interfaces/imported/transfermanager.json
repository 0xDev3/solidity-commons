{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "TransferManager",
  "description": "TransferManager. Feature to transfer and approve tokens (ETH or ERC20) or data (contract call) based on a security context (daily limit, whitelist, etc).",
  "eventDecorators": [
    {
      "signature": "AddedToWhitelist(address,address,uint64)",
      "name": "AddedToWhitelist",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "whitelistAfter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Approved(address,address,uint256,address)",
      "name": "Approved",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "spender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ApprovedAndCalledContract(address,address,address,address,uint256,uint256,bytes)",
      "name": "ApprovedAndCalledContract",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "spender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amountApproved",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amountSpent",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CalledContract(address,address,uint256,bytes)",
      "name": "CalledContract",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DailyLimitDisabled(address,uint256)",
      "name": "DailyLimitDisabled",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "securityPeriod",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DailyLimitMigrated(address,uint256,uint256,uint256)",
      "name": "DailyLimitMigrated",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "currentDailyLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "pendingDailyLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "changeDailyLimitAfter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FeatureCreated(bytes32)",
      "name": "FeatureCreated",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LimitChanged(address,uint256,uint64)",
      "name": "LimitChanged",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "startAfter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PendingTransferCanceled(address,bytes32)",
      "name": "PendingTransferCanceled",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PendingTransferCreated(address,bytes32,uint256,address,address,uint256,bytes)",
      "name": "PendingTransferCreated",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "executeAfter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PendingTransferExecuted(address,bytes32)",
      "name": "PendingTransferExecuted",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RemovedFromWhitelist(address,address)",
      "name": "RemovedFromWhitelist",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "target",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Transfer(address,address,uint256,address,bytes)",
      "name": "Transfer",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addToWhitelist(address,address)",
      "name": "addToWhitelist",
      "description": "Adds an address to the whitelist of a wallet.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_target",
          "description": "The address to add.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveToken(address,address,address,uint256)",
      "name": "approveToken",
      "description": "Lets the owner approve an allowance of ERC20 tokens for a spender (dApp).",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "The address of the token to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_spender",
          "description": "The address of the spender.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of tokens to approve.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveTokenAndCallContract(address,address,address,uint256,address,bytes)",
      "name": "approveTokenAndCallContract",
      "description": "Lets the owner do an ERC20 approve followed by a call to a contract. We assume that the contract will pull the tokens and does not require ETH.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "The token to approve.",
          "recommendedTypes": []
        },
        {
          "name": "_proxy",
          "description": "The address to approve, which may be different from the contract being called.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of ERC20 tokens to approve.",
          "recommendedTypes": []
        },
        {
          "name": "_contract",
          "description": "The address of the contract.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The encoded method data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveWethAndCallContract(address,address,uint256,address,bytes)",
      "name": "approveWethAndCallContract",
      "description": "Lets the owner wrap ETH into WETH, approve the WETH and call a contract. We assume that the contract will pull the tokens and does not require ETH.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_proxy",
          "description": "The address to approve, which may be different from the contract being called.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of ETH to wrap and approve.",
          "recommendedTypes": []
        },
        {
          "name": "_contract",
          "description": "The address of the contract.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The encoded method data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "callContract(address,address,uint256,bytes)",
      "name": "callContract",
      "description": "Lets the owner call a contract.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_contract",
          "description": "The address of the contract.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "The amount of ETH to transfer as part of call.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The encoded method data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelPendingTransfer(address,bytes32)",
      "name": "cancelPendingTransfer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_id",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeLimit(address,uint256)",
      "name": "changeLimit",
      "description": "Lets the owner of a wallet change its daily limit. The limit is expressed in ETH. Changes to the limit take 24 hours.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_newLimit",
          "description": "The new limit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "defaultLimit()",
      "name": "defaultLimit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "disableLimit(address)",
      "name": "disableLimit",
      "description": "Convenience method to disable the limit The limit is disabled by setting it to an arbitrary large value.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executePendingTransfer(address,address,address,uint256,bytes,uint256)",
      "name": "executePendingTransfer",
      "description": "Executes a pending transfer for a wallet. The method can be called by anyone to enable orchestration.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "The token of the pending transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "The destination address of the pending transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of token to transfer of the pending transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The data associated to the pending transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_block",
          "description": "The block at which the pending transfer was created.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getCurrentLimit(address)",
      "name": "getCurrentLimit",
      "description": "Gets the current daily limit for a wallet.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_currentLimit",
          "description": "The current limit expressed in ETH.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDailyUnspent(address)",
      "name": "getDailyUnspent",
      "description": "Gets the amount of tokens that has not yet been spent during the current period.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_unspent",
          "description": "The amount of tokens (in ETH) that has not been spent yet.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_periodEnd",
          "description": "The end of the daily period.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPendingLimit(address)",
      "name": "getPendingLimit",
      "description": "Gets a pending limit for a wallet if any.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_pendingLimit",
          "description": "The pending limit (in ETH).",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_changeAfter",
          "description": "The time at which the pending limit will become effective.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPendingTransfer(address,bytes32)",
      "name": "getPendingTransfer",
      "description": "Gets the info of a pending transfer for a wallet.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_id",
          "description": "The pending transfer ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_executeAfter",
          "description": "The epoch time at which the pending transfer can be executed.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRequiredSignatures(address,bytes)",
      "name": "getRequiredSignatures",
      "description": "Gets the number of valid signatures that must be provided to execute a specific relayed transaction.",
      "parameterDecorators": [
        {
          "name": "_data",
          "description": "The data of the relayed transaction.",
          "recommendedTypes": []
        },
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStaticCallSignatures()",
      "name": "getStaticCallSignatures",
      "description": "Gets the list of static call signatures that this feature responds to on behalf of wallets.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_sigs",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "init(address)",
      "name": "init",
      "description": "Inits the feature for a wallet by setting up the isValidSignature (EIP 1271) static call redirection from the wallet to the feature and copying all the parameters of the daily limit from the previous implementation of the LimitManager module.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isFeatureAuthorisedInVersionManager(address,address)",
      "name": "isFeatureAuthorisedInVersionManager",
      "description": "Helper method to check if an address is an authorised feature of a target wallet.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_feature",
          "description": "The address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isLimitDisabled(address)",
      "name": "isLimitDisabled",
      "description": "Returns whether the daily limit is disabled for a wallet.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_limitDisabled",
          "description": "true if the daily limit is disabled, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isValidSignature(bytes32,bytes)",
      "name": "isValidSignature",
      "description": "Implementation of EIP 1271. Should return whether the signature provided is valid for the provided data.",
      "parameterDecorators": [
        {
          "name": "_msgHash",
          "description": "Hash of a message signed on the behalf of address(this).",
          "recommendedTypes": []
        },
        {
          "name": "_signature",
          "description": "Signature byte array associated with _msgHash.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isWhitelisted(address,address)",
      "name": "isWhitelisted",
      "description": "Checks if an address is whitelisted for a wallet.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_target",
          "description": "The address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_isWhitelisted",
          "description": "true if the address is whitelisted.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "limitStorage()",
      "name": "limitStorage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oldTransferManager()",
      "name": "oldTransferManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recoverToken(address)",
      "name": "recoverToken",
      "description": "Utility method to recover any ERC20 token that was sent to the Feature by mistake.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "The token to recover.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeFromWhitelist(address,address)",
      "name": "removeFromWhitelist",
      "description": "Removes an address from the whitelist of a wallet.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_target",
          "description": "The address to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "securityPeriod()",
      "name": "securityPeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "securityWindow()",
      "name": "securityWindow",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenPriceRegistry()",
      "name": "tokenPriceRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferStorage()",
      "name": "transferStorage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferToken(address,address,address,uint256,bytes)",
      "name": "transferToken",
      "description": "Lets the owner transfer tokens (ETH or ERC20) from a wallet.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The target wallet.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "The address of the token to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "The destination address.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amoutn of token to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The data for the transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "wethToken()",
      "name": "wethToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}