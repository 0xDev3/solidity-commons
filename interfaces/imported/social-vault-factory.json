{
  "schema": "../schema.json",
  "tags": [
    "vaults"
  ],
  "name": "SocialVaultFactory",
  "description": "Social Vault Factory. TODO: 1. Check no duplicated SV names | 2. Check which functions should not be public | 3. Import the OpenZeppelin Owner SC. Smart Contract (SC) which generates Social Vaults(SV). This is a beta version of Social Vault Factory (SVF).",
  "eventDecorators": [
    {
      "signature": "OwnerSet(address,address)",
      "name": "OwnerSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "oldOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TransferSent(address,address,uint256)",
      "name": "TransferSent",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_destAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VaultCreation(uint256,uint256)",
      "name": "VaultCreation",
      "description": "",
      "parameterDecorators": [
        {
          "name": "vaultId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "targetAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VaultStakingFeeUpdate(uint8)",
      "name": "VaultStakingFeeUpdate",
      "description": "",
      "parameterDecorators": [
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "createSocialVault(string,uint256)",
      "name": "createSocialVault",
      "description": "Creates a new SV. TODO: 1. NFT deposit is pending. 2. Dynamic Fee might be integrated in the future. 3. Lottery is pending.",
      "parameterDecorators": [
        {
          "name": "_vaultName",
          "description": "The SV Name, _targetAmountInGwei target value to be reached.",
          "recommendedTypes": []
        },
        {
          "name": "_targetAmountInGwei",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the SV id.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAllUserVaults()",
      "name": "getAllUserVaults",
      "description": "Returns a list with the ids of all SV the User is staking in. TODO it is not working OK.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "an list with all user SV id.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNumberOfUserVaults()",
      "name": "getNumberOfUserVaults",
      "description": "Returns the number of SVs the User is staking in.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the number of SVs the user is staking in.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNumberOfVaults()",
      "name": "getNumberOfVaults",
      "description": "Returns number of Existing SVs. For the future there should be implemented funtions to return active/finished SVs.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Number of SVs in the SC.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSmartContractBalance()",
      "name": "getSmartContractBalance",
      "description": "Returns the TVL in the SC.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The balance of the SVF SC.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVaultFactoryStakingFee()",
      "name": "getVaultFactoryStakingFee",
      "description": "Returns the global Staking Fee.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "vaultStakingFee.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVaultIdDetails(uint256)",
      "name": "getVaultIdDetails",
      "description": "Returns the details of a SV.",
      "parameterDecorators": [
        {
          "name": "_vaultId",
          "description": "the Id of a SV.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "param5",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setVaultFactoryStakingFee(uint8)",
      "name": "setVaultFactoryStakingFee",
      "description": "Updates the global Staking Fee which will update all new SVs. TODO: Currently it just handle integers from 0 to 100. We should add an impl. to handle integers from 0 to 10000, so it would be a percentage with 2 decimals.",
      "parameterDecorators": [
        {
          "name": "_newVaultStakingFee",
          "description": "which is the new fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "socialVaults(uint256)",
      "name": "socialVaults",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferLinkERC20(address,uint256)",
      "name": "transferLinkERC20",
      "description": "",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}