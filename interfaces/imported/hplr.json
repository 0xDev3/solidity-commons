{
  "schema": "../schema.json",
  "tags": [],
  "name": "HPLR",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnerSet(address,address)",
      "name": "OwnerSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "oldOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "balance()",
      "name": "balance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "chairperson()",
      "name": "chairperson",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeOwner(address)",
      "name": "changeOwner",
      "description": "Change owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "address of new owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "delegate(address)",
      "name": "delegate",
      "description": "Delegate your vote to the voter 'to'.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "address to which vote is delegated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getOwner()",
      "name": "getOwner",
      "description": "Return owner address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of owner.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "giveRightToVote(address)",
      "name": "giveRightToVote",
      "description": "Give 'voter' the right to vote on this ballot. May only be called by 'chairperson'.",
      "parameterDecorators": [
        {
          "name": "voter",
          "description": "address of voter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposals(uint256)",
      "name": "proposals",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "name",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "voteCount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "retrieve()",
      "name": "retrieve",
      "description": "Return value.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "value of 'number'.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "store(uint256)",
      "name": "store",
      "description": "Store value in variable.",
      "parameterDecorators": [
        {
          "name": "num",
          "description": "value to store.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vote(uint256)",
      "name": "vote",
      "description": "Give your vote (including votes delegated to you) to proposal 'proposals[proposal].name'.",
      "parameterDecorators": [
        {
          "name": "proposal",
          "description": "index of proposal in the proposals array.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "voters(address)",
      "name": "voters",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "weight",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "voted",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "delegate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "vote",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "winnerName()",
      "name": "winnerName",
      "description": "Calls winningProposal() function to get the index of the winner contained in the proposals array and then.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "winnerName_",
          "description": "the name of the winner.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "winningProposal()",
      "name": "winningProposal",
      "description": "Computes the winning proposal taking all previous votes into account.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "winningProposal_",
          "description": "index of winning proposal in the proposals array.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256,address)",
      "name": "withdraw",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "destAddr",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}