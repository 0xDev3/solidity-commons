{
  "schema": "../schema.json",
  "tags": [],
  "name": "VRFCoordinatorV2",
  "description": "",
  "eventDecorators": [
    {
      "signature": "ConfigSet(uint16,uint32,uint32,uint32,int256,tuple)",
      "name": "ConfigSet",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "minimumRequestConfirmations",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "maxGasLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "stalenessSeconds",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "gasAfterPaymentCalculation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "fallbackWeiPerUnitLink",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "feeConfig",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundsRecovered(address,uint256)",
      "name": "FundsRecovered",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferRequested(address,address)",
      "name": "OwnershipTransferRequested",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProvingKeyDeregistered(bytes32,address)",
      "name": "ProvingKeyDeregistered",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "keyHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProvingKeyRegistered(bytes32,address)",
      "name": "ProvingKeyRegistered",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "keyHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oracle",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RandomWordsFulfilled(uint256,uint256,uint96,bool)",
      "name": "RandomWordsFulfilled",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "outputSeed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "payment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "success",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RandomWordsRequested(bytes32,uint256,uint256,uint64,uint16,uint32,uint32,address)",
      "name": "RandomWordsRequested",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "keyHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "preSeed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "subId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "minimumRequestConfirmations",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "callbackGasLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "numWords",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SubscriptionCanceled(uint64,address,uint256)",
      "name": "SubscriptionCanceled",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubscriptionConsumerAdded(uint64,address)",
      "name": "SubscriptionConsumerAdded",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "consumer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubscriptionConsumerRemoved(uint64,address)",
      "name": "SubscriptionConsumerRemoved",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "consumer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubscriptionCreated(uint64,address)",
      "name": "SubscriptionCreated",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubscriptionFunded(uint64,uint256,uint256)",
      "name": "SubscriptionFunded",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "oldBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubscriptionOwnerTransferRequested(uint64,address,address)",
      "name": "SubscriptionOwnerTransferRequested",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SubscriptionOwnerTransferred(uint64,address,address)",
      "name": "SubscriptionOwnerTransferred",
      "description": "Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "BLOCKHASH_STORE()",
      "name": "BLOCKHASH_STORE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "LINK()",
      "name": "LINK",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "LINK_ETH_FEED()",
      "name": "LINK_ETH_FEED",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_CONSUMERS()",
      "name": "MAX_CONSUMERS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_NUM_WORDS()",
      "name": "MAX_NUM_WORDS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_REQUEST_CONFIRMATIONS()",
      "name": "MAX_REQUEST_CONFIRMATIONS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "Allows an ownership transfer to be completed by the recipient.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "acceptSubscriptionOwnerTransfer(uint64)",
      "name": "acceptSubscriptionOwnerTransfer",
      "description": "Request subscription owner transfer. will revert if original owner of subId has not requested that msg.sender become the new owner.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "- ID of the subscription.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addConsumer(uint64,address)",
      "name": "addConsumer",
      "description": "Add a consumer to a VRF subscription.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "- ID of the subscription.",
          "recommendedTypes": []
        },
        {
          "name": "consumer",
          "description": "- New consumer which can use the subscription.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelSubscription(uint64,address)",
      "name": "cancelSubscription",
      "description": "Cancel a subscription.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "- ID of the subscription.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "- Where to send the remaining LINK to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createSubscription()",
      "name": "createSubscription",
      "description": "Create a VRF subscription. You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "- A unique subscription id.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deregisterProvingKey(uint256[2])",
      "name": "deregisterProvingKey",
      "description": "Deregisters a proving key to an oracle.",
      "parameterDecorators": [
        {
          "name": "publicProvingKey",
          "description": "key that oracle can use to submit vrf fulfillments.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fulfillRandomWords(tuple(uint256[2],uint256[2],uint256,uint256,uint256,address,uint256[2],uint256[2],uint256),tuple(uint64,uint64,uint32,uint32,address))",
      "name": "fulfillRandomWords",
      "description": "",
      "parameterDecorators": [
        {
          "name": "proof",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "pk",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "gamma",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "c",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "s",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "seed",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "uWitness",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "cGammaWitness",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sHashWitness",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "zInv",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "rc",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "blockNum",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "subId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "callbackGasLimit",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "numWords",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "sender",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getCommitment(uint256)",
      "name": "getCommitment",
      "description": "Get request commitment. used to determine if a request is fulfilled or not.",
      "parameterDecorators": [
        {
          "name": "requestId",
          "description": "id of request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConfig()",
      "name": "getConfig",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "minimumRequestConfirmations",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        },
        {
          "name": "maxGasLimit",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "stalenessSeconds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "gasAfterPaymentCalculation",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentSubId()",
      "name": "getCurrentSubId",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFallbackWeiPerUnitLink()",
      "name": "getFallbackWeiPerUnitLink",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFeeConfig()",
      "name": "getFeeConfig",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "fulfillmentFlatFeeLinkPPMTier1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "fulfillmentFlatFeeLinkPPMTier2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "fulfillmentFlatFeeLinkPPMTier3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "fulfillmentFlatFeeLinkPPMTier4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "fulfillmentFlatFeeLinkPPMTier5",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "reqsForTier2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint24"
        },
        {
          "name": "reqsForTier3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint24"
        },
        {
          "name": "reqsForTier4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint24"
        },
        {
          "name": "reqsForTier5",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint24"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFeeTier(uint64)",
      "name": "getFeeTier",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reqCount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRequestConfig()",
      "name": "getRequestConfig",
      "description": "Get configuration relevant for making requests.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "minimumRequestConfirmations global min for request confirmations.",
          "recommendedTypes": [],
          "solidityType": "uint16"
        },
        {
          "name": "_1",
          "description": "maxGasLimit global max for request gas limit.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "_2",
          "description": "s_provingKeyHashes list of registered key hashes.",
          "recommendedTypes": [],
          "solidityType": "bytes32[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSubscription(uint64)",
      "name": "getSubscription",
      "description": "Get a VRF subscription.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "- ID of the subscription.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "balance",
          "description": "- LINK balance of the subscription in juels.",
          "recommendedTypes": [],
          "solidityType": "uint96"
        },
        {
          "name": "reqCount",
          "description": "- number of requests for this subscription, determines fee tier.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "owner",
          "description": "- owner of the subscription.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "consumers",
          "description": "- list of consumer address which are able to use this subscription.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalBalance()",
      "name": "getTotalBalance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hashOfKey(uint256[2])",
      "name": "hashOfKey",
      "description": "Returns the proving key hash key associated with this public key.",
      "parameterDecorators": [
        {
          "name": "publicKey",
          "description": "the key to return the hash of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onTokenTransfer(address,uint256,bytes)",
      "name": "onTokenTransfer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "oracleWithdraw(address,uint96)",
      "name": "oracleWithdraw",
      "description": "",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Get the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ownerCancelSubscription(uint64)",
      "name": "ownerCancelSubscription",
      "description": "Owner cancel subscription, sends remaining link directly to the subscription owner. notably can be called even if there are pending requests, outstanding ones may fail onchain.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "subscription id.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pendingRequestExists(uint64)",
      "name": "pendingRequestExists",
      "description": "",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recoverFunds(address)",
      "name": "recoverFunds",
      "description": "Recover link sent with transfer instead of transferAndCall.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "address to send link to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "registerProvingKey(address,uint256[2])",
      "name": "registerProvingKey",
      "description": "Registers a proving key to an oracle.",
      "parameterDecorators": [
        {
          "name": "oracle",
          "description": "address of the oracle.",
          "recommendedTypes": []
        },
        {
          "name": "publicProvingKey",
          "description": "key that oracle can use to submit vrf fulfillments.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeConsumer(uint64,address)",
      "name": "removeConsumer",
      "description": "Remove a consumer from a VRF subscription.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "- ID of the subscription.",
          "recommendedTypes": []
        },
        {
          "name": "consumer",
          "description": "- Consumer to remove from the subscription.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestRandomWords(bytes32,uint64,uint16,uint32,uint32)",
      "name": "requestRandomWords",
      "description": "Request a set of random words.",
      "parameterDecorators": [
        {
          "name": "keyHash",
          "description": "- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.",
          "recommendedTypes": []
        },
        {
          "name": "subId",
          "description": "- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.",
          "recommendedTypes": []
        },
        {
          "name": "minimumRequestConfirmations",
          "description": "- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].",
          "recommendedTypes": []
        },
        {
          "name": "callbackGasLimit",
          "description": "- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit].",
          "recommendedTypes": []
        },
        {
          "name": "numWords",
          "description": "- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requestSubscriptionOwnerTransfer(uint64,address)",
      "name": "requestSubscriptionOwnerTransfer",
      "description": "Request subscription owner transfer.",
      "parameterDecorators": [
        {
          "name": "subId",
          "description": "- ID of the subscription.",
          "recommendedTypes": []
        },
        {
          "name": "newOwner",
          "description": "- proposed new owner of the subscription.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setConfig(uint16,uint32,uint32,uint32,int256,tuple(uint32,uint32,uint32,uint32,uint32,uint24,uint24,uint24,uint24))",
      "name": "setConfig",
      "description": "Sets the configuration of the vrfv2 coordinator.",
      "parameterDecorators": [
        {
          "name": "minimumRequestConfirmations",
          "description": "global min for request confirmations.",
          "recommendedTypes": []
        },
        {
          "name": "maxGasLimit",
          "description": "global max for request gas limit.",
          "recommendedTypes": []
        },
        {
          "name": "stalenessSeconds",
          "description": "if the eth/link feed is more stale then this, use the fallback price.",
          "recommendedTypes": []
        },
        {
          "name": "gasAfterPaymentCalculation",
          "description": "gas used in doing accounting after completing the gas measurement.",
          "recommendedTypes": []
        },
        {
          "name": "fallbackWeiPerUnitLink",
          "description": "fallback eth/link price in the case of a stale feed.",
          "recommendedTypes": []
        },
        {
          "name": "feeConfig",
          "description": "fee tier configuration.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "fulfillmentFlatFeeLinkPPMTier1",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "fulfillmentFlatFeeLinkPPMTier2",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "fulfillmentFlatFeeLinkPPMTier3",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "fulfillmentFlatFeeLinkPPMTier4",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "fulfillmentFlatFeeLinkPPMTier5",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reqsForTier2",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reqsForTier3",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reqsForTier4",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "reqsForTier5",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows an owner to begin transferring ownership to a new address, pending.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "typeAndVersion()",
      "name": "typeAndVersion",
      "description": "The type and version of this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Type and version string.",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}