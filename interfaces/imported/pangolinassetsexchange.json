{"schema":"../schema.json","tags":["tokens","vesting"],"name":"PangolinAssetsExchange","description":"PangolinAssetsExchange. Contract allows user to invest into an ERC20 token This implementation uses the Pangolin DEX.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"An event emitted when an player is registered to the game.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"buyERC20Token(address,uint256)","name":"buyERC20Token","description":"Buys selected ERC20 token with AVAX using the Pangolin DEX Refunds unused AVAX to the msg.sender. _token ERC20 token's address_amount amount of the ERC20 token to be bought TODO: Implement slippage % tolerance and add as a require check*.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getEstimatedAVAXForERC20Token(uint256,address)","name":"getEstimatedAVAXForERC20Token","description":"Returns the minimum AVAX amount that is required to buy _tokenAmount of _token ERC20 token.*.","parameterDecorators":[{"name":"_amountOut","description":"","recommendedTypes":[]},{"name":"_token","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEstimatedERC20TokenForAVAX(uint256,address)","name":"getEstimatedERC20TokenForAVAX","description":"Returns the minimum AVAX amount that will be obtained in the event os selling _tokenAmount of _token ERC20 token.*.","parameterDecorators":[{"name":"_amountIn","description":"","recommendedTypes":[]},{"name":"_token","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"sellERC20Token(address,uint256)","name":"sellERC20Token","description":"Sells selected ERC20 token for AVAX. _token ERC20 token's address_amount amount of the ERC20 token to be sold TODO: Implement slippage % tolerance and add as a require check*.","parameterDecorators":[{"name":"_token","description":"","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}