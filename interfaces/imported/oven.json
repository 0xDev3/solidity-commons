{"schema":"../schema.json","tags":[],"name":"Oven","description":"","eventDecorators":[{"signature":"ExchangerPeriodUpdated(uint256)","name":"ExchangerPeriodUpdated","description":"","parameterDecorators":[{"name":"newTransmutationPeriod","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ImplChanged(address,address)","name":"ImplChanged","description":"","parameterDecorators":[{"name":"_oldImpl","description":"","recommendedTypes":[],"indexed":true},{"name":"_newImpl","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Upgrade(address,uint256)","name":"Upgrade","description":"","parameterDecorators":[{"name":"upgradeAddress","description":"","recommendedTypes":[],"indexed":false},{"name":"upgradeAmount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"UpgradeSettingUpdate(address,uint256,uint256)","name":"UpgradeSettingUpdate","description":"","parameterDecorators":[{"name":"upgradeAddress","description":"","recommendedTypes":[],"indexed":false},{"name":"upgradeTime","description":"","recommendedTypes":[],"indexed":false},{"name":"upgradeAmount","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"EXCHANGE_PERIOD()","name":"EXCHANGE_PERIOD","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"ZERO_ADDRESS()","name":"ZERO_ADDRESS","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"buffer()","name":"buffer","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"bufferInfo()","name":"bufferInfo","description":"Gets info on the buffer This function is used to query the contract to get the latest state of the buffer.","parameterDecorators":[],"returnDecorators":[{"name":"_toDistribute","description":"the amount ready to be distributed.","recommendedTypes":[],"solidityType":"uint256"},{"name":"_deltaBlocks","description":"the amount of time since the last phased distribution.","recommendedTypes":[],"solidityType":"uint256"},{"name":"_buffer","description":"the amount in the buffer.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"claim()","name":"claim","description":"claims the base token after it has been exchange This function reverts if there is no realisedToken balance.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"convertTokenAmount(address,address,uint256)","name":"convertTokenAmount","description":"","parameterDecorators":[{"name":"_fromToken","description":"","recommendedTypes":[]},{"name":"_toToken","description":"","recommendedTypes":[]},{"name":"_fromAmount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"toAmount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"depositedFriesTokens(address)","name":"depositedFriesTokens","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"distribute(address,uint256)","name":"distribute","description":"Distributes the base token proportionally to all alToken stakers. This function is meant to be called by the Fries contract for when it is sending yield to the exchange. Anyone can call this and add funds, idk why they would do that though...","parameterDecorators":[{"name":"origin","description":"the account that is sending the tokens to be distributed.","recommendedTypes":[]},{"name":"amount","description":"the amount of base tokens to be distributed to the exchange.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"dividendsOwing(address)","name":"dividendsOwing","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"displays the user's share of the pooled friesTokens.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"exchange()","name":"exchange","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"exchangeAndClaim()","name":"exchangeAndClaim","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"exchangeClaimAndWithdraw()","name":"exchangeClaimAndWithdraw","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"exit()","name":"exit","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"forceExchange(address)","name":"forceExchange","description":"","parameterDecorators":[{"name":"toExchange","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"friesToken()","name":"friesToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getMultipleUserInfo(uint256,uint256)","name":"getMultipleUserInfo","description":"Gets the status of multiple users in one call This function is used to query the contract to check for accounts that have overfilled positions in order to check who can be force exchange.","parameterDecorators":[{"name":"from","description":"the first index of the userList.","recommendedTypes":[]},{"name":"to","description":"the last index of the userList returns the userList with their staking status in paginated form.","recommendedTypes":[]}],"returnDecorators":[{"name":"theUserList","description":"","recommendedTypes":[],"solidityType":"address[]"},{"name":"theUserData","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"impl()","name":"impl","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"lastDepositBlock()","name":"lastDepositBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"lastDividendPoints(address)","name":"lastDividendPoints","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"nextUser()","name":"nextUser","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"pointMultiplier()","name":"pointMultiplier","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"realisedTokens(address)","name":"realisedTokens","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"setExchangePeriod(uint256)","name":"setExchangePeriod","description":"set the EXCHANGE_PERIOD variable sets the length (in blocks) of one full distribution phase.","parameterDecorators":[{"name":"newExchangePeriod","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setWhitelist(address,bool)","name":"setWhitelist","description":"This function reverts if the caller is not governance.","parameterDecorators":[{"name":"_toWhitelist","description":"the account to mint tokens to.","recommendedTypes":[]},{"name":"_state","description":"the whitelist state.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"stake(uint256)","name":"stake","description":"Deposits friesTokens into the exchange.","parameterDecorators":[{"name":"amount","description":"the amount of friesTokens to stake.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"token()","name":"token","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"tokensInBucket(address)","name":"tokensInBucket","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"totalDividendPoints()","name":"totalDividendPoints","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"totalSupplyFriesTokens()","name":"totalSupplyFriesTokens","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"unclaimedDividends()","name":"unclaimedDividends","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"unstake(uint256)","name":"unstake","description":"Withdraws staked friesTokens from the exchange This function reverts if you try to draw more tokens than you deposited.","parameterDecorators":[{"name":"amount","description":"the amount of friesTokens to unstake.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"upgrade()","name":"upgrade","description":"Operation notice!The assets((DAI/USDT/USDC)) total value should be equal or more than user's fryUSD.Require upgradeAmount <= DAI/USDT/USDC - fryUSD.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"upgradeAddress()","name":"upgradeAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"upgradeAmount()","name":"upgradeAmount","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"upgradeImpl(address)","name":"upgradeImpl","description":"","parameterDecorators":[{"name":"_newImpl","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"upgradeSetting(address,uint256,uint256)","name":"upgradeSetting","description":"Ensure that oven is invalid first!! then upgradesetting could be called.","parameterDecorators":[{"name":"_upgradeAddress","description":"","recommendedTypes":[]},{"name":"_upgradeTime","description":"","recommendedTypes":[]},{"name":"_upgradeAmount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"upgradeTime()","name":"upgradeTime","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"userInfo(address)","name":"userInfo","description":"Gets the status of a user's staking position. The total amount allocated to a user is the sum of pendingdivs and inbucket.","parameterDecorators":[{"name":"user","description":"the address of the user you wish to query. returns user status.","recommendedTypes":[]}],"returnDecorators":[{"name":"depositedToken","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"pendingdivs","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"inbucket","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"realised","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"userIsKnown(address)","name":"userIsKnown","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"userList(uint256)","name":"userList","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"whiteList(address)","name":"whiteList","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true}]}