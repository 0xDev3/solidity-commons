{
  "schema": "../schema.json",
  "tags": [],
  "name": "RollupUserFacet",
  "description": "",
  "eventDecorators": [
    {
      "signature": "NodeConfirmed(uint256,bytes32,uint256,bytes32,uint256)",
      "name": "NodeConfirmed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nodeNum",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "afterSendAcc",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterSendCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterLogAcc",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterLogCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeCreated(uint256,bytes32,bytes32,bytes32,uint256,uint256,bytes32,bytes32[3][2],uint256[4][2])",
      "name": "NodeCreated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nodeNum",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "parentNodeHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "nodeHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "executionHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "inboxMaxCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterInboxBatchEndCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "afterInboxBatchAcc",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assertionBytes32Fields",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "assertionIntFields",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NodeRejected(uint256)",
      "name": "NodeRejected",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nodeNum",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NodesDestroyed(uint256,uint256)",
      "name": "NodesDestroyed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of liquidity (priced in liquidityToken) that was provided.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "The address that provided the liquidity.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnerFunctionCalled(uint256)",
      "name": "OwnerFunctionCalled",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RollupChallengeStarted(address,address,address,uint256)",
      "name": "RollupChallengeStarted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "challengeContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "asserter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "challenger",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "challengedNode",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RollupCreated(bytes32)",
      "name": "RollupCreated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "machineHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakerReassigned(address,uint256)",
      "name": "StakerReassigned",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of liquidity (priced in liquidityToken) that was provided.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "The address that provided the liquidity.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "_stakerMap(address)",
      "name": "_stakerMap",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "latestStakedNode",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amountStaked",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "currentChallenge",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "isStaked",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addToDeposit(address)",
      "name": "addToDeposit",
      "description": "Increase the amount staked eth for the given staker.",
      "parameterDecorators": [
        {
          "name": "stakerAddress",
          "description": "Address of the staker whose stake is increased.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "amountStaked(address)",
      "name": "amountStaked",
      "description": "Get the amount staked of the given staker.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "Staker address to lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount staked of the staker.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "arbGasSpeedLimitPerBlock()",
      "name": "arbGasSpeedLimitPerBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "baseStake()",
      "name": "baseStake",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challengeExecutionBisectionDegree()",
      "name": "challengeExecutionBisectionDegree",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challengeFactory()",
      "name": "challengeFactory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "completeChallenge(address,address)",
      "name": "completeChallenge",
      "description": "Inform the rollup that the challenge between the given stakers is completed. completeChallenge isn't pausable since in flight challenges should be allowed to complete or else they could be forced to timeout.",
      "parameterDecorators": [
        {
          "name": "winningStaker",
          "description": "Address of the winning staker.",
          "recommendedTypes": []
        },
        {
          "name": "losingStaker",
          "description": "Address of the losing staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "confirmNextNode(bytes32,bytes,uint256[],uint256,bytes32,uint256)",
      "name": "confirmNextNode",
      "description": "Confirm the next unresolved node.",
      "parameterDecorators": [
        {
          "name": "beforeSendAcc",
          "description": "Accumulator of the AVM sends from the beginning of time up to the end of the previous confirmed node.",
          "recommendedTypes": []
        },
        {
          "name": "sendsData",
          "description": "Concatenated data of the sends included in the confirmed node.",
          "recommendedTypes": []
        },
        {
          "name": "sendLengths",
          "description": "Lengths of the included sends.",
          "recommendedTypes": []
        },
        {
          "name": "afterSendCount",
          "description": "Total number of AVM sends emitted from the beginning of time after this node is confirmed.",
          "recommendedTypes": []
        },
        {
          "name": "afterLogAcc",
          "description": "Accumulator of the AVM logs from the beginning of time up to the end of this node.",
          "recommendedTypes": []
        },
        {
          "name": "afterLogCount",
          "description": "Total number of AVM logs emitted from the beginning of time after this node is confirmed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "confirmPeriodBlocks()",
      "name": "confirmPeriodBlocks",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "countStakedZombies(address)",
      "name": "countStakedZombies",
      "description": "Calculate the number of zombies staked on the given node. This function could be uncallable if there are too many zombies. However, removeZombie and removeOldZombies can be used to remove any zombies that exist so that this will then be callable.",
      "parameterDecorators": [
        {
          "name": "node",
          "description": "The node on which to count staked zombies.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The number of zombies staked on the node.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createChallenge(address[2],uint256[2],bytes32[2],uint256[2],uint256[2])",
      "name": "createChallenge",
      "description": "Start a challenge between the given stakers over the node created by the first staker assuming that the two are staked on conflicting nodes.",
      "parameterDecorators": [
        {
          "name": "stakers",
          "description": "Stakers engaged in the challenge. The first staker should be staked on the first node.",
          "recommendedTypes": []
        },
        {
          "name": "nodeNums",
          "description": "Nodes of the stakers engaged in the challenge. The first node should be the earliest and is the one challenged.",
          "recommendedTypes": []
        },
        {
          "name": "executionHashes",
          "description": "Challenge related data for the two nodes.",
          "recommendedTypes": []
        },
        {
          "name": "proposedTimes",
          "description": "Times that the two nodes were proposed.",
          "recommendedTypes": []
        },
        {
          "name": "maxMessageCounts",
          "description": "Total number of messages consumed by the two nodes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "currentChallenge(address)",
      "name": "currentChallenge",
      "description": "Get the current challenge of the given staker.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "Staker address to lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Current challenge of the staker.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentRequiredStake()",
      "name": "currentRequiredStake",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delayedBridge()",
      "name": "delayedBridge",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "extraChallengeTimeBlocks()",
      "name": "extraChallengeTimeBlocks",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "firstUnresolvedNode()",
      "name": "firstUnresolvedNode",
      "description": "If all nodes have been resolved, this will be latestNodeCreated + 1.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Index of the first unresolved node.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNode(uint256)",
      "name": "getNode",
      "description": "Get the address of the Node contract for the given node.",
      "parameterDecorators": [
        {
          "name": "nodeNum",
          "description": "Index of the node.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Address of the Node contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNodeHash(uint256)",
      "name": "getNodeHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Node hash as of this node number.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getStakerAddress(uint256)",
      "name": "getStakerAddress",
      "description": "Get the address of the staker at the given index.",
      "parameterDecorators": [
        {
          "name": "stakerNum",
          "description": "Index of the staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Address of the staker.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_stakeToken",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isMaster()",
      "name": "isMaster",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isStaked(address)",
      "name": "isStaked",
      "description": "Check whether the given staker is staked.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "Staker address to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True or False for whether the staker was staked.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isZombie(address)",
      "name": "isZombie",
      "description": "",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastStakeBlock()",
      "name": "lastStakeBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Ethereum block that the most recent stake was created.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestConfirmed()",
      "name": "latestConfirmed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Index of the latest confirmed node.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestNodeCreated()",
      "name": "latestNodeCreated",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Index of the latest rollup node created.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "latestStakedNode(address)",
      "name": "latestStakedNode",
      "description": "Get the latest staked node of the given staker.",
      "parameterDecorators": [
        {
          "name": "staker",
          "description": "Staker address to lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Latest node staked of the staker.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minimumAssertionPeriod()",
      "name": "minimumAssertionPeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newStake()",
      "name": "newStake",
      "description": "Create a new stake. It is recomended to call stakeOnExistingNode after creating a new stake so that a griefer doesn't remove your stake by immediately calling returnOldDeposit.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nodeFactory()",
      "name": "nodeFactory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "outbox()",
      "name": "outbox",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reduceDeposit(uint256)",
      "name": "reduceDeposit",
      "description": "Reduce the amount staked for the sender.",
      "parameterDecorators": [
        {
          "name": "target",
          "description": "Target amount of stake for the staker. If this is below the current minimum, it will be set to minimum instead.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rejectNextNode(address)",
      "name": "rejectNextNode",
      "description": "Reject the next unresolved node.",
      "parameterDecorators": [
        {
          "name": "stakerAddress",
          "description": "Example staker staked on sibling.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeOldZombies(uint256)",
      "name": "removeOldZombies",
      "description": "Remove any zombies whose latest stake is earlier than the first unresolved node.",
      "parameterDecorators": [
        {
          "name": "startIndex",
          "description": "Index in the zombie list to start removing zombies from (to limit the cost of this transaction).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeZombie(uint256,uint256)",
      "name": "removeZombie",
      "description": "Remove the given zombie from nodes it is staked on, moving backwords from the latest node it is staked on.",
      "parameterDecorators": [
        {
          "name": "zombieNum",
          "description": "Index of the zombie to remove.",
          "recommendedTypes": []
        },
        {
          "name": "maxNodes",
          "description": "Maximum number of nodes to remove the zombie from (to limit the cost of this transaction).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requireUnresolved(uint256)",
      "name": "requireUnresolved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nodeNum",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "requireUnresolvedExists()",
      "name": "requireUnresolvedExists",
      "description": "Verify that there are some number of nodes still unresolved.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "requiredStake(uint256,uint256,uint256)",
      "name": "requiredStake",
      "description": "Calculate the current amount of funds required to place a new stake in the rollup. If the stake requirement get's too high, this function may start reverting due to overflow, but that only blocks operations that should be blocked anyway.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "firstUnresolvedNodeNum",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "latestNodeCreated",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The current minimum stake requirement.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "returnOldDeposit(address)",
      "name": "returnOldDeposit",
      "description": "Refund a staker that is currently staked on or before the latest confirmed node. Since a staker is initially placed in the latest confirmed node, if they don't move it a griefer can remove their stake. It is recomended to batch together the txs to place a stake and move it to the desired node.",
      "parameterDecorators": [
        {
          "name": "stakerAddress",
          "description": "Address of the staker whose stake is refunded.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rollupEventBridge()",
      "name": "rollupEventBridge",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sequencerBridge()",
      "name": "sequencerBridge",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sequencerInboxMaxDelayBlocks()",
      "name": "sequencerInboxMaxDelayBlocks",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sequencerInboxMaxDelaySeconds()",
      "name": "sequencerInboxMaxDelaySeconds",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakeOnExistingNode(uint256,bytes32)",
      "name": "stakeOnExistingNode",
      "description": "Move stake onto an existing node.",
      "parameterDecorators": [
        {
          "name": "nodeNum",
          "description": "Inbox of the node to move stake to. This must by a child of the node the staker is currently staked on.",
          "recommendedTypes": []
        },
        {
          "name": "nodeHash",
          "description": "Node hash of nodeNum (protects against reorgs).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakeOnNewNode(bytes32,bytes32[3][2],uint256[4][2],uint256,uint256,bytes)",
      "name": "stakeOnNewNode",
      "description": "Move stake onto a new node.",
      "parameterDecorators": [
        {
          "name": "expectedNodeHash",
          "description": "The hash of the node being created (protects against reorgs).",
          "recommendedTypes": []
        },
        {
          "name": "assertionBytes32Fields",
          "description": "Assertion data for creating.",
          "recommendedTypes": []
        },
        {
          "name": "assertionIntFields",
          "description": "Assertion data for creating.",
          "recommendedTypes": []
        },
        {
          "name": "beforeProposedBlock",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "beforeInboxMaxCount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "sequencerBatchProof",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakeToken()",
      "name": "stakeToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakerCount()",
      "name": "stakerCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Number of active stakers currently staked.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawStakerFunds(address)",
      "name": "withdrawStakerFunds",
      "description": "Withdraw uncomitted funds owned by sender from the rollup chain.",
      "parameterDecorators": [
        {
          "name": "destination",
          "description": "Address to transfer the withdrawn funds to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawableFunds(address)",
      "name": "withdrawableFunds",
      "description": "Get the amount of funds withdrawable by the given address.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "Address to check the funds of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of funds withdrawable by owner.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "zombieAddress(uint256)",
      "name": "zombieAddress",
      "description": "Get the original staker address of the zombie at the given index.",
      "parameterDecorators": [
        {
          "name": "zombieNum",
          "description": "Index of the zombie to lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Original staker address of the zombie.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "zombieCount()",
      "name": "zombieCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Current number of un-removed zombies.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "zombieLatestStakedNode(uint256)",
      "name": "zombieLatestStakedNode",
      "description": "Get Latest node that the given zombie at the given index is staked on.",
      "parameterDecorators": [
        {
          "name": "zombieNum",
          "description": "Index of the zombie to lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Latest node that the given zombie is staked on.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}