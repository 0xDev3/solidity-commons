{
  "schema": "../schema.json",
  "tags": [],
  "name": "CollateralPool",
  "description": "collateral pool contract with coin and necessary storage data. A smart-contract which stores user's deposited collateral.",
  "eventDecorators": [
    {
      "signature": "AddFee(address,uint256)",
      "name": "AddFee",
      "description": "Emitted when a user sells wTokens to the AMM. triggered when the system balance for a given token is updated.",
      "parameterDecorators": [
        {
          "name": "settlement",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "payback",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a user sells wTokens to the AMM. triggered when the system balance for a given token is updated.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RedeemFee(address,address,uint256)",
      "name": "RedeemFee",
      "description": "Emitted when a user sells wTokens to the AMM. triggered when the system balance for a given token is updated.",
      "parameterDecorators": [
        {
          "name": "newAmount",
          "description": "new amount.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "prevAmount",
          "description": "previous amount.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransferPayback(address,address,uint256)",
      "name": "TransferPayback",
      "description": "Emitted when a user sells wTokens to the AMM. triggered when the system balance for a given token is updated.",
      "parameterDecorators": [
        {
          "name": "newAmount",
          "description": "new amount.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "prevAmount",
          "description": "previous amount.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addCollateralBalance(address,uint256)",
      "name": "addCollateralBalance",
      "description": "Opterator collateral balance data. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "collateral",
          "description": "available colleteral address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "collateral colleteral increase amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addNetBalance(address,uint256)",
      "name": "addNetBalance",
      "description": "The foundation operator want to add some coin to netbalance, which can increase the FPTCoin net worth.",
      "parameterDecorators": [
        {
          "name": "settlement",
          "description": "the settlement coin address which the foundation operator want to transfer in this contract address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the amount of the settlement coin which the foundation operator want to transfer in this contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addNetWorthBalance(address,int256)",
      "name": "addNetWorthBalance",
      "description": "Opterator net worth balance data. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "collateral",
          "description": "available colleteral address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "collateral net worth increase amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addOperator(address)",
      "name": "addOperator",
      "description": "add a new operator by owner.",
      "parameterDecorators": [
        {
          "name": "addAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addTransactionFee(address,uint256,uint256)",
      "name": "addTransactionFee",
      "description": "An interface for add transaction fee. Only manager contract can invoke this function.",
      "parameterDecorators": [
        {
          "name": "collateral",
          "description": "collateral address, also is the coin for fee.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "total transaction amount.",
          "recommendedTypes": []
        },
        {
          "name": "feeType",
          "description": "transaction fee type. see TransactionFee contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addUserInputCollateral(address,address,uint256)",
      "name": "addUserInputCollateral",
      "description": "Opterator user input collateral data. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "input user account which need add input collateral.",
          "recommendedTypes": []
        },
        {
          "name": "collateral",
          "description": "the collateral address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the input collateral amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addUserPayingUsd(address,uint256)",
      "name": "addUserPayingUsd",
      "description": "Opterator user paying data, priced in USD. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "input user account which need add paying amount.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the input paying amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addWhiteList(address)",
      "name": "addWhiteList",
      "description": "Implementation of add an eligible address into the whitelist.",
      "parameterDecorators": [
        {
          "name": "addAddress",
          "description": "new eligible address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buyOptionsPayfor(address,address,uint256,uint256)",
      "name": "buyOptionsPayfor",
      "description": "Operation for transfer user's payback. Only manager contract can invoke this function.",
      "parameterDecorators": [
        {
          "name": "recieptor",
          "description": "the recieptor account.",
          "recommendedTypes": []
        },
        {
          "name": "settlement",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "settlementAmount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "allPay",
          "description": "the payback amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calSharedPayment(address[])",
      "name": "calSharedPayment",
      "description": "Calculate the collateral pool shared worth. The foundation operator will invoke this function frequently.",
      "parameterDecorators": [
        {
          "name": "_whiteList",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateFee(uint256,uint256)",
      "name": "calculateFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "feeType",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkAddressPermission(address,uint256)",
      "name": "checkAddressPermission",
      "description": "",
      "parameterDecorators": [
        {
          "name": "tmpAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "state",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllFeeBalances()",
      "name": "getAllFeeBalances",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllRealBalance(address[])",
      "name": "getAllRealBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "whiteList",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCollateralAndPremiumBalances(address,uint256,address[],uint256[],uint256[])",
      "name": "getCollateralAndPremiumBalances",
      "description": "calculate user's input collateral balance and premium collateral balance. Specially used for user's redeem collateral.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "the recieptor account.",
          "recommendedTypes": []
        },
        {
          "name": "userTotalWorth",
          "description": "the user's total FPTCoin worth, priced in USD.",
          "recommendedTypes": []
        },
        {
          "name": "tmpWhiteList",
          "description": "the settlement coin white list.",
          "recommendedTypes": []
        },
        {
          "name": "_RealBalances",
          "description": "the real Collateral balance.",
          "recommendedTypes": []
        },
        {
          "name": "prices",
          "description": "the collateral prices list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCollateralBalance(address)",
      "name": "getCollateralBalance",
      "description": "Retrieve collateral balance data.",
      "parameterDecorators": [
        {
          "name": "collateral",
          "description": "input retrieved collateral coin address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFeeBalance(address)",
      "name": "getFeeBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "settlement",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFeeRate(uint256)",
      "name": "getFeeRate",
      "description": "",
      "parameterDecorators": [
        {
          "name": "feeType",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getFeeRateAll()",
      "name": "getFeeRateAll",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getManager()",
      "name": "getManager",
      "description": "get manager address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNetWorthBalance(address)",
      "name": "getNetWorthBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "settlement",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOperator()",
      "name": "getOperator",
      "description": "get all operators.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOptionsPoolAddress()",
      "name": "getOptionsPoolAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRealBalance(address)",
      "name": "getRealBalance",
      "description": "Retrieve the balance of collateral, the auxiliary function for the total collateral calculation.",
      "parameterDecorators": [
        {
          "name": "settlement",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserInputCollateral(address,address)",
      "name": "getUserInputCollateral",
      "description": "Retrieve user's amount of the specified collateral.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "input retrieved account.",
          "recommendedTypes": []
        },
        {
          "name": "collateral",
          "description": "input retrieved collateral coin address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUserPayingUsd(address)",
      "name": "getUserPayingUsd",
      "description": "Retrieve user's cost of collateral, priced in USD.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "input retrieved account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWhiteList()",
      "name": "getWhiteList",
      "description": "Implementation of getting the eligible whitelist.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize()",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isEligibleAddress(address)",
      "name": "isEligibleAddress",
      "description": "Implementation of testing whether the input address is eligible.",
      "parameterDecorators": [
        {
          "name": "tmpAddress",
          "description": "input address for testing.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "modifyPermission(address,uint256)",
      "name": "modifyPermission",
      "description": "",
      "parameterDecorators": [
        {
          "name": "addAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "permission",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeem(address)",
      "name": "redeem",
      "description": "",
      "parameterDecorators": [
        {
          "name": "currency",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemAll()",
      "name": "redeemAll",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeOperator(address)",
      "name": "removeOperator",
      "description": "remove operator by owner.",
      "parameterDecorators": [
        {
          "name": "removeAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeWhiteList(address)",
      "name": "removeWhiteList",
      "description": "Implementation of revoke an invalid address from the whitelist.",
      "parameterDecorators": [
        {
          "name": "removeAddress",
          "description": "revoked address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCollateralBalance(address,uint256)",
      "name": "setCollateralBalance",
      "description": "set collateral balance. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "collateral",
          "description": "collateral address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the new amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setHalt(bool)",
      "name": "setHalt",
      "description": "function Emergency situation that requires contribution period to stop or not.",
      "parameterDecorators": [
        {
          "name": "halt",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setManager(address)",
      "name": "setManager",
      "description": "set manager by owner.",
      "parameterDecorators": [
        {
          "name": "managerAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNetWorthBalance(address,int256)",
      "name": "setNetWorthBalance",
      "description": "set net worth balance. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "collateral",
          "description": "collateral address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the new amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOperator(uint256,address)",
      "name": "setOperator",
      "description": "modify indexed operator by owner.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "addAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOperators(address[])",
      "name": "setOperators",
      "description": "set all operators by owner.",
      "parameterDecorators": [
        {
          "name": "operators",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOptionsPoolAddress(address)",
      "name": "setOptionsPoolAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "optionsPool",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSharedPayment(address[],int256[],int256[],uint256)",
      "name": "setSharedPayment",
      "description": "Set the calculation results of the collateral pool shared worth. The foundation operator will invoke this function frequently.",
      "parameterDecorators": [
        {
          "name": "_whiteList",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "newNetworth",
          "description": "Current expired options' net worth.",
          "recommendedTypes": []
        },
        {
          "name": "sharedBalances",
          "description": "All unexpired options' shared balance distributed by time.",
          "recommendedTypes": []
        },
        {
          "name": "firstOption",
          "description": "The new first unexpired option's index.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTransactionFee(uint256,uint32)",
      "name": "setTransactionFee",
      "description": "set the rate of trasaction fee.",
      "parameterDecorators": [
        {
          "name": "feeType",
          "description": "the transaction fee type.",
          "recommendedTypes": []
        },
        {
          "name": "thousandth",
          "description": "the numerator of transaction fee . transaction fee = thousandth/1000;.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUserInputCollateral(address,address,uint256)",
      "name": "setUserInputCollateral",
      "description": "set user's collateral balance. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "user's account.",
          "recommendedTypes": []
        },
        {
          "name": "collateral",
          "description": "collateral address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "user's new amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUserPayingUsd(address,uint256)",
      "name": "setUserPayingUsd",
      "description": "set user paying data,priced in USD. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "user's account.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "user's new amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "subCollateralBalance(address,uint256)",
      "name": "subCollateralBalance",
      "description": "Substract collateral balance. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "collateral",
          "description": "collateral address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the decrease amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "subNetWorthBalance(address,int256)",
      "name": "subNetWorthBalance",
      "description": "Substract net worth balance. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "collateral",
          "description": "collateral address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "the decrease amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "subUserInputCollateral(address,address,uint256)",
      "name": "subUserInputCollateral",
      "description": "Substract user's collateral balance. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "user's account.",
          "recommendedTypes": []
        },
        {
          "name": "collateral",
          "description": "collateral address.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "user's decrease amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "subUserPayingUsd(address,uint256)",
      "name": "subUserPayingUsd",
      "description": "Substract user paying data,priced in USD. Only manager contract can modify database.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "user's account.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "user's decrease amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferPayback(address,address,uint256)",
      "name": "transferPayback",
      "description": "Operation for transfer user's payback. Only manager contract can invoke this function.",
      "parameterDecorators": [
        {
          "name": "recieptor",
          "description": "the recieptor account.",
          "recommendedTypes": []
        },
        {
          "name": "settlement",
          "description": "the settlement coin address.",
          "recommendedTypes": []
        },
        {
          "name": "payback",
          "description": "the payback amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferPaybackAndFee(address,address,uint256,uint256)",
      "name": "transferPaybackAndFee",
      "description": "Operation for transfer user's payback and deduct transaction fee. Only manager contract can invoke this function.",
      "parameterDecorators": [
        {
          "name": "recieptor",
          "description": "the recieptor account.",
          "recommendedTypes": []
        },
        {
          "name": "settlement",
          "description": "the settlement coin address.",
          "recommendedTypes": []
        },
        {
          "name": "payback",
          "description": "the payback amount.",
          "recommendedTypes": []
        },
        {
          "name": "feeType",
          "description": "the transaction fee type. see transactionFee contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferPaybackBalances(address,uint256,address[],uint256[],uint256[],uint256[])",
      "name": "transferPaybackBalances",
      "description": "Operation for transfer user's payback and deduct transaction fee for multiple settlement Coin. Specially used for redeem collateral.Only manager contract can invoke this function.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "the recieptor account.",
          "recommendedTypes": []
        },
        {
          "name": "redeemWorth",
          "description": "the redeem worth, priced in USD.",
          "recommendedTypes": []
        },
        {
          "name": "tmpWhiteList",
          "description": "the settlement coin white list.",
          "recommendedTypes": []
        },
        {
          "name": "colBalances",
          "description": "the Collateral balance based for user's input collateral.",
          "recommendedTypes": []
        },
        {
          "name": "PremiumBalances",
          "description": "the premium collateral balance if redeem worth is exceeded user's input collateral.",
          "recommendedTypes": []
        },
        {
          "name": "prices",
          "description": "the collateral prices list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "update()",
      "name": "update",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}