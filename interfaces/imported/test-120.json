{
  "schema": "../schema.json",
  "tags": [],
  "name": "Test",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "lowGasMulticall()",
      "name": "lowGasMulticall",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lowGasMulticall(bytes[],bool)",
      "name": "lowGasMulticall",
      "description": "Call multiple functions in the current contract. The `msg.value` should not be trusted for any method callable from multicall.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "The encoded function data for each of the calls to make to this contract.",
          "recommendedTypes": []
        },
        {
          "name": "revertOnFail",
          "description": "If true, if a call reverts, this function will revert.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "multicall(bytes[],bool)",
      "name": "multicall",
      "description": "Call multiple functions in the current contract and return the data from all of them. The `msg.value` should not be trusted for any method callable from multicall.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "The encoded function data for each of the calls to make to this contract.",
          "recommendedTypes": []
        },
        {
          "name": "revertOnFail",
          "description": "If true, if a call reverts, this function will revert.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "The results from each of the calls passed in via data, if the call reverted (and revertOnFail is true) then it will be the revert data.",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "normalMulticall()",
      "name": "normalMulticall",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setA(bytes32)",
      "name": "setA",
      "description": "",
      "parameterDecorators": [
        {
          "name": "input",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "output",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setB(bytes32)",
      "name": "setB",
      "description": "",
      "parameterDecorators": [
        {
          "name": "input",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "output",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}