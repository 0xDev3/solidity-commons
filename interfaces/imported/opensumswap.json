{
  "schema": "../schema.json",
  "tags": [
    "swaps"
  ],
  "name": "OpenSumSwap",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AddLiquidity(address,uint256[],uint256)",
      "name": "AddLiquidity",
      "description": "Emitted after bundle swap.",
      "parameterDecorators": [
        {
          "name": "provider",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenAmounts",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lpTokenSupply",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted after bundle swap.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Emitted after bundle swap.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "- The account that triggered the offset.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RemoveLiquidity(address,uint256[],uint256)",
      "name": "RemoveLiquidity",
      "description": "Emitted after bundle swap.",
      "parameterDecorators": [
        {
          "name": "provider",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenAmounts",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lpTokenSupply",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RemoveLiquidityOne(address,uint256,uint256,uint256,uint256)",
      "name": "RemoveLiquidityOne",
      "description": "Emitted after bundle swap.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "- The account that triggered the offset.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "bundleAddress",
          "description": "- the bundle address.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "initialAmount",
          "description": "- the amount to offset in terms of source bundle.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "offsettedAmount",
          "description": "- the amount offsetted after fees in terms of the token.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenAddress",
          "description": "- the address of the token that is to be offsetted.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenSwap(address,uint256,uint256,uint128,uint128)",
      "name": "TokenSwap",
      "description": "Emitted after bundle swap.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "- The account that triggered the offset.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "bundleAddress",
          "description": "- the bundle address.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "initialAmount",
          "description": "- the amount to offset in terms of source bundle.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "offsettedAmount",
          "description": "- the amount offsetted after fees in terms of the token.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenAddress",
          "description": "- the address of the token that is to be offsetted.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Emitted after bundle swap.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "- The account that triggered the offset.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addLiquidity(uint256[],uint256)",
      "name": "addLiquidity",
      "description": "Add liquidity to the pool.",
      "parameterDecorators": [
        {
          "name": "amounts",
          "description": "the amounts of each token to add, in their native precision.",
          "recommendedTypes": []
        },
        {
          "name": "minToMint",
          "description": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of LP token user received.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateRemoveLiquidity(uint256)",
      "name": "calculateRemoveLiquidity",
      "description": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "the amount of LP tokens that would be burned on withdrawal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "array of token balances that the user will receive.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calculateRemoveLiquidityOneToken(uint256,address)",
      "name": "calculateRemoveLiquidityOneToken",
      "description": "Calculate the amount of underlying token available to withdraw when withdrawing via only single token.",
      "parameterDecorators": [
        {
          "name": "tokenAmount",
          "description": "the amount of LP token to burn.",
          "recommendedTypes": []
        },
        {
          "name": "tokenOut",
          "description": "address of which token will be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "availableTokenAmount",
          "description": "calculated amount of underlying token available to withdraw.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBalances()",
      "name": "getBalances",
      "description": "Return balances of pooled tokens.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "current balances of all tokens in pool.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLpToken()",
      "name": "getLpToken",
      "description": "Returns address of lp token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of lp token.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getToken(uint8)",
      "name": "getToken",
      "description": "Return address of the pooled token at given index. Reverts if tokenIndex is out of range.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "the index of the token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of the token at given index.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenBalance(uint8)",
      "name": "getTokenBalance",
      "description": "Return current balance of the pooled token at given index.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "the index of the token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "current balance of the pooled token at given index with token's native precision.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenIndex(address)",
      "name": "getTokenIndex",
      "description": "Return the index of the given token address. Reverts if no matching token is found.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "address of the token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the index of the given token address.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Pause the contract. Revert if already paused.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeLiquidity(uint256,uint256[],uint256)",
      "name": "removeLiquidity",
      "description": "Burn LP tokens to remove liquidity from the pool. Liquidity can always be removed, even when the pool is paused.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "the amount of LP tokens to burn.",
          "recommendedTypes": []
        },
        {
          "name": "minAmounts",
          "description": "the minimum amounts of each token in the pool acceptable for this burn. Useful as a front-running mitigation.",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "latest timestamp to accept this transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amounts of tokens user received.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeLiquidityOneToken(uint256,address,uint256)",
      "name": "removeLiquidityOneToken",
      "description": "Remove liquidity from the pool all in one token.",
      "parameterDecorators": [
        {
          "name": "tokenAmount",
          "description": "the amount of the lp tokens to burn.",
          "recommendedTypes": []
        },
        {
          "name": "tokenOut",
          "description": "the address of the token you want to receive.",
          "recommendedTypes": []
        },
        {
          "name": "minAmount",
          "description": "the minimum amount to withdraw, otherwise revert.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount chosen token that user received.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swap(address,address,uint256,uint256,uint256)",
      "name": "swap",
      "description": "Swap two tokens using this pool.",
      "parameterDecorators": [
        {
          "name": "tokenFrom",
          "description": "the token the user wants to swap from.",
          "recommendedTypes": []
        },
        {
          "name": "tokenTo",
          "description": "the token the user wants to swap to.",
          "recommendedTypes": []
        },
        {
          "name": "amountIn",
          "description": "the amount of tokens the user wants to swap from.",
          "recommendedTypes": []
        },
        {
          "name": "minAmountOut",
          "description": "the min amount the user would like to receive, or revert.",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "latest timestamp to accept this transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "Unpause the contract. Revert if already unpaused.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}