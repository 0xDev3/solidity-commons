{
  "schema": "../schema.json",
  "tags": [],
  "name": "FeePool",
  "description": "",
  "eventDecorators": [
    {
      "signature": "IssuanceDebtRatioEntry(address,uint256,uint256,uint256)",
      "name": "IssuanceDebtRatioEntry",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "debtRatio",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "debtEntryIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "feePeriodStartingDebtIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExchangeFeeUpdated(uint256)",
      "name": "ExchangeFeeUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newFeeRate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FeePeriodDurationUpdated(uint256)",
      "name": "FeePeriodDurationUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newFeePeriodDuration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FeePeriodClosed(uint256)",
      "name": "FeePeriodClosed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "feePeriodId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FeesClaimed(address,uint256,uint256)",
      "name": "FeesClaimed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "access",
          "description": "TRUE if the Watcher was given permissions, FALSE if permissions were removed.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "watcher",
          "description": "the address of the Watcher.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SelfDestructTerminated()",
      "name": "SelfDestructTerminated",
      "description": "",
      "parameterDecorators": []
    },
    {
      "signature": "SelfDestructed(address)",
      "name": "SelfDestructed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SelfDestructInitiated(uint256)",
      "name": "SelfDestructInitiated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "selfDestructDelay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SelfDestructBeneficiaryUpdated(address)",
      "name": "SelfDestructBeneficiaryUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newBeneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProxyUpdated(address)",
      "name": "ProxyUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "proxyAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerNominated(address)",
      "name": "OwnerNominated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerChanged(address,address)",
      "name": "OwnerChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "oldOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "setFeePeriodDuration(uint256)",
      "name": "setFeePeriodDuration",
      "description": "Set the fee period duration.",
      "parameterDecorators": [
        {
          "name": "_feePeriodDuration",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resolver()",
      "name": "resolver",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLastFeeWithdrawal(address)",
      "name": "getLastFeeWithdrawal",
      "description": "Get the feePeriodID of the last claim this account made.",
      "parameterDecorators": [
        {
          "name": "_claimingAddress",
          "description": "account to check the last fee period ID claim for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "effectiveDebtRatioForPeriod(address,uint256)",
      "name": "effectiveDebtRatioForPeriod",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "period",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feesAvailable(address)",
      "name": "feesAvailable",
      "description": "The fees available to be withdrawn by a specific account, priced in xUSD. Returns two amounts, one for fees and one for DOWS rewards.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchangeFeeRate()",
      "name": "exchangeFeeRate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setIntegrationProxy(address)",
      "name": "setIntegrationProxy",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_integrationProxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nominateNewOwner(address)",
      "name": "nominateNewOwner",
      "description": "Nominate a new owner of this contract. Only the current owner may nominate a new owner.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initiationTime()",
      "name": "initiationTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "convertXDRFeesToxUSD(address)",
      "name": "convertXDRFeesToxUSD",
      "description": "One time onlyOwner call to convert all XDR balance in the FEE_ADDRESS to xUSD.",
      "parameterDecorators": [
        {
          "name": "exchangeRatesAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSelfDestructBeneficiary(address)",
      "name": "setSelfDestructBeneficiary",
      "description": "Set the beneficiary address of this contract. Only the contract owner may call this. The provided beneficiary must be non-null.",
      "parameterDecorators": [
        {
          "name": "_beneficiary",
          "description": "The address to pay any eth contained in this contract to upon self-destruction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feePeriodDuration()",
      "name": "feePeriodDuration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recordFeePaid(uint256)",
      "name": "recordFeePaid",
      "description": "The Exchanger contract informs us when fees are paid.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "xusd amount in fees being paid.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTargetThreshold(uint256)",
      "name": "setTargetThreshold",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_percent",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "terminateSelfDestruct()",
      "name": "terminateSelfDestruct",
      "description": "Terminate and reset the self-destruction timer. Only the contract owner may call this.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "feesByPeriod(address)",
      "name": "feesByPeriod",
      "description": "Calculates fees by period for an account, priced in xUSD.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address you want to query the fees for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[2][3]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "closeCurrentFeePeriod()",
      "name": "closeCurrentFeePeriod",
      "description": "Close the current fee period and start a new one.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "recentFeePeriods(uint256)",
      "name": "recentFeePeriods",
      "description": "",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "feePeriodId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "startingDebtIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "feesToDistribute",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "feesClaimed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardsToDistribute",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardsClaimed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "approveClaimOnBehalf(address)",
      "name": "approveClaimOnBehalf",
      "description": "Approve an address to be able to claim your fees to your account on your behalf. This is intended to be able to delegate a mobile wallet to call the function to claim fees to your cold storage wallet.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The hot/mobile/contract address that will call claimFees your accounts behalf.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setResolver(address)",
      "name": "setResolver",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_resolver",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nominatedOwner()",
      "name": "nominatedOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalFeesAvailable()",
      "name": "totalFeesAvailable",
      "description": "The total fees available in the system to be withdrawnn in xUSD.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setExchangeFeeRate(uint256)",
      "name": "setExchangeFeeRate",
      "description": "Set the exchange fee, anywhere within the range 0-10%. The fee rate is in decimal format, with UNIT being the value of 100%.",
      "parameterDecorators": [
        {
          "name": "_exchangeFeeRate",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isFeesClaimable(address)",
      "name": "isFeesClaimable",
      "description": "Check if a particular address is able to claim fees right now.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address you want to query for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimOnBehalf(address)",
      "name": "claimOnBehalf",
      "description": "Delegated claimFees(). Call from the deletegated address and the fees will be sent to the claimingForAddress. approveClaimOnBehalf() must be called first to approve the deletage address.",
      "parameterDecorators": [
        {
          "name": "claimingForAddress",
          "description": "The account you are claiming fees for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeClaimOnBehalf(address)",
      "name": "removeClaimOnBehalf",
      "description": "Remove the permission to call claimFees your accounts behalf.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The hot/mobile/contract address to remove permission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalRewardsAvailable()",
      "name": "totalRewardsAvailable",
      "description": "The total DOWS rewards available in the system to be withdrawn.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "Accept the nomination to be owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "appendAccountIssuanceRecord(address,uint256,uint256)",
      "name": "appendAccountIssuanceRecord",
      "description": "Logs an accounts issuance data per fee period. onlyIssuer to call me on shadows.issue() & shadows.burn() calls to store the locked DOWS per fee period so we know to allocate the correct proportions of fees and rewards per period.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Message.Senders account address.",
          "recommendedTypes": []
        },
        {
          "name": "debtRatio",
          "description": "Debt percentage this account has locked after minting or burning their synth.",
          "recommendedTypes": []
        },
        {
          "name": "debtEntryIndex",
          "description": "The index in the global debt ledger. shadowsState.issuanceData(account).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setProxy(address)",
      "name": "setProxy",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_proxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "selfDestruct()",
      "name": "selfDestruct",
      "description": "If the self-destruction delay has elapsed, destroy this contract and remit any ether it owns to the beneficiary address. Only the contract owner may call this.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "integrationProxy()",
      "name": "integrationProxy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SELFDESTRUCT_DELAY()",
      "name": "SELFDESTRUCT_DELAY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPenaltyThresholdRatio()",
      "name": "getPenaltyThresholdRatio",
      "description": "Calculate the collateral ratio before user is blocked from claiming.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "importFeePeriod(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "importFeePeriod",
      "description": "Admin function to import the FeePeriod data from the previous contract.",
      "parameterDecorators": [
        {
          "name": "feePeriodIndex",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "feePeriodId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "startingDebtIndex",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "feesToDistribute",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "feesClaimed",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "rewardsToDistribute",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "rewardsClaimed",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "appendVestingEntry(address,uint256)",
      "name": "appendVestingEntry",
      "description": "Owner can escrow DOWS. Owner to send the tokens to the RewardEscrow.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Address to escrow tokens for.",
          "recommendedTypes": []
        },
        {
          "name": "quantity",
          "description": "Amount of tokens to escrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "amountReceivedFromTransfer(uint256)",
      "name": "amountReceivedFromTransfer",
      "description": "The amount the recipient will receive if you send a certain number of tokens. function used by Depot and stub will return value amount inputted.",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "The amount of tokens you intend to send.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "selfDestructInitiated()",
      "name": "selfDestructInitiated",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setMessageSender(address)",
      "name": "setMessageSender",
      "description": "",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initiateSelfDestruct()",
      "name": "initiateSelfDestruct",
      "description": "Begin the self-destruction counter of this contract. Once the delay has elapsed, the contract may be self-destructed. Only the contract owner may call this.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "selfDestructBeneficiary()",
      "name": "selfDestructBeneficiary",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchangeFeeIncurred(uint256)",
      "name": "exchangeFeeIncurred",
      "description": "Calculate the fee charged on top of a value being sent via an exchange.",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "FEE_PERIOD_LENGTH()",
      "name": "FEE_PERIOD_LENGTH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimFees()",
      "name": "claimFees",
      "description": "Claim fees for last period when available or not already withdrawn.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "MIN_FEE_PERIOD_DURATION()",
      "name": "MIN_FEE_PERIOD_DURATION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "messageSender()",
      "name": "messageSender",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "amountReceivedFromExchange(uint256)",
      "name": "amountReceivedFromExchange",
      "description": "The amount the recipient will receive if you are performing an exchange and the destination currency will be worth a certain number of tokens.",
      "parameterDecorators": [
        {
          "name": "value",
          "description": "The amount of destination currency tokens they received after the exchange.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "targetThreshold()",
      "name": "targetThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "FEE_ADDRESS()",
      "name": "FEE_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxy()",
      "name": "proxy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_FEE_PERIOD_DURATION()",
      "name": "MAX_FEE_PERIOD_DURATION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_EXCHANGE_FEE_RATE()",
      "name": "MAX_EXCHANGE_FEE_RATE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setRewardsToDistribute(uint256)",
      "name": "setRewardsToDistribute",
      "description": "The RewardsDistribution contract informs us how many DOWS rewards are sent to RewardEscrow to be claimed.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}