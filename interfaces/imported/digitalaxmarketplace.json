{
  "schema": "../schema.json",
  "tags": [
    "nft"
  ],
  "name": "DigitalaxMarketplace",
  "description": "Marketplace contract for Digitalax NFTs.",
  "eventDecorators": [
    {
      "signature": "DigitalaxMarketplaceContractDeployed()",
      "name": "DigitalaxMarketplaceContractDeployed",
      "description": "Event emitted only on construction. To be used by indexers. deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": []
    },
    {
      "signature": "FreezeETHPaymentToggled(bool)",
      "name": "FreezeETHPaymentToggled",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "freezeETHPayment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FreezeMonaERC20PaymentToggled(bool)",
      "name": "FreezeMonaERC20PaymentToggled",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "freezeMonaERC20Payment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OfferCancelled(uint256)",
      "name": "OfferCancelled",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "garmentTokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OfferCreated(uint256)",
      "name": "OfferCreated",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "garmentCollectionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OfferPurchased(uint256,address,uint256,bool)",
      "name": "OfferPurchased",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "garmentTokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "primarySalePrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "paidInErc20",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PauseToggled(bool)",
      "name": "PauseToggled",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "isPaused",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdateAccessControls(address)",
      "name": "UpdateAccessControls",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "accessControls",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpdateMarketplaceDiscountToPayInErc20(uint256)",
      "name": "UpdateMarketplaceDiscountToPayInErc20",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "discount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdateMarketplacePlatformFee(uint256)",
      "name": "UpdateMarketplacePlatformFee",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "platformFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdateOfferPrimarySalePrice(uint256,uint256)",
      "name": "UpdateOfferPrimarySalePrice",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "garmentCollectionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "primarySalePrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdatePlatformFeeRecipient(address)",
      "name": "UpdatePlatformFeeRecipient",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "platformFeeRecipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "accessControls()",
      "name": "accessControls",
      "description": "responsible for enforcing admin access.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "buyOffer(uint256,bool)",
      "name": "buyOffer",
      "description": "Buys an open offer with eth or erc20. Only callable when the offer is openBids from smart contracts are prohibited - a user must buy directly from their addressContract must have been approved on the buy offer previouslyThe sale must have started (start time) to make a successful buy.",
      "parameterDecorators": [
        {
          "name": "_garmentCollectionId",
          "description": "Collection ID of the garment being offered.",
          "recommendedTypes": []
        },
        {
          "name": "_payWithMona",
          "description": "Whether to pay with ERC20 Mona token instead of ETH (possible discount for buyer).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelOffer(uint256)",
      "name": "cancelOffer",
      "description": "Cancels an inflight and un-resulted offer. Only admin.",
      "parameterDecorators": [
        {
          "name": "_garmentCollectionId",
          "description": "Token ID of the garment being offered.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createOffer(uint256,uint256)",
      "name": "createOffer",
      "description": "Creates a new offer for a given garment. Only the owner of a garment can create an offer and must have ALREADY approved the contractIn addition to owning the garment, the sender also has to have the MINTER role.End time for the offer will be in the future, at a time from now till expiry durationThere cannot be a duplicate offer created.",
      "parameterDecorators": [
        {
          "name": "_garmentCollectionId",
          "description": "Collection ID of the garment being offered to marketplace.",
          "recommendedTypes": []
        },
        {
          "name": "_primarySalePrice",
          "description": "Garment cannot be sold for less than this.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "discountToPayERC20()",
      "name": "discountToPayERC20",
      "description": "discount to pay fully in erc20 token (Mona), assumed to always be to 1 decimal place i.e. 20 = 2.0%.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "estimateMonaAmount(uint256)",
      "name": "estimateMonaAmount",
      "description": "Method for getting estimation of Mona amount.",
      "parameterDecorators": [
        {
          "name": "_priceInETH",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "freezeETHPayment()",
      "name": "freezeETHPayment",
      "description": "for freezing eth payment option.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "freezeMonaERC20Payment()",
      "name": "freezeMonaERC20Payment",
      "description": "for freezing mona payment option.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "garmentCollection()",
      "name": "garmentCollection",
      "description": "Garment NFT Collection.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "garmentNft()",
      "name": "garmentNft",
      "description": "Garment ERC721 NFT - the only NFT that can be offered in this contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOffer(uint256)",
      "name": "getOffer",
      "description": "Method for getting all info about the offer.",
      "parameterDecorators": [
        {
          "name": "_garmentCollectionId",
          "description": "Token ID of the garment being offered.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_primarySalePrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_startTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_availableAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPaused()",
      "name": "isPaused",
      "description": "for pausing marketplace functionalities.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "monaErc20Token()",
      "name": "monaErc20Token",
      "description": "the erc20 token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberOfTimesSold(address)",
      "name": "numberOfTimesSold",
      "description": "KYC Garment Designers -> Number of times they have sold in this marketplace (To set fee accordingly).",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "offers(uint256)",
      "name": "offers",
      "description": "Garment ERC721 Token ID -> Offer Parameters.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "primarySalePrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "startTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "availableIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracle()",
      "name": "oracle",
      "description": "Mona to Ether Oracle.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "platformFee()",
      "name": "platformFee",
      "description": "platform fee that will be sent to the platformFeeRecipient, assumed to always be to 1 decimal place i.e. 120 = 12.0%.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "platformFeeRecipient()",
      "name": "platformFeeRecipient",
      "description": "where to send platform fee funds to.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "toggleFreezeETHPayment()",
      "name": "toggleFreezeETHPayment",
      "description": "Toggle freeze ETH. Only admin.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "toggleFreezeMonaERC20Payment()",
      "name": "toggleFreezeMonaERC20Payment",
      "description": "Toggle freeze Mona ERC20. Only admin.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "toggleIsPaused()",
      "name": "toggleIsPaused",
      "description": "Toggling the pause flag. Only admin.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateAccessControls(address)",
      "name": "updateAccessControls",
      "description": "Method for updating the access controls contract used by the NFT. Only admin.",
      "parameterDecorators": [
        {
          "name": "_accessControls",
          "description": "Address of the new access controls contract (Cannot be zero address).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateMarketplaceDiscountToPayInErc20(uint256)",
      "name": "updateMarketplaceDiscountToPayInErc20",
      "description": "Update the marketplace discount. Only adminThis discount is taken away from the received fees, so the discount cannot exceed the platform fee.",
      "parameterDecorators": [
        {
          "name": "_marketplaceDiscount",
          "description": "New marketplace discount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateMarketplacePlatformFee(uint256)",
      "name": "updateMarketplacePlatformFee",
      "description": "Update the marketplace fee. Only adminThere is a discount that can be taken away from received fees, so that discount cannot exceed the platform fee.",
      "parameterDecorators": [
        {
          "name": "_platformFee",
          "description": "New marketplace fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateOfferPrimarySalePrice(uint256,uint256)",
      "name": "updateOfferPrimarySalePrice",
      "description": "Update the offer primary sale price. Only admin.",
      "parameterDecorators": [
        {
          "name": "_garmentCollectionId",
          "description": "Collection ID of the garment being offered.",
          "recommendedTypes": []
        },
        {
          "name": "_primarySalePrice",
          "description": "New price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePlatformFeeRecipient(address)",
      "name": "updatePlatformFeeRecipient",
      "description": "Method for updating platform fee address. Only admin.",
      "parameterDecorators": [
        {
          "name": "_platformFeeRecipient",
          "description": "payable address the address to sends the funds to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "weth()",
      "name": "weth",
      "description": "the WETH.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}