{"schema":"../schema.json","tags":[],"name":"UserDeposit","description":"","eventDecorators":[{"signature":"BalanceReduced(address,uint256)","name":"BalanceReduced","description":"----------------------------------------------------------------------- Events -----------------------------------------------------------------------. This event will be emitted every time the implementation gets upgraded.","parameterDecorators":[{"name":"owner","description":"","recommendedTypes":[],"indexed":true},{"name":"newBalance","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"WithdrawPlanned(address,uint256)","name":"WithdrawPlanned","description":"----------------------------------------------------------------------- Events -----------------------------------------------------------------------. This event will be emitted every time the implementation gets upgraded.","parameterDecorators":[{"name":"withdrawer","description":"","recommendedTypes":[],"indexed":true},{"name":"plannedBalance","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"balances(address)","name":"balances","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"contractExists(address)","name":"contractExists","description":"Check if a contract exists.","parameterDecorators":[{"name":"contract_address","description":"The address to check whether a contract is deployed or not.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"True if a contract exists, false otherwise.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"deposit(address,uint256)","name":"deposit","description":"Deposit tokens. The amount of transferred tokens will be `new_total_deposit - total_deposit[beneficiary]`. This makes the function behavior predictable and idempotent. Can be called several times and on behalf of other accounts.","parameterDecorators":[{"name":"beneficiary","description":"The account benefiting from the deposit.","recommendedTypes":[]},{"name":"new_total_deposit","description":"The total sum of tokens that have been deposited by the user by calling this function.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"effectiveBalance(address)","name":"effectiveBalance","description":"The owner's balance with planned withdrawals deducted.","parameterDecorators":[{"name":"owner","description":"Address for which the balance should be returned.","recommendedTypes":[]}],"returnDecorators":[{"name":"remaining_balance","description":"The remaining balance after planned withdrawals.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"init(address,address)","name":"init","description":"Specify trusted contracts. This has to be done outside of the constructor to avoid cyclic dependencies.","parameterDecorators":[{"name":"_msc_address","description":"Address of the MonitoringService contract.","recommendedTypes":[]},{"name":"_one_to_n_address","description":"Address of the OneToN contract.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"msc_address()","name":"msc_address","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"one_to_n_address()","name":"one_to_n_address","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"planWithdraw(uint256)","name":"planWithdraw","description":"Announce intention to withdraw tokens. Sets the planned withdraw amount and resets the withdraw_block. There is only one planned withdrawal at a time, the old one gets overwritten.","parameterDecorators":[{"name":"amount","description":"Maximum amount of tokens to be withdrawn.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"token()","name":"token","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"total_deposit(address)","name":"total_deposit","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transfer(address,address,uint256)","name":"transfer","description":"Internally transfer deposits between two addresses. Sender and receiver must be different or the transaction will fail.","parameterDecorators":[{"name":"sender","description":"Account from which the amount will be deducted.","recommendedTypes":[]},{"name":"receiver","description":"Account to which the amount will be credited.","recommendedTypes":[]},{"name":"amount","description":"Amount of tokens to be transferred.","recommendedTypes":[]}],"returnDecorators":[{"name":"success","description":"true if transfer has been done successfully, otherwise false.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"whole_balance()","name":"whole_balance","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"whole_balance_limit()","name":"whole_balance_limit","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(uint256)","name":"withdraw","description":"Execute a planned withdrawal Will only work after the withdraw_delay has expired. An amount lower or equal to the planned amount may be withdrawn. Removes the withdraw plan even if not the full amount has been withdrawn.","parameterDecorators":[{"name":"amount","description":"Amount of tokens to be withdrawn.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdraw_delay()","name":"withdraw_delay","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw_plans(address)","name":"withdraw_plans","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"withdraw_block","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}