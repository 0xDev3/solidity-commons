{"schema":"../schema.json","tags":[],"name":"CreatureFactory","description":"","eventDecorators":[{"signature":"FactoryMint(address,address,uint256,uint256,uint256)","name":"FactoryMint","description":"Event for token purchase logging.","parameterDecorators":[{"name":"origin","description":"","recommendedTypes":[],"indexed":true},{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"optionId","description":"","recommendedTypes":[],"indexed":true},{"name":"tokenIdStart","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenNum","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Event for token purchase logging.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Transfer(address,address,uint256)","name":"Transfer","description":"Event for token purchase logging.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"tokenId","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"CREATURE_SUPPLY()","name":"CREATURE_SUPPLY","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"baseURI()","name":"baseURI","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"canMint(uint256)","name":"canMint","description":"Returns whether the option ID can be minted. Can return false if the developer wishes to restrict a total supply per option ID (or overall).","parameterDecorators":[{"name":"_optionId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"creatureOpened()","name":"creatureOpened","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"isApprovedForAll(address,address)","name":"isApprovedForAll","description":"Get things work automatically on Element. It's a hack, Use isApprovedForAll so the frontend doesn't have to worry about different method names.","parameterDecorators":[{"name":"_owner","description":"","recommendedTypes":[]},{"name":"_operator","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"mint(uint256,address)","name":"mint","description":"Mints asset(s) in accordance to a specific address with a particular \"option\". This should be callable only by the contract owner or the owner's Wyvern Proxy (later universal login will solve this). Options should also be delineated 0 - (numOptions() - 1) for convenient indexing.","parameterDecorators":[{"name":"_optionId","description":"the option id.","recommendedTypes":[]},{"name":"_toAddress","description":"address of the future owner of the asset(s).","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"name()","name":"name","description":"Returns the name of this factory.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"nftAddress()","name":"nftAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"numOptions()","name":"numOptions","description":"Number of options the factory supports.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"ownerOf(uint256)","name":"ownerOf","description":"Get things to work automatically on Element.","parameterDecorators":[{"name":"_tokenId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_owner","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"proxyRegistryAddress()","name":"proxyRegistryAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setBaseURI(string)","name":"setBaseURI","description":"","parameterDecorators":[{"name":"_baseURI","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setCreatureOpened(uint256)","name":"setCreatureOpened","description":"","parameterDecorators":[{"name":"openNum","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"supportsFactoryInterface()","name":"supportsFactoryInterface","description":"Indicates that this is a factory contract. Ideally would use EIP 165 supportsInterface().","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"symbol()","name":"symbol","description":"Returns the symbol for this factory.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"tokenURI(uint256)","name":"tokenURI","description":"Returns a URL specifying some metadata about the option. This metadata can be of the same structure as the ERC721 metadata.","parameterDecorators":[{"name":"_optionId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"transferFrom(address,address,uint256)","name":"transferFrom","description":"Get things work automatically on Element. It's a hack, Use transferFrom so the frontend doesn't have to worry about different method names.","parameterDecorators":[{"name":"_from","description":"","recommendedTypes":[]},{"name":"_to","description":"","recommendedTypes":[]},{"name":"_tokenId","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}