{"schema":"../schema.json","tags":["oracles"],"name":"XplosiveRebaseOracle","description":"","eventDecorators":[{"signature":"NewDeviationThreshold(uint256,uint256)","name":"NewDeviationThreshold","description":"an event emitted when deviationThreshold is changed.","parameterDecorators":[{"name":"oldDeviationThreshold","description":"","recommendedTypes":[],"indexed":false},{"name":"newDeviationThreshold","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"TargetToleranceChanged(uint256)","name":"TargetToleranceChanged","description":"","parameterDecorators":[{"name":"_newTolerance","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TransferredGovenorship(address,address)","name":"TransferredGovenorship","description":"","parameterDecorators":[{"name":"previousGovenor","description":"","recommendedTypes":[],"indexed":true},{"name":"newGovenor","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"Governor()","name":"Governor","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"deviationThreshold()","name":"deviationThreshold","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"epoch()","name":"epoch","description":"The number of rebase cycles since inception.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"inRebaseWindow()","name":"inRebaseWindow","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"If the latest block timestamp is within the rebase time window it, returns true. Otherwise, returns false.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"lastRebaseTimestampSec()","name":"lastRebaseTimestampSec","description":"Block timestamp of last rebase operation.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"minRebaseTimeIntervalSec()","name":"minRebaseTimeIntervalSec","description":"More than this much time must pass between rebase operations.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"rebase()","name":"rebase","description":"Initiates a new rebase operation, provided the minimum time period has elapsed. The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate and targetRate is 1e18.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"rebaseDelay()","name":"rebaseDelay","description":"delays rebasing activation to facilitate liquidity.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rebaseLag()","name":"rebaseLag","description":"Spreads out getting to the target price.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rebaseWindowLengthSec()","name":"rebaseWindowLengthSec","description":"The length of the time window where a rebase operation is allowed to execute, in seconds.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rebaseWindowOffsetSec()","name":"rebaseWindowOffsetSec","description":"The rebase window begins this many seconds into the minRebaseTimeInterval period.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDeviationThreshold(uint256)","name":"setDeviationThreshold","description":"Use Circuit Breakers (Prevents some un godly amount of XETHG to be minted) 1.xETHG Price Marker 2.Set Rebase 20% treashold 3.Calculate Uni Pair Price 4.Target Price + Circuit Breaker 5.Accepted xETHprice Price For Rebase 6.Is Uniswap Price Over Circuit Breaker? 7.Yes, Use Rebase xETHCircuit Breaker Price 8.No, Use Uniswap Price.","parameterDecorators":[{"name":"deviationThreshold_","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRebaseLag(uint256)","name":"setRebaseLag","description":"Sets the rebase lag parameter. It is used to dampen the applied supply adjustment by 1 / rebaseLag If the rebase lag R, equals 1, the smallest value for R, then the full supply correction is applied on each rebase cycle. If it is greater than 1, then a correction of 1/R of is applied on each rebase.","parameterDecorators":[{"name":"rebaseLag_","description":"The new rebase lag parameter.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRebaseTimingParameters(uint256,uint256,uint256)","name":"setRebaseTimingParameters","description":"Sets the parameters which control the timing and frequency of rebase operations. a) the minimum time period that must elapse between rebase cycles. b) the rebase window offset parameter. c) the rebase window length parameter.","parameterDecorators":[{"name":"minRebaseTimeIntervalSec_","description":"More than this much time must pass between rebase operations, in seconds.","recommendedTypes":[]},{"name":"rebaseWindowOffsetSec_","description":"The number of seconds from the beginning of the rebase interval, where the rebase window begins.","recommendedTypes":[]},{"name":"rebaseWindowLengthSec_","description":"The length of the rebase window in seconds.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setTargetRate(uint256)","name":"setTargetRate","description":"Sets the targetRate parameter.","parameterDecorators":[{"name":"targetRate_","description":"The new target rate parameter.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setWhitelistedRebaserAddress(address,bool)","name":"setWhitelistedRebaserAddress","description":"","parameterDecorators":[{"name":"_addr","description":"","recommendedTypes":[]},{"name":"_whitelisted","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"targetRate()","name":"targetRate","description":"Peg target.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferGovenorship(address)","name":"transferGovenorship","description":"","parameterDecorators":[{"name":"newGovenor","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"uniswap_xeth_eth_pair()","name":"uniswap_xeth_eth_pair","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"whitelistFrom(address)","name":"whitelistFrom","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"xETHAddress()","name":"xETHAddress","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}