{
  "schema": "../schema.json",
  "tags": [
    "strategies",
    "yield"
  ],
  "name": "Pool",
  "description": "GoodGhosting V2 Hodl Contract. Allows users to join a pool with a yield bearing strategy, the winners get interest and rewards, losers get their principal back.",
  "eventDecorators": [
    {
      "signature": "AdminFee(uint256[])",
      "name": "AdminFee",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "adminFeeAmounts",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AdminWithdrawal(address,uint256,uint256,uint256[])",
      "name": "AdminWithdrawal",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "totalGameInterest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "adminIncentiveAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "adminFeeAmounts",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Deposit(address,uint256,uint256,uint256)",
      "name": "Deposit",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "segment",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "netAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EarlyWithdrawal(address,uint256,uint256,uint256)",
      "name": "EarlyWithdrawal",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalGamePrincipal",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "netTotalGamePrincipal",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EndGameStats(uint256,uint256,uint256,uint256,uint256[],uint256,uint256)",
      "name": "EndGameStats",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "totalBalance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalGamePrincipal",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "netTotalGamePricipal",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "grossInterest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "grossRewardTokenAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalIncentiveAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "impermanentLossShare",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundsRedeemedFromExternalPool(uint256,uint256,uint256,uint256,uint256,uint256[])",
      "name": "FundsRedeemedFromExternalPool",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "totalAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalGamePrincipal",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "netTotalGamePrincipal",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalGameInterest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalIncentiveAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalRewardAmounts",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "JoinedGame(address,uint256,uint256)",
      "name": "JoinedGame",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "netAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VariablePoolParamsSet(uint256,uint256,uint256,uint256,uint256[])",
      "name": "VariablePoolParamsSet",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "totalGamePrincipal",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "netTotalGamePrincipal",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalGameInterest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalIncentiveAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "totalRewardAmounts",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdrawal(address,uint256,uint256,uint256[])",
      "name": "Withdrawal",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "player",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "playerIncentive",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "playerRewardAmounts",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MULTIPLIER()",
      "name": "MULTIPLIER",
      "description": "Multiplier used for calculating playerIndex to avoid precision issues.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "activePlayersCount()",
      "name": "activePlayersCount",
      "description": "Controls the amount of active players in the game (ignores players that early withdraw).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminFee()",
      "name": "adminFee",
      "description": "The performance admin fee (percentage).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminFeeAmount(uint256)",
      "name": "adminFeeAmount",
      "description": "performance fee amount allocated to the admin.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminFeeWithdraw(uint256)",
      "name": "adminFeeWithdraw",
      "description": "Allows the admin to withdraw the performance fee, if applicable. This function can be called only by the contract's admin. Cannot be called before the game ends.",
      "parameterDecorators": [
        {
          "name": "_minAmount",
          "description": "Slippage based amount to cover for impermanent loss scenario.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "adminWithdraw()",
      "name": "adminWithdraw",
      "description": "controls if admin withdrew or not the performance fee.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "allowRenouncingOwnership()",
      "name": "allowRenouncingOwnership",
      "description": "Ownership Control flag.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cumulativePlayerIndexSum(uint256)",
      "name": "cumulativePlayerIndexSum",
      "description": "Stores info of cumulativePlayerIndexSum for each segment for early exit scenario.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositCount()",
      "name": "depositCount",
      "description": "The number of segments in the game (segment count).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "disableClaimingRewardTokens()",
      "name": "disableClaimingRewardTokens",
      "description": "Disable claiming reward tokens for emergency scenarios, like when external reward contracts become inactive or rewards funds aren't available, allowing users to withdraw principal + interest from contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disableRewardTokenClaim()",
      "name": "disableRewardTokenClaim",
      "description": "Controls if reward tokens are to be claimed at the time of redeem.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "earlyWithdraw(uint256)",
      "name": "earlyWithdraw",
      "description": "Allows a player to withdraw funds before the game ends. An early withdrawal fee is charged.",
      "parameterDecorators": [
        {
          "name": "_minAmount",
          "description": "Slippage based amount to cover for impermanent loss scenario in case of a amm strategy like curve or mobius.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "earlyWithdrawalFee()",
      "name": "earlyWithdrawalFee",
      "description": "The early withdrawal fee (percentage).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "emergencyWithdraw()",
      "name": "emergencyWithdraw",
      "description": "emaergency withdraw flag.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "enableEmergencyWithdraw()",
      "name": "enableEmergencyWithdraw",
      "description": "Enable early game completion in case of a emergency like the strategy contract becomes inactive in the midddle of the game etc. // Once enabled players can withdraw their funds along with interest for winners.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "firstSegmentStart()",
      "name": "firstSegmentStart",
      "description": "When the game started (game initialized timestamp).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "flexibleSegmentPayment()",
      "name": "flexibleSegmentPayment",
      "description": "Flag which determines whether the segment payment is fixed or not.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentSegment()",
      "name": "getCurrentSegment",
      "description": "Calculates the current segment of the game.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "current game segment.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNumberOfPlayers()",
      "name": "getNumberOfPlayers",
      "description": "gets the number of players in the game.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "number of players.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "impermanentLossShare()",
      "name": "impermanentLossShare",
      "description": "share % from impermanent loss.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "inboundToken()",
      "name": "inboundToken",
      "description": "Address of the token used for depositing into the game by players.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "incentiveToken()",
      "name": "incentiveToken",
      "description": "Defines an optional token address used to provide additional incentives to users. Accepts \"0x0\" adresses when no incentive token exists.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initializes the pool.",
      "parameterDecorators": [
        {
          "name": "_incentiveToken",
          "description": "Incentive token address (optional to set).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isGameCompleted()",
      "name": "isGameCompleted",
      "description": "Checks if the game is completed or not.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "\"true\" if completeted; otherwise, \"false\".",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isInitialized()",
      "name": "isInitialized",
      "description": "Checks if the game has been initialized or not.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isTransactionalToken()",
      "name": "isTransactionalToken",
      "description": "Flag which determines whether the deposit token is a transactional token like eth or matic (blockchain native token, not ERC20).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isWinner(address)",
      "name": "isWinner",
      "description": "Checks if player is a winner.",
      "parameterDecorators": [
        {
          "name": "_player",
          "description": "player address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "\"true\" if player is a winner; otherwise, return \"false\".",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "iterablePlayers(uint256)",
      "name": "iterablePlayers",
      "description": "list of players.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "joinGame(uint256,uint256)",
      "name": "joinGame",
      "description": "Allows a player to join the game/pool by makking the first deposit.",
      "parameterDecorators": [
        {
          "name": "_minAmount",
          "description": "Slippage based amount to cover for impermanent loss scenario.",
          "recommendedTypes": []
        },
        {
          "name": "_depositAmount",
          "description": "Variable Deposit Amount in case of a variable deposit pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lowerEarlyWithdrawFees(uint128)",
      "name": "lowerEarlyWithdrawFees",
      "description": "Allows admin to set a lower early withdrawal fee.",
      "parameterDecorators": [
        {
          "name": "_newEarlyWithdrawFees",
          "description": "New earlywithdrawal fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "makeDeposit(uint256,uint256)",
      "name": "makeDeposit",
      "description": "Allows players to make deposits for the game segments, after joining the game.",
      "parameterDecorators": [
        {
          "name": "_minAmount",
          "description": "Slippage based amount to cover for impermanent loss scenario.",
          "recommendedTypes": []
        },
        {
          "name": "_depositAmount",
          "description": "Variable Deposit Amount in case of a variable deposit pool.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "maxFlexibleSegmentPaymentAmount()",
      "name": "maxFlexibleSegmentPaymentAmount",
      "description": "Maximum Flexible Deposit Amount in case of flexible pools.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxPlayersCount()",
      "name": "maxPlayersCount",
      "description": "Defines the max quantity of players allowed in the game.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "netTotalGamePrincipal()",
      "name": "netTotalGamePrincipal",
      "description": "net total principal amount to reduce the slippage imapct from amm strategies.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "pauses the game. This function can be called only by the contract's admin.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "playerIndex(address,uint256)",
      "name": "playerIndex",
      "description": "Stores info about the player index which is used to determine the share of interest of each winner.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "players(address)",
      "name": "players",
      "description": "Stores info about the players in the game.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "withdrawn",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "canRejoin",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "isWinner",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "addr",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "withdrawalSegment",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "mostRecentSegmentPaid",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "amountPaid",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "netAmountPaid",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "depositAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redeemFromExternalPoolForFixedDepositPool(uint256)",
      "name": "redeemFromExternalPoolForFixedDepositPool",
      "description": "Redeems funds from the external pool and updates the game stats.",
      "parameterDecorators": [
        {
          "name": "_minAmount",
          "description": "Slippage based amount to cover for impermanent loss scenario.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "redeemed()",
      "name": "redeemed",
      "description": "Controls if tokens were redeemed or not from the pool.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Renounces Ownership.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewardTokenAmounts(uint256)",
      "name": "rewardTokenAmounts",
      "description": "total rewardTokenAmounts.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardTokens(uint256)",
      "name": "rewardTokens",
      "description": "address of additional reward token accured from investing via different strategies like wmatic.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "segmentCounter(uint256)",
      "name": "segmentCounter",
      "description": "Stores info of the segment counter needed for ui as backup for graph.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "segmentLength()",
      "name": "segmentLength",
      "description": "The time duration (in seconds) of each segment.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "segmentPayment()",
      "name": "segmentPayment",
      "description": "The amount to be paid on each segment in case \"flexibleSegmentPayment\" is false (fixed payments).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setIncentiveToken(address)",
      "name": "setIncentiveToken",
      "description": "Set's the incentive token address.",
      "parameterDecorators": [
        {
          "name": "_incentiveToken",
          "description": "Incentive token address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "strategy()",
      "name": "strategy",
      "description": "Strategy Contract Address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalGameInterest()",
      "name": "totalGameInterest",
      "description": "Stores the total amount of net interest received in the game.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalGamePrincipal()",
      "name": "totalGamePrincipal",
      "description": "total principal amount only used to keep a track of the gross deposits.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalIncentiveAmount()",
      "name": "totalIncentiveAmount",
      "description": "total amount of incentive tokens to be distributed among winners.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unlockRenounceOwnership()",
      "name": "unlockRenounceOwnership",
      "description": "Unlocks renounceOwnership.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "unpauses the game. This function can be called only by the contract's admin.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "waitingRoundSegmentLength()",
      "name": "waitingRoundSegmentLength",
      "description": "The time duration (in seconds) of last segment (waiting round).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "waitingRoundSegmentStart()",
      "name": "waitingRoundSegmentStart",
      "description": "Timestamp when the waiting segment starts.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "winnerCount()",
      "name": "winnerCount",
      "description": "winner counter to track no of winners.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Allows player to withdraw their funds after the game ends with no loss (fee). Winners get a share of the interest earned & additional rewards based on the player index.",
      "parameterDecorators": [
        {
          "name": "_minAmount",
          "description": "Slippage based amount to cover for impermanent loss scenario in case of a amm strategy like curve or mobius.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}