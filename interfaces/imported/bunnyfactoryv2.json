{
  "schema": "../schema.json",
  "tags": [],
  "name": "BunnyFactoryV2",
  "description": "",
  "eventDecorators": [
    {
      "signature": "BunnyMint(address,uint256,uint8)",
      "name": "BunnyMint",
      "description": "",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "bunnyId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "cakeToken()",
      "name": "cakeToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "changeOwnershipNFTContract(address)",
      "name": "changeOwnershipNFTContract",
      "description": "It transfers the ownership of the NFT contract to a new address.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimFee(uint256)",
      "name": "claimFee",
      "description": "It transfers the CAKE tokens back to the chef address. Only callable by the owner.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "endBlockNumber()",
      "name": "endBlockNumber",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasClaimed(address)",
      "name": "hasClaimed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintNFT(uint8)",
      "name": "mintNFT",
      "description": "Mint NFTs from the PancakeBunnies contract. Users can specify what bunnyId they want to mint. Users can claim once. There is a limit on how many are distributed. It requires CAKE balance to be > 0.",
      "parameterDecorators": [
        {
          "name": "_bunnyId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pancakeBunnies()",
      "name": "pancakeBunnies",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBunnyJson(string,string,string,string,string)",
      "name": "setBunnyJson",
      "description": "Set up json extensions for bunnies 5-9 Assign tokenURI to look for each bunnyId in the mint function Only the owner can set it.",
      "parameterDecorators": [
        {
          "name": "_bunnyId5Json",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bunnyId6Json",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bunnyId7Json",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bunnyId8Json",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bunnyId9Json",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBunnyNames(string,string,string,string,string)",
      "name": "setBunnyNames",
      "description": "Set up names for bunnies 5-9 Only the owner can set it.",
      "parameterDecorators": [
        {
          "name": "_bunnyId5",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bunnyId6",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bunnyId7",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bunnyId8",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bunnyId9",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setEndBlockNumber(uint256)",
      "name": "setEndBlockNumber",
      "description": "Allow to set up the end block number Only the owner can set it.",
      "parameterDecorators": [
        {
          "name": "_newEndBlockNumber",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStartBlockNumber(uint256)",
      "name": "setStartBlockNumber",
      "description": "Allow to set up the start number Only the owner can set it.",
      "parameterDecorators": [
        {
          "name": "_newStartBlockNumber",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "startBlockNumber()",
      "name": "startBlockNumber",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenPrice()",
      "name": "tokenPrice",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateTokenPrice(uint256)",
      "name": "updateTokenPrice",
      "description": "Allow to change the token price Only the owner can set it.",
      "parameterDecorators": [
        {
          "name": "_newTokenPrice",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}