{
  "schema": "../schema.json",
  "tags": [],
  "name": "RandomNumberConsumer",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "fulfillRandomness(bytes32,uint256)",
      "name": "fulfillRandomness",
      "description": "Callback function used by VRF Coordinator.",
      "parameterDecorators": [
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "randomness",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRandom(uint256,uint256)",
      "name": "getRandom",
      "description": "Requests randomness from a user-provided seed.",
      "parameterDecorators": [
        {
          "name": "userProvidedSeed",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "lotteryId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "governance()",
      "name": "governance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "most_recent_random()",
      "name": "most_recent_random",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nonces(bytes32)",
      "name": "nonces",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "randomNumber(uint256)",
      "name": "randomNumber",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "requestIds(bytes32)",
      "name": "requestIds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "requestRandomness(bytes32,uint256,uint256)",
      "name": "requestRandomness",
      "description": "requestRandomness initiates a request for VRF output given _seed. The source of the seed data must be something which the oraclecannot anticipate. See \"SECURITY CONSIDERATIONS\" above. The fulfillRandomness method receives the output, once it's providedby the Oracle, and verified by the vrfCoordinator. The _keyHash must already be registered with the VRFCoordinator, andthe _fee must exceed the fee specified during registration of the_keyHash. The returned requestId can be used to distinguish responses to *concurrent requests. It is passed as the first argument tofulfillRandomness.",
      "parameterDecorators": [
        {
          "name": "_keyHash",
          "description": "ID of public key against which randomness is generated.",
          "recommendedTypes": []
        },
        {
          "name": "_fee",
          "description": "The amount of LINK to send with the request.",
          "recommendedTypes": []
        },
        {
          "name": "_seed",
          "description": "Random seed from which output randomness is determined.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "requestId",
          "description": "which will be returned with the response to this request.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}