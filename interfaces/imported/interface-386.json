{"schema":"../schema.json","tags":[],"name":"AlchemistTradingRegistrar","description":"AlchemistTradingRegistrar Contract which is responsible to register all actions of trades between entities in exchange.","eventDecorators":[{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"Emits when owner take ETH out of contract.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"Emits when owner take ETH out of contract.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"Emits when owner take ETH out of contract.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Trade(bytes32,bytes32,bytes32,bytes32,bytes32,uint256,uint256,uint256,uint256,bytes32,bytes32)","name":"Trade","description":"Emits when owner take ETH out of contract.","parameterDecorators":[{"name":"tradeId","description":"","recommendedTypes":[],"indexed":true},{"name":"buyerId","description":"","recommendedTypes":[],"indexed":true},{"name":"buyerOrderId","description":"","recommendedTypes":[],"indexed":false},{"name":"sellerId","description":"","recommendedTypes":[],"indexed":true},{"name":"sellerOrderId","description":"","recommendedTypes":[],"indexed":false},{"name":"size","description":"","recommendedTypes":[],"indexed":false},{"name":"price","description":"","recommendedTypes":[],"indexed":false},{"name":"buyCommission","description":"","recommendedTypes":[],"indexed":false},{"name":"sellCommission","description":"","recommendedTypes":[],"indexed":false},{"name":"ticker","description":"","recommendedTypes":[],"indexed":false},{"name":"currency","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"TRADE_OPERATOR_ROLE()","name":"TRADE_OPERATOR_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"UUID_ALCHEMIST()","name":"UUID_ALCHEMIST","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"changeStorage(address)","name":"changeStorage","description":"Constructor determines trading registrar parameters.","parameterDecorators":[{"name":"balancesStorageContract","description":"- Address of contract with storage for balances.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getDefaultToken()","name":"getDefaultToken","description":"Get default token value.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getSha3(string)","name":"getSha3","description":"Pure function to get hash value from string.","parameterDecorators":[{"name":"str","description":"String to convert.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"return keccak256 hash from encode string.","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getTotalOrders()","name":"getTotalOrders","description":"Get total number of orders.","parameterDecorators":[],"returnDecorators":[{"name":"_total","description":"- counter value of all orders.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTotalTrades()","name":"getTotalTrades","description":"Get total number of trades.","parameterDecorators":[],"returnDecorators":[{"name":"_total","description":"- counter value of all trades.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTradeById(string)","name":"getTradeById","description":"Get trade by id.","parameterDecorators":[{"name":"tradeId","description":"- in string format.","recommendedTypes":[]}],"returnDecorators":[{"name":"_buyerId","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_buyerOrderId","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_price","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_buyCommission","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_currency","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_sellerId","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_sellerOrderId","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_size","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_sellCommission","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_ticker","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_exist","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getTradeBySha3Id(bytes32)","name":"getTradeBySha3Id","description":"Get trade by id.","parameterDecorators":[{"name":"tradeId","description":"- in hash format.","recommendedTypes":[]}],"returnDecorators":[{"name":"_buyerId","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_buyerOrderId","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_price","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_buyCommission","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_currency","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_sellerId","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_sellerOrderId","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_size","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_sellCommission","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"_ticker","description":"","recommendedTypes":[],"solidityType":"bytes32"},{"name":"_exist","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getTradesFromHashOrderId(bytes32)","name":"getTradesFromHashOrderId","description":"Get trades by hash of order id.","parameterDecorators":[{"name":"orderId","description":"- hash of order id.","recommendedTypes":[]}],"returnDecorators":[{"name":"_trades","description":"- returns tradesIds[].","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getTradesFromOrderId(string)","name":"getTradesFromOrderId","description":"Get trades by order uuid.","parameterDecorators":[{"name":"orderId","description":"- order id in string format from api.","recommendedTypes":[]}],"returnDecorators":[{"name":"_trades","description":"- returns tradesIds[].","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getUserOrders(string)","name":"getUserOrders","description":"Get trades by trader id as string.","parameterDecorators":[{"name":"trader","description":"- trader bytes32.","recommendedTypes":[]}],"returnDecorators":[{"name":"_orders","description":"- returns ordersIds[].","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getUserOrdersFromHashId(bytes32)","name":"getUserOrdersFromHashId","description":"Get trades by trader bytes32.","parameterDecorators":[{"name":"trader","description":"- trader bytes32.","recommendedTypes":[]}],"returnDecorators":[{"name":"_orders","description":"- returns ordersIds[].","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getUserTrades(bytes32)","name":"getUserTrades","description":"Get trades by trader bytes32.","parameterDecorators":[{"name":"trader","description":"- trader bytes32.","recommendedTypes":[]}],"returnDecorators":[{"name":"_trades","description":"- returns tradesIds[].","recommendedTypes":[],"solidityType":"bytes32[]"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"placeTrade(bytes32[],uint256[],uint256)","name":"placeTrade","description":"Place Trade.","parameterDecorators":[{"name":"_tradeZip32","description":"- zipped format for data of type bytes32 (0 => tradeId, 1 => buyerOrderId, 2 => sellerOrderId, 3 => ticker, 4 => token, 5 => UUID_BUYER, 6 => UUID_SELLER).","recommendedTypes":[]},{"name":"_tradeZipUint256","description":"- zipped format for data of type uint256 (0 => _price, 1 => _size, 2 => _buyCommission, 3 => sellCommission).","recommendedTypes":[]},{"name":"_acknowledgedAt","description":"- timestamp of trade.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"renounceRole()","name":"renounceRole","description":"Renounce role of balance operator.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"stringToBytes(string)","name":"stringToBytes","description":"Pure function to get bytes from string.","parameterDecorators":[{"name":"str","description":"String to convert.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"return bytes conversion from string memory.","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true}]}