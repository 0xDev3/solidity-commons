{
  "schema": "../schema.json",
  "tags": [],
  "name": "SingleAssetStaking",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Staked(address,uint256)",
      "name": "Staked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Withdrawn(address,uint256)",
      "name": "Withdrawn",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Paused(address,bool)",
      "name": "Paused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "yes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewDurations(address,uint256[])",
      "name": "NewDurations",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "durations",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewRates(address,uint256[])",
      "name": "NewRates",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "rates",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewAirDropRootHash(uint8,bytes32,uint256)",
      "name": "NewAirDropRootHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PendingGovernorshipTransfer(address,address)",
      "name": "PendingGovernorshipTransfer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "GovernorshipTransferred(address,address)",
      "name": "GovernorshipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newGovernor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "getAllStakes(address)",
      "name": "getAllStakes",
      "description": "Return all the stakes paid and unpaid for a given user.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Address of the account that we want to look up.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "end",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "duration",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "rate",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint240"
            },
            {
              "name": "paid",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bool"
            },
            {
              "name": "stakeType",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint8"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "governor()",
      "name": "governor",
      "description": "Returns the address of the current Governor.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalOutstanding()",
      "name": "totalOutstanding",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setPaused(bool)",
      "name": "setPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_paused",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDurationRates(uint256[],uint256[])",
      "name": "setDurationRates",
      "description": "Set new durations and rates will not effect existing stakes.",
      "parameterDecorators": [
        {
          "name": "_durations",
          "description": "Array of durations in seconds.",
          "recommendedTypes": []
        },
        {
          "name": "_rates",
          "description": "Array of rates that corresponds to the durations (0.01 is 1%) in 1e18.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAirDropRoot(uint8,bytes32,uint256)",
      "name": "setAirDropRoot",
      "description": "Set air drop root for a specific stake type.",
      "parameterDecorators": [
        {
          "name": "_stakeType",
          "description": "Type of staking must be greater than 0.",
          "recommendedTypes": []
        },
        {
          "name": "_rootHash",
          "description": "Root hash of the Merkle Tree.",
          "recommendedTypes": []
        },
        {
          "name": "_proofDepth",
          "description": "Depth of the Merklke Tree.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "airDroppedStake(uint256,uint8,uint256,uint256,uint256,bytes32[])",
      "name": "airDroppedStake",
      "description": "Make a preapproved stake for the user, this is a presigned voucher that the user can redeem either from an airdrop or a compensation program. Only 1 of each type is allowed per user. The proof must match the root hash.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "Number that is zero base index of the stake in the payout entry.",
          "recommendedTypes": []
        },
        {
          "name": "stakeType",
          "description": "Number that represent the type of the stake, must not be 0 which is user stake.",
          "recommendedTypes": []
        },
        {
          "name": "duration",
          "description": "Number of seconds this stake will be held for.",
          "recommendedTypes": []
        },
        {
          "name": "rate",
          "description": "Rate(0.3 is 30%) of reward for this stake in 1e18, uint240 to fit the bool and type in struct Stake.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Number of tokens to stake in 1e18.",
          "recommendedTypes": []
        },
        {
          "name": "merkleProof",
          "description": "Array of proofs for that amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimGovernance()",
      "name": "claimGovernance",
      "description": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakingToken()",
      "name": "stakingToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stake(uint256,uint256)",
      "name": "stake",
      "description": "Stake an approved amount of staking token into the contract. User must have already approved the contract for specified amount.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Number of tokens to stake in 1e18.",
          "recommendedTypes": []
        },
        {
          "name": "duration",
          "description": "Number of seconds this stake will be held for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "durationRewardRate(uint256)",
      "name": "durationRewardRate",
      "description": "Find the rate that corresponds to a given duration.",
      "parameterDecorators": [
        {
          "name": "_duration",
          "description": "Number of seconds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalCurrentHoldings(address)",
      "name": "totalCurrentHoldings",
      "description": "Calculate all current holdings of a user: staked value + prorated rewards.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Address of the account that we want to look up.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "total",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalStaked(address)",
      "name": "totalStaked",
      "description": "Calculate all the staked value a user has put into the contract, rewards not included.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Address of the account that we want to look up.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "total",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "airDroppedStakeClaimed(address,uint8)",
      "name": "airDroppedStakeClaimed",
      "description": "Has the airdropped stake already been claimed.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "stakeType",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "userStakes(address,uint256)",
      "name": "userStakes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "end",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "duration",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint240"
        },
        {
          "name": "paid",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "stakeType",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "durations(uint256)",
      "name": "durations",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllDurations()",
      "name": "getAllDurations",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isGovernor()",
      "name": "isGovernor",
      "description": "Returns true if the caller is the current Governor.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferGovernance(address)",
      "name": "transferGovernance",
      "description": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete.",
      "parameterDecorators": [
        {
          "name": "_newGovernor",
          "description": "Address of the new Governor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rates(uint256)",
      "name": "rates",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dropRoots(uint8)",
      "name": "dropRoots",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "depth",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,uint256[],uint256[])",
      "name": "initialize",
      "description": "Initialize the contracts, sets up durations, rates, and preApprover for preApproved contracts can only be called once.",
      "parameterDecorators": [
        {
          "name": "_stakingToken",
          "description": "Address of the token that we are staking.",
          "recommendedTypes": []
        },
        {
          "name": "_durations",
          "description": "Array of allowed durations in seconds.",
          "recommendedTypes": []
        },
        {
          "name": "_rates",
          "description": "Array of rates(0.3 is 30%) that correspond to the allowed durations in 1e18 precision.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exit()",
      "name": "exit",
      "description": "Exit out of all possible stakes.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalExpectedRewards(address)",
      "name": "totalExpectedRewards",
      "description": "Calculate all the rewards a user can expect to receive.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Address of the account that we want to look up.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllRates()",
      "name": "getAllRates",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}