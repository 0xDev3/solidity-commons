{
  "schema": "../schema.json",
  "tags": [
    "oracles"
  ],
  "name": "PriceOracleResolver",
  "description": "PriceOracleResolver. Can be used to: - Query oracle address for Gelato Condition payloads on frontend - Test Conditions by using `getMockPrice(address _test)` as `oraclePayload`. Contract with convenience methods to retrieve oracle addresses or to mock test.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "deprecated, backward compatibility, use `ConverterAnchorRemoved`.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addOracle(string,address,bytes)",
      "name": "addOracle",
      "description": "Adds a new Oracle address. Only owner can call this, but existing oracle entries are immutable.",
      "parameterDecorators": [
        {
          "name": "_oracle",
          "description": "The descriptor of the oracle e.g. ETH/USD-Maker-v1.",
          "recommendedTypes": []
        },
        {
          "name": "_oracleAddress",
          "description": "The address of the oracle contract.",
          "recommendedTypes": []
        },
        {
          "name": "_oraclePayload",
          "description": "The payload with function selector for the oracle request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getMockPrice(address)",
      "name": "getMockPrice",
      "description": "Use with setMockPrice for easy testing in production. Encode oracle=PriceOracleResolver and oraclePayload=getMockPrice(tester) to test your Conditions or Actions that make dynamic calls to price oracles.",
      "parameterDecorators": [
        {
          "name": "_tester",
          "description": "The msg.sender during setMockPrice.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The tester's mockPrice.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPrice(string)",
      "name": "getPrice",
      "description": "A generelized getter for a price supplied by an oracle contract. The oracle returndata must be formatted as a single uint256.",
      "parameterDecorators": [
        {
          "name": "_oracle",
          "description": "The descriptor of our oracle e.g. ETH/USD-Maker-v1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The uint256 oracle price.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mockPrice(address)",
      "name": "mockPrice",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oracle(string)",
      "name": "oracle",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "oraclePayload(string)",
      "name": "oraclePayload",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMockPrice(uint256)",
      "name": "setMockPrice",
      "description": "Function that allows easy oracle data testing in production. Your mock prices cannot be overriden by someone else.",
      "parameterDecorators": [
        {
          "name": "_mockPrice",
          "description": "The mock data you want to test against.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}