{
  "schema": "../schema.json",
  "tags": [
    "staking"
  ],
  "name": "Staking",
  "description": "Staking contract. The Staking contract allows Indexers to Stake on Subgraphs. Indexers Stake by creating Allocations on a Subgraph. It also allows Delegators to Delegate towards an Indexer. The contract also has the slashing functionality.",
  "eventDecorators": [
    {
      "signature": "AllocationClosed(address,bytes32,uint256,uint256,address,uint256,address,bytes32,bool)",
      "name": "AllocationClosed",
      "description": "Emitted when `indexer` close an allocation in `epoch` for `allocationID`. An amount of `tokens` get unallocated from `subgraphDeploymentID`. The `effectiveAllocation` are the tokens allocated from creation to closing. This event also emits the POI (proof of indexing) submitted by the indexer. `isPublic` is true if the sender was someone other than the indexer.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "allocationID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "effectiveAllocation",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "poi",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "isPublic",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AllocationCollected(address,bytes32,uint256,uint256,address,address,uint256,uint256)",
      "name": "AllocationCollected",
      "description": "Emitted when `indexer` collected `tokens` amount in `epoch` for `allocationID`. These funds are related to `subgraphDeploymentID`. The `from` value is the sender of the collected funds.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "allocationID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "curationFees",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rebateFees",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AllocationCreated(address,bytes32,uint256,uint256,address,bytes32)",
      "name": "AllocationCreated",
      "description": "Emitted when `indexer` allocated `tokens` amount to `subgraphDeploymentID` during `epoch`. `allocationID` indexer derived address used to identify the allocation. `metadata` additional information related to the allocation.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "allocationID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "metadata",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AssetHolderUpdate(address,address,bool)",
      "name": "AssetHolderUpdate",
      "description": "Emitted when `caller` set `assetHolder` address as `allowed` to send funds to staking contract.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "assetHolder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allowed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ContractSynced(bytes32,address)",
      "name": "ContractSynced",
      "description": "",
      "parameterDecorators": [
        {
          "name": "nameHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "contractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DelegationParametersUpdated(address,uint32,uint32,uint32)",
      "name": "DelegationParametersUpdated",
      "description": "Emitted when `indexer` update the delegation parameters for its delegation pool.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "indexingRewardCut",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "queryFeeCut",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "cooldownBlocks",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ParameterUpdated(string)",
      "name": "ParameterUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RebateClaimed(address,bytes32,address,uint256,uint256,uint256,uint256,uint256)",
      "name": "RebateClaimed",
      "description": "Emitted when `indexer` claimed a rebate on `subgraphDeploymentID` during `epoch` related to the `forEpoch` rebate pool. The rebate is for `tokens` amount and `unclaimedAllocationsCount` are left for claim in the rebate pool. `delegationFees` collected and sent to delegation pool.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allocationID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "forEpoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "unclaimedAllocationsCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "delegationFees",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetController(address)",
      "name": "SetController",
      "description": "",
      "parameterDecorators": [
        {
          "name": "controller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetOperator(address,address,bool)",
      "name": "SetOperator",
      "description": "Emitted when `indexer` set `operator` access.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allowed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetRewardsDestination(address,address)",
      "name": "SetRewardsDestination",
      "description": "Emitted when `indexer` set an address to receive rewards.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "destination",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SlasherUpdate(address,address,bool)",
      "name": "SlasherUpdate",
      "description": "Emitted when `caller` set `slasher` address as `allowed` to slash stakes.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "slasher",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allowed",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakeDelegated(address,address,uint256,uint256)",
      "name": "StakeDelegated",
      "description": "Emitted when `delegator` delegated `tokens` to the `indexer`, the delegator gets `shares` for the delegation pool proportionally to the tokens staked.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "delegator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "shares",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakeDelegatedLocked(address,address,uint256,uint256,uint256)",
      "name": "StakeDelegatedLocked",
      "description": "Emitted when `delegator` undelegated `tokens` from `indexer`. Tokens get locked for withdrawal after a period of time.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "delegator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "shares",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "until",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakeDelegatedWithdrawn(address,address,uint256)",
      "name": "StakeDelegatedWithdrawn",
      "description": "Emitted when `delegator` withdrew delegated `tokens` from `indexer`.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "delegator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakeDeposited(address,uint256)",
      "name": "StakeDeposited",
      "description": "Emitted when `indexer` stake `tokens` amount.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakeLocked(address,uint256,uint256)",
      "name": "StakeLocked",
      "description": "Emitted when `indexer` unstaked and locked `tokens` amount `until` block.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "until",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakeSlashed(address,uint256,uint256,address)",
      "name": "StakeSlashed",
      "description": "Emitted when `indexer` was slashed for a total of `tokens` amount. Tracks `reward` amount of tokens given to `beneficiary`.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "StakeWithdrawn(address,uint256)",
      "name": "StakeWithdrawn",
      "description": "Emitted when `indexer` withdrew `tokens` staked.",
      "parameterDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptProxy(address)",
      "name": "acceptProxy",
      "description": "Accept to be an implementation of proxy.",
      "parameterDecorators": [
        {
          "name": "_proxy",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "acceptProxyAndCall(address,bytes)",
      "name": "acceptProxyAndCall",
      "description": "Accept to be an implementation of proxy and then call a function from the new implementation as specified by `_data`, which should be an encoded function call. This is useful to initialize new storage variables in the proxied contract.",
      "parameterDecorators": [
        {
          "name": "_proxy",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "allocate(bytes32,uint256,address,bytes32,bytes)",
      "name": "allocate",
      "description": "Allocate available tokens to a subgraph deployment.",
      "parameterDecorators": [
        {
          "name": "_subgraphDeploymentID",
          "description": "ID of the SubgraphDeployment where tokens will be allocated.",
          "recommendedTypes": []
        },
        {
          "name": "_tokens",
          "description": "Amount of tokens to allocate.",
          "recommendedTypes": []
        },
        {
          "name": "_allocationID",
          "description": "The allocation identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_metadata",
          "description": "IPFS hash for additional information about the allocation.",
          "recommendedTypes": []
        },
        {
          "name": "_proof",
          "description": "A 65-bytes Ethereum signed message of `keccak256(indexerAddress,allocationID)`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "allocateFrom(address,bytes32,uint256,address,bytes32,bytes)",
      "name": "allocateFrom",
      "description": "Allocate available tokens to a subgraph deployment.",
      "parameterDecorators": [
        {
          "name": "_indexer",
          "description": "Indexer address to allocate funds from.",
          "recommendedTypes": []
        },
        {
          "name": "_subgraphDeploymentID",
          "description": "ID of the SubgraphDeployment where tokens will be allocated.",
          "recommendedTypes": []
        },
        {
          "name": "_tokens",
          "description": "Amount of tokens to allocate.",
          "recommendedTypes": []
        },
        {
          "name": "_allocationID",
          "description": "The allocation identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_metadata",
          "description": "IPFS hash for additional information about the allocation.",
          "recommendedTypes": []
        },
        {
          "name": "_proof",
          "description": "A 65-bytes Ethereum signed message of `keccak256(indexerAddress,allocationID)`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "allocations(address)",
      "name": "allocations",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "indexer",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "subgraphDeploymentID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "createdAtEpoch",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "closedAtEpoch",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "collectedFees",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "effectiveAllocation",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "accRewardsPerAllocatedToken",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "alphaDenominator()",
      "name": "alphaDenominator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "alphaNumerator()",
      "name": "alphaNumerator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetHolders(address)",
      "name": "assetHolders",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "channelDisputeEpochs()",
      "name": "channelDisputeEpochs",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claim(address,bool)",
      "name": "claim",
      "description": "Claim tokens from the rebate pool.",
      "parameterDecorators": [
        {
          "name": "_allocationID",
          "description": "Allocation from where we are claiming tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_restake",
          "description": "True if restake fees instead of transfer to indexer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimMany(address[],bool)",
      "name": "claimMany",
      "description": "Claim tokens from the rebate pool for many allocations.",
      "parameterDecorators": [
        {
          "name": "_allocationID",
          "description": "Array of allocations from where we are claiming tokens.",
          "recommendedTypes": []
        },
        {
          "name": "_restake",
          "description": "True if restake fees instead of transfer to indexer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "closeAllocation(address,bytes32)",
      "name": "closeAllocation",
      "description": "Close an allocation and free the staked tokens. To be eligible for rewards a proof of indexing must be presented. Presenting a bad proof is subject to slashable condition. To opt out for rewards set _poi to 0x0.",
      "parameterDecorators": [
        {
          "name": "_allocationID",
          "description": "The allocation identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_poi",
          "description": "Proof of indexing submitted for the allocated period.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "closeAllocationMany(tuple(address,bytes32)[])",
      "name": "closeAllocationMany",
      "description": "Close multiple allocations and free the staked tokens. To be eligible for rewards a proof of indexing must be presented. Presenting a bad proof is subject to slashable condition. To opt out for rewards set _poi to 0x0.",
      "parameterDecorators": [
        {
          "name": "_requests",
          "description": "An array of CloseAllocationRequest.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "allocationID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "poi",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "closeAndAllocate(address,bytes32,address,bytes32,uint256,address,bytes32,bytes)",
      "name": "closeAndAllocate",
      "description": "Close and allocate. This will perform a close and then create a new Allocation atomically on the same transaction.",
      "parameterDecorators": [
        {
          "name": "_closingAllocationID",
          "description": "The identifier of the allocation to be closed.",
          "recommendedTypes": []
        },
        {
          "name": "_poi",
          "description": "Proof of indexing submitted for the allocated period.",
          "recommendedTypes": []
        },
        {
          "name": "_indexer",
          "description": "Indexer address to allocate funds from.",
          "recommendedTypes": []
        },
        {
          "name": "_subgraphDeploymentID",
          "description": "ID of the SubgraphDeployment where tokens will be allocated.",
          "recommendedTypes": []
        },
        {
          "name": "_tokens",
          "description": "Amount of tokens to allocate.",
          "recommendedTypes": []
        },
        {
          "name": "_allocationID",
          "description": "The allocation identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_metadata",
          "description": "IPFS hash for additional information about the allocation.",
          "recommendedTypes": []
        },
        {
          "name": "_proof",
          "description": "A 65-bytes Ethereum signed message of `keccak256(indexerAddress,allocationID)`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collect(uint256,address)",
      "name": "collect",
      "description": "Collect query fees from state channels and assign them to an allocation. Funds received are only accepted from a valid sender. To avoid reverting on the withdrawal from channel flow this function will: 1) Accept calls with zero tokens. 2) Accept calls after an allocation passed the dispute period, in that case, all the received tokens are burned.",
      "parameterDecorators": [
        {
          "name": "_tokens",
          "description": "Amount of tokens to collect.",
          "recommendedTypes": []
        },
        {
          "name": "_allocationID",
          "description": "Allocation where the tokens will be assigned.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "curationPercentage()",
      "name": "curationPercentage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delegate(address,uint256)",
      "name": "delegate",
      "description": "Delegate tokens to an indexer.",
      "parameterDecorators": [
        {
          "name": "_indexer",
          "description": "Address of the indexer to delegate tokens to.",
          "recommendedTypes": []
        },
        {
          "name": "_tokens",
          "description": "Amount of tokens to delegate.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of shares issued of the delegation pool.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "delegationParametersCooldown()",
      "name": "delegationParametersCooldown",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delegationPools(address)",
      "name": "delegationPools",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "cooldownBlocks",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "indexingRewardCut",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "queryFeeCut",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "updatedAtBlock",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "tokens",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "shares",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delegationRatio()",
      "name": "delegationRatio",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delegationTaxPercentage()",
      "name": "delegationTaxPercentage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "delegationUnbondingPeriod()",
      "name": "delegationUnbondingPeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllocation(address)",
      "name": "getAllocation",
      "description": "Return the allocation by ID.",
      "parameterDecorators": [
        {
          "name": "_allocationID",
          "description": "Address used as allocation identifier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Allocation data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "indexer",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "subgraphDeploymentID",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "bytes32"
            },
            {
              "name": "tokens",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "createdAtEpoch",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "closedAtEpoch",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "collectedFees",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "effectiveAllocation",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "accRewardsPerAllocatedToken",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAllocationState(address)",
      "name": "getAllocationState",
      "description": "Return the current state of an allocation.",
      "parameterDecorators": [
        {
          "name": "_allocationID",
          "description": "Address used as the allocation identifier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "AllocationState.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDelegation(address,address)",
      "name": "getDelegation",
      "description": "Return the delegation from a delegator to an indexer.",
      "parameterDecorators": [
        {
          "name": "_indexer",
          "description": "Address of the indexer where funds have been delegated.",
          "recommendedTypes": []
        },
        {
          "name": "_delegator",
          "description": "Address of the delegator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Delegation data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "shares",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "tokensLocked",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "tokensLockedUntil",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getIndexerCapacity(address)",
      "name": "getIndexerCapacity",
      "description": "Get the total amount of tokens available to use in allocations. This considers the indexer stake and delegated tokens according to delegation ratio.",
      "parameterDecorators": [
        {
          "name": "_indexer",
          "description": "Address of the indexer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of tokens staked by the indexer.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getIndexerStakedTokens(address)",
      "name": "getIndexerStakedTokens",
      "description": "Get the total amount of tokens staked by the indexer.",
      "parameterDecorators": [
        {
          "name": "_indexer",
          "description": "Address of the indexer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of tokens staked by the indexer.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSubgraphAllocatedTokens(bytes32)",
      "name": "getSubgraphAllocatedTokens",
      "description": "Return the total amount of tokens allocated to subgraph.",
      "parameterDecorators": [
        {
          "name": "_subgraphDeploymentID",
          "description": "Address used as the allocation identifier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Total tokens allocated to subgraph.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWithdraweableDelegatedTokens(tuple(uint256,uint256,uint256))",
      "name": "getWithdraweableDelegatedTokens",
      "description": "Returns amount of delegated tokens ready to be withdrawn after unbonding period.",
      "parameterDecorators": [
        {
          "name": "_delegation",
          "description": "Delegation of tokens from delegator to indexer.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "shares",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tokensLocked",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tokensLockedUntil",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of tokens to withdraw.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasStake(address)",
      "name": "hasStake",
      "description": "Getter that returns if an indexer has any stake.",
      "parameterDecorators": [
        {
          "name": "_indexer",
          "description": "Address of the indexer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if indexer has staked tokens.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32)",
      "name": "initialize",
      "description": "Initialize this contract.",
      "parameterDecorators": [
        {
          "name": "_controller",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minimumIndexerStake",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_thawingPeriod",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_protocolPercentage",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_curationPercentage",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_channelDisputeEpochs",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxAllocationEpochs",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_delegationUnbondingPeriod",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_delegationRatio",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_rebateAlphaNumerator",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_rebateAlphaDenominator",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isAllocation(address)",
      "name": "isAllocation",
      "description": "Return if allocationID is used.",
      "parameterDecorators": [
        {
          "name": "_allocationID",
          "description": "Address used as signer by the indexer for an allocation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if allocationID already used.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isDelegator(address,address)",
      "name": "isDelegator",
      "description": "Return whether the delegator has delegated to the indexer.",
      "parameterDecorators": [
        {
          "name": "_indexer",
          "description": "Address of the indexer where funds have been delegated.",
          "recommendedTypes": []
        },
        {
          "name": "_delegator",
          "description": "Address of the delegator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if delegator of indexer.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOperator(address,address)",
      "name": "isOperator",
      "description": "Return true if operator is allowed for indexer.",
      "parameterDecorators": [
        {
          "name": "_operator",
          "description": "Address of the operator.",
          "recommendedTypes": []
        },
        {
          "name": "_indexer",
          "description": "Address of the indexer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxAllocationEpochs()",
      "name": "maxAllocationEpochs",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minimumIndexerStake()",
      "name": "minimumIndexerStake",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "multicall(bytes[])",
      "name": "multicall",
      "description": "Call multiple functions in the current contract and return the data from all of them if they all succeed.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "The encoded function data for each of the calls to make to this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "results",
          "description": "The results from each of the calls passed in via data.",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "operatorAuth(address,address)",
      "name": "operatorAuth",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "protocolPercentage()",
      "name": "protocolPercentage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rebates(uint256)",
      "name": "rebates",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "fees",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "effectiveAllocatedStake",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "claimedRewards",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "unclaimedAllocationsCount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "alphaNumerator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "alphaDenominator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardsDestination(address)",
      "name": "rewardsDestination",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAssetHolder(address,bool)",
      "name": "setAssetHolder",
      "description": "Set an address as allowed asset holder.",
      "parameterDecorators": [
        {
          "name": "_assetHolder",
          "description": "Address of allowed source for state channel funds.",
          "recommendedTypes": []
        },
        {
          "name": "_allowed",
          "description": "True if asset holder is allowed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setChannelDisputeEpochs(uint32)",
      "name": "setChannelDisputeEpochs",
      "description": "Set the period in epochs that need to pass before fees in rebate pool can be claimed.",
      "parameterDecorators": [
        {
          "name": "_channelDisputeEpochs",
          "description": "Period in epochs.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setController(address)",
      "name": "setController",
      "description": "Set Controller. Only callable by current controller.",
      "parameterDecorators": [
        {
          "name": "_controller",
          "description": "Controller contract address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCurationPercentage(uint32)",
      "name": "setCurationPercentage",
      "description": "Set the curation percentage of query fees sent to curators.",
      "parameterDecorators": [
        {
          "name": "_percentage",
          "description": "Percentage of query fees sent to curators.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDelegationParameters(uint32,uint32,uint32)",
      "name": "setDelegationParameters",
      "description": "Set the delegation parameters for the caller.",
      "parameterDecorators": [
        {
          "name": "_indexingRewardCut",
          "description": "Percentage of indexing rewards left for delegators.",
          "recommendedTypes": []
        },
        {
          "name": "_queryFeeCut",
          "description": "Percentage of query fees left for delegators.",
          "recommendedTypes": []
        },
        {
          "name": "_cooldownBlocks",
          "description": "Period that need to pass to update delegation parameters.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDelegationParametersCooldown(uint32)",
      "name": "setDelegationParametersCooldown",
      "description": "Set the time in blocks an indexer needs to wait to change delegation parameters.",
      "parameterDecorators": [
        {
          "name": "_blocks",
          "description": "Number of blocks to set the delegation parameters cooldown period.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDelegationRatio(uint32)",
      "name": "setDelegationRatio",
      "description": "Set the delegation ratio. If set to 10 it means the indexer can use up to 10x the indexer staked amount from their delegated tokens.",
      "parameterDecorators": [
        {
          "name": "_delegationRatio",
          "description": "Delegation capacity multiplier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDelegationTaxPercentage(uint32)",
      "name": "setDelegationTaxPercentage",
      "description": "Set a delegation tax percentage to burn when delegated funds are deposited.",
      "parameterDecorators": [
        {
          "name": "_percentage",
          "description": "Percentage of delegated tokens to burn as delegation tax.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDelegationUnbondingPeriod(uint32)",
      "name": "setDelegationUnbondingPeriod",
      "description": "Set the period for undelegation of stake from indexer.",
      "parameterDecorators": [
        {
          "name": "_delegationUnbondingPeriod",
          "description": "Period in epochs to wait for token withdrawals after undelegating.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxAllocationEpochs(uint32)",
      "name": "setMaxAllocationEpochs",
      "description": "Set the max time allowed for indexers stake on allocations.",
      "parameterDecorators": [
        {
          "name": "_maxAllocationEpochs",
          "description": "Allocation duration limit in epochs.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumIndexerStake(uint256)",
      "name": "setMinimumIndexerStake",
      "description": "Set the minimum indexer stake required to.",
      "parameterDecorators": [
        {
          "name": "_minimumIndexerStake",
          "description": "Minimum indexer stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOperator(address,bool)",
      "name": "setOperator",
      "description": "Authorize or unauthorize an address to be an operator.",
      "parameterDecorators": [
        {
          "name": "_operator",
          "description": "Address to authorize.",
          "recommendedTypes": []
        },
        {
          "name": "_allowed",
          "description": "Whether authorized or not.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setProtocolPercentage(uint32)",
      "name": "setProtocolPercentage",
      "description": "Set a protocol percentage to burn when collecting query fees.",
      "parameterDecorators": [
        {
          "name": "_percentage",
          "description": "Percentage of query fees to burn as protocol fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRebateRatio(uint32,uint32)",
      "name": "setRebateRatio",
      "description": "Set the rebate ratio (fees to allocated stake).",
      "parameterDecorators": [
        {
          "name": "_alphaNumerator",
          "description": "Numerator of `alpha` in the cobb-douglas function.",
          "recommendedTypes": []
        },
        {
          "name": "_alphaDenominator",
          "description": "Denominator of `alpha` in the cobb-douglas function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRewardsDestination(address)",
      "name": "setRewardsDestination",
      "description": "Set the destination where to send rewards.",
      "parameterDecorators": [
        {
          "name": "_destination",
          "description": "Rewards destination address. If set to zero, rewards will be restaked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSlasher(address,bool)",
      "name": "setSlasher",
      "description": "Set or unset an address as allowed slasher.",
      "parameterDecorators": [
        {
          "name": "_slasher",
          "description": "Address of the party allowed to slash indexers.",
          "recommendedTypes": []
        },
        {
          "name": "_allowed",
          "description": "True if slasher is allowed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setThawingPeriod(uint32)",
      "name": "setThawingPeriod",
      "description": "Set the thawing period for unstaking.",
      "parameterDecorators": [
        {
          "name": "_thawingPeriod",
          "description": "Period in blocks to wait for token withdrawals after unstaking.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "slash(address,uint256,uint256,address)",
      "name": "slash",
      "description": "Slash the indexer stake. Delegated tokens are not subject to slashing. Can only be called by the slasher role.",
      "parameterDecorators": [
        {
          "name": "_indexer",
          "description": "Address of indexer to slash.",
          "recommendedTypes": []
        },
        {
          "name": "_tokens",
          "description": "Amount of tokens to slash from the indexer stake.",
          "recommendedTypes": []
        },
        {
          "name": "_reward",
          "description": "Amount of reward tokens to send to a beneficiary.",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "Address of a beneficiary to receive a reward for the slashing.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "slashers(address)",
      "name": "slashers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stake(uint256)",
      "name": "stake",
      "description": "Deposit tokens on the indexer stake.",
      "parameterDecorators": [
        {
          "name": "_tokens",
          "description": "Amount of tokens to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakeTo(address,uint256)",
      "name": "stakeTo",
      "description": "Deposit tokens on the indexer stake.",
      "parameterDecorators": [
        {
          "name": "_indexer",
          "description": "Address of the indexer.",
          "recommendedTypes": []
        },
        {
          "name": "_tokens",
          "description": "Amount of tokens to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakes(address)",
      "name": "stakes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "tokensStaked",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "tokensAllocated",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "tokensLocked",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "tokensLockedUntil",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "subgraphAllocations(bytes32)",
      "name": "subgraphAllocations",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "syncAllContracts()",
      "name": "syncAllContracts",
      "description": "Sync protocol contract addresses from the Controller registry. This function will cache all the contracts using the latest addresses Anyone can call the function whenever a Proxy contract change in the controller to ensure the protocol is using the latest version.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "thawingPeriod()",
      "name": "thawingPeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "undelegate(address,uint256)",
      "name": "undelegate",
      "description": "Undelegate tokens from an indexer.",
      "parameterDecorators": [
        {
          "name": "_indexer",
          "description": "Address of the indexer where tokens had been delegated.",
          "recommendedTypes": []
        },
        {
          "name": "_shares",
          "description": "Amount of shares to return and undelegate tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Amount of tokens returned for the shares of the delegation pool.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unstake(uint256)",
      "name": "unstake",
      "description": "Unstake tokens from the indexer stake, lock them until thawing period expires. NOTE: The function accepts an amount greater than the currently staked tokens. If that happens, it will try to unstake the max amount of tokens it can. The reason for this behaviour is to avoid time conditions while the transaction is in flight.",
      "parameterDecorators": [
        {
          "name": "_tokens",
          "description": "Amount of tokens to unstake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw()",
      "name": "withdraw",
      "description": "Withdraw indexer tokens once the thawing period has passed.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawDelegated(address,address)",
      "name": "withdrawDelegated",
      "description": "Withdraw delegated tokens once the unbonding period has passed.",
      "parameterDecorators": [
        {
          "name": "_indexer",
          "description": "Withdraw available tokens delegated to indexer.",
          "recommendedTypes": []
        },
        {
          "name": "_delegateToIndexer",
          "description": "Re-delegate to indexer address if non-zero, withdraw if zero address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}