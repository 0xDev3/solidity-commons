{
  "schema": "../schema.json",
  "tags": [],
  "name": "Governance",
  "description": "A contract for making, passing, and executing on-chain governance proposals.",
  "eventDecorators": [
    {
      "signature": "ApprovalStageDurationSet(uint256)",
      "name": "ApprovalStageDurationSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "approvalStageDuration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ApproverSet(address)",
      "name": "ApproverSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "approver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ConcurrentProposalsSet(uint256)",
      "name": "ConcurrentProposalsSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "concurrentProposals",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ConstitutionSet(address,bytes4,uint256)",
      "name": "ConstitutionSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "destination",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "functionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "threshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DequeueFrequencySet(uint256)",
      "name": "DequeueFrequencySet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "dequeueFrequency",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExecutionStageDurationSet(uint256)",
      "name": "ExecutionStageDurationSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "executionStageDuration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "HotfixApproved(bytes32)",
      "name": "HotfixApproved",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "HotfixExecuted(bytes32)",
      "name": "HotfixExecuted",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "HotfixPrepared(bytes32,uint256)",
      "name": "HotfixPrepared",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "epoch",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "HotfixWhitelisted(bytes32,address)",
      "name": "HotfixWhitelisted",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "whitelister",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MinDepositSet(uint256)",
      "name": "MinDepositSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "minDeposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ParticipationBaselineQuorumFactorSet(uint256)",
      "name": "ParticipationBaselineQuorumFactorSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "baselineQuorumFactor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ParticipationBaselineUpdateFactorSet(uint256)",
      "name": "ParticipationBaselineUpdateFactorSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "baselineUpdateFactor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ParticipationBaselineUpdated(uint256)",
      "name": "ParticipationBaselineUpdated",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "participationBaseline",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ParticipationFloorSet(uint256)",
      "name": "ParticipationFloorSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "participationFloor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalApproved(uint256)",
      "name": "ProposalApproved",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProposalDequeued(uint256,uint256)",
      "name": "ProposalDequeued",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalExecuted(uint256)",
      "name": "ProposalExecuted",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProposalExpired(uint256)",
      "name": "ProposalExpired",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ProposalQueued(uint256,address,uint256,uint256,uint256)",
      "name": "ProposalQueued",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "proposer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "transactionCount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "deposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalUpvoteRevoked(uint256,address,uint256)",
      "name": "ProposalUpvoteRevoked",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "revokedUpvotes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalUpvoted(uint256,address,uint256)",
      "name": "ProposalUpvoted",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "upvotes",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalVoteRevoked(uint256,address,uint256,uint256)",
      "name": "ProposalVoteRevoked",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "weight",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalVoted(uint256,address,uint256,uint256)",
      "name": "ProposalVoted",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "weight",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "QueueExpirySet(uint256)",
      "name": "QueueExpirySet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "queueExpiry",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ReferendumStageDurationSet(uint256)",
      "name": "ReferendumStageDurationSet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "referendumStageDuration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RegistrySet(address)",
      "name": "RegistrySet",
      "description": "Emitted when a new WPC speed is calculated for a market.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "approve(uint256,uint256)",
      "name": "approve",
      "description": "Approves a proposal in the approval stage.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal to approve.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the proposal ID in `dequeued`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approveHotfix(bytes32)",
      "name": "approveHotfix",
      "description": "Approves the hash of a hotfix transaction(s).",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "The abi encoded keccak256 hash of the hotfix transaction(s) to be approved.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "approver()",
      "name": "approver",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkProofOfPossession(address,bytes,bytes)",
      "name": "checkProofOfPossession",
      "description": "Checks a BLS proof of possession.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "The address signed by the BLS key to generate the proof of possession.",
          "recommendedTypes": []
        },
        {
          "name": "blsKey",
          "description": "The BLS public key that the validator is using for consensus, should pass proof of possession. 48 bytes.",
          "recommendedTypes": []
        },
        {
          "name": "blsPop",
          "description": "The BLS public key proof-of-possession, which consists of a signature on the account address. 96 bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "concurrentProposals()",
      "name": "concurrentProposals",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dequeueFrequency()",
      "name": "dequeueFrequency",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dequeueProposalsIfReady()",
      "name": "dequeueProposalsIfReady",
      "description": "Removes the proposals with the most upvotes from the queue, moving them to the approval stage. If any of the top proposals have expired, they are deleted.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "dequeued(uint256)",
      "name": "dequeued",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "emptyIndices(uint256)",
      "name": "emptyIndices",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "execute(uint256,uint256)",
      "name": "execute",
      "description": "Executes a proposal in the execution stage, removing it from `dequeued`. Does not remove the proposal if the execution fails.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal to vote on.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the proposal ID in `dequeued`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeHotfix(uint256[],address[],bytes,uint256[],bytes32)",
      "name": "executeHotfix",
      "description": "Executes a whitelisted proposal. Reverts if hotfix is already executed, not approved, or not prepared for current epoch.",
      "parameterDecorators": [
        {
          "name": "values",
          "description": "The values of CELO to be sent in the proposed transactions.",
          "recommendedTypes": []
        },
        {
          "name": "destinations",
          "description": "The destination addresses of the proposed transactions.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "The concatenated data to be included in the proposed transactions.",
          "recommendedTypes": []
        },
        {
          "name": "dataLengths",
          "description": "The lengths of each transaction's data.",
          "recommendedTypes": []
        },
        {
          "name": "salt",
          "description": "Arbitrary salt associated with hotfix which guarantees uniqueness of hash.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "fractionMulExp",
      "description": "calculate a * b^x for fractions a, b to `decimals` precision.",
      "parameterDecorators": [
        {
          "name": "aNumerator",
          "description": "Numerator of first fraction.",
          "recommendedTypes": []
        },
        {
          "name": "aDenominator",
          "description": "Denominator of first fraction.",
          "recommendedTypes": []
        },
        {
          "name": "bNumerator",
          "description": "Numerator of exponentiated fraction.",
          "recommendedTypes": []
        },
        {
          "name": "bDenominator",
          "description": "Denominator of exponentiated fraction.",
          "recommendedTypes": []
        },
        {
          "name": "exponent",
          "description": "exponent to raise b to.",
          "recommendedTypes": []
        },
        {
          "name": "_decimals",
          "description": "precision.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getApprovalStageDuration()",
      "name": "getApprovalStageDuration",
      "description": "Returns the number of seconds proposals stay in approval stage.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBlockNumberFromHeader(bytes)",
      "name": "getBlockNumberFromHeader",
      "description": "Parses block number out of header.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getConstitution(address,bytes4)",
      "name": "getConstitution",
      "description": "Returns the constitution for a particular destination and function ID.",
      "parameterDecorators": [
        {
          "name": "destination",
          "description": "The destination address to get the constitution for.",
          "recommendedTypes": []
        },
        {
          "name": "functionId",
          "description": "The function ID to get the constitution for, zero for the destination default.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDequeue()",
      "name": "getDequeue",
      "description": "Returns the dequeued proposal IDs. Note that this includes unused indices with proposalId == 0 from deleted proposals.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochNumber()",
      "name": "getEpochNumber",
      "description": "Returns the epoch number at a block.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochNumberOfBlock(uint256)",
      "name": "getEpochNumberOfBlock",
      "description": "Returns the epoch number at a block.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number where epoch number is calculated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochSize()",
      "name": "getEpochSize",
      "description": "Returns the current epoch size in blocks.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getExecutionStageDuration()",
      "name": "getExecutionStageDuration",
      "description": "Returns the number of seconds proposals stay in the execution stage.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getHotfixRecord(bytes32)",
      "name": "getHotfixRecord",
      "description": "Gets information about a hotfix.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "The abi encoded keccak256 hash of the hotfix transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMostRecentReferendumProposal(address)",
      "name": "getMostRecentReferendumProposal",
      "description": "Returns the ID of the most recently dequeued proposal voted on by `account`.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getParentSealBitmap(uint256)",
      "name": "getParentSealBitmap",
      "description": "Gets the parent seal bitmap from the header at the given block number.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number to retrieve. Must be within 4 epochs of the current number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getParticipationParameters()",
      "name": "getParticipationParameters",
      "description": "Returns the participation parameters.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposal(uint256)",
      "name": "getProposal",
      "description": "Returns an unpacked proposal struct with its transaction count.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal to unpack.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposalStage(uint256)",
      "name": "getProposalStage",
      "description": "Returns stage of governance process given proposal is in.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProposalTransaction(uint256,uint256)",
      "name": "getProposalTransaction",
      "description": "Returns a specified transaction in a proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal to query.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the specified transaction in the proposal's transaction list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getQueue()",
      "name": "getQueue",
      "description": "Returns the proposal ID and upvote total for all queued proposals. Note that this includes expired proposals that have yet to be removed from the queue.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getQueueLength()",
      "name": "getQueueLength",
      "description": "Returns the number of proposals in the queue.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getReferendumStageDuration()",
      "name": "getReferendumStageDuration",
      "description": "Returns the number of seconds proposals stay in the referendum stage.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUpvoteRecord(address)",
      "name": "getUpvoteRecord",
      "description": "Returns the ID of the proposal upvoted by `account` and the weight of that upvote.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUpvotes(uint256)",
      "name": "getUpvotes",
      "description": "Returns the number of upvotes the queued proposal has received.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVerifiedSealBitmapFromHeader(bytes)",
      "name": "getVerifiedSealBitmapFromHeader",
      "description": "Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header. If the parent hash is not in the blockchain, verification fails.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVersionNumber()",
      "name": "getVersionNumber",
      "description": "Returns the storage, major, minor, and patch version of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVoteRecord(address,uint256)",
      "name": "getVoteRecord",
      "description": "Returns an accounts vote record on a particular index in `dequeued`.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account to get the record for.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index in `dequeued`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVoteTotals(uint256)",
      "name": "getVoteTotals",
      "description": "Returns the referendum vote totals for a proposal.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hashHeader(bytes)",
      "name": "hashHeader",
      "description": "Computes hash of header.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hotfixWhitelistValidatorTally(bytes32)",
      "name": "hotfixWhitelistValidatorTally",
      "description": "Returns number of validators from current set which have whitelisted the given hotfix.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "The abi encoded keccak256 hash of the hotfix transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hotfixes(bytes32)",
      "name": "hotfixes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "executed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "approved",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "preparedEpoch",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "initialize",
      "description": "Used in place of the constructor to allow the contract to be upgradable via proxy. Should be called only once.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "The address of the registry contract.",
          "recommendedTypes": []
        },
        {
          "name": "_approver",
          "description": "The address that needs to approve proposals to move to the referendum stage.",
          "recommendedTypes": []
        },
        {
          "name": "_concurrentProposals",
          "description": "The number of proposals to dequeue at once.",
          "recommendedTypes": []
        },
        {
          "name": "_minDeposit",
          "description": "The minimum CELO deposit needed to make a proposal.",
          "recommendedTypes": []
        },
        {
          "name": "_queueExpiry",
          "description": "The number of seconds a proposal can stay in the queue before expiring.",
          "recommendedTypes": []
        },
        {
          "name": "_dequeueFrequency",
          "description": "The number of seconds before the next batch of proposals can be dequeued.",
          "recommendedTypes": []
        },
        {
          "name": "approvalStageDuration",
          "description": "The number of seconds the approver has to approve a proposal after it is dequeued.",
          "recommendedTypes": []
        },
        {
          "name": "referendumStageDuration",
          "description": "The number of seconds users have to vote on a dequeued proposal after the approval stage ends.",
          "recommendedTypes": []
        },
        {
          "name": "executionStageDuration",
          "description": "The number of seconds users have to execute a passed proposal after the referendum stage ends.",
          "recommendedTypes": []
        },
        {
          "name": "participationBaseline",
          "description": "The initial value of the participation baseline.",
          "recommendedTypes": []
        },
        {
          "name": "participationFloor",
          "description": "The participation floor.",
          "recommendedTypes": []
        },
        {
          "name": "baselineUpdateFactor",
          "description": "The weight of the new participation in the baseline update rule.",
          "recommendedTypes": []
        },
        {
          "name": "baselineQuorumFactor",
          "description": "The proportion of the baseline that constitutes quorum.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isApproved(uint256)",
      "name": "isApproved",
      "description": "Returns whether or not a proposal has been approved.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isDequeuedProposal(uint256,uint256)",
      "name": "isDequeuedProposal",
      "description": "Returns whether a proposal is dequeued at the given index.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the proposal ID in `dequeued`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isDequeuedProposalExpired(uint256)",
      "name": "isDequeuedProposalExpired",
      "description": "Returns whether or not a dequeued proposal has expired.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isHotfixPassing(bytes32)",
      "name": "isHotfixPassing",
      "description": "Checks if a byzantine quorum of validators has whitelisted the given hotfix.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "The abi encoded keccak256 hash of the hotfix transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isHotfixWhitelistedBy(bytes32,address)",
      "name": "isHotfixWhitelistedBy",
      "description": "Returns whether given hotfix hash has been whitelisted by given address.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "The abi encoded keccak256 hash of the hotfix transaction(s) to be whitelisted.",
          "recommendedTypes": []
        },
        {
          "name": "whitelister",
          "description": "Address to check whitelist status of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isProposalPassing(uint256)",
      "name": "isProposalPassing",
      "description": "Returns whether or not a particular proposal is passing according to the constitution and the participation levels.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isQueued(uint256)",
      "name": "isQueued",
      "description": "Returns whether or not a proposal is in the queue. NOTE: proposal may be expired.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isQueuedProposalExpired(uint256)",
      "name": "isQueuedProposalExpired",
      "description": "Returns whether or not a queued proposal has expired.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isVoting(address)",
      "name": "isVoting",
      "description": "Returns whether or not a particular account is voting on proposals.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastDequeue()",
      "name": "lastDequeue",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minDeposit()",
      "name": "minDeposit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minQuorumSize(uint256)",
      "name": "minQuorumSize",
      "description": "Returns the minimum number of required signers for a given block number. Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3)).",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minQuorumSizeInCurrentSet()",
      "name": "minQuorumSizeInCurrentSet",
      "description": "Computes byzantine quorum from current validator set size.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberValidatorsInCurrentSet()",
      "name": "numberValidatorsInCurrentSet",
      "description": "Gets the size of the current elected validator set.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberValidatorsInSet(uint256)",
      "name": "numberValidatorsInSet",
      "description": "Gets the size of the validator set that must sign the given block number.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number to retrieve the validator set from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "prepareHotfix(bytes32)",
      "name": "prepareHotfix",
      "description": "Gives hotfix a prepared epoch for execution.",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "The hash of the hotfix to be prepared.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposalCount()",
      "name": "proposalCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposalExists(uint256)",
      "name": "proposalExists",
      "description": "Returns whether or not a proposal exists.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "propose(uint256[],address[],bytes,uint256[],string)",
      "name": "propose",
      "description": "Creates a new proposal and adds it to end of the queue with no upvotes. The minimum deposit must be included with the proposal, returned if/when the proposal is dequeued.",
      "parameterDecorators": [
        {
          "name": "values",
          "description": "The values of CELO to be sent in the proposed transactions.",
          "recommendedTypes": []
        },
        {
          "name": "destinations",
          "description": "The destination addresses of the proposed transactions.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "The concatenated data to be included in the proposed transactions.",
          "recommendedTypes": []
        },
        {
          "name": "dataLengths",
          "description": "The lengths of each transaction's data.",
          "recommendedTypes": []
        },
        {
          "name": "descriptionUrl",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "queueExpiry()",
      "name": "queueExpiry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "refundedDeposits(address)",
      "name": "refundedDeposits",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registry()",
      "name": "registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeUpvote(uint256,uint256)",
      "name": "revokeUpvote",
      "description": "Revokes an upvote on a queued proposal. Provide 0 for `lesser`/`greater` when the proposal will be at the tail/head of the queue.",
      "parameterDecorators": [
        {
          "name": "lesser",
          "description": "The ID of the proposal that will be just behind the previously upvoted proposal in the queue.",
          "recommendedTypes": []
        },
        {
          "name": "greater",
          "description": "The ID of the proposal that will be just ahead of the previously upvoted proposal in the queue.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeVotes()",
      "name": "revokeVotes",
      "description": "Revoke votes on all proposals of sender in the referendum stage.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setApprovalStageDuration(uint256)",
      "name": "setApprovalStageDuration",
      "description": "Updates the number of seconds proposals stay in the approval stage.",
      "parameterDecorators": [
        {
          "name": "approvalStageDuration",
          "description": "The number of seconds proposals stay in the approval stage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setApprover(address)",
      "name": "setApprover",
      "description": "Updates the address that has permission to approve proposals in the approval stage.",
      "parameterDecorators": [
        {
          "name": "_approver",
          "description": "The address that has permission to approve proposals in the approval stage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBaselineQuorumFactor(uint256)",
      "name": "setBaselineQuorumFactor",
      "description": "Updates the proportion of the baseline that constitutes quorum.",
      "parameterDecorators": [
        {
          "name": "baselineQuorumFactor",
          "description": "The new baseline quorum factor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBaselineUpdateFactor(uint256)",
      "name": "setBaselineUpdateFactor",
      "description": "Updates the weight of the new participation in the baseline update rule.",
      "parameterDecorators": [
        {
          "name": "baselineUpdateFactor",
          "description": "The new baseline update factor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setConcurrentProposals(uint256)",
      "name": "setConcurrentProposals",
      "description": "Updates the number of proposals to dequeue at a time.",
      "parameterDecorators": [
        {
          "name": "_concurrentProposals",
          "description": "The number of proposals to dequeue at at a time.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setConstitution(address,bytes4,uint256)",
      "name": "setConstitution",
      "description": "Updates the ratio of yes:yes+no votes needed for a specific class of proposals to pass. If no constitution is explicitly set the default is a simple majority, i.e. 1:2.",
      "parameterDecorators": [
        {
          "name": "destination",
          "description": "The destination of proposals for which this threshold should apply.",
          "recommendedTypes": []
        },
        {
          "name": "functionId",
          "description": "The function ID of proposals for which this threshold should apply. Zero will set the default.",
          "recommendedTypes": []
        },
        {
          "name": "threshold",
          "description": "The threshold.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDequeueFrequency(uint256)",
      "name": "setDequeueFrequency",
      "description": "Updates the minimum number of seconds before the next batch of proposals can be dequeued.",
      "parameterDecorators": [
        {
          "name": "_dequeueFrequency",
          "description": "The number of seconds before the next batch of proposals can be dequeued.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setExecutionStageDuration(uint256)",
      "name": "setExecutionStageDuration",
      "description": "Updates the number of seconds proposals stay in the execution stage.",
      "parameterDecorators": [
        {
          "name": "executionStageDuration",
          "description": "The number of seconds proposals stay in the execution stage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinDeposit(uint256)",
      "name": "setMinDeposit",
      "description": "Updates the minimum deposit needed to make a proposal.",
      "parameterDecorators": [
        {
          "name": "_minDeposit",
          "description": "The minimum CELO deposit needed to make a proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setParticipationBaseline(uint256)",
      "name": "setParticipationBaseline",
      "description": "Updates the participation baseline.",
      "parameterDecorators": [
        {
          "name": "participationBaseline",
          "description": "The value of the baseline.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setParticipationFloor(uint256)",
      "name": "setParticipationFloor",
      "description": "Updates the floor of the participation baseline.",
      "parameterDecorators": [
        {
          "name": "participationFloor",
          "description": "The value at which the baseline is floored.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setQueueExpiry(uint256)",
      "name": "setQueueExpiry",
      "description": "Updates the number of seconds before a queued proposal expires.",
      "parameterDecorators": [
        {
          "name": "_queueExpiry",
          "description": "The number of seconds a proposal can stay in the queue before expiring.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setReferendumStageDuration(uint256)",
      "name": "setReferendumStageDuration",
      "description": "Updates the number of seconds proposals stay in the referendum stage.",
      "parameterDecorators": [
        {
          "name": "referendumStageDuration",
          "description": "The number of seconds proposals stay in the referendum stage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRegistry(address)",
      "name": "setRegistry",
      "description": "Updates the address pointing to a Registry contract.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "The address of a registry contract for routing to other contracts.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stageDurations()",
      "name": "stageDurations",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "approval",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "referendum",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "execution",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upvote(uint256,uint256,uint256)",
      "name": "upvote",
      "description": "Upvotes a queued proposal. Provide 0 for `lesser`/`greater` when the proposal will be at the tail/head of the queue.Reverts if the account has already upvoted a proposal in the queue.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal to upvote.",
          "recommendedTypes": []
        },
        {
          "name": "lesser",
          "description": "The ID of the proposal that will be just behind `proposalId` in the queue.",
          "recommendedTypes": []
        },
        {
          "name": "greater",
          "description": "The ID of the proposal that will be just ahead `proposalId` in the queue.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "validatorSignerAddressFromCurrentSet(uint256)",
      "name": "validatorSignerAddressFromCurrentSet",
      "description": "Gets a validator address from the current validator set.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "Index of requested validator in the validator set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validatorSignerAddressFromSet(uint256,uint256)",
      "name": "validatorSignerAddressFromSet",
      "description": "Gets a validator address from the validator set at the given block number.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "Index of requested validator in the validator set.",
          "recommendedTypes": []
        },
        {
          "name": "blockNumber",
          "description": "Block number to retrieve the validator set from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vote(uint256,uint256,uint8)",
      "name": "vote",
      "description": "Votes on a proposal in the referendum stage.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "The ID of the proposal to vote on.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the proposal ID in `dequeued`.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Whether to vote yes, no, or abstain.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "whitelistHotfix(bytes32)",
      "name": "whitelistHotfix",
      "description": "Whitelists the hash of a hotfix transaction(s).",
      "parameterDecorators": [
        {
          "name": "hash",
          "description": "The abi encoded keccak256 hash of the hotfix transaction(s) to be whitelisted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw()",
      "name": "withdraw",
      "description": "Withdraws refunded CELO deposits.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}