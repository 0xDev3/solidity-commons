{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "SplitPoolFactory",
  "description": "A wrapper around a CRPFactory to create pools configured for Split tokens.",
  "eventDecorators": [
    {
      "signature": "LogNewSplitPool(address,address)",
      "name": "LogNewSplitPool",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when update is made on Home or unconfirmed update root is submitted on Replica.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "isSplitPool(address)",
      "name": "isSplitPool",
      "description": "Check to see if a given address is a SplitPool.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "- address to check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "boolean indicating whether it is a SplitPool.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "joinPoolBySplitting(address,address,address,uint256,uint256)",
      "name": "joinPoolBySplitting",
      "description": "A shortcut to split tokens and to supply the splits to an underlying balancer pool.",
      "parameterDecorators": [
        {
          "name": "crpPoolAddress",
          "description": "address of a deployed and active Configurable Rights Pool.",
          "recommendedTypes": []
        },
        {
          "name": "splitVaultAddress",
          "description": "address of the SplitVault to query for component tokens.",
          "recommendedTypes": []
        },
        {
          "name": "fullTokenAddress",
          "description": "address of the token to pull and split.",
          "recommendedTypes": []
        },
        {
          "name": "fullTokenAmountIn",
          "description": "amount of the token to pull in.",
          "recommendedTypes": []
        },
        {
          "name": "minPoolAmountOut",
          "description": "a check to ensure that enough balancer pool tokens will be received.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "poolAmountOut",
          "description": "the amount of pool tokens received.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "newSplitPool(address,tuple(string,string,address[],uint256[],uint256[],uint256),tuple(bool,bool,bool,bool,bool,bool))",
      "name": "newSplitPool",
      "description": "Create a new ConfigurableRightsPool using the underlying factory.",
      "parameterDecorators": [
        {
          "name": "factoryAddress",
          "description": "BFactory instance used to create the underlying pool.",
          "recommendedTypes": []
        },
        {
          "name": "poolParams",
          "description": "struct containing the names, tokens, weights, balances, and swap fee.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "poolTokenSymbol",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "poolTokenName",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "constituentTokens",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tokenBalances",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tokenWeights",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "swapFee",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "rights",
          "description": "struct of permissions, configuring this CRP instance (see above for definitions).",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "canPauseSwapping",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "canChangeSwapFee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "canChangeWeights",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "canAddRemoveTokens",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "canWhitelistLPs",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "canChangeCap",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "configurable rights pool address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}