{
  "schema": "../schema.json",
  "tags": [],
  "name": "MyLootBox",
  "description": "MyLootBox MyLootBox - a randomized and openable lootbox of MyCollectibles.",
  "eventDecorators": [
    {
      "signature": "LootBoxOpened(uint256,address,uint256,uint256)",
      "name": "LootBoxOpened",
      "description": "when the auction of a token gets started. Emitted when a NFT stops staking; either through standard means or by expulsion.",
      "parameterDecorators": [
        {
          "name": "optionId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "buyer",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "boxesPurchased",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "itemsMinted",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "when the auction of a token gets started. Emitted when a NFT stops staking; either through standard means or by expulsion.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "when the auction of a token gets started. Emitted when a NFT stops staking; either through standard means or by expulsion.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PauserAdded(address)",
      "name": "PauserAdded",
      "description": "when the auction of a token gets started. Emitted when a NFT stops staking; either through standard means or by expulsion.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PauserRemoved(address)",
      "name": "PauserRemoved",
      "description": "when the auction of a token gets started. Emitted when a NFT stops staking; either through standard means or by expulsion.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "when the auction of a token gets started. Emitted when a NFT stops staking; either through standard means or by expulsion.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Warning(string,address)",
      "name": "Warning",
      "description": "when the auction of a token gets started. Emitted when a NFT stops staking; either through standard means or by expulsion.",
      "parameterDecorators": [
        {
          "name": "message",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addPauser(address)",
      "name": "addPauser",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "balanceOf(address,uint256)",
      "name": "balanceOf",
      "description": "Get the factory's ownership of Option. Should be the amount it can still mint. NOTE: Called by `canMint`.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_optionId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "canMint(uint256,uint256)",
      "name": "canMint",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_optionId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "classIsPreminted(uint256)",
      "name": "classIsPreminted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "classToTokenIds(uint256,uint256)",
      "name": "classToTokenIds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "factorySchemaName()",
      "name": "factorySchemaName",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isApprovedForAll(address,address)",
      "name": "isApprovedForAll",
      "description": "///.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_operator",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isPauser(address)",
      "name": "isPauser",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mint(uint256,address,uint256,bytes)",
      "name": "mint",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_optionId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_toAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "name()",
      "name": "name",
      "description": "//.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nftAddress()",
      "name": "nftAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numOptions()",
      "name": "numOptions",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "open(uint256,address,uint256)",
      "name": "open",
      "description": "Open a lootbox manually and send what's inside to _toAddress Convenience method for contract owner.",
      "parameterDecorators": [
        {
          "name": "_optionId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_toAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "optionToSettings(uint256)",
      "name": "optionToSettings",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "maxQuantityPerOpen",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "hasGuaranteedClasses",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "optionToTokenID(uint256)",
      "name": "optionToTokenID",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Called by a pauser to pause, triggers stopped state.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxyRegistryAddress()",
      "name": "proxyRegistryAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renouncePauser()",
      "name": "renouncePauser",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resetClass(uint256)",
      "name": "resetClass",
      "description": "Remove all token ids for a given class, causing it to fall back to creating/minting into the nft address.",
      "parameterDecorators": [
        {
          "name": "_classId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "safeTransferFrom(address,address,uint256,uint256,bytes)",
      "name": "safeTransferFrom",
      "description": "Hack to get things to work automatically on OpenSea. Use safeTransferFrom so the frontend doesn't have to worry about different method names.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_optionId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setClassForTokenId(uint256,uint256)",
      "name": "setClassForTokenId",
      "description": "If the tokens for some class are pre-minted and owned by the contract owner, they can be used for a given class by setting them here.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_classId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOptionSettings(uint8,uint256,uint16[6],uint16[6])",
      "name": "setOptionSettings",
      "description": "Set the settings for a particular lootbox option.",
      "parameterDecorators": [
        {
          "name": "_option",
          "description": "The Option to set settings for.",
          "recommendedTypes": []
        },
        {
          "name": "_maxQuantityPerOpen",
          "description": "Maximum number of items to mint per open. Set to 0 to disable this option.",
          "recommendedTypes": []
        },
        {
          "name": "_classProbabilities",
          "description": "Array of probabilities (basis points, so integers out of 10,000) of receiving each class (the index in the array). Should add up to 10k and be descending in value.",
          "recommendedTypes": []
        },
        {
          "name": "_guarantees",
          "description": "Array of the number of guaranteed items received for each class (the index in the array).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSeed(uint256)",
      "name": "setSeed",
      "description": "Improve pseudorandom number generator by letting the owner set the seed manually, making attacks more difficult.",
      "parameterDecorators": [
        {
          "name": "_newSeed",
          "description": "The new seed to use for the next transaction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenIdsForClass(uint8,uint256[])",
      "name": "setTokenIdsForClass",
      "description": "Alternate way to add token ids to a class Note: resets the full list for the class instead of adding each token id.",
      "parameterDecorators": [
        {
          "name": "_class",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_tokenIds",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenIdsForClasses(uint256[6])",
      "name": "setTokenIdsForClasses",
      "description": "Set token IDs for each rarity class. Bulk version of `setTokenIdForClass`.",
      "parameterDecorators": [
        {
          "name": "_tokenIds",
          "description": "List of token IDs to set for each class, specified above in order.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsFactoryInterface()",
      "name": "supportsFactoryInterface",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "symbol()",
      "name": "symbol",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "Called by a pauser to unpause, returns to normal state.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uri(uint256)",
      "name": "uri",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_optionId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw()",
      "name": "withdraw",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}