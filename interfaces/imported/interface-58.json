{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "nft"
  ],
  "name": "MarketPlace",
  "description": "MarketPlace Contract that regulates NFT contract/token. Uses safeMath library for all calulations and holds crypto/tokens uring auction. This Contract is used to set NFT tokens to Aution and Sale.",
  "eventDecorators": [
    {
      "signature": "AuctionCancelled(uint256)",
      "name": "AuctionCancelled",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "AuctionCreated(uint256,uint256)",
      "name": "AuctionCreated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "startingPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BidCreated(uint256,address,uint256)",
      "name": "BidCreated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SaleCreated(uint256,uint256)",
      "name": "SaleCreated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sellingPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SellCancelled(uint256)",
      "name": "SellCancelled",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "TokenAuctions(uint256)",
      "name": "TokenAuctions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "startingPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "expiresAt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "currentBidPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "currentBidder",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "onAuction",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "TokenSales(uint256)",
      "name": "TokenSales",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "seller",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "sellingPrice",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "onSale",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bidForAuction(uint256)",
      "name": "bidForAuction",
      "description": "bid an amount to given tokenId. holds bid amount of the bidder and set it as current bidder if bid amount is higher than previous bidder.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "TokenId of NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "buyNft(uint256)",
      "name": "buyNft",
      "description": "buy the nft placed on sale. tranfer nft token to buyer and divide the commission to token minter and marketplace owner.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "TokenId of NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelAuction(uint256)",
      "name": "cancelAuction",
      "description": "cancel ongoing auction. stops the ongoing auction and if bidder exists refund the bidders amount.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "TokenId of NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelSell(uint256)",
      "name": "cancelSell",
      "description": "cancel ongoing sale. stops the ongoing sale.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "TokenId of NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimNft(uint256)",
      "name": "claimNft",
      "description": "claim the NFT once the bidder wins an auction. tranfer nft token to highest bidder and divide the commission to token minter and marketplace owner.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "TokenId of NFT.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createNftForAuction(address,string,string,uint256,uint256)",
      "name": "createNftForAuction",
      "description": "create NFT and set it for Auction. mint token using nftcontract and place that nft to Auction.",
      "parameterDecorators": [
        {
          "name": "_artist",
          "description": "address of token owner.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenURI",
          "description": "Uri of the token.",
          "recommendedTypes": []
        },
        {
          "name": "_metaDataURI",
          "description": "metadata Uri of the token.",
          "recommendedTypes": []
        },
        {
          "name": "_startingPrice",
          "description": "starting price of token.",
          "recommendedTypes": []
        },
        {
          "name": "_expiresAt",
          "description": "Expiry timestamp of auction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createNftForSale(address,string,string,uint256)",
      "name": "createNftForSale",
      "description": "create NFT and set it for sale. mint token using nftcontract and place that nft to sale.",
      "parameterDecorators": [
        {
          "name": "_artist",
          "description": "address of token owner.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenURI",
          "description": "Uri of the token.",
          "recommendedTypes": []
        },
        {
          "name": "_metaDataURI",
          "description": "metadata Uri of the token.",
          "recommendedTypes": []
        },
        {
          "name": "_sellingPrice",
          "description": "selling price of token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "marketPlaceOwner()",
      "name": "marketPlaceOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minimunBidPer10000()",
      "name": "minimunBidPer10000",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setMarketPlaceOwner(address)",
      "name": "setMarketPlaceOwner",
      "description": "sets given account as marketplace owner.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "address of marketplace owner to be set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinimumBidPercent(uint256)",
      "name": "setMinimumBidPercent",
      "description": "change the minimum bid percent.",
      "parameterDecorators": [
        {
          "name": "_minBidPer10000",
          "description": "minimun bid amount per 10000.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNftToAuction(uint256,uint256,uint256)",
      "name": "setNftToAuction",
      "description": "Set NFT for Auction. allows token owner to place their token to Auction.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "TokenId of NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_startingPrice",
          "description": "starting price of token.",
          "recommendedTypes": []
        },
        {
          "name": "_expiresAt",
          "description": "Expiry timestamp of auction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setNftToSell(uint256,uint256)",
      "name": "setNftToSell",
      "description": "set NFT to sale. allows token owner to palce their token to sale.",
      "parameterDecorators": [
        {
          "name": "_tokenId",
          "description": "TokenId of NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_sellingPrice",
          "description": "selling price of token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}