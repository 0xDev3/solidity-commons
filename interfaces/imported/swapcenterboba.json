{
  "schema": "../schema.json",
  "tags": [
    "swaps",
    "vaults"
  ],
  "name": "SwapCenterBoba",
  "description": "SwapCenter is used for: 1. Converting the baseAsset to longAsset in the Vault 2. Helping users deposit to the Vault with alterative assets. The asset swapping is done with pre-defined routes accross multiple external DEXs and contracts.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "getExchangeOrder(address,address)",
      "name": "getExchangeOrder",
      "description": "Get the exchangeOrder for swapping a pair of token.",
      "parameterDecorators": [
        {
          "name": "tokenIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenOut",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "exchangeOrder. See setRoute function for details.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPath(address,address)",
      "name": "getPath",
      "description": "Get the path for swapping a pair of token.",
      "parameterDecorators": [
        {
          "name": "tokenIn",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "tokenOut",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "path. See setRoute function for details.",
          "recommendedTypes": [],
          "solidityType": "address[][]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isETH(address)",
      "name": "isETH",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Return true if the address is ETH_ADDRESS.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "referralAddress()",
      "name": "referralAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rescueERC20(address,address,uint256)",
      "name": "rescueERC20",
      "description": "Rescue ERC20 token from the SwapCenter.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The address of the ERC20 token.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The address that the token will be sent to.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "The amount of the ERC20 token will be transfered.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rescueETH(address)",
      "name": "rescueETH",
      "description": "Rescue MATIC from the SwapCenter.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address that eth will be sent to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setReferalAddress(address)",
      "name": "setReferalAddress",
      "description": "Set the referal addresss.",
      "parameterDecorators": [
        {
          "name": "_newReferral",
          "description": "The referral address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRoute(address,address,uint256[],address[][])",
      "name": "setRoute",
      "description": "Set the pre-defined route for swapping a pair of token. To create a reversed swapping route, a separate route has to be created.",
      "parameterDecorators": [
        {
          "name": "input",
          "description": "Address of the input token.",
          "recommendedTypes": []
        },
        {
          "name": "output",
          "description": "Address of the output token.",
          "recommendedTypes": []
        },
        {
          "name": "exchangeOrder",
          "description": "A list of DEXs or contracts used for swapping.",
          "recommendedTypes": []
        },
        {
          "name": "path",
          "description": "A list of paths used in each DEXs or contracts for swapping. The length of path should be the same as the length of exchangeOrder.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRouteBatch(address[],address[],uint256[][],address[][][])",
      "name": "setRouteBatch",
      "description": "Create pre-defined routes in batch. See setRoute function for details.",
      "parameterDecorators": [
        {
          "name": "input",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "output",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "exchangeOrder",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "path",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapExactTokenIn(address,address,uint256,uint256)",
      "name": "swapExactTokenIn",
      "description": "Swap the tokens with pre-defined routes.",
      "parameterDecorators": [
        {
          "name": "tokenIn",
          "description": "Address of the input token.",
          "recommendedTypes": []
        },
        {
          "name": "tokenOut",
          "description": "Address of the output token.",
          "recommendedTypes": []
        },
        {
          "name": "amountIn",
          "description": "Amount of the input token.",
          "recommendedTypes": []
        },
        {
          "name": "minAmountOut",
          "description": "The minimum amount of the output token expected to receive. If the output amount is smaller than this value, the transaction will be reverted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}