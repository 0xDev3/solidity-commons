{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "splitter"
  ],
  "name": "mockpool",
  "description": "Contract module which acts as a simple pool for collecting an ERC20 token. in a real project there would most likely be more logic in this depending on the complexity of the system. This is only an example contract for the TokenPaymentSplitter tutorial.",
  "eventDecorators": [
    {
      "signature": "Multisended(uint256,address)",
      "name": "Multisended",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "total",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PayeeAdded(address,uint256)",
      "name": "PayeeAdded",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "shares",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PaymentReleased(address,uint256)",
      "name": "PaymentReleased",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "is The token needs to be transferred to the wallet account of dfinity network.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "is Number of token transfers.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "drainTo(address,address)",
      "name": "drainTo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_transferTo",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "multisendToken(address,address[],uint256[])",
      "name": "multisendToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_payees",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_shares",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}