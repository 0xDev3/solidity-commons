{"schema":"../schema.json","tags":[],"name":"Freezable","description":"","eventDecorators":[{"signature":"Finalized()","name":"Finalized","description":"Event fired when a item is sold.","parameterDecorators":[]},{"signature":"Freeze(address,uint256)","name":"Freeze","description":"Event fired when a item is sold.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"value","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Event fired when a item is sold.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Paused(address)","name":"Paused","description":"Event fired when a item is sold.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"Event fired when a item is sold.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"Event fired when a item is sold.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Unfreeze(address,uint256)","name":"Unfreeze","description":"Event fired when a item is sold.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"value","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unpaused(address)","name":"Unpaused","description":"Event fired when a item is sold.","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"MANAGER_ADMIN_ROLE()","name":"MANAGER_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"MANAGER_ROLE()","name":"MANAGER_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"_holdtime()","name":"_holdtime","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"addAdmin(bytes32,address)","name":"addAdmin","description":"Create and ading new role.","parameterDecorators":[{"name":"role","description":"role account.","recommendedTypes":[]},{"name":"account","description":"account for adding to the role.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"finalize()","name":"finalize","description":"Block adding admins.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"freeze(string,uint256)","name":"freeze","description":"Freeze amount of tokens.","parameterDecorators":[{"name":"tron","description":"","recommendedTypes":[]},{"name":"value","description":"- The amount to be frozen.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"a boolean value indicating whether the operation succeeded * Emits {Freeze} event.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"freezeOf(address)","name":"freezeOf","description":"Gets the frozen tokens of the specified address.","parameterDecorators":[{"name":"owner","description":"- The address to query the frozen of.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The amount of frozen tokens for passed address.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"freezeTimeOf(address)","name":"freezeTimeOf","description":"Gets the timestamp for tokens freeze of the specified address.","parameterDecorators":[{"name":"owner","description":"- The address to query the timestamp.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The timestamp of tokens freeze for passed address.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getBlock()","name":"getBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getHolder(uint256)","name":"getHolder","description":"Returns holder by position. `index` must be a value between 0 and {getHoldersCount}, non-inclusive.","parameterDecorators":[{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getHolderInfo(address)","name":"getHolderInfo","description":"Get tron address holder.","parameterDecorators":[{"name":"owner","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"addressTron","description":"","recommendedTypes":[],"solidityType":"string"},{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getHoldersCount()","name":"getHoldersCount","description":"Returns the number of holders.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getNow()","name":"getNow","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. * To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. * Role bearers are not sorted in any particular way, and their ordering may change at any point. * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getToken()","name":"getToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. * If `account` had not been already granted `role`, emits a {RoleGranted} event. * Requirements: * - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isGap()","name":"isGap","description":"DEBUG routines.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pause()","name":"pause","description":"Set holdtime.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"a boolean value indicating whether the operation succeeded.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"paused()","name":"paused","description":"Returns true if the contract is paused, and false otherwise.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). * If the calling account had been granted `role`, emits a {RoleRevoked} event. * Requirements: * - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. * If `account` had been granted `role`, emits a {RoleRevoked} event. * Requirements: * - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"setHoldtime(uint256)","name":"setHoldtime","description":"Set holdtime.","parameterDecorators":[{"name":"holdtime","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"a boolean value indicating whether the operation succeeded.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setToken(address)","name":"setToken","description":"Set address token STARS.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"a boolean value indicating whether the operation succeeded.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"shareOf(address)","name":"shareOf","description":"Gets the frozen tokens rate of the specified address.","parameterDecorators":[{"name":"owner","description":"- The address to query the share of.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The share of passed address.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"title()","name":"title","description":"Gets contract title.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"totalBank()","name":"totalBank","description":"Get balance available to payouts.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The amount of TRX.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"totalFrozen()","name":"totalFrozen","description":"Get total frozen tokens.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The amount of frozen tokens.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"totalFrozenRate()","name":"totalFrozenRate","description":"Get total frozen tokens rate.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"The rate of frozen tokens.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unfreeze()","name":"unfreeze","description":"Unfreeze all frozen tokens.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"a boolean value indicating whether the operation succeeded * Emits {Unreeze} event.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"unfreezeTimeOf(address)","name":"unfreezeTimeOf","description":"Gets the unfreeze tokens date of the specified address.","parameterDecorators":[{"name":"owner","description":"- The address to query the date.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The unfreeze tokens date for passed address.","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"unpause()","name":"unpause","description":"Set holdtime.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"a boolean value indicating whether the operation succeeded.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"updateHolder(string)","name":"updateHolder","description":"Update info holder.","parameterDecorators":[{"name":"tronAddress","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"a boolean value indicating whether the operation succeeded.","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false}]}