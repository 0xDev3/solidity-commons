{
  "schema": "../schema.json",
  "tags": [
    "swaps",
    "aave",
    "uniswap"
  ],
  "name": "ParaSwapRepayAdapter",
  "description": "UniswapRepayAdapter. Uniswap V2 Adapter to perform a repay of a debt with collateral.",
  "eventDecorators": [
    {
      "signature": "Bought(address,address,uint256,uint256)",
      "name": "Bought",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "fromAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "toAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amountSold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "receivedAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Swapped(address,address,uint256,uint256)",
      "name": "Swapped",
      "description": "Emitted when an array of wager tokens is updated.",
      "parameterDecorators": [
        {
          "name": "fromAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "toAsset",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fromAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "receivedAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ADDRESSES_PROVIDER()",
      "name": "ADDRESSES_PROVIDER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "AUGUSTUS_REGISTRY()",
      "name": "AUGUSTUS_REGISTRY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "LENDING_POOL()",
      "name": "LENDING_POOL",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_SLIPPAGE_PERCENT()",
      "name": "MAX_SLIPPAGE_PERCENT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ORACLE()",
      "name": "ORACLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executeOperation(address[],uint256[],uint256[],address,bytes)",
      "name": "executeOperation",
      "description": "Uses the received funds from the flash loan to repay a debt on the protocol on behalf of the user. Then pulls the collateral from the user and swaps it to the debt asset to repay the flash loan. The user should give this contract allowance to pull the ATokens in order to withdraw the underlying asset, swap it and repay the flash loan. Supports only one asset on the flash loan.",
      "parameterDecorators": [
        {
          "name": "assets",
          "description": "Address of collateral asset(Flash loan asset).",
          "recommendedTypes": []
        },
        {
          "name": "amounts",
          "description": "Amount of flash loan taken.",
          "recommendedTypes": []
        },
        {
          "name": "premiums",
          "description": "Fee of the flash loan.",
          "recommendedTypes": []
        },
        {
          "name": "initiator",
          "description": "Address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "params",
          "description": "Additional variadic field to include extra params. Expected parameters: IERC20Detailed debtAsset Address of the debt asset uint256 debtAmount Amount of debt to be repaid uint256 rateMode Rate modes of the debt to be repaid uint256 deadline Deadline for the permit signature uint256 debtRateMode Rate mode of the debt to be repaid bytes paraswapData Paraswap Data * bytes buyCallData Call data for augustus * IParaSwapAugustus augustus Address of Augustus Swapper PermitSignature permitParams Struct containing the permit signatures, set to all zeroes if not used.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rescueTokens(address)",
      "name": "rescueTokens",
      "description": "Emergency rescue for token stucked on this contract, as failsafe mechanism - Funds should never remain in this contract more time than during transactions - Only callable by the owner.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swapAndRepay(address,address,uint256,uint256,uint256,uint256,bytes,tuple(uint256,uint256,uint8,bytes32,bytes32))",
      "name": "swapAndRepay",
      "description": "Swaps the user collateral for the debt asset and then repay the debt on the protocol on behalf of the user without using flash loans. This method can be used when the temporary transfer of the collateral asset to this contract does not affect the user position. The user should give this contract allowance to pull the ATokens in order to withdraw the underlying asset.",
      "parameterDecorators": [
        {
          "name": "collateralAsset",
          "description": "Address of asset to be swapped.",
          "recommendedTypes": []
        },
        {
          "name": "debtAsset",
          "description": "Address of debt asset.",
          "recommendedTypes": []
        },
        {
          "name": "collateralAmount",
          "description": "max Amount of the collateral to be swapped.",
          "recommendedTypes": []
        },
        {
          "name": "debtRepayAmount",
          "description": "Amount of the debt to be repaid, or maximum amount when repaying entire debt.",
          "recommendedTypes": []
        },
        {
          "name": "debtRateMode",
          "description": "Rate mode of the debt to be repaid.",
          "recommendedTypes": []
        },
        {
          "name": "buyAllBalanceOffset",
          "description": "Set to offset of toAmount in Augustus calldata if wanting to pay entire debt, otherwise 0.",
          "recommendedTypes": []
        },
        {
          "name": "paraswapData",
          "description": "Data for Paraswap Adapter.",
          "recommendedTypes": []
        },
        {
          "name": "permitSignature",
          "description": "struct containing the permit signature.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "deadline",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}