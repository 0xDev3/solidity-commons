{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "vaults"
  ],
  "name": "UniversalVault",
  "description": "UniversalVault. Warning: not compatible with rebasing tokensSecurity contact: dev-support@ampleforth.org. Vault for isolated storage of staking tokens.",
  "eventDecorators": [
    {
      "signature": "Locked(address,address,uint256)",
      "name": "Locked",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "delegate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RageQuit(address,address,bool,string)",
      "name": "RageQuit",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "delegate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "notified",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reason",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unlocked(address,address,uint256)",
      "name": "Unlocked",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "delegate",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "LOCK_TYPEHASH()",
      "name": "LOCK_TYPEHASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "RAGEQUIT_GAS()",
      "name": "RAGEQUIT_GAS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "UNLOCK_TYPEHASH()",
      "name": "UNLOCK_TYPEHASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calculateLockID(address,address)",
      "name": "calculateLockID",
      "description": "",
      "parameterDecorators": [
        {
          "name": "delegate",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "lockID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkBalances()",
      "name": "checkBalances",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "validity",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBalanceDelegated(address,address)",
      "name": "getBalanceDelegated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "delegate",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "balance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBalanceLocked(address)",
      "name": "getBalanceLocked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "balance",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLockAt(uint256)",
      "name": "getLockAt",
      "description": "",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "lockData",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "delegate",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "token",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "address"
            },
            {
              "name": "balance",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLockSetCount()",
      "name": "getLockSetCount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNonce()",
      "name": "getNonce",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPermissionHash(bytes32,address,address,uint256,uint256)",
      "name": "getPermissionHash",
      "description": "",
      "parameterDecorators": [
        {
          "name": "eip712TypeHash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "delegate",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "nonce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "permissionHash",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize()",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initializeLock()",
      "name": "initializeLock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isValidSignature(bytes32,bytes)",
      "name": "isValidSignature",
      "description": "",
      "parameterDecorators": [
        {
          "name": "permissionHash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "signature",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lock(address,uint256,bytes)",
      "name": "lock",
      "description": "Lock ERC20 tokens in the vault access control: called by delegate with signed permission from owner state machine: anytime state scope: - insert or update _locks - increase _nonce token transfer: none.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Address of token being locked.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of tokens being locked.",
          "recommendedTypes": []
        },
        {
          "name": "permission",
          "description": "Permission signature payload.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nft()",
      "name": "nft",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "nftAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "ownerAddress",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rageQuit(address,address)",
      "name": "rageQuit",
      "description": "Forcibly cancel delegate lock. This function will attempt to notify the delegate of the rage quit using a fixed amount of gas. access control: only owner state machine: after valid lock from delegate state scope: - remove item from _locks token transfer: none.",
      "parameterDecorators": [
        {
          "name": "delegate",
          "description": "Address of delegate.",
          "recommendedTypes": []
        },
        {
          "name": "token",
          "description": "Address of token being unlocked.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "notified",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "error",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferERC20(address,address,uint256)",
      "name": "transferERC20",
      "description": "Transfer ERC20 tokens out of vault access control: only owner state machine: when balance >= max(lock) + amount state scope: none token transfer: transfer any token.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Address of token being transferred.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Address of the recipient.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of tokens to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferETH(address,uint256)",
      "name": "transferETH",
      "description": "Transfer ERC20 tokens out of vault access control: only owner state machine: when balance >= amount state scope: none token transfer: transfer any token.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "Address of the recipient.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of ETH to transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unlock(address,uint256,bytes)",
      "name": "unlock",
      "description": "Unlock ERC20 tokens in the vault access control: called by delegate with signed permission from owner state machine: after valid lock from delegate state scope: - remove or update _locks - increase _nonce token transfer: none.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "Address of token being unlocked.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of tokens being unlocked.",
          "recommendedTypes": []
        },
        {
          "name": "permission",
          "description": "Permission signature payload.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}