{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "strategies"
  ],
  "name": "ACOStrategy1",
  "description": "ACOStrategy1. The contract is to set the strategy for an ACO Pool. This strategy is only to selling ACO tokens.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a relay server registers or updates its details. Looking up these events allows a client to discover registered Relay Servers.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SetAggregator(address,address,address,address)",
      "name": "SetAggregator",
      "description": "Emitted when a relay server registers or updates its details. Looking up these events allows a client to discover registered Relay Servers.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetMinOptionPricePercentage(uint256,uint256)",
      "name": "SetMinOptionPricePercentage",
      "description": "Emitted when a relay server registers or updates its details. Looking up these events allows a client to discover registered Relay Servers.",
      "parameterDecorators": [
        {
          "name": "oldMinOptionPricePercentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newMinOptionPricePercentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetOrderSizeFactors(uint256,uint256,uint256,uint256)",
      "name": "SetOrderSizeFactors",
      "description": "Emitted when a relay server registers or updates its details. Looking up these events allows a client to discover registered Relay Servers.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "amount of tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetTolerancePercentageToOraclePrice(uint256,uint256)",
      "name": "SetTolerancePercentageToOraclePrice",
      "description": "Emitted when a relay server registers or updates its details. Looking up these events allows a client to discover registered Relay Servers.",
      "parameterDecorators": [
        {
          "name": "oldTolerancePercentageToOraclePrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newTolerancePercentageToOraclePrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetUnderlyingPriceAdjustPercentage(uint256,uint256)",
      "name": "SetUnderlyingPriceAdjustPercentage",
      "description": "Emitted when a relay server registers or updates its details. Looking up these events allows a client to discover registered Relay Servers.",
      "parameterDecorators": [
        {
          "name": "oldUnderlyinPriceAdjustPercentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newUnderlyingPriceAdjustPercentage",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "aggregators(address,address)",
      "name": "aggregators",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "aggregator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "precision",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetPrecision(address)",
      "name": "assetPrecision",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkExercise(tuple(address,address,bool,uint256,uint256,uint256,uint256,uint256,uint256))",
      "name": "checkExercise",
      "description": "Function to check the exercise data. This strategy only sells, so the exercise is not available.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "underlying",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "strikeAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "isCallOption",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "strikePrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "expiryTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "collateralAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "collateralAvailable",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amountPurchased",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amountSold",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAcceptableUnderlyingPriceToSwapAssets(address,address,bool)",
      "name": "getAcceptableUnderlyingPriceToSwapAssets",
      "description": "Function to get an acceptable underlying price to swap the related assets. Reading the underlying price on the Oracle aggregator, the value read is adjusted to a maximum acceptable price slippage.",
      "parameterDecorators": [
        {
          "name": "underlying",
          "description": "Address of the underlying.",
          "recommendedTypes": []
        },
        {
          "name": "strikeAsset",
          "description": "Address of the strike asset.",
          "recommendedTypes": []
        },
        {
          "name": "isBuying",
          "description": "True if is buying, otherwise is selling.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The acceptable underlying price to swap the related assets.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUnderlyingPrice(address,address)",
      "name": "getUnderlyingPrice",
      "description": "Function to get the underlying price on the Oracle aggregator.",
      "parameterDecorators": [
        {
          "name": "underlying",
          "description": "Address of the underlying.",
          "recommendedTypes": []
        },
        {
          "name": "strikeAsset",
          "description": "Address of the strike asset.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The underlying price with the strike asset precision.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minOptionPricePercentage()",
      "name": "minOptionPricePercentage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "orderSizeDampingFactor()",
      "name": "orderSizeDampingFactor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "orderSizePenaltyFactor()",
      "name": "orderSizePenaltyFactor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "quote(tuple(bool,address,address,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      "name": "quote",
      "description": "Function to quote an option price.",
      "parameterDecorators": [
        {
          "name": "quoteData",
          "description": "The quote data.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "isSellingQuote",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "underlying",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "strikeAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "isCallOption",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "strikePrice",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "expiryTime",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "baseVolatility",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "collateralOrderAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "collateralAvailable",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "collateralTotalDeposited",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "strikeAssetEarnedSelling",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "strikeAssetSpentBuying",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amountPurchased",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amountSold",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setAgreggator(address,address,address)",
      "name": "setAgreggator",
      "description": "Function to set the the Oracle aggregator data. Only can be called by the admin.",
      "parameterDecorators": [
        {
          "name": "underlying",
          "description": "Address of the underlying.",
          "recommendedTypes": []
        },
        {
          "name": "strikeAsset",
          "description": "Address of the strike asset.",
          "recommendedTypes": []
        },
        {
          "name": "aggregator",
          "description": "Address of the Oracle aggregator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinOptionPricePercentage(uint256)",
      "name": "setMinOptionPricePercentage",
      "description": "Function to set the minimum percentage for the option price calculation. Only can be called by the admin.",
      "parameterDecorators": [
        {
          "name": "_minOptionPricePercentage",
          "description": "Value of the new minimum percentage for the option price calculation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOrderSizeFactors(uint256,uint256)",
      "name": "setOrderSizeFactors",
      "description": "Function to set the the order size factors. orderSizePenaltyFactor * order size percentage ^ orderSizeDampingFactor Only can be called by the admin.",
      "parameterDecorators": [
        {
          "name": "_orderSizePenaltyFactor",
          "description": "Value of the new order size penalty factor.",
          "recommendedTypes": []
        },
        {
          "name": "_orderSizeDampingFactor",
          "description": "Value of the new order size damping factor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTolerancePercentageToOraclePrice(uint256)",
      "name": "setTolerancePercentageToOraclePrice",
      "description": "Function to set the tolerance percentage for the underlying price on the Oracle. Only can be called by the admin.",
      "parameterDecorators": [
        {
          "name": "_tolerancePercentageToOraclePrice",
          "description": "Value of the tolerance percentage for the underlying price on the Oracle.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUnderlyingPriceAdjustPercentage(uint256)",
      "name": "setUnderlyingPriceAdjustPercentage",
      "description": "Function to set the percentage adjust on the underlying price to calculate the option price. Only can be called by the admin.",
      "parameterDecorators": [
        {
          "name": "_underlyingPriceAdjustPercentage",
          "description": "Value of the new percentage adjust on the underlying price to calculate the option price.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tolerancePercentageToOraclePrice()",
      "name": "tolerancePercentageToOraclePrice",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "underlyingPriceAdjustPercentage()",
      "name": "underlyingPriceAdjustPercentage",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}