{"schema":"../schema.json","tags":[],"name":"UpgradeBeaconController","description":"UpgradeBeaconController. This implementation is a minimal version inspired by 0age's implementation: https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/upgradeability/DharmaUpgradeBeaconController.sol. Set as the controller of UpgradeBeacon contract(s), capable of changing their stored implementation address.","eventDecorators":[{"signature":"BeaconUpgraded(address,address)","name":"BeaconUpgraded","description":"","parameterDecorators":[{"name":"beacon","description":"","recommendedTypes":[],"indexed":true},{"name":"implementation","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipProposed(address)","name":"OwnershipProposed","description":"","parameterDecorators":[{"name":"proposedOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"acceptProposedOwner()","name":"acceptProposedOwner","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"delay()","name":"delay","description":"Returns the delay period before a new owner can be accepted.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"proposeNewOwner(address)","name":"proposeNewOwner","description":"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process.","parameterDecorators":[{"name":"newlyProposed","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"proposed()","name":"proposed","description":"Returns the address of the proposed owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"proposedTimestamp()","name":"proposedTimestamp","description":"Returns the address of the proposed owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Renounces ownership of the contract after a delay.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounced()","name":"renounced","description":"Indicates if the ownership has been renounced() by checking if current owner is address(0).","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"upgrade(address,address)","name":"upgrade","description":"Modify the implementation stored in the UpgradeBeacon, which will upgrade the implementation used by all Proxy contracts using that UpgradeBeacon.","parameterDecorators":[{"name":"_beacon","description":"Address of the UpgradeBeacon which will be updated.","recommendedTypes":[]},{"name":"_implementation","description":"Address of the Implementation contract to upgrade the Beacon to.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}