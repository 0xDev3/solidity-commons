{
  "schema": "../schema.json",
  "tags": [
    "strategies",
    "makerdao"
  ],
  "name": "VesperMakerStrategyLINK",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Open(address)",
      "name": "Open",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Shutdown(address)",
      "name": "Shutdown",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "NAME()",
      "name": "NAME",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "VERSION()",
      "name": "VERSION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "approveToken()",
      "name": "approveToken",
      "description": "Approve all required tokens.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "beforeWithdraw()",
      "name": "beforeWithdraw",
      "description": "Called during withdrawal process. Initial plan was to not allowed withdraw if pool in underwater. BUT as 1 of audit suggested we should not use resurface during withdraw, hence removed logic.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cm()",
      "name": "cm",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collateralToken()",
      "name": "collateralToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collateralType()",
      "name": "collateralType",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "convertFrom18(uint256)",
      "name": "convertFrom18",
      "description": "Convert from 18 decimals to token defined decimals. Default no conversion.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createKeeperList()",
      "name": "createKeeperList",
      "description": "Create keeper list. Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(uint256)",
      "name": "deposit",
      "description": "Deposit collateral token into lending pool.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "Amount of collateral token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositAll()",
      "name": "depositAll",
      "description": "Deposit all collateral token from pool to other lending pool. Anyone can call it except when paused.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "highWater()",
      "name": "highWater",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "interestEarned()",
      "name": "interestEarned",
      "description": "Returns interest earned since last rebalance. Make sure to return value in collateral token and in order to do that we are using Uniswap to get collateral amount for earned DAI.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isReservedToken(address)",
      "name": "isReservedToken",
      "description": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isUnderwater()",
      "name": "isUnderwater",
      "description": "Returns true if pool is underwater.Underwater - If debt is greater than earning of pool.Earning - Sum of DAI balance and DAI from accured reward, if any, in lending pool.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isUpgradable()",
      "name": "isUpgradable",
      "description": "Returns true if strategy can be upgraded.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "keepers()",
      "name": "keepers",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastRebalanceBlock()",
      "name": "lastRebalanceBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lowWater()",
      "name": "lowWater",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pool()",
      "name": "pool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rebalance()",
      "name": "rebalance",
      "description": "Wrapper function for rebalanceEarned and rebalanceCollateral Anyone can call it except when paused.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rebalanceCollateral()",
      "name": "rebalanceCollateral",
      "description": "Rebalance collateral and debt in Maker. Based on defined risk parameter either borrow more DAI from Maker or payback some DAI in Maker. It will try to mitigate risk of liquidation. Anyone can call it except when paused.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rebalanceEarned()",
      "name": "rebalanceEarned",
      "description": "Convert earned DAI to collateral token Also calculate interest fee on earning and transfer fee to fee collector. Anyone can call it except when paused.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "receiptToken()",
      "name": "receiptToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "resetApproval()",
      "name": "resetApproval",
      "description": "Reset approval of all required tokens.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "resurface()",
      "name": "resurface",
      "description": "If pool is underwater this function will resolve underwater condition. If Debt in Maker is greater than Dai balance in lender pool then pool in underwater. Lowering DAI debt in Maker will resolve underwater condtion. Resolve: Calculate required collateral token to lower DAI debt. Withdraw required collateral token from pool and/or Maker and convert those to DAI via Uniswap. Finally payback debt in Maker using DAI.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stopEverything()",
      "name": "stopEverything",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sweepErc20(address)",
      "name": "sweepErc20",
      "description": "sweep given token to vesper pool.",
      "parameterDecorators": [
        {
          "name": "_fromToken",
          "description": "token address to sweep.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "token()",
      "name": "token",
      "description": "Returns address of token correspond to collateral token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalLocked()",
      "name": "totalLocked",
      "description": "Returns total collateral locked via this strategy.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateBalancingFactor(uint256,uint256)",
      "name": "updateBalancingFactor",
      "description": "Update balancing factors aka high water and low water values. Water mark values represent Collateral Ratio in Maker. For example 300 as high water means 300% collateral ratio.",
      "parameterDecorators": [
        {
          "name": "_highWater",
          "description": "Value for high water mark.",
          "recommendedTypes": []
        },
        {
          "name": "_lowWater",
          "description": "Value for low water mark.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vaultNum()",
      "name": "vaultNum",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Withdraw collateral token from lending pool.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "Amount of collateral token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAll()",
      "name": "withdrawAll",
      "description": "Withdraw all collateral. No rebalance earning. Controller only function, called when migrating strategy.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAllWithRebalance()",
      "name": "withdrawAllWithRebalance",
      "description": "Rebalance earning and withdraw all collateral. Controller only function, called when migrating strategy.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}