{
  "schema": "../schema.json",
  "tags": [],
  "name": "RoyaltyEngineV1",
  "description": "Engine to lookup royalty configurations.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "__RoyaltyEngineV1_init(address)",
      "name": "__RoyaltyEngineV1_init",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_royaltyRegistry",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRoyalty(address,uint256,uint256)",
      "name": "getRoyalty",
      "description": "Get the royalty for a given token (address, id) and value amount. Does not cache the bps/amounts. Caches the spec for a given token address.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The address of the token.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "The id of the token.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The value you wish to get the royalty of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "recipients",
          "description": "Address' of the royalty recipients.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "amounts",
          "description": "Corresponding amount of a recipients royalty.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRoyaltyView(address,uint256,uint256)",
      "name": "getRoyaltyView",
      "description": "View only version of getRoyalty.",
      "parameterDecorators": [
        {
          "name": "tokenAddress",
          "description": "The address of the token.",
          "recommendedTypes": []
        },
        {
          "name": "tokenId",
          "description": "The id of the token.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The value you wish to get the royalty of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "recipients",
          "description": "Address' of the royalty recipients.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "amounts",
          "description": "Corresponding amount of a recipients royalty.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "royaltyRegistry()",
      "name": "royaltyRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw()",
      "name": "withdraw",
      "description": "Withdraws any Ether in-case it's ever accidentaly sent to the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}