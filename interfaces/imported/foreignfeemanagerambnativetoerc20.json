{
  "schema": "../schema.json",
  "tags": [],
  "name": "ForeignFeeManagerAMBNativeToErc20",
  "description": "ForeignFeeManagerAMBNativeToErc20.",
  "eventDecorators": [
    {
      "signature": "FeeUpdated(uint256)",
      "name": "FeeUpdated",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipRenounced(address)",
      "name": "OwnershipRenounced",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a validator is unenrolled from the validator set. Triggers on new deposit call.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "setToken(address)",
      "name": "setToken",
      "description": "Sets the token address. Only the owner can call this method.",
      "parameterDecorators": [
        {
          "name": "_newToken",
          "description": "address of the token in which the fees will be received.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeRewardAccount(address)",
      "name": "removeRewardAccount",
      "description": "Removes an account from the list of accounts to receive rewards for the operations. Only the owner can call this method. finds the element, swaps it with the last element, and then deletes it;.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "to be removed return boolean whether the element was found and deleted.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewardAccountsCount()",
      "name": "rewardAccountsCount",
      "description": "Tells the amount of accounts in the list of reward accounts.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setFee(uint256)",
      "name": "setFee",
      "description": "Sets the fee percentage amount for the mediator operations. Only the owner can call this method.",
      "parameterDecorators": [
        {
          "name": "_fee",
          "description": "the fee percentage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore. Allows the current owner to relinquish control of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "calculateFee(uint256)",
      "name": "calculateFee",
      "description": "Calculates the fee amount to be subtracted from the value.",
      "parameterDecorators": [
        {
          "name": "_value",
          "description": "the base value from which fees are calculated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onTokenTransfer(address,uint256,bytes)",
      "name": "onTokenTransfer",
      "description": "ERC677 transfer callback function, received fee is distributed.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "amount of transferred tokens.",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fee()",
      "name": "fee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addRewardAccount(address)",
      "name": "addRewardAccount",
      "description": "Adds a new account to the list of accounts to receive rewards for the operations. Only the owner can call this method.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "new reward account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to transfer control of the contract to a newOwner.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "The address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "token()",
      "name": "token",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardAccountsList()",
      "name": "rewardAccountsList",
      "description": "Tells the list of accounts that receives rewards for the operations.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}