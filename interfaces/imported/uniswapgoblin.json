{
  "schema": "../schema.json",
  "tags": [
    "swaps",
    "uniswap"
  ],
  "name": "UniswapGoblin",
  "description": "",
  "eventDecorators": [
    {
      "signature": "AddShare(uint256,uint256)",
      "name": "AddShare",
      "description": "Event for token purchase logging. Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "share",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Liquidate(uint256,uint256)",
      "name": "Liquidate",
      "description": "Event for token purchase logging. Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "wad",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event for token purchase logging. Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Reinvest(address,uint256,uint256)",
      "name": "Reinvest",
      "description": "Event for token purchase logging. Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "reward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "bounty",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RemoveShare(uint256,uint256)",
      "name": "RemoveShare",
      "description": "Event for token purchase logging. Emitted when ETH are Received by this wallet.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "share",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addStrat()",
      "name": "addStrat",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceToShare(uint256)",
      "name": "balanceToShare",
      "description": "Return the number of shares to receive if staking the given LP tokens.",
      "parameterDecorators": [
        {
          "name": "balance",
          "description": "the number of LP tokens to be converted to shares.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fToken()",
      "name": "fToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "factory()",
      "name": "factory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getMktSellAmount(uint256,uint256,uint256)",
      "name": "getMktSellAmount",
      "description": "Return maximum output given the input amount and the status of Uniswap reserves.",
      "parameterDecorators": [
        {
          "name": "aIn",
          "description": "The amount of asset to market sell.",
          "recommendedTypes": []
        },
        {
          "name": "rIn",
          "description": "the amount of asset in reserve for input.",
          "recommendedTypes": []
        },
        {
          "name": "rOut",
          "description": "The amount of asset in reserve for output.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "health(uint256)",
      "name": "health",
      "description": "Return the amount of ETH to receive if we are to liquidate the given position.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "The position ID to perform health check.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liqStrat()",
      "name": "liqStrat",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidate(uint256)",
      "name": "liquidate",
      "description": "Liquidate the given position by converting it to ETH and return back to caller.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "The position ID to perform liquidation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lpToken()",
      "name": "lpToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "okStrats(address)",
      "name": "okStrats",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "operator()",
      "name": "operator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recover(address,address,uint256)",
      "name": "recover",
      "description": "Recover ERC20 tokens that were accidentally sent to this smart contract.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "The token contract. Can be anything. This contract should not hold ERC20 tokens.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The address to send the tokens to.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The number of tokens to transfer to `to`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reinvest()",
      "name": "reinvest",
      "description": "Re-invest whatever this worker has earned back to staked LP tokens.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reinvestBountyBps()",
      "name": "reinvestBountyBps",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "router()",
      "name": "router",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setCriticalStrategies(address,address)",
      "name": "setCriticalStrategies",
      "description": "Update critical strategy smart contracts. EMERGENCY ONLY. Bad strategies can steal funds.",
      "parameterDecorators": [
        {
          "name": "_addStrat",
          "description": "The new add strategy contract.",
          "recommendedTypes": []
        },
        {
          "name": "_liqStrat",
          "description": "The new liquidate strategy contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setReinvestBountyBps(uint256)",
      "name": "setReinvestBountyBps",
      "description": "Set the reward bounty for calling reinvest operations.",
      "parameterDecorators": [
        {
          "name": "_reinvestBountyBps",
          "description": "The bounty value to update.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setStrategyOk(address[],bool)",
      "name": "setStrategyOk",
      "description": "Set the given strategies' approval status.",
      "parameterDecorators": [
        {
          "name": "strats",
          "description": "The strategy addresses.",
          "recommendedTypes": []
        },
        {
          "name": "isOk",
          "description": "Whether to approve or unapprove the given strategies.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "shareToBalance(uint256)",
      "name": "shareToBalance",
      "description": "Return the entitied LP token balance for the given shares.",
      "parameterDecorators": [
        {
          "name": "share",
          "description": "The number of shares to be converted to LP balance.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "shares(uint256)",
      "name": "shares",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "staking()",
      "name": "staking",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalShare()",
      "name": "totalShare",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uni()",
      "name": "uni",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "weth()",
      "name": "weth",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "work(uint256,address,uint256,bytes)",
      "name": "work",
      "description": "Work on the given position. Must be called by the operator.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "The position ID to work on.",
          "recommendedTypes": []
        },
        {
          "name": "user",
          "description": "The original user that is interacting with the operator.",
          "recommendedTypes": []
        },
        {
          "name": "debt",
          "description": "The amount of user debt to help the strategy make decisions.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "The encoded data, consisting of strategy address and calldata.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}