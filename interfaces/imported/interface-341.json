{
  "schema": "../schema.json",
  "tags": [],
  "name": "ProofOfHumanity",
  "description": "ProofOfHumanity This contract is a curated registry for people. The users are identified by their address and can be added or removed through the request-challenge protocol. In order to challenge a registration request the challenger must provide one of the four reasons. New requests firstly should gain sufficient amount of vouches from other registered users and only after that they can be accepted or challenged. The users who vouched for submission that lost the challenge with the reason Duplicate or DoesNotExist would be penalized with optional fine or ban period. NOTE: This contract trusts that the Arbitrator is honest and will not reenter or modify its costs during a call. The arbitrator must support appeal period.",
  "eventDecorators": [
    {
      "signature": "ArbitratorComplete(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "ArbitratorComplete",
      "description": "",
      "parameterDecorators": [
        {
          "name": "arbitrator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "governor",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "submissionBaseDeposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "submissionChallengeBaseDeposit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "submissionDuration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "challengePeriodDuration",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "requiredNumberOfVouches",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "sharedStakeMultiplier",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "winnerStakeMultiplier",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "loserStakeMultiplier",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Dispute(address,uint256,uint256,uint256)",
      "name": "Dispute",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_arbitrator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_disputeID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_metaEvidenceID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_evidenceGroupID",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Evidence(address,uint256,address,string)",
      "name": "Evidence",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_arbitrator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_evidenceGroupID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_party",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_evidence",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MetaEvidence(uint256,string)",
      "name": "MetaEvidence",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_metaEvidenceID",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_evidence",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Ruling(address,uint256,uint256)",
      "name": "Ruling",
      "description": "",
      "parameterDecorators": [
        {
          "name": "access",
          "description": "TRUE if the Watcher was given permissions, FALSE if permissions were removed.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "watcher",
          "description": "the address of the Watcher.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MULTIPLIER_DIVISOR()",
      "name": "MULTIPLIER_DIVISOR",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "NB_REASONS()",
      "name": "NB_REASONS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addSubmission(string,string,string)",
      "name": "addSubmission",
      "description": "Make a request to add a new entry to the list. Paying the full deposit right away is not required as it can be crowdfunded later.",
      "parameterDecorators": [
        {
          "name": "_evidence",
          "description": "A link to evidence using its URI.",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bio",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addSubmissionManually(address,string,string,string)",
      "name": "addSubmissionManually",
      "description": "Allows the governor to directly add a new submission to the list as a part of the seeding event.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of a newly added submission.",
          "recommendedTypes": []
        },
        {
          "name": "_evidence",
          "description": "A link to evidence using its URI.",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bio",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addVouch(address)",
      "name": "addVouch",
      "description": "Vouch for the submission.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the submission to vouch for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "arbitrator()",
      "name": "arbitrator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "arbitratorDisputeIDToChallenge(address,uint256)",
      "name": "arbitratorDisputeIDToChallenge",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "challengeID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "challenger",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "challengedSubmission",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "duplicateSubmissionIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "arbitratorExtraData()",
      "name": "arbitratorExtraData",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challengePeriodDuration()",
      "name": "challengePeriodDuration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challengeRequest(address,uint8,address,string)",
      "name": "challengeRequest",
      "description": "Challenge the submission's request. Accepts enough ETH to cover the deposit, reimburses the rest.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the submission which request to challenge.",
          "recommendedTypes": []
        },
        {
          "name": "_reason",
          "description": "The reason to challenge the request. Left empty for removal requests.",
          "recommendedTypes": []
        },
        {
          "name": "_duplicateID",
          "description": "The address of a supposed duplicate submission. Left empty if the reason is not Duplicate.",
          "recommendedTypes": []
        },
        {
          "name": "_evidence",
          "description": "A link to evidence using its URI. Ignored if not provided.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeArbitrator(address,bytes)",
      "name": "changeArbitrator",
      "description": "Change the arbitrator to be used for disputes that may be raised in the next requests. The arbitrator is trusted to support appeal periods and not reenter.",
      "parameterDecorators": [
        {
          "name": "_arbitrator",
          "description": "The new trusted arbitrator to be used in the next requests.",
          "recommendedTypes": []
        },
        {
          "name": "_arbitratorExtraData",
          "description": "The extra data used by the new arbitrator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeChallengePeriodDuration(uint256)",
      "name": "changeChallengePeriodDuration",
      "description": "Change the duration of the challenge period.",
      "parameterDecorators": [
        {
          "name": "_challengePeriodDuration",
          "description": "The new duration of the challenge period.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeGovernor(address)",
      "name": "changeGovernor",
      "description": "Change the governor of the contract.",
      "parameterDecorators": [
        {
          "name": "_governor",
          "description": "The address of the new governor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeLoserStakeMultiplier(uint256)",
      "name": "changeLoserStakeMultiplier",
      "description": "Change the proportion of arbitration fees that must be paid as fee stake by the party that lost the previous round.",
      "parameterDecorators": [
        {
          "name": "_loserStakeMultiplier",
          "description": "Multiplier of arbitration fees that must be paid as fee stake. In basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeMetaEvidence(string,string)",
      "name": "changeMetaEvidence",
      "description": "Update the meta evidence used for disputes.",
      "parameterDecorators": [
        {
          "name": "_registrationMetaEvidence",
          "description": "The meta evidence to be used for future registration request disputes.",
          "recommendedTypes": []
        },
        {
          "name": "_clearingMetaEvidence",
          "description": "The meta evidence to be used for future clearing request disputes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeRenewalTime(uint256)",
      "name": "changeRenewalTime",
      "description": "Change the time after which reapplication becomes possible.",
      "parameterDecorators": [
        {
          "name": "_renewalTime",
          "description": "The new value that defines the start of submission's renewal period.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeRequiredNumberOfVouches(uint256)",
      "name": "changeRequiredNumberOfVouches",
      "description": "Change the number of vouches required for the request to pass to the pending state.",
      "parameterDecorators": [
        {
          "name": "_requiredNumberOfVouches",
          "description": "The new required number of vouches.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeSharedStakeMultiplier(uint256)",
      "name": "changeSharedStakeMultiplier",
      "description": "Change the proportion of arbitration fees that must be paid as fee stake by parties when there is no winner or loser.",
      "parameterDecorators": [
        {
          "name": "_sharedStakeMultiplier",
          "description": "Multiplier of arbitration fees that must be paid as fee stake. In basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeStateToPending(address,address[])",
      "name": "changeStateToPending",
      "description": "Change submission's state from Vouching to PendingRegistration if all conditions are met.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the submission which status to change.",
          "recommendedTypes": []
        },
        {
          "name": "_vouches",
          "description": "Array of users which vouches to count.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeSubmissionBaseDeposit(uint256)",
      "name": "changeSubmissionBaseDeposit",
      "description": "Change the base amount required as a deposit to make a request for a submission.",
      "parameterDecorators": [
        {
          "name": "_submissionBaseDeposit",
          "description": "The new base amount of wei required to make a new request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeSubmissionChallengeBaseDeposit(uint256)",
      "name": "changeSubmissionChallengeBaseDeposit",
      "description": "Change the base amount required as a deposit to challenge a submission.",
      "parameterDecorators": [
        {
          "name": "_submissionChallengeBaseDeposit",
          "description": "The new base amount of wei required to challenge a submission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeSubmissionDuration(uint256)",
      "name": "changeSubmissionDuration",
      "description": "Change the time after which the registered status of a submission expires.",
      "parameterDecorators": [
        {
          "name": "_submissionDuration",
          "description": "The new duration of the time the submission is considered registered.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeWinnerStakeMultiplier(uint256)",
      "name": "changeWinnerStakeMultiplier",
      "description": "Change the proportion of arbitration fees that must be paid as fee stake by the winner of the previous round.",
      "parameterDecorators": [
        {
          "name": "_winnerStakeMultiplier",
          "description": "Multiplier of arbitration fees that must be paid as fee stake. In basis points.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executeRequest(address)",
      "name": "executeRequest",
      "description": "Execute a request if the challenge period passed and no one challenged the request.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the submission with the request to execute.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fundAppeal(address,uint256,uint8)",
      "name": "fundAppeal",
      "description": "Takes up to the total amount required to fund a side of an appeal. Reimburses the rest. Creates an appeal if both sides are fully funded.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the submission which request to fund.",
          "recommendedTypes": []
        },
        {
          "name": "_challengeID",
          "description": "The index of a dispute, created for the request.",
          "recommendedTypes": []
        },
        {
          "name": "_side",
          "description": "The recipient of the contribution.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fundSubmission(address)",
      "name": "fundSubmission",
      "description": "Fund the requester's deposit. Accepts enough ETH to cover the deposit, reimburses the rest.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the submission which ongoing request to fund.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getChallengeInfo(address,uint256,uint256)",
      "name": "getChallengeInfo",
      "description": "Gets the information of a particular challenge of the request.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the queried submission.",
          "recommendedTypes": []
        },
        {
          "name": "_request",
          "description": "The request to query.",
          "recommendedTypes": []
        },
        {
          "name": "_challengeID",
          "description": "The challenge to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "numberOfRounds",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "disputeID",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "ruling",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getContributions(address,uint256,uint256,uint256,address)",
      "name": "getContributions",
      "description": "Gets the contributions made by a party for a given round of a given challenge of a request.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the submission.",
          "recommendedTypes": []
        },
        {
          "name": "_request",
          "description": "The request to query.",
          "recommendedTypes": []
        },
        {
          "name": "_challengeID",
          "description": "the challenge to query.",
          "recommendedTypes": []
        },
        {
          "name": "_round",
          "description": "The round to query.",
          "recommendedTypes": []
        },
        {
          "name": "_contributor",
          "description": "The address of the contributor.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "contributions",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[3]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNumberOfVouches(address,uint256)",
      "name": "getNumberOfVouches",
      "description": "Gets the number of vouches of a particular request.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the queried submission.",
          "recommendedTypes": []
        },
        {
          "name": "_request",
          "description": "The request to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRequestInfo(address,uint256)",
      "name": "getRequestInfo",
      "description": "Gets information of a request of a submission.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the queried submission.",
          "recommendedTypes": []
        },
        {
          "name": "_request",
          "description": "The request to be queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "disputed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "numberOfChallenges",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "resolved",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "ultimateChallenger",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "numberOfReasons",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "currentReason",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "nbParallelDisputes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "arbitrator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "arbitratorExtraData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        },
        {
          "name": "requesterLost",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoundInfo(address,uint256,uint256,uint256)",
      "name": "getRoundInfo",
      "description": "Gets the information of a round of a request.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the queried submission.",
          "recommendedTypes": []
        },
        {
          "name": "_request",
          "description": "The request to query.",
          "recommendedTypes": []
        },
        {
          "name": "_challengeID",
          "description": "The challenge to query.",
          "recommendedTypes": []
        },
        {
          "name": "_round",
          "description": "The round to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "appealed",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "paidFees",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[3]"
        },
        {
          "name": "hasPaid",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool[3]"
        },
        {
          "name": "feeRewards",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getSubmissionInfo(address)",
      "name": "getSubmissionInfo",
      "description": "Returns the information of the submission. Includes length of requests array.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the queried submission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "status",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "submissionTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "renewalTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "numberOfRequests",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "registered",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "governor()",
      "name": "governor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "loserStakeMultiplier()",
      "name": "loserStakeMultiplier",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "metaEvidenceUpdates()",
      "name": "metaEvidenceUpdates",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "processVouches(address,uint256,uint256)",
      "name": "processVouches",
      "description": "Deletes vouches of the resolved request, so vouchings of users who vouched for it can be used in other submissions. Penalizes users who vouched for bad submissions.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the submission which vouches to iterate.",
          "recommendedTypes": []
        },
        {
          "name": "_requestID",
          "description": "The ID of the request which vouches to iterate.",
          "recommendedTypes": []
        },
        {
          "name": "_iterations",
          "description": "The number of iterations to go through.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reapplySubmission(string,string,string)",
      "name": "reapplySubmission",
      "description": "Make a request to refresh a submissionDuration. Paying the full deposit right away is not required as it can be crowdfunded later. Note that the user can reapply even when current submissionDuration has not expired, but only after the start of renewal period.",
      "parameterDecorators": [
        {
          "name": "_evidence",
          "description": "A link to evidence using its URI.",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_bio",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeSubmission(address,string)",
      "name": "removeSubmission",
      "description": "Make a request to remove a submission from the list. Requires full deposit. Accepts enough ETH to cover the deposit, reimburses the rest.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the submission to remove.",
          "recommendedTypes": []
        },
        {
          "name": "_evidence",
          "description": "A link to evidence using its URI.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeSubmissionManually(address)",
      "name": "removeSubmissionManually",
      "description": "Allows the governor to directly remove a registered entry from the list as a part of the seeding event.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of a submission to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeVouch(address)",
      "name": "removeVouch",
      "description": "Remove the submission's vouch that has been added earlier.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the submission to remove vouch from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renewalTime()",
      "name": "renewalTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "requiredNumberOfVouches()",
      "name": "requiredNumberOfVouches",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rule(uint256,uint256)",
      "name": "rule",
      "description": "Give a ruling for a dispute. Can only be called by the arbitrator. TRUSTED. Account for the situation where the winner loses a case due to paying less appeal fees than expected.",
      "parameterDecorators": [
        {
          "name": "_disputeID",
          "description": "ID of the dispute in the arbitrator contract.",
          "recommendedTypes": []
        },
        {
          "name": "_ruling",
          "description": "Ruling given by the arbitrator. Note that 0 is reserved for \"Refused to arbitrate\".",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sharedStakeMultiplier()",
      "name": "sharedStakeMultiplier",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submissionBaseDeposit()",
      "name": "submissionBaseDeposit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submissionChallengeBaseDeposit()",
      "name": "submissionChallengeBaseDeposit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submissionCount()",
      "name": "submissionCount",
      "description": "Returns the number of addresses that were submitted. Includes addresses that never made it to the list or were later removed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "count",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submissionDuration()",
      "name": "submissionDuration",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submissionList(uint256)",
      "name": "submissionList",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submissionToIndex(address)",
      "name": "submissionToIndex",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submissions(address)",
      "name": "submissions",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "status",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "registered",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "submissionTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "renewalTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "submitEvidence(address,string)",
      "name": "submitEvidence",
      "description": "Submit a reference to evidence. EVENT.",
      "parameterDecorators": [
        {
          "name": "_submissionID",
          "description": "The address of the submission which the evidence is related to.",
          "recommendedTypes": []
        },
        {
          "name": "_evidence",
          "description": "A link to an evidence using its URI.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "usedVouch(address)",
      "name": "usedVouch",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vouches(address,address)",
      "name": "vouches",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "winnerStakeMultiplier()",
      "name": "winnerStakeMultiplier",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawFeesAndRewards(address,address,uint256,uint256,uint256)",
      "name": "withdrawFeesAndRewards",
      "description": "Reimburses contributions if no disputes were raised. If a dispute was raised, sends the fee stake rewards and reimbursements proportionally to the contributions made to the winner of a dispute.",
      "parameterDecorators": [
        {
          "name": "_beneficiary",
          "description": "The address that made contributions to a request.",
          "recommendedTypes": []
        },
        {
          "name": "_submissionID",
          "description": "The address of the submission with the request from which to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "_request",
          "description": "The request from which to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "_challengeID",
          "description": "The ID of the challenge from which to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "_round",
          "description": "The round from which to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawSubmission()",
      "name": "withdrawSubmission",
      "description": "Allows to withdraw a mistakenly added submission while it's still in a vouching state.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}