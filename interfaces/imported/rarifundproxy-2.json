{
  "schema": "../schema.json",
  "tags": [],
  "name": "RariFundProxy",
  "description": "RariFundProxy. This contract faciliates deposits to RariFundManager from exchanges and withdrawals from RariFundManager for exchanges.",
  "eventDecorators": [
    {
      "signature": "FundManagerSet(address)",
      "name": "FundManagerSet",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PostWithdrawalExchange(address,address,uint256,uint256)",
      "name": "PostWithdrawalExchange",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "outputErc20Contract",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "payee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "withdrawalAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "takerAssetFilledAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PreDepositExchange(address,address,uint256,uint256)",
      "name": "PreDepositExchange",
      "description": "event emitted when a user has unstaked a token.",
      "parameterDecorators": [
        {
          "name": "inputErc20Contract",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "payee",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "makerAssetFilledAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "depositAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "exchangeAndDeposit(address,uint256,tuple(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],uint256)",
      "name": "exchangeAndDeposit",
      "description": "Exchanges and deposits funds to RariFund in exchange for RFT (via 0x). You can retrieve orders from the 0x swap API (https://0x.org/docs/api#get-swapv0quote). See the web client for implementation. Please note that you must approve RariFundProxy to transfer at least `inputAmount` unless you are inputting ETH. You also must input at least enough ETH to cover the protocol fee (and enough to cover `orders` if you are inputting ETH). We should be able to make this function external and use calldata for all parameters, but Solidity does not support calldata structs (https://github.com/ethereum/solidity/issues/5479).",
      "parameterDecorators": [
        {
          "name": "inputErc20Contract",
          "description": "The ERC20 contract address of the token to be exchanged. Set to address(0) to input ETH.",
          "recommendedTypes": []
        },
        {
          "name": "inputAmount",
          "description": "The amount of tokens to be exchanged (including taker fees).",
          "recommendedTypes": []
        },
        {
          "name": "orders",
          "description": "The limit orders to be filled in ascending order of the price you pay.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "makerAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "takerAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "feeRecipientAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "senderAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "makerAssetAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "takerAssetAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "makerFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "takerFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "expirationTimeSeconds",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "salt",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "makerAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "takerAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "makerFeeAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "takerFeeAssetData",
              "description": "",
              "type": "bytes"
            }
          ]
        },
        {
          "name": "signatures",
          "description": "The signatures for the orders.",
          "recommendedTypes": []
        },
        {
          "name": "takerAssetFillAmount",
          "description": "The amount of the taker asset to sell (excluding taker fees).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initializes the contract setting the deployer as the initial owner.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rariFundManager()",
      "name": "rariFundManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFundManager(address)",
      "name": "setFundManager",
      "description": "Sets or upgrades the RariFundManager of the RariFundProxy.",
      "parameterDecorators": [
        {
          "name": "newContract",
          "description": "The address of the new RariFundManager contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAndExchange(uint256,address,tuple(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],uint256)",
      "name": "withdrawAndExchange",
      "description": "Withdraws funds from RariFund in exchange for RFT and exchanges to them to the desired currency (if no 0x orders are supplied, exchanges DAI, USDC, USDT, TUSD, and mUSD via mStable). You can retrieve orders from the 0x swap API (https://0x.org/docs/api#get-swapv0quote). See the web client for implementation. Please note that you must approve RariFundManager to burn of the necessary amount of RFT. You also must input at least enough ETH to cover the protocol fees. We should be able to make this function external and use calldata for all parameters, but Solidity does not support calldata structs (https://github.com/ethereum/solidity/issues/5479).",
      "parameterDecorators": [
        {
          "name": "inputAmount",
          "description": "The amounts of tokens to be withdrawn and exchanged (including taker fees).",
          "recommendedTypes": []
        },
        {
          "name": "outputErc20Contract",
          "description": "The ERC20 contract address of the token to be outputted by the exchange. Set to address(0) to output ETH.",
          "recommendedTypes": []
        },
        {
          "name": "orders",
          "description": "The limit orders to be filled in ascending order of the price you pay.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "makerAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "takerAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "feeRecipientAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "senderAddress",
              "description": "",
              "type": "address"
            },
            {
              "name": "makerAssetAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "takerAssetAmount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "makerFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "takerFee",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "expirationTimeSeconds",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "salt",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "makerAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "takerAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "makerFeeAssetData",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "takerFeeAssetData",
              "description": "",
              "type": "bytes"
            }
          ]
        },
        {
          "name": "signatures",
          "description": "The signatures for the orders.",
          "recommendedTypes": []
        },
        {
          "name": "makerAssetFillAmount",
          "description": "The amount of the maker assets to buy.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}