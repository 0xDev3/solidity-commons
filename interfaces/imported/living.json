{"schema":"../schema.json","tags":[],"name":"Living","description":"","eventDecorators":[{"signature":"Appointment(uint8,address)","name":"Appointment","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":false},{"name":"_address","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"BatchTransacted(address,address,bytes32)","name":"BatchTransacted","description":"Shows the other signer and the operation hash that they signed specific batch transfer events are emitted in Batcher.","parameterDecorators":[{"name":"msgSender","description":"","recommendedTypes":[],"indexed":false},{"name":"otherSigner","description":"","recommendedTypes":[],"indexed":false},{"name":"operation","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"BatchTransfer(address,address,uint256)","name":"BatchTransfer","description":"Emitted when a `batchTransfer` transaction is executed.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":false},{"name":"recipient","description":"","recommendedTypes":[],"indexed":false},{"name":"value","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Deposited(address,uint256,bytes)","name":"Deposited","description":"","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":false},{"name":"value","description":"","recommendedTypes":[],"indexed":false},{"name":"data","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"DissolutionActivated(address)","name":"DissolutionActivated","description":"","parameterDecorators":[{"name":"_address","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"HeartbeatPulse(uint256)","name":"HeartbeatPulse","description":"","parameterDecorators":[{"name":"heartbeat","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Transacted(address,address,bytes32,address,uint256,bytes)","name":"Transacted","description":"","parameterDecorators":[{"name":"msgSender","description":"","recommendedTypes":[],"indexed":false},{"name":"otherSigner","description":"","recommendedTypes":[],"indexed":false},{"name":"operation","description":"","recommendedTypes":[],"indexed":false},{"name":"toAddress","description":"","recommendedTypes":[],"indexed":false},{"name":"value","description":"","recommendedTypes":[],"indexed":false},{"name":"data","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"ADMINISTRATIVE_ROLE()","name":"ADMINISTRATIVE_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"BENEFICIARY_ROLE()","name":"BENEFICIARY_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"activateDissolutionMode()","name":"activateDissolutionMode","description":"Irrevocably puts contract into dissolution mode. When in this mode, transactions may only be sent to beneficiary addresses. Emits an {DissolutionActivated} event.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":["DissolutionActivated(address)"],"readOnly":false},{"signature":"beneficiaries()","name":"beneficiaries","description":"Returns the beneficiaries of the trust.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"beneficiaries List of beneficiaries.","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"bud()","name":"bud","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"dissolutionMode()","name":"dissolutionMode","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"dissolved()","name":"dissolved","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"getNextSequenceId()","name":"getNextSequenceId","description":"Gets the next available sequence ID for signing when using executeAndConfirm. Returns the sequenceId one higher than the highest currently stored.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)","RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"grantor()","name":"grantor","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"heartbeat()","name":"heartbeat","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"isSigner(address)","name":"isSigner","description":"Determine if `signer` is a signer on this wallet.","parameterDecorators":[{"name":"signer","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)","name":"onERC1155BatchReceived","description":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","parameterDecorators":[{"name":"data","description":"Additional data with no specified format.","recommendedTypes":[]},{"name":"from","description":"The address which previously owned the token.","recommendedTypes":[]},{"name":"ids","description":"An array containing ids of each token being transferred (order and length must match values array).","recommendedTypes":[]},{"name":"values","description":"An array containing amounts of each token being transferred (order and length must match ids array).","recommendedTypes":[]},{"name":"data","description":"Additional data with no specified format.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed.","recommendedTypes":[],"solidityType":"bytes4"}],"emittableEvents":[],"readOnly":false},{"signature":"onERC1155Received(address,address,uint256,uint256,bytes)","name":"onERC1155Received","description":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","parameterDecorators":[{"name":"data","description":"Additional data with no specified format.","recommendedTypes":[]},{"name":"from","description":"The address which previously owned the token.","recommendedTypes":[]},{"name":"id","description":"The ID of the token being transferred.","recommendedTypes":[]},{"name":"value","description":"The amount of tokens being transferred.","recommendedTypes":[]},{"name":"data","description":"Additional data with no specified format.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed.","recommendedTypes":[],"solidityType":"bytes4"}],"emittableEvents":[],"readOnly":false},{"signature":"onERC721Received(address,address,uint256,bytes)","name":"onERC721Received","description":"ERC721 standard callback function for when a ERC721 is transfered.","parameterDecorators":[{"name":"_operator","description":"The address of the nft contract.","recommendedTypes":[]},{"name":"_from","description":"The address of the sender.","recommendedTypes":[]},{"name":"_tokenId","description":"The token id of the nft.","recommendedTypes":[]},{"name":"_data","description":"Additional data with no specified format, sent in call to `_to`.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes4"}],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)","RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)","RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"sendMultiSig(address,uint256,bytes,uint256,uint256,bytes)","name":"sendMultiSig","description":"A multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover. Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.","parameterDecorators":[{"name":"toAddress","description":"the destination address to send an outgoing transaction.","recommendedTypes":[]},{"name":"value","description":"the amount in Wei to be sent.","recommendedTypes":[]},{"name":"data","description":"the data to send to the toAddress when invoking the transaction.","recommendedTypes":[]},{"name":"expireTime","description":"the number of seconds since 1970 for which this transaction is valid.","recommendedTypes":[]},{"name":"sequenceId","description":"the unique sequence id obtainable from getNextSequenceId.","recommendedTypes":[]},{"name":"signature","description":"see Data Formats.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"sendMultiSigBatch(address[],uint256[],uint256,uint256,bytes)","name":"sendMultiSigBatch","description":"Execute a batched multi-signature transaction from this wallet using 2 signers: one from msg.sender and the other from ecrecover. Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated. The recipients and values to send are encoded in two arrays, where for index i, recipients[i] will be sent values[i].","parameterDecorators":[{"name":"recipients","description":"The list of recipients to send to.","recommendedTypes":[]},{"name":"values","description":"The list of values to send to.","recommendedTypes":[]},{"name":"expireTime","description":"the number of seconds since 1970 for which this transaction is valid.","recommendedTypes":[]},{"name":"sequenceId","description":"the unique sequence id obtainable from getNextSequenceId.","recommendedTypes":[]},{"name":"signature","description":"see Data Formats.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"sendMultiSigToken(address,uint256,address,uint256,uint256,bytes)","name":"sendMultiSigToken","description":"Execute a multi-signature token transfer from this wallet using 2 signers: one from msg.sender and the other from ecrecover. Sequence IDs are numbers starting from 1. They are used to prevent replay attacks and may not be repeated.","parameterDecorators":[{"name":"toAddress","description":"the destination address to send an outgoing transaction.","recommendedTypes":[]},{"name":"value","description":"the amount in tokens to be sent.","recommendedTypes":[]},{"name":"tokenContractAddress","description":"the address of the erc20 token contract.","recommendedTypes":[]},{"name":"expireTime","description":"the number of seconds since 1970 for which this transaction is valid.","recommendedTypes":[]},{"name":"sequenceId","description":"the unique sequence id obtainable from getNextSequenceId.","recommendedTypes":[]},{"name":"signature","description":"see Data Formats.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setTrustee(address)","name":"setTrustee","description":"See {ITrust-setTrustee}. Note `_trustee` should != address(0), however, if a specific trust does allow an absent trustee, this method can be overriden Emits an {Appointment} event.","parameterDecorators":[{"name":"_trustee","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":["Appointment(uint8,address)"],"readOnly":false},{"signature":"signers(address)","name":"signers","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"supportsInterface(bytes4)","name":"supportsInterface","description":"See {IERC165-supportsInterface}.","parameterDecorators":[{"name":"interfaceId","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"trustId()","name":"trustId","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes6"}],"emittableEvents":[],"readOnly":true},{"signature":"trustee()","name":"trustee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"updateHeartbeat()","name":"updateHeartbeat","description":"Pulses `heartbeat` to signal Grantor is alive and well. Note this function should only be callable by the Grantor (execept in cases where a specialized trust instrument allows another party to invoke this method). Emits an {HeartbeatPulse} event.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":["HeartbeatPulse(uint256)"],"readOnly":false}]}