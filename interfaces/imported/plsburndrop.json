{"schema":"../schema.json","tags":[],"name":"PlsBurnDrop","description":"","eventDecorators":[{"signature":"BurnDrop(address,uint256,uint256)","name":"BurnDrop","description":"Event when owner changes usdt rate. Emitted when `amount` reward tokens are taken from in this contract Note that `amount` may be zero.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":false},{"name":"ringAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"plsAmount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ClaimedTokens(address,address,uint256)","name":"ClaimedTokens","description":"Event when owner changes usdt rate. Emitted when `amount` reward tokens are taken from in this contract Note that `amount` may be zero.","parameterDecorators":[{"name":"token","description":"","recommendedTypes":[],"indexed":true},{"name":"owner","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Event when owner changes usdt rate. Emitted when `amount` reward tokens are taken from in this contract Note that `amount` may be zero.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"PLS_TOKEN()","name":"PLS_TOKEN","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"RING_TOKEN()","name":"RING_TOKEN","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"claimTokens(address)","name":"claimTokens","description":"This method can be used by the owner to extract mistakenly sent tokens to this contract.","parameterDecorators":[{"name":"_token","description":"The address of the token contract that you want to recover set to 0 in case you want to extract ether.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"convertFor(uint256)","name":"convertFor","description":"","parameterDecorators":[{"name":"_amountIn","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"denominator()","name":"denominator","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"endRatio()","name":"endRatio","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"endTime()","name":"endTime","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"paused()","name":"paused","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPaused(bool)","name":"setPaused","description":"","parameterDecorators":[{"name":"_status","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPlsContract(address)","name":"setPlsContract","description":"","parameterDecorators":[{"name":"_address","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRatio(uint256,uint256)","name":"setRatio","description":"","parameterDecorators":[{"name":"_startRatio","description":"","recommendedTypes":[]},{"name":"_endRatio","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRingContract(address)","name":"setRingContract","description":"","parameterDecorators":[{"name":"_address","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setTime(uint256,uint256)","name":"setTime","description":"","parameterDecorators":[{"name":"_startTime","description":"","recommendedTypes":[]},{"name":"_endTime","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"startRatio()","name":"startRatio","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"startTime()","name":"startTime","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"tokenFallback(address,uint256,bytes)","name":"tokenFallback","description":"ERC223 fallback function, make sure to check the msg.sender is from target token contracts.","parameterDecorators":[{"name":"_from","description":"- person who transfer token in for deposits or claim deposit with penalty KTON.","recommendedTypes":[]},{"name":"_amount","description":"- amount of token.","recommendedTypes":[]},{"name":"_data","description":"- data which indicate the operations.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}