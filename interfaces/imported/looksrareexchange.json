{
  "schema": "../schema.json",
  "tags": [],
  "name": "LooksRareExchange",
  "description": "LooksRareExchange.",
  "eventDecorators": [
    {
      "signature": "CancelAllOrders(address,uint256)",
      "name": "CancelAllOrders",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newMinNonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "CancelMultipleOrders(address,uint256[])",
      "name": "CancelMultipleOrders",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "orderNonces",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewCurrencyManager(address)",
      "name": "NewCurrencyManager",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "currencyManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewExecutionManager(address)",
      "name": "NewExecutionManager",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "executionManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewProtocolFeeRecipient(address)",
      "name": "NewProtocolFeeRecipient",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "protocolFeeRecipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewRoyaltyFeeManager(address)",
      "name": "NewRoyaltyFeeManager",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "royaltyFeeManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewTransferSelectorNFT(address)",
      "name": "NewTransferSelectorNFT",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "transferSelectorNFT",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoyaltyPayment(address,uint256,address,address,uint256)",
      "name": "RoyaltyPayment",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "collection",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "royaltyRecipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "currency",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TakerAsk(bytes32,uint256,address,address,address,address,address,uint256,uint256,uint256)",
      "name": "TakerAsk",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "orderHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "orderNonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "taker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "strategy",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "currency",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "collection",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TakerBid(bytes32,uint256,address,address,address,address,address,uint256,uint256,uint256)",
      "name": "TakerBid",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "orderHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "orderNonce",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "taker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "strategy",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "currency",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "collection",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "tokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "price",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DOMAIN_SEPARATOR()",
      "name": "DOMAIN_SEPARATOR",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WETH()",
      "name": "WETH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelAllOrdersForSender(uint256)",
      "name": "cancelAllOrdersForSender",
      "description": "Cancel all pending orders for a sender.",
      "parameterDecorators": [
        {
          "name": "minNonce",
          "description": "minimum user nonce.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelMultipleMakerOrders(uint256[])",
      "name": "cancelMultipleMakerOrders",
      "description": "Cancel maker orders.",
      "parameterDecorators": [
        {
          "name": "orderNonces",
          "description": "array of order nonces.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "currencyManager()",
      "name": "currencyManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executionManager()",
      "name": "executionManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isUserOrderNonceExecutedOrCancelled(address,uint256)",
      "name": "isUserOrderNonceExecutedOrCancelled",
      "description": "Check whether user order nonce is executed or cancelled.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "address of user.",
          "recommendedTypes": []
        },
        {
          "name": "orderNonce",
          "description": "nonce of the order.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "matchAskWithTakerBid(tuple(bool,address,uint256,uint256,uint256,bytes),tuple(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))",
      "name": "matchAskWithTakerBid",
      "description": "Match a takerBid with a matchAsk.",
      "parameterDecorators": [
        {
          "name": "takerBid",
          "description": "taker bid order.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "isOrderAsk",
              "description": "",
              "type": "bool"
            },
            {
              "name": "taker",
              "description": "",
              "type": "address"
            },
            {
              "name": "price",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minPercentageToAsk",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "params",
              "description": "",
              "type": "bytes"
            }
          ]
        },
        {
          "name": "makerAsk",
          "description": "maker ask order.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "isOrderAsk",
              "description": "",
              "type": "bool"
            },
            {
              "name": "signer",
              "description": "",
              "type": "address"
            },
            {
              "name": "collection",
              "description": "",
              "type": "address"
            },
            {
              "name": "price",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "strategy",
              "description": "",
              "type": "address"
            },
            {
              "name": "currency",
              "description": "",
              "type": "address"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "startTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "endTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minPercentageToAsk",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "params",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "matchAskWithTakerBidUsingETHAndWETH(tuple(bool,address,uint256,uint256,uint256,bytes),tuple(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))",
      "name": "matchAskWithTakerBidUsingETHAndWETH",
      "description": "Match ask with a taker bid order using ETH.",
      "parameterDecorators": [
        {
          "name": "takerBid",
          "description": "taker bid order.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "isOrderAsk",
              "description": "",
              "type": "bool"
            },
            {
              "name": "taker",
              "description": "",
              "type": "address"
            },
            {
              "name": "price",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minPercentageToAsk",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "params",
              "description": "",
              "type": "bytes"
            }
          ]
        },
        {
          "name": "makerAsk",
          "description": "maker ask order.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "isOrderAsk",
              "description": "",
              "type": "bool"
            },
            {
              "name": "signer",
              "description": "",
              "type": "address"
            },
            {
              "name": "collection",
              "description": "",
              "type": "address"
            },
            {
              "name": "price",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "strategy",
              "description": "",
              "type": "address"
            },
            {
              "name": "currency",
              "description": "",
              "type": "address"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "startTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "endTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minPercentageToAsk",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "params",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "matchBidWithTakerAsk(tuple(bool,address,uint256,uint256,uint256,bytes),tuple(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))",
      "name": "matchBidWithTakerAsk",
      "description": "Match a takerAsk with a makerBid.",
      "parameterDecorators": [
        {
          "name": "takerAsk",
          "description": "taker ask order.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "isOrderAsk",
              "description": "",
              "type": "bool"
            },
            {
              "name": "taker",
              "description": "",
              "type": "address"
            },
            {
              "name": "price",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minPercentageToAsk",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "params",
              "description": "",
              "type": "bytes"
            }
          ]
        },
        {
          "name": "makerBid",
          "description": "maker bid order.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "isOrderAsk",
              "description": "",
              "type": "bool"
            },
            {
              "name": "signer",
              "description": "",
              "type": "address"
            },
            {
              "name": "collection",
              "description": "",
              "type": "address"
            },
            {
              "name": "price",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "tokenId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "amount",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "strategy",
              "description": "",
              "type": "address"
            },
            {
              "name": "currency",
              "description": "",
              "type": "address"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "startTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "endTime",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "minPercentageToAsk",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "params",
              "description": "",
              "type": "bytes"
            },
            {
              "name": "v",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "r",
              "description": "",
              "type": "bytes32"
            },
            {
              "name": "s",
              "description": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "protocolFeeRecipient()",
      "name": "protocolFeeRecipient",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "royaltyFeeManager()",
      "name": "royaltyFeeManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferSelectorNFT()",
      "name": "transferSelectorNFT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateCurrencyManager(address)",
      "name": "updateCurrencyManager",
      "description": "Update currency manager.",
      "parameterDecorators": [
        {
          "name": "_currencyManager",
          "description": "new currency manager address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateExecutionManager(address)",
      "name": "updateExecutionManager",
      "description": "Update execution manager.",
      "parameterDecorators": [
        {
          "name": "_executionManager",
          "description": "new execution manager address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateProtocolFeeRecipient(address)",
      "name": "updateProtocolFeeRecipient",
      "description": "Update protocol fee and recipient.",
      "parameterDecorators": [
        {
          "name": "_protocolFeeRecipient",
          "description": "new recipient for protocol fees.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateRoyaltyFeeManager(address)",
      "name": "updateRoyaltyFeeManager",
      "description": "Update royalty fee manager.",
      "parameterDecorators": [
        {
          "name": "_royaltyFeeManager",
          "description": "new fee manager address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateTransferSelectorNFT(address)",
      "name": "updateTransferSelectorNFT",
      "description": "Update transfer selector NFT.",
      "parameterDecorators": [
        {
          "name": "_transferSelectorNFT",
          "description": "new transfer selector address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userMinOrderNonce(address)",
      "name": "userMinOrderNonce",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}