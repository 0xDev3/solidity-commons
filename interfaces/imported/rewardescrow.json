{
  "schema": "../schema.json",
  "tags": [
    "escrows"
  ],
  "name": "RewardEscrow",
  "description": "",
  "eventDecorators": [
    {
      "signature": "FeePoolUpdated(address)",
      "name": "FeePoolUpdated",
      "description": "Hash to mark updated provenance hash. Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "newFeePool",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerChanged(address,address)",
      "name": "OwnerChanged",
      "description": "Hash to mark updated provenance hash. Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "oldOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerNominated(address)",
      "name": "OwnerNominated",
      "description": "Hash to mark updated provenance hash. Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SynthetixUpdated(address)",
      "name": "SynthetixUpdated",
      "description": "Hash to mark updated provenance hash. Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "newSynthetix",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Vested(address,uint256,uint256)",
      "name": "Vested",
      "description": "Hash to mark updated provenance hash. Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "time",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VestingEntryCreated(address,uint256,uint256)",
      "name": "VestingEntryCreated",
      "description": "Hash to mark updated provenance hash. Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "time",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MAX_VESTING_ENTRIES()",
      "name": "MAX_VESTING_ENTRIES",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "appendVestingEntry(address,uint256)",
      "name": "appendVestingEntry",
      "description": "Add a new vesting entry at a given time and quantity to an account's schedule. A call to this should accompany a previous successful call to synthetix.transfer(rewardEscrow, amount), to ensure that when the funds are withdrawn, there is enough balance. Note; although this function could technically be used to produce unbounded arrays, it's only withinn the 4 year period of the weekly inflation schedule.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The account to append a new vesting entry to.",
          "recommendedTypes": []
        },
        {
          "name": "quantity",
          "description": "The quantity of SNX that will be escrowed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "balanceOf(address)",
      "name": "balanceOf",
      "description": "A simple alias to totalEscrowedAccountBalance: provides ERC20 balance integration.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkAccountSchedule(address)",
      "name": "checkAccountSchedule",
      "description": "return the full vesting schedule entries vest for a given user. For DApps to display the vesting schedule for the inflationary supply over 5 years. Solidity cant return variable length arrays so this is returning pairs of data. Vesting Time at [0] and quantity at [1] and so on.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[520]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feePool()",
      "name": "feePool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNextVestingEntry(address)",
      "name": "getNextVestingEntry",
      "description": "Obtain the next schedule entry that will vest for a given user.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[2]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNextVestingIndex(address)",
      "name": "getNextVestingIndex",
      "description": "Obtain the index of the next schedule entry that will vest for a given user.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNextVestingQuantity(address)",
      "name": "getNextVestingQuantity",
      "description": "Obtain the quantity which the next schedule entry will vest for a given user.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNextVestingTime(address)",
      "name": "getNextVestingTime",
      "description": "Obtain the time at which the next schedule entry will vest for a given user.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVestingQuantity(address,uint256)",
      "name": "getVestingQuantity",
      "description": "Get the quantity of SNX associated with a given schedule entry.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVestingScheduleEntry(address,uint256)",
      "name": "getVestingScheduleEntry",
      "description": "Get a particular schedule entry for an account.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[2]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVestingTime(address,uint256)",
      "name": "getVestingTime",
      "description": "Get the time at which a given schedule entry will vest.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nominateNewOwner(address)",
      "name": "nominateNewOwner",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nominatedOwner()",
      "name": "nominatedOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numVestingEntries(address)",
      "name": "numVestingEntries",
      "description": "The number of vesting dates in an account's schedule.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setFeePool(address)",
      "name": "setFeePool",
      "description": "set the FeePool contract as it is the only authority to be able to call appendVestingEntry with the onlyFeePool modifer.",
      "parameterDecorators": [
        {
          "name": "_feePool",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSynthetix(address)",
      "name": "setSynthetix",
      "description": "set the synthetix contract address as we need to transfer SNX when the user vests.",
      "parameterDecorators": [
        {
          "name": "_synthetix",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "synthetix()",
      "name": "synthetix",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalEscrowedAccountBalance(address)",
      "name": "totalEscrowedAccountBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalEscrowedBalance()",
      "name": "totalEscrowedBalance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalVestedAccountBalance(address)",
      "name": "totalVestedAccountBalance",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vest()",
      "name": "vest",
      "description": "Allow a user to withdraw any SNX in their schedule that have vested.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "vestingSchedules(address,uint256,uint256)",
      "name": "vestingSchedules",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}