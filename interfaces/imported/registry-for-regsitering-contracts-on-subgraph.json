{
  "schema": "../schema.json",
  "tags": [],
  "name": "Registry",
  "description": "Registry for regsitering contracts on Subgraph. Event emiited is used to register contracts on the subgraph, after deployment from which events can be tracked.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TenderizerCreated(tuple)",
      "name": "TenderizerCreated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "config",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addTenderizer(tuple(string,address,address,address,address,address))",
      "name": "addTenderizer",
      "description": "This is not called from a contract/factory but directly from the deployment script.",
      "parameterDecorators": [
        {
          "name": "config",
          "description": "contract addresses of deployment.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "name",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "steak",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tenderizer",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tenderToken",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tenderSwap",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tenderFarm",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}