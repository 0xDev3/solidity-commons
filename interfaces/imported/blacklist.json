{
  "schema": "../schema.json",
  "tags": [],
  "name": "Blacklist",
  "description": "Blacklist. The Blacklist contract has a blacklist of addresses, and provides basic authorization control functions.This simplifies the implementation of \"user permissions\".",
  "eventDecorators": [
    {
      "signature": "BlacklistedAddressAdded(address)",
      "name": "BlacklistedAddressAdded",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "address of the pool.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BlacklistedAddressRemoved(address)",
      "name": "BlacklistedAddressRemoved",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "pool",
          "description": "address of the pool.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addAddressToBlacklist(address)",
      "name": "addAddressToBlacklist",
      "description": "Add an address to the blacklist.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "true if the address was added to the blacklist, false if the address was already in the blacklist.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addAddressesToBlacklist(address[])",
      "name": "addAddressesToBlacklist",
      "description": "Add addresses to the blacklist.",
      "parameterDecorators": [
        {
          "name": "addrs",
          "description": "addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "true if at least one address was added to the blacklist, false if all addresses were already in the blacklist.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "blacklistAddresses(uint256)",
      "name": "blacklistAddresses",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBlacklist()",
      "name": "getBlacklist",
      "description": "Get all blacklist wallet addresses.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeAddressFromBlacklist(address)",
      "name": "removeAddressFromBlacklist",
      "description": "Remove an address from the blacklist.",
      "parameterDecorators": [
        {
          "name": "addr",
          "description": "address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "true if the address was removed from the blacklist, false if the address wasn't in the blacklist in the first place.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeAddressesFromBlacklist(address[])",
      "name": "removeAddressesFromBlacklist",
      "description": "Remove addresses from the blacklist.",
      "parameterDecorators": [
        {
          "name": "addrs",
          "description": "addresses.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "success",
          "description": "true if at least one address was removed from the blacklist, false if all addresses weren't in the blacklist in the first place.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}