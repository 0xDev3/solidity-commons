{
  "schema": "../schema.json",
  "tags": [],
  "name": "DELTA_Limited_Staking_Window",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "CLAIMING_PERIOD()",
      "name": "CLAIMING_PERIOD",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DELTA_FINANCIAL_MULTISIG()",
      "name": "DELTA_FINANCIAL_MULTISIG",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "INTERIM_ADMIN()",
      "name": "INTERIM_ADMIN",
      "description": "the person who sets the multisig wallet, happens only once.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "LSW_RUN_TIME()",
      "name": "LSW_RUN_TIME",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_ETH_POOL_SEED()",
      "name": "MAX_ETH_POOL_SEED",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MAX_TIME_BONUS_PERCENT()",
      "name": "MAX_TIME_BONUS_PERCENT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminEndLSWAndRefundEveryone()",
      "name": "adminEndLSWAndRefundEveryone",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "allLiquidityContributionsOfAnAddress(address)",
      "name": "allLiquidityContributionsOfAnAddress",
      "description": "we loop over all liquidity contributions of a person and return them here for front end display Note this might suffer from gas limits on infura if there are enogh deposits and we are aware of that Its just a nice helper function that is not nessesary.",
      "parameterDecorators": [
        {
          "name": "person",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "liquidityContributionsOfPerson",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimOrStakeAndClaimLP(bool)",
      "name": "claimOrStakeAndClaimLP",
      "description": "",
      "parameterDecorators": [
        {
          "name": "claimToWalletInstead",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimedLP(address)",
      "name": "claimedLP",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "contributeLiquidity(bool,address,uint256)",
      "name": "contributeLiquidity",
      "description": "",
      "parameterDecorators": [
        {
          "name": "readAndAgreedToLiquidityProviderAgreement",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "referrerAddress",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "referralID",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deltaDeepFarmingVaultAddress()",
      "name": "deltaDeepFarmingVaultAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deltaTokenAddress()",
      "name": "deltaTokenAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "endLiquidityDeployment()",
      "name": "endLiquidityDeployment",
      "description": "a publically callable function that ends the LSW, adds liquidity and splits RLP for each credit.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "extendLSWEndTime(uint256)",
      "name": "extendLSWEndTime",
      "description": "",
      "parameterDecorators": [
        {
          "name": "numberSeconds",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "finalizeLSW(address)",
      "name": "finalizeLSW",
      "description": "Transfer any remaining tokens in the contract This is done after the claiming period is over in case there are malformed not claimed referal amounts.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getRefund()",
      "name": "getRefund",
      "description": "this function allows anyone to refund the eth deposited in case the contract cannot finish This is a nessesary function because of the contrract not having admin controls And is only here as a safety pillow failure.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getWETHBonusForReferrals()",
      "name": "getWETHBonusForReferrals",
      "description": "Sends the bonus WETH to the referer after LSW is over.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "liquidityContributedInETHUnitsMapping(address)",
      "name": "liquidityContributedInETHUnitsMapping",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityContributionsArray(uint256)",
      "name": "liquidityContributionsArray",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "byWho",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "howMuchETHUnits",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "contributionTimestamp",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "creditsAdded",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityCreditsMapping(address)",
      "name": "liquidityCreditsMapping",
      "description": "Each person has a credit based on their referrals and other bonuses as well as ETH contributions. This is what is used for owed LP.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityGenerationEndTimestamp()",
      "name": "liquidityGenerationEndTimestamp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityGenerationHasEnded()",
      "name": "liquidityGenerationHasEnded",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityGenerationHasStarted()",
      "name": "liquidityGenerationHasStarted",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityGenerationParticipationAgreement()",
      "name": "liquidityGenerationParticipationAgreement",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityGenerationStartTimestamp()",
      "name": "liquidityGenerationStartTimestamp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "makeRefCode()",
      "name": "makeRefCode",
      "description": "publically callable function that assigns a sequential shortened referral ID so a long one doesnt need to be provided in the URL.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onlyInterimAdmin()",
      "name": "onlyInterimAdmin",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onlyMultisig()",
      "name": "onlyMultisig",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "openRefunds()",
      "name": "openRefunds",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rebasingLP()",
      "name": "rebasingLP",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "referralBonusWETH(address)",
      "name": "referralBonusWETH",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "referralBonusWETHClaimed(address)",
      "name": "referralBonusWETHClaimed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "referralCodeMappingIndexedByAddress(address)",
      "name": "referralCodeMappingIndexedByAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "referralCodeMappingIndexedByID(uint256)",
      "name": "referralCodeMappingIndexedByID",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "refundClaimed(address)",
      "name": "refundClaimed",
      "description": "Variables used for potential refund if the liquidity addition fails. This failover happens 2 days after LSW is supposed to be over, and its is not.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "refundsOpen()",
      "name": "refundsOpen",
      "description": "boolean flag that can be initiated if LSW didnt end 2 days after it was supposed to calling the refund function.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "reserveVaultAddress()",
      "name": "reserveVaultAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rlpPerCredit()",
      "name": "rlpPerCredit",
      "description": "Calculated at the time of liquidity addition. RLP per each credit.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "secondsLeftInLiquidityGenerationEvent()",
      "name": "secondsLeftInLiquidityGenerationEvent",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setDELTAToken(address,bool)",
      "name": "setDELTAToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "deltaToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "delegateCall",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFarmingVaultAddress(address)",
      "name": "setFarmingVaultAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "farmingVault",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMultisig(address)",
      "name": "setMultisig",
      "description": "",
      "parameterDecorators": [
        {
          "name": "multisig",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRLPWrap(address)",
      "name": "setRLPWrap",
      "description": "Helper functions.",
      "parameterDecorators": [
        {
          "name": "rlpAddress",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setReserveVault(address)",
      "name": "setReserveVault",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reserveVault",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "startLiquidityGeneration()",
      "name": "startLiquidityGeneration",
      "description": "This function starts the LSW and opens deposits and creates the RLP wrap.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalCreditValue()",
      "name": "totalCreditValue",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalReferralIDs()",
      "name": "totalReferralIDs",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalWETHEarmarkedForReferrers()",
      "name": "totalWETHEarmarkedForReferrers",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "wETH()",
      "name": "wETH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}