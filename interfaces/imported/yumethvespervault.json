{
  "schema": "../schema.json",
  "tags": [
    "vaults"
  ],
  "name": "YumEthVesperVault",
  "description": "",
  "eventDecorators": [
    {
      "signature": "ActiveVaultUpdated(address)",
      "name": "ActiveVaultUpdated",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "adapter",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CollateralizationLimitUpdated(uint256)",
      "name": "CollateralizationLimitUpdated",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "limit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EmergencyExitUpdated(bool)",
      "name": "EmergencyExitUpdated",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "status",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundsFlushed(uint256)",
      "name": "FundsFlushed",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundsHarvested(uint256,uint256)",
      "name": "FundsHarvested",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "withdrawnAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "decreasedValue",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundsRecalled(uint256,uint256,uint256)",
      "name": "FundsRecalled",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "vaultId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "withdrawnAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "decreasedValue",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "GovernanceUpdated(address)",
      "name": "GovernanceUpdated",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "governance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "HarvestFeeUpdated(uint256)",
      "name": "HarvestFeeUpdated",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "fee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "PendingGovernanceUpdated(address)",
      "name": "PendingGovernanceUpdated",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "pendingGovernance",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RewardsUpdated(address)",
      "name": "RewardsUpdated",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "treasury",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SentinelUpdated(address)",
      "name": "SentinelUpdated",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "sentinel",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokensDeposited(address,uint256)",
      "name": "TokensDeposited",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokensLiquidated(address,uint256,uint256,uint256)",
      "name": "TokensLiquidated",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "requestedAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "withdrawnAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "decreasedValue",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokensRepaid(address,uint256,uint256)",
      "name": "TokensRepaid",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "parentAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "childAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokensWithdrawn(address,uint256,uint256,uint256)",
      "name": "TokensWithdrawn",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "requestedAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "withdrawnAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "decreasedValue",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransmuterUpdated(address)",
      "name": "TransmuterUpdated",
      "description": "Must be emitted in withdraw() function.",
      "parameterDecorators": [
        {
          "name": "transmuter",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MAXIMUM_COLLATERALIZATION_LIMIT()",
      "name": "MAXIMUM_COLLATERALIZATION_LIMIT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MINIMUM_COLLATERALIZATION_LIMIT()",
      "name": "MINIMUM_COLLATERALIZATION_LIMIT",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "PERCENT_RESOLUTION()",
      "name": "PERCENT_RESOLUTION",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ZERO_ADDRESS()",
      "name": "ZERO_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "_linkGasOracle()",
      "name": "_linkGasOracle",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptGovernance()",
      "name": "acceptGovernance",
      "description": "Accepts the role as governance. This function reverts if the caller is not the new pending governance.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collateralizationLimit()",
      "name": "collateralizationLimit",
      "description": "Gets the collateralization limit. The collateralization limit is the minimum ratio of collateral to debt that is allowed by the system.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the collateralization limit.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(uint256)",
      "name": "deposit",
      "description": "Deposits WETH into a CDP. This function reverts if an emergency exit is active. This is in place to prevent the potential loss of additional funds.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "the amount of collateral to deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit()",
      "name": "deposit",
      "description": "Wraps ETH in WETH and deposits into a CDP This function reverts if an emergency exit is active. This is in place to prevent the potential loss of additional funds.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyExit()",
      "name": "emergencyExit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "flush()",
      "name": "flush",
      "description": "Flushes buffered tokens to the active vault. This function reverts if an emergency exit is active. This is in place to prevent the potential loss of additional funds.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the amount of tokens flushed to the active vault.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "flushActivator()",
      "name": "flushActivator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCdpLastDeposit(address)",
      "name": "getCdpLastDeposit",
      "description": "Gets the last recorded block of when a user made a deposit into their CDP.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "the user account of the CDP to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the block number of the last deposit.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCdpTotalCredit(address)",
      "name": "getCdpTotalCredit",
      "description": "Get the total amount of credit that a CDP has.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "the user account of the CDP to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the amount of credit.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCdpTotalDebt(address)",
      "name": "getCdpTotalDebt",
      "description": "Get the total amount of alchemic tokens borrowed from a CDP.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "the user account of the CDP to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the borrowed amount of tokens.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCdpTotalDeposited(address)",
      "name": "getCdpTotalDeposited",
      "description": "Get the total amount of collateral deposited into a CDP.",
      "parameterDecorators": [
        {
          "name": "_account",
          "description": "the user account of the CDP to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the deposited amount of tokens.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVaultAdapter(uint256)",
      "name": "getVaultAdapter",
      "description": "Get the adapter of a vault.",
      "parameterDecorators": [
        {
          "name": "_vaultId",
          "description": "the identifier of the vault.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the vault adapter.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVaultTotalDeposited(uint256)",
      "name": "getVaultTotalDeposited",
      "description": "Get the total amount of the parent asset that has been deposited into a vault.",
      "parameterDecorators": [
        {
          "name": "_vaultId",
          "description": "the identifier of the vault.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the total amount of deposited tokens.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "governance()",
      "name": "governance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "harvest(uint256)",
      "name": "harvest",
      "description": "Harvests yield from a vault.",
      "parameterDecorators": [
        {
          "name": "_vaultId",
          "description": "the identifier of the vault to harvest from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "harvestFee()",
      "name": "harvestFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Initializes the contract. This function checks that the transmuter and rewards have been set and sets up the active vault.",
      "parameterDecorators": [
        {
          "name": "_adapter",
          "description": "the vault adapter of the active vault.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidate(uint256)",
      "name": "liquidate",
      "description": "Attempts to liquidate part of a CDP's collateral to pay back its debt.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "the amount of collateral to attempt to liquidate.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "migrate(address)",
      "name": "migrate",
      "description": "Migrates the system to a new vault. This function reverts if the vault adapter is the zero address, if the token that the vault adapter accepts is not the token that this contract defines as the parent asset, or if the contract has not yet been initialized.",
      "parameterDecorators": [
        {
          "name": "_adapter",
          "description": "the adapter for the vault the system will migrate to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "mint(uint256)",
      "name": "mint",
      "description": "Mints synthetic tokens by either claiming credit or increasing the debt. Claiming credit will take priority over increasing the debt. This function reverts if the debt is increased and the CDP health check fails.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "the amount of alchemic tokens to borrow.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "pegMinimum()",
      "name": "pegMinimum",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingGovernance()",
      "name": "pendingGovernance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recall(uint256,uint256)",
      "name": "recall",
      "description": "Recalls an amount of deposited funds from a vault to this contract.",
      "parameterDecorators": [
        {
          "name": "_vaultId",
          "description": "the identifier of the recall funds from.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "recallAll(uint256)",
      "name": "recallAll",
      "description": "Recalls all the deposited funds from a vault to this contract.",
      "parameterDecorators": [
        {
          "name": "_vaultId",
          "description": "the identifier of the recall funds from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "repay()",
      "name": "repay",
      "description": "Wraps ETH in WETH and repays debt with it.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "repay(uint256,uint256)",
      "name": "repay",
      "description": "Repays debt with the native and or synthetic token. An approval is required to transfer native tokens to the transmuter.",
      "parameterDecorators": [
        {
          "name": "_parentAmount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_childAmount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewards()",
      "name": "rewards",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sentinel()",
      "name": "sentinel",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setCollateralizationLimit(uint256)",
      "name": "setCollateralizationLimit",
      "description": "Sets the collateralization limit. This function reverts if the caller is not the current governance or if the collateralization limit is outside of the accepted bounds.",
      "parameterDecorators": [
        {
          "name": "_limit",
          "description": "the new collateralization limit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setEmergencyExit(bool)",
      "name": "setEmergencyExit",
      "description": "Sets if the contract should enter emergency exit mode.",
      "parameterDecorators": [
        {
          "name": "_emergencyExit",
          "description": "if the contract should enter emergency exit mode.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFlushActivator(uint256)",
      "name": "setFlushActivator",
      "description": "Sets the flushActivator.",
      "parameterDecorators": [
        {
          "name": "_flushActivator",
          "description": "the new flushActivator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setHarvestFee(uint256)",
      "name": "setHarvestFee",
      "description": "Sets the harvest fee. This function reverts if the caller is not the current governance.",
      "parameterDecorators": [
        {
          "name": "_harvestFee",
          "description": "the new harvest fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOracleAddress(address,uint256)",
      "name": "setOracleAddress",
      "description": "Set oracle.",
      "parameterDecorators": [
        {
          "name": "Oracle",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "peg",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPendingGovernance(address)",
      "name": "setPendingGovernance",
      "description": "Sets the pending governance. This function reverts if the new pending governance is the zero address or the caller is not the current governance. This is to prevent the contract governance being set to the zero address which would deadlock privileged contract functionality.",
      "parameterDecorators": [
        {
          "name": "_pendingGovernance",
          "description": "the new pending governance.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRewards(address)",
      "name": "setRewards",
      "description": "Sets the rewards contract. This function reverts if the new rewards contract is the zero address or the caller is not the current governance.",
      "parameterDecorators": [
        {
          "name": "_rewards",
          "description": "the new rewards contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSentinel(address)",
      "name": "setSentinel",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_sentinel",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTransmuter(address)",
      "name": "setTransmuter",
      "description": "Sets the transmuter. This function reverts if the new transmuter is the zero address or the caller is not the current governance.",
      "parameterDecorators": [
        {
          "name": "_transmuter",
          "description": "the new transmuter.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalDeposited()",
      "name": "totalDeposited",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transmuter()",
      "name": "transmuter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vaultCount()",
      "name": "vaultCount",
      "description": "Gets the number of vaults in the vault list.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the vault count.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "waEth()",
      "name": "waEth",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "weth()",
      "name": "weth",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Attempts to withdraw part of a CDP's collateral. This function reverts if a deposit into the CDP was made in the same block. This is to prevent flash loan attacks on other internal or external systems.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "the amount of collateral to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}