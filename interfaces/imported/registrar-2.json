{
  "schema": "../schema.json",
  "tags": [],
  "name": "Registrar",
  "description": "Registrar. The Registrar is a registry mapping an accountId to the user's primary and secondary wallets The digital signature of a wallet with the SIGNER role is required to invoke adding data to this contract.",
  "eventDecorators": [
    {
      "signature": "Added(uint256,address)",
      "name": "Added",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "primary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Promotion(uint256,address)",
      "name": "Promotion",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "primary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Registration(uint256,address)",
      "name": "Registration",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "primary",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Removal(uint256,address)",
      "name": "Removal",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "wallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ADMIN()",
      "name": "ADMIN",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SIGNER()",
      "name": "SIGNER",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "accounts(address)",
      "name": "accounts",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "add(tuple(address,address[],address,uint256,uint256,bytes32),bytes)",
      "name": "add",
      "description": "Overwrite `primary` and add `secondary` accounts to an existing account given a valid signature.",
      "parameterDecorators": [
        {
          "name": "_payload",
          "description": "AddPayload.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "primary",
              "description": "",
              "type": "address"
            },
            {
              "name": "wallets",
              "description": "",
              "type": "address[]"
            },
            {
              "name": "registrar",
              "description": "",
              "type": "address"
            },
            {
              "name": "accountId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "chainId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "name": "_signature",
          "description": "Signature of a wallet with the SIGNER role.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "encode(tuple(address,address[],address,uint256,uint256,bytes32))",
      "name": "encode",
      "description": "Encode AddPayload for signature verification.",
      "parameterDecorators": [
        {
          "name": "_payload",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "primary",
              "description": "",
              "type": "address"
            },
            {
              "name": "wallets",
              "description": "",
              "type": "address[]"
            },
            {
              "name": "registrar",
              "description": "",
              "type": "address"
            },
            {
              "name": "accountId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "chainId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bytes32 checksum.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccountId(address)",
      "name": "getAccountId",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAccountInfo(address)",
      "name": "getAccountInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPrimaryWallet(uint256)",
      "name": "getPrimaryWallet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_accountId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nonces(address,bytes32)",
      "name": "nonces",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Pauses the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "primaryWallets(uint256)",
      "name": "primaryWallets",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "promote(address)",
      "name": "promote",
      "description": "Allows a user to promote @param _wallet to primary status.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The secondary wallet to promote.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "register(tuple(address,address[],address,uint256,uint256,bytes32),bytes)",
      "name": "register",
      "description": "Create a new account and add it to the Registrar, requires valid signature from a wallet with the SIGNER role.",
      "parameterDecorators": [
        {
          "name": "_payload",
          "description": "AddPayload.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "primary",
              "description": "",
              "type": "address"
            },
            {
              "name": "wallets",
              "description": "",
              "type": "address[]"
            },
            {
              "name": "registrar",
              "description": "",
              "type": "address"
            },
            {
              "name": "accountId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "chainId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "name": "_signature",
          "description": "Signature of a wallet with the SIGNER role.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The account id.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "remove(address)",
      "name": "remove",
      "description": "Allows a user to remove a secondary @param _wallet from their account.",
      "parameterDecorators": [
        {
          "name": "_wallet",
          "description": "The secondary wallet to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "Unpauses the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "verify(tuple(address,address[],address,uint256,uint256,bytes32),bytes)",
      "name": "verify",
      "description": "Checks the validity of _payload ensuring sufficient permissions are met.",
      "parameterDecorators": [
        {
          "name": "_payload",
          "description": "AddPayload.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "primary",
              "description": "",
              "type": "address"
            },
            {
              "name": "wallets",
              "description": "",
              "type": "address[]"
            },
            {
              "name": "registrar",
              "description": "",
              "type": "address"
            },
            {
              "name": "accountId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "chainId",
              "description": "",
              "type": "uint256"
            },
            {
              "name": "nonce",
              "description": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "name": "_signature",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address signer The wallet that signed the payload.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}