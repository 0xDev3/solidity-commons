{
  "schema": "../schema.json",
  "tags": [],
  "name": "CrafterMint",
  "description": "Pluggable Crafting Contract.",
  "eventDecorators": [
    {
      "signature": "AdminChanged(address,address)",
      "name": "AdminChanged",
      "description": "Hash to mark updated provenance hash.",
      "parameterDecorators": [
        {
          "name": "previousAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BeaconUpgraded(address)",
      "name": "BeaconUpgraded",
      "description": "Hash to mark updated provenance hash.",
      "parameterDecorators": [
        {
          "name": "beacon",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CreateRecipe(address,tuple[],tuple[])",
      "name": "CreateRecipe",
      "description": "Hash to mark updated provenance hash.",
      "parameterDecorators": [
        {
          "name": "creator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "inputs",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "outputs",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Initialized(uint8)",
      "name": "Initialized",
      "description": "Hash to mark updated provenance hash.",
      "parameterDecorators": [
        {
          "name": "version",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Hash to mark updated provenance hash.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RecipeCraft(uint256,uint256,address)",
      "name": "RecipeCraft",
      "description": "Hash to mark updated provenance hash.",
      "parameterDecorators": [
        {
          "name": "craftedAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "craftableAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RecipeUpdate(uint256)",
      "name": "RecipeUpdate",
      "description": "Hash to mark updated provenance hash.",
      "parameterDecorators": [
        {
          "name": "craftableAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Upgraded(address)",
      "name": "Upgraded",
      "description": "Hash to mark updated provenance hash.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "burnAddress()",
      "name": "burnAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "craft(uint96,uint256[][])",
      "name": "craft",
      "description": "Craft {craftAmount}. Used to craft. Consumes inputs and transfers outputs.",
      "parameterDecorators": [
        {
          "name": "craftAmount",
          "description": "How many times to craft.",
          "recommendedTypes": []
        },
        {
          "name": "_inputERC721Ids",
          "description": "Array of pre-approved NFTs for crafting usage.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "craftableAmount()",
      "name": "craftableAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint96"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(uint96,uint256[][])",
      "name": "deposit",
      "description": "Must be recipe creator. Automatically sends from `msg.sender`. Used to deposit recipe outputs.",
      "parameterDecorators": [
        {
          "name": "depositAmount",
          "description": "How many times the recipe should be craftable.",
          "recommendedTypes": []
        },
        {
          "name": "_outputsERC721Ids",
          "description": "2D-array of ERC721 tokens used in crafting.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getImplementation()",
      "name": "getImplementation",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getInputIngredient(uint256)",
      "name": "getInputIngredient",
      "description": "Returns all details for a specific ingredient (including amounts/tokenIds).",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "ingredient index to return details for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "token",
          "description": "token type.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "consumableType",
          "description": "consumable type.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "contractAddr",
          "description": "token contract address.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amounts",
          "description": "amount of each token.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "tokenIds",
          "description": "token ids.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getInputs()",
      "name": "getInputs",
      "description": "Returns all inputs (without `amounts` or `tokenIds`).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_inputs",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOutputIngredient(uint256)",
      "name": "getOutputIngredient",
      "description": "Returns all details for a specific ingredient (including amounts/tokenIds).",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "ingredient index to return details for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "token",
          "description": "token type.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "consumableType",
          "description": "consumable type.",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "contractAddr",
          "description": "token contract address.",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amounts",
          "description": "amount of each token.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "tokenIds",
          "description": "token ids.",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOutputs()",
      "name": "getOutputs",
      "description": "Returns all outputs (without `amounts` or `tokenIds`).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_outputs",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,uint96,tuple(uint8,uint8,address,uint256[],uint256[])[],tuple(uint8,uint8,address,uint256[],uint256[])[])",
      "name": "initialize",
      "description": "Create recipe. Configures crafting recipe with inputs/outputs.",
      "parameterDecorators": [
        {
          "name": "_admin",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_burnAddress",
          "description": "Burn address for burn inputs.",
          "recommendedTypes": []
        },
        {
          "name": "_craftableAmount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_inputs",
          "description": "inputs for recipe.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "token",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "consumableType",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "contractAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "amounts",
              "description": "",
              "type": "uint256[]"
            },
            {
              "name": "tokenIds",
              "description": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "name": "_outputs",
          "description": "outputs for recipe.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "token",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "consumableType",
              "description": "",
              "type": "uint8"
            },
            {
              "name": "contractAddr",
              "description": "",
              "type": "address"
            },
            {
              "name": "amounts",
              "description": "",
              "type": "uint256[]"
            },
            {
              "name": "tokenIds",
              "description": "",
              "type": "uint256[]"
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
      "name": "onERC1155BatchReceived",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onERC1155Received(address,address,uint256,uint256,bytes)",
      "name": "onERC1155Received",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param4",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "onERC721Received(address,address,uint256,bytes)",
      "name": "onERC721Received",
      "description": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxiableUUID()",
      "name": "proxiableUUID",
      "description": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeTo(address)",
      "name": "upgradeTo",
      "description": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "upgradeToAndCall(address,bytes)",
      "name": "upgradeToAndCall",
      "description": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "withdraw(uint96)",
      "name": "withdraw",
      "description": "Must be recipe creator. Used to withdraw recipe outputs. Reverse logic as deposit().",
      "parameterDecorators": [
        {
          "name": "withdrawAmount",
          "description": "How many times the craft outputs should be withdrawn.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}