{
  "schema": "../schema.json",
  "tags": [
    "nft"
  ],
  "name": "ZoraNFTCreatorV1",
  "description": "Zora NFT Creator V1.",
  "eventDecorators": [
    {
      "signature": "AdminChanged(address,address)",
      "name": "AdminChanged",
      "description": "Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "previousAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newAdmin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BeaconUpgraded(address)",
      "name": "BeaconUpgraded",
      "description": "Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "beacon",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CreatedDrop(address,address,uint256)",
      "name": "CreatedDrop",
      "description": "Emitted when a edition is created reserving the corresponding token IDs. Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "creator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "editionContractAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "editionSize",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Upgraded(address)",
      "name": "Upgraded",
      "description": "Emitted when the implementation returned by the beacon is changed.",
      "parameterDecorators": [
        {
          "name": "implementation",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "contractVersion()",
      "name": "contractVersion",
      "description": "The version of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The version ID of this contract implementation.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createDrop(string,string,address,uint64,uint16,address,tuple(uint104,uint32,uint64,uint64,uint64,uint64,bytes32),string,string)",
      "name": "createDrop",
      "description": "Setup the media contract for a drop.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "Name for new contract (cannot be changed).",
          "recommendedTypes": []
        },
        {
          "name": "symbol",
          "description": "Symbol for new contract (cannot be changed).",
          "recommendedTypes": []
        },
        {
          "name": "defaultAdmin",
          "description": "Default admin address.",
          "recommendedTypes": []
        },
        {
          "name": "editionSize",
          "description": "The max size of the media contract allowed.",
          "recommendedTypes": []
        },
        {
          "name": "royaltyBPS",
          "description": "BPS for on-chain royalties (cannot be changed).",
          "recommendedTypes": []
        },
        {
          "name": "fundsRecipient",
          "description": "recipient for sale funds and, unless overridden, royalties.",
          "recommendedTypes": []
        },
        {
          "name": "saleConfig",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "publicSalePrice",
              "description": "",
              "type": "uint104"
            },
            {
              "name": "maxSalePurchasePerAddress",
              "description": "",
              "type": "uint32"
            },
            {
              "name": "publicSaleStart",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "publicSaleEnd",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "presaleStart",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "presaleEnd",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "presaleMerkleRoot",
              "description": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "name": "metadataURIBase",
          "description": "URI Base for metadata.",
          "recommendedTypes": []
        },
        {
          "name": "metadataContractURI",
          "description": "URI for contract metadata.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createEdition(string,string,uint64,uint16,address,address,tuple(uint104,uint32,uint64,uint64,uint64,uint64,bytes32),string,string,string)",
      "name": "createEdition",
      "description": "Creates a new edition contract as a factory with a deterministic addressImportant: None of these fields (except the Url fields with the same hash) can be changed after calling.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "Name of the edition contract.",
          "recommendedTypes": []
        },
        {
          "name": "symbol",
          "description": "Symbol of the edition contract.",
          "recommendedTypes": []
        },
        {
          "name": "editionSize",
          "description": "Total size of the edition (number of possible editions).",
          "recommendedTypes": []
        },
        {
          "name": "royaltyBPS",
          "description": "BPS amount of royalty.",
          "recommendedTypes": []
        },
        {
          "name": "fundsRecipient",
          "description": "Funds recipient for the NFT sale.",
          "recommendedTypes": []
        },
        {
          "name": "defaultAdmin",
          "description": "Default admin address.",
          "recommendedTypes": []
        },
        {
          "name": "saleConfig",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "publicSalePrice",
              "description": "",
              "type": "uint104"
            },
            {
              "name": "maxSalePurchasePerAddress",
              "description": "",
              "type": "uint32"
            },
            {
              "name": "publicSaleStart",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "publicSaleEnd",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "presaleStart",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "presaleEnd",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "presaleMerkleRoot",
              "description": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "name": "description",
          "description": "Metadata: Description of the edition entry.",
          "recommendedTypes": []
        },
        {
          "name": "animationURI",
          "description": "Metadata: Animation url (optional) of the edition entry.",
          "recommendedTypes": []
        },
        {
          "name": "imageURI",
          "description": "Metadata: Image url (semi-required) of the edition entry.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "dropMetadataRenderer()",
      "name": "dropMetadataRenderer",
      "description": "Drop metdata renderer.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "editionMetadataRenderer()",
      "name": "editionMetadataRenderer",
      "description": "Edition metdata renderer.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "implementation()",
      "name": "implementation",
      "description": "Address for implementation of ZoraNFTBase to clone.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize()",
      "name": "initialize",
      "description": "Initializes the proxy contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proxiableUUID()",
      "name": "proxiableUUID",
      "description": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setupDropsContract(string,string,address,uint64,uint16,address,tuple(uint104,uint32,uint64,uint64,uint64,uint64,bytes32),address,bytes)",
      "name": "setupDropsContract",
      "description": "Function to setup the media contract across all metadata types. Called by edition and drop fns internally.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "Name for new contract (cannot be changed).",
          "recommendedTypes": []
        },
        {
          "name": "symbol",
          "description": "Symbol for new contract (cannot be changed).",
          "recommendedTypes": []
        },
        {
          "name": "defaultAdmin",
          "description": "Default admin address.",
          "recommendedTypes": []
        },
        {
          "name": "editionSize",
          "description": "The max size of the media contract allowed.",
          "recommendedTypes": []
        },
        {
          "name": "royaltyBPS",
          "description": "BPS for on-chain royalties (cannot be changed).",
          "recommendedTypes": []
        },
        {
          "name": "fundsRecipient",
          "description": "recipient for sale funds and, unless overridden, royalties.",
          "recommendedTypes": []
        },
        {
          "name": "saleConfig",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "publicSalePrice",
              "description": "",
              "type": "uint104"
            },
            {
              "name": "maxSalePurchasePerAddress",
              "description": "",
              "type": "uint32"
            },
            {
              "name": "publicSaleStart",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "publicSaleEnd",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "presaleStart",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "presaleEnd",
              "description": "",
              "type": "uint64"
            },
            {
              "name": "presaleMerkleRoot",
              "description": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "name": "metadataRenderer",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "metadataInitializer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "upgradeTo(address)",
      "name": "upgradeTo",
      "description": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    },
    {
      "signature": "upgradeToAndCall(address,bytes)",
      "name": "upgradeToAndCall",
      "description": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.",
      "parameterDecorators": [
        {
          "name": "newImplementation",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Upgraded(address)"
      ],
      "readOnly": false
    }
  ]
}