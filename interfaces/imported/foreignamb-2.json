{"schema":"../schema.json","tags":[],"name":"ForeignAMB","description":"","eventDecorators":[{"signature":"UserRequestForAffirmation(bytes32,bytes)","name":"UserRequestForAffirmation","description":"","parameterDecorators":[{"name":"messageId","description":"","recommendedTypes":[],"indexed":true},{"name":"encodedData","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RelayedMessage(address,address,bytes32,bool)","name":"RelayedMessage","description":"","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[],"indexed":true},{"name":"executor","description":"","recommendedTypes":[],"indexed":true},{"name":"messageId","description":"","recommendedTypes":[],"indexed":true},{"name":"status","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"GasPriceChanged(uint256)","name":"GasPriceChanged","description":"","parameterDecorators":[{"name":"gasPrice","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RequiredBlockConfirmationChanged(uint256)","name":"RequiredBlockConfirmationChanged","description":"","parameterDecorators":[{"name":"requiredBlockConfirmations","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":false},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"transactionHash()","name":"transactionHash","description":"Returns an id of the currently processed message. NOTE: transactionHash was used previously to identify incoming message before AMB message id was introduced. It is kept for backwards compatibility with old mediators contracts, although it doesn't return txHash anymore.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"sourceChainId()","name":"sourceChainId","description":"Internal function for retrieving chain id for the source network.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"_sendMessage(address,bytes,uint256,uint256)","name":"_sendMessage","description":"Initiates sending of an AMB message to the opposite network.","parameterDecorators":[{"name":"_contract","description":"executor address on the other side.","recommendedTypes":[]},{"name":"_data","description":"calldata passed to the executor on the other side.","recommendedTypes":[]},{"name":"_gas","description":"gas limit used on the other network for executing a message.","recommendedTypes":[]},{"name":"_dataType","description":"AMB message dataType to be included as a part of the header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":false},{"signature":"relayedMessages(bytes32)","name":"relayedMessages","description":"","parameterDecorators":[{"name":"_txHash","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(uint256,uint256,address,uint256,uint256,uint256,address)","name":"initialize","description":"Initializes AMB contract.","parameterDecorators":[{"name":"_sourceChainId","description":"chain id of a network where this contract is deployed.","recommendedTypes":[]},{"name":"_destinationChainId","description":"chain id of a network where all outgoing messages are directed.","recommendedTypes":[]},{"name":"_validatorContract","description":"address of the validators contract.","recommendedTypes":[]},{"name":"_maxGasPerTx","description":"maximum amount of gas per one message execution.","recommendedTypes":[]},{"name":"_gasPrice","description":"default gas price used by oracles for sending transactions in this network.","recommendedTypes":[]},{"name":"_requiredBlockConfirmations","description":"number of block confirmations oracle will wait before processing passed messages.","recommendedTypes":[]},{"name":"_owner","description":"address of new bridge owner.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"isInitialized()","name":"isInitialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"requiredBlockConfirmations()","name":"requiredBlockConfirmations","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"executeSignatures(bytes,bytes)","name":"executeSignatures","description":"Validates provided signatures and relays a given message.","parameterDecorators":[{"name":"_data","description":"bytes to be relayed.","recommendedTypes":[]},{"name":"_signatures","description":"bytes blob with signatures to be validated.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getMinimumGasUsage(bytes)","name":"getMinimumGasUsage","description":"Returns a lower limit on gas limit for the particular message data.","parameterDecorators":[{"name":"_data","description":"calldata passed to the executor on the other side.","recommendedTypes":[]}],"returnDecorators":[{"name":"gas","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"failedMessageReceiver(bytes32)","name":"failedMessageReceiver","description":"Returns a receiver address of the failed message that came from the other side.","parameterDecorators":[{"name":"_messageId","description":"id of the message from the other side that triggered a call.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getBridgeMode()","name":"getBridgeMode","description":"","parameterDecorators":[],"returnDecorators":[{"name":"_data","description":"","recommendedTypes":[],"solidityType":"bytes4"}],"emittableEvents":[],"readOnly":true},{"signature":"setChainIds(uint256,uint256)","name":"setChainIds","description":"Updates chain ids of used networks.","parameterDecorators":[{"name":"_sourceChainId","description":"chain id for current network.","recommendedTypes":[]},{"name":"_destinationChainId","description":"chain id for opposite network.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"failedMessageSender(bytes32)","name":"failedMessageSender","description":"Returns a sender address of the failed message that came from the other side.","parameterDecorators":[{"name":"_messageId","description":"id of the message from the other side that triggered a call.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"allowReentrantRequests()","name":"allowReentrantRequests","description":"Tells if passing reentrant requests is allowed.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"messageId()","name":"messageId","description":"Returns an id of the currently processed message.","parameterDecorators":[],"returnDecorators":[{"name":"id","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"setMaxGasPerTx(uint256)","name":"setMaxGasPerTx","description":"","parameterDecorators":[{"name":"_maxGasPerTx","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"requiredSignatures()","name":"requiredSignatures","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Tells the address of the owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"validatorContract()","name":"validatorContract","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"deployedAtBlock()","name":"deployedAtBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getBridgeInterfacesVersion()","name":"getBridgeInterfacesVersion","description":"Returns currently used bridge version.","parameterDecorators":[],"returnDecorators":[{"name":"major","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"minor","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"patch","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":true},{"signature":"messageSourceChainId()","name":"messageSourceChainId","description":"Returns an originating chain id of the currently processed message.","parameterDecorators":[],"returnDecorators":[{"name":"id","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"setRequiredBlockConfirmations(uint256)","name":"setRequiredBlockConfirmations","description":"","parameterDecorators":[{"name":"_blockConfirmations","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"destinationChainId()","name":"destinationChainId","description":"Internal function for retrieving chain id for the destination network.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"setGasPrice(uint256)","name":"setGasPrice","description":"Public setter for fallback gas price value. Only bridge owner can call this method.","parameterDecorators":[{"name":"_gasPrice","description":"new value for the gas price.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setAllowReentrantRequests(bool)","name":"setAllowReentrantRequests","description":"Sets the flag to allow passing new AMB requests in the opposite direction, while other AMB message is being processed. Only owner can call this method.","parameterDecorators":[{"name":"_enable","description":"true, if reentrant requests are allowed.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"messageCallStatus(bytes32)","name":"messageCallStatus","description":"Returns a status of the message that came from the other side.","parameterDecorators":[{"name":"_messageId","description":"id of the message from the other side that triggered a call.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"messageSender()","name":"messageSender","description":"Returns an address of the sender on the other side for the currently processed message. Can be used by executors for getting other side caller address.","parameterDecorators":[],"returnDecorators":[{"name":"sender","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"decimalShift()","name":"decimalShift","description":"Returns the value of foreign-to-home decimal shift.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"requireToPassMessage(address,bytes,uint256)","name":"requireToPassMessage","description":"Requests message relay to the opposite network.","parameterDecorators":[{"name":"_contract","description":"executor address on the other side.","recommendedTypes":[]},{"name":"_data","description":"calldata passed to the executor on the other side.","recommendedTypes":[]},{"name":"_gas","description":"gas limit used on the other network for executing a message.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":false},{"signature":"failedMessageDataHash(bytes32)","name":"failedMessageDataHash","description":"Returns a data hash of the failed message that came from the other side. NOTE: dataHash was used previously to identify outgoing message before AMB message id was introduced. It is kept for backwards compatibility with old mediators contracts.","parameterDecorators":[{"name":"_messageId","description":"id of the message from the other side that triggered a call.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"maxGasPerTx()","name":"maxGasPerTx","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Allows the current owner to transfer control of the contract to a newOwner.","parameterDecorators":[{"name":"newOwner","description":"the address to transfer ownership to.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"gasPrice()","name":"gasPrice","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}