{
  "schema": "../schema.json",
  "tags": [],
  "name": "AerariumSanctiusV1",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdraw(address,address,uint256)",
      "name": "Withdraw",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "asset",
          "description": "The address of the underlying asset of the reserve.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "implementation",
          "description": "The new subToken implementation*.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "proxy",
          "description": "The variable debt token proxy address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addTokens(address,uint256)",
      "name": "addTokens",
      "description": "- This function allows the owner to add tokens to this contract that can be distributed at the end of the farming program.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "- The address of the ERC20 token that will be deposited in the contract.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "- The amount of ERC20 tokens that will be transferred from the owner to this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claim(uint256)",
      "name": "claim",
      "description": "- Claim function which is called by the user to claim their share of reward tokens after the end of the farming program.",
      "parameterDecorators": [
        {
          "name": "_rwdAmount",
          "description": "- The amount of reward tokens that the user accumulated and will be burned to unlock the tokens held in this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "endBlock()",
      "name": "endBlock",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rwdToken()",
      "name": "rwdToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokensHeld(uint256)",
      "name": "tokensHeld",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokensHeldLength()",
      "name": "tokensHeldLength",
      "description": "- A function to check the length of the array of structs.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawExcess(address)",
      "name": "withdrawExcess",
      "description": "- A function to withdraw any excess tokens left in this contract after the program has ended and the timeout has expired.",
      "parameterDecorators": [
        {
          "name": "_receiver",
          "description": "- The address to which the remaining excess tokens will be sent.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawTimeout()",
      "name": "withdrawTimeout",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}