{"schema":"../schema.json","tags":["oracles"],"name":"PriceOracle","description":"","eventDecorators":[{"signature":"CappedPricePosted(address,uint256,uint256,uint256)","name":"CappedPricePosted","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"asset","description":"","recommendedTypes":[],"indexed":false},{"name":"requestedPriceMantissa","description":"","recommendedTypes":[],"indexed":false},{"name":"anchorPriceMantissa","description":"","recommendedTypes":[],"indexed":false},{"name":"cappedPriceMantissa","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Failure(uint256,uint256,uint256)","name":"Failure","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"error","description":"","recommendedTypes":[],"indexed":false},{"name":"info","description":"","recommendedTypes":[],"indexed":false},{"name":"detail","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewAnchorAdmin(address,address)","name":"NewAnchorAdmin","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"oldAnchorAdmin","description":"","recommendedTypes":[],"indexed":false},{"name":"newAnchorAdmin","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewPendingAnchor(address,address,uint256,uint256)","name":"NewPendingAnchor","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"anchorAdmin","description":"","recommendedTypes":[],"indexed":false},{"name":"asset","description":"","recommendedTypes":[],"indexed":false},{"name":"oldScaledPrice","description":"","recommendedTypes":[],"indexed":false},{"name":"newScaledPrice","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewPendingAnchorAdmin(address,address)","name":"NewPendingAnchorAdmin","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"oldPendingAnchorAdmin","description":"","recommendedTypes":[],"indexed":false},{"name":"newPendingAnchorAdmin","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"NewPoster(address,address)","name":"NewPoster","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"oldPoster","description":"","recommendedTypes":[],"indexed":false},{"name":"newPoster","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OracleFailure(address,address,uint256,uint256,uint256)","name":"OracleFailure","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"msgSender","description":"","recommendedTypes":[],"indexed":false},{"name":"asset","description":"","recommendedTypes":[],"indexed":false},{"name":"error","description":"","recommendedTypes":[],"indexed":false},{"name":"info","description":"","recommendedTypes":[],"indexed":false},{"name":"detail","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"PricePosted(address,uint256,uint256,uint256)","name":"PricePosted","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"asset","description":"","recommendedTypes":[],"indexed":false},{"name":"previousPriceMantissa","description":"","recommendedTypes":[],"indexed":false},{"name":"requestedPriceMantissa","description":"","recommendedTypes":[],"indexed":false},{"name":"newPriceMantissa","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ReaderPosted(address,address,address,int256)","name":"ReaderPosted","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"asset","description":"","recommendedTypes":[],"indexed":false},{"name":"oldReader","description":"","recommendedTypes":[],"indexed":false},{"name":"newReader","description":"","recommendedTypes":[],"indexed":false},{"name":"decimalsDifference","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SetExchangeRate(address,address,uint256,uint256,uint256)","name":"SetExchangeRate","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"asset","description":"","recommendedTypes":[],"indexed":false},{"name":"exchangeRateModel","description":"","recommendedTypes":[],"indexed":false},{"name":"exchangeRate","description":"","recommendedTypes":[],"indexed":false},{"name":"maxSwingRate","description":"","recommendedTypes":[],"indexed":false},{"name":"maxSwingDuration","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SetMaxSwing(uint256)","name":"SetMaxSwing","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"maxSwing","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SetMaxSwingForAsset(address,uint256)","name":"SetMaxSwingForAsset","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"asset","description":"","recommendedTypes":[],"indexed":false},{"name":"maxSwing","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SetMaxSwingRate(address,uint256,uint256,uint256)","name":"SetMaxSwingRate","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"asset","description":"","recommendedTypes":[],"indexed":false},{"name":"oldMaxSwingRate","description":"","recommendedTypes":[],"indexed":false},{"name":"newMaxSwingRate","description":"","recommendedTypes":[],"indexed":false},{"name":"maxSwingDuration","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SetPaused(bool)","name":"SetPaused","description":"Event emitted for each executed trade.","parameterDecorators":[{"name":"newState","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"_acceptAnchorAdmin()","name":"_acceptAnchorAdmin","description":"Accepts transfer of anchor admin rights. `msg.sender` must be `pendingAnchorAdmin`. Admin function for pending anchor admin to accept role and update anchor admin`.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"_assetPrices(address)","name":"_assetPrices","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"mantissa","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"_setMaxSwing(uint256)","name":"_setMaxSwing","description":"Set `maxSwing` to the specified value. Admin function to change of max swing.","parameterDecorators":[{"name":"_maxSwing","description":"Value to assign to `maxSwing`.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"_setMaxSwingForAsset(address,uint256)","name":"_setMaxSwingForAsset","description":"Set `maxSwing` for asset to the specified value. Admin function to change of max swing.","parameterDecorators":[{"name":"_asset","description":"Asset for which to set the `maxSwing`.","recommendedTypes":[]},{"name":"_maxSwing","description":"Value to assign to `maxSwing`.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"_setMaxSwingForAssetBatch(address[],uint256[])","name":"_setMaxSwingForAssetBatch","description":"","parameterDecorators":[{"name":"_assets","description":"","recommendedTypes":[]},{"name":"_maxSwings","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"_setPaused(bool)","name":"_setPaused","description":"Set `paused` to the specified state. Admin function to pause or resume the contract.","parameterDecorators":[{"name":"requestedState","description":"Value to assign to `paused`.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"_setPendingAnchor(address,uint256)","name":"_setPendingAnchor","description":"Provides ability to override the anchor price for an asset. Admin function to set the anchor price for an asset.","parameterDecorators":[{"name":"asset","description":"Asset for which to override the anchor price.","recommendedTypes":[]},{"name":"newScaledPrice","description":"New anchor price.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"_setPendingAnchorAdmin(address)","name":"_setPendingAnchorAdmin","description":"Begins to transfer the right of anchor admin. The `newPendingAnchorAdmin` must call `_acceptAnchorAdmin` to finalize the transfer. Admin function to change the anchor admin. The `newPendingAnchorAdmin` must call `_acceptAnchorAdmin` to finalize the transfer.","parameterDecorators":[{"name":"newPendingAnchorAdmin","description":"New pending anchor admin.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"_setPoster(address)","name":"_setPoster","description":"Set new poster. Admin function to change of poster.","parameterDecorators":[{"name":"newPoster","description":"New poster.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"anchorAdmin()","name":"anchorAdmin","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"anchors(address)","name":"anchors","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"period","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"priceMantissa","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"assetPrices(address)","name":"assetPrices","description":"Retrieves price of an asset. Get price for an asset.","parameterDecorators":[{"name":"asset","description":"Asset for which to get the price.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"exchangeRates(address)","name":"exchangeRates","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"exchangeRateModel","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"exchangeRate","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"maxSwingRate","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"maxSwingDuration","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getExchangeRateInfo(address,uint256)","name":"getExchangeRateInfo","description":"Get exchange rate info of an asset in the time of `interval`.","parameterDecorators":[{"name":"asset","description":"Asset for which to get the exchange rate info.","recommendedTypes":[]},{"name":"interval","description":"Time to get accmulator interest rate.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param4","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param5","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getLastSetPriceTime(address)","name":"getLastSetPriceTime","description":"Get last setting price timestamp for an asset.","parameterDecorators":[{"name":"asset","description":"Asset for which to get the timestamp.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getPrice(address)","name":"getPrice","description":"Retrieves price of an asset. Get price for an asset.","parameterDecorators":[{"name":"asset","description":"Asset for which to get the price.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getReaderPrice(address)","name":"getReaderPrice","description":"This is a basic function to read price, although this is a public function, It is not recommended, the recommended function is `assetPrices(asset)`. If `asset` does not has a reader to reader price, then read price from original structure `_assetPrices`; If `asset` has a reader to read price, first gets the price of reader, then `readerPrice * 10 ** |(18-assetDecimals)|`. Get price of `asset`.","parameterDecorators":[{"name":"asset","description":"Asset for which to get the price.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"lastSetPriceTimestamp(address)","name":"lastSetPriceTimestamp","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"maxSwing()","name":"maxSwing","description":"","parameterDecorators":[],"returnDecorators":[{"name":"mantissa","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"maxSwingMantissa()","name":"maxSwingMantissa","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"maxSwings(address)","name":"maxSwings","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"mantissa","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"numBlocksPerPeriod()","name":"numBlocksPerPeriod","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"paused()","name":"paused","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingAnchorAdmin()","name":"pendingAnchorAdmin","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pendingAnchors(address)","name":"pendingAnchors","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"poster()","name":"poster","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pow(uint256,uint256)","name":"pow","description":"x to the power of y power(base, exponent).","parameterDecorators":[{"name":"base","description":"","recommendedTypes":[]},{"name":"exponent","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"readers(address)","name":"readers","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"asset","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"decimalsDifference","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"setExchangeRate(address,address,uint256)","name":"setExchangeRate","description":"Set new exchange rate model. Function to set exchangeRateModel for an asset.","parameterDecorators":[{"name":"asset","description":"Asset to set the new `exchangeRateModel`.","recommendedTypes":[]},{"name":"exchangeRateModel","description":"New `exchangeRateModel` cnotract address, if the `exchangeRateModel` is address(0), revert to cancle.","recommendedTypes":[]},{"name":"maxSwingDuration","description":"A value greater than zero and less than the seconds of a week.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"setMaxSwingRate(address,uint256)","name":"setMaxSwingRate","description":"Set a new `maxSwingRate`. Function to set exchange rate `maxSwingRate` for an asset.","parameterDecorators":[{"name":"asset","description":"Asset for which to set the exchange rate `maxSwingRate`.","recommendedTypes":[]},{"name":"maxSwingDuration","description":"Interval time.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"setPrice(address,uint256)","name":"setPrice","description":"Entry point for updating prices. 1) If admin has set a `readerPrice` for this asset, then poster can not use this function. 2) Standard stablecoin has 18 deicmals, and its price should be 1e18, so when the poster set a new price for a token, `requestedPriceMantissa` = actualPrice * 10 ** (18-tokenDecimals), actualPrice is scaled by 10**18. Set price for an asset.","parameterDecorators":[{"name":"asset","description":"Asset for which to set the price.","recommendedTypes":[]},{"name":"requestedPriceMantissa","description":"Requested new price, scaled by 10**18.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"setPriceWithTime(address,uint256)","name":"setPriceWithTime","description":"Similar to `setPrice(address, uint)`, but for this function, it will record timestamp when set new price.","parameterDecorators":[{"name":"asset","description":"","recommendedTypes":[]},{"name":"requestedPriceMantissa","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"setPrices(address[],uint256[])","name":"setPrices","description":"Entry point for updating multiple prices. Set prices for a variable number of assets.","parameterDecorators":[{"name":"assets","description":"A list of up to assets for which to set a price. Notice: 0 < assets.length == requestedPriceMantissas.length.","recommendedTypes":[]},{"name":"requestedPriceMantissas","description":"Requested new prices for the assets, scaled by 10**18. Notice: 0 < assets.length == requestedPriceMantissas.length.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":false},{"signature":"setPricesWithTimes(address[],uint256[])","name":"setPricesWithTimes","description":"","parameterDecorators":[{"name":"assets","description":"","recommendedTypes":[]},{"name":"requestedPriceMantissas","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":false},{"signature":"setReaders(address,address)","name":"setReaders","description":"Entry point for updating prices. Set reader for an asset.","parameterDecorators":[{"name":"asset","description":"Asset for which to set the reader.","recommendedTypes":[]},{"name":"readAsset","description":"Reader address, if the reader is address(0), cancel the reader.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false}]}