{"schema":"../schema.json","tags":[],"name":"MultipleArbitrableTransactionWithFee","description":"","eventDecorators":[{"signature":"Payment(uint256,uint256,address)","name":"Payment","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"_transactionID","description":"","recommendedTypes":[],"indexed":true},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false},{"name":"_party","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"FeeRecipientPayment(uint256,uint256)","name":"FeeRecipientPayment","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"_transactionID","description":"","recommendedTypes":[],"indexed":true},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"FeeRecipientChanged(address,address)","name":"FeeRecipientChanged","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"_oldFeeRecipient","description":"","recommendedTypes":[],"indexed":true},{"name":"_newFeeRecipient","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"HasToPayFee(uint256,uint8)","name":"HasToPayFee","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"_transactionID","description":"","recommendedTypes":[],"indexed":true},{"name":"_party","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Ruling(address,uint256,uint256)","name":"Ruling","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"_arbitrator","description":"","recommendedTypes":[],"indexed":true},{"name":"_disputeID","description":"","recommendedTypes":[],"indexed":true},{"name":"_ruling","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"TransactionCreated(uint256,address,address,uint256)","name":"TransactionCreated","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"_transactionID","description":"","recommendedTypes":[],"indexed":false},{"name":"_sender","description":"","recommendedTypes":[],"indexed":true},{"name":"_receiver","description":"","recommendedTypes":[],"indexed":true},{"name":"_amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"MetaEvidence(uint256,string)","name":"MetaEvidence","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"_metaEvidenceID","description":"","recommendedTypes":[],"indexed":true},{"name":"_evidence","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Dispute(address,uint256,uint256,uint256)","name":"Dispute","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"_arbitrator","description":"","recommendedTypes":[],"indexed":true},{"name":"_disputeID","description":"","recommendedTypes":[],"indexed":true},{"name":"_metaEvidenceID","description":"","recommendedTypes":[],"indexed":false},{"name":"_evidenceGroupID","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Evidence(address,uint256,address,string)","name":"Evidence","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"_arbitrator","description":"","recommendedTypes":[],"indexed":true},{"name":"_evidenceGroupID","description":"","recommendedTypes":[],"indexed":true},{"name":"_party","description":"","recommendedTypes":[],"indexed":true},{"name":"_evidence","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"arbitratorExtraData()","name":"arbitratorExtraData","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"changeFeeRecipient(address)","name":"changeFeeRecipient","description":"Change Fee Recipient.","parameterDecorators":[{"name":"_newFeeRecipient","description":"Address of the new Fee Recipient.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"disputeIDtoTransactionID(uint256)","name":"disputeIDtoTransactionID","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"rule(uint256,uint256)","name":"rule","description":"Give a ruling for a dispute. Must be called by the arbitrator. The purpose of this function is to ensure that the address calling it has the right to rule on the contract.","parameterDecorators":[{"name":"_disputeID","description":"ID of the dispute in the Arbitrator contract.","recommendedTypes":[]},{"name":"_ruling","description":"Ruling given by the arbitrator. Note that 0 is reserved for \"Not able/wanting to make a decision\".","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"timeOutByReceiver(uint256)","name":"timeOutByReceiver","description":"Pay receiver if sender fails to pay the fee.","parameterDecorators":[{"name":"_transactionID","description":"The index of the transaction.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"feeRecipient()","name":"feeRecipient","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"arbitrator()","name":"arbitrator","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"payArbitrationFeeByReceiver(uint256)","name":"payArbitrationFeeByReceiver","description":"Pay the arbitration fee to raise a dispute. To be called by the receiver. UNTRUSTED. Note that this function mirrors payArbitrationFeeBySender.","parameterDecorators":[{"name":"_transactionID","description":"The index of the transaction.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"payArbitrationFeeBySender(uint256)","name":"payArbitrationFeeBySender","description":"Pay the arbitration fee to raise a dispute. To be called by the sender. UNTRUSTED. Note that the arbitrator can have createDispute throw, which will make this function throw and therefore lead to a party being timed-out. This is not a vulnerability as the arbitrator can rule in favor of one party anyway.","parameterDecorators":[{"name":"_transactionID","description":"The index of the transaction.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"appeal(uint256)","name":"appeal","description":"Appeal an appealable ruling. Transfer the funds to the arbitrator. Note that no checks are required as the checks are done by the arbitrator.","parameterDecorators":[{"name":"_transactionID","description":"The index of the transaction.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"feeRecipientBasisPoint()","name":"feeRecipientBasisPoint","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"transactions(uint256)","name":"transactions","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"sender","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"receiver","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"timeoutPayment","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"disputeId","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"senderFee","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"receiverFee","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"lastInteraction","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"status","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"getCountTransactions()","name":"getCountTransactions","description":"Getter to know the count of transactions.","parameterDecorators":[],"returnDecorators":[{"name":"countTransactions","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"submitEvidence(uint256,string)","name":"submitEvidence","description":"Submit a reference to evidence. EVENT.","parameterDecorators":[{"name":"_transactionID","description":"The index of the transaction.","recommendedTypes":[]},{"name":"_evidence","description":"A link to an evidence using its URI.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"feeTimeout()","name":"feeTimeout","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"createTransaction(uint256,address,string)","name":"createTransaction","description":"Create a transaction.","parameterDecorators":[{"name":"_timeoutPayment","description":"Time after which a party can automatically execute the arbitrable transaction.","recommendedTypes":[]},{"name":"_receiver","description":"The recipient of the transaction.","recommendedTypes":[]},{"name":"_metaEvidence","description":"Link to the meta-evidence.","recommendedTypes":[]}],"returnDecorators":[{"name":"transactionID","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"executeTransaction(uint256)","name":"executeTransaction","description":"Transfer the transaction's amount to the receiver if the timeout has passed.","parameterDecorators":[{"name":"_transactionID","description":"The index of the transaction.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"pay(uint256,uint256)","name":"pay","description":"Pay receiver. To be called if the good or service is provided.","parameterDecorators":[{"name":"_transactionID","description":"The index of the transaction.","recommendedTypes":[]},{"name":"_amount","description":"Amount to pay in wei.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"timeOutBySender(uint256)","name":"timeOutBySender","description":"Reimburse sender if receiver fails to pay the fee.","parameterDecorators":[{"name":"_transactionID","description":"The index of the transaction.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getTransactionIDsByAddress(address)","name":"getTransactionIDsByAddress","description":"Get IDs for transactions where the specified address is the receiver and/or the sender. This function must be used by the UI and not by other smart contracts. Note that the complexity is O(t), where t is amount of arbitrable transactions.","parameterDecorators":[{"name":"_address","description":"The specified address.","recommendedTypes":[]}],"returnDecorators":[{"name":"transactionIDs","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"reimburse(uint256,uint256)","name":"reimburse","description":"Reimburse sender. To be called if the good or service can't be fully provided.","parameterDecorators":[{"name":"_transactionID","description":"The index of the transaction.","recommendedTypes":[]},{"name":"_amountReimbursed","description":"Amount to reimburse in wei.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}