{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "bridges",
    "nft"
  ],
  "name": "ForeignOmnibridgeNFT",
  "description": "ForeignOmnibridgeNFT. Foreign side implementation for multi-token ERC721 mediator intended to work on top of AMB bridge. It is designed to be used as an implementation contract of EternalStorageProxy contract.",
  "eventDecorators": [
    {
      "signature": "DailyLimitChanged(address,uint256)",
      "name": "DailyLimitChanged",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ExecutionDailyLimitChanged(address,uint256)",
      "name": "ExecutionDailyLimitChanged",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newLimit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewTokenRegistered(address,address)",
      "name": "NewTokenRegistered",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "nativeToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "bridgedToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokensBridged(address,address,uint256,bytes32)",
      "name": "TokensBridged",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "messageId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "TokensBridgingInitiated(address,address,uint256,bytes32)",
      "name": "TokensBridgingInitiated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "messageId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "bridgeContract()",
      "name": "bridgeContract",
      "description": "Get the AMB interface for the bridge contract address.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "AMB interface for the bridge contract address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "bridgedTokenAddress(address)",
      "name": "bridgedTokenAddress",
      "description": "Retrieves address of the bridged token contract associated with a specific native token contract on the other side.",
      "parameterDecorators": [
        {
          "name": "_nativeToken",
          "description": "address of the native token contract on the other side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of the deployed bridged token contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "customName(address)",
      "name": "customName",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "customSymbol(address)",
      "name": "customSymbol",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dailyLimit(address)",
      "name": "dailyLimit",
      "description": "Retrieves current daily limit for a particular token contract.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the token contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "daily limit on tokens that can be sent through the bridge per day.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deployAndHandleBridgedNFT(address,string,string,address,uint256)",
      "name": "deployAndHandleBridgedNFT",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_symbol",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_recipient",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "executionDailyLimit(address)",
      "name": "executionDailyLimit",
      "description": "Retrieves current execution daily limit for a particular token contract.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the token contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "daily limit on tokens that can be received from the bridge on the other side per day.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBridgeInterfacesVersion()",
      "name": "getBridgeInterfacesVersion",
      "description": "Tells the bridge interface version that this contract supports.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "major",
          "description": "value of the version.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "minor",
          "description": "value of the version.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "patch",
          "description": "value of the version.",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBridgeMode()",
      "name": "getBridgeMode",
      "description": "Tells the bridge mode that this contract supports.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_data",
          "description": "4 bytes representing the bridge mode.",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentDay()",
      "name": "getCurrentDay",
      "description": "Returns current day number.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "day number.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "handleBridgedNFT(address,address,uint256)",
      "name": "handleBridgedNFT",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_recipient",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "handleNativeNFT(address,address,uint256)",
      "name": "handleNativeNFT",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_recipient",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialize(address,address,uint256,uint256,uint256,address,address)",
      "name": "initialize",
      "description": "Stores the initial parameters of the mediator.",
      "parameterDecorators": [
        {
          "name": "_bridgeContract",
          "description": "the address of the AMB bridge contract.",
          "recommendedTypes": []
        },
        {
          "name": "_mediatorContract",
          "description": "the address of the mediator contract on the other network.",
          "recommendedTypes": []
        },
        {
          "name": "_dailyLimit",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_executionDailyLimit",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_requestGasLimit",
          "description": "the gas limit for the message execution.",
          "recommendedTypes": []
        },
        {
          "name": "_owner",
          "description": "address of the owner of the mediator contract.",
          "recommendedTypes": []
        },
        {
          "name": "_tokenFactory",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isInitialized()",
      "name": "isInitialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isRegisteredAsNativeToken(address)",
      "name": "isRegisteredAsNativeToken",
      "description": "Checks if a given token is a bridged token that is native to this side of the bridge.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of token contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "message id of the send message.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isTokenRegistered(address)",
      "name": "isTokenRegistered",
      "description": "Checks if specified token was already bridged at least once.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the token contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true, if token was already bridged.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mediatorContractOnOtherSide()",
      "name": "mediatorContractOnOtherSide",
      "description": "Tells the mediator contract address from the other network.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the address of the mediator contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nativeTokenAddress(address)",
      "name": "nativeTokenAddress",
      "description": "Retrieves address of the native token contract associated with a specific bridged token contract.",
      "parameterDecorators": [
        {
          "name": "_bridgedToken",
          "description": "address of the created bridged token contract on this side.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of the native token contract on the other side of the bridge.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onERC721Received(address,address,uint256,bytes)",
      "name": "onERC721Received",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_tokenId",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Tells the address of the owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the address of the owner.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "requestGasLimit()",
      "name": "requestGasLimit",
      "description": "Tells the gas limit to be used in the message execution by the AMB bridge on the other network.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the gas limit for the message execution.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setBridgeContract(address)",
      "name": "setBridgeContract",
      "description": "Sets the AMB bridge contract address. Only the owner can call this method.",
      "parameterDecorators": [
        {
          "name": "_bridgeContract",
          "description": "the address of the bridge contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCustomName(address,string)",
      "name": "setCustomName",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCustomSymbol(address,string)",
      "name": "setCustomSymbol",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_name",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDailyLimit(address,uint256)",
      "name": "setDailyLimit",
      "description": "Updates daily limit for the particular token. Only owner can call this method.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the token contract, or address(0) for configuring the efault limit.",
          "recommendedTypes": []
        },
        {
          "name": "_dailyLimit",
          "description": "daily allowed amount of bridged tokens, should be greater than maxPerTx. 0 value is also allowed, will stop the bridge operations in outgoing direction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setExecutionDailyLimit(address,uint256)",
      "name": "setExecutionDailyLimit",
      "description": "Updates execution daily limit for the particular token. Only owner can call this method.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the token contract, or address(0) for configuring the default limit.",
          "recommendedTypes": []
        },
        {
          "name": "_dailyLimit",
          "description": "daily allowed amount of executed tokens, should be greater than executionMaxPerTx. 0 value is also allowed, will stop the bridge operations in incoming direction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMediatorContractOnOtherSide(address)",
      "name": "setMediatorContractOnOtherSide",
      "description": "Sets the mediator contract address from the other network. Only the owner can call this method.",
      "parameterDecorators": [
        {
          "name": "_mediatorContract",
          "description": "the address of the mediator contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRequestGasLimit(uint256)",
      "name": "setRequestGasLimit",
      "description": "Sets the gas limit to be used in the message execution by the AMB bridge on the other network. This value can't exceed the parameter maxGasPerTx defined on the AMB bridge. Only the owner can call this method.",
      "parameterDecorators": [
        {
          "name": "_requestGasLimit",
          "description": "the gas limit for the message execution.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTokenFactory(address)",
      "name": "setTokenFactory",
      "description": "Updates an address of the used TokenFactory contract used for creating new tokens.",
      "parameterDecorators": [
        {
          "name": "_tokenFactory",
          "description": "address of TokenFactory contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenFactory()",
      "name": "tokenFactory",
      "description": "Retrieves an address of the token factory contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of the TokenFactory contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenRegistrationMessageId(address)",
      "name": "tokenRegistrationMessageId",
      "description": "Returns message id where specified token was first seen and deploy on the other side was requested.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of token contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "message id of the send message.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalExecutedPerDay(address,uint256)",
      "name": "totalExecutedPerDay",
      "description": "Retrieves the total executed amount for particular token during specific day.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the token contract.",
          "recommendedTypes": []
        },
        {
          "name": "_day",
          "description": "day number for which spent amount if requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of tokens received from the bridge from the other side.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalSpentPerDay(address,uint256)",
      "name": "totalSpentPerDay",
      "description": "Retrieves the total spent amount for particular token during specific day.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the token contract.",
          "recommendedTypes": []
        },
        {
          "name": "_day",
          "description": "day number for which spent amount if requested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "amount of tokens sent through the bridge to the other side.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows the current owner to transfer control of the contract to a newOwner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "the address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withinExecutionLimit(address)",
      "name": "withinExecutionLimit",
      "description": "Checks that bridged amount of tokens conforms to the configured execution limits.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the token contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true, if specified amount can be processed and executed.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withinLimit(address)",
      "name": "withinLimit",
      "description": "Checks that bridged amount of tokens conforms to the configured limits.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "address of the token contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true, if specified amount can be bridged.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}