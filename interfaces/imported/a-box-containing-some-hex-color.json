{"schema":"../schema.json","tags":[],"name":"AllThingsBox","description":"A box containing some hex color. All function calls are currently implemented without.. You can use this contract for only the most basic simulation.","eventDecorators":[{"signature":"Nothing(string)","name":"Nothing","description":"An event.","parameterDecorators":[{"name":"anyThing","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"aPublicString()","name":"aPublicString","description":"Returns public state (automatic accessor, also using this opportunity to add more content to test a rather long NatSpec).","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"getAddress()","name":"getAddress","description":"Returns address state.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getArray()","name":"getArray","description":"Returns array state.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getInteger()","name":"getInteger","description":"Returns uint state.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint112"}],"emittableEvents":[],"readOnly":true},{"signature":"getString()","name":"getString","description":"Returns string state.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"getStruct()","name":"getStruct","description":"Returns struct state.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"tuple"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"testInput(string,uint112,address,string[],tuple(string,uint256))","name":"testInput","description":"Just a function that take in a bunch of different structure input for testing.","parameterDecorators":[{"name":"_someString","description":"A string input.","recommendedTypes":[]},{"name":"_anyNumber","description":"A uint input.","recommendedTypes":[]},{"name":"_testAddress","description":"An address input.","recommendedTypes":[]},{"name":"_moreArray","description":"An array input.","recommendedTypes":[]},{"name":"_aCoolStruct","description":"A struct input that is so complex I am going to explain in in great length so we can also using this opportunity to add more content to test a rather long NatSpec because.. well you no time NatSpec are extensive that's kind of the purpose, explaining to others how to use your contract (but maybe I would have simply injected more text in the HTML).","recommendedTypes":[],"parameters":[{"name":"coolName","description":"","type":"string"},{"name":"coolLevel","description":"","type":"uint256"}]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}