{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "staking",
    "vesting",
    "locking"
  ],
  "name": "Staking",
  "description": "",
  "eventDecorators": [
    {
      "signature": "RewardClaim(address,address,uint256,uint256)",
      "name": "RewardClaim",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "talentToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "stakerReward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "talentReward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RewardWithdrawal(address,address,uint256,uint256)",
      "name": "RewardWithdrawal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "talentToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "stakerReward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "talentReward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Stake(address,address,uint256,bool)",
      "name": "Stake",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "talentToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "talAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "stable",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TalentRewardWithdrawal(address,address,uint256)",
      "name": "TalentRewardWithdrawal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "talentToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "talentTokenWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "reward",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unstake(address,address,uint256)",
      "name": "Unstake",
      "description": "",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "talentToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "talAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "S()",
      "name": "S",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SAt()",
      "name": "SAt",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "activeStakes()",
      "name": "activeStakes",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "adminWithdraw()",
      "name": "adminWithdraw",
      "description": "Allows the admin to withdraw whatever is left of the reward pool.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "calculateEstimatedReturns(address,address,uint256)",
      "name": "calculateEstimatedReturns",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_talent",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_currentTime",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "stakerRewards",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "talentRewards",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimRewards(address)",
      "name": "claimRewards",
      "description": "Redeems rewards since last checkpoint, and reinvests them in the stake.",
      "parameterDecorators": [
        {
          "name": "_talent",
          "description": "talent token of the stake to process.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if operation succeeds.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimRewardsOnBehalf(address,address)",
      "name": "claimRewardsOnBehalf",
      "description": "Redeems rewards for a given staker, and reinvests them in the stake.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "owner of the stake to process.",
          "recommendedTypes": []
        },
        {
          "name": "_talent",
          "description": "talent token of the stake to process.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if operation succeeds.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "convertTalentToToken(uint256)",
      "name": "convertTalentToToken",
      "description": "Converts a given Talent Token amount to TAL.",
      "parameterDecorators": [
        {
          "name": "_talent",
          "description": "The amount of Talent Tokens to convert.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The converted TAL amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "convertTokenToTalent(uint256)",
      "name": "convertTokenToTalent",
      "description": "Converts a given TAL amount to a Talent Token amount.",
      "parameterDecorators": [
        {
          "name": "_tal",
          "description": "The amount of TAL to convert.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The converted Talent Token amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "convertUsdToTalent(uint256)",
      "name": "convertUsdToTalent",
      "description": "Converts a given USD amount to Talent token.",
      "parameterDecorators": [
        {
          "name": "_usd",
          "description": "The amount of USD, in cents, to convert.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The converted Talent token amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "convertUsdToToken(uint256)",
      "name": "convertUsdToToken",
      "description": "Converts a given USD amount to TAL.",
      "parameterDecorators": [
        {
          "name": "_usd",
          "description": "The amount of USD, in cents, to convert.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The converted TAL amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "disable()",
      "name": "disable",
      "description": "Panic button, if we decide to halt the staking process for some reasonThis feature should halt further accumulation of rewards, and prevent new stakes from occuring Existing stakes will still be able to perform all usual operations on existing stakes. They just won't accumulate new TAL rewards (i.e.: they can still restake rewards and mint new talent tokens).",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "disabled()",
      "name": "disabled",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "end()",
      "name": "end",
      "description": "End date for staking period.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "factory()",
      "name": "factory",
      "description": "The Talent Token Factory contract (ITalentFactory).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxSForTalent(address)",
      "name": "maxSForTalent",
      "description": "Max S for a given talent, to halt rewards after minting is over.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onTransferReceived(address,address,uint256,bytes)",
      "name": "onTransferReceived",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_sender",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "rewardsGiven()",
      "name": "rewardsGiven",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardsLeft()",
      "name": "rewardsLeft",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardsMax()",
      "name": "rewardsMax",
      "description": "Maximum amount of rewards to be distributed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setToken(address)",
      "name": "setToken",
      "description": "Sets the TAL token address.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "ERC20 address of the TAL token. Must be a valid ERC20 token with the symbol \"TAL\";.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stableCoin()",
      "name": "stableCoin",
      "description": "stable coin to use.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stableCoinBalance()",
      "name": "stableCoinBalance",
      "description": "Calculates stable coin balance of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the stable coin balance.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakeAvailability(address)",
      "name": "stakeAvailability",
      "description": "Queries how much TAL can currently be staked on a given talent tokenThe limit of this value is enforced by the tokens' `mintingAvailability()` (see `TalentToken` contract)Stakes that exceed this amount will be rejected.",
      "parameterDecorators": [
        {
          "name": "_talent",
          "description": "Talent token to query.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "How much TAL can be staked on the given talent token, before depleting minting supply.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakeStable(address,uint256)",
      "name": "stakeStable",
      "description": "Creates a new stake from an amount of stable coin. The USD amount will be converted to the equivalent amount in TAL, according to the pre-determined rateThe contract must be previously approved to spend _amount on behalf of `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "_talent",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of stable coin to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if operation succeeds.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakes(address,address)",
      "name": "stakes",
      "description": "List of all stakes (investor => talent => Stake).",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "tokenAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "talentAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastCheckpointAt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "S",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "finishedAccumulating",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "start()",
      "name": "start",
      "description": "Start date for staking period.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "swapStableForToken(uint256)",
      "name": "swapStableForToken",
      "description": "Deposits TAL in exchange for the equivalent amount of stable coin stored in the contractMeant to be used by the contract owner to retrieve stable coin from phase 1, and provide the equivalent TAL amount expected from stakersCorresponding TAL amount will be enforced based on the set price.",
      "parameterDecorators": [
        {
          "name": "_stableAmount",
          "description": "amount of stable coin to be retrieved.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "talentPrice()",
      "name": "talentPrice",
      "description": "The price (in TAL tokens) of a single Talent Token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "talentRedeemableRewards(address)",
      "name": "talentRedeemableRewards",
      "description": "Talent's share of rewards, to be redeemable by each individual talent.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "token()",
      "name": "token",
      "description": "the token to stake.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenBalance()",
      "name": "tokenBalance",
      "description": "Calculates TAL token balance of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the amount of TAL tokens.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tokenPrice()",
      "name": "tokenPrice",
      "description": "The price (in USD cents) of a single TAL token.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalAdjustedShares()",
      "name": "totalAdjustedShares",
      "description": "Sum of sqrt(tokenAmount) for each stake Used to compute adjusted reward values.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalShares()",
      "name": "totalShares",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalStableStored()",
      "name": "totalStableStored",
      "description": "How much stablecoin was staked, but without yet depositing the expected TAL equivalentAfter TAL is deployed, `swapStableForToken(uint256)` needs to be called by an admin, to withdraw any stable coin stored in the contract, and replace it with the TAL equivalent.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalTokensStaked()",
      "name": "totalTokensStaked",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawRewards(address)",
      "name": "withdrawRewards",
      "description": "Redeems rewards since last checkpoint, and withdraws them to the owner's wallet.",
      "parameterDecorators": [
        {
          "name": "_talent",
          "description": "talent token of the stake to process.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if operation succeeds.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawTalentRewards(address)",
      "name": "withdrawTalentRewards",
      "description": "Redeems a talent's share of the staking rewardsWhen stakers claim rewards, a share of those is reserved for the talent to redeem for himself through this function.",
      "parameterDecorators": [
        {
          "name": "_talent",
          "description": "The talent token from which rewards are to be claimed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "true if operation succeeds.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}