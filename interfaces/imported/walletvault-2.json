{
  "schema": "../schema.json",
  "tags": [
    "locking",
    "vaults"
  ],
  "name": "WalletVault",
  "description": "WalletVault. A smart contract wallet which allows the user to create vaults which increase security in the following ways: - User can set a max value that can be deposited into each vault - User can set max withdrawal and a max withdrawal frequency for each vault - User can lock a vault and set an unlock delay.",
  "eventDecorators": [
    {
      "signature": "CreateVault(uint256,tuple)",
      "name": "CreateVault",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Lock(uint256)",
      "name": "Lock",
      "description": "",
      "parameterDecorators": [
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unlock(uint256)",
      "name": "Unlock",
      "description": "",
      "parameterDecorators": [
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VaultDeposit(uint256,uint256,uint256)",
      "name": "VaultDeposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "VaultWithdrawal(uint256,uint256,uint256)",
      "name": "VaultWithdrawal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WalletDeposit(address,uint256,uint256)",
      "name": "WalletDeposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "from",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WalletWithdrawal(address,uint256,uint256)",
      "name": "WalletWithdrawal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "availableBalance()",
      "name": "availableBalance",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createVault(uint256,bool,uint256,uint256,uint256)",
      "name": "createVault",
      "description": "Create a new vault. For params, see the {Vault} struct params emits the {CreateVault} event Requirements: - Only the owner can create a vault.",
      "parameterDecorators": [
        {
          "name": "_maxValue",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_locked",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_unlockDelay",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxWithdrawal",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxWithdrawalFrequency",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "CreateVault(uint256,tuple)"
      ],
      "readOnly": false
    },
    {
      "signature": "depositIntoValue(uint256,uint256)",
      "name": "depositIntoValue",
      "description": "Deposit funds into a vault.",
      "parameterDecorators": [
        {
          "name": "_vaultId",
          "description": "ID of the vault into which to deposit.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount to deposit emits the {VaultDeposit} event Requirements: - Only the owner can withdraw - Valid vault ID - The {availableBalance} of the wallet must be bigger than or equal to the deposit amount - Value in vault after the deposit must not exceed the max value of the vault.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "idToVault(uint256)",
      "name": "idToVault",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "maxValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "currentValue",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "locked",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "unlockInitiated",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "unlockedTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "unlockDelay",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "maxWithdrawal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "maxWithdrawalFrequency",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastWithdrawal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lockVault(uint256)",
      "name": "lockVault",
      "description": "Lock a vault.",
      "parameterDecorators": [
        {
          "name": "_vaultId",
          "description": "ID of the vault to lock emits the {Lock} event Requirements: - Only the owner can lock a vault - Valid vault ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sendNativeToken(address,uint256)",
      "name": "sendNativeToken",
      "description": "Send blockchain-native token to another address.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "Address of the recipient.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The Amount to send emits the {WalletWithdrawal} event Requirements: - Only the owner can lock a vault - The amount sent must be less than the available balance of the wallet - Address must not be Zero address - The sending transaction must succeed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unlockVault(uint256)",
      "name": "unlockVault",
      "description": "Unlock a vault Once unlock is initiated, the vault will be accessible and considered \"unlocked\" after the {unlockDelay} time period.",
      "parameterDecorators": [
        {
          "name": "_vaultId",
          "description": "ID of the vault to unlock emits the {Unlock} event Requirements: - Only the owner can unlock a vault - Valid vault ID.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawFromVault(uint256,uint256)",
      "name": "withdrawFromVault",
      "description": "Withdraw funds from a vault.",
      "parameterDecorators": [
        {
          "name": "_vaultId",
          "description": "ID of the vault from which to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "Amount to withdraw emits the {VaultWithdrawal} event Requirements: - Only the owner can withdraw - Valid vault ID - Vault unlocked - Withdrawal amount less than or equal to the current value of the vault - Withdrawal amount less than or equal to the vault's max withdrawal limt - The max withdrawal frequency time period must have passed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}