{
  "schema": "../schema.json",
  "tags": [
    "swaps"
  ],
  "name": "ArbFreeSwap",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "getBestAsk()",
      "name": "getBestAsk",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBestBid()",
      "name": "getBestBid",
      "description": "Return the lower price among the two (assuming consumer is selling), protecting LPs but still offering best price to consumers This assumes orderbook based markets are more accurately priced, since they can price in between the 15s windows.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getLatestPrice()",
      "name": "getLatestPrice",
      "description": "Returns the latest off-chain price, but how do I get the bid/ask spread across all orderbook exchanges?.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenAskPrice()",
      "name": "getTokenAskPrice",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTokenBidPrice()",
      "name": "getTokenBidPrice",
      "description": "calculate price based on pair reserves https://ethereum.stackexchange.com/a/94173/ BAT/ETH pair address hardcoded BAT: 0x482dC9bB08111CB875109B075A40881E48aE02Cd ETH: 0xd0A1E359811322d97991E03f863a0C30C2cF029C Factory address on all networks 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "message()",
      "name": "message",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "updateMessage(string)",
      "name": "updateMessage",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newMessage",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}