{
  "schema": "../schema.json",
  "tags": [],
  "name": "AggregationRouterV4",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OrderFilledRFQ(bytes32,uint256)",
      "name": "OrderFilledRFQ",
      "description": "",
      "parameterDecorators": [
        {
          "name": "orderHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "makingAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DOMAIN_SEPARATOR()",
      "name": "DOMAIN_SEPARATOR",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "LIMIT_ORDER_RFQ_TYPEHASH()",
      "name": "LIMIT_ORDER_RFQ_TYPEHASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "cancelOrderRFQ(uint256)",
      "name": "cancelOrderRFQ",
      "description": "Cancels order's quote.",
      "parameterDecorators": [
        {
          "name": "orderInfo",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "clipperSwap(address,address,uint256,uint256)",
      "name": "clipperSwap",
      "description": "Same as `clipperSwapTo` but uses `msg.sender` as recipient.",
      "parameterDecorators": [
        {
          "name": "srcToken",
          "description": "Source token.",
          "recommendedTypes": []
        },
        {
          "name": "dstToken",
          "description": "Destination token.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of source tokens to swap.",
          "recommendedTypes": []
        },
        {
          "name": "minReturn",
          "description": "Minimal allowed returnAmount to make transaction commit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "returnAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "clipperSwapTo(address,address,address,uint256,uint256)",
      "name": "clipperSwapTo",
      "description": "Performs swap using Clipper exchange. Wraps and unwraps ETH if required. Sending non-zero `msg.value` for anything but ETH swaps is prohibited.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "Address that will receive swap funds.",
          "recommendedTypes": []
        },
        {
          "name": "srcToken",
          "description": "Source token.",
          "recommendedTypes": []
        },
        {
          "name": "dstToken",
          "description": "Destination token.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of source tokens to swap.",
          "recommendedTypes": []
        },
        {
          "name": "minReturn",
          "description": "Minimal allowed returnAmount to make transaction commit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "returnAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "clipperSwapToWithPermit(address,address,address,uint256,uint256,bytes)",
      "name": "clipperSwapToWithPermit",
      "description": "Same as `clipperSwapTo` but calls permit first, allowing to approve token spending and make a swap in one transaction.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "Address that will receive swap funds.",
          "recommendedTypes": []
        },
        {
          "name": "srcToken",
          "description": "Source token.",
          "recommendedTypes": []
        },
        {
          "name": "dstToken",
          "description": "Destination token.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of source tokens to swap.",
          "recommendedTypes": []
        },
        {
          "name": "minReturn",
          "description": "Minimal allowed returnAmount to make transaction commit.",
          "recommendedTypes": []
        },
        {
          "name": "permit",
          "description": "Should contain valid permit that can be used in `IERC20Permit.permit` calls. See tests for examples.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "returnAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "destroy()",
      "name": "destroy",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillOrderRFQ(tuple(uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)",
      "name": "fillOrderRFQ",
      "description": "Fills order's quote, fully or partially (whichever is possible).",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "Order quote to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "info",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "signature",
          "description": "Signature to confirm quote ownership.",
          "recommendedTypes": []
        },
        {
          "name": "makingAmount",
          "description": "Making amount.",
          "recommendedTypes": []
        },
        {
          "name": "takingAmount",
          "description": "Taking amount.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillOrderRFQTo(tuple(uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address)",
      "name": "fillOrderRFQTo",
      "description": "Same as `fillOrderRFQ` but allows to specify funds destination instead of `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "Order quote to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "info",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "signature",
          "description": "Signature to confirm quote ownership.",
          "recommendedTypes": []
        },
        {
          "name": "makingAmount",
          "description": "Making amount.",
          "recommendedTypes": []
        },
        {
          "name": "takingAmount",
          "description": "Taking amount.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "Address that will receive swap funds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fillOrderRFQToWithPermit(tuple(uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address,bytes)",
      "name": "fillOrderRFQToWithPermit",
      "description": "Fills Same as `fillOrderRFQ` but calls permit first, allowing to approve token spending and make a swap in one transaction. Also allows to specify funds destination instead of `msg.sender`.",
      "parameterDecorators": [
        {
          "name": "order",
          "description": "Order quote to fill.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "info",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takerAsset",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "maker",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "allowedSender",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "makingAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "takingAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "signature",
          "description": "Signature to confirm quote ownership.",
          "recommendedTypes": []
        },
        {
          "name": "makingAmount",
          "description": "Making amount.",
          "recommendedTypes": []
        },
        {
          "name": "takingAmount",
          "description": "Taking amount.",
          "recommendedTypes": []
        },
        {
          "name": "target",
          "description": "Address that will receive swap funds.",
          "recommendedTypes": []
        },
        {
          "name": "permit",
          "description": "Should consist of abiencoded token address and encoded `IERC20Permit.permit` call. See tests for examples.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "invalidatorForOrderRFQ(address,uint256)",
      "name": "invalidatorForOrderRFQ",
      "description": "Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes.",
      "parameterDecorators": [
        {
          "name": "maker",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "slot",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Result Each bit represents whenever corresponding quote was filled.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rescueFunds(address,uint256)",
      "name": "rescueFunds",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "swap(address,tuple(address,address,address,address,uint256,uint256,uint256,bytes),bytes)",
      "name": "swap",
      "description": "Performs a swap, delegating all calls encoded in `data` to `caller`. See tests for usage examples.",
      "parameterDecorators": [
        {
          "name": "caller",
          "description": "Aggregation executor that executes calls described in `data`.",
          "recommendedTypes": []
        },
        {
          "name": "desc",
          "description": "Swap description.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "srcToken",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "dstToken",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "srcReceiver",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "dstReceiver",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "amount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "minReturnAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "flags",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "permit",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "data",
          "description": "Encoded calls that `caller` should execute in between of swaps.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "returnAmount",
          "description": "Resulting token amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "spentAmount",
          "description": "Source token amount.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "gasLeft",
          "description": "Gas left.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uniswapV3Swap(uint256,uint256,uint256[])",
      "name": "uniswapV3Swap",
      "description": "Same as `uniswapV3SwapTo` but uses `msg.sender` as recipient.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of source tokens to swap.",
          "recommendedTypes": []
        },
        {
          "name": "minReturn",
          "description": "Minimal allowed returnAmount to make transaction commit.",
          "recommendedTypes": []
        },
        {
          "name": "pools",
          "description": "Pools chain used for swaps. Pools src and dst tokens should match to make swap happen.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "returnAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uniswapV3SwapCallback(int256,int256,bytes)",
      "name": "uniswapV3SwapCallback",
      "description": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap. In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
      "parameterDecorators": [
        {
          "name": "amount0Delta",
          "description": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
          "recommendedTypes": []
        },
        {
          "name": "amount1Delta",
          "description": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uniswapV3SwapTo(address,uint256,uint256,uint256[])",
      "name": "uniswapV3SwapTo",
      "description": "Performs swap using Uniswap V3 exchange. Wraps and unwraps ETH if required. Sending non-zero `msg.value` for anything but ETH swaps is prohibited.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "Address that will receive swap funds.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of source tokens to swap.",
          "recommendedTypes": []
        },
        {
          "name": "minReturn",
          "description": "Minimal allowed returnAmount to make transaction commit.",
          "recommendedTypes": []
        },
        {
          "name": "pools",
          "description": "Pools chain used for swaps. Pools src and dst tokens should match to make swap happen.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "returnAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "uniswapV3SwapToWithPermit(address,address,uint256,uint256,uint256[],bytes)",
      "name": "uniswapV3SwapToWithPermit",
      "description": "Same as `uniswapV3SwapTo` but calls permit first, allowing to approve token spending and make a swap in one transaction.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "Address that will receive swap funds.",
          "recommendedTypes": []
        },
        {
          "name": "srcToken",
          "description": "Source token.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of source tokens to swap.",
          "recommendedTypes": []
        },
        {
          "name": "minReturn",
          "description": "Minimal allowed returnAmount to make transaction commit.",
          "recommendedTypes": []
        },
        {
          "name": "pools",
          "description": "Pools chain used for swaps. Pools src and dst tokens should match to make swap happen.",
          "recommendedTypes": []
        },
        {
          "name": "permit",
          "description": "Should contain valid permit that can be used in `IERC20Permit.permit` calls. See tests for examples.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "returnAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unoswap(address,uint256,uint256,bytes32[])",
      "name": "unoswap",
      "description": "Performs swap using Uniswap exchange. Wraps and unwraps ETH if required. Sending non-zero `msg.value` for anything but ETH swaps is prohibited.",
      "parameterDecorators": [
        {
          "name": "srcToken",
          "description": "Source token.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of source tokens to swap.",
          "recommendedTypes": []
        },
        {
          "name": "minReturn",
          "description": "Minimal allowed returnAmount to make transaction commit.",
          "recommendedTypes": []
        },
        {
          "name": "pools",
          "description": "Pools chain used for swaps. Pools src and dst tokens should match to make swap happen.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "returnAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unoswapWithPermit(address,uint256,uint256,bytes32[],bytes)",
      "name": "unoswapWithPermit",
      "description": "Same as `unoswap` but calls permit first, allowing to approve token spending and make a swap in one transaction.",
      "parameterDecorators": [
        {
          "name": "srcToken",
          "description": "Source token.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "Amount of source tokens to swap.",
          "recommendedTypes": []
        },
        {
          "name": "minReturn",
          "description": "Minimal allowed returnAmount to make transaction commit.",
          "recommendedTypes": []
        },
        {
          "name": "pools",
          "description": "Pools chain used for swaps. Pools src and dst tokens should match to make swap happen.",
          "recommendedTypes": []
        },
        {
          "name": "permit",
          "description": "Should contain valid permit that can be used in `IERC20Permit.permit` calls. See tests for examples.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "returnAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}