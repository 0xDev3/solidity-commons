{"schema":"../schema.json","tags":["tokens","swaps"],"name":"WrapperV2","description":"Wrapper contract facilitates the swap of the ERC20 tokens (should be in allowedlist) with the underlying token.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"An event emitted when a transaction is executed.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Swapped(address,address,uint256,uint256)","name":"Swapped","description":"An event emitted when a transaction is executed.","parameterDecorators":[{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":true},{"name":"beneficiary","description":"who got the tokens.","recommendedTypes":[],"indexed":true},{"name":"purchaser","description":"who paid for the tokens.","recommendedTypes":[],"indexed":false},{"name":"value","description":"weis paid for purchase.","recommendedTypes":[],"indexed":false}]},{"signature":"TransferOwnershipOfUnderlyingToken(address)","name":"TransferOwnershipOfUnderlyingToken","description":"An event emitted when a transaction is executed.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Unswapped(address,address,uint256,uint256)","name":"Unswapped","description":"An event emitted when a transaction is executed.","parameterDecorators":[{"name":"amount","description":"amount of tokens purchased.","recommendedTypes":[],"indexed":true},{"name":"beneficiary","description":"who got the tokens.","recommendedTypes":[],"indexed":true},{"name":"purchaser","description":"who paid for the tokens.","recommendedTypes":[],"indexed":false},{"name":"value","description":"weis paid for purchase.","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"allowedSwapTokens(address)","name":"allowedSwapTokens","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"swap(address,uint256)","name":"swap","description":"Convert an amount of input token_ to an equivalent amount of the output token - No need of explict reentrnacy check here as we are deducting the funds first before minting new ones so even if attacker tries to do that it will benefit him/her as attacker has to pay the funds again. And this contract is safe from cross function re-entrancy attack. - Implementation doesn't assume that decimals of the swap tokens and underlying token is same so implementation inherently converts the `amount_` to the required precision. `amount_` always follow the precision of the swap tokens not the underlying tokens.","parameterDecorators":[{"name":"token_","description":"address of token to swap.","recommendedTypes":[]},{"name":"amount_","description":"amount of token to swap/receive.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnershipOfUnderlyingToken(address)","name":"transferOwnershipOfUnderlyingToken","description":"Transfer ownership of the underlying token to the `newOwner`.","parameterDecorators":[{"name":"newOwner_","description":"Address of the new owner of the `underlyingToken`.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"underlyingToken()","name":"underlyingToken","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"unswap(address,uint256)","name":"unswap","description":"Convert an amount of the output token to an equivalent amount of input token_. - Sufficient balance check is covered in the `_burn` function so avoid having the explicit check here. - No need for the reentrancy check as the state already updated before the transfer of funds. - Implementation doesn't assume that decimals of the swap tokens and underlying token is same so implementation inherently converts the `amount_` to the required precision. `amount_` always follow the precision of the swap tokens not the underlying tokens.","parameterDecorators":[{"name":"token_","description":"address of token to receive.","recommendedTypes":[]},{"name":"amount_","description":"amount of token to swap/receive.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}