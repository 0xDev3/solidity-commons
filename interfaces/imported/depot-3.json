{
  "schema": "../schema.json",
  "tags": [],
  "name": "Depot",
  "description": "",
  "eventDecorators": [
    {
      "signature": "MaxEthPurchaseUpdated(uint256)",
      "name": "MaxEthPurchaseUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FundsWalletUpdated(address)",
      "name": "FundsWalletUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newFundsWallet",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Exchange(string,uint256,string,uint256)",
      "name": "Exchange",
      "description": "",
      "parameterDecorators": [
        {
          "name": "RigelTokenAmount",
          "description": "amount of Rigel tokens purchased.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "purchaser",
          "description": "who paid for the tokens.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "value",
          "description": "weis paid for purchase.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SynthWithdrawal(address,uint256)",
      "name": "SynthWithdrawal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SynthDeposit(address,uint256,uint256)",
      "name": "SynthDeposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "depositIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SynthDepositRemoved(address,uint256,uint256)",
      "name": "SynthDepositRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "depositIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "SynthDepositNotAccepted(address,uint256,uint256)",
      "name": "SynthDepositNotAccepted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "minimum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MinimumDepositAmountUpdated(uint256)",
      "name": "MinimumDepositAmountUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NonPayableContract(address,uint256)",
      "name": "NonPayableContract",
      "description": "",
      "parameterDecorators": [
        {
          "name": "receiver",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ClearedDeposit(address,address,uint256,uint256,uint256)",
      "name": "ClearedDeposit",
      "description": "",
      "parameterDecorators": [
        {
          "name": "fromAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "toAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "fromETHAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "toAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "depositIndex",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PauseChanged(bool)",
      "name": "PauseChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "isPaused",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SelfDestructTerminated()",
      "name": "SelfDestructTerminated",
      "description": "",
      "parameterDecorators": []
    },
    {
      "signature": "SelfDestructed(address)",
      "name": "SelfDestructed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "who got the tokens.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SelfDestructInitiated(uint256)",
      "name": "SelfDestructInitiated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "selfDestructDelay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SelfDestructBeneficiaryUpdated(address)",
      "name": "SelfDestructBeneficiaryUpdated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newBeneficiary",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerNominated(address)",
      "name": "OwnerNominated",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnerChanged(address,address)",
      "name": "OwnerChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "oldOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "resolver()",
      "name": "resolver",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minimumDepositAmount()",
      "name": "minimumDepositAmount",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchangeEtherForSynthsAtRate(uint256)",
      "name": "exchangeEtherForSynthsAtRate",
      "description": "Exchange ETH to xUSD while insisting on a particular rate. This allows a user to exchange while protecting against frontrunning by the contract owner on the exchange rate.",
      "parameterDecorators": [
        {
          "name": "guaranteedRate",
          "description": "The exchange rate (ether price) which must be honored or the call will revert.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "synthsReceivedForEther(uint256)",
      "name": "synthsReceivedForEther",
      "description": "Calculate how many synths you will receive if you transfer an amount of ether.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of ether (in wei) you want to ask about.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "nominateNewOwner(address)",
      "name": "nominateNewOwner",
      "description": "Nominate a new owner of this contract. Only the current owner may nominate a new owner.",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPaused(bool)",
      "name": "setPaused",
      "description": "Change the paused state of the contract. Only the contract owner may call this.",
      "parameterDecorators": [
        {
          "name": "_paused",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initiationTime()",
      "name": "initiationTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "shadowsReceivedForEther(uint256)",
      "name": "shadowsReceivedForEther",
      "description": "Calculate how many DOWS you will receive if you transfer an amount of ether.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of ether (in wei) you want to ask about.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchangeEtherForSynths()",
      "name": "exchangeEtherForSynths",
      "description": "Exchange ETH to xUSD.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSelfDestructBeneficiary(address)",
      "name": "setSelfDestructBeneficiary",
      "description": "Set the beneficiary address of this contract. Only the contract owner may call this. The provided beneficiary must be non-null.",
      "parameterDecorators": [
        {
          "name": "_beneficiary",
          "description": "The address to pay any eth contained in this contract to upon self-destruction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fundsWallet()",
      "name": "fundsWallet",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "terminateSelfDestruct()",
      "name": "terminateSelfDestruct",
      "description": "Terminate and reset the self-destruction timer. Only the contract owner may call this.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalSellableDeposits()",
      "name": "totalSellableDeposits",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setResolver(address)",
      "name": "setResolver",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_resolver",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nominatedOwner()",
      "name": "nominatedOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setFundsWallet(address)",
      "name": "setFundsWallet",
      "description": "Set the funds wallet where ETH raised is held.",
      "parameterDecorators": [
        {
          "name": "_fundsWallet",
          "description": "The new address to forward ETH and Synths to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "shadowsReceivedForSynths(uint256)",
      "name": "shadowsReceivedForSynths",
      "description": "Calculate how many DOWS you will receive if you transfer an amount of synths.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of synths (in 18 decimal places) you want to ask about.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "depositStartIndex()",
      "name": "depositStartIndex",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchangeSynthsForDOWS(uint256)",
      "name": "exchangeSynthsForDOWS",
      "description": "Exchange xUSD for DOWS.",
      "parameterDecorators": [
        {
          "name": "synthAmount",
          "description": "The amount of synths the user wishes to exchange.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "acceptOwnership()",
      "name": "acceptOwnership",
      "description": "Accept the nomination to be owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawMyDepositedSynths()",
      "name": "withdrawMyDepositedSynths",
      "description": "Allows a user to withdraw all of their previously deposited synths from this contract if needed. Developer note: We could keep an index of address to deposits to make this operation more efficient but then all the other operations on the queue become less efficient. It's expected that this function will be very rarely used, so placing the inefficiency here is intentional. The usual use case does not involve a withdrawal.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchangeEtherForDOWS()",
      "name": "exchangeEtherForDOWS",
      "description": "Exchange ETH to DOWS.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lastPauseTime()",
      "name": "lastPauseTime",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "selfDestruct()",
      "name": "selfDestruct",
      "description": "If the self-destruction delay has elapsed, destroy this contract and remit any ether it owns to the beneficiary address. Only the contract owner may call this.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "SELFDESTRUCT_DELAY()",
      "name": "SELFDESTRUCT_DELAY",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setMinimumDepositAmount(uint256)",
      "name": "setMinimumDepositAmount",
      "description": "Set the minimum deposit amount required to depoist xUSD into the FIFO queue.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "The new new minimum number of xUSD required to deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposits(uint256)",
      "name": "deposits",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxEthPurchase()",
      "name": "maxEthPurchase",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "selfDestructInitiated()",
      "name": "selfDestructInitiated",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setMaxEthPurchase(uint256)",
      "name": "setMaxEthPurchase",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_maxEthPurchase",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initiateSelfDestruct()",
      "name": "initiateSelfDestruct",
      "description": "Begin the self-destruction counter of this contract. Once the delay has elapsed, the contract may be self-destructed. Only the contract owner may call this.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "selfDestructBeneficiary()",
      "name": "selfDestructBeneficiary",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "exchangeEtherForDOWSAtRate(uint256,uint256)",
      "name": "exchangeEtherForDOWSAtRate",
      "description": "Exchange ETH to DOWS while insisting on a particular set of rates. This allows a user to exchange while protecting against frontrunning by the contract owner on the exchange rates.",
      "parameterDecorators": [
        {
          "name": "guaranteedEtherRate",
          "description": "The ether exchange rate which must be honored or the call will revert.",
          "recommendedTypes": []
        },
        {
          "name": "guaranteedShadowsRate",
          "description": "The shadows exchange rate which must be honored or the call will revert.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "smallDeposits(address)",
      "name": "smallDeposits",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdrawShadows(uint256)",
      "name": "withdrawShadows",
      "description": "Allows the owner to withdraw DOWS from this contract if needed.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of DOWS to attempt to withdraw (in 18 decimal places).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exchangeSynthsForDOWSAtRate(uint256,uint256)",
      "name": "exchangeSynthsForDOWSAtRate",
      "description": "Exchange xUSD for DOWS while insisting on a particular rate. This allows a user to exchange while protecting against frontrunning by the contract owner on the exchange rate.",
      "parameterDecorators": [
        {
          "name": "synthAmount",
          "description": "The amount of synths the user wishes to exchange.",
          "recommendedTypes": []
        },
        {
          "name": "guaranteedRate",
          "description": "A rate (shadows price) the caller wishes to insist upon.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositSynths(uint256)",
      "name": "depositSynths",
      "description": "depositSynths: Allows users to deposit synths via the approve / transferFrom workflow.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of xUSD you wish to deposit (must have been approved first).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "depositEndIndex()",
      "name": "depositEndIndex",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}