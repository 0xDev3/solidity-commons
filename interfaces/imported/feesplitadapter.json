{
  "schema": "../schema.json",
  "tags": [],
  "name": "FeeSplitAdapter",
  "description": "FeeSplitAdapter.",
  "eventDecorators": [
    {
      "signature": "AnyoneCallableUpdated(bool)",
      "name": "AnyoneCallableUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_status",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CallerStatusUpdated(address,bool)",
      "name": "CallerStatusUpdated",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_status",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FeesAccrued(address,address,uint256,uint256)",
      "name": "FeesAccrued",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_operator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_methodologist",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_operatorTake",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_methodologistTake",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpgradeRegistered(bytes32,uint256)",
      "name": "UpgradeRegistered",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_upgradeHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "accrueFeesAndDistribute()",
      "name": "accrueFeesAndDistribute",
      "description": "ANYONE CALLABLE: Accrues fees from streaming fee module. Gets resulting balance after fee accrual, calculates fees for operator and methodologist, and sends to each. NOTE: mint/redeem fees will automatically be sent to this address so reading the balance of the SetToken in the contract after accrual is sufficient for accounting for all collected fees.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "anyoneCallable()",
      "name": "anyoneCallable",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "callAllowList(address)",
      "name": "callAllowList",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "debtIssuanceModule()",
      "name": "debtIssuanceModule",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "manager()",
      "name": "manager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "operatorFeeSplit()",
      "name": "operatorFeeSplit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setTimeLockPeriod(uint256)",
      "name": "setTimeLockPeriod",
      "description": "Change timeLockPeriod period. Generally called after initially settings have been set up.",
      "parameterDecorators": [
        {
          "name": "_timeLockPeriod",
          "description": "Time in seconds that upgrades need to be evaluated before execution.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setToken()",
      "name": "setToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "streamingFeeModule()",
      "name": "streamingFeeModule",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "timeLockPeriod()",
      "name": "timeLockPeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "timeLockedUpgrades(bytes32)",
      "name": "timeLockedUpgrades",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateAnyoneCallable(bool)",
      "name": "updateAnyoneCallable",
      "description": "OPERATOR ONLY: Toggle whether anyone can call function, bypassing the callAllowlist.",
      "parameterDecorators": [
        {
          "name": "_status",
          "description": "Boolean indicating whether to allow anyone call.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateCallerStatus(address[],bool[])",
      "name": "updateCallerStatus",
      "description": "OPERATOR ONLY: Toggle ability for passed addresses to call only allowed caller functions.",
      "parameterDecorators": [
        {
          "name": "_callers",
          "description": "Array of caller addresses to toggle status.",
          "recommendedTypes": []
        },
        {
          "name": "_statuses",
          "description": "Array of statuses for each caller.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateFeeRecipient(address)",
      "name": "updateFeeRecipient",
      "description": "ONLY OPERATOR: Updates fee recipient on both streaming fee and debt issuance modules.",
      "parameterDecorators": [
        {
          "name": "_newFeeRecipient",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateFeeSplit(uint256)",
      "name": "updateFeeSplit",
      "description": "ONLY OPERATOR: Updates fee split between operator and methodologist. Split defined in precise units (1% = 10^16).",
      "parameterDecorators": [
        {
          "name": "_newFeeSplit",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateIssueFee(uint256)",
      "name": "updateIssueFee",
      "description": "ONLY OPERATOR: Updates issue fee on IssuanceModule. Only is executed once time lock has passed.",
      "parameterDecorators": [
        {
          "name": "_newFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateRedeemFee(uint256)",
      "name": "updateRedeemFee",
      "description": "ONLY OPERATOR: Updates redeem fee on IssuanceModule. Only is executed once time lock has passed.",
      "parameterDecorators": [
        {
          "name": "_newFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateStreamingFee(uint256)",
      "name": "updateStreamingFee",
      "description": "ONLY OPERATOR: Updates streaming fee on StreamingFeeModule. NOTE: This will accrue streaming fees though not send to operator and methodologist.",
      "parameterDecorators": [
        {
          "name": "_newFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}