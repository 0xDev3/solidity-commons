{"schema":"../schema.json","tags":["nft"],"name":"ClaimManager","description":"This contract holds all NFTs. The only time it does something is if a user requests a claim. We need to make sure a user can only claim when they have balance.*.","eventDecorators":[{"signature":"ClaimPayout(bytes32,address,uint256)","name":"ClaimPayout","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"hackId","description":"","recommendedTypes":[],"indexed":true},{"name":"user","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ConfirmedHack(bytes32,address,uint256)","name":"ConfirmedHack","description":"Triggers on new deposit call.","parameterDecorators":[{"name":"hackId","description":"","recommendedTypes":[],"indexed":true},{"name":"protocol","description":"","recommendedTypes":[],"indexed":true},{"name":"timestamp","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"ETH_SIG()","name":"ETH_SIG","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes4"}],"emittableEvents":[],"readOnly":true},{"signature":"changeMaster(address)","name":"changeMaster","description":"","parameterDecorators":[{"name":"_newMaster","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"confirmHack(address,uint256)","name":"confirmHack","description":"Called by Armor for now--we confirm a hack happened and give a timestamp for what time it was.","parameterDecorators":[{"name":"_protocol","description":"The address of the protocol that has been hacked (address that would be on yNFT).","recommendedTypes":[]},{"name":"_hackTime","description":"The timestamp of the time the hack occurred.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialize(address)","name":"initialize","description":"Start the contract off by giving it the address of Nexus Mutual to submit a claim.*.","parameterDecorators":[{"name":"_armorMaster","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"redeemClaim(address,uint256,uint256)","name":"redeemClaim","description":"Make sure this cannot be done twice. I also think this protocol interaction can be simplified.*. User requests claim based on a loss. Do we want this to be callable by anyone or only the person requesting? Proof-of-Loss must be implemented here.","parameterDecorators":[{"name":"_protocol","description":"","recommendedTypes":[]},{"name":"_hackTime","description":"The given timestamp for when the hack occurred.","recommendedTypes":[]},{"name":"_amount","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"redeemNft(uint256)","name":"redeemNft","description":"Calls the arNFT contract to redeem a claim (receive funds) if it has been accepted. This is callable by anyone without any checks--either we receive money or it reverts.","parameterDecorators":[{"name":"_nftId","description":"The ID of the yNft token.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"submitNft(uint256,uint256)","name":"submitNft","description":"Submit any NFT that was active at the time of a hack on its protocol.","parameterDecorators":[{"name":"_nftId","description":"ID of the NFT to submit.","recommendedTypes":[]},{"name":"_hackTime","description":"The timestamp of the hack that occurred. Hacktime is the START of the hack if not a single tx.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferNft(address,uint256)","name":"transferNft","description":"Used by StakeManager in case a user wants to withdraw their NFT.","parameterDecorators":[{"name":"_to","description":"Address to send the NFT to.","recommendedTypes":[]},{"name":"_nftId","description":"ID of the NFT to be withdrawn.*.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}