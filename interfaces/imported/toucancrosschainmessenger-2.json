{
  "schema": "../schema.json",
  "tags": [],
  "name": "ToucanCrosschainMessenger",
  "description": "",
  "eventDecorators": [
    {
      "signature": "BridgeRequestReceived(uint32,uint32,address,address,uint256)",
      "name": "BridgeRequestReceived",
      "description": "Notifies when found an error decoding request result.",
      "parameterDecorators": [
        {
          "name": "originDomain",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "toDomain",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "bridger",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "Unstake amount.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "BridgeRequestSent(uint32,bytes)",
      "name": "BridgeRequestSent",
      "description": "Notifies when found an error decoding request result.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Unstake amount.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "holder",
          "description": "Address of the holder.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Notifies when found an error decoding request result.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Unstake amount.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "holder",
          "description": "Address of the holder.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "enrollRemoteRouter(uint32,bytes32)",
      "name": "enrollRemoteRouter",
      "description": "Register the address of a Router contract for the same xApp on a remote chain.",
      "parameterDecorators": [
        {
          "name": "_domain",
          "description": "The domain of the remote xApp Router.",
          "recommendedTypes": []
        },
        {
          "name": "_router",
          "description": "The address of the remote xApp Router.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "handle(uint32,bytes32,bytes)",
      "name": "handle",
      "description": "Receive messages sent via Optics from other remote xApp Routers; parse the contents of the message and enact the message's effects on the local chain. Called by an Optics Replica contract while processing a message sent via Optics.",
      "parameterDecorators": [
        {
          "name": "_origin",
          "description": "The domain the message is coming from.",
          "recommendedTypes": []
        },
        {
          "name": "_sender",
          "description": "The address the message is coming from.",
          "recommendedTypes": []
        },
        {
          "name": "_message",
          "description": "The message in the form of raw bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "remotes(uint32)",
      "name": "remotes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "requests(bytes32)",
      "name": "requests",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "bridger",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "toDomain",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "isReverted",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sendMessage(uint32,address,uint256)",
      "name": "sendMessage",
      "description": "Send a message of \"Type A\" to a remote xApp Router via Optics; this message is called to take some action in the cross-chain context.",
      "parameterDecorators": [
        {
          "name": "_destinationDomain",
          "description": "The domain to send the message to.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setXAppConnectionManager(address)",
      "name": "setXAppConnectionManager",
      "description": "Modify the contract the xApp uses to validate Replica contracts.",
      "parameterDecorators": [
        {
          "name": "_xAppConnectionManager",
          "description": "The address of the xAppConnectionManager contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "xAppConnectionManager()",
      "name": "xAppConnectionManager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}