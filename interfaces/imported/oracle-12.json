{
  "schema": "../schema.json",
  "tags": [
    "oracles"
  ],
  "name": "Oracle",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OracleRequest(address,bytes32,bytes32,uint256,address,bytes4,bytes)",
      "name": "OracleRequest",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "requester",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "requestId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "jobId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "payment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "callbackAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "callbackFunction",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a new COMP speed is calculated for a market. Emitted when the implementation of a variable debt token is upgraded.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "commitments(bytes32)",
      "name": "commitments",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fulfillOracleRequest(bytes32,address,bytes4,bytes)",
      "name": "fulfillOracleRequest",
      "description": "Allows validator fulfill data to callbackAddress contract and in function callbackFunctionId Remove commitments requestId Add reward claim to validator.",
      "parameterDecorators": [
        {
          "name": "_requestId",
          "description": "The request ID.",
          "recommendedTypes": []
        },
        {
          "name": "_callbackAddress",
          "description": "The address contract to fulfill data.",
          "recommendedTypes": []
        },
        {
          "name": "_callbackFunctionId",
          "description": "The function to call in callbackAddress.",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "The encoded data to fill in function in _callbackAddress.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getAuthorizationStatus(address)",
      "name": "getAuthorizationStatus",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_node",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOraichainToken()",
      "name": "getOraichainToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onTokenTransfer(address,uint256,bytes)",
      "name": "onTokenTransfer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,bytes)",
      "name": "oracleRequest",
      "description": "Creates the request. Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the validator to detect.",
      "parameterDecorators": [
        {
          "name": "_sender",
          "description": "The sender of the request.",
          "recommendedTypes": []
        },
        {
          "name": "_payment",
          "description": "The amount of payment given (specified in wei).",
          "recommendedTypes": []
        },
        {
          "name": "_specId",
          "description": "The Job Specification ID.",
          "recommendedTypes": []
        },
        {
          "name": "_callbackAddress",
          "description": "The callback address for the response.",
          "recommendedTypes": []
        },
        {
          "name": "_callbackFunction",
          "description": "The callback function ID for the response.",
          "recommendedTypes": []
        },
        {
          "name": "_nonce",
          "description": "The nonce sent by the requester.",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "The data of the request.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paymentFee(bytes32)",
      "name": "paymentFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewardClaim(address)",
      "name": "rewardClaim",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setFulfillmentPermission(address,bool)",
      "name": "setFulfillmentPermission",
      "description": "Set permission for node Only nodes in authorizedNodes is allowance call fulfillOracleRequest.",
      "parameterDecorators": [
        {
          "name": "_node",
          "description": "The node address.",
          "recommendedTypes": []
        },
        {
          "name": "_allowed",
          "description": "The permission.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Withdraw request fee for validator. Only when msg.sender == owner or msg.sender = validator and token fee of this address > _amount.",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "The amount to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAll()",
      "name": "withdrawAll",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}