{
  "schema": "../schema.json",
  "tags": [
    "borrowing",
    "lending",
    "flash loans",
    "strategies",
    "loans",
    "yield",
    "aave",
    "yearn finance"
  ],
  "name": "AaveFlashloanStrategy",
  "description": "AaveFlashloanStrategy. Angle strategies computes the optimal collateral ratio based on AAVE rewards for deposits and borrows. This strategy is used to optimize lending yield on Aave by taking some form or recursivity that is to say by borrowing to maximize Aave rewards.",
  "eventDecorators": [
    {
      "signature": "EmergencyExitActivated()",
      "name": "EmergencyExitActivated",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": []
    },
    {
      "signature": "Harvested(uint256,uint256,uint256,uint256)",
      "name": "Harvested",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "profit",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "loss",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "debtPayment",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "debtOutstanding",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "UpdatedDebtThreshold(uint256)",
      "name": "UpdatedDebtThreshold",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "debtThreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdatedIsRewardActivated(bool)",
      "name": "UpdatedIsRewardActivated",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "activated",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdatedMaxReportDelayed(uint256)",
      "name": "UpdatedMaxReportDelayed",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "delay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdatedMinReportDelayed(uint256)",
      "name": "UpdatedMinReportDelayed",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "delay",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdatedRewardAmountAndMinimumAmountMoved(uint256,uint256)",
      "name": "UpdatedRewardAmountAndMinimumAmountMoved",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "_rewardAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_minimumAmountMoved",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UpdatedRewards(address)",
      "name": "UpdatedRewards",
      "description": "An event emitted when staked tokens are withdrawn.",
      "parameterDecorators": [
        {
          "name": "rewards",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "BASE()",
      "name": "BASE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "GUARDIAN_ROLE()",
      "name": "GUARDIAN_ROLE",
      "description": "Role for guardians and governors.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "KEEPER_ROLE()",
      "name": "KEEPER_ROLE",
      "description": "Role for keepers.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "POOLMANAGER_ROLE()",
      "name": "POOLMANAGER_ROLE",
      "description": "Role for `PoolManager` only.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SECONDSPERYEAR()",
      "name": "SECONDSPERYEAR",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addGuardian(address)",
      "name": "addGuardian",
      "description": "Adds a new guardian address.",
      "parameterDecorators": [
        {
          "name": "_guardian",
          "description": "New guardian address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "boolParams()",
      "name": "boolParams",
      "description": "Struct with some boolean parameters of the contract These parameters are packed in a struct for efficiency of SLOAD operations.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "automaticallyComputeCollatRatio",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "isFlashMintActive",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "withdrawCheck",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "cooldownStkAave",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimRewards()",
      "name": "claimRewards",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cooldownSeconds()",
      "name": "cooldownSeconds",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "daiBorrowCollatRatio()",
      "name": "daiBorrowCollatRatio",
      "description": "Parameter used for flash mints.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "debtThreshold()",
      "name": "debtThreshold",
      "description": "Use this to adjust the threshold at which running a debt causes a harvest trigger. See `setDebtThreshold()` for more details.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "discountFactor()",
      "name": "discountFactor",
      "description": "Discount factor applied to the StkAAVE price.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "emergencyExit()",
      "name": "emergencyExit",
      "description": "See note on `setEmergencyExit()`.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "estimatedAPR()",
      "name": "estimatedAPR",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "estimatedTotalAssets()",
      "name": "estimatedTotalAssets",
      "description": "Estimates the total assets controlled by the strategy. It sums the effective deposit amount to the rewards accumulated.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentPosition()",
      "name": "getCurrentPosition",
      "description": "Get the current position of the strategy: that is to say the amount deposited and the amount borrowed on Aave. The actual amount brought is `deposits - borrows`.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "deposits",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "borrows",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "harvest()",
      "name": "harvest",
      "description": "Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "harvest(uint256)",
      "name": "harvest",
      "description": "Harvests the Strategy, recognizing any profits or losses and adjusting the Strategy's position.",
      "parameterDecorators": [
        {
          "name": "borrowInit",
          "description": "Approximate optimal borrows to have faster convergence on the NR method.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,address,address,address[])",
      "name": "initialize",
      "description": "Constructor of the `Strategy`.",
      "parameterDecorators": [
        {
          "name": "_poolManager",
          "description": "Address of the `PoolManager` lending to this strategy.",
          "recommendedTypes": []
        },
        {
          "name": "interestRateStrategyAddress_",
          "description": "Address of the `InterestRateStrategy` defining borrow rates for the collateral.",
          "recommendedTypes": []
        },
        {
          "name": "governor",
          "description": "Governor address of the protocol.",
          "recommendedTypes": []
        },
        {
          "name": "guardian",
          "description": "Address of the guardian.",
          "recommendedTypes": []
        },
        {
          "name": "keepers",
          "description": "List of the addresses with keeper privilege.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isActive()",
      "name": "isActive",
      "description": "Provides an indication of whether this strategy is currently \"active\" in that it is managing an active position, or will manage a position in the future. This should correlate to `harvest()` activity, so that Harvest events can be tracked externally by indexing agents.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "True if the strategy is actively managing a position.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "manualDeleverage(uint256)",
      "name": "manualDeleverage",
      "description": "Emergency function that we can use to deleverage manually if something is broken.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of `want` to withdraw/repay.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "manualReleaseWant(uint256)",
      "name": "manualReleaseWant",
      "description": "Emergency function that we can use to deleverage manually if something is broken.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of `want` to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "maxBorrowCollatRatio()",
      "name": "maxBorrowCollatRatio",
      "description": "Maximum the Aave protocol will let us borrow.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxCollatRatio()",
      "name": "maxCollatRatio",
      "description": "Closest to liquidation we'll risk.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxIterations()",
      "name": "maxIterations",
      "description": "Max number of iterations possible for the computation of the optimal lever.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minRatio()",
      "name": "minRatio",
      "description": "Minimum gap between the collat ratio and the target collat ratio before rectifying it.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minWant()",
      "name": "minWant",
      "description": "Minimum amount to be moved before a deposit or a borrow.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onFlashLoan(address,address,uint256,uint256,bytes)",
      "name": "onFlashLoan",
      "description": "Flashload callback, as defined by EIP-3156We check that the call is coming from the DAI lender and then execute the load logic. If everything went smoothly, will return `keccak256(\"ERC3156FlashBorrower.onFlashLoan\")`.",
      "parameterDecorators": [
        {
          "name": "initiator",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "poolManager()",
      "name": "poolManager",
      "description": "Reference to the protocol's collateral `PoolManager`.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "r0()",
      "name": "r0",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "reserveFactor()",
      "name": "reserveFactor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "revokeGuardian(address)",
      "name": "revokeGuardian",
      "description": "Revokes the guardian role.",
      "parameterDecorators": [
        {
          "name": "guardian",
          "description": "Old guardian address to revoke.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "sellRewards(uint256,bytes)",
      "name": "sellRewards",
      "description": "Swap earned stkAave or Aave for `want` through 1Inch.",
      "parameterDecorators": [
        {
          "name": "minAmountOut",
          "description": "Minimum amount of `want` to receive for the swap to happen.",
          "recommendedTypes": []
        },
        {
          "name": "payload",
          "description": "Bytes needed for 1Inch API. Tokens swapped should be: stkAave -> `want` or Aave -> `want`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setAavePoolVariables()",
      "name": "setAavePoolVariables",
      "description": "Retrieves lending pool variables for `want`. Those variables are mostly used in the function to compute the optimal borrow amount. No access control needed because they fetch the values from Aave directly. If it changes there, it will need to be updated here tooWe expect the values concerned not to be often modified.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setBoolParams(tuple(bool,bool,bool,bool))",
      "name": "setBoolParams",
      "description": "Sets all boolean parameters related to cooldown, withdraw check, flash loan and so on.",
      "parameterDecorators": [
        {
          "name": "_boolParams",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "automaticallyComputeCollatRatio",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "isFlashMintActive",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "withdrawCheck",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "cooldownStkAave",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setCollateralTargets(uint256,uint256,uint256,uint256)",
      "name": "setCollateralTargets",
      "description": "Sets collateral targets and value for collateral ratio.",
      "parameterDecorators": [
        {
          "name": "_targetCollatRatio",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxCollatRatio",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxBorrowCollatRatio",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_daiBorrowCollatRatio",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDebtThreshold(uint256)",
      "name": "setDebtThreshold",
      "description": "Sets how far the Strategy can go into loss without a harvest and report being required. By default this is 0, meaning any losses would cause a harvest which will subsequently report the loss to the Manager for tracking.",
      "parameterDecorators": [
        {
          "name": "_debtThreshold",
          "description": "How big of a loss this Strategy may carry without.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDiscountFactor(uint256)",
      "name": "setDiscountFactor",
      "description": "Sets the discount factor for the StkAAVE price.",
      "parameterDecorators": [
        {
          "name": "_discountFactor",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setEmergencyExit()",
      "name": "setEmergencyExit",
      "description": "Activates emergency exit. Once activated, the Strategy will exit its position upon the next harvest, depositing all funds into the Manager as quickly as is reasonable given on-chain conditions. This may only be called by the `PoolManager`, because when calling this the `PoolManager` should at the same time update the debt ratioThis function can only be called once by the `PoolManager` contractSee `poolManager.setEmergencyExit()` and `harvest()` for further details.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinsAndMaxs(uint256,uint256,uint8)",
      "name": "setMinsAndMaxs",
      "description": "Sets `minWant`, `minRatio` and `maxItrations` values.",
      "parameterDecorators": [
        {
          "name": "_minWant",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minRatio",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxIterations",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "slope1()",
      "name": "slope1",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "slope2()",
      "name": "slope2",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sweep(address,address)",
      "name": "sweep",
      "description": "Removes tokens from this Strategy that are not the type of tokens managed by this Strategy. This may be used in case of accidentally sending the wrong kind of token to this Strategy. Tokens will be sent to `governance()`. This will fail if an attempt is made to sweep `want`, or any tokens that are protected by this Strategy. This may only be called by governance. Implement `_protectedTokens()` to specify any additional tokens that should be protected from sweeping in addition to `want`.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "The token to transfer out of this `PoolManager`.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Address to send the tokens to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "targetCollatRatio()",
      "name": "targetCollatRatio",
      "description": "LTV the strategy is going to lever up to.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "uOptimal()",
      "name": "uOptimal",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unstakeWindow()",
      "name": "unstakeWindow",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "want()",
      "name": "want",
      "description": "Reference to the ERC20 farmed by this strategy.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "wantBase()",
      "name": "wantBase",
      "description": "Base of the ERC20 token farmed by this strategy.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Withdraws `_amountNeeded` to `poolManager`. This may only be called by the `PoolManager`.",
      "parameterDecorators": [
        {
          "name": "_amountNeeded",
          "description": "How much `want` to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountFreed",
          "description": "How much `want` withdrawn.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "_loss",
          "description": "Any realized losses.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}