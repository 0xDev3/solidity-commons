{"schema":"../schema.json","tags":["locking"],"name":"EtherLockUp","description":"","eventDecorators":[{"signature":"Deposit(address,uint256,uint256)","name":"Deposit","description":"","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"fee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"FeeAccountUpdated(address,address)","name":"FeeAccountUpdated","description":"Event for FeeAccount update.","parameterDecorators":[{"name":"previousFeeAccount","description":"","recommendedTypes":[],"indexed":true},{"name":"newFeeAccount","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"FeeWithdrawn(address,uint256)","name":"FeeWithdrawn","description":"","parameterDecorators":[{"name":"feeAccount","description":"","recommendedTypes":[],"indexed":true},{"name":"fee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"MaxFeeUpdated(uint256,uint256)","name":"MaxFeeUpdated","description":"Event for MaxFee update.","parameterDecorators":[{"name":"previousMaxFee","description":"","recommendedTypes":[],"indexed":false},{"name":"newMaxFee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"MinFeeUpdated(uint256,uint256)","name":"MinFeeUpdated","description":"Event for MinFee update.","parameterDecorators":[{"name":"previousMinFee","description":"","recommendedTypes":[],"indexed":false},{"name":"newMinFee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"PercentageFeeUpdated(uint256,uint256)","name":"PercentageFeeUpdated","description":"Event for FeePercentage update.","parameterDecorators":[{"name":"previousPercentageFee","description":"","recommendedTypes":[],"indexed":false},{"name":"newPercentageFee","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RoleAdminChanged(bytes32,bytes32,bytes32)","name":"RoleAdminChanged","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"previousAdminRole","description":"","recommendedTypes":[],"indexed":true},{"name":"newAdminRole","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleGranted(bytes32,address,address)","name":"RoleGranted","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RoleRevoked(bytes32,address,address)","name":"RoleRevoked","description":"","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[],"indexed":true},{"name":"account","description":"","recommendedTypes":[],"indexed":true},{"name":"sender","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"WithdrawConfirmed(uint256,address,uint256,uint256,uint256,uint256,bytes32)","name":"WithdrawConfirmed","description":"","parameterDecorators":[{"name":"nonce","description":"","recommendedTypes":[],"indexed":true},{"name":"requester","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"fee","description":"","recommendedTypes":[],"indexed":false},{"name":"timestamp","description":"","recommendedTypes":[],"indexed":false},{"name":"confirmations","description":"","recommendedTypes":[],"indexed":false},{"name":"requestHash","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"WithdrawRequestAdd(uint256,address,uint256,uint256,uint256,bytes32)","name":"WithdrawRequestAdd","description":"","parameterDecorators":[{"name":"nonce","description":"","recommendedTypes":[],"indexed":true},{"name":"requester","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"fee","description":"","recommendedTypes":[],"indexed":false},{"name":"timestamp","description":"","recommendedTypes":[],"indexed":false},{"name":"requestHash","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"CONFIRMATION_ROLE()","name":"CONFIRMATION_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"DEFAULT_ADMIN_ROLE()","name":"DEFAULT_ADMIN_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"acceptEther()","name":"acceptEther","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"addWithdrawRequest(uint256)","name":"addWithdrawRequest","description":"","parameterDecorators":[{"name":"amount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"balance()","name":"balance","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"calculateTransferFee(uint256)","name":"calculateTransferFee","description":"","parameterDecorators":[{"name":"weiAmount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"collectedFee()","name":"collectedFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"confirmWithdrawRequest(bytes32)","name":"confirmWithdrawRequest","description":"","parameterDecorators":[{"name":"requestHash","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"confirmations()","name":"confirmations","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"depositFee()","name":"depositFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"destroy()","name":"destroy","description":"","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"feeAccount()","name":"feeAccount","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleAdmin(bytes32)","name":"getRoleAdmin","description":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMember(bytes32,uint256)","name":"getRoleMember","description":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"index","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getRoleMemberCount(bytes32)","name":"getRoleMemberCount","description":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"grantRole(bytes32,address)","name":"grantRole","description":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleGranted(bytes32,address,address)"],"readOnly":false},{"signature":"hasRole(bytes32,address)","name":"hasRole","description":"Returns `true` if `account` has been granted `role`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"maxFee()","name":"maxFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"minFee()","name":"minFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"onTopWithdrawFee()","name":"onTopWithdrawFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"percentageFee()","name":"percentageFee","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"reclaimToken(address)","name":"reclaimToken","description":"Reclaim all ERC20Basic compatible tokens.","parameterDecorators":[{"name":"_token","description":"ERC20Basic The address of the token contract.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":true},{"signature":"renounceRole(bytes32,address)","name":"renounceRole","description":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"revokeRole(bytes32,address)","name":"revokeRole","description":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.","parameterDecorators":[{"name":"role","description":"","recommendedTypes":[]},{"name":"account","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["RoleRevoked(bytes32,address,address)"],"readOnly":false},{"signature":"setAcceptEther(bool)","name":"setAcceptEther","description":"","parameterDecorators":[{"name":"_acceptEther","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setDepositFee(bool)","name":"setDepositFee","description":"","parameterDecorators":[{"name":"_depositFee","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setFeeAccount(address)","name":"setFeeAccount","description":"See {ITrasnferFee-setFeeAccount}. sets `feeAccount` to `feeAccount` by the caller. Requirements: - `feeAccount` cannot be the zero.","parameterDecorators":[{"name":"newFeeAccount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setMaxFee(uint256)","name":"setMaxFee","description":"See {ITrasnferFee-setMaxFee}. sets `maxFee` to `maxFee` by the caller. Requirements: - `maxFee` cannot be the zero. - `maxFee` should be greater than minFee.","parameterDecorators":[{"name":"newMaxFee","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setMinFee(uint256)","name":"setMinFee","description":"See {ITrasnferFee-setMinFee}. sets `minFee` to `minFee` by the caller. Requirements: - `minFee` cannot be the zero. - `minFee` should be less than maxFee.","parameterDecorators":[{"name":"newMinFee","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"setOnTopWithdrawFee(bool)","name":"setOnTopWithdrawFee","description":"","parameterDecorators":[{"name":"_onTopWithdrawFee","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setPercentageFee(uint256)","name":"setPercentageFee","description":"See {ITrasnferFee-setFeePercentage}. sets `FeePercentage` to `percentageFee` by the caller. Requirements: - `FeePercentage` cannot be the zero. - `FeePercentage` should be less than maxFee.","parameterDecorators":[{"name":"newPercentageFee","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"withdrawFee(uint256)","name":"withdrawFee","description":"","parameterDecorators":[{"name":"withdrawAmount","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":false},{"signature":"withdrawRequestConfirmer(uint256,address)","name":"withdrawRequestConfirmer","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"withdrawRequestNonce(bytes32)","name":"withdrawRequestNonce","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"withdrawRequests(uint256)","name":"withdrawRequests","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"requester","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"fee","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"nonce","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"timestamp","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"confirmations","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"status","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true}]}