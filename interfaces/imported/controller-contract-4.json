{
  "schema": "../schema.json",
  "tags": [],
  "name": "Controller",
  "description": "Controller contract. Administrative and orchestrator contract for local currencies.",
  "eventDecorators": [
    {
      "signature": "CommunityChestUpdated(address,address)",
      "name": "CommunityChestUpdated",
      "description": "Triggered when the Community Chest address is updated.",
      "parameterDecorators": [
        {
          "name": "_oldCommunityChestAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newCommunityChestAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "FactoryUpdated(address,address)",
      "name": "FactoryUpdated",
      "description": "Triggered when the Wallet Factory is updated.",
      "parameterDecorators": [
        {
          "name": "_oldFactoryAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newFactoryAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "HumanityCashUpdated(address,address)",
      "name": "HumanityCashUpdated",
      "description": "Triggered when the Humanity Cash address is updated.",
      "parameterDecorators": [
        {
          "name": "_oldHumanityCashAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_newHumanityCashAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "NewUser(bytes32,address)",
      "name": "NewUser",
      "description": "Triggered when a new user has been created.",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_walletAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RedemptionFee(address,uint256)",
      "name": "RedemptionFee",
      "description": "Triggered when a redemption (withdrawal) fee is collected.",
      "parameterDecorators": [
        {
          "name": "_redemptionFeeAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_redemptionFee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RedemptionFeeMinimumUpdated(uint256,uint256)",
      "name": "RedemptionFeeMinimumUpdated",
      "description": "Triggered when the Redemption Fee Minimum is updated.",
      "parameterDecorators": [
        {
          "name": "_oldRedemptionFeeMinimum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_newRedemptionFeeMinimum",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RedemptionFeeUpdated(int256,int256,int256,int256)",
      "name": "RedemptionFeeUpdated",
      "description": "Triggered when the Redemption Fee is updated.",
      "parameterDecorators": [
        {
          "name": "_oldNumerator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_oldDenominator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_newNumerator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_newDenominator",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoundUpEvent(bytes32,address,uint256)",
      "name": "RoundUpEvent",
      "description": "Triggered when a round up has been sent from one account to another.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransferToEvent(bytes32,bytes32,uint256)",
      "name": "TransferToEvent",
      "description": "Triggered when an amount has been transferred from one wallet to another.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransferToEvent(bytes32,address,uint256)",
      "name": "TransferToEvent",
      "description": "Triggered when an amount has been transferred from one wallet to another.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransferToEventWithMemo(bytes32,bytes32,uint256,string)",
      "name": "TransferToEventWithMemo",
      "description": "Triggered when an amount has been transferred from one wallet to another.",
      "parameterDecorators": [
        {
          "name": "_fromUserId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_toUserId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_amt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_memo",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TransferToEventWithMemo(bytes32,address,uint256,string)",
      "name": "TransferToEventWithMemo",
      "description": "Triggered when an amount has been transferred from one wallet to another.",
      "parameterDecorators": [
        {
          "name": "_fromUserId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_toAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_amt",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_memo",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UserDeposit(bytes32,address,uint256)",
      "name": "UserDeposit",
      "description": "Triggered when a user has deposited.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UserWithdrawal(bytes32,address,uint256)",
      "name": "UserWithdrawal",
      "description": "Triggered when a user has withdrawn.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "Amount of the transaction.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "to",
          "description": "Address of the receiver.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "ERC20 token address.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ADMIN_ROLE()",
      "name": "ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "COMMUNITY_CHEST()",
      "name": "COMMUNITY_CHEST",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "HUMANITY_CASH()",
      "name": "HUMANITY_CASH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "OPERATOR_ROLE()",
      "name": "OPERATOR_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceOfWallet(address)",
      "name": "balanceOfWallet",
      "description": "Retrieves the available balance of a wallet.",
      "parameterDecorators": [
        {
          "name": "_walletAddress",
          "description": "wallet address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256 available balance.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceOfWallet(bytes32)",
      "name": "balanceOfWallet",
      "description": "Retrieves the available balance of a wallet.",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "user identifier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "uint256 available balance.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "communityChestAddress()",
      "name": "communityChestAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "deposit(bytes32,uint256)",
      "name": "deposit",
      "description": "Deposits tokens in the wallet identified by the given user id.",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "User identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "Amount to deposit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "erc20Token()",
      "name": "erc20Token",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMember(bytes32,uint256)",
      "name": "getRoleMember",
      "description": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleMemberCount(bytes32)",
      "name": "getRoleMemberCount",
      "description": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVersionNumber()",
      "name": "getVersionNumber",
      "description": "Returns the storage, major, minor, and patch version of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWalletAddress(bytes32)",
      "name": "getWalletAddress",
      "description": "retrieve contract address for a Wallet.",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "user identifier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of user's contract.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWalletAddressAtIndex(uint256)",
      "name": "getWalletAddressAtIndex",
      "description": "Get wallet address at index. Used for iterating the complete list of wallets.",
      "parameterDecorators": [
        {
          "name": "_index",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getWalletCount()",
      "name": "getWalletCount",
      "description": "Get count of wallets.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "humanityCashAddress()",
      "name": "humanityCashAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "newWallet(bytes32)",
      "name": "newWallet",
      "description": "create a new user and assign them a wallet contract.",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "user identifier.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "Triggers stopped state. Requirements: The contract must not be paused.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redemptionFeeDenominator()",
      "name": "redemptionFeeDenominator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redemptionFeeMinimum()",
      "name": "redemptionFeeMinimum",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "redemptionFeeNumerator()",
      "name": "redemptionFeeNumerator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "setCommunityChest(address)",
      "name": "setCommunityChest",
      "description": "Update community chest address.",
      "parameterDecorators": [
        {
          "name": "_communityChest",
          "description": "new address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setHumanityCashAddress(address)",
      "name": "setHumanityCashAddress",
      "description": "Update Humanity Cash Address.",
      "parameterDecorators": [
        {
          "name": "_humanityCashAddress",
          "description": "new address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRedemptionFee(int256,int256)",
      "name": "setRedemptionFee",
      "description": "Set redemption fee.",
      "parameterDecorators": [
        {
          "name": "_numerator",
          "description": "Redemption fee numerator.",
          "recommendedTypes": []
        },
        {
          "name": "_denominator",
          "description": "Redemption fee denominator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRedemptionFeeMinimum(uint256)",
      "name": "setRedemptionFeeMinimum",
      "description": "Set redemption fee minimum.",
      "parameterDecorators": [
        {
          "name": "_redemptionFeeMinimum",
          "description": "Redemption fee minimum.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setWalletFactory(address)",
      "name": "setWalletFactory",
      "description": "Public update to a new Wallet Factory.",
      "parameterDecorators": [
        {
          "name": "_newFactoryAddress",
          "description": "new factory address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transfer(bytes32,address,uint256,uint256)",
      "name": "transfer",
      "description": "Transfers a local currency token between two existing wallets.",
      "parameterDecorators": [
        {
          "name": "_fromUserId",
          "description": "User identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_toAddress",
          "description": "Receiver identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "Amount to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_roundUpValue",
          "description": "Round up value to transfer (can be zero).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transfer(bytes32,bytes32,uint256,uint256)",
      "name": "transfer",
      "description": "Transfers a local currency token between two existing wallets.",
      "parameterDecorators": [
        {
          "name": "_fromUserId",
          "description": "User identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_toUserId",
          "description": "Receiver identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "Amount to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_roundUpValue",
          "description": "Round up value to transfer (can be zero).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferContractOwnership(address)",
      "name": "transferContractOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "new owner of this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferWalletOwnership(address,bytes32)",
      "name": "transferWalletOwnership",
      "description": "Transfers ownership of the wallet to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "new owner of wallet.",
          "recommendedTypes": []
        },
        {
          "name": "userId",
          "description": "current owner of the wallet.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferWithMemo(bytes32,bytes32,uint256,uint256,string)",
      "name": "transferWithMemo",
      "description": "Transfers a local currency token between two existing wallets with an attached memo.",
      "parameterDecorators": [
        {
          "name": "_fromUserId",
          "description": "User identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_toUserId",
          "description": "Receiver identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "Amount to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_roundUpValue",
          "description": "Round up value to transfer (can be zero).",
          "recommendedTypes": []
        },
        {
          "name": "_memo",
          "description": "Memo to send with the transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferWithMemo(bytes32,address,uint256,uint256,string)",
      "name": "transferWithMemo",
      "description": "Transfers a local currency token between two existing wallets with an attached memo field.",
      "parameterDecorators": [
        {
          "name": "_fromUserId",
          "description": "User identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_toAddress",
          "description": "Receiver identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "Amount to transfer.",
          "recommendedTypes": []
        },
        {
          "name": "_roundUpValue",
          "description": "Round up value to transfer (can be zero).",
          "recommendedTypes": []
        },
        {
          "name": "_memo",
          "description": "Memo to send with the transfer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "Returns to normal state. Requirements: The contract must be paused.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateWalletImplementation(address)",
      "name": "updateWalletImplementation",
      "description": "Update implementation address for wallets. If the number of wallets is sufficiently large this function may run out of gas.",
      "parameterDecorators": [
        {
          "name": "_newLogic",
          "description": "New implementation logic for wallet proxies.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "walletFactory()",
      "name": "walletFactory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(bytes32,uint256)",
      "name": "withdraw",
      "description": "Withdraws tokens from the wallet identified by the given user id.",
      "parameterDecorators": [
        {
          "name": "_userId",
          "description": "User identifier.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "Amount to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawToOwner()",
      "name": "withdrawToOwner",
      "description": "Emergency withdrawal of all remaining token to the owner account. The contract must be pausedSends erc20 to current owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}