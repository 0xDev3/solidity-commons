{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "JBDirectory",
  "description": "Keeps a reference of which terminal contracts each project is currently accepting funds through, and which controller contract is managing each project's tokens and funding cycles.",
  "eventDecorators": [
    {
      "signature": "AddTerminal(uint256,address,address)",
      "name": "AddTerminal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "terminal",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AddToSetControllerAllowlist(address,address)",
      "name": "AddToSetControllerAllowlist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RemoveFromSetControllerAllowlist(address,address)",
      "name": "RemoveFromSetControllerAllowlist",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RemoveTerminal(uint256,address,address)",
      "name": "RemoveTerminal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "terminal",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetController(uint256,address,address)",
      "name": "SetController",
      "description": "",
      "parameterDecorators": [
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "controller",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "SetPrimaryTerminal(uint256,address,address,address)",
      "name": "SetPrimaryTerminal",
      "description": "",
      "parameterDecorators": [
        {
          "name": "projectId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "terminal",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "caller",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addTerminalsOf(uint256,address[])",
      "name": "addTerminalsOf",
      "description": "Add terminals to project's list of terminals. Only a project owner, an operator, or its controller can add terminals.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project having a terminal added.",
          "recommendedTypes": []
        },
        {
          "name": "_terminals",
          "description": "The terminals to add.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addToSetControllerAllowlist(address)",
      "name": "addToSetControllerAllowlist",
      "description": "Add a controller to the list of trusted controllers. The owner (Juicebox multisig) can add addresses which are allowed to change a project's controller. Those addresses are known and vetted controllers as well as contracts designed to launch new projects. This is not a requirement for all controllers. However, unknown controllers may require additional transactions to perform certain operations.If you would like an address/contract allowlisted, please reach out to JuiceboxDAO.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "the allowed address to be added.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "controllerOf(uint256)",
      "name": "controllerOf",
      "description": "For each project ID, the controller that manages how terminals interact with tokens and funding cycles. _projectId The ID of the project to get the controller of.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isAllowedToSetController(address)",
      "name": "isAllowedToSetController",
      "description": "Addresses that can set a project's controller. These addresses/contracts have been vetted and verified by Juicebox owners.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isTerminalDelegateOf(uint256,address)",
      "name": "isTerminalDelegateOf",
      "description": "Whether or not a specified terminal is a terminal of the specified project.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to check within.",
          "recommendedTypes": []
        },
        {
          "name": "_contract",
          "description": "The address of the terminal to check for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "A flag indicating whether or not the specified terminal is a terminal of the specified project.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isTerminalOf(uint256,address)",
      "name": "isTerminalOf",
      "description": "Whether or not a specified terminal is a terminal of the specified project.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to check within.",
          "recommendedTypes": []
        },
        {
          "name": "_terminal",
          "description": "The address of the terminal to check for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "A flag indicating whether or not the specified terminal is a terminal of the specified project.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "operatorStore()",
      "name": "operatorStore",
      "description": "A contract storing operator assignments.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "primaryTerminalOf(uint256,address)",
      "name": "primaryTerminalOf",
      "description": "The primary terminal that is managing funds for a project for a specified token. The zero address is returned if a terminal isn't found for the specified token.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to get a terminal for.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "The token the terminal accepts.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The primary terminal for the project for the specified token.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "projects()",
      "name": "projects",
      "description": "The Projects contract which mints ERC-721's that represent project ownership and transfers.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeFromSetControllerAllowlist(address)",
      "name": "removeFromSetControllerAllowlist",
      "description": "Remove a controller to the list of trusted controllers. See `addToSetControllerAllowlist(...)` for context.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "The address to be removed.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeTerminalOf(uint256,address)",
      "name": "removeTerminalOf",
      "description": "Remove a terminal from a project's list of terminals. Only a project owner or an operator can remove one of its terminals.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project having a terminal removed.",
          "recommendedTypes": []
        },
        {
          "name": "_terminal",
          "description": "The terminal to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setControllerOf(uint256,address)",
      "name": "setControllerOf",
      "description": "Update the controller that manages how terminals interact with the ecosystem. A controller can be set if: - the message sender is the project owner or an operator having the correct authorization. - or, an allowedlisted address is setting an allowlisted controller.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to set a new controller for.",
          "recommendedTypes": []
        },
        {
          "name": "_controller",
          "description": "The new controller to set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPrimaryTerminalOf(uint256,address)",
      "name": "setPrimaryTerminalOf",
      "description": "Project's can set which terminal should be their primary for a particular token. This is useful in case a project has several terminals connected for a particular token. The terminal will be set as the primary for the token that its vault accepts.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project for which a primary token is being set.",
          "recommendedTypes": []
        },
        {
          "name": "_terminal",
          "description": "The terminal to make primary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "terminalsOf(uint256)",
      "name": "terminalsOf",
      "description": "For each project ID, the terminals that are currently managing its funds.",
      "parameterDecorators": [
        {
          "name": "_projectId",
          "description": "The ID of the project to get terminals of.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "An array of terminal addresses.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}