{"schema":"../schema.json","tags":[],"name":"ExchangeBRL","description":"","eventDecorators":[{"signature":"BucketsUpdated(uint256,uint256)","name":"BucketsUpdated","description":"","parameterDecorators":[{"name":"goldBucket","description":"","recommendedTypes":[],"indexed":false},{"name":"stableBucket","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Exchanged(address,uint256,uint256,bool)","name":"Exchanged","description":"","parameterDecorators":[{"name":"exchanger","description":"","recommendedTypes":[],"indexed":true},{"name":"sellAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"buyAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"soldGold","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"MinimumReportsSet(uint256)","name":"MinimumReportsSet","description":"","parameterDecorators":[{"name":"minimumReports","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RegistrySet(address)","name":"RegistrySet","description":"","parameterDecorators":[{"name":"registryAddress","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"ReserveFractionSet(uint256)","name":"ReserveFractionSet","description":"","parameterDecorators":[{"name":"reserveFraction","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"SpreadSet(uint256)","name":"SpreadSet","description":"","parameterDecorators":[{"name":"spread","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"StableTokenSet(address)","name":"StableTokenSet","description":"","parameterDecorators":[{"name":"stable","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"UpdateFrequencySet(uint256)","name":"UpdateFrequencySet","description":"","parameterDecorators":[{"name":"updateFrequency","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"activateStable()","name":"activateStable","description":"Ensures stable token address is set in storage and initializes buckets. Will revert if stable token is not registered or does not have oracle reports.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"buy(uint256,uint256,bool)","name":"buy","description":"Exchanges an unspecified amount (up to a threshold) of one token for a specific amount of another. The caller must first have approved `maxSellAmount` to the exchange.This function can be frozen via the Freezable interface.","parameterDecorators":[{"name":"buyAmount","description":"The number of tokens for the exchange to send in return.","recommendedTypes":[]},{"name":"maxSellAmount","description":"The maximum number of tokens to send to the exchange.","recommendedTypes":[]},{"name":"buyGold","description":"True if the exchange is sending CELO to the caller, false otherwise.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"exchange(uint256,uint256,bool)","name":"exchange","description":"Exchanges a specific amount of one token for an unspecified amount (greater than a threshold) of another. DEPRECATED - Use `buy` or `sell`.The caller must first have approved `sellAmount` to the exchange.This function can be frozen via the Freezable interface.","parameterDecorators":[{"name":"sellAmount","description":"The number of tokens to send to the exchange.","recommendedTypes":[]},{"name":"minBuyAmount","description":"The minimum number of tokens for the exchange to send in return.","recommendedTypes":[]},{"name":"sellGold","description":"True if the caller is sending CELO to the exchange, false otherwise.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"getBuyAndSellBuckets(bool)","name":"getBuyAndSellBuckets","description":"Returns the buy token and sell token bucket sizes, in order. The ratio of the two also represents the exchange rate between the two.","parameterDecorators":[{"name":"sellGold","description":"`true` if gold is the sell token.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getBuyTokenAmount(uint256,bool)","name":"getBuyTokenAmount","description":"Returns the amount of buy tokens a user would get for sellAmount of the sell token.","parameterDecorators":[{"name":"sellAmount","description":"The amount of sellToken the user is selling to the exchange.","recommendedTypes":[]},{"name":"sellGold","description":"`true` if gold is the sell token.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getSellTokenAmount(uint256,bool)","name":"getSellTokenAmount","description":"Returns the amount of sell tokens a user would need to exchange to receive buyAmount of buy tokens.","parameterDecorators":[{"name":"buyAmount","description":"The amount of buyToken the user would like to purchase.","recommendedTypes":[]},{"name":"sellGold","description":"`true` if gold is the sell token.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getVersionNumber()","name":"getVersionNumber","description":"Returns the storage, major, minor, and patch version of the contract. This function is overloaded to maintain a distinct version from Exchange.sol.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"goldBucket()","name":"goldBucket","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address,string,uint256,uint256,uint256,uint256)","name":"initialize","description":"Used in place of the constructor to allow the contract to be upgradable via proxy.","parameterDecorators":[{"name":"registryAddress","description":"The address of the registry core smart contract.","recommendedTypes":[]},{"name":"stableTokenIdentifier","description":"String identifier of stabletoken in registry.","recommendedTypes":[]},{"name":"_spread","description":"Spread charged on exchanges.","recommendedTypes":[]},{"name":"_reserveFraction","description":"Fraction to commit to the gold bucket.","recommendedTypes":[]},{"name":"_updateFrequency","description":"The time period that needs to elapse between bucket updates.","recommendedTypes":[]},{"name":"_minimumReports","description":"The minimum number of fresh reports that need to be present in the oracle to update buckets commit to the gold bucket.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialized()","name":"initialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"lastBucketUpdate()","name":"lastBucketUpdate","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"minimumReports()","name":"minimumReports","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"registry()","name":"registry","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"reserveFraction()","name":"reserveFraction","description":"","parameterDecorators":[],"returnDecorators":[{"name":"value","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"sell(uint256,uint256,bool)","name":"sell","description":"Exchanges a specific amount of one token for an unspecified amount (greater than a threshold) of another. The caller must first have approved `sellAmount` to the exchange.This function can be frozen via the Freezable interface.","parameterDecorators":[{"name":"sellAmount","description":"The number of tokens to send to the exchange.","recommendedTypes":[]},{"name":"minBuyAmount","description":"The minimum number of tokens for the exchange to send in return.","recommendedTypes":[]},{"name":"sellGold","description":"True if the caller is sending CELO to the exchange, false otherwise.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":false},{"signature":"setMinimumReports(uint256)","name":"setMinimumReports","description":"Allows owner to set the minimum number of reports required.","parameterDecorators":[{"name":"newMininumReports","description":"The new update minimum number of reports required.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRegistry(address)","name":"setRegistry","description":"Updates the address pointing to a Registry contract.","parameterDecorators":[{"name":"registryAddress","description":"The address of a registry contract for routing to other contracts.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setReserveFraction(uint256)","name":"setReserveFraction","description":"Allows owner to set the Reserve Fraction.","parameterDecorators":[{"name":"newReserveFraction","description":"The new value for the reserve fraction.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setSpread(uint256)","name":"setSpread","description":"Allows owner to set the spread.","parameterDecorators":[{"name":"newSpread","description":"The new value for the spread.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setStableToken(address)","name":"setStableToken","description":"Allows owner to set the Stable Token address.","parameterDecorators":[{"name":"newStableToken","description":"The new address for Stable Token.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setUpdateFrequency(uint256)","name":"setUpdateFrequency","description":"Allows owner to set the update frequency.","parameterDecorators":[{"name":"newUpdateFrequency","description":"The new update frequency.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"spread()","name":"spread","description":"","parameterDecorators":[],"returnDecorators":[{"name":"value","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"stable()","name":"stable","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"stableBucket()","name":"stableBucket","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"stableTokenRegistryId()","name":"stableTokenRegistryId","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateFrequency()","name":"updateFrequency","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true}]}