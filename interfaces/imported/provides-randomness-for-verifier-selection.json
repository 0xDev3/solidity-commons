{"schema":"../schema.json","tags":[],"name":"Random","description":"Provides randomness for verifier selection.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"RandomnessBlockRetentionWindowSet(uint256)","name":"RandomnessBlockRetentionWindowSet","description":"Emitted when tokens are redeemed.","parameterDecorators":[{"name":"value","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"checkProofOfPossession(address,bytes,bytes)","name":"checkProofOfPossession","description":"Checks a BLS proof of possession.","parameterDecorators":[{"name":"sender","description":"The address signed by the BLS key to generate the proof of possession.","recommendedTypes":[]},{"name":"blsKey","description":"The BLS public key that the validator is using for consensus, should pass proof of possession. 48 bytes.","recommendedTypes":[]},{"name":"blsPop","description":"The BLS public key proof-of-possession, which consists of a signature on the account address. 96 bytes.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"commitments(address)","name":"commitments","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"computeCommitment(bytes32)","name":"computeCommitment","description":"Compute the commitment hash for a given randomness value.","parameterDecorators":[{"name":"randomness","description":"The value for which the commitment hash is computed.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)","name":"fractionMulExp","description":"calculate a * b^x for fractions a, b to `decimals` precision.","parameterDecorators":[{"name":"aNumerator","description":"Numerator of first fraction.","recommendedTypes":[]},{"name":"aDenominator","description":"Denominator of first fraction.","recommendedTypes":[]},{"name":"bNumerator","description":"Numerator of exponentiated fraction.","recommendedTypes":[]},{"name":"bDenominator","description":"Denominator of exponentiated fraction.","recommendedTypes":[]},{"name":"exponent","description":"exponent to raise b to.","recommendedTypes":[]},{"name":"_decimals","description":"precision.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getBlockNumberFromHeader(bytes)","name":"getBlockNumberFromHeader","description":"Parses block number out of header.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getBlockRandomness(uint256)","name":"getBlockRandomness","description":"Get randomness values of previous blocks.","parameterDecorators":[{"name":"blockNumber","description":"The number of block whose randomness value we want to know.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochNumber()","name":"getEpochNumber","description":"Returns the epoch number at a block.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochNumberOfBlock(uint256)","name":"getEpochNumberOfBlock","description":"Returns the epoch number at a block.","parameterDecorators":[{"name":"blockNumber","description":"Block number where epoch number is calculated.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getEpochSize()","name":"getEpochSize","description":"Returns the current epoch size in blocks.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getParentSealBitmap(uint256)","name":"getParentSealBitmap","description":"Gets the parent seal bitmap from the header at the given block number.","parameterDecorators":[{"name":"blockNumber","description":"Block number to retrieve. Must be within 4 epochs of the current number.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getVerifiedSealBitmapFromHeader(bytes)","name":"getVerifiedSealBitmapFromHeader","description":"Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header. If the parent hash is not in the blockchain, verification fails.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getVersionNumber()","name":"getVersionNumber","description":"Returns the storage, major, minor, and patch version of the contract.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param1","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param2","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"param3","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"hashHeader(bytes)","name":"hashHeader","description":"Computes hash of header.","parameterDecorators":[{"name":"header","description":"RLP encoded header.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(uint256)","name":"initialize","description":"Used in place of the constructor to allow the contract to be upgradable via proxy.","parameterDecorators":[{"name":"_randomnessBlockRetentionWindow","description":"Number of old random blocks whose randomness values can be queried.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialized()","name":"initialized","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"minQuorumSize(uint256)","name":"minQuorumSize","description":"Returns the minimum number of required signers for a given block number. Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3)).","parameterDecorators":[{"name":"blockNumber","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"minQuorumSizeInCurrentSet()","name":"minQuorumSizeInCurrentSet","description":"Computes byzantine quorum from current validator set size.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"numberValidatorsInCurrentSet()","name":"numberValidatorsInCurrentSet","description":"Gets the size of the current elected validator set.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"numberValidatorsInSet(uint256)","name":"numberValidatorsInSet","description":"Gets the size of the validator set that must sign the given block number.","parameterDecorators":[{"name":"blockNumber","description":"Block number to retrieve the validator set from.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"random()","name":"random","description":"Querying the current randomness value.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"randomnessBlockRetentionWindow()","name":"randomnessBlockRetentionWindow","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"revealAndCommit(bytes32,bytes32,address)","name":"revealAndCommit","description":"Implements step of the randomness protocol. If the Random contract is pointed to by the Registry, the first transaction in a block should be a special transaction to address 0x0 with 64 bytes of data - the concatenated `randomness` and `newCommitment`. Before running regular transactions, this function should be called.","parameterDecorators":[{"name":"randomness","description":"Bytes that will be added to the entropy pool.","recommendedTypes":[]},{"name":"newCommitment","description":"The hash of randomness that will be revealed in the future.","recommendedTypes":[]},{"name":"proposer","description":"Address of the block proposer.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setRandomnessBlockRetentionWindow(uint256)","name":"setRandomnessBlockRetentionWindow","description":"Sets the number of old random blocks whose randomness values can be queried.","parameterDecorators":[{"name":"value","description":"Number of old random blocks whose randomness values can be queried.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"validatorSignerAddressFromCurrentSet(uint256)","name":"validatorSignerAddressFromCurrentSet","description":"Gets a validator address from the current validator set.","parameterDecorators":[{"name":"index","description":"Index of requested validator in the validator set.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"validatorSignerAddressFromSet(uint256,uint256)","name":"validatorSignerAddressFromSet","description":"Gets a validator address from the validator set at the given block number.","parameterDecorators":[{"name":"index","description":"Index of requested validator in the validator set.","recommendedTypes":[]},{"name":"blockNumber","description":"Block number to retrieve the validator set from.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}