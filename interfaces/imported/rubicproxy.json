{
  "schema": "../schema.json",
  "tags": [
    "bridges"
  ],
  "name": "RubicProxy",
  "description": "RubicProxy. Universal proxy contract to Symbiosis, LiFi, deBridge and other cross-chain solutions.",
  "eventDecorators": [
    {
      "signature": "FixedCryptoFee(uint256,uint256,address)",
      "name": "FixedCryptoFee",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "RubicPart",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "integratorPart",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "integrator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "FixedCryptoFeeCollected(uint256,address)",
      "name": "FixedCryptoFeeCollected",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "collector",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Initialized(uint8)",
      "name": "Initialized",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "version",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "IntegratorTokenFeeCollected(uint256,address,address)",
      "name": "IntegratorTokenFeeCollected",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "integrator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RequestSent(tuple)",
      "name": "RequestSent",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "parameters",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RoleAdminChanged(bytes32,bytes32,bytes32)",
      "name": "RoleAdminChanged",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "previousAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newAdminRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleGranted(bytes32,address,address)",
      "name": "RoleGranted",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RoleRevoked(bytes32,address,address)",
      "name": "RoleRevoked",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RubicTokenFeeCollected(uint256,address)",
      "name": "RubicTokenFeeCollected",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TokenFee(uint256,uint256,address,address)",
      "name": "TokenFee",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "RubicPart",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "integratorPart",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "integrator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "token",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "emitted after each successful withdrawal. Emitted when someone's membership role is being updated.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "DEFAULT_ADMIN_ROLE()",
      "name": "DEFAULT_ADMIN_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "MANAGER_ROLE()",
      "name": "MANAGER_ROLE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "RubicPlatformFee()",
      "name": "RubicPlatformFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addAvailableRouter(address)",
      "name": "addAvailableRouter",
      "description": "Appends new available router.",
      "parameterDecorators": [
        {
          "name": "_router",
          "description": "Router's address to add.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "availableIntegratorCryptoFee(address)",
      "name": "availableIntegratorCryptoFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "availableIntegratorTokenFee(address,address)",
      "name": "availableIntegratorTokenFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "availableRubicCryptoFee()",
      "name": "availableRubicCryptoFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "availableRubicTokenFee(address)",
      "name": "availableRubicTokenFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "collectIntegratorFee(address)",
      "name": "collectIntegratorFee",
      "description": "Integrator can collect fees calling this function.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "The token to collect fees in.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collectIntegratorFee(address,address)",
      "name": "collectIntegratorFee",
      "description": "Managers can collect integrator's fees calling this function Fees go to the integrator.",
      "parameterDecorators": [
        {
          "name": "_integrator",
          "description": "Address of the integrator.",
          "recommendedTypes": []
        },
        {
          "name": "_token",
          "description": "The token to collect fees in.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collectRubicCryptoFee()",
      "name": "collectRubicCryptoFee",
      "description": "Calling this function managers can collect Rubic's fixed crypto fee.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collectRubicFee(address)",
      "name": "collectRubicFee",
      "description": "Calling this function managers can collect Rubic's token fee.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "The token to collect fees in.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fixedCryptoFee()",
      "name": "fixedCryptoFee",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getAvailableRouters()",
      "name": "getAvailableRouters",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Available routers.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getRoleAdmin(bytes32)",
      "name": "getRoleAdmin",
      "description": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "grantRole(bytes32,address)",
      "name": "grantRole",
      "description": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleGranted(bytes32,address,address)",
        "RoleGranted(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "hasRole(bytes32,address)",
      "name": "hasRole",
      "description": "Returns `true` if `account` has been granted `role`.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "integratorToFeeInfo(address)",
      "name": "integratorToFeeInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "isIntegrator",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "tokenFee",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "RubicTokenShare",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "RubicFixedCryptoShare",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint32"
        },
        {
          "name": "fixedFeeAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxTokenAmount(address)",
      "name": "maxTokenAmount",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minTokenAmount(address)",
      "name": "minTokenAmount",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pauseExecution()",
      "name": "pauseExecution",
      "description": "CONTROL FUNCTIONS ///.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeAvailableRouter(address)",
      "name": "removeAvailableRouter",
      "description": "Removes existing available router.",
      "parameterDecorators": [
        {
          "name": "_router",
          "description": "Router's address to remove.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceRole(bytes32,address)",
      "name": "renounceRole",
      "description": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)",
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "revokeRole(bytes32,address)",
      "name": "revokeRole",
      "description": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.",
      "parameterDecorators": [
        {
          "name": "role",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "RoleRevoked(bytes32,address,address)",
        "RoleRevoked(bytes32,address,address)"
      ],
      "readOnly": false
    },
    {
      "signature": "routerCall(tuple(address,uint256,uint256,address,uint256,address,address,address),address,bytes)",
      "name": "routerCall",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_params",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "srcInputToken",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "srcInputAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "dstChainID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "dstOutputToken",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "dstMinOutputAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "recipient",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "integrator",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "router",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_gateway",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "routerCallNative(tuple(address,uint256,uint256,address,uint256,address,address,address),bytes)",
      "name": "routerCallNative",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_params",
          "description": "",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "srcInputToken",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "srcInputAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "dstChainID",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "dstOutputToken",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "dstMinOutputAmount",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "recipient",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "integrator",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "router",
              "description": "",
              "recommendedTypes": []
            }
          ]
        },
        {
          "name": "_data",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFixedCryptoFee(uint256)",
      "name": "setFixedCryptoFee",
      "description": "Sets fixed crypto fee.",
      "parameterDecorators": [
        {
          "name": "_fixedCryptoFee",
          "description": "Fixed crypto fee.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setIntegratorInfo(address,tuple(bool,uint32,uint32,uint32,uint128))",
      "name": "setIntegratorInfo",
      "description": "Sets fee info associated with an integrator.",
      "parameterDecorators": [
        {
          "name": "_integrator",
          "description": "Address of the integrator.",
          "recommendedTypes": []
        },
        {
          "name": "_info",
          "description": "Struct with fee info.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "isIntegrator",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "tokenFee",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "RubicTokenShare",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "RubicFixedCryptoShare",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "fixedFeeAmount",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxTokenAmount(address,uint256)",
      "name": "setMaxTokenAmount",
      "description": "Changes requirement for maximum token amount on transfers.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "The token address to setup.",
          "recommendedTypes": []
        },
        {
          "name": "_maxTokenAmount",
          "description": "Amount of tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMinTokenAmount(address,uint256)",
      "name": "setMinTokenAmount",
      "description": "Changes requirement for minimal token amount on transfers.",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "The token address to setup.",
          "recommendedTypes": []
        },
        {
          "name": "_minTokenAmount",
          "description": "Amount of tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRubicPlatformFee(uint256)",
      "name": "setRubicPlatformFee",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_platformFee",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "supportsInterface(bytes4)",
      "name": "supportsInterface",
      "description": "See {IERC165-supportsInterface}.",
      "parameterDecorators": [
        {
          "name": "interfaceId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sweepTokens(address,uint256)",
      "name": "sweepTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferAdmin(address)",
      "name": "transferAdmin",
      "description": "Transfers admin role.",
      "parameterDecorators": [
        {
          "name": "_newAdmin",
          "description": "New admin's address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "unpauseExecution()",
      "name": "unpauseExecution",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}