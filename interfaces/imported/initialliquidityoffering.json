{
  "schema": "../schema.json",
  "tags": [
    "liquidity"
  ],
  "name": "InitialLiquidityOffering",
  "description": "A contract to offer initial liquidity purchase and an reward.",
  "eventDecorators": [
    {
      "signature": "Claim(address,uint256,uint256)",
      "name": "Claim",
      "description": "Event emitted when liquidity pool tokens are claimed.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address the claim was for.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "The amount of liquidity pool tokens that was claimed.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "reward",
          "description": "The reward (in the token on offer) that was also claimed.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LiquidityEstablishment(uint256,uint256,uint256)",
      "name": "LiquidityEstablishment",
      "description": "Event emitted when liquidity is established.",
      "parameterDecorators": [
        {
          "name": "liquidityAssetAmount",
          "description": "The amount of liquidityToken that was contributed.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "offerTokenAmount",
          "description": "The amount of the token on offer that was added as liquidity.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "liquidityTokenAmount",
          "description": "The amount of liquidity pool tokens that was minted.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LiquidityOfferReceipt(address,uint256)",
      "name": "LiquidityOfferReceipt",
      "description": "Event emitted when liquidity was provided.",
      "parameterDecorators": [
        {
          "name": "to",
          "description": "The address that provided the liquidity.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "amount",
          "description": "The amount of liquidity (priced in liquidityToken) that was provided.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "claim(address)",
      "name": "claim",
      "description": "Claim liquidity pool tokens and the reward after liquidity has been released.",
      "parameterDecorators": [
        {
          "name": "_for",
          "description": "The address to release the liquidity pool tokens and the reward for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "establishLiquidity()",
      "name": "establishLiquidity",
      "description": "Establish liquidity if the sale period ended or the liquidity sale has been sold out.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isLiquidityEstablished()",
      "name": "isLiquidityEstablished",
      "description": "Flag to indicate if liquidity has been established.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isLiquidityEstablishedOrExpired()",
      "name": "isLiquidityEstablishedOrExpired",
      "description": "Returns true if either liquidity has been established or the ILO has been closed for more than 7 days. False otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_isEstablishedOrExpired",
          "description": "True if either liquidity has been established or the ILO has been closed for more than 7 days. False otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityBalances(address)",
      "name": "liquidityBalances",
      "description": "The total liquidity provided by each address (priced in liquidityToken).",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityReleaseTime()",
      "name": "liquidityReleaseTime",
      "description": "The time in unix (seconds) timestamp that the liquidity may be claimed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "liquidityToken()",
      "name": "liquidityToken",
      "description": "The token liquidity will be established with.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxLiquidityAllowed()",
      "name": "maxLiquidityAllowed",
      "description": "The maximum liquidity (priced in liquidityToken) up for sale.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minter()",
      "name": "minter",
      "description": "The minter of the token on offer.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "offerCloseTime()",
      "name": "offerCloseTime",
      "description": "The time in unix (seconds) timestamp that the offer closes.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pricer()",
      "name": "pricer",
      "description": "The ICO used to establish the price at which liquidity will be established.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "provideLiquidity(address,uint256)",
      "name": "provideLiquidity",
      "description": "Provide liquidity. Liquidity is paid for from the msg.sender.",
      "parameterDecorators": [
        {
          "name": "_target",
          "description": "The address that will own and receive the liquidity pool tokens and reward.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of liquidity to offer (priced in liquidityToken).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPricer(address)",
      "name": "setPricer",
      "description": "Set the ICO address to use to establish the price of the token on offer.",
      "parameterDecorators": [
        {
          "name": "_pricer",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "tokenOffer()",
      "name": "tokenOffer",
      "description": "The token that is offered.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalLiquidityProvided()",
      "name": "totalLiquidityProvided",
      "description": "The total liquidity sold so far.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "treasury()",
      "name": "treasury",
      "description": "The address funds are sent to.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "uniswapRouter()",
      "name": "uniswapRouter",
      "description": "The uniswap router used to establish liquidity.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}