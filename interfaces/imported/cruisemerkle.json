{
  "schema": "../schema.json",
  "tags": [
    "merkle proofs"
  ],
  "name": "CruiseMerkle",
  "description": "",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "authUsers(address)",
      "name": "authUsers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "giveAccess(address,bool)",
      "name": "giveAccess",
      "description": "Gives access to certain addresses by owner.",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "Address of user we want to give/take access to.",
          "recommendedTypes": []
        },
        {
          "name": "_access",
          "description": "Boolean value determining the access.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "isValidTicket(uint256,bytes32[],bytes32)",
      "name": "isValidTicket",
      "description": "Generate a hash root based on input info and compare with state lineROot.",
      "parameterDecorators": [
        {
          "name": "_path",
          "description": "Path (Index) for the ticket hash in the tree.",
          "recommendedTypes": []
        },
        {
          "name": "_witnesseList",
          "description": "Witnesses for issued ticket.",
          "recommendedTypes": []
        },
        {
          "name": "_ticketHash",
          "description": "Hash of the ticket info.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bytes32 Calculated root based on input data.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lineMerkleRoot()",
      "name": "lineMerkleRoot",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}