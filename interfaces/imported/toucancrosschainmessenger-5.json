{"schema":"../schema.json","tags":[],"name":"ToucanCrosschainMessenger","description":"","eventDecorators":[{"signature":"AbacusConnectionManagerSet(address)","name":"AbacusConnectionManagerSet","description":"Emitted when a new abacusConnectionManager is set.","parameterDecorators":[{"name":"abacusConnectionManager","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"AdminChanged(address,address)","name":"AdminChanged","description":"","parameterDecorators":[{"name":"previousAdmin","description":"","recommendedTypes":[],"indexed":false},{"name":"newAdmin","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"BeaconUpgraded(address)","name":"BeaconUpgraded","description":"","parameterDecorators":[{"name":"beacon","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"BridgeRequestReceived(uint32,uint32,address,address,uint256,bytes32)","name":"BridgeRequestReceived","description":"","parameterDecorators":[{"name":"originDomain","description":"","recommendedTypes":[],"indexed":true},{"name":"toDomain","description":"","recommendedTypes":[],"indexed":false},{"name":"bridger","description":"","recommendedTypes":[],"indexed":true},{"name":"token","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"requesthash","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"BridgeRequestSent(uint32,uint32,address,address,uint256,uint256,bytes32)","name":"BridgeRequestSent","description":"","parameterDecorators":[{"name":"originDomain","description":"","recommendedTypes":[],"indexed":false},{"name":"toDomain","description":"","recommendedTypes":[],"indexed":true},{"name":"bridger","description":"","recommendedTypes":[],"indexed":true},{"name":"token","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"nonce","description":"","recommendedTypes":[],"indexed":false},{"name":"requesthash","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Initialized(uint8)","name":"Initialized","description":"","parameterDecorators":[{"name":"version","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"InterchainGasPaymasterSet(address)","name":"InterchainGasPaymasterSet","description":"Emitted when a new Interchain Gas Paymaster is set.","parameterDecorators":[{"name":"interchainGasPaymaster","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Paused(address)","name":"Paused","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"RemoteRouterEnrolled(uint32,bytes32)","name":"RemoteRouterEnrolled","description":"Emitted when a router is set.","parameterDecorators":[{"name":"domain","description":"","recommendedTypes":[],"indexed":true},{"name":"router","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"Unpaused(address)","name":"Unpaused","description":"","parameterDecorators":[{"name":"account","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"Upgraded(address)","name":"Upgraded","description":"","parameterDecorators":[{"name":"implementation","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"DOMAIN_SEPARATOR()","name":"DOMAIN_SEPARATOR","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"TIMER()","name":"TIMER","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"VERSION()","name":"VERSION","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"abacusConnectionManager()","name":"abacusConnectionManager","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"addTokenPair(address,address,uint32)","name":"addTokenPair","description":"Adds new token pair than can be bridged. Called by owner to add or map home token address to remote token address. Changing the remote token address can only be done within a 7 day period, after first setting it.","parameterDecorators":[{"name":"_homeToken","description":"token address on home chain.","recommendedTypes":[]},{"name":"_remoteToken","description":"token address on remote chain.","recommendedTypes":[]},{"name":"_domain","description":"domain ID of the remote chain whose token is being mapped.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"enrollRemoteRouter(uint32,bytes32)","name":"enrollRemoteRouter","description":"Register the address of a Router contract for the same Application on a remote chain.","parameterDecorators":[{"name":"_domain","description":"The domain of the remote Application Router.","recommendedTypes":[]},{"name":"_router","description":"The address of the remote Application Router.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"handle(uint32,bytes32,bytes)","name":"handle","description":"Handles an incoming message.","parameterDecorators":[{"name":"_origin","description":"The origin domain.","recommendedTypes":[]},{"name":"_sender","description":"The sender address.","recommendedTypes":[]},{"name":"_message","description":"The message.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialize(address)","name":"initialize","description":"","parameterDecorators":[{"name":"_abacusConnectionManager","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"interchainGasPaymaster()","name":"interchainGasPaymaster","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"nonce()","name":"nonce","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"pause()","name":"pause","description":"Pauses the cross chain bridge. when invoked by owner it Pauses the cross chain bridging logic to interact with abacus.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"paused()","name":"paused","description":"Returns true if the contract is paused, and false otherwise.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"proxiableUUID()","name":"proxiableUUID","description":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"remoteTokens(address,uint32)","name":"remoteTokens","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"tokenAddress","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"timer","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"requests(bytes32)","name":"requests","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"isReverted","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"timestamp","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"requestType","description":"","recommendedTypes":[],"solidityType":"uint8"},{"name":"messageType","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"routers(uint32)","name":"routers","description":"","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"sendMessage(uint32,address,uint256)","name":"sendMessage","description":"Send a message of \"Type A\" to a remote xApp Router via Abacus; this message is called to take some action in the cross-chain context.","parameterDecorators":[{"name":"_destinationDomain","description":"The domain to send the message to.","recommendedTypes":[]},{"name":"_token","description":"address of token to be bridged.","recommendedTypes":[]},{"name":"_amount","description":"the amount of tokens to be bridged.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setAbacusConnectionManager(address)","name":"setAbacusConnectionManager","description":"Sets the address of the application's AbacusConnectionManager.","parameterDecorators":[{"name":"_abacusConnectionManager","description":"The address of the AbacusConnectionManager contract.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"setInterchainGasPaymaster(address)","name":"setInterchainGasPaymaster","description":"Sets the address of the application's InterchainGasPaymaster.","parameterDecorators":[{"name":"_interchainGasPaymaster","description":"The address of the InterchainGasPaymaster contract.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"unpause()","name":"unpause","description":"Unpauses the cross chain bridge. when invoked by owner it unpauses the cross chain bridging logic to interact with abacus.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"upgradeTo(address)","name":"upgradeTo","description":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.","parameterDecorators":[{"name":"newImplementation","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["Upgraded(address)"],"readOnly":false},{"signature":"upgradeToAndCall(address,bytes)","name":"upgradeToAndCall","description":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.","parameterDecorators":[{"name":"newImplementation","description":"","recommendedTypes":[]},{"name":"data","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":["Upgraded(address)"],"readOnly":false}]}