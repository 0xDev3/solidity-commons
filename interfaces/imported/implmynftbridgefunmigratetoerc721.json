{
  "schema": "../schema.json",
  "tags": [
    "bridges",
    "nft"
  ],
  "name": "ImplMyNFTBridgeFunMigrateToERC721",
  "description": "ImplMyNFTBridgeFunMigrateToERC721. The well-ordered memory structure of our bridge. Used for generating proper memory address at compilation.",
  "eventDecorators": [
    {
      "signature": "MigrationDeparturePreRegisteredERC721Full(address,uint256,address,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)",
      "name": "MigrationDeparturePreRegisteredERC721Full",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_originWorld",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_originTokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_originOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_destinationUniverse",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_destinationBridge",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_destinationWorld",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_destinationTokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_destinationOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_signee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_migrationHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "MigrationDeparturePreRegisteredERC721IOU(address,uint256,address,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)",
      "name": "MigrationDeparturePreRegisteredERC721IOU",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_originWorld",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_originTokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_originOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_destinationUniverse",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_destinationBridge",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_destinationWorld",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_destinationTokenId",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_destinationOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_signee",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_migrationHash",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptedMigrationDestinationERC721Full(address,uint256,bytes32,bytes32,bytes32)",
      "name": "acceptedMigrationDestinationERC721Full",
      "description": "Check if an origin NFT token can be migrated to a different token as a full migration.",
      "parameterDecorators": [
        {
          "name": "_originWorld",
          "description": "The smart contract address of the token currently representing the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_originTokenId",
          "description": "The token ID of the token representing the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationUniverse",
          "description": "An array of 32 bytes representing the destination universe. eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationWorld",
          "description": "An array of 32 bytes representing the destination world of the migrated token. If the destination bridge is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationTokenId",
          "description": "An array of 32 bytes representing the tokenId world of the migrated token. If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "TRUE if token can be migrated, FALSE if it can't.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "acceptedMigrationDestinationERC721IOU(address,uint256,bytes32,bytes32,bytes32)",
      "name": "acceptedMigrationDestinationERC721IOU",
      "description": "Check if an origin NFT token can be migrated to a different token as an IOU migration.",
      "parameterDecorators": [
        {
          "name": "_originWorld",
          "description": "The smart contract address of the token currently representing the NFT _param _originTokenId The token ID of the token representing the NFT _param _destinationUniverse An array of 32 bytes representing the destination universe. eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination. _param _destinationWorld An array of 32 bytes representing the destination world of the migrated token. If the destination bridge is on an EVM, it is most likely an address. _param _destinationTokenId An array of 32 bytes representing the tokenId world of the migrated token. If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
          "recommendedTypes": []
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "TRUE if token can be migrated, FALSE if it can't.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "generateMigrationHashERC721Full(bytes32,address,address,uint256,address,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)",
      "name": "generateMigrationHashERC721Full",
      "description": "Generate a hash that would be also generated when registering an IOU ERC721 migration with the same data.",
      "parameterDecorators": [
        {
          "name": "_originUniverse",
          "description": "The bytes32 identifier of the Universe this bridge is deployed in.",
          "recommendedTypes": []
        },
        {
          "name": "_originBridge",
          "description": "the address of bridge the original token is gonna be in escrow with.",
          "recommendedTypes": []
        },
        {
          "name": "_originWorld",
          "description": "The smart contract address of the original token representing the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_originTokenId",
          "description": "The token ID of the original token representing the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_originOwner",
          "description": "The original owner of the token when migration is registered.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationUniverse",
          "description": "An array of 32 bytes representing the destination universe. eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationBridge",
          "description": "An array of 32 bytes representing the destination bridge of the migrated token. If the destination bridge is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationWorld",
          "description": "An array of 32 bytes representing the destination world of the migrated token. If the destination bridge is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationTokenId",
          "description": "An array of 32 bytes representing the tokenId world of the migrated token. If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationOwner",
          "description": "An array of 32 bytes representing the final owner of the migrated token . If the destination world is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_signee",
          "description": "The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner.",
          "recommendedTypes": []
        },
        {
          "name": "_originHeight",
          "description": "The height of the origin universe (usually block.timestamp) If the owner has access to a private key, it should be the owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The bytes32 migrationHash that would be generated in such a migration.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "generateMigrationHashERC721IOU(bytes32,address,address,uint256,address,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)",
      "name": "generateMigrationHashERC721IOU",
      "description": "Generate a hash that would be generated when registering an IOU ERC721 migration.",
      "parameterDecorators": [
        {
          "name": "_originUniverse",
          "description": "The bytes32 identifier of the Universe this bridge is deployed in.",
          "recommendedTypes": []
        },
        {
          "name": "_originBridge",
          "description": "the address of bridge the original token is gonna be in escrow with.",
          "recommendedTypes": []
        },
        {
          "name": "_originWorld",
          "description": "The smart contract address of the original token representing the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_originTokenId",
          "description": "The token ID of the original token representing the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_originOwner",
          "description": "The original owner of the token when migration is registered.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationUniverse",
          "description": "An array of 32 bytes representing the destination universe. eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationBridge",
          "description": "An array of 32 bytes representing the destination bridge of the migrated token. If the destination bridge is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationWorld",
          "description": "An array of 32 bytes representing the destination world of the migrated token. If the destination bridge is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationTokenId",
          "description": "An array of 32 bytes representing the tokenId world of the migrated token. If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationOwner",
          "description": "An array of 32 bytes representing the final owner of the migrated token . If the destination world is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_signee",
          "description": "The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner.",
          "recommendedTypes": []
        },
        {
          "name": "_originHeight",
          "description": "The height of the origin universe (usually block.timestamp) If the owner has access to a private key, it should be the owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The bytes32 migrationHash that would be generated in such a migration.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getProofOfEscrowHash(bytes32)",
      "name": "getProofOfEscrowHash",
      "description": "Get the latest proof of escrow hash associated with a migration hash. Throw if the token has not been deposited yet. To prevent front running, please wrap the safeTransfer transaction and check the deposit using this function.",
      "parameterDecorators": [
        {
          "name": "_migrationHash",
          "description": "The bytes32 migrationHash that was generated when pre-registering the migration.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "The proof of escrowHash associated with a migration (if any).",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isMigrationPreRegisteredERC721(bytes32)",
      "name": "isMigrationPreRegisteredERC721",
      "description": "Query if a migration generating the given hash has been registered.",
      "parameterDecorators": [
        {
          "name": "_migrationHash",
          "description": "The bytes32 migrationHash that would have been generated when pre-registering the migration.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "TRUE if a migration generating such a hash was pre registered, FALSE if not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "migrateToERC721Full(address,uint256,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)",
      "name": "migrateToERC721Full",
      "description": "Declare the intent to migrate an ERC-721 token to a different bridge as a full migration. Calling this functionIt will assume that the migrating owner is the current owner at function call. Throw if _originWorld owner has not set (_destinationUniverse, _destinationWorld) as an accepted migration. Will callback onFullMigration(_destinationWorld, _destinationTokenId); Emit MigrationDeparturePreRegisteredERC721Full Can be called by the owner of the ERC-721 token or one of it's operator/approved address.",
      "parameterDecorators": [
        {
          "name": "_originWorld",
          "description": "The smart contract address of the token currently representing the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_originTokenId",
          "description": "The token ID of the token representing the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationUniverse",
          "description": "An array of 32 bytes representing the destination universe. eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationBridge",
          "description": "An array of 32 bytes representing the destination bridge. If the destination bridge is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationWorld",
          "description": "An array of 32 bytes representing the destination world of the migrated token. If the destination bridge is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationTokenId",
          "description": "An array of 32 bytes representing the tokenId world of the migrated token. If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationOwner",
          "description": "An array of 32 bytes representing the final owner of the migrated token . If the destination world is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_signee",
          "description": "The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "migrateToERC721IOU(address,uint256,bytes32,bytes32,bytes32,bytes32,bytes32,bytes32)",
      "name": "migrateToERC721IOU",
      "description": "Declare the intent to migrate an ERC-721 token to a different bridge as an IOU token. Calling this functionIt will assume that the migrating owner is the current owner at function call. Throw if _originWorld owner disabled IOU migrations for this world. Emit MigrationDeparturePreRegisteredERC721IOU Can be called by the owner of the ERC-721 token or one of it's operator/approved address The latest migration data would be bound to a token when the token is deposited in escrow.",
      "parameterDecorators": [
        {
          "name": "_originWorld",
          "description": "The smart contract address of the token currently representing the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_originTokenId",
          "description": "The token ID of the token representing the NFT.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationUniverse",
          "description": "An array of 32 bytes representing the destination universe. eg : \"Ropsten\", \"Moonbeam\". Please refer to the documentation for a standardized list of destination.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationBridge",
          "description": "An array of 32 bytes representing the destination bridge. If the destination bridge is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationWorld",
          "description": "An array of 32 bytes representing the destination world of the migrated token. If the destination bridge is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationTokenId",
          "description": "An array of 32 bytes representing the tokenId world of the migrated token. If the destination token is an ERC-721 token in an EVM smart contract, it is most likely an uint256.",
          "recommendedTypes": []
        },
        {
          "name": "_destinationOwner",
          "description": "An array of 32 bytes representing the final owner of the migrated token . If the destination world is on an EVM, it is most likely an address.",
          "recommendedTypes": []
        },
        {
          "name": "_signee",
          "description": "The address that will be verified as signing the transfer as legitimate on the destination If the owner has access to a private key, it should be the owner.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}