{
  "schema": "../schema.json",
  "tags": [],
  "name": "MultiWrapper",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "WrapperAdded(address)",
      "name": "WrapperAdded",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "connector",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "WrapperRemoved(address)",
      "name": "WrapperRemoved",
      "description": "Hash to mark updated provenance hash. Emitted when the factory deploys a trigger. The `trigger` is the address at which the trigger was deployed. For `triggerConfigId`, see the function of the same name in this contract. For other attributes, see the docs for the params of `deployTrigger` in this contract.",
      "parameterDecorators": [
        {
          "name": "connector",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addWrapper(address)",
      "name": "addWrapper",
      "description": "",
      "parameterDecorators": [
        {
          "name": "wrapper",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getWrappedTokens(address)",
      "name": "getWrappedTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "wrappedTokens",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "rates",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeWrapper(address)",
      "name": "removeWrapper",
      "description": "",
      "parameterDecorators": [
        {
          "name": "wrapper",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "wrappers()",
      "name": "wrappers",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "allWrappers",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}