{"schema":"../schema.json","tags":["escrows","compound"],"name":"Compound","description":"This contract is used to define Compound dApp actions available. All dapp actions are invoked via delegatecalls from Escrow contract, so this contract's state is really Escrow.","eventDecorators":[{"signature":"CompoundLended(address,address,uint256,uint256,uint256)","name":"CompoundLended","description":"Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"tokenAddress","description":"","recommendedTypes":[],"indexed":true},{"name":"cTokenAddress","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenBalance","description":"","recommendedTypes":[],"indexed":false},{"name":"cTokenBalance","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"CompoundRedeemed(address,address,uint256,bool,uint256,uint256)","name":"CompoundRedeemed","description":"Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"tokenAddress","description":"","recommendedTypes":[],"indexed":true},{"name":"cTokenAddress","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false},{"name":"isUnderlyingAmount","description":"","recommendedTypes":[],"indexed":false},{"name":"tokenBalance","description":"","recommendedTypes":[],"indexed":false},{"name":"cTokenBalance","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"Emitted when pendingControllerImplementation is changed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"NO_ERROR()","name":"NO_ERROR","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"TOKEN_INSUFFICIENT_BALANCE()","name":"TOKEN_INSUFFICIENT_BALANCE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"findTokenIndex(address)","name":"findTokenIndex","description":"Returns the index of a given token address from the stored address array.","parameterDecorators":[{"name":"tokenAddress","description":"The contract address for which the index is required.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"int256"}],"emittableEvents":[],"readOnly":true},{"signature":"getTokens()","name":"getTokens","description":"Returns an array of token addresses, for which this Escrow contract has a balance.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address[]"}],"emittableEvents":[],"readOnly":true},{"signature":"initialize(address)","name":"initialize","description":"Initializes the contract setting the deployer as the initial owner.","parameterDecorators":[{"name":"sender","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isOwner()","name":"isOwner","description":"Returns true if the caller is the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"lend(address,uint256)","name":"lend","description":"To lend we first have to approve the cToken to access the token balance then mint.","parameterDecorators":[{"name":"tokenAddress","description":"address of the token.","recommendedTypes":[]},{"name":"amount","description":"amount of tokens to mint.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"redeem(address,uint256)","name":"redeem","description":"This function redeems the user's cTokens for a specific amount of the underlying token.","parameterDecorators":[{"name":"tokenAddress","description":"address of the token.","recommendedTypes":[]},{"name":"amount","description":"amount of underlying tokens to redeem.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"redeemAll(address)","name":"redeemAll","description":"This function redeems the complete cToken balance.","parameterDecorators":[{"name":"tokenAddress","description":"address of the token.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"settings()","name":"settings","description":"The gets the settings contract address from the SETTINGS_SLOT. This address should NOT change over the time. See details in the _setSettings(...) function.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}