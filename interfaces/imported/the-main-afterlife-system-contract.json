{
  "schema": "../schema.json",
  "tags": [
    "locking"
  ],
  "name": "AfterLife",
  "description": "The main AfterLife system contract. All function calls \"proxy\" down to functions implemented in one of many libraries.",
  "eventDecorators": [],
  "functionDecorators": [
    {
      "signature": "accuseBeneficiary(bytes32,bytes,address)",
      "name": "accuseBeneficiary",
      "description": "Given a secret, accuse the beneficiary for unlocking the secret early.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "the identifier of the secret.",
          "recommendedTypes": []
        },
        {
          "name": "singleHash",
          "description": "the preimage of the secret identifier.",
          "recommendedTypes": []
        },
        {
          "name": "paymentAddress",
          "description": "the address to receive payment for accusing the beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool indicating that the accusal was successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "beneficiaries(address)",
      "name": "beneficiaries",
      "description": "Given an beneficiary address, return that beneficiary's profile.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The beneficiary account's address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the Beneficiary object.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiaryAccusalsCount(address)",
      "name": "beneficiaryAccusalsCount",
      "description": "Returns the count of accused secrets from the beneficiary.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The address of the given beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the number of accused secrets from the beneficiary.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiaryAccusalsIdentifier(address,uint256)",
      "name": "beneficiaryAccusalsIdentifier",
      "description": "Returns the secret unique identifier for a given beneficiary and index of the accused secrets.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The address of an beneficiary.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the beneficiary's accused secrets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the identifier associated with the index of the beneficiary's accused secrets.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiaryAddresses(uint256)",
      "name": "beneficiaryAddresses",
      "description": "Given an index (of the full beneficiary array), return the beneficiary address at that index.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "The index of the registered beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "address of the beneficiary.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiaryCancelsCount(address)",
      "name": "beneficiaryCancelsCount",
      "description": "Returns the count of cancelled secrets from the beneficiary.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The address of the given beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the number of cancelled secrets from the beneficiary.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiaryCancelsIdentifier(address,uint256)",
      "name": "beneficiaryCancelsIdentifier",
      "description": "Returns the secret unique identifier for a given beneficiary and index of the cancelled secrets.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The address of an beneficiary.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the beneficiary's cancelled secrets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the identifier associated with the index of the beneficiary's cancelled secrets.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiaryCleanupsCount(address)",
      "name": "beneficiaryCleanupsCount",
      "description": "Returns the count of cleaned-up secrets from the beneficiary.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The address of the given beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the number of cleaned-up secrets from the beneficiary.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiaryCleanupsIdentifier(address,uint256)",
      "name": "beneficiaryCleanupsIdentifier",
      "description": "Returns the secret unique identifier for a given beneficiary and index of the cleaned-up secrets.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The address of an beneficiary.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the beneficiary's accused secrets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the identifier associated with the index of the beneficiary's leaned-up secrets.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiaryCount()",
      "name": "beneficiaryCount",
      "description": "Return the number of beneficiaries that have been registered.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "total registered beneficiary count.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiarySecretCount(address)",
      "name": "beneficiarySecretCount",
      "description": "Returns the count of secrets created for a specific beneficiary.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The address of the given beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the number of secrets which have been created for an beneficiary.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiarySecretIdentifier(address,uint256)",
      "name": "beneficiarySecretIdentifier",
      "description": "Returns the secret unique identifier for a given beneficiary and index.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The address of an beneficiary.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the beneficiary's list of secrets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the identifier associated with the index of the beneficiary's secrets.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiarySuccessesCount(address)",
      "name": "beneficiarySuccessesCount",
      "description": "Returns the count of successful secrets completed by the beneficiary.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The address of the given beneficiary.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the number of secrets which have been successfully completed by the beneficiary.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "beneficiarySuccessesIdentifier(address,uint256)",
      "name": "beneficiarySuccessesIdentifier",
      "description": "Returns the secret unique identifier for a given beneficiary and index of successful secrets.",
      "parameterDecorators": [
        {
          "name": "beneficiary",
          "description": "The address of an beneficiary.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the beneficiary's list of successfully completed secrets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the identifier associated with the index of the beneficiary's successfully completed secrets.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burySecret(bytes32)",
      "name": "burySecret",
      "description": "Extends a secret lock time into infinity effectively signaling that the secret is over and should never be resurrected.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "the identifier of the secret.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool indicating that the bury was successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cancelSecret(bytes32)",
      "name": "cancelSecret",
      "description": "An creator may cancel a secret if it hasn't been completely created.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "the identifier of the secret.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool indicating that the cancel was successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "cleanUpSecret(bytes32,address)",
      "name": "cleanUpSecret",
      "description": "Clean up a secret whose lock time and window have passed. Callable by anyone.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "the identifier of the secret.",
          "recommendedTypes": []
        },
        {
          "name": "paymentAddress",
          "description": "the address to receive payment for cleaning up the secret.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool indicating that the clean up was successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createSecret(string,address,uint256,uint256,uint256,uint256,bytes32,bytes)",
      "name": "createSecret",
      "description": "Creator creates the skeleton for a new secret.",
      "parameterDecorators": [
        {
          "name": "name",
          "description": "the name of the secret.",
          "recommendedTypes": []
        },
        {
          "name": "beneficiary",
          "description": "the address of a registered beneficiary to assign this secret to.",
          "recommendedTypes": []
        },
        {
          "name": "lockTime",
          "description": "the lock time of the secret.",
          "recommendedTypes": []
        },
        {
          "name": "storageFee",
          "description": "the storage fee that the beneficiary will receive, for saving this secret on Arweave.",
          "recommendedTypes": []
        },
        {
          "name": "handlingFee",
          "description": "the handling fee that the beneficiary will receive at the first relock.",
          "recommendedTypes": []
        },
        {
          "name": "reward",
          "description": "the reward that the beneficiary will receive when the secret is unlocked.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "the identifier of the secret, which is the hash of the hash of the inner encrypted layer of the secret.",
          "recommendedTypes": []
        },
        {
          "name": "recipientPublicKey",
          "description": "the public key of the recipient.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "index of the new secret.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "creatorSecretCount(address)",
      "name": "creatorSecretCount",
      "description": "Returns the count of secrets created by a specific creator.",
      "parameterDecorators": [
        {
          "name": "creator",
          "description": "The address of the given creator.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the number of secrets which have been created by an creator.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "creatorSecretIdentifier(address,uint256)",
      "name": "creatorSecretIdentifier",
      "description": "Returns the secret unique identifier for a given creator and index.",
      "parameterDecorators": [
        {
          "name": "creator",
          "description": "The address of an creator.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the creator's list of secrets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the double hash associated with the index of the creator's secrets.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address)",
      "name": "initialize",
      "description": "Contract initializer.",
      "parameterDecorators": [
        {
          "name": "_lifeToken",
          "description": "The address of the LIFE token.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lifeToken()",
      "name": "lifeToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recipientSecretCount(address)",
      "name": "recipientSecretCount",
      "description": "Returns the count of secrets created for a specific recipient.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "The address of the given recipient.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the number of secrets which have been created for a recipient.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "recipientSecretIdentifier(address,uint256)",
      "name": "recipientSecretIdentifier",
      "description": "Returns the secret unique identifier for a given recipient and index.",
      "parameterDecorators": [
        {
          "name": "recipient",
          "description": "The address of a recipient.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the recipient's list of secrets.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the identifier associated with the index of the recipient's secrets.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registerBeneficiary(bytes,string,address,uint256,uint256,uint256,uint256,uint256)",
      "name": "registerBeneficiary",
      "description": "Registers a new beneficiary in the system.",
      "parameterDecorators": [
        {
          "name": "currentPublicKey",
          "description": "the public key to be used in the first secret.",
          "recommendedTypes": []
        },
        {
          "name": "endpoint",
          "description": "where to contact this beneficiary on the internet.",
          "recommendedTypes": []
        },
        {
          "name": "paymentAddress",
          "description": "all collected payments for the beneficiary will be sent here.",
          "recommendedTypes": []
        },
        {
          "name": "feePerByte",
          "description": "amount of LIFE tokens charged per byte of storage being sent to Arweave.",
          "recommendedTypes": []
        },
        {
          "name": "minimumReward",
          "description": "the minimum reward for a secret that the beneficiary will accept.",
          "recommendedTypes": []
        },
        {
          "name": "minimumHandlingFee",
          "description": "the minimum handling fee for a secret that the beneficiary will accept.",
          "recommendedTypes": []
        },
        {
          "name": "maximumLockTime",
          "description": "the maximum lock time for a secret that the beneficiary will accept, in relative terms (i.e. \"1 year\" is 31536000 (seconds)).",
          "recommendedTypes": []
        },
        {
          "name": "freeBond",
          "description": "the amount of LIFE bond that the beneficiary wants to start with.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "index of the new beneficiary.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "relockSecret(bytes32,uint256,uint256,uint256)",
      "name": "relockSecret",
      "description": "Creator can extend the lock time of the secret, as long as the previous lock time is in the future.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "the identifier of the secret.",
          "recommendedTypes": []
        },
        {
          "name": "lockTime",
          "description": "new lock time for the relocked secret.",
          "recommendedTypes": []
        },
        {
          "name": "handlingFee",
          "description": "new handling fee for the relocked secret.",
          "recommendedTypes": []
        },
        {
          "name": "reward",
          "description": "new reward for the relocked secret.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool indicating that the relock was successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "secret(bytes32)",
      "name": "secret",
      "description": "Returns secret data given an indentifier.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "the unique identifier a secret.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "sec the Secret object.",
          "recommendedTypes": [],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "secretCount()",
      "name": "secretCount",
      "description": "Return the total number of secrets that have been created.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the number of secrets that have ever been created.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "secretIdentifier(uint256)",
      "name": "secretIdentifier",
      "description": "Return the unique identifier of a secret, given it's index.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "The index of the secret.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "the unique identifier of the given secret.",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unlockSecret(bytes32,bytes32)",
      "name": "unlockSecret",
      "description": "Given a secret identifier, preimage, and private key, verify that the data is valid and close out that secret.",
      "parameterDecorators": [
        {
          "name": "identifier",
          "description": "the identifier of the secret.",
          "recommendedTypes": []
        },
        {
          "name": "privateKey",
          "description": "the beneficiary's private key which will decrypt the outer layer of the encrypted payload on Arweave.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool indicating that the unlock was successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateBeneficiary(string,bytes,address,uint256,uint256,uint256,uint256,uint256)",
      "name": "updateBeneficiary",
      "description": "An beneficiary may update their profile.",
      "parameterDecorators": [
        {
          "name": "endpoint",
          "description": "where to contact this beneficiary on the internet.",
          "recommendedTypes": []
        },
        {
          "name": "newPublicKey",
          "description": "the public key to be used in the next secret.",
          "recommendedTypes": []
        },
        {
          "name": "paymentAddress",
          "description": "all collected payments for the beneficiary will be sent here.",
          "recommendedTypes": []
        },
        {
          "name": "feePerByte",
          "description": "amount of LIFE tokens charged per byte of storage being sent to Arweave.",
          "recommendedTypes": []
        },
        {
          "name": "minimumReward",
          "description": "the minimum reward for a secret that the beneficiary will accept.",
          "recommendedTypes": []
        },
        {
          "name": "minimumHandlingFee",
          "description": "the minimum handling fee for a secret that the beneficiary will accept.",
          "recommendedTypes": []
        },
        {
          "name": "maximumLockTime",
          "description": "the maximum lock time for a secret that the beneficiary will accept, in relative terms (i.e. \"1 year\" is 31536000 (seconds)).",
          "recommendedTypes": []
        },
        {
          "name": "freeBond",
          "description": "the amount of LIFE bond that the beneficiary wants to add to their profile.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool indicating that the update was successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateSecret(bytes,bytes32,string,uint8,bytes32,bytes32)",
      "name": "updateSecret",
      "description": "Creator updates a secret given it's identifier, after the beneficiary has uploaded the encrypted payload onto Arweave.",
      "parameterDecorators": [
        {
          "name": "newPublicKey",
          "description": "the beneficiary's new public key, to use for encrypting the next secret that they're assigned to.",
          "recommendedTypes": []
        },
        {
          "name": "identifier",
          "description": "the identifier of the secret.",
          "recommendedTypes": []
        },
        {
          "name": "assetId",
          "description": "the identifier of the encrypted asset on Arweave.",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "signature element.",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "signature element.",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "signature element.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool indicating that the update was successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawBond(uint256)",
      "name": "withdrawBond",
      "description": "Beneficiary can withdraw any of their free bond.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "the amount of the beneficiary's free bond that they're withdrawing.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "bool indicating that the withdrawal was successful.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}