{
  "schema": "../schema.json",
  "tags": [
    "oracles"
  ],
  "name": "CryptographKYCLogicV1",
  "description": "Cryptograph KYC Logic Contract. Price feed is in ETH and NOT an oracle because it's a KYC price feed (We have to verify transaction above a certain GBP amount). Provides the logic code for the KYC of bidders.",
  "eventDecorators": [
    {
      "signature": "KYCed(address,bool)",
      "name": "KYCed",
      "description": "event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_isValid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "PriceLimit(uint256)",
      "name": "PriceLimit",
      "description": "event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "_newPrice",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "authorizedOperators(address)",
      "name": "authorizedOperators",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkKyc(address,uint256)",
      "name": "checkKyc",
      "description": "Check if a user is allowed to transact this amount. Anyone can check.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "The address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "The amount of the bid.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "init()",
      "name": "init",
      "description": "Init function of the KYC contract. Callable only once after deployment.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "kycUsers(address)",
      "name": "kycUsers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "perpetualAltruism()",
      "name": "perpetualAltruism",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "priceLimit()",
      "name": "priceLimit",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setKyc(address,bool)",
      "name": "setKyc",
      "description": "Used to allow other wallets to manage the KYC. Only callable by Perpetual Altruism/Other operators.",
      "parameterDecorators": [
        {
          "name": "_user",
          "description": "The address of the user.",
          "recommendedTypes": []
        },
        {
          "name": "_kyc",
          "description": "Is the user allowed to bid for any amount ?.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setOperator(address,bool)",
      "name": "setOperator",
      "description": "Used to allow other wallets to manage the KYC. Only callable by Perpetual Altruism/Other operators.",
      "parameterDecorators": [
        {
          "name": "_operator",
          "description": "The address of the operator.",
          "recommendedTypes": []
        },
        {
          "name": "_operating",
          "description": "If the operator is allowed to operate.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPriceLimit(uint256)",
      "name": "setPriceLimit",
      "description": "Used to set a price limit above which wallets need to be KYCed. Only callable by Perpetual Altruism/Other operators.",
      "parameterDecorators": [
        {
          "name": "_newPrice",
          "description": "The new price limit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}