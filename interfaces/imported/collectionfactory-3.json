{
  "schema": "../schema.json",
  "tags": [],
  "name": "CollectionFactory",
  "description": "CollectionFactory. This contract is the registry for Hashes Collections.",
  "eventDecorators": [
    {
      "signature": "CollectionAddressRemoved(address,address)",
      "name": "CollectionAddressRemoved",
      "description": "CollectionAddressRemoved Emitted when a cloned collection contract address is removed.",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "CollectionCreated(address,address,address)",
      "name": "CollectionCreated",
      "description": "CollectionCreated Emitted when a Collection is created.",
      "parameterDecorators": [
        {
          "name": "implementationAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "collectionAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "creator",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "EcosystemSettingsCreated(string,bytes32,bytes)",
      "name": "EcosystemSettingsCreated",
      "description": "EcosystemSettingsCreated Emitted when ecosystem settings are created.",
      "parameterDecorators": [
        {
          "name": "ecosystemName",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "hashedEcosystemName",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "settings",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EcosystemSettingsUpdated(bytes32,bytes)",
      "name": "EcosystemSettingsUpdated",
      "description": "EcosystemSettingsUpdated Emitted when ecosystem settings are updated.",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "FactoryMaintainerAddressSet(address)",
      "name": "FactoryMaintainerAddressSet",
      "description": "FactoryMaintainerAddressSet Emitted when the factory maintainer address is set.",
      "parameterDecorators": [
        {
          "name": "factoryMaintainerAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ImplementationAddressAdded(address,bool)",
      "name": "ImplementationAddressAdded",
      "description": "ImplementationAddressAdded Emitted when an implementation address is added.",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ImplementationAddressesRemoved(address[])",
      "name": "ImplementationAddressesRemoved",
      "description": "ImplementationAddressesRemoved Emitted when implementation addresses are removed.",
      "parameterDecorators": [
        {
          "name": "implementationAddresses",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "reporter",
          "description": "The address of the entity that reported the updater misbehavior.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "updater",
          "description": "The address of the updater.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addImplementationAddress(bytes32,address,bool)",
      "name": "addImplementationAddress",
      "description": "This function adds an implementation address.",
      "parameterDecorators": [
        {
          "name": "_hashedEcosystemName",
          "description": "The ecosystem which this implementation address will reference.",
          "recommendedTypes": []
        },
        {
          "name": "_implementationAddress",
          "description": "The address of the Collection contract.",
          "recommendedTypes": []
        },
        {
          "name": "_cloneable",
          "description": "Whether this implementation address is cloneable.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "collections(address)",
      "name": "collections",
      "description": "collections A mapping of implementation addresses to a struct which contains an array of the cloned collections for that implementation.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "exists",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "cloneable",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createCollection(address,bytes)",
      "name": "createCollection",
      "description": "This function clones a Hashes Collection implementation contract.",
      "parameterDecorators": [
        {
          "name": "_implementationAddress",
          "description": "The address of the cloneable implementation contract.",
          "recommendedTypes": []
        },
        {
          "name": "_initializationData",
          "description": "The abi encoded initialization data which is consumable by the implementation contract in its initialize function.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createEcosystemSettings(string,bytes)",
      "name": "createEcosystemSettings",
      "description": "This function creates a new ecosystem setting key in the mapping along with the initial ABI encoded settings value to be used for that key. The factory maintainer can create a new ecosystem setting to allow for efficient bootstrapping of a new ecosystem, but only HashesDAO can update an existing ecosystem.",
      "parameterDecorators": [
        {
          "name": "_ecosystemName",
          "description": "The name of the ecosystem.",
          "recommendedTypes": []
        },
        {
          "name": "_settings",
          "description": "The ABI encoded settings data which can be decoded by implementation contracts which consume this ecosystem.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "ecosystemSettings(bytes32,uint256)",
      "name": "ecosystemSettings",
      "description": "ecosystemSettings A mapping of hashed ecosystem names to an array of settings checkpoints. Settings checkpoints contain ABI encoded data which can be decoded in implementation addresses that consume them.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "id",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "settings",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ecosystems(uint256)",
      "name": "ecosystems",
      "description": "ecosystems An array of the hashed ecosystem names which correspond to a settings format which can be used by multiple implementation contracts.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "factoryMaintainerAddress()",
      "name": "factoryMaintainerAddress",
      "description": "factoryMaintainerAddress An address which has some distinct maintenance abilities. These include the ability to remove implementation addresses or collection instances, as well as transfer this role to another address. Implementation addresses can choose to use this address for certain roles since it is passed through to the initialize function upon creating a cloned collection.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCollections(address)",
      "name": "getCollections",
      "description": "This function returns an array of the Hashes Collections created through this registry for a particular implementation address.",
      "parameterDecorators": [
        {
          "name": "_implementationAddress",
          "description": "The implementation address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "An array of Collection addresses.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCollections(address,uint256,uint256)",
      "name": "getCollections",
      "description": "This function returns an array of the Hashes Collections created through this registry for a particular implementation address.",
      "parameterDecorators": [
        {
          "name": "_implementationAddress",
          "description": "The implementation address.",
          "recommendedTypes": []
        },
        {
          "name": "_start",
          "description": "The array start index (inclusive).",
          "recommendedTypes": []
        },
        {
          "name": "_end",
          "description": "The array end index (exclusive).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "An array of Collection addresses.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEcosystemSettings(bytes32,uint64)",
      "name": "getEcosystemSettings",
      "description": "This function gets the ecosystem settings from a particular ecosystem checkpoint.",
      "parameterDecorators": [
        {
          "name": "_hashedEcosystemName",
          "description": "The hashed name of the ecosystem.",
          "recommendedTypes": []
        },
        {
          "name": "_blockNumber",
          "description": "The block number in which the new Collection was initialized. This is used to determine which settings were active at the time of Collection creation.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEcosystems()",
      "name": "getEcosystems",
      "description": "This function gets the list of hashed ecosystem names.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "An array of the hashed ecosystem names.",
          "recommendedTypes": [],
          "solidityType": "bytes32[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEcosystems(uint256,uint256)",
      "name": "getEcosystems",
      "description": "This function gets the list of hashed ecosystem names.",
      "parameterDecorators": [
        {
          "name": "_start",
          "description": "The array start index (inclusive).",
          "recommendedTypes": []
        },
        {
          "name": "_end",
          "description": "The array end index (exclusive).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "An array of the hashed ecosystem names.",
          "recommendedTypes": [],
          "solidityType": "bytes32[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getImplementationAddresses(bytes32,uint256,uint256)",
      "name": "getImplementationAddresses",
      "description": "This function returns an array of the implementation addresses.",
      "parameterDecorators": [
        {
          "name": "_hashedEcosystemName",
          "description": "The ecosystem to fetch implementation addresses from.",
          "recommendedTypes": []
        },
        {
          "name": "_start",
          "description": "The array start index (inclusive).",
          "recommendedTypes": []
        },
        {
          "name": "_end",
          "description": "The array end index (exclusive).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Array of Hashes Collection implementation addresses.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getImplementationAddresses(bytes32)",
      "name": "getImplementationAddresses",
      "description": "This function returns an array of the implementation addresses.",
      "parameterDecorators": [
        {
          "name": "_hashedEcosystemName",
          "description": "The ecosystem to fetch implementation addresses from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Array of Hashes Collection implementation addresses.",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "implementationAddresses(bytes32,uint256)",
      "name": "implementationAddresses",
      "description": "implementationAddresses A mapping of hashed ecosystem names to an array of the implementation addresses for that ecosystem.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeCollection(address,address,uint256)",
      "name": "removeCollection",
      "description": "This function removes a cloned collection address from the factory.",
      "parameterDecorators": [
        {
          "name": "_implementationAddress",
          "description": "The implementation address of the cloneable contract.",
          "recommendedTypes": []
        },
        {
          "name": "_collectionAddress",
          "description": "The cloned collection address to be removed.",
          "recommendedTypes": []
        },
        {
          "name": "_index",
          "description": "The array index to be removed. This is provided to reduce the cost of removal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeImplementationAddresses(bytes32[],address[],uint256[])",
      "name": "removeImplementationAddresses",
      "description": "This function removes implementation addresses from the factory.",
      "parameterDecorators": [
        {
          "name": "_hashedEcosystemNames",
          "description": "The ecosystems which these implementation addresses reference.",
          "recommendedTypes": []
        },
        {
          "name": "_implementationAddressesToRemove",
          "description": "The implementation addresses to remove: either cloneable implementation addresses or a standalone contracts.",
          "recommendedTypes": []
        },
        {
          "name": "_indexes",
          "description": "The array indexes to be removed. Must be monotonically increasing and match the items in the other two arrays. This array is provided to reduce the cost of removal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setFactoryMaintainerAddress(address)",
      "name": "setFactoryMaintainerAddress",
      "description": "This function sets the factory maintainer address.",
      "parameterDecorators": [
        {
          "name": "_factoryMaintainerAddress",
          "description": "The address of the factory maintainer.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateEcosystemSettings(bytes32,bytes)",
      "name": "updateEcosystemSettings",
      "description": "This function updates an ecosystem setting which means a new checkpoint is added to the array of settings checkpoints for that ecosystem. Only HashesDAO can call this function since these are likely to be more established ecosystems which have more impact.",
      "parameterDecorators": [
        {
          "name": "_hashedEcosystemName",
          "description": "The hashed name of the ecosystem.",
          "recommendedTypes": []
        },
        {
          "name": "_settings",
          "description": "The ABI encoded settings data which can be decoded by implementation contracts which consume this ecosystem.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}