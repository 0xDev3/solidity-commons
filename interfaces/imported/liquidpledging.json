{"schema":"../schema.json","tags":[],"name":"LiquidPledging","description":"","eventDecorators":[{"signature":"Transfer(uint256,uint256,uint256)","name":"Transfer","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"from","description":"","recommendedTypes":[],"indexed":true},{"name":"to","description":"","recommendedTypes":[],"indexed":true},{"name":"amount","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"CancelProject(uint256)","name":"CancelProject","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"idProject","description":"","recommendedTypes":[],"indexed":true}]},{"signature":"GiverAdded(uint64,string)","name":"GiverAdded","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"idGiver","description":"","recommendedTypes":[],"indexed":true},{"name":"url","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"GiverUpdated(uint64,string)","name":"GiverUpdated","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"idGiver","description":"","recommendedTypes":[],"indexed":true},{"name":"url","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"DelegateAdded(uint64,string)","name":"DelegateAdded","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"idDelegate","description":"","recommendedTypes":[],"indexed":true},{"name":"url","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"DelegateUpdated(uint64,string)","name":"DelegateUpdated","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"idDelegate","description":"","recommendedTypes":[],"indexed":true},{"name":"url","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ProjectAdded(uint64,string)","name":"ProjectAdded","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"idProject","description":"","recommendedTypes":[],"indexed":true},{"name":"url","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"ProjectUpdated(uint64,string)","name":"ProjectUpdated","description":"Emitted when a new Vault is deployed. Emitted when a new `addr` is whitelisted.","parameterDecorators":[{"name":"idProject","description":"","recommendedTypes":[],"indexed":true},{"name":"url","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"addGiverAndDonate(uint64,address,address,uint256)","name":"addGiverAndDonate","description":"Create a \"giver\" pledge admin for the given `donorAddress` & donate.","parameterDecorators":[{"name":"idReceiver","description":"The Admin receiving the donation; can be any Admin: the Giver themselves, another Giver, a Delegate or a Project.","recommendedTypes":[]},{"name":"donorAddress","description":"The address of the \"giver\" of this donation.","recommendedTypes":[]},{"name":"token","description":"The address of the token being donated.","recommendedTypes":[]},{"name":"amount","description":"The amount of tokens being donated.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"APP_ADDR_NAMESPACE()","name":"APP_ADDR_NAMESPACE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"whitelistDisabled()","name":"whitelistDisabled","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"isProjectCanceled(uint64)","name":"isProjectCanceled","description":"A getter to find if a specified Project has been canceled.","parameterDecorators":[{"name":"projectId","description":"The Admin id number used to specify the Project.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"PLUGIN_MANAGER_ROLE()","name":"PLUGIN_MANAGER_ROLE","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"numberOfPledges()","name":"numberOfPledges","description":"///////////////////////// A constant getter that returns the total number of pledges.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"confirmPayment(uint64,uint256)","name":"confirmPayment","description":"`onlyVault` Confirms a withdraw request changing the PledgeState from Paying to Paid.","parameterDecorators":[{"name":"idPledge","description":"Id of the pledge that is to be withdrawn.","recommendedTypes":[]},{"name":"amount","description":"Quantity of ether (in wei) to be withdrawn.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getPledgeDelegate(uint64,uint64)","name":"getPledgeDelegate","description":"////////////////////////// Getter to find Delegate w/ the Pledge ID & the Delegate index.","parameterDecorators":[{"name":"idPledge","description":"The id number representing the pledge being queried.","recommendedTypes":[]},{"name":"idxDelegate","description":"The index number for the delegate in this Pledge.","recommendedTypes":[]}],"returnDecorators":[{"name":"idDelegate","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"addr","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"name","description":"","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"addValidPluginContracts(bytes32[])","name":"addValidPluginContracts","description":"","parameterDecorators":[{"name":"contractHashes","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getRecoveryVault()","name":"getRecoveryVault","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"useWhitelist(bool)","name":"useWhitelist","description":"you better know what you're doing if you are going to disable it. enable/disable the plugin whitelist.","parameterDecorators":[{"name":"useWhitelist","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getPledge(uint64)","name":"getPledge","description":"A getter that returns the details of the specified pledge.","parameterDecorators":[{"name":"idPledge","description":"the id number of the pledge being queried.","recommendedTypes":[]}],"returnDecorators":[{"name":"amount","description":"","recommendedTypes":[],"solidityType":"uint256"},{"name":"owner","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"nDelegates","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"intendedProject","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"commitTime","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"oldPledge","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"token","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"pledgeState","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"withdraw(uint64,uint256)","name":"withdraw","description":"Authorizes a payment be made from the `vault` can be used by the Giver to veto a pre-committed donation from a Delegate to an intendedProject.","parameterDecorators":[{"name":"idPledge","description":"Id of the pledge that is to be redeemed into ether.","recommendedTypes":[]},{"name":"amount","description":"Quantity of ether (in wei) to be authorized.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transfer(uint64,uint64,uint256,uint64)","name":"transfer","description":"Transfers amounts between pledges for internal accounting.","parameterDecorators":[{"name":"idSender","description":"Id of the Admin that is transferring the amount from Pledge to Pledge; this admin must have permissions to move the value.","recommendedTypes":[]},{"name":"idPledge","description":"Id of the pledge that's moving the value.","recommendedTypes":[]},{"name":"amount","description":"Quantity of ETH (in wei) that this pledge is transferring the authority to withdraw from the vault.","recommendedTypes":[]},{"name":"idReceiver","description":"Destination of the `amount`, can be a Giver/Project sending to a Giver, a Delegate or a Project; a Delegate sending to another Delegate, or a Delegate pre-commiting it to a Project.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"donate(uint64,uint64,address,uint256)","name":"donate","description":"This is how value enters the system and how pledges are created; the ether is sent to the vault, an pledge for the Giver is created (or found), the amount of ETH donated in wei is added to the `amount` in the Giver's Pledge, and an LP transfer is done to the idReceiver for the full amount.","parameterDecorators":[{"name":"idGiver","description":"The id of the Giver donating.","recommendedTypes":[]},{"name":"idReceiver","description":"The Admin receiving the donation; can be any Admin: the Giver themselves, another Giver, a Delegate or a Project.","recommendedTypes":[]},{"name":"token","description":"The address of the token being donated.","recommendedTypes":[]},{"name":"amount","description":"The amount of tokens being donated.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"isValidPlugin(address)","name":"isValidPlugin","description":"check if the contract at the provided address is in the plugin whitelist.","parameterDecorators":[{"name":"addr","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"normalizePledge(uint64)","name":"normalizePledge","description":"//////////////// Only affects pledges with the Pledged PledgeState for 2 things: #1: Checks if the pledge should be committed. This means that if the pledge has an intendedProject and it is past the commitTime, it changes the owner to be the proposed project (The UI will have to read the commit time and manually do what this function does to the pledge for the end user at the expiration of the commitTime) #2: Checks to make sure that if there has been a cancellation in the chain of projects, the pledge's owner has been changed appropriately. This function can be called by anybody at anytime on any pledge. In general it can be called to force the calls of the affected plugins, which also need to be predicted by the UI.","parameterDecorators":[{"name":"idPledge","description":"This is the id of the pledge that will be normalized.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":false},{"signature":"addDelegate(string,string,uint64,address)","name":"addDelegate","description":"Creates a Delegate Admin with the `msg.sender` as the Admin addr.","parameterDecorators":[{"name":"name","description":"The name used to identify the Delegate.","recommendedTypes":[]},{"name":"url","description":"The link to the Delegate's profile often an IPFS hash.","recommendedTypes":[]},{"name":"commitTime","description":"Sets the length of time in seconds that this delegate can be vetoed. Whenever this delegate is in a delegate chain the time allowed to veto any event must be greater than or equal to this time.","recommendedTypes":[]},{"name":"plugin","description":"This is Delegate's liquid pledge plugin allowing for extended functionality.","recommendedTypes":[]}],"returnDecorators":[{"name":"idDelegate","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":false},{"signature":"numberOfPledgeAdmins()","name":"numberOfPledgeAdmins","description":"////////////////////////// A constant getter used to check how many total Admins exist.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"mWithdraw(uint256[])","name":"mWithdraw","description":"Authorizes multiple amounts within multiple Pledges to be withdrawn from the `vault` in an efficient single call.","parameterDecorators":[{"name":"pledgesAmounts","description":"An array of Pledge amounts and the idPledges with which the amounts are associated; these are extrapolated using the D64 bitmask.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"EVMSCRIPT_REGISTRY_APP_ID()","name":"EVMSCRIPT_REGISTRY_APP_ID","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"removeValidPluginInstance(address)","name":"removeValidPluginInstance","description":"removes an instance of a plugin to the whitelist.","parameterDecorators":[{"name":"addr","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addGiverAndDonate(uint64,address,uint256)","name":"addGiverAndDonate","description":"Create a \"giver\" pledge admin for the sender & donate.","parameterDecorators":[{"name":"idReceiver","description":"The Admin receiving the donation; can be any Admin: the Giver themselves, another Giver, a Delegate or a Project.","recommendedTypes":[]},{"name":"token","description":"The address of the token being donated.","recommendedTypes":[]},{"name":"amount","description":"The amount of tokens being donated.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addGiver(address,string,string,uint64,address)","name":"addGiver","description":"","parameterDecorators":[{"name":"addr","description":"","recommendedTypes":[]},{"name":"name","description":"","recommendedTypes":[]},{"name":"url","description":"","recommendedTypes":[]},{"name":"commitTime","description":"","recommendedTypes":[]},{"name":"plugin","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"idGiver","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":false},{"signature":"addProject(string,string,address,uint64,uint64,address)","name":"addProject","description":"Creates a Project Admin with the `msg.sender` as the Admin addr.","parameterDecorators":[{"name":"name","description":"The name used to identify the Project.","recommendedTypes":[]},{"name":"url","description":"The link to the Project's profile often an IPFS hash.","recommendedTypes":[]},{"name":"projectAdmin","description":"The address for the trusted project manager.","recommendedTypes":[]},{"name":"parentProject","description":"The Admin id number for the parent project or 0 if there is no parentProject.","recommendedTypes":[]},{"name":"commitTime","description":"Sets the length of time in seconds the Project has to veto when the Project delegates to another Delegate and they pledge those funds to a project.","recommendedTypes":[]},{"name":"plugin","description":"This is Project's liquid pledge plugin allowing for extended functionality.","recommendedTypes":[]}],"returnDecorators":[{"name":"idProject","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":false},{"signature":"cancelProject(uint64)","name":"cancelProject","description":"Changes the `project.canceled` flag to `true`; cannot be undone.","parameterDecorators":[{"name":"idProject","description":"Id of the project that is to be canceled.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addValidPluginInstance(address)","name":"addValidPluginInstance","description":"adds an instance of a plugin to the whitelist.","parameterDecorators":[{"name":"addr","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"allowRecoverability(address)","name":"allowRecoverability","description":"By default deriving from AragonApp makes it recoverable.","parameterDecorators":[{"name":"token","description":"Token address that would be recovered.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"addGiver(string,string,uint64,address)","name":"addGiver","description":"///////////////// Creates a Giver Admin with the `msg.sender` as the Admin address.","parameterDecorators":[{"name":"name","description":"The name used to identify the Giver.","recommendedTypes":[]},{"name":"url","description":"The link to the Giver's profile often an IPFS hash.","recommendedTypes":[]},{"name":"commitTime","description":"The length of time in seconds the Giver has to veto when the Giver's delegates Pledge funds to a project.","recommendedTypes":[]},{"name":"plugin","description":"This is Giver's liquid pledge plugin allowing for extended functionality.","recommendedTypes":[]}],"returnDecorators":[{"name":"idGiver","description":"","recommendedTypes":[],"solidityType":"uint64"}],"emittableEvents":[],"readOnly":false},{"signature":"appId()","name":"appId","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"getCodeHash(address)","name":"getCodeHash","description":"","parameterDecorators":[{"name":"addr","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"ETH()","name":"ETH","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"getInitializationBlock()","name":"getInitializationBlock","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"EVMSCRIPT_REGISTRY_APP()","name":"EVMSCRIPT_REGISTRY_APP","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"transferToVault(address)","name":"transferToVault","description":"Send funds to recovery Vault. This contract should never receive funds, but in case it does, this function allows one to recover them.","parameterDecorators":[{"name":"_token","description":"Token balance to be sent to recovery vault.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"canPerform(address,bytes32,uint256[])","name":"canPerform","description":"","parameterDecorators":[{"name":"_sender","description":"","recommendedTypes":[]},{"name":"_role","description":"","recommendedTypes":[]},{"name":"params","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bool"}],"emittableEvents":[],"readOnly":true},{"signature":"cancelPledge(uint64,uint256)","name":"cancelPledge","description":"Transfers `amount` in `idPledge` back to the `oldPledge` that that sent it there in the first place, a Ctrl-z.","parameterDecorators":[{"name":"idPledge","description":"Id of the pledge that is to be canceled.","recommendedTypes":[]},{"name":"amount","description":"Quantity of ether (in wei) to be transfered to the `oldPledge`.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"removeValidPluginContract(bytes32)","name":"removeValidPluginContract","description":"removes a contract from the plugin whitelist.","parameterDecorators":[{"name":"contractHash","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"initialize(address)","name":"initialize","description":"////////////.","parameterDecorators":[{"name":"_vault","description":"The vault where the ETH backing the pledges is stored.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"addValidPluginContract(bytes32)","name":"addValidPluginContract","description":"Proxy contracts should never be added using this method. Each individual proxy instance should be added by calling `addValidPluginInstance`. add a contract to the plugin whitelist.","parameterDecorators":[{"name":"contractHash","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateDelegate(uint64,address,string,string,uint64)","name":"updateDelegate","description":"Updates a Delegate's info to change the address, name, url, or commitTime, it cannot be used to change a plugin, and it must be called by the current address of the Delegate.","parameterDecorators":[{"name":"idDelegate","description":"The Admin id number used to specify the Delegate.","recommendedTypes":[]},{"name":"newAddr","description":"The new address that represents this Delegate.","recommendedTypes":[]},{"name":"newName","description":"The new name used to identify the Delegate.","recommendedTypes":[]},{"name":"newUrl","description":"The new link to the Delegate's profile often an IPFS hash.","recommendedTypes":[]},{"name":"newCommitTime","description":"Sets the length of time in seconds that this delegate can be vetoed. Whenever this delegate is in a delegate chain the time allowed to veto any event must be greater than or equal to this time.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"mNormalizePledge(uint64[])","name":"mNormalizePledge","description":"`mNormalizePledge` allows for multiple pledges to be normalized efficiently.","parameterDecorators":[{"name":"pledges","description":"An array of pledge IDs.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"kernel()","name":"kernel","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"mTransfer(uint64,uint256[],uint64)","name":"mTransfer","description":"Transfers multiple amounts within multiple Pledges in an efficient single call.","parameterDecorators":[{"name":"idSender","description":"Id of the Admin that is transferring the amounts from all the Pledges; this admin must have permissions to move the value.","recommendedTypes":[]},{"name":"pledgesAmounts","description":"An array of Pledge amounts and the idPledges with which the amounts are associated; these are extrapolated using the D64 bitmask.","recommendedTypes":[]},{"name":"idReceiver","description":"Destination of the `pledesAmounts`, can be a Giver or Project sending to a Giver, a Delegate or a Project; a Delegate sending to another Delegate, or a Delegate pre-commiting it to a Project.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateGiver(uint64,address,string,string,uint64)","name":"updateGiver","description":"Updates a Giver's info to change the address, name, url, or commitTime, it cannot be used to change a plugin, and it must be called by the current address of the Giver.","parameterDecorators":[{"name":"idGiver","description":"This is the Admin id number used to specify the Giver.","recommendedTypes":[]},{"name":"newAddr","description":"The new address that represents this Giver.","recommendedTypes":[]},{"name":"newName","description":"The new name used to identify the Giver.","recommendedTypes":[]},{"name":"newUrl","description":"The new link to the Giver's profile often an IPFS hash.","recommendedTypes":[]},{"name":"newCommitTime","description":"Sets the length of time in seconds the Giver has to veto when the Giver's delegates Pledge funds to a project.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"cancelPayment(uint64,uint256)","name":"cancelPayment","description":"`onlyVault` Cancels a withdraw request, changing the PledgeState from Paying back to Pledged.","parameterDecorators":[{"name":"idPledge","description":"Id of the pledge that's withdraw is to be canceled.","recommendedTypes":[]},{"name":"amount","description":"Quantity of ether (in wei) to be canceled.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getPledgeAdmin(uint64)","name":"getPledgeAdmin","description":"A constant getter to check the details of a specified Admin.","parameterDecorators":[{"name":"idAdmin","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"adminType","description":"","recommendedTypes":[],"solidityType":"uint8"},{"name":"addr","description":"","recommendedTypes":[],"solidityType":"address"},{"name":"name","description":"","recommendedTypes":[],"solidityType":"string"},{"name":"url","description":"","recommendedTypes":[],"solidityType":"string"},{"name":"commitTime","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"parentProject","description":"","recommendedTypes":[],"solidityType":"uint64"},{"name":"canceled","description":"","recommendedTypes":[],"solidityType":"bool"},{"name":"plugin","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"updateProject(uint64,address,string,string,uint64)","name":"updateProject","description":"Updates a Project's info to change the address, name, url, or commitTime, it cannot be used to change a plugin or a parentProject, and it must be called by the current address of the Project.","parameterDecorators":[{"name":"idProject","description":"The Admin id number used to specify the Project.","recommendedTypes":[]},{"name":"newAddr","description":"The new address that represents this Project.","recommendedTypes":[]},{"name":"newName","description":"The new name used to identify the Project.","recommendedTypes":[]},{"name":"newUrl","description":"The new link to the Project's profile often an IPFS hash.","recommendedTypes":[]},{"name":"newCommitTime","description":"Sets the length of time in seconds the Project has to veto when the Project delegates to a Delegate and they pledge those funds to a project.","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"getExecutor(bytes)","name":"getExecutor","description":"","parameterDecorators":[{"name":"_script","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"vault()","name":"vault","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true}]}