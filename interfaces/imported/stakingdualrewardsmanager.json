{
  "schema": "../schema.json",
  "tags": [
    "tokens",
    "swaps",
    "liquidity"
  ],
  "name": "StakingDualRewardsManager",
  "description": "The StakingDualRewardsManager doesn't check balances from the rewards pool. If any transactions fail because of no rewards, the manager should be deactivated. Manage the staking of liquidity pool tokens in Quickswap's dual rewards pool.",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when a token is locked or the lock on a token is extended.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RewardsPoolChanged(address,address)",
      "name": "RewardsPoolChanged",
      "description": "Emitted when a token is locked or the lock on a token is extended.",
      "parameterDecorators": [
        {
          "name": "oldPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newPool",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "addLPTokensToPool()",
      "name": "addLPTokensToPool",
      "description": "Add LP tokens to the staking dual rewards pool. Let the underlying ERC20 token error if not enough allowance.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "changeRewardsPool(address)",
      "name": "changeRewardsPool",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newPool",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "checkUpkeep(bytes)",
      "name": "checkUpkeep",
      "description": "Checks whether the upkeep should be run.",
      "parameterDecorators": [
        {
          "name": "checkData",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "upkeepNeeded",
          "description": "True if the upkeep time has elapsed, false otherwise.",
          "recommendedTypes": [],
          "solidityType": "bool"
        },
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "keeperTimestamp()",
      "name": "keeperTimestamp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "performUpkeep(bytes)",
      "name": "performUpkeep",
      "description": "Perform the upkeep if required. Balances are not checked as LP tokens are assumed to have been deposited and the pool should be generating time-based rewards immediately. If this is not the case, the keeper should be decommissioned.",
      "parameterDecorators": [
        {
          "name": "performData",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rewardsPool()",
      "name": "rewardsPool",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakingDualRewards()",
      "name": "stakingDualRewards",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawLPTokens()",
      "name": "withdrawLPTokens",
      "description": "Withdraw the staked tokens along with any rewards.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}