{"schema":"../schema.json","tags":["oracles","bridges"],"name":"SourceOracle","description":"Extension of BeaconOracle that is intended to be deployed on Mainnet to give financial contracts on non-Mainnet networks the ability to trigger cross-chain price requests to the Mainnet DVM. This contract is responsible for triggering price requests originating from non-Mainnet, and broadcasting resolved price data back to those networks. Technically, this contract is more of a Proxy than an Oracle, because it does not implement the full Oracle interface including the getPrice and requestPrice methods. It's goal is to shuttle price request functionality between L2 and L1.","eventDecorators":[{"signature":"PriceRequestAdded(address,uint8,bytes32,uint256,bytes)","name":"PriceRequestAdded","description":"","parameterDecorators":[{"name":"requester","description":"","recommendedTypes":[],"indexed":true},{"name":"chainID","description":"","recommendedTypes":[],"indexed":true},{"name":"identifier","description":"","recommendedTypes":[],"indexed":true},{"name":"time","description":"","recommendedTypes":[],"indexed":false},{"name":"ancillaryData","description":"","recommendedTypes":[],"indexed":false}]},{"signature":"PushedPrice(address,uint8,bytes32,uint256,bytes,int256)","name":"PushedPrice","description":"","parameterDecorators":[{"name":"pusher","description":"","recommendedTypes":[],"indexed":true},{"name":"chainID","description":"","recommendedTypes":[],"indexed":true},{"name":"identifier","description":"","recommendedTypes":[],"indexed":true},{"name":"time","description":"","recommendedTypes":[],"indexed":false},{"name":"ancillaryData","description":"","recommendedTypes":[],"indexed":false},{"name":"price","description":"","recommendedTypes":[],"indexed":false}]}],"functionDecorators":[{"signature":"currentChainID()","name":"currentChainID","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint8"}],"emittableEvents":[],"readOnly":true},{"signature":"executeRequestPrice(uint8,bytes32,uint256,bytes)","name":"executeRequestPrice","description":"This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method. This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.","parameterDecorators":[{"name":"sinkChainID","description":"","recommendedTypes":[]},{"name":"identifier","description":"","recommendedTypes":[]},{"name":"time","description":"","recommendedTypes":[]},{"name":"ancillaryData","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"finder()","name":"finder","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"formatMetadata(uint8,bytes32,uint256,bytes,int256)","name":"formatMetadata","description":"This helper method is useful for calling Bridge.deposit(). GenericHandler.deposit() expects data to be formatted as: len(data) uint256 bytes 0 - 64 data bytes bytes 64 - END.","parameterDecorators":[{"name":"chainID","description":"","recommendedTypes":[]},{"name":"identifier","description":"","recommendedTypes":[]},{"name":"time","description":"","recommendedTypes":[]},{"name":"ancillaryData","description":"","recommendedTypes":[]},{"name":"price","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"getResourceId()","name":"getResourceId","description":"Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles. More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id.","parameterDecorators":[],"returnDecorators":[{"name":"_0","description":"bytes32 Hash containing this stored chain ID.","recommendedTypes":[],"solidityType":"bytes32"}],"emittableEvents":[],"readOnly":true},{"signature":"publishPrice(uint8,bytes32,uint256,bytes)","name":"publishPrice","description":"This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`. Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.","parameterDecorators":[{"name":"sinkChainID","description":"","recommendedTypes":[]},{"name":"identifier","description":"","recommendedTypes":[]},{"name":"time","description":"","recommendedTypes":[]},{"name":"ancillaryData","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"validateDeposit(uint8,bytes32,uint256,bytes,int256)","name":"validateDeposit","description":"This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method. This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.","parameterDecorators":[{"name":"sinkChainID","description":"","recommendedTypes":[]},{"name":"identifier","description":"","recommendedTypes":[]},{"name":"time","description":"","recommendedTypes":[]},{"name":"ancillaryData","description":"","recommendedTypes":[]},{"name":"price","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":true}]}