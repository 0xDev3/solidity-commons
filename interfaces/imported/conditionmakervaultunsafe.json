{"schema":"../schema.json","tags":["vaults","makerdao"],"name":"ConditionMakerVaultUnsafe","description":"ConditionMakerVaultUnsafe. Condition tracking Maker vault collateralization safety requirements.","eventDecorators":[],"functionDecorators":[{"signature":"getConditionData(uint256,address,bytes,uint256)","name":"getConditionData","description":"Convenience function for off-chain _conditionData encoding. Use the return for your Task's Condition.data field off-chain.","parameterDecorators":[{"name":"_vaultId","description":"","recommendedTypes":[]},{"name":"_priceOracle","description":"","recommendedTypes":[]},{"name":"_oraclePayload","description":"","recommendedTypes":[]},{"name":"_minColRatio","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"The encoded payload for your Task's Condition.data field.","recommendedTypes":[],"solidityType":"bytes"}],"emittableEvents":[],"readOnly":true},{"signature":"isVaultUnsafe(uint256,address,bytes,uint256)","name":"isVaultUnsafe","description":"Specific implementation of this Condition's ok function. The price oracle must return a uint256 WAD (10**18) value.","parameterDecorators":[{"name":"_vaultId","description":"The id of the Maker vault.","recommendedTypes":[]},{"name":"_priceOracle","description":"The price oracle contract to supply the collateral price e.g. Maker's ETH/USD oracle for ETH collateral pricing.","recommendedTypes":[]},{"name":"_oraclePayload","description":"The data for making the staticcall to the oracle's read method e.g. the selector for MakerOracle's read fn.","recommendedTypes":[]},{"name":"_minColRatio","description":"The minimum collateral ratio measured in the price of the collateral as specified by the _priceOracle.","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"OK if the Maker Vault is unsafe, otherwise some error message.","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true},{"signature":"ok(uint256,bytes,uint256)","name":"ok","description":"Standard GelatoCore system function. A standard interface for GelatoCore to read Conditions.","parameterDecorators":[{"name":"param0","description":"","recommendedTypes":[]},{"name":"_conditionData","description":"The data you get from `getConditionData()`.","recommendedTypes":[]},{"name":"param1","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"OK if the Condition is there, else some error message.","recommendedTypes":[],"solidityType":"string"}],"emittableEvents":[],"readOnly":true}]}