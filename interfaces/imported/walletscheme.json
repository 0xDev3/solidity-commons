{
  "schema": "../schema.json",
  "tags": [
    "dao"
  ],
  "name": "WalletScheme",
  "description": "WalletScheme.",
  "eventDecorators": [
    {
      "signature": "ExecutionResults(bytes32,bool[],bytes[])",
      "name": "ExecutionResults",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "_proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_callsSucessResult",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "_callsDataResult",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ProposalStateChange(bytes32,uint256)",
      "name": "ProposalStateChange",
      "description": "An event emitted when a vote has been cast on a proposal.",
      "parameterDecorators": [
        {
          "name": "_proposalId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "_state",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "ANY_ADDRESS()",
      "name": "ANY_ADDRESS",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ANY_SIGNATURE()",
      "name": "ANY_SIGNATURE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ERC20_APPROVE_SIGNATURE()",
      "name": "ERC20_APPROVE_SIGNATURE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "ERC20_TRANSFER_SIGNATURE()",
      "name": "ERC20_TRANSFER_SIGNATURE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SCHEME_TYPE()",
      "name": "SCHEME_TYPE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "SET_MAX_SECONDS_FOR_EXECUTION_SIGNATURE()",
      "name": "SET_MAX_SECONDS_FOR_EXECUTION_SIGNATURE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "avatar()",
      "name": "avatar",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "balanceOfStakingToken(address,bytes32)",
      "name": "balanceOfStakingToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_stakingToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_proposalId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burnReputation(uint256,address,bytes32)",
      "name": "burnReputation",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_proposalId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "controller()",
      "name": "controller",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "doAvatarGenericCalls()",
      "name": "doAvatarGenericCalls",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "erc20TransferOrApproveDecode(bytes)",
      "name": "erc20TransferOrApproveDecode",
      "description": "Decodes abi encoded data with selector for \"transfer(address,uint256)\".",
      "parameterDecorators": [
        {
          "name": "_data",
          "description": "ERC20 address and value encoded data.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "executeProposal(bytes32,int256)",
      "name": "executeProposal",
      "description": "execution of proposals, can only be called by the voting machine in which the vote is held.",
      "parameterDecorators": [
        {
          "name": "_proposalId",
          "description": "the ID of the voting in the voting machine.",
          "recommendedTypes": []
        },
        {
          "name": "_decision",
          "description": "a parameter of the voting result, 1 yes and 2 is no.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getFuncSignature(bytes)",
      "name": "getFuncSignature",
      "description": "Get call data signature.",
      "parameterDecorators": [
        {
          "name": "data",
          "description": "The bytes data of the data to get the signature.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes4"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOrganizationProposal(bytes32)",
      "name": "getOrganizationProposal",
      "description": "Get the information of a proposal by id.",
      "parameterDecorators": [
        {
          "name": "proposalId",
          "description": "the ID of the proposal.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "callData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "state",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "title",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "descriptionHash",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "submittedTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOrganizationProposalByIndex(uint256)",
      "name": "getOrganizationProposalByIndex",
      "description": "Get the information of a proposal by index.",
      "parameterDecorators": [
        {
          "name": "proposalIndex",
          "description": "the index of the proposal in the proposals list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "callData",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        },
        {
          "name": "state",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "title",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "descriptionHash",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "submittedTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOrganizationProposals()",
      "name": "getOrganizationProposals",
      "description": "Get the proposals ids.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOrganizationProposalsLength()",
      "name": "getOrganizationProposalsLength",
      "description": "Get the proposals length.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalReputationSupply(bytes32)",
      "name": "getTotalReputationSupply",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_proposalId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,bool,address,address,string,uint256,uint256)",
      "name": "initialize",
      "description": "initialize.",
      "parameterDecorators": [
        {
          "name": "_avatar",
          "description": "the avatar address.",
          "recommendedTypes": []
        },
        {
          "name": "_votingMachine",
          "description": "the voting machines address to.",
          "recommendedTypes": []
        },
        {
          "name": "_doAvatarGenericCalls",
          "description": "is the scheme will do generic calls form the avatar.",
          "recommendedTypes": []
        },
        {
          "name": "_controller",
          "description": "The controller address.",
          "recommendedTypes": []
        },
        {
          "name": "_permissionRegistry",
          "description": "The address of the permission registry contract.",
          "recommendedTypes": []
        },
        {
          "name": "_schemeName",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxSecondsForExecution",
          "description": "The maximum amount of time in seconds for a proposal without executed since submitted time.",
          "recommendedTypes": []
        },
        {
          "name": "_maxRepPercentageChange",
          "description": "The maximum percentage allowed to be changed in REP total supply after proposal execution.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "maxRepPercentageChange()",
      "name": "maxRepPercentageChange",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxSecondsForExecution()",
      "name": "maxSecondsForExecution",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "mintReputation(uint256,address,bytes32)",
      "name": "mintReputation",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_proposalId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "permissionRegistry()",
      "name": "permissionRegistry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposals(bytes32)",
      "name": "proposals",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "state",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        },
        {
          "name": "title",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "descriptionHash",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        },
        {
          "name": "submittedTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposalsBlockNumber(bytes32)",
      "name": "proposalsBlockNumber",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposalsList(uint256)",
      "name": "proposalsList",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposeCalls(address[],bytes[],uint256[],string,string)",
      "name": "proposeCalls",
      "description": "Propose calls to be executed, the calls have to be allowed by the permission registry.",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "- The addresses to call.",
          "recommendedTypes": []
        },
        {
          "name": "_callData",
          "description": "- The abi encode data for the calls.",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "value(ETH) to transfer with the calls.",
          "recommendedTypes": []
        },
        {
          "name": "_title",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_descriptionHash",
          "description": "proposal description hash.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "reputationOf(address,bytes32)",
      "name": "reputationOf",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_proposalId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "schemeName()",
      "name": "schemeName",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setMaxSecondsForExecution(uint256)",
      "name": "setMaxSecondsForExecution",
      "description": "Set the max amount of seconds that a proposal has to be executed, only callable from the avatar address.",
      "parameterDecorators": [
        {
          "name": "_maxSecondsForExecution",
          "description": "New max proposal time in seconds to be used.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakingTokenTransfer(address,address,uint256,bytes32)",
      "name": "stakingTokenTransfer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_stakingToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_beneficiary",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_proposalId",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "votingMachine()",
      "name": "votingMachine",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}