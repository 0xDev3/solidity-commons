{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "MiniChefV21",
  "description": "This is a modification of MiniChefV2, a SYN distribution contract, that doesn't need to have minting rights for SYN token. List of modifications: 1. It is no longer possible to add the same LP token twice. 2. Pools are updated before the new one is added. 3. IRewarder is now tracking \"old user LP token balance in MiniChef\" instead of \"new user LP token balance in MiniChef\" [see deposit() for reasoning].",
  "eventDecorators": [
    {
      "signature": "Deposit(address,uint256,uint256,address)",
      "name": "Deposit",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "EmergencyWithdraw(address,uint256,uint256,address)",
      "name": "EmergencyWithdraw",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Harvest(address,uint256,uint256)",
      "name": "Harvest",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LogPoolAddition(uint256,uint256,address,address)",
      "name": "LogPoolAddition",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allocPoint",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lpToken",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "rewarder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "LogSetPool(uint256,uint256,address,bool)",
      "name": "LogSetPool",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "allocPoint",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "rewarder",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "overwrite",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LogSynapsePerSecond(uint256)",
      "name": "LogSynapsePerSecond",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "synapsePerSecond",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "LogUpdatePool(uint256,uint64,uint256,uint256)",
      "name": "LogUpdatePool",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "lastRewardTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "lpSupply",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "accSynapsePerShare",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Withdraw(address,uint256,uint256,address)",
      "name": "Withdraw",
      "description": "Events ///.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "pid",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "SYNAPSE()",
      "name": "SYNAPSE",
      "description": "Address of SYNAPSE contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "add(uint256,address,address)",
      "name": "add",
      "description": "Add a new LP to the pool. Can only be called by the owner. Pools are updated before adding a new one, so the old rewards don't get messed up.",
      "parameterDecorators": [
        {
          "name": "allocPoint",
          "description": "AP of the new pool.",
          "recommendedTypes": []
        },
        {
          "name": "_lpToken",
          "description": "Address of the LP ERC-20 token.",
          "recommendedTypes": []
        },
        {
          "name": "_rewarder",
          "description": "Address of the rewarder delegate.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "addedTokens(address)",
      "name": "addedTokens",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "batch(bytes[],bool)",
      "name": "batch",
      "description": "",
      "parameterDecorators": [
        {
          "name": "calls",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "revertOnFail",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "successes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool[]"
        },
        {
          "name": "results",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "claimOwnership()",
      "name": "claimOwnership",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deposit(uint256,uint256,address)",
      "name": "deposit",
      "description": "Deposit LP tokens to MCV2 for SYNAPSE allocation.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "LP token amount to deposit.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "The receiver of `amount` deposit benefit.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "emergencyWithdraw(uint256,address)",
      "name": "emergencyWithdraw",
      "description": "Withdraw without caring about rewards. EMERGENCY ONLY.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Receiver of the LP tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "harvest(uint256,address)",
      "name": "harvest",
      "description": "Harvest proceeds for transaction sender to `to`.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Receiver of SYNAPSE rewards.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "lpToken(uint256)",
      "name": "lpToken",
      "description": "Address of the LP token for each MCV2 pool.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "massUpdatePools(uint256[])",
      "name": "massUpdatePools",
      "description": "Update reward variables for all pools. Be careful of gas spending!.",
      "parameterDecorators": [
        {
          "name": "pids",
          "description": "Pool IDs of all to be updated. Make sure to update all active pools.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingOwner()",
      "name": "pendingOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingSynapse(uint256,address)",
      "name": "pendingSynapse",
      "description": "View function to see pending SYNAPSE on frontend.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "_user",
          "description": "Address of user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "pending",
          "description": "SYNAPSE reward for a given user.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)",
      "name": "permitToken",
      "description": "",
      "parameterDecorators": [
        {
          "name": "token",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "from",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "deadline",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "v",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "r",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "s",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "poolInfo(uint256)",
      "name": "poolInfo",
      "description": "Info of each MCV2 pool.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "accSynapsePerShare",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        },
        {
          "name": "lastRewardTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        },
        {
          "name": "allocPoint",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint64"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "poolLength()",
      "name": "poolLength",
      "description": "Returns the number of MCV2 pools.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "pools",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rewarder(uint256)",
      "name": "rewarder",
      "description": "Address of each `IRewarder` contract in MCV2.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "set(uint256,uint256,address,bool)",
      "name": "set",
      "description": "Update the given pool's SYNAPSE allocation point and `IRewarder` contract. Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "_allocPoint",
          "description": "New AP of the pool.",
          "recommendedTypes": []
        },
        {
          "name": "_rewarder",
          "description": "Address of the rewarder delegate.",
          "recommendedTypes": []
        },
        {
          "name": "overwrite",
          "description": "True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRewarder(uint256,address)",
      "name": "setRewarder",
      "description": "Update the given pool's `IRewarder` contract. Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "_rewarder",
          "description": "Address of the rewarder delegate.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSynapsePerSecond(uint256)",
      "name": "setSynapsePerSecond",
      "description": "Sets the synapse per second to be distributed. Can only be called by the owner.",
      "parameterDecorators": [
        {
          "name": "_synapsePerSecond",
          "description": "The amount of Synapse to be distributed per second.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "synapsePerSecond()",
      "name": "synapsePerSecond",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalAllocPoint()",
      "name": "totalAllocPoint",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalPendingSynapse()",
      "name": "totalPendingSynapse",
      "description": "Total amount of unpaid SYNAPSE rewards.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address,bool,bool)",
      "name": "transferOwnership",
      "description": "",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "direct",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "renounce",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updatePool(uint256)",
      "name": "updatePool",
      "description": "Update reward variables of the given pool.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "pool",
          "description": "Returns the pool that was updated.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "accSynapsePerShare",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint128"
            },
            {
              "name": "lastRewardTime",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint64"
            },
            {
              "name": "allocPoint",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint64"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "userInfo(uint256,address)",
      "name": "userInfo",
      "description": "Info of each user that stakes LP tokens.",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "rewardDebt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "withdraw(uint256,uint256,address)",
      "name": "withdraw",
      "description": "Withdraw LP tokens from MCV2.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "LP token amount to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Receiver of the LP tokens.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdrawAndHarvest(uint256,uint256,address)",
      "name": "withdrawAndHarvest",
      "description": "Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.",
      "parameterDecorators": [
        {
          "name": "pid",
          "description": "The index of the pool. See `poolInfo`.",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "LP token amount to withdraw.",
          "recommendedTypes": []
        },
        {
          "name": "to",
          "description": "Receiver of the LP tokens and SYNAPSE rewards.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}