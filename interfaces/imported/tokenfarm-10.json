{
  "schema": "../schema.json",
  "tags": [
    "tokens"
  ],
  "name": "TokenFarm",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Approval(address,address,uint256)",
      "name": "Approval",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "access",
          "description": "TRUE if the Watcher was given permissions, FALSE if permissions were removed.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "watcher",
          "description": "the address of the Watcher.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Claim(uint256,uint256,bytes20,address,address)",
      "name": "Claim",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "data0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "btcAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "claimToAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "referrerAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ClaimAssist(uint256,uint256,uint256,address)",
      "name": "ClaimAssist",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "data0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data2",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "senderAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "DailyDataUpdate(uint256,address)",
      "name": "DailyDataUpdate",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "data0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "updaterAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ShareRateChange(uint256,uint40)",
      "name": "ShareRateChange",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "data0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "stakeId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "StakeEnd(uint256,uint256,address,uint40)",
      "name": "StakeEnd",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "data0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "stakerAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "stakeId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "StakeGoodAccounting(uint256,uint256,address,uint40,address)",
      "name": "StakeGoodAccounting",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "data0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "data1",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "stakerAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "stakeId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "senderAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "StakeStart(uint256,address,uint40)",
      "name": "StakeStart",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "access",
          "description": "TRUE if the Watcher was given permissions, FALSE if permissions were removed.",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "watcher",
          "description": "the address of the Watcher.",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Transfer(address,address,uint256)",
      "name": "Transfer",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "access",
          "description": "TRUE if the Watcher was given permissions, FALSE if permissions were removed.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "domain",
          "description": "the remote domain of the Home contract for the Replica.",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "watcher",
          "description": "the address of the Watcher.",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "XfLobbyEnter(uint256,address,uint256,address)",
      "name": "XfLobbyEnter",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "data0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "memberAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "entryId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "referrerAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "XfLobbyExit(uint256,address,uint256,address)",
      "name": "XfLobbyExit",
      "description": "Event for token purchase logging.",
      "parameterDecorators": [
        {
          "name": "data0",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "memberAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "entryId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "referrerAddr",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "allocatedSupply()",
      "name": "allocatedSupply",
      "description": "PUBLIC FACING: ERC20 totalSupply() is the circulating supply and does not include any staked Hearts. allocatedSupply() includes both.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "approve(address,uint256)",
      "name": "approve",
      "description": "See {IERC20-approve}. * Requirements: * - `spender` cannot be the zero address.",
      "parameterDecorators": [
        {
          "name": "spender",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "balanceOf(address)",
      "name": "balanceOf",
      "description": "See {IERC20-_balances}.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "btcAddressClaims(bytes20)",
      "name": "btcAddressClaims",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burnCounter()",
      "name": "burnCounter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burnInfo(address)",
      "name": "burnInfo",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "burnPct",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "burnAmt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastTXTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastLTTXtime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastSTTXtime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "lastTurnTime",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burn_Inactive_Address(address)",
      "name": "burn_Inactive_Address",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "boo",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "burn_Inactive_Contract(address)",
      "name": "burn_Inactive_Contract",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_address",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "boo",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "burn_amt()",
      "name": "burn_amt",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "burn_pct()",
      "name": "burn_pct",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "currentDay()",
      "name": "currentDay",
      "description": "PUBLIC FACING: External helper for the current day number since launch time.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dailyData(uint256)",
      "name": "dailyData",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "dayPayoutTotal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint72"
        },
        {
          "name": "dayStakeSharesTotal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint72"
        },
        {
          "name": "dayUnclaimedSatoshisTotal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint56"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dailyDataRange(uint256,uint256)",
      "name": "dailyDataRange",
      "description": "PUBLIC FACING: External helper to return multiple values of daily data with a single call. Ugly implementation due to limitations of the standard ABI encoder.",
      "parameterDecorators": [
        {
          "name": "beginDay",
          "description": "First day of data range.",
          "recommendedTypes": []
        },
        {
          "name": "endDay",
          "description": "Last day (non-inclusive) of data range.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "list",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "dailyDataUpdate(uint256)",
      "name": "dailyDataUpdate",
      "description": "PUBLIC FACING: Optionally update daily data for a smaller range to reduce gas cost for a subsequent operation.",
      "parameterDecorators": [
        {
          "name": "beforeDay",
          "description": "Only update days before this day number (optional; 0 for current day).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "decimals()",
      "name": "decimals",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "decreaseAllowance(address,uint256)",
      "name": "decreaseAllowance",
      "description": "Atomically decreases the allowance granted to `spender` by the caller. * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. * Emits an {Approval} event indicating the updated allowance. * Requirements: * - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.",
      "parameterDecorators": [
        {
          "name": "spender",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "subtractedValue",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [
        "Approval(address,address,uint256)"
      ],
      "readOnly": false
    },
    {
      "signature": "globalInfo()",
      "name": "globalInfo",
      "description": "PUBLIC FACING: External helper to return most global info with a single call. Ugly implementation due to limitations of the standard ABI encoder.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[13]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "globals()",
      "name": "globals",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "lockedHeartsTotal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint72"
        },
        {
          "name": "nextStakeSharesTotal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint72"
        },
        {
          "name": "shareRate",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint40"
        },
        {
          "name": "stakePenaltyTotal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint72"
        },
        {
          "name": "dailyDataCount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        },
        {
          "name": "stakeSharesTotal",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint72"
        },
        {
          "name": "latestStakeId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint40"
        },
        {
          "name": "claimStats",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint128"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "inactive_burn()",
      "name": "inactive_burn",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "increaseAllowance(address,uint256)",
      "name": "increaseAllowance",
      "description": "Atomically increases the allowance granted to `spender` by the caller. * This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. * Emits an {Approval} event indicating the updated allowance. * Requirements: * - `spender` cannot be the zero address.",
      "parameterDecorators": [
        {
          "name": "spender",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "addedValue",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [
        "Approval(address,address,uint256)"
      ],
      "readOnly": false
    },
    {
      "signature": "isBurning()",
      "name": "isBurning",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastLT_TXtime(address)",
      "name": "lastLT_TXtime",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastST_TXtime(address)",
      "name": "lastST_TXtime",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lastTXtime(address)",
      "name": "lastTXtime",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "manager()",
      "name": "manager",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "manager_killswitch()",
      "name": "manager_killswitch",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "boo",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "name()",
      "name": "name",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "onepct()",
      "name": "onepct",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pctCalc_minusScale(uint256,uint256)",
      "name": "pctCalc_minusScale",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_value",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_pct",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "item",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setUniswapFactoryAndRouter(address,address)",
      "name": "setUniswapFactoryAndRouter",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_uniswapFactory",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_uniswapRouter",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "boo",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakeCount(address)",
      "name": "stakeCount",
      "description": "PUBLIC FACING: Return the current stake count for a staker address.",
      "parameterDecorators": [
        {
          "name": "stakerAddr",
          "description": "Address of staker.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakeEnd(uint256,uint40)",
      "name": "stakeEnd",
      "description": "PUBLIC FACING: Closes a stake. The order of the stake list can change so a stake id is used to reject stale indexes.",
      "parameterDecorators": [
        {
          "name": "stakeIndex",
          "description": "Index of stake within stake list.",
          "recommendedTypes": []
        },
        {
          "name": "stakeIdParam",
          "description": "The stake's id.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakeGoodAccounting(address,uint256,uint40)",
      "name": "stakeGoodAccounting",
      "description": "PUBLIC FACING: Unlocks a completed stake, distributing the proceeds of any penalty immediately. The staker must still call stakeEnd() to retrieve their stake return (if any).",
      "parameterDecorators": [
        {
          "name": "stakerAddr",
          "description": "Address of staker.",
          "recommendedTypes": []
        },
        {
          "name": "stakeIndex",
          "description": "Index of stake within stake list.",
          "recommendedTypes": []
        },
        {
          "name": "stakeIdParam",
          "description": "The stake's id.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "stakeLists(address,uint256)",
      "name": "stakeLists",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "stakeId",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint40"
        },
        {
          "name": "stakedHearts",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint72"
        },
        {
          "name": "stakeShares",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint72"
        },
        {
          "name": "lockedDay",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        },
        {
          "name": "stakedDays",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        },
        {
          "name": "unlockedDay",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        },
        {
          "name": "isAutoStake",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "stakeStart(uint256,uint256)",
      "name": "stakeStart",
      "description": "PUBLIC FACING: Open a stake.",
      "parameterDecorators": [
        {
          "name": "newStakedHearts",
          "description": "Number of Hearts to stake.",
          "recommendedTypes": []
        },
        {
          "name": "newStakedDays",
          "description": "Number of days to stake.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "symbol()",
      "name": "symbol",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "string"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalSupply()",
      "name": "totalSupply",
      "description": "See {IERC20-totalSupply}.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "total_supply()",
      "name": "total_supply",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transfer(address,uint256)",
      "name": "transfer",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_to",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_value",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amt",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferFrom(address,address,uint256)",
      "name": "transferFrom",
      "description": "See {IERC20-transferFrom}. * Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; * Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for `sender`'s tokens of at least `amount`.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "recipient",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [
        "Approval(address,address,uint256)"
      ],
      "readOnly": false
    },
    {
      "signature": "turn()",
      "name": "turn",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tx_amt()",
      "name": "tx_amt",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "tx_n()",
      "name": "tx_n",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "uniswap_factory()",
      "name": "uniswap_factory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "uniswap_router()",
      "name": "uniswap_router",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "xfLobby(uint256)",
      "name": "xfLobby",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "xfLobbyEnter(address)",
      "name": "xfLobbyEnter",
      "description": "PUBLIC FACING: Enter the tranform lobby for the current round.",
      "parameterDecorators": [
        {
          "name": "referrerAddr",
          "description": "Eth address of referring user (optional; 0x0 for no referrer).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "xfLobbyEntry(address,uint256)",
      "name": "xfLobbyEntry",
      "description": "PUBLIC FACING: Return a current lobby member queue entry. Only needed due to limitations of the standard ABI encoder.",
      "parameterDecorators": [
        {
          "name": "memberAddr",
          "description": "Eth address of the lobby member.",
          "recommendedTypes": []
        },
        {
          "name": "entryId",
          "description": "49 bit compound value. Top 9 bits: enterDay, Bottom 40 bits: entryIndex.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "rawAmount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "referrerAddr",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "xfLobbyExit(uint256,uint256)",
      "name": "xfLobbyExit",
      "description": "PUBLIC FACING: Leave the transform lobby after the round is complete.",
      "parameterDecorators": [
        {
          "name": "enterDay",
          "description": "Day number when the member entered.",
          "recommendedTypes": []
        },
        {
          "name": "count",
          "description": "Number of queued-enters to exit (optional; 0 for all).",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "xfLobbyFlush()",
      "name": "xfLobbyFlush",
      "description": "PUBLIC FACING: Release any value that has been sent to the contract.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "xfLobbyMembers(uint256,address)",
      "name": "xfLobbyMembers",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "headIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint40"
        },
        {
          "name": "tailIndex",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint40"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "xfLobbyPendingDays(address)",
      "name": "xfLobbyPendingDays",
      "description": "PUBLIC FACING: Return the lobby days that a user is in with a single call.",
      "parameterDecorators": [
        {
          "name": "memberAddr",
          "description": "Eth address of the user.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "words",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[2]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "xfLobbyRange(uint256,uint256)",
      "name": "xfLobbyRange",
      "description": "PUBLIC FACING: External helper to return multiple values of xfLobby[] with a single call.",
      "parameterDecorators": [
        {
          "name": "beginDay",
          "description": "First day of data range.",
          "recommendedTypes": []
        },
        {
          "name": "endDay",
          "description": "Last day (non-inclusive) of data range.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "list",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    }
  ]
}