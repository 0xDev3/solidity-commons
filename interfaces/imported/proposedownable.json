{
  "schema": "../schema.json",
  "tags": [],
  "name": "ProposedOwnableFacet",
  "description": "ProposedOwnable. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.The majority of this code was taken from the openzeppelin Ownable contract.",
  "eventDecorators": [
    {
      "signature": "AssetWhitelistRemovalProposed(uint256)",
      "name": "AssetWhitelistRemovalProposed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AssetWhitelistRemoved(bool)",
      "name": "AssetWhitelistRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "renounced",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AssignRoleAdmin(address)",
      "name": "AssignRoleAdmin",
      "description": "",
      "parameterDecorators": [
        {
          "name": "admin",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AssignRoleRouter(address)",
      "name": "AssignRoleRouter",
      "description": "",
      "parameterDecorators": [
        {
          "name": "router",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "AssignRoleWatcher(address)",
      "name": "AssignRoleWatcher",
      "description": "",
      "parameterDecorators": [
        {
          "name": "watcher",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipProposed(address)",
      "name": "OwnershipProposed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "proposedOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused()",
      "name": "Paused",
      "description": "",
      "parameterDecorators": []
    },
    {
      "signature": "RevokeRole(address,uint8)",
      "name": "RevokeRole",
      "description": "",
      "parameterDecorators": [
        {
          "name": "revokedAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "revokedRole",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RouterWhitelistRemovalProposed(uint256)",
      "name": "RouterWhitelistRemovalProposed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "RouterWhitelistRemoved(bool)",
      "name": "RouterWhitelistRemoved",
      "description": "",
      "parameterDecorators": [
        {
          "name": "renounced",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused()",
      "name": "Unpaused",
      "description": "",
      "parameterDecorators": []
    }
  ],
  "functionDecorators": [
    {
      "signature": "acceptProposedOwner()",
      "name": "acceptProposedOwner",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the proposed owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "assetWhitelistRemoved()",
      "name": "assetWhitelistRemoved",
      "description": "Returns if the asset whitelist is removed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assetWhitelistTimestamp()",
      "name": "assetWhitelistTimestamp",
      "description": "Returns the timestamp when asset whitelist was last proposed to be removed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "assignRoleAdmin(address)",
      "name": "assignRoleAdmin",
      "description": "Use to assign an address Admin role Address with Admin role has permission to all else of Router & Watcher role Can only be called by Owner or Role.Admin. requested address will be whitelisted as Role.Admin under mapping roles.",
      "parameterDecorators": [
        {
          "name": "_admin",
          "description": "- The address to beassigned as Role.Admin under roles.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "assignRoleRouter(address)",
      "name": "assignRoleRouter",
      "description": "Use to assign an address Router role Address with Router has permission to add new router Can only be called by Owner or Role.Router. requested address will be whitelisted as Role.Router under mapping roles.",
      "parameterDecorators": [
        {
          "name": "_router",
          "description": "- The address to be assigned as Role.Router under roles.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "assignRoleWatcher(address)",
      "name": "assignRoleWatcher",
      "description": "Use to assign an address Watcher role Address with Watcher role has permission to pause Can only be called by Owner or Role.Admin. requested address will be whitelisted as Role.Watcher under mapping roles.",
      "parameterDecorators": [
        {
          "name": "_watcher",
          "description": "- The address to be assigned as Role.Watcher under roles.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "delay()",
      "name": "delay",
      "description": "Returns the delay period before a new owner can be accepted.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pause()",
      "name": "pause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposeAssetWhitelistRemoval()",
      "name": "proposeAssetWhitelistRemoval",
      "description": "Indicates if the ownership of the asset whitelist has been renounced.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposeNewOwner(address)",
      "name": "proposeNewOwner",
      "description": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process.",
      "parameterDecorators": [
        {
          "name": "newlyProposed",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposeRouterWhitelistRemoval()",
      "name": "proposeRouterWhitelistRemoval",
      "description": "Indicates if the ownership of the router whitelist has been renounced.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "proposed()",
      "name": "proposed",
      "description": "Returns the address of the proposed owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "proposedTimestamp()",
      "name": "proposedTimestamp",
      "description": "Returns the address of the proposed owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "queryRole(address)",
      "name": "queryRole",
      "description": "Returns the Role of the address. returns uint value of representing enum value of Role.",
      "parameterDecorators": [
        {
          "name": "_role",
          "description": "The address for which Role need to be queried.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint8"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "removeAssetWhitelist()",
      "name": "removeAssetWhitelist",
      "description": "Indicates if the ownership of the asset whitelist has been renounced.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "removeRouterWhitelist()",
      "name": "removeRouterWhitelist",
      "description": "Indicates if the ownership of the asset whitelist has been renounced.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Renounces ownership of the contract after a delay.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounced()",
      "name": "renounced",
      "description": "Indicates if the ownership has been renounced() by checking if current owner is address(0).",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "revokeRole(address)",
      "name": "revokeRole",
      "description": "Use to revoke the Role of an address to None Can only be called by Owner or Role.Admin. input address will be assingned default value i.e Role.None under mapping roles.",
      "parameterDecorators": [
        {
          "name": "_revoke",
          "description": "- The address to be revoked from it's Role.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "routerWhitelistRemoved()",
      "name": "routerWhitelistRemoved",
      "description": "Returns if the router whitelist is removed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "routerWhitelistTimestamp()",
      "name": "routerWhitelistTimestamp",
      "description": "Returns the timestamp when router whitelist was last proposed to be removed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "unpause()",
      "name": "unpause",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}