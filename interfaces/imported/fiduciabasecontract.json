{
  "schema": "../schema.json",
  "tags": [],
  "name": "FiduciaBaseContract",
  "description": "FiduciaBaseContract. This contract handles the signing process between an institution (the owner of this smart contract) and its customers.",
  "eventDecorators": [
    {
      "signature": "ContractCreation(address,uint256)",
      "name": "ContractCreation",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "owner",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "timestamp",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DocumentSignatureRevoked(address,bytes32,uint8,uint8)",
      "name": "DocumentSignatureRevoked",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "customer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ipfsHashDigest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ipfsHashfunction",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ipfsHashDigestSize",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DocumentSigned(address,bytes32,uint8,uint8)",
      "name": "DocumentSigned",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "customer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ipfsHashDigest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ipfsHashfunction",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ipfsHashDigestSize",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "DocumentUpdated(address,bytes32,bytes32,uint8,uint8,bytes16)",
      "name": "DocumentUpdated",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "customer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "oldIpfsHashDigest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newIpfsHashDigest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newIpfsHashfunction",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "newIpfsHashDigestSize",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "encryptedSecret",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "NewDocumentCreated(address,bytes32,uint8,uint8,bool,uint256,bytes16)",
      "name": "NewDocumentCreated",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "customer",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ipfsHashDigest",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ipfsHashfunction",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "ipfsHashDigestSize",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "allowedToRevoke",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "revocationTime",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "encryptedSecret",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UserCreated(address)",
      "name": "UserCreated",
      "description": "Token transfer event.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "createCustomer(address)",
      "name": "createCustomer",
      "description": "Creates and activates new customer assosiated with given address. requires non-existence of customer and function call by contract owner.",
      "parameterDecorators": [
        {
          "name": "customer",
          "description": "PK of address, given by owner of this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "createDocument(address,bytes32,uint8,uint8,uint8,bytes16,bool,uint256)",
      "name": "createDocument",
      "description": "Create new document handled by this smart contract. The three ipfs hash attributes are being stored in Multihash struct. uint8 documentType NOT being used at the moment.",
      "parameterDecorators": [
        {
          "name": "customer",
          "description": "This address is allowed to sign the contract.",
          "recommendedTypes": []
        },
        {
          "name": "ipfsHashDigest",
          "description": "Hash Digest of ipfs multihash.",
          "recommendedTypes": []
        },
        {
          "name": "ifpsHashFunction",
          "description": "Hash function used for ipfs hash.",
          "recommendedTypes": []
        },
        {
          "name": "ipfsDigestSize",
          "description": "Length of ipfs hash Digest.",
          "recommendedTypes": []
        },
        {
          "name": "documentType",
          "description": "This defines what type of document is given. Default = 0.",
          "recommendedTypes": []
        },
        {
          "name": "encryptedSecret",
          "description": "Secret that is necessary to decrypt this document. This secret is encrypted with the pk of the customer.",
          "recommendedTypes": []
        },
        {
          "name": "allowRevocation",
          "description": "If true, revocation of signature is possible until revocation frame reached.",
          "recommendedTypes": []
        },
        {
          "name": "timeToRevoke",
          "description": "This defines (in seconds) how long it is possible to revoke the signature after signing the document.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "deactivateCustomer(address)",
      "name": "deactivateCustomer",
      "description": "Deactivates customer assosiated with given address. Customer not able to perform any actions on this contract after this.",
      "parameterDecorators": [
        {
          "name": "customer",
          "description": "PK of address, given by owner of this contract.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeSignature(bytes32)",
      "name": "revokeSignature",
      "description": "Revoke signature of document. Revocation only possible in revocation timeframe. caller needs to be active customer and the ipfs hash of document is linked to him/her.",
      "parameterDecorators": [
        {
          "name": "ipfsHashDigest",
          "description": "Digits of Hash of the document used for map lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "signDocument(bytes32)",
      "name": "signDocument",
      "description": "Sign already existing document. caller needs to be active customer and the ipfs hash of document is linked to him/her.",
      "parameterDecorators": [
        {
          "name": "ipfsHashDigest",
          "description": "Digits of Hash of the document used for map lookup.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "updateDocument(address,bytes32,uint8,uint8,bytes32)",
      "name": "updateDocument",
      "description": "update document, e.g. for a new version. this will add the new hash to the old document to create a linked list. The last element of the list is the newest version of the document.",
      "parameterDecorators": [
        {
          "name": "customer",
          "description": "The customer the document is linked to.",
          "recommendedTypes": []
        },
        {
          "name": "newIpfsHashDigest",
          "description": "Hash Digest of ipfs multihash.",
          "recommendedTypes": []
        },
        {
          "name": "newIfpsHashFunction",
          "description": "Hash function used for ipfs hash.",
          "recommendedTypes": []
        },
        {
          "name": "newIpfsDigestSize",
          "description": "Length of ipfs hash Digest.",
          "recommendedTypes": []
        },
        {
          "name": "oldIpfsHashDigest",
          "description": "One of the earlier versions of the document. It doesnt matter which.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}