{
  "schema": "../schema.json",
  "tags": [],
  "name": "SakeILO",
  "description": "",
  "eventDecorators": [
    {
      "signature": "Contribution(address,uint256)",
      "name": "Contribution",
      "description": "Emitted when implementation is changed.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when implementation is changed.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "Paused(address)",
      "name": "Paused",
      "description": "Emitted when implementation is changed.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Refund(address,uint256)",
      "name": "Refund",
      "description": "Emitted when implementation is changed.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "UnlockLP(address,uint256,uint256)",
      "name": "UnlockLP",
      "description": "Emitted when implementation is changed.",
      "parameterDecorators": [
        {
          "name": "user",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "lpAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "feeAmount",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "Unpaused(address)",
      "name": "Unpaused",
      "description": "Emitted when implementation is changed.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "SAKE()",
      "name": "SAKE",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "WETH()",
      "name": "WETH",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "addLiquidityToSakeSwap()",
      "name": "addLiquidityToSakeSwap",
      "description": "when fundraising is succeed, add liquidity to sakeswap Only callable by the Owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "contributeETH()",
      "name": "contributeETH",
      "description": "investor contribute eth to contract Emits a {Contribution} event. msg.value is amount to contribute.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [
        "Contribution(address,uint256)"
      ],
      "readOnly": false
    },
    {
      "signature": "contributeToken(uint256)",
      "name": "contributeToken",
      "description": "investor contribute eth to contract investor should appove token to contract in advance Emits a {Contribution} event. Parameters: - `amount` is amount to contribute.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [
        "Contribution(address,uint256)"
      ],
      "readOnly": false
    },
    {
      "signature": "contributionToken()",
      "name": "contributionToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "factory()",
      "name": "factory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "feeAddress()",
      "name": "feeAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fundraisingDurationDays()",
      "name": "fundraisingDurationDays",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fundraisingStartTimestamp()",
      "name": "fundraisingStartTimestamp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "fundraisingStarted()",
      "name": "fundraisingStarted",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getUnlockLPAmount(bool)",
      "name": "getUnlockLPAmount",
      "description": "Get LP amount to unlock Emits a {UnlockLP} event. Parameters: - `isInvestor` whether caller is project party or investor Returns: - `availableTimes` is frequency times to unlock - `amount` is lp amount to unlock.",
      "parameterDecorators": [
        {
          "name": "isInvestor",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "availableTimes",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "amount",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [
        "UnlockLP(address,uint256,uint256)"
      ],
      "readOnly": true
    },
    {
      "signature": "initialize(address,address,uint256,uint256,uint256,uint256,address)",
      "name": "initialize",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_projectPartyToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_contributionToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_fundraisingDurationDays",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_totalProjectPartyFund",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxPoolContribution",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minPoolContribution",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "investorContributed(address)",
      "name": "investorContributed",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "investorRefund()",
      "name": "investorRefund",
      "description": "if fundraising is fail, refund investor's token.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "investorUnlockLP()",
      "name": "investorUnlockLP",
      "description": "after investor to sakeswap, investor unlock LP periodicity.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "investorUnlockedLPTimes(address)",
      "name": "investorUnlockedLPTimes",
      "description": "",
      "parameterDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isFundraisingFinished()",
      "name": "isFundraisingFinished",
      "description": "whether fundraising is finished.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isFundraisingStarted()",
      "name": "isFundraisingStarted",
      "description": "whether fundraising is started.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isFundraisingSucceed()",
      "name": "isFundraisingSucceed",
      "description": "whether fundraising is succeed.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lpLockPeriod()",
      "name": "lpLockPeriod",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lpUnlockFeeRatio()",
      "name": "lpUnlockFeeRatio",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lpUnlockFrequency()",
      "name": "lpUnlockFrequency",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "lpUnlockStartTimestamp()",
      "name": "lpUnlockStartTimestamp",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxInvestorContribution()",
      "name": "maxInvestorContribution",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "maxPoolContribution()",
      "name": "maxPoolContribution",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minInvestorContribution()",
      "name": "minInvestorContribution",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minPoolContribution()",
      "name": "minPoolContribution",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minSakeHolder()",
      "name": "minSakeHolder",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "paused()",
      "name": "paused",
      "description": "Returns true if the contract is paused, and false otherwise.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "perUnlockLP()",
      "name": "perUnlockLP",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "projectPartUnlockedLPTimes()",
      "name": "projectPartUnlockedLPTimes",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "projectPartyAddress()",
      "name": "projectPartyAddress",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "projectPartyFund()",
      "name": "projectPartyFund",
      "description": "project party contribute token to contract project party should appove token to contract in advance project party must call this function before fundraising begin Emits a {Contribution} event.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [
        "Contribution(address,uint256)"
      ],
      "readOnly": false
    },
    {
      "signature": "projectPartyFundDone()",
      "name": "projectPartyFundDone",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "projectPartyRefund()",
      "name": "projectPartyRefund",
      "description": "if fundraising is fail, refund project party's token.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "projectPartyToken()",
      "name": "projectPartyToken",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "projectPartyUnlockLP()",
      "name": "projectPartyUnlockLP",
      "description": "after add liquidity to sakeswap, project party unlock LP periodicity.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "sakeFactory()",
      "name": "sakeFactory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "sakeRouter()",
      "name": "sakeRouter",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setParams(uint256,uint256,uint256,uint256,uint256,address,uint256,uint256)",
      "name": "setParams",
      "description": "",
      "parameterDecorators": [
        {
          "name": "minInContribution",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "maxInContribution",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "lockPeriod",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "unlockFrequency",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "feeRatio",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "feeTo",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "minSake",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "startTimestamp",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPaused(bool)",
      "name": "setPaused",
      "description": "",
      "parameterDecorators": [
        {
          "name": "bPause",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setPoolParams(uint256,uint256,uint256,uint256)",
      "name": "setPoolParams",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_fundraisingDurationDays",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_totalProjectPartyFund",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxPoolContribution",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_minPoolContribution",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setSakeAddress(address,address,address,address)",
      "name": "setSakeAddress",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_sakeRouter",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_sakeFactory",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_weth",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_sake",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "totalInvestorContributed()",
      "name": "totalInvestorContributed",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalLPCreated()",
      "name": "totalLPCreated",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "totalProjectPartyFund()",
      "name": "totalProjectPartyFund",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}