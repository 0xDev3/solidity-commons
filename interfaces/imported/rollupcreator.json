{
  "schema": "../schema.json",
  "tags": [],
  "name": "RollupCreator",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Event `voter` the address that will cast votes weighted by the number of tokens staked for `voter` `staker` the address staking for `voter` - tokens are transferred from & returned to `staker` `proxy` is the Staking Proxy contract that is approved by `staker` to perform the token transfer `amount` is the value of tokens to be staked*.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RollupCreated(address,address,address)",
      "name": "RollupCreated",
      "description": "Event `voter` the address that will cast votes weighted by the number of tokens staked for `voter` `staker` the address staking for `voter` - tokens are transferred from & returned to `staker` `proxy` is the Staking Proxy contract that is approved by `staker` to perform the token transfer `amount` is the value of tokens to be staked*.",
      "parameterDecorators": [
        {
          "name": "rollupAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "inboxAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "adminProxy",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "TemplatesUpdated()",
      "name": "TemplatesUpdated",
      "description": "Event `voter` the address that will cast votes weighted by the number of tokens staked for `voter` `staker` the address staking for `voter` - tokens are transferred from & returned to `staker` `proxy` is the Staking Proxy contract that is approved by `staker` to perform the token transfer `amount` is the value of tokens to be staked*.",
      "parameterDecorators": []
    }
  ],
  "functionDecorators": [
    {
      "signature": "bridgeCreator()",
      "name": "bridgeCreator",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "challengeFactory()",
      "name": "challengeFactory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "createRollup(bytes32,uint256,uint256,uint256,uint256,address,address,address,uint256,uint256,bytes)",
      "name": "createRollup",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_machineHash",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_confirmPeriodBlocks",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_extraChallengeTimeBlocks",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_arbGasSpeedLimitPerBlock",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_baseStake",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_stakeToken",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_owner",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_sequencer",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_sequencerDelayBlocks",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_sequencerDelaySeconds",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_extraConfig",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "nodeFactory()",
      "name": "nodeFactory",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "rollupAdminFacet()",
      "name": "rollupAdminFacet",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rollupTemplate()",
      "name": "rollupTemplate",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "rollupUserFacet()",
      "name": "rollupUserFacet",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "setTemplates(address,address,address,address,address,address)",
      "name": "setTemplates",
      "description": "",
      "parameterDecorators": [
        {
          "name": "_bridgeCreator",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_rollupTemplate",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_challengeFactory",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_nodeFactory",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_rollupAdminFacet",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_rollupUserFacet",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}