{"schema":"../schema.json","tags":["oracles","celo network"],"name":"CeloProxyPriceProvider","description":"CeloProxyPriceProvider. Proxy smart contract to get the price of an asset from a price source, with Celo SortedOracles smart contracts as primary option - If the returned price by a SortedOracles is <= 0, the call is forwarded to a fallbackOracle - Owned by the Moola governance system, allowed to add sources for assets, replace them and change the fallbackOracle.","eventDecorators":[{"signature":"OwnershipTransferred(address,address)","name":"OwnershipTransferred","description":"","parameterDecorators":[{"name":"previousOwner","description":"","recommendedTypes":[],"indexed":true},{"name":"newOwner","description":"","recommendedTypes":[],"indexed":true}]}],"functionDecorators":[{"signature":"getAssetPrice(address)","name":"getAssetPrice","description":"Gets an asset price by address.","parameterDecorators":[{"name":"_asset","description":"The asset address.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256"}],"emittableEvents":[],"readOnly":true},{"signature":"getAssetsPrices(address[])","name":"getAssetsPrices","description":"Gets a list of prices from a list of assets addresses.","parameterDecorators":[{"name":"_assets","description":"The list of assets addresses.","recommendedTypes":[]}],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"uint256[]"}],"emittableEvents":[],"readOnly":true},{"signature":"getPriceFeed(address)","name":"getPriceFeed","description":"Gets the address of the fallback oracle.","parameterDecorators":[{"name":"_asset","description":"","recommendedTypes":[]}],"returnDecorators":[{"name":"_0","description":"address The addres of the fallback oracle.","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"owner()","name":"owner","description":"Returns the address of the current owner.","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"registry()","name":"registry","description":"","parameterDecorators":[],"returnDecorators":[{"name":"param0","description":"","recommendedTypes":[],"solidityType":"address"}],"emittableEvents":[],"readOnly":true},{"signature":"renounceOwnership()","name":"renounceOwnership","description":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.","parameterDecorators":[],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"transferOwnership(address)","name":"transferOwnership","description":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.","parameterDecorators":[{"name":"newOwner","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false},{"signature":"updateAssets(address[],address[])","name":"updateAssets","description":"","parameterDecorators":[{"name":"_assets","description":"","recommendedTypes":[]},{"name":"_priceFeeds","description":"","recommendedTypes":[]}],"returnDecorators":[],"emittableEvents":[],"readOnly":false}]}