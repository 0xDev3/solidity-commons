{
  "schema": "../schema.json",
  "tags": [],
  "name": "Election",
  "description": "",
  "eventDecorators": [
    {
      "signature": "ElectabilityThresholdSet(uint256)",
      "name": "ElectabilityThresholdSet",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "electabilityThreshold",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ElectableValidatorsSet(uint256,uint256)",
      "name": "ElectableValidatorsSet",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "min",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "max",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "EpochRewardsDistributedToVoters(address,uint256)",
      "name": "EpochRewardsDistributedToVoters",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "MaxNumGroupsVotedForSet(uint256)",
      "name": "MaxNumGroupsVotedForSet",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "maxNumGroupsVotedFor",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "RegistrySet(address)",
      "name": "RegistrySet",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ValidatorGroupActiveVoteRevoked(address,address,uint256,uint256)",
      "name": "ValidatorGroupActiveVoteRevoked",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "group",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "units",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ValidatorGroupMarkedEligible(address)",
      "name": "ValidatorGroupMarkedEligible",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ValidatorGroupMarkedIneligible(address)",
      "name": "ValidatorGroupMarkedIneligible",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "ValidatorGroupPendingVoteRevoked(address,address,uint256)",
      "name": "ValidatorGroupPendingVoteRevoked",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "group",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ValidatorGroupVoteActivated(address,address,uint256,uint256)",
      "name": "ValidatorGroupVoteActivated",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "group",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        },
        {
          "name": "units",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ValidatorGroupVoteCast(address,address,uint256)",
      "name": "ValidatorGroupVoteCast",
      "description": "Emitted after the implementation contract has been swapped.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "group",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "activate(address)",
      "name": "activate",
      "description": "Converts `account`'s pending votes for `group` to active votes. Pending votes cannot be activated until an election has been held.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The validator group to vote for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "activateForAccount(address,address)",
      "name": "activateForAccount",
      "description": "Converts `account`'s pending votes for `group` to active votes. Pending votes cannot be activated until an election has been held.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The validator group to vote for.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "The validateor group account's pending votes to active votes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "canReceiveVotes(address,uint256)",
      "name": "canReceiveVotes",
      "description": "Returns whether or not a group can receive the specified number of votes. Votes are not allowed to be cast that would increase a group's proportion of locked gold voting for it to greater than (numGroupMembers + 1) / min(maxElectableValidators, numRegisteredValidators)Note that groups may still receive additional votes via rewards even if this function returns false.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the group.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The number of votes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "checkProofOfPossession(address,bytes,bytes)",
      "name": "checkProofOfPossession",
      "description": "Checks a BLS proof of possession.",
      "parameterDecorators": [
        {
          "name": "sender",
          "description": "The address signed by the BLS key to generate the proof of possession.",
          "recommendedTypes": []
        },
        {
          "name": "blsKey",
          "description": "The BLS public key that the validator is using for consensus, should pass proof of possession. 48 bytes.",
          "recommendedTypes": []
        },
        {
          "name": "blsPop",
          "description": "The BLS public key proof-of-possession, which consists of a signature on the account address. 96 bytes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "distributeEpochRewards(address,uint256,address,address)",
      "name": "distributeEpochRewards",
      "description": "Distributes epoch rewards to voters for `group` in the form of active votes. Can only be called directly by the protocol.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The group whose voters will receive rewards.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The amount of rewards to distribute to voters for the group.",
          "recommendedTypes": []
        },
        {
          "name": "lesser",
          "description": "The group receiving fewer votes than `group` after the rewards are added.",
          "recommendedTypes": []
        },
        {
          "name": "greater",
          "description": "The group receiving more votes than `group` after the rewards are added.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "electNValidatorSigners(uint256,uint256)",
      "name": "electNValidatorSigners",
      "description": "Returns a list of elected validators with seats allocated to groups via the D'Hondt method. See https://en.wikipedia.org/wiki/D%27Hondt_method#Allocation for more information.",
      "parameterDecorators": [
        {
          "name": "minElectableValidators",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "maxElectableValidators",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "electValidatorSigners()",
      "name": "electValidatorSigners",
      "description": "Returns a list of elected validators with seats allocated to groups via the D'Hondt method.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "electabilityThreshold()",
      "name": "electabilityThreshold",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "value",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "electableValidators()",
      "name": "electableValidators",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "min",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "max",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "forceDecrementVotes(address,uint256,address[],address[],uint256[])",
      "name": "forceDecrementVotes",
      "description": "Reduces the total amount of `account`'s voting gold by `value` by iterating over all groups voted for by account.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "Address to revoke votes from.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "Maximum amount of votes to revoke.",
          "recommendedTypes": []
        },
        {
          "name": "lessers",
          "description": "The groups receiving fewer votes than the i'th `group`, or 0 if the i'th `group` has the fewest votes of any validator group.",
          "recommendedTypes": []
        },
        {
          "name": "greaters",
          "description": "The groups receivier more votes than the i'th `group`, or 0 if the i'th `group` has the most votes of any validator group.",
          "recommendedTypes": []
        },
        {
          "name": "indices",
          "description": "The indices of the i'th group in the account's voting list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)",
      "name": "fractionMulExp",
      "description": "calculate a * b^x for fractions a, b to `decimals` precision.",
      "parameterDecorators": [
        {
          "name": "aNumerator",
          "description": "Numerator of first fraction.",
          "recommendedTypes": []
        },
        {
          "name": "aDenominator",
          "description": "Denominator of first fraction.",
          "recommendedTypes": []
        },
        {
          "name": "bNumerator",
          "description": "Numerator of exponentiated fraction.",
          "recommendedTypes": []
        },
        {
          "name": "bDenominator",
          "description": "Denominator of exponentiated fraction.",
          "recommendedTypes": []
        },
        {
          "name": "exponent",
          "description": "exponent to raise b to.",
          "recommendedTypes": []
        },
        {
          "name": "_decimals",
          "description": "precision.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getActiveVoteUnitsForGroup(address)",
      "name": "getActiveVoteUnitsForGroup",
      "description": "Returns the total active vote units made for `group`.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the validator group.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getActiveVoteUnitsForGroupByAccount(address,address)",
      "name": "getActiveVoteUnitsForGroupByAccount",
      "description": "Returns the active vote units for `group` made by `account`.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the validator group.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "The address of the voting account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getActiveVotes()",
      "name": "getActiveVotes",
      "description": "Returns the active votes received across all groups.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getActiveVotesForGroup(address)",
      "name": "getActiveVotesForGroup",
      "description": "Returns the active votes made for `group`.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the validator group.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getActiveVotesForGroupByAccount(address,address)",
      "name": "getActiveVotesForGroupByAccount",
      "description": "Returns the active votes for `group` made by `account`.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the validator group.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "The address of the voting account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getBlockNumberFromHeader(bytes)",
      "name": "getBlockNumberFromHeader",
      "description": "Parses block number out of header.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getCurrentValidatorSigners()",
      "name": "getCurrentValidatorSigners",
      "description": "Returns get current validator signers using the precompiles.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getElectabilityThreshold()",
      "name": "getElectabilityThreshold",
      "description": "Gets the election threshold.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getElectableValidators()",
      "name": "getElectableValidators",
      "description": "Returns the minimum and maximum number of validators that can be elected.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEligibleValidatorGroups()",
      "name": "getEligibleValidatorGroups",
      "description": "Returns the list of validator groups eligible to elect validators.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochNumber()",
      "name": "getEpochNumber",
      "description": "Returns the epoch number at a block.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochNumberOfBlock(uint256)",
      "name": "getEpochNumberOfBlock",
      "description": "Returns the epoch number at a block.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number where epoch number is calculated.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getEpochSize()",
      "name": "getEpochSize",
      "description": "Returns the current epoch size in blocks.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGroupEligibility(address)",
      "name": "getGroupEligibility",
      "description": "Returns whether or not a group is eligible to receive votes. Eligible groups that have received their maximum number of votes cannot receive more.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGroupEpochRewards(address,uint256,uint256[])",
      "name": "getGroupEpochRewards",
      "description": "Returns the amount of rewards that voters for `group` are due at the end of an epoch. Eligible groups that have received their maximum number of votes cannot receive more.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The group to calculate epoch rewards for.",
          "recommendedTypes": []
        },
        {
          "name": "totalEpochRewards",
          "description": "The total amount of rewards going to all voters.",
          "recommendedTypes": []
        },
        {
          "name": "uptimes",
          "description": "Array of Fixidity representations of the validators' uptimes, between 0 and 1.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getGroupsVotedForByAccount(address)",
      "name": "getGroupsVotedForByAccount",
      "description": "Returns the groups that `account` has voted for.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account casting votes.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNumVotesReceivable(address)",
      "name": "getNumVotesReceivable",
      "description": "Returns the number of votes that a group can receive. Votes are not allowed to be cast that would increase a group's proportion of locked gold voting for it to greater than (numGroupMembers + 1) / min(maxElectableValidators, numRegisteredValidators)Note that a group's vote total may exceed this number through rewards or config changes.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the group.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getParentSealBitmap(uint256)",
      "name": "getParentSealBitmap",
      "description": "Gets the parent seal bitmap from the header at the given block number.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number to retrieve. Must be within 4 epochs of the current number.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPendingVotesForGroup(address)",
      "name": "getPendingVotesForGroup",
      "description": "Returns the pending votes made for `group`.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the validator group.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getPendingVotesForGroupByAccount(address,address)",
      "name": "getPendingVotesForGroupByAccount",
      "description": "Returns the pending votes for `group` made by `account`.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the validator group.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "The address of the voting account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalVotes()",
      "name": "getTotalVotes",
      "description": "Returns the total votes received across all groups.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalVotesByAccount(address)",
      "name": "getTotalVotesByAccount",
      "description": "Returns the total number of votes cast by an account.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The address of the account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalVotesForEligibleValidatorGroups()",
      "name": "getTotalVotesForEligibleValidatorGroups",
      "description": "Returns lists of all validator groups and the number of votes they've received.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "groups",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address[]"
        },
        {
          "name": "values",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalVotesForGroup(address)",
      "name": "getTotalVotesForGroup",
      "description": "Returns the total votes made for `group`.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the validator group.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getTotalVotesForGroupByAccount(address,address)",
      "name": "getTotalVotesForGroupByAccount",
      "description": "Returns the total votes for `group` made by `account`.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the validator group.",
          "recommendedTypes": []
        },
        {
          "name": "account",
          "description": "The address of the voting account.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVerifiedSealBitmapFromHeader(bytes)",
      "name": "getVerifiedSealBitmapFromHeader",
      "description": "Verifies the BLS signature on the header and returns the seal bitmap. The validator set used for verification is retrieved based on the parent hash field of the header. If the parent hash is not in the blockchain, verification fails.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getVersionNumber()",
      "name": "getVersionNumber",
      "description": "Returns the storage, major, minor, and patch version of the contract.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param1",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param2",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        },
        {
          "name": "param3",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hasActivatablePendingVotes(address,address)",
      "name": "hasActivatablePendingVotes",
      "description": "Returns whether or not an account's votes for the specified group can be activated. Pending votes cannot be activated until an election has been held.",
      "parameterDecorators": [
        {
          "name": "account",
          "description": "The account with pending votes.",
          "recommendedTypes": []
        },
        {
          "name": "group",
          "description": "The validator group that `account` has pending votes for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "hashHeader(bytes)",
      "name": "hashHeader",
      "description": "Computes hash of header.",
      "parameterDecorators": [
        {
          "name": "header",
          "description": "RLP encoded header.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bytes32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "initialize(address,uint256,uint256,uint256,uint256)",
      "name": "initialize",
      "description": "Used in place of the constructor to allow the contract to be upgradable via proxy. Should be called only once.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "The address of the registry core smart contract.",
          "recommendedTypes": []
        },
        {
          "name": "minElectableValidators",
          "description": "The minimum number of validators that can be elected.",
          "recommendedTypes": []
        },
        {
          "name": "maxElectableValidators",
          "description": "",
          "recommendedTypes": []
        },
        {
          "name": "_maxNumGroupsVotedFor",
          "description": "The maximum number of groups that an account can vote for at once.",
          "recommendedTypes": []
        },
        {
          "name": "_electabilityThreshold",
          "description": "The minimum ratio of votes a group needs before its members can be elected.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "initialized()",
      "name": "initialized",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "isOwner()",
      "name": "isOwner",
      "description": "Returns true if the caller is the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "markGroupEligible(address,address,address)",
      "name": "markGroupEligible",
      "description": "Marks a group eligible for electing validators.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the validator group.",
          "recommendedTypes": []
        },
        {
          "name": "lesser",
          "description": "The address of the group that has received fewer votes than this group.",
          "recommendedTypes": []
        },
        {
          "name": "greater",
          "description": "The address of the group that has received more votes than this group.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "markGroupIneligible(address)",
      "name": "markGroupIneligible",
      "description": "Marks a group ineligible for electing validators. Can only be called by the registered \"Validators\" contract.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The address of the validator group.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "maxNumGroupsVotedFor()",
      "name": "maxNumGroupsVotedFor",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minQuorumSize(uint256)",
      "name": "minQuorumSize",
      "description": "Returns the minimum number of required signers for a given block number. Computed in celo-blockchain as int(math.Ceil(float64(2*valSet.Size()) / 3)).",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "minQuorumSizeInCurrentSet()",
      "name": "minQuorumSizeInCurrentSet",
      "description": "Computes byzantine quorum from current validator set size.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberValidatorsInCurrentSet()",
      "name": "numberValidatorsInCurrentSet",
      "description": "Gets the size of the current elected validator set.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "numberValidatorsInSet(uint256)",
      "name": "numberValidatorsInSet",
      "description": "Gets the size of the validator set that must sign the given block number.",
      "parameterDecorators": [
        {
          "name": "blockNumber",
          "description": "Block number to retrieve the validator set from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "registry()",
      "name": "registry",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeActive(address,uint256,address,address,uint256)",
      "name": "revokeActive",
      "description": "Revokes `value` active votes for `group`. Fails if the account has not voted on a validator group.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The validator group to revoke votes from.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The number of votes to revoke.",
          "recommendedTypes": []
        },
        {
          "name": "lesser",
          "description": "The group receiving fewer votes than the group for which the vote was revoked, or 0 if that group has the fewest votes of any validator group.",
          "recommendedTypes": []
        },
        {
          "name": "greater",
          "description": "The group receiving more votes than the group for which the vote was revoked, or 0 if that group has the most votes of any validator group.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the group in the account's voting list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokeAllActive(address,address,address,uint256)",
      "name": "revokeAllActive",
      "description": "Revokes all active votes for `group`. Fails if the account has not voted on a validator group.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The validator group to revoke votes from.",
          "recommendedTypes": []
        },
        {
          "name": "lesser",
          "description": "The group receiving fewer votes than the group for which the vote was revoked, or 0 if that group has the fewest votes of any validator group.",
          "recommendedTypes": []
        },
        {
          "name": "greater",
          "description": "The group receiving more votes than the group for which the vote was revoked, or 0 if that group has the most votes of any validator group.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the group in the account's voting list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "revokePending(address,uint256,address,address,uint256)",
      "name": "revokePending",
      "description": "Revokes `value` pending votes for `group`. Fails if the account has not voted on a validator group.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The validator group to revoke votes from.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The number of votes to revoke.",
          "recommendedTypes": []
        },
        {
          "name": "lesser",
          "description": "The group receiving fewer votes than the group for which the vote was revoked, or 0 if that group has the fewest votes of any validator group.",
          "recommendedTypes": []
        },
        {
          "name": "greater",
          "description": "The group receiving more votes than the group for which the vote was revoked, or 0 if that group has the most votes of any validator group.",
          "recommendedTypes": []
        },
        {
          "name": "index",
          "description": "The index of the group in the account's voting list.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setElectabilityThreshold(uint256)",
      "name": "setElectabilityThreshold",
      "description": "Sets the electability threshold.",
      "parameterDecorators": [
        {
          "name": "threshold",
          "description": "Electability threshold as unwrapped Fraction.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setElectableValidators(uint256,uint256)",
      "name": "setElectableValidators",
      "description": "Updates the minimum and maximum number of validators that can be elected.",
      "parameterDecorators": [
        {
          "name": "min",
          "description": "The minimum number of validators that can be elected.",
          "recommendedTypes": []
        },
        {
          "name": "max",
          "description": "The maximum number of validators that can be elected.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setMaxNumGroupsVotedFor(uint256)",
      "name": "setMaxNumGroupsVotedFor",
      "description": "Updates the maximum number of groups an account can be voting for at once.",
      "parameterDecorators": [
        {
          "name": "_maxNumGroupsVotedFor",
          "description": "The maximum number of groups an account can vote for.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setRegistry(address)",
      "name": "setRegistry",
      "description": "Updates the address pointing to a Registry contract.",
      "parameterDecorators": [
        {
          "name": "registryAddress",
          "description": "The address of a registry contract for routing to other contracts.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "validatorSignerAddressFromCurrentSet(uint256)",
      "name": "validatorSignerAddressFromCurrentSet",
      "description": "Gets a validator address from the current validator set.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "Index of requested validator in the validator set.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "validatorSignerAddressFromSet(uint256,uint256)",
      "name": "validatorSignerAddressFromSet",
      "description": "Gets a validator address from the validator set at the given block number.",
      "parameterDecorators": [
        {
          "name": "index",
          "description": "Index of requested validator in the validator set.",
          "recommendedTypes": []
        },
        {
          "name": "blockNumber",
          "description": "Block number to retrieve the validator set from.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "vote(address,uint256,address,address)",
      "name": "vote",
      "description": "Increments the number of total and pending votes for `group`. Fails if `group` is empty or not a validator group.",
      "parameterDecorators": [
        {
          "name": "group",
          "description": "The validator group to vote for.",
          "recommendedTypes": []
        },
        {
          "name": "value",
          "description": "The amount of gold to use to vote.",
          "recommendedTypes": []
        },
        {
          "name": "lesser",
          "description": "The group receiving fewer votes than `group`, or 0 if `group` has the fewest votes of any validator group.",
          "recommendedTypes": []
        },
        {
          "name": "greater",
          "description": "The group receiving more votes than `group`, or 0 if `group` has the most votes of any validator group.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}