{
  "schema": "../schema.json",
  "tags": [
    "strategies"
  ],
  "name": "SushiStrategy",
  "description": "",
  "eventDecorators": [
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "Emitted when maximum value of ETH is raised.",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "claimOwnership()",
      "name": "claimOwnership",
      "description": "Needs to be called by `pendingOwner` to claim ownership.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "exit(uint256)",
      "name": "exit",
      "description": "Withdraw all assets in the safest way possible. This shouldn't fail.",
      "parameterDecorators": [
        {
          "name": "balance",
          "description": "The amount of tokens the caller thinks it has invested.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountAdded",
          "description": "The delta (+profit or -loss) that occured in contrast to `balance`.",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "harvest(uint256,address)",
      "name": "harvest",
      "description": "Harvest any profits made converted to the asset and pass them to the caller.",
      "parameterDecorators": [
        {
          "name": "balance",
          "description": "The amount of tokens the caller thinks it has invested.",
          "recommendedTypes": []
        },
        {
          "name": "sender",
          "description": "The address of the initiator of this transaction. Can be used for reimbursements, etc.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "amountAdded",
          "description": "The delta (+profit or -loss) that occured in contrast to `balance`.",
          "recommendedTypes": [],
          "solidityType": "int256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingOwner()",
      "name": "pendingOwner",
      "description": "",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "skim(uint256)",
      "name": "skim",
      "description": "Send the assets to the Strategy and call skim to invest them.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The amount of tokens to invest.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address,bool,bool)",
      "name": "transferOwnership",
      "description": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.",
      "parameterDecorators": [
        {
          "name": "newOwner",
          "description": "Address of the new owner.",
          "recommendedTypes": []
        },
        {
          "name": "direct",
          "description": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "recommendedTypes": []
        },
        {
          "name": "renounce",
          "description": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "withdraw(uint256)",
      "name": "withdraw",
      "description": "Withdraw assets. The returned amount can differ from the requested amount due to rounding. The `actualAmount` should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.",
      "parameterDecorators": [
        {
          "name": "amount",
          "description": "The requested amount the caller wants to withdraw.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "actualAmount",
          "description": "The real amount that is withdrawn.",
          "recommendedTypes": [],
          "solidityType": "uint256"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}