{
  "schema": "../schema.json",
  "tags": [
    "liquidity",
    "arbitrum",
    "optimism"
  ],
  "name": "DrawBuffer",
  "description": "TricleStaking V1 DrawBuffer. A DrawBuffer store a limited number of Draws before beginning to overwrite (managed via the cardinality) previous Draws.All mainnet DrawBuffer(s) are updated directly from a DrawBeacon, but non-mainnet DrawBuffer(s) (Matic, Optimism, Arbitrum, etc...) will receive a cross-chain message, duplicating the mainnet Draw configuration - enabling a prize savings liquidity network.",
  "eventDecorators": [
    {
      "signature": "DrawSet(uint32,tuple)",
      "name": "DrawSet",
      "description": "",
      "parameterDecorators": [
        {
          "name": "drawId",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "draw",
          "description": "",
          "recommendedTypes": [],
          "indexed": false
        }
      ]
    },
    {
      "signature": "ManagerTransferred(address,address)",
      "name": "ManagerTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newManager",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipOffered(address)",
      "name": "OwnershipOffered",
      "description": "",
      "parameterDecorators": [
        {
          "name": "pendingOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    },
    {
      "signature": "OwnershipTransferred(address,address)",
      "name": "OwnershipTransferred",
      "description": "",
      "parameterDecorators": [
        {
          "name": "previousOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        },
        {
          "name": "newOwner",
          "description": "",
          "recommendedTypes": [],
          "indexed": true
        }
      ]
    }
  ],
  "functionDecorators": [
    {
      "signature": "MAX_CARDINALITY()",
      "name": "MAX_CARDINALITY",
      "description": "Draws ring buffer max length.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "uint16"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "claimOwnership()",
      "name": "claimOwnership",
      "description": "Allows the `_pendingOwner` address to finalize the transfer. This function is only callable by the `_pendingOwner`.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "getBufferCardinality()",
      "name": "getBufferCardinality",
      "description": "Read a ring buffer cardinality.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Ring buffer cardinality.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDraw(uint32)",
      "name": "getDraw",
      "description": "Read a Draw from the draws ring buffer. Read a Draw using the Draw.drawId to calculate position in the draws ring buffer.",
      "parameterDecorators": [
        {
          "name": "drawId",
          "description": "Draw.drawId.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "IDrawBeacon.Draw.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "winningRandomNumber",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "drawId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "timestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint64"
            },
            {
              "name": "beaconPeriodStartedAt",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint64"
            },
            {
              "name": "beaconPeriodSeconds",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDrawCount()",
      "name": "getDrawCount",
      "description": "Gets the number of Draws held in the draw ring buffer. If no Draws have been pushed, it will return 0.If the ring buffer is full, it will return the cardinality.Otherwise, it will return the NewestDraw index + 1.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Number of Draws held in the draw ring buffer.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getDraws(uint32[])",
      "name": "getDraws",
      "description": "Read multiple Draws from the draws ring buffer. Read multiple Draws using each drawId to calculate position in the draws ring buffer.",
      "parameterDecorators": [
        {
          "name": "drawIds",
          "description": "Array of drawIds.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "IDrawBeacon.Draw[].",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "winningRandomNumber",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "drawId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "timestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint64"
            },
            {
              "name": "beaconPeriodStartedAt",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint64"
            },
            {
              "name": "beaconPeriodSeconds",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            }
          ],
          "solidityType": "tuple[]"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getNewestDraw()",
      "name": "getNewestDraw",
      "description": "Read newest Draw from draws ring buffer. Uses the nextDrawIndex to calculate the most recently added Draw.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "IDrawBeacon.Draw.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "winningRandomNumber",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "drawId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "timestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint64"
            },
            {
              "name": "beaconPeriodStartedAt",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint64"
            },
            {
              "name": "beaconPeriodSeconds",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "getOldestDraw()",
      "name": "getOldestDraw",
      "description": "Read oldest Draw from draws ring buffer. Finds the oldest Draw by comparing and/or diffing totalDraws with the cardinality.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "IDrawBeacon.Draw.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "winningRandomNumber",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint256"
            },
            {
              "name": "drawId",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            },
            {
              "name": "timestamp",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint64"
            },
            {
              "name": "beaconPeriodStartedAt",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint64"
            },
            {
              "name": "beaconPeriodSeconds",
              "description": "",
              "recommendedTypes": [],
              "solidityType": "uint32"
            }
          ],
          "solidityType": "tuple"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "manager()",
      "name": "manager",
      "description": "Gets current `_manager`.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Current `_manager` address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "owner()",
      "name": "owner",
      "description": "Returns the address of the current owner.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "param0",
          "description": "",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pendingOwner()",
      "name": "pendingOwner",
      "description": "Gets current `_pendingOwner`.",
      "parameterDecorators": [],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Current `_pendingOwner` address.",
          "recommendedTypes": [],
          "solidityType": "address"
        }
      ],
      "emittableEvents": [],
      "readOnly": true
    },
    {
      "signature": "pushDraw(tuple(uint256,uint32,uint64,uint64,uint32))",
      "name": "pushDraw",
      "description": "Push Draw onto draws ring buffer history. Push new draw onto draws history via authorized manager or owner.",
      "parameterDecorators": [
        {
          "name": "draw",
          "description": "IDrawBeacon.Draw.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "winningRandomNumber",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "drawId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "timestamp",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "beaconPeriodStartedAt",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "beaconPeriodSeconds",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Draw.drawId.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "renounceOwnership()",
      "name": "renounceOwnership",
      "description": "Renounce ownership of the contract. Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.",
      "parameterDecorators": [],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setDraw(tuple(uint256,uint32,uint64,uint64,uint32))",
      "name": "setDraw",
      "description": "Set existing Draw in draws ring buffer with new parameters. Updating a Draw should be used sparingly and only in the event an incorrect Draw parameter has been stored.",
      "parameterDecorators": [
        {
          "name": "newDraw",
          "description": "IDrawBeacon.Draw.",
          "recommendedTypes": [],
          "parameters": [
            {
              "name": "winningRandomNumber",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "drawId",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "timestamp",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "beaconPeriodStartedAt",
              "description": "",
              "recommendedTypes": []
            },
            {
              "name": "beaconPeriodSeconds",
              "description": "",
              "recommendedTypes": []
            }
          ]
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Draw.drawId.",
          "recommendedTypes": [],
          "solidityType": "uint32"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "setManager(address)",
      "name": "setManager",
      "description": "Set or change of manager. Throws if called by any account other than the owner.",
      "parameterDecorators": [
        {
          "name": "_newManager",
          "description": "New _manager address.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [
        {
          "name": "_0",
          "description": "Boolean to indicate if the operation was successful or not.",
          "recommendedTypes": [],
          "solidityType": "bool"
        }
      ],
      "emittableEvents": [],
      "readOnly": false
    },
    {
      "signature": "transferOwnership(address)",
      "name": "transferOwnership",
      "description": "Allows current owner to set the `_pendingOwner` address.",
      "parameterDecorators": [
        {
          "name": "_newOwner",
          "description": "Address to transfer ownership to.",
          "recommendedTypes": []
        }
      ],
      "returnDecorators": [],
      "emittableEvents": [],
      "readOnly": false
    }
  ]
}