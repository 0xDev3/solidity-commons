{
    "$schema": "../../schema.json",
    "tags": ["governance", "governor", "openzeppelin governor", "openzeppelin governor core"],
    "name": "Governor interface",
    "description": "Interface of the Governor core.",
    "eventDecorators": [
        {
            "signature": "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)",
            "name": "Proposal created",
            "description": "Emitted when the new proposal gets created.",
            "parameterDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Id of the created proposal.",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Proposer",
                    "description": "Account which created the proposal.",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Targets",
                    "description": "Target addresses (`to` fields in the raw transactions)",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Values",
                    "description": "Values (eth amounts to send in the raw transactions)",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Signatures",
                    "description": "Unused field",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Voting starts at",
                    "description": "Timestamp defining the start of the voting process.",
                    "recommendedTypes": [],
                    "indexed": false
                }
            ]
        },
        {
            "signature": "ProposalCanceled(uint256)",
            "name": "Proposal canceled",
            "description": "Emitted when the proposal gets canceled.",
            "parameterDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Id of the canceled proposal.",
                    "recommendedTypes": [],
                    "indexed": false
                }
            ]
        },
        {
            "signature": "ProposalExecuted(uint256)",
            "name": "Proposal executed",
            "description": "Emitted when the proposal gets executed.",
            "parameterDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Id of the proposal that was executed.",
                    "recommendedTypes": [],
                    "indexed": false
                }
            ]
        },
        {
            "signature": "VoteCast(address,uint256,uint8,uint256,string)",
            "name": "Vote cast",
            "description": "Emitted when the new vote is casted for the proposal.",
            "parameterDecorators": [
                {
                    "name": "Voter",
                    "description": "Account casting the vote.",
                    "recommendedTypes": [],
                    "indexed": true
                },
                {
                    "name": "Proposal Id",
                    "description": "Id of the proposal.",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Support",
                    "description": "Voting option chosen by the voter.",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Weight",
                    "description": "Voter's voting power,",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Reason",
                    "description": "Reason provided by the voter when casting the vote.",
                    "recommendedTypes": [],
                    "indexed": false
                }
            ]
        },
        {
            "signature": "VoteCastWithParams(address,uint256,uint8,uint256,string,bytes)",
            "name": "Vote cast with params",
            "description": "Emitted when the new vote is casted for the proposal, with the additional vote params attached to the vote.",
            "parameterDecorators": [
                {
                    "name": "Voter",
                    "description": "Account casting the vote.",
                    "recommendedTypes": [],
                    "indexed": true
                },
                {
                    "name": "Proposal Id",
                    "description": "Id of the proposal.",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Support",
                    "description": "Voting option chosen by the voter.",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Weight",
                    "description": "Voter's voting power,",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Reason",
                    "description": "Reason provided by the voter when casting the vote.",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Parameters",
                    "description": "Additional parameters provided by the voter if the counting mechanism requires additional parameters together with the voting option.",
                    "recommendedTypes": [],
                    "indexed": false
                }
            ]
        }
    ],
    "functionDecorators": [
        {
            "signature": "name()",
            "name": "Get name",
            "description": "Returns the name of the governor instance (used in building the ERC712 domain separator).",
            "parameterDecorators": [],
            "returnDecorators": [
                {
                    "name": "Name",
                    "description": "Name of the instance",
                    "recommendedTypes": [],
                    "solidityType": "string"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "version()",
            "name": "Get version",
            "description": "Returns the version of the governor instance (used in building the ERC712 domain separator).",
            "parameterDecorators": [],
            "returnDecorators": [
                {
                    "name": "Version",
                    "description": "Version of the governor instance",
                    "recommendedTypes": [],
                    "solidityType": "string"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "COUNTING_MODE()",
            "name": "Get counting mode",
            "description": "Description of the possible vote options for castVote and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`",
            "parameterDecorators": [],
            "returnDecorators": [
                {
                    "name": "Counting mode",
                    "description": "Counting used by this governance system.",
                    "recommendedTypes": [],
                    "solidityType": "string"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "hashProposal(address[],uint256[],bytes[],bytes32)",
            "name": "Calculate proposal hash",
            "description": "Hashing function used to (re)build the proposal id from the proposal details.",
            "parameterDecorators": [
                {
                    "name": "Targets",
                    "description": "Target smart contracts.",
                    "recommendedTypes": []
                },
                {
                    "name": "Values",
                    "description": "Values of ether to attach to every action target call.",
                    "recommendedTypes": []
                },
                {
                    "name": "Calldatas",
                    "description": "Encoded function with parameters to call on targets.",
                    "recommendedTypes": []
                },
                {
                    "name": "Description hash",
                    "description": "Hash of the proposal description",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Proposal hash",
                    "description": "Hash of the provided proposal data.",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "state(uint256)",
            "name": "Get state",
            "description": "Returns the state of the given proposal.",
            "parameterDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Proposal Id",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "State",
                    "description": "0 - Pending; 1 - Active; 2 - Canceled; 3 - Defeated; 4 - Succeeded; 5 - Queued; 6 - Expired; 7 - Executed;",
                    "recommendedTypes": [],
                    "solidityType": "uint8"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "proposalSnapshot(uint256)",
            "name": "Get proposal snapshot",
            "description": "Returns the snapshot - block number at which the voting starts.",
            "parameterDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Proposal Id",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Snapshot",
                    "description": "Block number at which the voting will start",
                    "recommendedTypes": [
                        "types.blockNumber"
                    ],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "proposalDeadline(uint256)",
            "name": "Get proposal deadline",
            "description": "Returns the given proposal deadline, block number at which the voting ends.",
            "parameterDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Proposal Id",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Proposal deadline",
                    "description": "Block number of the proposal deadline",
                    "recommendedTypes": [
                        "types.blockNumber"
                    ],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "votingDelay()",
            "name": "Get voting delay",
            "description": "Delay, in number of block, between the proposal is created and the vote starts.",
            "parameterDecorators": [],
            "returnDecorators": [
                {
                    "name": "Delay",
                    "description": "Voting delay in number of blocks.",
                    "recommendedTypes": [
                        "types.durationBlocks"
                    ],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "votingPeriod()",
            "name": "Get voting period",
            "description": "Delay, in number of blocks, between the vote start and vote ends.",
            "parameterDecorators": [],
            "returnDecorators": [
                {
                    "name": "Voting period",
                    "description": "Voting period in number of blocks.",
                    "recommendedTypes": [
                        "types.durationBlocks"
                    ],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "quorum(uint256)",
            "name": "Get past quorum",
            "description": "Retrieves the minimum number of votes casted for a proposal to be successful. This allows to scale the quorum depending on values such as the totalSupply of a token at this block (see ERC20Votes).",
            "parameterDecorators": [
                {
                    "name": "Block number",
                    "description": "Block number at which the quorum is being read.",
                    "recommendedTypes": [
                        "types.blockTimestamp"
                    ]
                }
            ],
            "returnDecorators": [
                {
                    "name": "Voting power",
                    "description": "Voting power required for a proposal to pass, at a given block number.",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "getVotes(address,uint256)",
            "name": "Get votes",
            "description": "Returns the voting power the account at a specified point in time.",
            "parameterDecorators": [
                {
                    "name": "Account",
                    "description": "Account wallet address.",
                    "recommendedTypes": []
                },
                {
                    "name": "Block number",
                    "description": "Block number at which the voting power is checked for the account.",
                    "recommendedTypes": [
                        "types.blockNumber"
                    ]
                }
            ],
            "returnDecorators": [
                {
                    "name": "Voting power",
                    "description": "Voting power of the account",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "getVotesWithParams(address,uint256,bytes)",
            "name": "Get votes with parameters",
            "description": "Returns the voting power the account owned at a specified point in time given additional encoded parameters.",
            "parameterDecorators": [
                {
                    "name": "Account",
                    "description": "Account wallet address.",
                    "recommendedTypes": []
                },
                {
                    "name": "Block number",
                    "description": "Block number at which the voting power is checked for the account.",
                    "recommendedTypes": [
                        "types.blockNumber"
                    ]
                },
                {
                    "name": "Encoded parameters",
                    "description": "Encoded parameters",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Voting power",
                    "description": "Voting power of the account",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "hasVoted(uint256,address)",
            "name": "Has voted",
            "description": "Returns wether given account has cast a vote on the given proposal.",
            "parameterDecorators": [
                {
                    "name": "Account",
                    "description": "Account wallet address.",
                    "recommendedTypes": []
                },
                {
                    "name": "Proposal Id",
                    "description": "Proposal Id",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Has voted",
                    "description": "Has user voted result",
                    "recommendedTypes": [],
                    "solidityType": "bool"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "propose(address[],uint256[],bytes[],string)",
            "name": "Create proposal",
            "description": "Creates new proposal",
            "parameterDecorators": [
                {
                    "name": "Targets",
                    "description": "Target smart contracts to call if proposal is executed.",
                    "recommendedTypes": []
                },
                {
                    "name": "Values",
                    "description": "Values of ether to attach to every action target call.",
                    "recommendedTypes": []
                },
                {
                    "name": "Calldatas",
                    "description": "Encoded function with parameters to call on targets.",
                    "recommendedTypes": []
                },
                {
                    "name": "Description",
                    "description": "Proposal description",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Proposal id",
                    "description": "Id of the successfully created proposal",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [
                "ProposalCreated(uint256,address,address[],address[],string[],bytes[],uint256,uint256,string)"
            ],
            "readOnly": false
        },
        {
            "signature": "execute(address[],uint256[],bytes[],bytes32)",
            "name": "Execute proposal",
            "description": "Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the deadline to be reached.",
            "parameterDecorators": [
                {
                    "name": "Targets",
                    "description": "Target smart contracts defined in the successful proposal.",
                    "recommendedTypes": []
                },
                {
                    "name": "Values",
                    "description": "Values of ether to attach to every action of the passed proposal.",
                    "recommendedTypes": []
                },
                {
                    "name": "Calldatas",
                    "description": "Encoded function with parameters to call on targets defined in the proposal.",
                    "recommendedTypes": []
                },
                {
                    "name": "Description hash",
                    "description": "Hash of the proposal description",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Returns the proposal id of the executed proposal.",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [
                "ProposalExecuted(uint256)"
            ],
            "readOnly": false
        },
        {
            "signature": "castVote(uint256,uint8)",
            "name": "Cast vote",
            "description": "Casts vote for provided proposal.",
            "parameterDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Id of the proposal for which the vote is being cast.",
                    "recommendedTypes": []
                },
                {
                    "name": "Vote decision",
                    "description": "Identifier of the vote decision.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Voting power",
                    "description": "Voter's voting power used when casting the vote.",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [
                "VoteCast(address,uint256,uint8,uint256,string)"      
            ],
            "readOnly": false
        },
        {
            "signature": "castVoteWithReason(uint256,uint8,string)",
            "name": "Cast vote with reason",
            "description": "Casts vote for a proposal while also providing the reason for the vote.",
            "parameterDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Id of the proposal for which the vote is being cast.",
                    "recommendedTypes": []
                },
                {
                    "name": "Vote decision",
                    "description": "Identifier of the vote decision.",
                    "recommendedTypes": []
                },
                {
                    "name": "Reason",
                    "description": "Reason behind this vote decision - any textual value.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Voting power",
                    "description": "Voter's voting power used when casting the vote.",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [
                "VoteCast(address,uint256,uint8,uint256,string)"
            ],
            "readOnly": false
        },
        {
            "signature": "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
            "name": "Cast vote with reason",
            "description": "Casts vote for a proposal while also providing the reason for the vote and additional encoded parameters.",
            "parameterDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Id of the proposal for which the vote is being cast.",
                    "recommendedTypes": []
                },
                {
                    "name": "Vote decision",
                    "description": "Identifier of the vote decision.",
                    "recommendedTypes": []
                },
                {
                    "name": "Reason",
                    "description": "Reason behind this vote decision - any textual value.",
                    "recommendedTypes": []
                },
                {
                    "name": "Parameters",
                    "description": "Encoded additional parameters attached to the vote decision.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Voting power",
                    "description": "Voter's voting power used when casting the vote.",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [
                "VoteCast(address,uint256,uint8,uint256,string)",
                "VoteCastWithParams(address,uint256,uint8,uint256,string,bytes)"
            ],
            "readOnly": false
        },
        {
            "signature": "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
            "name": "Cast vote by signature",
            "description": "Casts a vote for proposal using the user's cryptographic signature.",
            "parameterDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Id of the proposal for which the vote is being cast.",
                    "recommendedTypes": []
                },
                {
                    "name": "Vote decision",
                    "description": "Identifier of the vote decision.",
                    "recommendedTypes": []
                },
                {
                    "name": "V",
                    "description": "V",
                    "recommendedTypes": []
                },
                {
                    "name": "R",
                    "description": "R",
                    "recommendedTypes": []
                },
                {
                    "name": "S",
                    "description": "S",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Voting power",
                    "description": "Voter's voting power used when casting the vote.",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [
                "VoteCast(address,uint256,uint8,uint256,string)" 
            ],
            "readOnly": false
        },
        {
            "signature": "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)",
            "name": "Cast vote by signature with data",
            "description": "Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature.",
            "parameterDecorators": [
                {
                    "name": "Proposal Id",
                    "description": "Id of the proposal for which the vote is being cast.",
                    "recommendedTypes": []
                },
                {
                    "name": "Vote decision",
                    "description": "Identifier of the vote decision.",
                    "recommendedTypes": []
                },
                {
                    "name": "Reason",
                    "description": "Reason behind this vote decision - any textual value.",
                    "recommendedTypes": []
                },
                {
                    "name": "Parameters",
                    "description": "Encoded additional parameters attached to the vote decision.",
                    "recommendedTypes": []
                },
                {
                    "name": "V",
                    "description": "V",
                    "recommendedTypes": []
                },
                {
                    "name": "R",
                    "description": "R",
                    "recommendedTypes": []
                },
                {
                    "name": "S",
                    "description": "S",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Voting power",
                    "description": "Voter's voting power used when casting the vote.",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [
                "VoteCast(address,uint256,uint8,uint256,string)",
                "VoteCastWithParams(address,uint256,uint8,uint256,string,bytes)"
            ],
            "readOnly": false
        }
    ]
}
