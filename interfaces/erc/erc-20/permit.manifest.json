{
    "$schema": "../../schema.json",
    "tags": ["off-chain allowance", "signed allowance", "permit tokens"],
    "name": "ERC20 Permit",
    "description": "Extension containing the permit method, which can be used to change an account's ERC20 allowance by presenting a message signed by the account.",
    "eventDecorators": [
        {
            "signature": "Transfer(address,address,uint256)",
            "name": "Token transfer",
            "description": "Indicates that ERC20 transfer has occurred.",
            "parameterDecorators": [
                {
                    "name": "Sender address",
                    "description": "Address from which the ERC20 token was sent.",
                    "recommendedTypes": [],
                    "indexed": true
                },
                {
                    "name": "Recipient address",
                    "description": "Address to which the ERC20 token was sent.",
                    "recommendedTypes": [],
                    "indexed": true
                },
                {
                    "name": "Token amount",
                    "description": "The amount of ERC20 token that was sent.",
                    "recommendedTypes": [],
                    "hints": [
                        {
                            "id": "decimals",
                            "decimals_fetcher": "$this.decimals()"
                        }
                    ],
                    "indexed": false
                }
            ]
        }
    ],
    "functionDecorators": [
        {
            "signature": "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
            "name": "Permit",
            "description": "Grants the given spender rights to manage given amount of owner's tokens. Owner must construct his intent off-chain and call this function while providing the message signature (see EIP-2612).",
            "parameterDecorators": [
                {
                    "name": "Owner",
                    "description": "Account of the owner who constructed and signed the allowance.",
                    "recommendedTypes": []
                },
                {
                    "name": "Spender",
                    "description": "Spender account defined in the signed message.",
                    "recommendedTypes": []
                },
                {
                    "name": "Amount",
                    "description": "Amount of tokens to approve, defined in the signed message.",
                    "recommendedTypes": [],
                    "hints": [
                        {
                            "id": "decimals",
                            "decimals_fetcher": "$this.decimals()"
                        }
                    ]
                },
                {
                    "name": "Deadline",
                    "description": "Deadline, defined in the signed message, after which the signed message becomes invalid and cannot be processed anymore by calling this function.",
                    "recommendedTypes": []
                },
                {
                    "name": "V",
                    "description": "V",
                    "recommendedTypes": []
                },
                {
                    "name": "R",
                    "description": "R",
                    "recommendedTypes": []
                },
                {
                    "name": "S",
                    "description": "S",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [
                "Approval(address,address,uint256)"
            ],
            "readOnly": false
        },
        {
            "signature": "nonces(address)",
            "name": "Get next valid nonce",
            "description": "Returns the next valid nonce which must be used by the account when constructing and signing delegateBySig() or permit() functions.",
            "parameterDecorators": [
                {
                    "name": "Account",
                    "description": "Account for which the next valid nonce is queried.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Nonce",
                    "description": "Next valid nonce to be used for signing off-chain transactions: see permit() and delegateBySig() functions.",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "DOMAIN_SEPARATOR()",
            "name": "Get domain separator",
            "description": "Returns the domain separator used in the encoding of the signature for permit, as defined by EIP712.",
            "parameterDecorators": [],
            "returnDecorators": [
                {
                    "name": "Domain separator",
                    "description": "Domain separator is defined according to the EIP712. The domain separator should be unique to the contract and chain to prevent replay attacks from other domains.",
                    "recommendedTypes": [],
                    "solidityType": "bytes32"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        }
    ]
}
