{
    "$schema": "../../../schema.json",
    "tags": [
        "chainlink",
        "oracle",
        "aggregator",
        "validator"
    ],
    "name": "Automation Registry Base Interface",
    "description": "This specification defines standard functions for the contract that uses the automation registry base interface.",
    "eventDecorators": [],
    "functionDecorators": [
        {
            "signature": "registerUpkeep(address,uint32,address,bytes,bytes)",
            "name": "Register upkeep",
            "description": "Registers a new upkeep contract with the registry. The upkeep contract must implement the UpkeepInterface.",
            "parameterDecorators": [
                {
                    "name": "Target",
                    "description": "The address of the contract that will be called when upkeep is needed.",
                    "recommendedTypes": ["common.contract-caller"]
                },
                {
                    "name": "Gas limit",
                    "description": "The maximum amount of gas that will be used to execute your function on-chain.",
                    "recommendedTypes": []
                },
                {
                    "name": "Admin",
                    "description": "Address for Upkeep administrator. Upkeep administrator can fund contract and withdraw funds from contract.",
                    "recommendedTypes": ["common.contract-caller"]
                },
                {
                    "name": "Check data",
                    "description": "Data bytes with which the keeper should call checkUpkeep, if upkeep is needed. ABI-encoded fixed and specified at Upkeep registration and used in every checkUpkeep. Can be empty (0x).",
                    "recommendedTypes": []
                },
                {
                    "name": "Target",
                    "description": "The address of the contract that will be called when upkeep is needed.",
                    "recommendedTypes": ["common.contract-caller"]
                }
            ],
            "returnDecorators": [
                {
                    "name": "Id",
                    "description": "The id of the newly registered upkeep.",
                    "recommendedTypes": [],
                    "solidityType": "uint256"
                }
            ],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "cancelUpkeep(uint256)",
            "name": "Cancel upkeep",
            "description": "Cancels an upkeep by marking it as cancelled in the registry. The upkeep must exist and be cancellable by the caller.",
            "parameterDecorators": [
                {
                    "name": "Id",
                    "description": "The id of the upkeep to cancel.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "pauseUpkeep(uint256)",
            "name": "Pause upkeep",
            "description": "Pauses an upkeep. The upkeep must exist and be pausable by the caller.",
            "parameterDecorators": [
                {
                    "name": "Id",
                    "description": "The id of the upkeep to pause.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "unpauseUpkeep(uint256)",
            "name": "Unpause upkeep",
            "description": "Resumes an upkeep. The upkeep must exist and be paused.",
            "parameterDecorators": [
                {
                    "name": "Id",
                    "description": "The id of the upkeep to unpause.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "transferUpkeepAdmin(uint256,address)",
            "name": "Transfer upkeep admin",
            "description": "Transfers the admin role of an upkeep to a new address. The upkeep must exist and be transferable by the caller.",
            "parameterDecorators": [
                {
                    "name": "Id",
                    "description": "The id of the upkeep to cancel.",
                    "recommendedTypes": []
                },
                {
                    "name": "Proposed",
                    "description": "The address of the new admin.",
                    "recommendedTypes": ["common.contract-caller"]
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "acceptUpkeepAdmin(uint256)",
            "name": "Accept upkeep admin",
            "description": "Accepts the admin role of an upkeep. The upkeep must exist and be transferable by the caller.",
            "parameterDecorators": [
                {
                    "name": "Id",
                    "description": "The id of the upkeep for which to accept the admin role.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "updateCheckData(uint256,bytes)",
            "name": "Update check data",
            "description": "Updates the check data of an upkeep. The upkeep must exist and be updatable by the caller.",
            "parameterDecorators": [
                {
                    "name": "Id",
                    "description": "The id of the upkeep to cancel.",
                    "recommendedTypes": []
                },
                {
                    "name": "New check data",
                    "description": "The new check data.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "addFunds(uint256,uint96)",
            "name": "Add funds",
            "description": "Add funds to the upkeep contract.",
            "parameterDecorators": [
                {
                    "name": "Id",
                    "description": "The id of the upkeep to cancel.",
                    "recommendedTypes": []
                },
                {
                    "name": "Amount",
                    "description": "The amount of funds to add.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "setUpkeepGasLimit(uint256,uint32)",
            "name": "Set upkeep gas limit",
            "description": "Set the gas limit for the upkeep.",
            "parameterDecorators": [
                {
                    "name": "Id",
                    "description": "The id of the upkeep to cancel.",
                    "recommendedTypes": []
                },
                {
                    "name": "Gas limit",
                    "description": "The new gas limit.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "setUpkeepOffchainConfig(uint256,bytes)",
            "name": "Set upkeep offchain config",
            "description": "Set the offchain config for the upkeep.",
            "parameterDecorators": [
                {
                    "name": "Id",
                    "description": "The id of the upkeep to cancel.",
                    "recommendedTypes": []
                },
                {
                    "name": "New check data",
                    "description": "The new check data.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "getUpkeep(uint256)",
            "name": "Get upkeep",
            "description": "Get the upkeep with the given id.",
            "parameterDecorators": [
                {
                    "name": "Id",
                    "description": "The id of the upkeep to cancel.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "getActiveUpkeepIDs(uint256)",
            "name": "Get active upkeep IDs",
            "description": "Get the IDs of all active upkeeps.",
            "parameterDecorators": [
                {
                    "name": "Start index",
                    "description": "The index to start at.",
                    "recommendedTypes": []
                },
                {
                    "name": "Max count",
                    "description": "The maximum number of IDs to return.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Array of IDs",
                    "description": "The IDs of the active upkeeps.",
                    "recommendedTypes": [],
                    "solidityType": "uint256[]"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "getTransmitterInfo(address)",
            "name": "Get transmitter info",
            "description": "Get the transmitter info for the given address.",
            "parameterDecorators": [
                {
                    "name": "Transmitter address",
                    "description": "The oracle addresses that can report answers to this aggregator.",
                    "recommendedTypes": ["common.contract-caller"]
                }
            ],
            "returnDecorators": [
                {
                    "name": "Active",
                    "description": "Is the transmitter active or not.",
                    "recommendedTypes": [],
                    "solidityType": "bool"
                },
                {
                    "name": "Index",
                    "description": "The index of the transmitter.",
                    "recommendedTypes": [],
                    "solidityType": "uint8"
                },
                {
                    "name": "Balance",
                    "description": "The balance of the transmitter.",
                    "recommendedTypes": [],
                    "solidityType": "uint96"
                },
                {
                    "name": "Last collected",
                    "description": "The last time the transmitter was updated or refreshed.",
                    "recommendedTypes": ["types.unixTimestamp"],
                    "solidityType": "uint96"
                },
                {
                    "name": "Payee",
                    "description": "The IDs of the active upkeeps.",
                    "recommendedTypes": ["common.contract-caller"],
                    "solidityType": "address"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        },
        {
            "signature": "getState()",
            "name": "Get state",
            "description": "Get the state of the upkeep contract.",
            "parameterDecorators": [],
            "returnDecorators": [
                {
                    "name": "State",
                    "description": "The state of the upkeep contract.",
                    "parameters": [
                        {
                            "name": "Nonce",
                            "description": "The nonce of the upkeep contract.",
                            "recommendedTypes": [],
                            "solidityType": "uint32"
                        },
                        {
                            "name": "Owner link balance",
                            "description": "The link balance of the upkeep contract.",
                            "recommendedTypes": [],
                            "solidityType": "uint96"
                        },
                        {
                            "name": "Expected link balance",
                            "description": "The expected link balance of the upkeep contract.",
                            "recommendedTypes": [],
                            "solidityType": "uint256"
                        },
                        {
                            "name": "Total premium",
                            "description": "The total premium of the upkeep contract.",
                            "recommendedTypes": [],
                            "solidityType": "uint96"
                        },
                        {
                            "name": "Number of upkeeps",
                            "description": "The number of upkeeps in the upkeep contract.",
                            "recommendedTypes": [],
                            "solidityType": "uint256"
                        },
                        {
                            "name": "Config count",
                            "description": "The config count of the upkeep contract.",
                            "recommendedTypes": [],
                            "solidityType": "uint32"
                        },
                        {
                            "name": "Latest config block number",
                            "description": "The latest config block number of the upkeep contract.",
                            "recommendedTypes": ["types.blockNumber"],
                            "solidityType": "uint32"
                        },
                        {
                            "name": "Latest config digest",
                            "description": "The latest config digest of the upkeep contract.",
                            "recommendedTypes": [],
                            "solidityType": "bytes32"
                        },
                        {
                            "name": "Latest epoch",
                            "description": "The latest epoch of the upkeep contract.",
                            "recommendedTypes": [],
                            "solidityType": "uint32"
                        },
                        {
                            "name": "Paused",
                            "description": "Is the upkeep contract paused or not.",
                            "recommendedTypes": [],
                            "solidityType": "bool"
                        }
                    ],
                    "recommendedTypes": [],
                    "solidityType": "tuple"
                },
                {
                    "name": "Config",
                    "description": "The index of the transmitter.",
                    "parameters": [
                        {
                            "name": "Payment premium PPB",
                            "description": "The payment premium rate that oracles receive on top of being reimbursed for gas, measured in parts per billion.",
                            "recommendedTypes": [],
                            "solidityType": "uint32"
                        },
                        {
                            "name": "Flat fee micro link",
                            "description": "Flat fee paid to oracles for performing upkeeps, priced in MicroLink; can be used in conjunction with or independently of paymentPremiumPPB.",
                            "recommendedTypes": [],
                            "solidityType": "uint32"
                        },
                        {
                            "name": "Check gas limit",
                            "description": "Gas limit when checking for upkeep.",
                            "recommendedTypes": [],
                            "solidityType": "uint32"
                        },
                        {
                            "name": "Staleness seconds",
                            "description": "Number of seconds that is allowed for feed data to be stale before switching to the fallback pricing.",
                            "recommendedTypes": ["types.durationSeconds"],
                            "solidityType": "uint24"
                        },
                        {
                            "name": "Gas ceiling multiplier",
                            "description": "Multiplier to apply to the fast gas feed price when calculating the payment ceiling for keepers.",
                            "recommendedTypes": [],
                            "solidityType": "uint16"
                        },
                        {
                            "name": "Min upkeep spend",
                            "description": "Minimum LINK that an upkeep must spend before cancelling.",
                            "recommendedTypes": [],
                            "solidityType": "uint96"
                        },
                        {
                            "name": "Max perform gas",
                            "description": "Max executeGas allowed for an upkeep on this registry.",
                            "recommendedTypes": [],
                            "solidityType": "uint32"
                        },
                        {
                            "name": "Max check data size",
                            "description": "The max check data size of the upkeep contract.",
                            "recommendedTypes": [],
                            "solidityType": "uint32"
                        },
                        {
                            "name": "Max perform data size",
                            "description": "The max perform data size of the upkeep contract.",
                            "recommendedTypes": [],
                            "solidityType": "uint32"
                        },
                        {
                            "name": "Fallback gas price",
                            "description": "Gas price used if the gas price feed is stale.",
                            "recommendedTypes": [],
                            "solidityType": "uint256"
                        },
                        {
                            "name": "Fallback link price",
                            "description": "LINK price used if the LINK price feed is stale.",
                            "recommendedTypes": [],
                            "solidityType": "uint256"
                        },
                        {
                            "name": "Transcoder",
                            "description": "Address of the transcoder contract.",
                            "recommendedTypes": [],
                            "solidityType": "address"
                        },
                        {
                            "name": "Registrar",
                            "description": "Address of the registrar contract.",
                            "recommendedTypes": [],
                            "solidityType": "address"
                        }
                    ],
                    "recommendedTypes": [],
                    "solidityType": "tuple"
                },
                {
                    "name": "Signers",
                    "description": "The signers of the upkeep contract.",
                    "recommendedTypes": [],
                    "solidityType": "address[]"
                },
                {
                    "name": "Transmitters",
                    "description": "The transmitters of the upkeep contract.",
                    "recommendedTypes": ["common.contract-caller"],
                    "solidityType": "address[]"
                },
                {
                    "name": "F",
                    "description": "",
                    "recommendedTypes": [],
                    "solidityType": "uint8"
                }
            ],
            "emittableEvents": [],
            "readOnly": true
        }
    ]
}