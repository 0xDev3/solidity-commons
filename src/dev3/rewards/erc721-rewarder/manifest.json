{
    "$schema": "../../../schema.json",
    "tags": [
        "nft distribution",
        "vouchers",
        "secret code airdrop"
    ],
    "implements": [
        "erc.erc-173",
        "erc.erc-721.receiver"
    ],
    "name": "Nft Rewarder",
    "description": "Smart contract which allows creating claimable nft coupons.",
    "eventDecorators": [
        {
            "signature": "AddReward(bytes32)",
            "name": "Create coupon",
            "description": "Emitted when the new coupon code is created.",
            "parameterDecorators": [
                {
                    "name": "Coupon code",
                    "description": "Coupon code identifier",
                    "recommendedTypes": [],
                    "indexed": false
                }
            ]
        },
        {
            "signature": "ClaimReward(address,bytes32)",
            "name": "Use coupon",
            "description": "Emitted when the coupon code is used.",
            "parameterDecorators": [
                {
                    "name": "Coupon user",
                    "description": "Coupon user",
                    "recommendedTypes": [],
                    "indexed": false
                },
                {
                    "name": "Coupon code",
                    "description": "Coupon code identifier",
                    "recommendedTypes": [],
                    "indexed": false
                }
            ]
        }
    ],
    "constructorDecorators": [
        {
            "signature": "constructor(address)",
            "name": "Constructor",
            "description": "Creates new coupone programme service",
            "parameterDecorators": [
                {
                    "name": "Owner",
                    "description": "Wallet address of the coupon programme administrator",
                    "recommendedTypes": [
                        "common.contract-caller"
                    ]
                }
            ],
            "emittableEvents": []
        }
    ],
    "functionDecorators": [
        {
            "signature": "addRewards(tuple(bytes32,address,uint256,uint256)[])",
            "name": "Create coupons",
            "description": "Creates batch of coupons",
            "parameterDecorators": [
                {
                    "name": "Coupons",
                    "description": "List of generated coupons",
                    "recommendedTypes": [],
                    "parameters": [
                        {
                            "name": "Coupon identifier",
                            "description": "Coupon identifier",
                            "recommendedTypes": []
                        },
                        {
                            "name": "Reward NFT token",
                            "description": "NFT Token received when using the coupon",
                            "recommendedTypes": [
                                "erc.erc-721"
                            ]
                        },
                        {
                            "name": "Token Id",
                            "description": "Concrete NFT item id from the given nft collection, claimable by using this coupon",
                            "recommendedTypes": []
                        },
                        {
                            "name": "Expiry date",
                            "description": "The deadline for the coupon usage",
                            "recommendedTypes": [
                                "types.unixTimestamp"
                            ]
                        }
                    ]
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [
                "AddReward(bytes32)"
            ],
            "readOnly": false
        },
        {
            "signature": "claimReward(string)",
            "name": "Use coupon",
            "description": "Claims the coupon",
            "parameterDecorators": [
                {
                    "name": "Coupon",
                    "description": "Coupon identifier being used",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [
                "ClaimReward(address,bytes32)"
            ],
            "readOnly": false
        },
        {
            "signature": "calculateHash(string)",
            "name": "Calculate hash",
            "description": "Calculates the hash for the given secret key. The hash has to be attached to the reward data then calling the addRewards function. The secret key from which the hash was generated must be provided in the claim function to claim the reward successfully.",
            "parameterDecorators": [
                {
                    "name": "Secret key",
                    "description": "Secret key string",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Calculated hash",
                    "description": "Calculated hash",
                    "recommendedTypes": [],
                    "solidityType": "bytes32"
                }
            ],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "calculateHashes(string[])",
            "name": "Calculate hashes",
            "description": "Calculates the hashes list for the given secret keys list.",
            "parameterDecorators": [
                {
                    "name": "Secret keys list",
                    "description": "Secret keys list",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Calculated hashes list",
                    "description": "Calculated hashes list",
                    "recommendedTypes": [],
                    "solidityType": "bytes32[]"
                }
            ],
            "emittableEvents": [],
            "readOnly": false
        }
    ]
}
