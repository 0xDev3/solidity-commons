{
    "$schema": "../../../../schema.json",
    "tags": [
        "nft"
    ],
    "implements": [
        "erc.erc-173",
        "erc.erc-721",
        "erc.erc-721.metadata"
    ],
    "name": "NFT (Mintable, Ownable)",
    "description": "ERC721 NFT implementation mintable by admin.",
    "eventDecorators": [
        {
            "signature": "Transfer(address,address,uint256)",
            "name": "Token transfer",
            "description": "Indicates that ERC721 transfer has occurred.",
            "parameterDecorators": [
                {
                    "name": "Sender address",
                    "description": "Address from which the ERC721 token was sent.",
                    "recommendedTypes": [],
                    "indexed": true
                },
                {
                    "name": "Recipient address",
                    "description": "Address to which the ERC721 token was sent.",
                    "recommendedTypes": [],
                    "indexed": true
                },
                {
                    "name": "Token Id",
                    "description": "Id of the specific nft within the ERC721 collection which was transferred to another wallet",
                    "recommendedTypes": [],
                    "indexed": true
                }
            ]
        }
    ],
    "constructorDecorators": [
        {
            "signature": "constructor(string,string,string)",
            "name": "Constructor",
            "description": "Creates new ERC721 collection by defining token name, token symbol and the base URI to be used for calculating unique URIs for every collection item. Base URI can be omitted (set empty value) and can be set by admin later by calling the `setBaseURI()` function.",
            "parameterDecorators": [
                {
                    "name": "Token name",
                    "description": "Descriptive token name of this ERC721 nft collection. (for example, `Game Item`)",
                    "recommendedTypes": []
                },
                {
                    "name": "Token symbol",
                    "description": "Short token symbol to be used for this ERC721 nft collection. (for example, `GITM`)",
                    "recommendedTypes": []
                },
                {
                    "name": "Base token URI",
                    "description": "Base token URI to be used for calculating unique URI for every collection item. This URI should point to the folder containing json files named 0,1,2... and so on. For example `ipfs://{long-ipfs-hash}/` is a valid base URI if this hash points directly the folder with the file names starting from `0`, `1`... where every file contains the json description of the concrete nft item. Note that the slash symbol (`/`) at the end of the token URI is very important and if omitted, specifc nft items will not be displayed properly!",
                    "recommendedTypes": []
                }
            ],
            "emittableEvents": []
        }
    ],
    "functionDecorators": [
        {
            "signature": "setBaseURI(string)",
            "name": "Set Base URI",
            "description": "Sets the base URI for the NFT collection. Base token URI is used for calculating unique URI for every collection item. This URI should point to the folder containing json files named 0,1,2... and so on. For example `ipfs://{long-ipfs-hash}/` is a valid base URI if this hash points directly the folder with the file names starting from `0`, `1`... where every file contains the json description of the concrete nft item. Note that the slash symbol (`/`) at the end of the token URI is very important and if omitted, specifc nft items will not be displayed properly!",
            "parameterDecorators": [
                {
                    "name": "Base token URI",
                    "description": "Base token URI to be used for calculating unique URI for every collection item. This URI should point to the folder containing json files named 0,1,2... and so on. For example `ipfs://{long-ipfs-hash}/` is a valid base URI if this hash points directly the folder with the file names starting from `0`, `1`... where every file contains the json description of the concrete nft item. Note that the slash symbol (`/`) at the end of the token URI is very important and if omitted, specifc nft items will not be displayed properly!",
                    "recommendedTypes": [
                        "types.ipfsHash"
                    ]
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [],
            "readOnly": false
        },
        {
            "signature": "mint(address,uint256)",
            "name": "Mint",
            "description": "Creates a new batch of freshly minted tokens for the given owner wallet. Its token IDs will be automatically assigned (and available on the emitted Transfer event), and the token URI autogenerated based on the base URI configured for this ERC721 collection. This function is only callable by the admin.",
            "parameterDecorators": [
                {
                    "name": "Owner wallet",
                    "description": "Wallet address which is going to become an owner of the newly created token.",
                    "recommendedTypes": [
                        "erc.erc-721.receiver",
                        "common.contract-caller"
                    ]
                },
                {
                    "name": "Items amount",
                    "description": "Number of new item collections to create and transfer to the given owner's wallet.",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [
                "Transfer(address,address,uint256)"
            ],
            "readOnly": false
        }
    ]
}
